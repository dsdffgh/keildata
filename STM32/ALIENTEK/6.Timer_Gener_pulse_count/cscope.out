cscope 15 $HOME\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count"               0003120425
	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\KEY\key.c

19 
	~"BSP/KEY/key.h
"

21 
	$key_√∂√¥
()

23 
GPIO_In√¥Ty‚â•Def
 
gpio_√∂√¥_¬∞ruÀò
;

25 
	`__HAL_RCC_GPIOE_CLK_ENABLE
();

27 
gpio_√∂√¥_¬∞ruÀò
.
P√∂
 = 
GPIO_PIN_4
;

28 
gpio_√∂√¥_¬∞ruÀò
.
Mode
 = 
GPIO_MODE_INPUT
;

29 
gpio_√∂√¥_¬∞ruÀò
.
Pu≈í
 = 
GPIO_PULLUP
;

31 
	`HAL_GPIO_In√¥
(
GPIOE
, &
gpio_√∂√¥_¬∞ruÀò
);

33 
	}
}

35 
u√∂t8_t
 
	$key_sÀán
()

37 if‚Äì
	`HAL_GPIO_R√≥dP√∂
(
GPIOE
, 
GPIO_PIN_4
) == 0 )

39 
	`d√±ay_ms
( 10 );

41 if‚Äì
	`HAL_GPIO_R√≥dP√∂
(
GPIOE
, 
GPIO_PIN_4
) == 0 )

43 
	`HAL_GPIO_R√≥dP√∂
(
GPIOE
, 
GPIO_PIN_4
) == 0 );

49 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\KEY\key.h

19 #i‚Äöde‚Ä°
__KEY_H__


20 
	#__KEY_H__


	)

22 
	~"SYSTEM/d√±ay/d√±ay.h
"

23 
	~"SYSTEM/sys/sys.h
"

25 
key_√∂√¥
();

26 
u√∂t8_t
 
key_sÀán
();

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\LED\led.c

25 
	~"BSP/LED/√Äd.h
"

33 
	$√Äd_√∂√¥
()

35 
GPIO_In√¥Ty‚â•Def
 
gpio_√∂√¥_¬∞ruÀò
;

36 
	`LED0_GPIO_CLK_ENABLE
();

37 
	`LED1_GPIO_CLK_ENABLE
();

39 
gpio_√∂√¥_¬∞ruÀò
.
P√∂
 = 
LED0_GPIO_PIN
;

40 
gpio_√∂√¥_¬∞ruÀò
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

41 
gpio_√∂√¥_¬∞ruÀò
.
Pu≈í
 = 
GPIO_PULLUP
;

42 
gpio_√∂√¥_¬∞ruÀò
.
S‚â•ed
 = 
GPIO_SPEED_FREQ_HIGH
;

43 
	`HAL_GPIO_In√¥
(
LED0_GPIO_PORT
, &
gpio_√∂√¥_¬∞ruÀò
);

45 
gpio_√∂√¥_¬∞ruÀò
.
P√∂
 = 
LED1_GPIO_PIN
;

46 
	`HAL_GPIO_In√¥
(
LED1_GPIO_PORT
, &
gpio_√∂√¥_¬∞ruÀò
);

49 
	`LED0
(1);

50 
	`LED1
(1);

51 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\LED\led.h

25 #i‚Äöde‚Ä°
_LED_H


26 
	#_LED_H


	)

27 
	~"SYSTEM/sys/sys.h
"

33 
	#LED0_GPIO_PORT
 
GPIOB


	)

34 
	#LED0_GPIO_PIN
 
GPIO_PIN_5


	)

35 
	#LED0_GPIO_CLK_ENABLE
(√ãdo{ 
	`__HAL_RCC_GPIOB_CLK_ENABLE
(); }0√ã

	)

37 
	#LED1_GPIO_PORT
 
GPIOE


	)

38 
	#LED1_GPIO_PIN
 
GPIO_PIN_5


	)

39 
	#LED1_GPIO_CLK_ENABLE
(√ãdo{ 
	`__HAL_RCC_GPIOE_CLK_ENABLE
(); }0√ã

	)

43 
	#LED0
(
x
) do{ x ? \

44 
	`HAL_GPIO_Wr√¥eP√∂
(
LED0_GPIO_PORT
, 
LED0_GPIO_PIN
, 
GPIO_PIN_SET
) : \

45 
	`HAL_GPIO_Wr√¥eP√∂
(
LED0_GPIO_PORT
, 
LED0_GPIO_PIN
, 
GPIO_PIN_RESET
); \

46 }0√ã

	)

48 
	#LED1
(
x
) do{ x ? \

49 
	`HAL_GPIO_Wr√¥eP√∂
(
LED1_GPIO_PORT
, 
LED1_GPIO_PIN
, 
GPIO_PIN_SET
) : \

50 
	`HAL_GPIO_Wr√¥eP√∂
(
LED1_GPIO_PORT
, 
LED1_GPIO_PIN
, 
GPIO_PIN_RESET
); \

51 }0√ã

	)

54 
	#LED0_TOGGLE
(√ãdo{ 
	`HAL_GPIO_Togg√ÄP√∂
(
LED0_GPIO_PORT
, 
LED0_GPIO_PIN
); }0√ã

	)

55 
	#LED1_TOGGLE
(√ãdo{ 
	`HAL_GPIO_Togg√ÄP√∂
(
LED1_GPIO_PORT
, 
LED1_GPIO_PIN
); }0√ã

	)

59 
√Äd_√∂√¥
();

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\TIMER\gtim.c

19 
	~"BSP/TIMER/gtim.h
"

21 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 
	gg_timx_pwm_cjy_h‚Ñ¢d√Ä
;

24 
	$gtim_timx_pwm_chy_√∂√¥
(
u√∂t16_t
 
¬®r
, u√∂t16_√†
psc
)

26 --
¬®r
;

27 --
psc
;

29 
g_timx_pwm_cjy_h‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
 = 
TIM3
;

30 
g_timx_pwm_cjy_h‚Ñ¢d√Ä
.
In√¥
.
P¬™sÀá√Är
 = 
psc
;

31 
g_timx_pwm_cjy_h‚Ñ¢d√Ä
.
In√¥
.
P√Æiod
 = 
¬®r
;

32 
	`HAL_TIM_PWM_In√¥
(&
g_timx_pwm_cjy_h‚Ñ¢d√Ä
);

34 
TIM_OC_In√¥Ty‚â•Def
 
timx_oc_pwm_chy
;

35 
timx_oc_pwm_chy
.
OCMode
 = 
TIM_OCMODE_PWM1
;

36 
timx_oc_pwm_chy
.
Pul¬£
 = 
¬®r
 >> 4;

37 
timx_oc_pwm_chy
.
OCPÔ¨Å¬®√¥y
 = 
TIM_OCPOLARITY_LOW
;

38 
	`HAL_TIM_PWM_C‚ÅÑfigCh‚Ñ¢‚àöl
(&
g_timx_pwm_cjy_h‚Ñ¢d√Ä
, &
timx_oc_pwm_chy
, 
TIM_CHANNEL_2
);

39 
	`HAL_TIM_PWM_S√®œÄ
(&
g_timx_pwm_cjy_h‚Ñ¢d√Ä
, 
TIM_CHANNEL_2
);

40 
	}
}

44 
	$HAL_TIM_PWM_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

47 i‚Ä°‚Äì
htim
->
In¬∞‚Ñ¢Àö
 =Ô£ø
TIM3
 ) {

48 
GPIO_In√¥Ty‚â•Def
 
gpio_√∂√¥_¬∞ruÀò
;

49 
	`__HAL_RCC_GPIOB_CLK_ENABLE
();

50 
	`__HAL_RCC_TIM3_CLK_ENABLE
();

52 
gpio_√∂√¥_¬∞ruÀò
.
P√∂
 = 
GPIO_PIN_5
;

53 
gpio_√∂√¥_¬∞ruÀò
.
Mode
 = 
GPIO_MODE_AF_PP
;

54 
gpio_√∂√¥_¬∞ruÀò
.
Pu≈í
 = 
GPIO_PULLUP
;

55 
gpio_√∂√¥_¬∞ruÀò
.
S‚â•ed
 = 
GPIO_SPEED_FREQ_HIGH
;

56 
	`HAL_GPIO_In√¥
(
GPIOB
, &
gpio_√∂√¥_¬∞ruÀò
);

59 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

60 
	`__HAL_AFIO_REMAP_TIM3_PARTIAL
();

62 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\TIMER\gtim.h

20 #i‚Äöde‚Ä° 
gtim_INC


21 
	#gtim_INC


	)

23 
	~"SYSTEM/sys/sys.h
"

24 
gtim_timx_pwm_chy_√∂√¥
(
u√∂t16_t
 
¬®r
, u√∂t16_√†
psc
);

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f103xe.h

37 #i‚Äöde‚Ä°
__STM32F103xE_H


38 
	#__STM32F103xE_H


	)

40 #ifde‚Ä°
__Àùlu‚Ä¢lus


50 
	#__CM3_REV
 0x0200U

	)

51 
	#__MPU_PRESENT
 0U

	)

52 
	#__NVIC_PRIO_BITS
 4U

	)

53 
	#__V√≠d‚Äπ_SysTickC‚ÅÑfig
 0U

	)

72 
N‚ÅÑMaskab√ÄI¬°_IRQn
 = -14,

73 
H¬®dFau‚Ä¶_IRQn
 = -13,

74 
Mem‚ÄπyM‚Ñ¢agem√≠t_IRQn
 = -12,

75 
BusFau‚Ä¶_IRQn
 = -11,

76 
U√ügeFau‚Ä¶_IRQn
 = -10,

77 
SVC√Ül_IRQn
 = -5,

78 
DebugM‚ÅÑ√¥‚Äπ_IRQn
 = -4,

79 
P√≠dSV_IRQn
 = -2,

80 
SysTick_IRQn
 = -1,

83 
WWDG_IRQn
 = 0,

84 
PVD_IRQn
 = 1,

85 
TAMPER_IRQn
 = 2,

86 
RTC_IRQn
 = 3,

87 
FLASH_IRQn
 = 4,

88 
RCC_IRQn
 = 5,

89 
EXTI0_IRQn
 = 6,

90 
EXTI1_IRQn
 = 7,

91 
EXTI2_IRQn
 = 8,

92 
EXTI3_IRQn
 = 9,

93 
EXTI4_IRQn
 = 10,

94 
DMA1_Ch‚Ñ¢‚àöl1_IRQn
 = 11,

95 
DMA1_Ch‚Ñ¢‚àöl2_IRQn
 = 12,

96 
DMA1_Ch‚Ñ¢‚àöl3_IRQn
 = 13,

97 
DMA1_Ch‚Ñ¢‚àöl4_IRQn
 = 14,

98 
DMA1_Ch‚Ñ¢‚àöl5_IRQn
 = 15,

99 
DMA1_Ch‚Ñ¢‚àöl6_IRQn
 = 16,

100 
DMA1_Ch‚Ñ¢‚àöl7_IRQn
 = 17,

101 
ADC1_2_IRQn
 = 18,

102 
USB_HP_CAN1_TX_IRQn
 = 19,

103 
USB_LP_CAN1_RX0_IRQn
 = 20,

104 
CAN1_RX1_IRQn
 = 21,

105 
CAN1_SCE_IRQn
 = 22,

106 
EXTI9_5_IRQn
 = 23,

107 
TIM1_BRK_IRQn
 = 24,

108 
TIM1_UP_IRQn
 = 25,

109 
TIM1_TRG_COM_IRQn
 = 26,

110 
TIM1_CC_IRQn
 = 27,

111 
TIM2_IRQn
 = 28,

112 
TIM3_IRQn
 = 29,

113 
TIM4_IRQn
 = 30,

114 
I2C1_EV_IRQn
 = 31,

115 
I2C1_ER_IRQn
 = 32,

116 
I2C2_EV_IRQn
 = 33,

117 
I2C2_ER_IRQn
 = 34,

118 
SPI1_IRQn
 = 35,

119 
SPI2_IRQn
 = 36,

120 
USART1_IRQn
 = 37,

121 
USART2_IRQn
 = 38,

122 
USART3_IRQn
 = 39,

123 
EXTI15_10_IRQn
 = 40,

124 
RTC_A≈ìrm_IRQn
 = 41,

125 
USBWakeUp_IRQn
 = 42,

126 
TIM8_BRK_IRQn
 = 43,

127 
TIM8_UP_IRQn
 = 44,

128 
TIM8_TRG_COM_IRQn
 = 45,

129 
TIM8_CC_IRQn
 = 46,

130 
ADC3_IRQn
 = 47,

131 
FSMC_IRQn
 = 48,

132 
SDIO_IRQn
 = 49,

133 
TIM5_IRQn
 = 50,

134 
SPI3_IRQn
 = 51,

135 
UART4_IRQn
 = 52,

136 
UART5_IRQn
 = 53,

137 
TIM6_IRQn
 = 54,

138 
TIM7_IRQn
 = 55,

139 
DMA2_Ch‚Ñ¢‚àöl1_IRQn
 = 56,

140 
DMA2_Ch‚Ñ¢‚àöl2_IRQn
 = 57,

141 
DMA2_Ch‚Ñ¢‚àöl3_IRQn
 = 58,

142 
DMA2_Ch‚Ñ¢‚àöl4_5_IRQn
 = 59,

143 } 
	tIRQn_Ty‚â•
;

149 
	~"c‚Äπe_cm3.h
"

150 
	~"sy¬∞em_¬∞m32f1xx.h
"

151 
	~<¬∞d√∂t.h
>

163 
__IO
 
u√∂t32_t
 
SR
;

164 
__IO
 
u√∂t32_t
 
CR1
;

165 
__IO
 
u√∂t32_t
 
CR2
;

166 
__IO
 
u√∂t32_t
 
SMPR1
;

167 
__IO
 
u√∂t32_t
 
SMPR2
;

168 
__IO
 
u√∂t32_t
 
JOFR1
;

169 
__IO
 
u√∂t32_t
 
JOFR2
;

170 
__IO
 
u√∂t32_t
 
JOFR3
;

171 
__IO
 
u√∂t32_t
 
JOFR4
;

172 
__IO
 
u√∂t32_t
 
HTR
;

173 
__IO
 
u√∂t32_t
 
LTR
;

174 
__IO
 
u√∂t32_t
 
SQR1
;

175 
__IO
 
u√∂t32_t
 
SQR2
;

176 
__IO
 
u√∂t32_t
 
SQR3
;

177 
__IO
 
u√∂t32_t
 
JSQR
;

178 
__IO
 
u√∂t32_t
 
JDR1
;

179 
__IO
 
u√∂t32_t
 
JDR2
;

180 
__IO
 
u√∂t32_t
 
JDR3
;

181 
__IO
 
u√∂t32_t
 
JDR4
;

182 
__IO
 
u√∂t32_t
 
DR
;

183 } 
	tADC_Ty‚â•Def
;

187 
__IO
 
u√∂t32_t
 
SR
;

188 
__IO
 
u√∂t32_t
 
CR1
;

189 
__IO
 
u√∂t32_t
 
CR2
;

190 
u√∂t32_t
 
RESERVED
[16];

191 
__IO
 
u√∂t32_t
 
DR
;

192 } 
	tADC_Comm‚ÅÑ_Ty‚â•Def
;

200 
u√∂t32_t
 
RESERVED0
;

201 
__IO
 
u√∂t32_t
 
DR1
;

202 
__IO
 
u√∂t32_t
 
DR2
;

203 
__IO
 
u√∂t32_t
 
DR3
;

204 
__IO
 
u√∂t32_t
 
DR4
;

205 
__IO
 
u√∂t32_t
 
DR5
;

206 
__IO
 
u√∂t32_t
 
DR6
;

207 
__IO
 
u√∂t32_t
 
DR7
;

208 
__IO
 
u√∂t32_t
 
DR8
;

209 
__IO
 
u√∂t32_t
 
DR9
;

210 
__IO
 
u√∂t32_t
 
DR10
;

211 
__IO
 
u√∂t32_t
 
RTCCR
;

212 
__IO
 
u√∂t32_t
 
CR
;

213 
__IO
 
u√∂t32_t
 
CSR
;

214 
u√∂t32_t
 
RESERVED13
[2];

215 
__IO
 
u√∂t32_t
 
DR11
;

216 
__IO
 
u√∂t32_t
 
DR12
;

217 
__IO
 
u√∂t32_t
 
DR13
;

218 
__IO
 
u√∂t32_t
 
DR14
;

219 
__IO
 
u√∂t32_t
 
DR15
;

220 
__IO
 
u√∂t32_t
 
DR16
;

221 
__IO
 
u√∂t32_t
 
DR17
;

222 
__IO
 
u√∂t32_t
 
DR18
;

223 
__IO
 
u√∂t32_t
 
DR19
;

224 
__IO
 
u√∂t32_t
 
DR20
;

225 
__IO
 
u√∂t32_t
 
DR21
;

226 
__IO
 
u√∂t32_t
 
DR22
;

227 
__IO
 
u√∂t32_t
 
DR23
;

228 
__IO
 
u√∂t32_t
 
DR24
;

229 
__IO
 
u√∂t32_t
 
DR25
;

230 
__IO
 
u√∂t32_t
 
DR26
;

231 
__IO
 
u√∂t32_t
 
DR27
;

232 
__IO
 
u√∂t32_t
 
DR28
;

233 
__IO
 
u√∂t32_t
 
DR29
;

234 
__IO
 
u√∂t32_t
 
DR30
;

235 
__IO
 
u√∂t32_t
 
DR31
;

236 
__IO
 
u√∂t32_t
 
DR32
;

237 
__IO
 
u√∂t32_t
 
DR33
;

238 
__IO
 
u√∂t32_t
 
DR34
;

239 
__IO
 
u√∂t32_t
 
DR35
;

240 
__IO
 
u√∂t32_t
 
DR36
;

241 
__IO
 
u√∂t32_t
 
DR37
;

242 
__IO
 
u√∂t32_t
 
DR38
;

243 
__IO
 
u√∂t32_t
 
DR39
;

244 
__IO
 
u√∂t32_t
 
DR40
;

245 
__IO
 
u√∂t32_t
 
DR41
;

246 
__IO
 
u√∂t32_t
 
DR42
;

247 } 
	tBKP_Ty‚â•Def
;

255 
__IO
 
u√∂t32_t
 
TIR
;

256 
__IO
 
u√∂t32_t
 
TDTR
;

257 
__IO
 
u√∂t32_t
 
TDLR
;

258 
__IO
 
u√∂t32_t
 
TDHR
;

259 } 
	tCAN_TxMa√ªBox_Ty‚â•Def
;

267 
__IO
 
u√∂t32_t
 
RIR
;

268 
__IO
 
u√∂t32_t
 
RDTR
;

269 
__IO
 
u√∂t32_t
 
RDLR
;

270 
__IO
 
u√∂t32_t
 
RDHR
;

271 } 
	tCAN_FIFOMa√ªBox_Ty‚â•Def
;

279 
__IO
 
u√∂t32_t
 
FR1
;

280 
__IO
 
u√∂t32_t
 
FR2
;

281 } 
	tCAN_F√ª√£rRegi¬∞√Æ_Ty‚â•Def
;

289 
__IO
 
u√∂t32_t
 
MCR
;

290 
__IO
 
u√∂t32_t
 
MSR
;

291 
__IO
 
u√∂t32_t
 
TSR
;

292 
__IO
 
u√∂t32_t
 
RF0R
;

293 
__IO
 
u√∂t32_t
 
RF1R
;

294 
__IO
 
u√∂t32_t
 
IER
;

295 
__IO
 
u√∂t32_t
 
ESR
;

296 
__IO
 
u√∂t32_t
 
BTR
;

297 
u√∂t32_t
 
RESERVED0
[88];

298 
CAN_TxMa√ªBox_Ty‚â•Def
 
sTxMa√ªBox
[3];

299 
CAN_FIFOMa√ªBox_Ty‚â•Def
 
sFIFOMa√ªBox
[2];

300 
u√∂t32_t
 
RESERVED1
[12];

301 
__IO
 
u√∂t32_t
 
FMR
;

302 
__IO
 
u√∂t32_t
 
FM1R
;

303 
u√∂t32_t
 
RESERVED2
;

304 
__IO
 
u√∂t32_t
 
FS1R
;

305 
u√∂t32_t
 
RESERVED3
;

306 
__IO
 
u√∂t32_t
 
FFA1R
;

307 
u√∂t32_t
 
RESERVED4
;

308 
__IO
 
u√∂t32_t
 
FA1R
;

309 
u√∂t32_t
 
RESERVED5
[8];

310 
CAN_F√ª√£rRegi¬∞√Æ_Ty‚â•Def
 
sF√ª√£rRegi¬∞√Æ
[14];

311 } 
	tCAN_Ty‚â•Def
;

319 
__IO
 
u√∂t32_t
 
DR
;

320 
__IO
 
u√∂t8_t
 
IDR
;

321 
u√∂t8_t
 
RESERVED0
;

322 
u√∂t16_t
 
RESERVED1
;

323 
__IO
 
u√∂t32_t
 
CR
;

324 } 
	tCRC_Ty‚â•Def
;

332 
__IO
 
u√∂t32_t
 
CR
;

333 
__IO
 
u√∂t32_t
 
SWTRIGR
;

334 
__IO
 
u√∂t32_t
 
DHR12R1
;

335 
__IO
 
u√∂t32_t
 
DHR12L1
;

336 
__IO
 
u√∂t32_t
 
DHR8R1
;

337 
__IO
 
u√∂t32_t
 
DHR12R2
;

338 
__IO
 
u√∂t32_t
 
DHR12L2
;

339 
__IO
 
u√∂t32_t
 
DHR8R2
;

340 
__IO
 
u√∂t32_t
 
DHR12RD
;

341 
__IO
 
u√∂t32_t
 
DHR12LD
;

342 
__IO
 
u√∂t32_t
 
DHR8RD
;

343 
__IO
 
u√∂t32_t
 
DOR1
;

344 
__IO
 
u√∂t32_t
 
DOR2
;

345 } 
	tDAC_Ty‚â•Def
;

353 
__IO
 
u√∂t32_t
 
IDCODE
;

354 
__IO
 
u√∂t32_t
 
CR
;

355 }
	tDBGMCU_Ty‚â•Def
;

363 
__IO
 
u√∂t32_t
 
CCR
;

364 
__IO
 
u√∂t32_t
 
CNDTR
;

365 
__IO
 
u√∂t32_t
 
CPAR
;

366 
__IO
 
u√∂t32_t
 
CMAR
;

367 } 
	tDMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
;

371 
__IO
 
u√∂t32_t
 
ISR
;

372 
__IO
 
u√∂t32_t
 
IFCR
;

373 } 
	tDMA_Ty‚â•Def
;

383 
__IO
 
u√∂t32_t
 
IMR
;

384 
__IO
 
u√∂t32_t
 
EMR
;

385 
__IO
 
u√∂t32_t
 
RTSR
;

386 
__IO
 
u√∂t32_t
 
FTSR
;

387 
__IO
 
u√∂t32_t
 
SWIER
;

388 
__IO
 
u√∂t32_t
 
PR
;

389 } 
	tEXTI_Ty‚â•Def
;

397 
__IO
 
u√∂t32_t
 
ACR
;

398 
__IO
 
u√∂t32_t
 
KEYR
;

399 
__IO
 
u√∂t32_t
 
OPTKEYR
;

400 
__IO
 
u√∂t32_t
 
SR
;

401 
__IO
 
u√∂t32_t
 
CR
;

402 
__IO
 
u√∂t32_t
 
AR
;

403 
__IO
 
u√∂t32_t
 
RESERVED
;

404 
__IO
 
u√∂t32_t
 
OBR
;

405 
__IO
 
u√∂t32_t
 
WRPR
;

406 } 
	tFLASH_Ty‚â•Def
;

414 
__IO
 
u√∂t16_t
 
RDP
;

415 
__IO
 
u√∂t16_t
 
USER
;

416 
__IO
 
u√∂t16_t
 
D¬©a0
;

417 
__IO
 
u√∂t16_t
 
D¬©a1
;

418 
__IO
 
u√∂t16_t
 
WRP0
;

419 
__IO
 
u√∂t16_t
 
WRP1
;

420 
__IO
 
u√∂t16_t
 
WRP2
;

421 
__IO
 
u√∂t16_t
 
WRP3
;

422 } 
	tOB_Ty‚â•Def
;

430 
__IO
 
u√∂t32_t
 
BTCR
[8];

431 } 
	tFSMC_B‚Ñ¢k1_Ty‚â•Def
;

439 
__IO
 
u√∂t32_t
 
BWTR
[7];

440 } 
	tFSMC_B‚Ñ¢k1E_Ty‚â•Def
;

448 
__IO
 
u√∂t32_t
 
PCR2
;

449 
__IO
 
u√∂t32_t
 
SR2
;

450 
__IO
 
u√∂t32_t
 
PMEM2
;

451 
__IO
 
u√∂t32_t
 
PATT2
;

452 
u√∂t32_t
 
RESERVED0
;

453 
__IO
 
u√∂t32_t
 
ECCR2
;

454 
u√∂t32_t
 
RESERVED1
;

455 
u√∂t32_t
 
RESERVED2
;

456 
__IO
 
u√∂t32_t
 
PCR3
;

457 
__IO
 
u√∂t32_t
 
SR3
;

458 
__IO
 
u√∂t32_t
 
PMEM3
;

459 
__IO
 
u√∂t32_t
 
PATT3
;

460 
u√∂t32_t
 
RESERVED3
;

461 
__IO
 
u√∂t32_t
 
ECCR3
;

462 } 
	tFSMC_B‚Ñ¢k2_3_Ty‚â•Def
;

470 
__IO
 
u√∂t32_t
 
PCR4
;

471 
__IO
 
u√∂t32_t
 
SR4
;

472 
__IO
 
u√∂t32_t
 
PMEM4
;

473 
__IO
 
u√∂t32_t
 
PATT4
;

474 
__IO
 
u√∂t32_t
 
PIO4
;

475 } 
	tFSMC_B‚Ñ¢k4_Ty‚â•Def
;

483 
__IO
 
u√∂t32_t
 
CRL
;

484 
__IO
 
u√∂t32_t
 
CRH
;

485 
__IO
 
u√∂t32_t
 
IDR
;

486 
__IO
 
u√∂t32_t
 
ODR
;

487 
__IO
 
u√∂t32_t
 
BSRR
;

488 
__IO
 
u√∂t32_t
 
BRR
;

489 
__IO
 
u√∂t32_t
 
LCKR
;

490 } 
	tGPIO_Ty‚â•Def
;

498 
__IO
 
u√∂t32_t
 
EVCR
;

499 
__IO
 
u√∂t32_t
 
MAPR
;

500 
__IO
 
u√∂t32_t
 
EXTICR
[4];

501 
u√∂t32_t
 
RESERVED0
;

502 
__IO
 
u√∂t32_t
 
MAPR2
;

503 } 
	tAFIO_Ty‚â•Def
;

510 
__IO
 
u√∂t32_t
 
CR1
;

511 
__IO
 
u√∂t32_t
 
CR2
;

512 
__IO
 
u√∂t32_t
 
OAR1
;

513 
__IO
 
u√∂t32_t
 
OAR2
;

514 
__IO
 
u√∂t32_t
 
DR
;

515 
__IO
 
u√∂t32_t
 
SR1
;

516 
__IO
 
u√∂t32_t
 
SR2
;

517 
__IO
 
u√∂t32_t
 
CCR
;

518 
__IO
 
u√∂t32_t
 
TRISE
;

519 } 
	tI2C_Ty‚â•Def
;

527 
__IO
 
u√∂t32_t
 
KR
;

528 
__IO
 
u√∂t32_t
 
PR
;

529 
__IO
 
u√∂t32_t
 
RLR
;

530 
__IO
 
u√∂t32_t
 
SR
;

531 } 
	tIWDG_Ty‚â•Def
;

539 
__IO
 
u√∂t32_t
 
CR
;

540 
__IO
 
u√∂t32_t
 
CSR
;

541 } 
	tPWR_Ty‚â•Def
;

549 
__IO
 
u√∂t32_t
 
CR
;

550 
__IO
 
u√∂t32_t
 
CFGR
;

551 
__IO
 
u√∂t32_t
 
CIR
;

552 
__IO
 
u√∂t32_t
 
APB2RSTR
;

553 
__IO
 
u√∂t32_t
 
APB1RSTR
;

554 
__IO
 
u√∂t32_t
 
AHBENR
;

555 
__IO
 
u√∂t32_t
 
APB2ENR
;

556 
__IO
 
u√∂t32_t
 
APB1ENR
;

557 
__IO
 
u√∂t32_t
 
BDCR
;

558 
__IO
 
u√∂t32_t
 
CSR
;

561 } 
	tRCC_Ty‚â•Def
;

569 
__IO
 
u√∂t32_t
 
CRH
;

570 
__IO
 
u√∂t32_t
 
CRL
;

571 
__IO
 
u√∂t32_t
 
PRLH
;

572 
__IO
 
u√∂t32_t
 
PRLL
;

573 
__IO
 
u√∂t32_t
 
DIVH
;

574 
__IO
 
u√∂t32_t
 
DIVL
;

575 
__IO
 
u√∂t32_t
 
CNTH
;

576 
__IO
 
u√∂t32_t
 
CNTL
;

577 
__IO
 
u√∂t32_t
 
ALRH
;

578 
__IO
 
u√∂t32_t
 
ALRL
;

579 } 
	tRTC_Ty‚â•Def
;

587 
__IO
 
u√∂t32_t
 
POWER
;

588 
__IO
 
u√∂t32_t
 
CLKCR
;

589 
__IO
 
u√∂t32_t
 
ARG
;

590 
__IO
 
u√∂t32_t
 
CMD
;

591 
__I
 
u√∂t32_t
 
RESPCMD
;

592 
__I
 
u√∂t32_t
 
RESP1
;

593 
__I
 
u√∂t32_t
 
RESP2
;

594 
__I
 
u√∂t32_t
 
RESP3
;

595 
__I
 
u√∂t32_t
 
RESP4
;

596 
__IO
 
u√∂t32_t
 
DTIMER
;

597 
__IO
 
u√∂t32_t
 
DLEN
;

598 
__IO
 
u√∂t32_t
 
DCTRL
;

599 
__I
 
u√∂t32_t
 
DCOUNT
;

600 
__I
 
u√∂t32_t
 
STA
;

601 
__IO
 
u√∂t32_t
 
ICR
;

602 
__IO
 
u√∂t32_t
 
MASK
;

603 
u√∂t32_t
 
RESERVED0
[2];

604 
__I
 
u√∂t32_t
 
FIFOCNT
;

605 
u√∂t32_t
 
RESERVED1
[13];

606 
__IO
 
u√∂t32_t
 
FIFO
;

607 } 
	tSDIO_Ty‚â•Def
;

615 
__IO
 
u√∂t32_t
 
CR1
;

616 
__IO
 
u√∂t32_t
 
CR2
;

617 
__IO
 
u√∂t32_t
 
SR
;

618 
__IO
 
u√∂t32_t
 
DR
;

619 
__IO
 
u√∂t32_t
 
CRCPR
;

620 
__IO
 
u√∂t32_t
 
RXCRCR
;

621 
__IO
 
u√∂t32_t
 
TXCRCR
;

622 
__IO
 
u√∂t32_t
 
I2SCFGR
;

623 
__IO
 
u√∂t32_t
 
I2SPR
;

624 } 
	tSPI_Ty‚â•Def
;

631 
__IO
 
u√∂t32_t
 
CR1
;

632 
__IO
 
u√∂t32_t
 
CR2
;

633 
__IO
 
u√∂t32_t
 
SMCR
;

634 
__IO
 
u√∂t32_t
 
DIER
;

635 
__IO
 
u√∂t32_t
 
SR
;

636 
__IO
 
u√∂t32_t
 
EGR
;

637 
__IO
 
u√∂t32_t
 
CCMR1
;

638 
__IO
 
u√∂t32_t
 
CCMR2
;

639 
__IO
 
u√∂t32_t
 
CCER
;

640 
__IO
 
u√∂t32_t
 
CNT
;

641 
__IO
 
u√∂t32_t
 
PSC
;

642 
__IO
 
u√∂t32_t
 
ARR
;

643 
__IO
 
u√∂t32_t
 
RCR
;

644 
__IO
 
u√∂t32_t
 
CCR1
;

645 
__IO
 
u√∂t32_t
 
CCR2
;

646 
__IO
 
u√∂t32_t
 
CCR3
;

647 
__IO
 
u√∂t32_t
 
CCR4
;

648 
__IO
 
u√∂t32_t
 
BDTR
;

649 
__IO
 
u√∂t32_t
 
DCR
;

650 
__IO
 
u√∂t32_t
 
DMAR
;

651 
__IO
 
u√∂t32_t
 
OR
;

652 }
	tTIM_Ty‚â•Def
;

661 
__IO
 
u√∂t32_t
 
SR
;

662 
__IO
 
u√∂t32_t
 
DR
;

663 
__IO
 
u√∂t32_t
 
BRR
;

664 
__IO
 
u√∂t32_t
 
CR1
;

665 
__IO
 
u√∂t32_t
 
CR2
;

666 
__IO
 
u√∂t32_t
 
CR3
;

667 
__IO
 
u√∂t32_t
 
GTPR
;

668 } 
	tUSART_Ty‚â•Def
;

676 
__IO
 
u√∂t16_t
 
EP0R
;

677 
__IO
 
u√∂t16_t
 
RESERVED0
;

678 
__IO
 
u√∂t16_t
 
EP1R
;

679 
__IO
 
u√∂t16_t
 
RESERVED1
;

680 
__IO
 
u√∂t16_t
 
EP2R
;

681 
__IO
 
u√∂t16_t
 
RESERVED2
;

682 
__IO
 
u√∂t16_t
 
EP3R
;

683 
__IO
 
u√∂t16_t
 
RESERVED3
;

684 
__IO
 
u√∂t16_t
 
EP4R
;

685 
__IO
 
u√∂t16_t
 
RESERVED4
;

686 
__IO
 
u√∂t16_t
 
EP5R
;

687 
__IO
 
u√∂t16_t
 
RESERVED5
;

688 
__IO
 
u√∂t16_t
 
EP6R
;

689 
__IO
 
u√∂t16_t
 
RESERVED6
;

690 
__IO
 
u√∂t16_t
 
EP7R
;

691 
__IO
 
u√∂t16_t
 
RESERVED7
[17];

692 
__IO
 
u√∂t16_t
 
CNTR
;

693 
__IO
 
u√∂t16_t
 
RESERVED8
;

694 
__IO
 
u√∂t16_t
 
ISTR
;

695 
__IO
 
u√∂t16_t
 
RESERVED9
;

696 
__IO
 
u√∂t16_t
 
FNR
;

697 
__IO
 
u√∂t16_t
 
RESERVEDA
;

698 
__IO
 
u√∂t16_t
 
DADDR
;

699 
__IO
 
u√∂t16_t
 
RESERVEDB
;

700 
__IO
 
u√∂t16_t
 
BTABLE
;

701 
__IO
 
u√∂t16_t
 
RESERVEDC
;

702 } 
	tUSB_Ty‚â•Def
;

711 
__IO
 
u√∂t32_t
 
CR
;

712 
__IO
 
u√∂t32_t
 
CFR
;

713 
__IO
 
u√∂t32_t
 
SR
;

714 } 
	tWWDG_Ty‚â•Def
;

725 
	#FLASH_BASE
 0x08000000UL

	)

726 
	#FLASH_BANK1_END
 0x0807FFFFUL

	)

727 
	#SRAM_BASE
 0x20000000UL

	)

728 
	#PERIPH_BASE
 0x40000000UL

	)

730 
	#SRAM_BB_BASE
 0x22000000UL

	)

731 
	#PERIPH_BB_BASE
 0x42000000UL

	)

733 
	#FSMC_BASE
 0x60000000UL

	)

734 
	#FSMC_R_BASE
 0xA0000000UL

	)

737 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

738 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000UL)

	)

739 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000UL)

	)

741 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x00000000UL)

	)

742 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x00000400UL)

	)

743 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x00000800UL)

	)

744 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x00000C00UL)

	)

745 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x00001000UL)

	)

746 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x00001400UL)

	)

747 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x00002800UL)

	)

748 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00002C00UL)

	)

749 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00003000UL)

	)

750 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x00003800UL)

	)

751 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x00003C00UL)

	)

752 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x00004400UL)

	)

753 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x00004800UL)

	)

754 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x00004C00UL)

	)

755 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x00005000UL)

	)

756 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x00005400UL)

	)

757 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x00005800UL)

	)

758 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x00006400UL)

	)

759 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x00006C00UL)

	)

760 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x00007000UL)

	)

761 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x00007400UL)

	)

762 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x00000000UL)

	)

763 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x00000400UL)

	)

764 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x00000800UL)

	)

765 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x00000C00UL)

	)

766 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x00001000UL)

	)

767 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x00001400UL)

	)

768 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x00001800UL)

	)

769 
	#GPIOF_BASE
 (
APB2PERIPH_BASE
 + 0x00001C00UL)

	)

770 
	#GPIOG_BASE
 (
APB2PERIPH_BASE
 + 0x00002000UL)

	)

771 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x00002400UL)

	)

772 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x00002800UL)

	)

773 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x00002C00UL)

	)

774 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x00003000UL)

	)

775 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x00003400UL)

	)

776 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x00003800UL)

	)

777 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x00003C00UL)

	)

779 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x00018000UL)

	)

781 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x00000000UL)

	)

782 
	#DMA1_Ch‚Ñ¢‚àöl1_BASE
 (
AHBPERIPH_BASE
 + 0x00000008UL)

	)

783 
	#DMA1_Ch‚Ñ¢‚àöl2_BASE
 (
AHBPERIPH_BASE
 + 0x0000001CUL)

	)

784 
	#DMA1_Ch‚Ñ¢‚àöl3_BASE
 (
AHBPERIPH_BASE
 + 0x00000030UL)

	)

785 
	#DMA1_Ch‚Ñ¢‚àöl4_BASE
 (
AHBPERIPH_BASE
 + 0x00000044UL)

	)

786 
	#DMA1_Ch‚Ñ¢‚àöl5_BASE
 (
AHBPERIPH_BASE
 + 0x00000058UL)

	)

787 
	#DMA1_Ch‚Ñ¢‚àöl6_BASE
 (
AHBPERIPH_BASE
 + 0x0000006CUL)

	)

788 
	#DMA1_Ch‚Ñ¢‚àöl7_BASE
 (
AHBPERIPH_BASE
 + 0x00000080UL)

	)

789 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x00000400UL)

	)

790 
	#DMA2_Ch‚Ñ¢‚àöl1_BASE
 (
AHBPERIPH_BASE
 + 0x00000408UL)

	)

791 
	#DMA2_Ch‚Ñ¢‚àöl2_BASE
 (
AHBPERIPH_BASE
 + 0x0000041CUL)

	)

792 
	#DMA2_Ch‚Ñ¢‚àöl3_BASE
 (
AHBPERIPH_BASE
 + 0x00000430UL)

	)

793 
	#DMA2_Ch‚Ñ¢‚àöl4_BASE
 (
AHBPERIPH_BASE
 + 0x00000444UL)

	)

794 
	#DMA2_Ch‚Ñ¢‚àöl5_BASE
 (
AHBPERIPH_BASE
 + 0x00000458UL)

	)

795 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x00001000UL)

	)

796 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x00003000UL)

	)

798 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x00002000UL√ã

	)

799 
	#FLASHSIZE_BASE
 0x1FFFF7E0UL

	)

800 
	#UID_BASE
 0x1FFFF7E8UL

	)

801 
	#OB_BASE
 0x1FFFF800UL

	)

804 
	#FSMC_BANK1
 (
FSMC_BASE
√ã

	)

805 
	#FSMC_BANK1_1
 (
FSMC_BANK1
√ã

	)

806 
	#FSMC_BANK1_2
 (
FSMC_BANK1
 + 0x04000000UL√ã

	)

807 
	#FSMC_BANK1_3
 (
FSMC_BANK1
 + 0x08000000UL√ã

	)

808 
	#FSMC_BANK1_4
 (
FSMC_BANK1
 + 0x0C000000UL√ã

	)

810 
	#FSMC_BANK2
 (
FSMC_BASE
 + 0x10000000UL√ã

	)

811 
	#FSMC_BANK3
 (
FSMC_BASE
 + 0x20000000UL√ã

	)

812 
	#FSMC_BANK4
 (
FSMC_BASE
 + 0x30000000UL√ã

	)

814 
	#FSMC_BANK1_R_BASE
 (
FSMC_R_BASE
 + 0x00000000UL√ã

	)

815 
	#FSMC_BANK1E_R_BASE
 (
FSMC_R_BASE
 + 0x00000104UL√ã

	)

816 
	#FSMC_BANK2_3_R_BASE
 (
FSMC_R_BASE
 + 0x00000060UL√ã

	)

817 
	#FSMC_BANK4_R_BASE
 (
FSMC_R_BASE
 + 0x000000A0UL√ã

	)

819 
	#DBGMCU_BASE
 0xE0042000UL

	)

822 
	#USB_BASE
 (
APB1PERIPH_BASE
 + 0x00005C00UL√ã

	)

823 
	#USB_PMAADDR
 (
APB1PERIPH_BASE
 + 0x00006000UL√ã

	)

834 
	#TIM2
 ((
TIM_Ty‚â•Def
 *)
TIM2_BASE
)

	)

835 
	#TIM3
 ((
TIM_Ty‚â•Def
 *)
TIM3_BASE
)

	)

836 
	#TIM4
 ((
TIM_Ty‚â•Def
 *)
TIM4_BASE
)

	)

837 
	#TIM5
 ((
TIM_Ty‚â•Def
 *)
TIM5_BASE
)

	)

838 
	#TIM6
 ((
TIM_Ty‚â•Def
 *)
TIM6_BASE
)

	)

839 
	#TIM7
 ((
TIM_Ty‚â•Def
 *)
TIM7_BASE
)

	)

840 
	#RTC
 ((
RTC_Ty‚â•Def
 *)
RTC_BASE
)

	)

841 
	#WWDG
 ((
WWDG_Ty‚â•Def
 *)
WWDG_BASE
)

	)

842 
	#IWDG
 ((
IWDG_Ty‚â•Def
 *)
IWDG_BASE
)

	)

843 
	#SPI2
 ((
SPI_Ty‚â•Def
 *)
SPI2_BASE
)

	)

844 
	#SPI3
 ((
SPI_Ty‚â•Def
 *)
SPI3_BASE
)

	)

845 
	#USART2
 ((
USART_Ty‚â•Def
 *)
USART2_BASE
)

	)

846 
	#USART3
 ((
USART_Ty‚â•Def
 *)
USART3_BASE
)

	)

847 
	#UART4
 ((
USART_Ty‚â•Def
 *)
UART4_BASE
)

	)

848 
	#UART5
 ((
USART_Ty‚â•Def
 *)
UART5_BASE
)

	)

849 
	#I2C1
 ((
I2C_Ty‚â•Def
 *)
I2C1_BASE
)

	)

850 
	#I2C2
 ((
I2C_Ty‚â•Def
 *)
I2C2_BASE
)

	)

851 
	#USB
 ((
USB_Ty‚â•Def
 *)
USB_BASE
)

	)

852 
	#CAN1
 ((
CAN_Ty‚â•Def
 *)
CAN1_BASE
)

	)

853 
	#BKP
 ((
BKP_Ty‚â•Def
 *)
BKP_BASE
)

	)

854 
	#PWR
 ((
PWR_Ty‚â•Def
 *)
PWR_BASE
)

	)

855 
	#DAC1
 ((
DAC_Ty‚â•Def
 *)
DAC_BASE
)

	)

856 
	#DAC
 ((
DAC_Ty‚â•Def
 *)
DAC_BASE
√ã

	)

857 
	#AFIO
 ((
AFIO_Ty‚â•Def
 *)
AFIO_BASE
)

	)

858 
	#EXTI
 ((
EXTI_Ty‚â•Def
 *)
EXTI_BASE
)

	)

859 
	#GPIOA
 ((
GPIO_Ty‚â•Def
 *)
GPIOA_BASE
)

	)

860 
	#GPIOB
 ((
GPIO_Ty‚â•Def
 *)
GPIOB_BASE
)

	)

861 
	#GPIOC
 ((
GPIO_Ty‚â•Def
 *)
GPIOC_BASE
)

	)

862 
	#GPIOD
 ((
GPIO_Ty‚â•Def
 *)
GPIOD_BASE
)

	)

863 
	#GPIOE
 ((
GPIO_Ty‚â•Def
 *)
GPIOE_BASE
)

	)

864 
	#GPIOF
 ((
GPIO_Ty‚â•Def
 *)
GPIOF_BASE
)

	)

865 
	#GPIOG
 ((
GPIO_Ty‚â•Def
 *)
GPIOG_BASE
)

	)

866 
	#ADC1
 ((
ADC_Ty‚â•Def
 *)
ADC1_BASE
)

	)

867 
	#ADC2
 ((
ADC_Ty‚â•Def
 *)
ADC2_BASE
)

	)

868 
	#ADC3
 ((
ADC_Ty‚â•Def
 *)
ADC3_BASE
)

	)

869 
	#ADC12_COMMON
 ((
ADC_Comm‚ÅÑ_Ty‚â•Def
 *)
ADC1_BASE
)

	)

870 
	#TIM1
 ((
TIM_Ty‚â•Def
 *)
TIM1_BASE
)

	)

871 
	#SPI1
 ((
SPI_Ty‚â•Def
 *)
SPI1_BASE
)

	)

872 
	#TIM8
 ((
TIM_Ty‚â•Def
 *)
TIM8_BASE
)

	)

873 
	#USART1
 ((
USART_Ty‚â•Def
 *)
USART1_BASE
)

	)

874 
	#SDIO
 ((
SDIO_Ty‚â•Def
 *)
SDIO_BASE
)

	)

875 
	#DMA1
 ((
DMA_Ty‚â•Def
 *)
DMA1_BASE
)

	)

876 
	#DMA2
 ((
DMA_Ty‚â•Def
 *)
DMA2_BASE
)

	)

877 
	#DMA1_Ch‚Ñ¢‚àöl1
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl1_BASE
)

	)

878 
	#DMA1_Ch‚Ñ¢‚àöl2
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl2_BASE
)

	)

879 
	#DMA1_Ch‚Ñ¢‚àöl3
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl3_BASE
)

	)

880 
	#DMA1_Ch‚Ñ¢‚àöl4
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl4_BASE
)

	)

881 
	#DMA1_Ch‚Ñ¢‚àöl5
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl5_BASE
)

	)

882 
	#DMA1_Ch‚Ñ¢‚àöl6
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl6_BASE
)

	)

883 
	#DMA1_Ch‚Ñ¢‚àöl7
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA1_Ch‚Ñ¢‚àöl7_BASE
)

	)

884 
	#DMA2_Ch‚Ñ¢‚àöl1
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA2_Ch‚Ñ¢‚àöl1_BASE
)

	)

885 
	#DMA2_Ch‚Ñ¢‚àöl2
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA2_Ch‚Ñ¢‚àöl2_BASE
)

	)

886 
	#DMA2_Ch‚Ñ¢‚àöl3
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA2_Ch‚Ñ¢‚àöl3_BASE
)

	)

887 
	#DMA2_Ch‚Ñ¢‚àöl4
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA2_Ch‚Ñ¢‚àöl4_BASE
)

	)

888 
	#DMA2_Ch‚Ñ¢‚àöl5
 ((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)
DMA2_Ch‚Ñ¢‚àöl5_BASE
)

	)

889 
	#RCC
 ((
RCC_Ty‚â•Def
 *)
RCC_BASE
)

	)

890 
	#CRC
 ((
CRC_Ty‚â•Def
 *)
CRC_BASE
)

	)

891 
	#FLASH
 ((
FLASH_Ty‚â•Def
 *)
FLASH_R_BASE
)

	)

892 
	#OB
 ((
OB_Ty‚â•Def
 *)
OB_BASE
)

	)

893 
	#FSMC_B‚Ñ¢k1
 ((
FSMC_B‚Ñ¢k1_Ty‚â•Def
 *)
FSMC_BANK1_R_BASE
)

	)

894 
	#FSMC_B‚Ñ¢k1E
 ((
FSMC_B‚Ñ¢k1E_Ty‚â•Def
 *)
FSMC_BANK1E_R_BASE
)

	)

895 
	#FSMC_B‚Ñ¢k2_3
 ((
FSMC_B‚Ñ¢k2_3_Ty‚â•Def
 *)
FSMC_BANK2_3_R_BASE
)

	)

896 
	#FSMC_B‚Ñ¢k4
 ((
FSMC_B‚Ñ¢k4_Ty‚â•Def
 *)
FSMC_BANK4_R_BASE
)

	)

897 
	#DBGMCU
 ((
DBGMCU_Ty‚â•Def
 *)
DBGMCU_BASE
)

	)

923 
	#CRC_DR_DR_Pos
 (0U)

	)

924 
	#CRC_DR_DR_Msk
 (0xFFFFFFFFUL << 
CRC_DR_DR_Pos
√ã

	)

925 
	#CRC_DR_DR
 
CRC_DR_DR_Msk


	)

928 
	#CRC_IDR_IDR_Pos
 (0U)

	)

929 
	#CRC_IDR_IDR_Msk
 (0xFFUL << 
CRC_IDR_IDR_Pos
√ã

	)

930 
	#CRC_IDR_IDR
 
CRC_IDR_IDR_Msk


	)

933 
	#CRC_CR_RESET_Pos
 (0U)

	)

934 
	#CRC_CR_RESET_Msk
 (0x1UL << 
CRC_CR_RESET_Pos
√ã

	)

935 
	#CRC_CR_RESET
 
CRC_CR_RESET_Msk


	)

944 
	#PWR_CR_LPDS_Pos
 (0U)

	)

945 
	#PWR_CR_LPDS_Msk
 (0x1UL << 
PWR_CR_LPDS_Pos
√ã

	)

946 
	#PWR_CR_LPDS
 
PWR_CR_LPDS_Msk


	)

947 
	#PWR_CR_PDDS_Pos
 (1U)

	)

948 
	#PWR_CR_PDDS_Msk
 (0x1UL << 
PWR_CR_PDDS_Pos
√ã

	)

949 
	#PWR_CR_PDDS
 
PWR_CR_PDDS_Msk


	)

950 
	#PWR_CR_CWUF_Pos
 (2U)

	)

951 
	#PWR_CR_CWUF_Msk
 (0x1UL << 
PWR_CR_CWUF_Pos
√ã

	)

952 
	#PWR_CR_CWUF
 
PWR_CR_CWUF_Msk


	)

953 
	#PWR_CR_CSBF_Pos
 (3U)

	)

954 
	#PWR_CR_CSBF_Msk
 (0x1UL << 
PWR_CR_CSBF_Pos
√ã

	)

955 
	#PWR_CR_CSBF
 
PWR_CR_CSBF_Msk


	)

956 
	#PWR_CR_PVDE_Pos
 (4U)

	)

957 
	#PWR_CR_PVDE_Msk
 (0x1UL << 
PWR_CR_PVDE_Pos
√ã

	)

958 
	#PWR_CR_PVDE
 
PWR_CR_PVDE_Msk


	)

960 
	#PWR_CR_PLS_Pos
 (5U)

	)

961 
	#PWR_CR_PLS_Msk
 (0x7UL << 
PWR_CR_PLS_Pos
√ã

	)

962 
	#PWR_CR_PLS
 
PWR_CR_PLS_Msk


	)

963 
	#PWR_CR_PLS_0
 (0x1UL << 
PWR_CR_PLS_Pos
√ã

	)

964 
	#PWR_CR_PLS_1
 (0x2UL << 
PWR_CR_PLS_Pos
√ã

	)

965 
	#PWR_CR_PLS_2
 (0x4UL << 
PWR_CR_PLS_Pos
√ã

	)

968 
	#PWR_CR_PLS_LEV0
 0x00000000U

	)

969 
	#PWR_CR_PLS_LEV1
 0x00000020U

	)

970 
	#PWR_CR_PLS_LEV2
 0x00000040U

	)

971 
	#PWR_CR_PLS_LEV3
 0x00000060U

	)

972 
	#PWR_CR_PLS_LEV4
 0x00000080U

	)

973 
	#PWR_CR_PLS_LEV5
 0x000000A0U

	)

974 
	#PWR_CR_PLS_LEV6
 0x000000C0U

	)

975 
	#PWR_CR_PLS_LEV7
 0x000000E0U

	)

978 
	#PWR_CR_PLS_2V2
 
PWR_CR_PLS_LEV0


	)

979 
	#PWR_CR_PLS_2V3
 
PWR_CR_PLS_LEV1


	)

980 
	#PWR_CR_PLS_2V4
 
PWR_CR_PLS_LEV2


	)

981 
	#PWR_CR_PLS_2V5
 
PWR_CR_PLS_LEV3


	)

982 
	#PWR_CR_PLS_2V6
 
PWR_CR_PLS_LEV4


	)

983 
	#PWR_CR_PLS_2V7
 
PWR_CR_PLS_LEV5


	)

984 
	#PWR_CR_PLS_2V8
 
PWR_CR_PLS_LEV6


	)

985 
	#PWR_CR_PLS_2V9
 
PWR_CR_PLS_LEV7


	)

987 
	#PWR_CR_DBP_Pos
 (8U)

	)

988 
	#PWR_CR_DBP_Msk
 (0x1UL << 
PWR_CR_DBP_Pos
√ã

	)

989 
	#PWR_CR_DBP
 
PWR_CR_DBP_Msk


	)

993 
	#PWR_CSR_WUF_Pos
 (0U)

	)

994 
	#PWR_CSR_WUF_Msk
 (0x1UL << 
PWR_CSR_WUF_Pos
√ã

	)

995 
	#PWR_CSR_WUF
 
PWR_CSR_WUF_Msk


	)

996 
	#PWR_CSR_SBF_Pos
 (1U)

	)

997 
	#PWR_CSR_SBF_Msk
 (0x1UL << 
PWR_CSR_SBF_Pos
√ã

	)

998 
	#PWR_CSR_SBF
 
PWR_CSR_SBF_Msk


	)

999 
	#PWR_CSR_PVDO_Pos
 (2U)

	)

1000 
	#PWR_CSR_PVDO_Msk
 (0x1UL << 
PWR_CSR_PVDO_Pos
√ã

	)

1001 
	#PWR_CSR_PVDO
 
PWR_CSR_PVDO_Msk


	)

1002 
	#PWR_CSR_EWUP_Pos
 (8U)

	)

1003 
	#PWR_CSR_EWUP_Msk
 (0x1UL << 
PWR_CSR_EWUP_Pos
√ã

	)

1004 
	#PWR_CSR_EWUP
 
PWR_CSR_EWUP_Msk


	)

1013 
	#BKP_DR1_D_Pos
 (0U)

	)

1014 
	#BKP_DR1_D_Msk
 (0xFFFFUL << 
BKP_DR1_D_Pos
√ã

	)

1015 
	#BKP_DR1_D
 
BKP_DR1_D_Msk


	)

1018 
	#BKP_DR2_D_Pos
 (0U)

	)

1019 
	#BKP_DR2_D_Msk
 (0xFFFFUL << 
BKP_DR2_D_Pos
√ã

	)

1020 
	#BKP_DR2_D
 
BKP_DR2_D_Msk


	)

1023 
	#BKP_DR3_D_Pos
 (0U)

	)

1024 
	#BKP_DR3_D_Msk
 (0xFFFFUL << 
BKP_DR3_D_Pos
√ã

	)

1025 
	#BKP_DR3_D
 
BKP_DR3_D_Msk


	)

1028 
	#BKP_DR4_D_Pos
 (0U)

	)

1029 
	#BKP_DR4_D_Msk
 (0xFFFFUL << 
BKP_DR4_D_Pos
√ã

	)

1030 
	#BKP_DR4_D
 
BKP_DR4_D_Msk


	)

1033 
	#BKP_DR5_D_Pos
 (0U)

	)

1034 
	#BKP_DR5_D_Msk
 (0xFFFFUL << 
BKP_DR5_D_Pos
√ã

	)

1035 
	#BKP_DR5_D
 
BKP_DR5_D_Msk


	)

1038 
	#BKP_DR6_D_Pos
 (0U)

	)

1039 
	#BKP_DR6_D_Msk
 (0xFFFFUL << 
BKP_DR6_D_Pos
√ã

	)

1040 
	#BKP_DR6_D
 
BKP_DR6_D_Msk


	)

1043 
	#BKP_DR7_D_Pos
 (0U)

	)

1044 
	#BKP_DR7_D_Msk
 (0xFFFFUL << 
BKP_DR7_D_Pos
√ã

	)

1045 
	#BKP_DR7_D
 
BKP_DR7_D_Msk


	)

1048 
	#BKP_DR8_D_Pos
 (0U)

	)

1049 
	#BKP_DR8_D_Msk
 (0xFFFFUL << 
BKP_DR8_D_Pos
√ã

	)

1050 
	#BKP_DR8_D
 
BKP_DR8_D_Msk


	)

1053 
	#BKP_DR9_D_Pos
 (0U)

	)

1054 
	#BKP_DR9_D_Msk
 (0xFFFFUL << 
BKP_DR9_D_Pos
√ã

	)

1055 
	#BKP_DR9_D
 
BKP_DR9_D_Msk


	)

1058 
	#BKP_DR10_D_Pos
 (0U)

	)

1059 
	#BKP_DR10_D_Msk
 (0xFFFFUL << 
BKP_DR10_D_Pos
√ã

	)

1060 
	#BKP_DR10_D
 
BKP_DR10_D_Msk


	)

1063 
	#BKP_DR11_D_Pos
 (0U)

	)

1064 
	#BKP_DR11_D_Msk
 (0xFFFFUL << 
BKP_DR11_D_Pos
√ã

	)

1065 
	#BKP_DR11_D
 
BKP_DR11_D_Msk


	)

1068 
	#BKP_DR12_D_Pos
 (0U)

	)

1069 
	#BKP_DR12_D_Msk
 (0xFFFFUL << 
BKP_DR12_D_Pos
√ã

	)

1070 
	#BKP_DR12_D
 
BKP_DR12_D_Msk


	)

1073 
	#BKP_DR13_D_Pos
 (0U)

	)

1074 
	#BKP_DR13_D_Msk
 (0xFFFFUL << 
BKP_DR13_D_Pos
√ã

	)

1075 
	#BKP_DR13_D
 
BKP_DR13_D_Msk


	)

1078 
	#BKP_DR14_D_Pos
 (0U)

	)

1079 
	#BKP_DR14_D_Msk
 (0xFFFFUL << 
BKP_DR14_D_Pos
√ã

	)

1080 
	#BKP_DR14_D
 
BKP_DR14_D_Msk


	)

1083 
	#BKP_DR15_D_Pos
 (0U)

	)

1084 
	#BKP_DR15_D_Msk
 (0xFFFFUL << 
BKP_DR15_D_Pos
√ã

	)

1085 
	#BKP_DR15_D
 
BKP_DR15_D_Msk


	)

1088 
	#BKP_DR16_D_Pos
 (0U)

	)

1089 
	#BKP_DR16_D_Msk
 (0xFFFFUL << 
BKP_DR16_D_Pos
√ã

	)

1090 
	#BKP_DR16_D
 
BKP_DR16_D_Msk


	)

1093 
	#BKP_DR17_D_Pos
 (0U)

	)

1094 
	#BKP_DR17_D_Msk
 (0xFFFFUL << 
BKP_DR17_D_Pos
√ã

	)

1095 
	#BKP_DR17_D
 
BKP_DR17_D_Msk


	)

1098 
	#BKP_DR18_D_Pos
 (0U)

	)

1099 
	#BKP_DR18_D_Msk
 (0xFFFFUL << 
BKP_DR18_D_Pos
√ã

	)

1100 
	#BKP_DR18_D
 
BKP_DR18_D_Msk


	)

1103 
	#BKP_DR19_D_Pos
 (0U)

	)

1104 
	#BKP_DR19_D_Msk
 (0xFFFFUL << 
BKP_DR19_D_Pos
√ã

	)

1105 
	#BKP_DR19_D
 
BKP_DR19_D_Msk


	)

1108 
	#BKP_DR20_D_Pos
 (0U)

	)

1109 
	#BKP_DR20_D_Msk
 (0xFFFFUL << 
BKP_DR20_D_Pos
√ã

	)

1110 
	#BKP_DR20_D
 
BKP_DR20_D_Msk


	)

1113 
	#BKP_DR21_D_Pos
 (0U)

	)

1114 
	#BKP_DR21_D_Msk
 (0xFFFFUL << 
BKP_DR21_D_Pos
√ã

	)

1115 
	#BKP_DR21_D
 
BKP_DR21_D_Msk


	)

1118 
	#BKP_DR22_D_Pos
 (0U)

	)

1119 
	#BKP_DR22_D_Msk
 (0xFFFFUL << 
BKP_DR22_D_Pos
√ã

	)

1120 
	#BKP_DR22_D
 
BKP_DR22_D_Msk


	)

1123 
	#BKP_DR23_D_Pos
 (0U)

	)

1124 
	#BKP_DR23_D_Msk
 (0xFFFFUL << 
BKP_DR23_D_Pos
√ã

	)

1125 
	#BKP_DR23_D
 
BKP_DR23_D_Msk


	)

1128 
	#BKP_DR24_D_Pos
 (0U)

	)

1129 
	#BKP_DR24_D_Msk
 (0xFFFFUL << 
BKP_DR24_D_Pos
√ã

	)

1130 
	#BKP_DR24_D
 
BKP_DR24_D_Msk


	)

1133 
	#BKP_DR25_D_Pos
 (0U)

	)

1134 
	#BKP_DR25_D_Msk
 (0xFFFFUL << 
BKP_DR25_D_Pos
√ã

	)

1135 
	#BKP_DR25_D
 
BKP_DR25_D_Msk


	)

1138 
	#BKP_DR26_D_Pos
 (0U)

	)

1139 
	#BKP_DR26_D_Msk
 (0xFFFFUL << 
BKP_DR26_D_Pos
√ã

	)

1140 
	#BKP_DR26_D
 
BKP_DR26_D_Msk


	)

1143 
	#BKP_DR27_D_Pos
 (0U)

	)

1144 
	#BKP_DR27_D_Msk
 (0xFFFFUL << 
BKP_DR27_D_Pos
√ã

	)

1145 
	#BKP_DR27_D
 
BKP_DR27_D_Msk


	)

1148 
	#BKP_DR28_D_Pos
 (0U)

	)

1149 
	#BKP_DR28_D_Msk
 (0xFFFFUL << 
BKP_DR28_D_Pos
√ã

	)

1150 
	#BKP_DR28_D
 
BKP_DR28_D_Msk


	)

1153 
	#BKP_DR29_D_Pos
 (0U)

	)

1154 
	#BKP_DR29_D_Msk
 (0xFFFFUL << 
BKP_DR29_D_Pos
√ã

	)

1155 
	#BKP_DR29_D
 
BKP_DR29_D_Msk


	)

1158 
	#BKP_DR30_D_Pos
 (0U)

	)

1159 
	#BKP_DR30_D_Msk
 (0xFFFFUL << 
BKP_DR30_D_Pos
√ã

	)

1160 
	#BKP_DR30_D
 
BKP_DR30_D_Msk


	)

1163 
	#BKP_DR31_D_Pos
 (0U)

	)

1164 
	#BKP_DR31_D_Msk
 (0xFFFFUL << 
BKP_DR31_D_Pos
√ã

	)

1165 
	#BKP_DR31_D
 
BKP_DR31_D_Msk


	)

1168 
	#BKP_DR32_D_Pos
 (0U)

	)

1169 
	#BKP_DR32_D_Msk
 (0xFFFFUL << 
BKP_DR32_D_Pos
√ã

	)

1170 
	#BKP_DR32_D
 
BKP_DR32_D_Msk


	)

1173 
	#BKP_DR33_D_Pos
 (0U)

	)

1174 
	#BKP_DR33_D_Msk
 (0xFFFFUL << 
BKP_DR33_D_Pos
√ã

	)

1175 
	#BKP_DR33_D
 
BKP_DR33_D_Msk


	)

1178 
	#BKP_DR34_D_Pos
 (0U)

	)

1179 
	#BKP_DR34_D_Msk
 (0xFFFFUL << 
BKP_DR34_D_Pos
√ã

	)

1180 
	#BKP_DR34_D
 
BKP_DR34_D_Msk


	)

1183 
	#BKP_DR35_D_Pos
 (0U)

	)

1184 
	#BKP_DR35_D_Msk
 (0xFFFFUL << 
BKP_DR35_D_Pos
√ã

	)

1185 
	#BKP_DR35_D
 
BKP_DR35_D_Msk


	)

1188 
	#BKP_DR36_D_Pos
 (0U)

	)

1189 
	#BKP_DR36_D_Msk
 (0xFFFFUL << 
BKP_DR36_D_Pos
√ã

	)

1190 
	#BKP_DR36_D
 
BKP_DR36_D_Msk


	)

1193 
	#BKP_DR37_D_Pos
 (0U)

	)

1194 
	#BKP_DR37_D_Msk
 (0xFFFFUL << 
BKP_DR37_D_Pos
√ã

	)

1195 
	#BKP_DR37_D
 
BKP_DR37_D_Msk


	)

1198 
	#BKP_DR38_D_Pos
 (0U)

	)

1199 
	#BKP_DR38_D_Msk
 (0xFFFFUL << 
BKP_DR38_D_Pos
√ã

	)

1200 
	#BKP_DR38_D
 
BKP_DR38_D_Msk


	)

1203 
	#BKP_DR39_D_Pos
 (0U)

	)

1204 
	#BKP_DR39_D_Msk
 (0xFFFFUL << 
BKP_DR39_D_Pos
√ã

	)

1205 
	#BKP_DR39_D
 
BKP_DR39_D_Msk


	)

1208 
	#BKP_DR40_D_Pos
 (0U)

	)

1209 
	#BKP_DR40_D_Msk
 (0xFFFFUL << 
BKP_DR40_D_Pos
√ã

	)

1210 
	#BKP_DR40_D
 
BKP_DR40_D_Msk


	)

1213 
	#BKP_DR41_D_Pos
 (0U)

	)

1214 
	#BKP_DR41_D_Msk
 (0xFFFFUL << 
BKP_DR41_D_Pos
√ã

	)

1215 
	#BKP_DR41_D
 
BKP_DR41_D_Msk


	)

1218 
	#BKP_DR42_D_Pos
 (0U)

	)

1219 
	#BKP_DR42_D_Msk
 (0xFFFFUL << 
BKP_DR42_D_Pos
√ã

	)

1220 
	#BKP_DR42_D
 
BKP_DR42_D_Msk


	)

1222 
	#RTC_BKP_NUMBER
 42

	)

1225 
	#BKP_RTCCR_CAL_Pos
 (0U)

	)

1226 
	#BKP_RTCCR_CAL_Msk
 (0x7FUL << 
BKP_RTCCR_CAL_Pos
√ã

	)

1227 
	#BKP_RTCCR_CAL
 
BKP_RTCCR_CAL_Msk


	)

1228 
	#BKP_RTCCR_CCO_Pos
 (7U)

	)

1229 
	#BKP_RTCCR_CCO_Msk
 (0x1UL << 
BKP_RTCCR_CCO_Pos
√ã

	)

1230 
	#BKP_RTCCR_CCO
 
BKP_RTCCR_CCO_Msk


	)

1231 
	#BKP_RTCCR_ASOE_Pos
 (8U)

	)

1232 
	#BKP_RTCCR_ASOE_Msk
 (0x1UL << 
BKP_RTCCR_ASOE_Pos
√ã

	)

1233 
	#BKP_RTCCR_ASOE
 
BKP_RTCCR_ASOE_Msk


	)

1234 
	#BKP_RTCCR_ASOS_Pos
 (9U)

	)

1235 
	#BKP_RTCCR_ASOS_Msk
 (0x1UL << 
BKP_RTCCR_ASOS_Pos
√ã

	)

1236 
	#BKP_RTCCR_ASOS
 
BKP_RTCCR_ASOS_Msk


	)

1239 
	#BKP_CR_TPE_Pos
 (0U)

	)

1240 
	#BKP_CR_TPE_Msk
 (0x1UL << 
BKP_CR_TPE_Pos
√ã

	)

1241 
	#BKP_CR_TPE
 
BKP_CR_TPE_Msk


	)

1242 
	#BKP_CR_TPAL_Pos
 (1U)

	)

1243 
	#BKP_CR_TPAL_Msk
 (0x1UL << 
BKP_CR_TPAL_Pos
√ã

	)

1244 
	#BKP_CR_TPAL
 
BKP_CR_TPAL_Msk


	)

1247 
	#BKP_CSR_CTE_Pos
 (0U)

	)

1248 
	#BKP_CSR_CTE_Msk
 (0x1UL << 
BKP_CSR_CTE_Pos
√ã

	)

1249 
	#BKP_CSR_CTE
 
BKP_CSR_CTE_Msk


	)

1250 
	#BKP_CSR_CTI_Pos
 (1U)

	)

1251 
	#BKP_CSR_CTI_Msk
 (0x1UL << 
BKP_CSR_CTI_Pos
√ã

	)

1252 
	#BKP_CSR_CTI
 
BKP_CSR_CTI_Msk


	)

1253 
	#BKP_CSR_TPIE_Pos
 (2U)

	)

1254 
	#BKP_CSR_TPIE_Msk
 (0x1UL << 
BKP_CSR_TPIE_Pos
√ã

	)

1255 
	#BKP_CSR_TPIE
 
BKP_CSR_TPIE_Msk


	)

1256 
	#BKP_CSR_TEF_Pos
 (8U)

	)

1257 
	#BKP_CSR_TEF_Msk
 (0x1UL << 
BKP_CSR_TEF_Pos
√ã

	)

1258 
	#BKP_CSR_TEF
 
BKP_CSR_TEF_Msk


	)

1259 
	#BKP_CSR_TIF_Pos
 (9U)

	)

1260 
	#BKP_CSR_TIF_Msk
 (0x1UL << 
BKP_CSR_TIF_Pos
√ã

	)

1261 
	#BKP_CSR_TIF
 
BKP_CSR_TIF_Msk


	)

1270 
	#RCC_CR_HSION_Pos
 (0U)

	)

1271 
	#RCC_CR_HSION_Msk
 (0x1UL << 
RCC_CR_HSION_Pos
√ã

	)

1272 
	#RCC_CR_HSION
 
RCC_CR_HSION_Msk


	)

1273 
	#RCC_CR_HSIRDY_Pos
 (1U)

	)

1274 
	#RCC_CR_HSIRDY_Msk
 (0x1UL << 
RCC_CR_HSIRDY_Pos
√ã

	)

1275 
	#RCC_CR_HSIRDY
 
RCC_CR_HSIRDY_Msk


	)

1276 
	#RCC_CR_HSITRIM_Pos
 (3U)

	)

1277 
	#RCC_CR_HSITRIM_Msk
 (0x1FUL << 
RCC_CR_HSITRIM_Pos
√ã

	)

1278 
	#RCC_CR_HSITRIM
 
RCC_CR_HSITRIM_Msk


	)

1279 
	#RCC_CR_HSICAL_Pos
 (8U)

	)

1280 
	#RCC_CR_HSICAL_Msk
 (0xFFUL << 
RCC_CR_HSICAL_Pos
√ã

	)

1281 
	#RCC_CR_HSICAL
 
RCC_CR_HSICAL_Msk


	)

1282 
	#RCC_CR_HSEON_Pos
 (16U)

	)

1283 
	#RCC_CR_HSEON_Msk
 (0x1UL << 
RCC_CR_HSEON_Pos
√ã

	)

1284 
	#RCC_CR_HSEON
 
RCC_CR_HSEON_Msk


	)

1285 
	#RCC_CR_HSERDY_Pos
 (17U)

	)

1286 
	#RCC_CR_HSERDY_Msk
 (0x1UL << 
RCC_CR_HSERDY_Pos
√ã

	)

1287 
	#RCC_CR_HSERDY
 
RCC_CR_HSERDY_Msk


	)

1288 
	#RCC_CR_HSEBYP_Pos
 (18U)

	)

1289 
	#RCC_CR_HSEBYP_Msk
 (0x1UL << 
RCC_CR_HSEBYP_Pos
√ã

	)

1290 
	#RCC_CR_HSEBYP
 
RCC_CR_HSEBYP_Msk


	)

1291 
	#RCC_CR_CSSON_Pos
 (19U)

	)

1292 
	#RCC_CR_CSSON_Msk
 (0x1UL << 
RCC_CR_CSSON_Pos
√ã

	)

1293 
	#RCC_CR_CSSON
 
RCC_CR_CSSON_Msk


	)

1294 
	#RCC_CR_PLLON_Pos
 (24U)

	)

1295 
	#RCC_CR_PLLON_Msk
 (0x1UL << 
RCC_CR_PLLON_Pos
√ã

	)

1296 
	#RCC_CR_PLLON
 
RCC_CR_PLLON_Msk


	)

1297 
	#RCC_CR_PLLRDY_Pos
 (25U)

	)

1298 
	#RCC_CR_PLLRDY_Msk
 (0x1UL << 
RCC_CR_PLLRDY_Pos
√ã

	)

1299 
	#RCC_CR_PLLRDY
 
RCC_CR_PLLRDY_Msk


	)

1304 
	#RCC_CFGR_SW_Pos
 (0U)

	)

1305 
	#RCC_CFGR_SW_Msk
 (0x3UL << 
RCC_CFGR_SW_Pos
√ã

	)

1306 
	#RCC_CFGR_SW
 
RCC_CFGR_SW_Msk


	)

1307 
	#RCC_CFGR_SW_0
 (0x1UL << 
RCC_CFGR_SW_Pos
√ã

	)

1308 
	#RCC_CFGR_SW_1
 (0x2UL << 
RCC_CFGR_SW_Pos
√ã

	)

1310 
	#RCC_CFGR_SW_HSI
 0x00000000U

	)

1311 
	#RCC_CFGR_SW_HSE
 0x00000001U

	)

1312 
	#RCC_CFGR_SW_PLL
 0x00000002U

	)

1315 
	#RCC_CFGR_SWS_Pos
 (2U)

	)

1316 
	#RCC_CFGR_SWS_Msk
 (0x3UL << 
RCC_CFGR_SWS_Pos
√ã

	)

1317 
	#RCC_CFGR_SWS
 
RCC_CFGR_SWS_Msk


	)

1318 
	#RCC_CFGR_SWS_0
 (0x1UL << 
RCC_CFGR_SWS_Pos
√ã

	)

1319 
	#RCC_CFGR_SWS_1
 (0x2UL << 
RCC_CFGR_SWS_Pos
√ã

	)

1321 
	#RCC_CFGR_SWS_HSI
 0x00000000U

	)

1322 
	#RCC_CFGR_SWS_HSE
 0x00000004U

	)

1323 
	#RCC_CFGR_SWS_PLL
 0x00000008U

	)

1326 
	#RCC_CFGR_HPRE_Pos
 (4U)

	)

1327 
	#RCC_CFGR_HPRE_Msk
 (0xFUL << 
RCC_CFGR_HPRE_Pos
√ã

	)

1328 
	#RCC_CFGR_HPRE
 
RCC_CFGR_HPRE_Msk


	)

1329 
	#RCC_CFGR_HPRE_0
 (0x1UL << 
RCC_CFGR_HPRE_Pos
√ã

	)

1330 
	#RCC_CFGR_HPRE_1
 (0x2UL << 
RCC_CFGR_HPRE_Pos
√ã

	)

1331 
	#RCC_CFGR_HPRE_2
 (0x4UL << 
RCC_CFGR_HPRE_Pos
√ã

	)

1332 
	#RCC_CFGR_HPRE_3
 (0x8UL << 
RCC_CFGR_HPRE_Pos
√ã

	)

1334 
	#RCC_CFGR_HPRE_DIV1
 0x00000000U

	)

1335 
	#RCC_CFGR_HPRE_DIV2
 0x00000080U

	)

1336 
	#RCC_CFGR_HPRE_DIV4
 0x00000090U

	)

1337 
	#RCC_CFGR_HPRE_DIV8
 0x000000A0U

	)

1338 
	#RCC_CFGR_HPRE_DIV16
 0x000000B0U

	)

1339 
	#RCC_CFGR_HPRE_DIV64
 0x000000C0U

	)

1340 
	#RCC_CFGR_HPRE_DIV128
 0x000000D0U

	)

1341 
	#RCC_CFGR_HPRE_DIV256
 0x000000E0U

	)

1342 
	#RCC_CFGR_HPRE_DIV512
 0x000000F0U

	)

1345 
	#RCC_CFGR_PPRE1_Pos
 (8U)

	)

1346 
	#RCC_CFGR_PPRE1_Msk
 (0x7UL << 
RCC_CFGR_PPRE1_Pos
√ã

	)

1347 
	#RCC_CFGR_PPRE1
 
RCC_CFGR_PPRE1_Msk


	)

1348 
	#RCC_CFGR_PPRE1_0
 (0x1UL << 
RCC_CFGR_PPRE1_Pos
√ã

	)

1349 
	#RCC_CFGR_PPRE1_1
 (0x2UL << 
RCC_CFGR_PPRE1_Pos
√ã

	)

1350 
	#RCC_CFGR_PPRE1_2
 (0x4UL << 
RCC_CFGR_PPRE1_Pos
√ã

	)

1352 
	#RCC_CFGR_PPRE1_DIV1
 0x00000000U

	)

1353 
	#RCC_CFGR_PPRE1_DIV2
 0x00000400U

	)

1354 
	#RCC_CFGR_PPRE1_DIV4
 0x00000500U

	)

1355 
	#RCC_CFGR_PPRE1_DIV8
 0x00000600U

	)

1356 
	#RCC_CFGR_PPRE1_DIV16
 0x00000700U

	)

1359 
	#RCC_CFGR_PPRE2_Pos
 (11U)

	)

1360 
	#RCC_CFGR_PPRE2_Msk
 (0x7UL << 
RCC_CFGR_PPRE2_Pos
√ã

	)

1361 
	#RCC_CFGR_PPRE2
 
RCC_CFGR_PPRE2_Msk


	)

1362 
	#RCC_CFGR_PPRE2_0
 (0x1UL << 
RCC_CFGR_PPRE2_Pos
√ã

	)

1363 
	#RCC_CFGR_PPRE2_1
 (0x2UL << 
RCC_CFGR_PPRE2_Pos
√ã

	)

1364 
	#RCC_CFGR_PPRE2_2
 (0x4UL << 
RCC_CFGR_PPRE2_Pos
√ã

	)

1366 
	#RCC_CFGR_PPRE2_DIV1
 0x00000000U

	)

1367 
	#RCC_CFGR_PPRE2_DIV2
 0x00002000U

	)

1368 
	#RCC_CFGR_PPRE2_DIV4
 0x00002800U

	)

1369 
	#RCC_CFGR_PPRE2_DIV8
 0x00003000U

	)

1370 
	#RCC_CFGR_PPRE2_DIV16
 0x00003800U

	)

1373 
	#RCC_CFGR_ADCPRE_Pos
 (14U)

	)

1374 
	#RCC_CFGR_ADCPRE_Msk
 (0x3UL << 
RCC_CFGR_ADCPRE_Pos
√ã

	)

1375 
	#RCC_CFGR_ADCPRE
 
RCC_CFGR_ADCPRE_Msk


	)

1376 
	#RCC_CFGR_ADCPRE_0
 (0x1UL << 
RCC_CFGR_ADCPRE_Pos
√ã

	)

1377 
	#RCC_CFGR_ADCPRE_1
 (0x2UL << 
RCC_CFGR_ADCPRE_Pos
√ã

	)

1379 
	#RCC_CFGR_ADCPRE_DIV2
 0x00000000U

	)

1380 
	#RCC_CFGR_ADCPRE_DIV4
 0x00004000U

	)

1381 
	#RCC_CFGR_ADCPRE_DIV6
 0x00008000U

	)

1382 
	#RCC_CFGR_ADCPRE_DIV8
 0x0000C000U

	)

1384 
	#RCC_CFGR_PLLSRC_Pos
 (16U)

	)

1385 
	#RCC_CFGR_PLLSRC_Msk
 (0x1UL << 
RCC_CFGR_PLLSRC_Pos
√ã

	)

1386 
	#RCC_CFGR_PLLSRC
 
RCC_CFGR_PLLSRC_Msk


	)

1388 
	#RCC_CFGR_PLLXTPRE_Pos
 (17U)

	)

1389 
	#RCC_CFGR_PLLXTPRE_Msk
 (0x1UL << 
RCC_CFGR_PLLXTPRE_Pos
√ã

	)

1390 
	#RCC_CFGR_PLLXTPRE
 
RCC_CFGR_PLLXTPRE_Msk


	)

1393 
	#RCC_CFGR_PLLMULL_Pos
 (18U)

	)

1394 
	#RCC_CFGR_PLLMULL_Msk
 (0xFUL << 
RCC_CFGR_PLLMULL_Pos
√ã

	)

1395 
	#RCC_CFGR_PLLMULL
 
RCC_CFGR_PLLMULL_Msk


	)

1396 
	#RCC_CFGR_PLLMULL_0
 (0x1UL << 
RCC_CFGR_PLLMULL_Pos
√ã

	)

1397 
	#RCC_CFGR_PLLMULL_1
 (0x2UL << 
RCC_CFGR_PLLMULL_Pos
√ã

	)

1398 
	#RCC_CFGR_PLLMULL_2
 (0x4UL << 
RCC_CFGR_PLLMULL_Pos
√ã

	)

1399 
	#RCC_CFGR_PLLMULL_3
 (0x8UL << 
RCC_CFGR_PLLMULL_Pos
√ã

	)

1401 
	#RCC_CFGR_PLLXTPRE_HSE
 0x00000000U

	)

1402 
	#RCC_CFGR_PLLXTPRE_HSE_DIV2
 0x00020000U

	)

1404 
	#RCC_CFGR_PLLMULL2
 0x00000000U

	)

1405 
	#RCC_CFGR_PLLMULL3_Pos
 (18U)

	)

1406 
	#RCC_CFGR_PLLMULL3_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL3_Pos
√ã

	)

1407 
	#RCC_CFGR_PLLMULL3
 
RCC_CFGR_PLLMULL3_Msk


	)

1408 
	#RCC_CFGR_PLLMULL4_Pos
 (19U)

	)

1409 
	#RCC_CFGR_PLLMULL4_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL4_Pos
√ã

	)

1410 
	#RCC_CFGR_PLLMULL4
 
RCC_CFGR_PLLMULL4_Msk


	)

1411 
	#RCC_CFGR_PLLMULL5_Pos
 (18U)

	)

1412 
	#RCC_CFGR_PLLMULL5_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL5_Pos
√ã

	)

1413 
	#RCC_CFGR_PLLMULL5
 
RCC_CFGR_PLLMULL5_Msk


	)

1414 
	#RCC_CFGR_PLLMULL6_Pos
 (20U)

	)

1415 
	#RCC_CFGR_PLLMULL6_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL6_Pos
√ã

	)

1416 
	#RCC_CFGR_PLLMULL6
 
RCC_CFGR_PLLMULL6_Msk


	)

1417 
	#RCC_CFGR_PLLMULL7_Pos
 (18U)

	)

1418 
	#RCC_CFGR_PLLMULL7_Msk
 (0x5UL << 
RCC_CFGR_PLLMULL7_Pos
√ã

	)

1419 
	#RCC_CFGR_PLLMULL7
 
RCC_CFGR_PLLMULL7_Msk


	)

1420 
	#RCC_CFGR_PLLMULL8_Pos
 (19U)

	)

1421 
	#RCC_CFGR_PLLMULL8_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL8_Pos
√ã

	)

1422 
	#RCC_CFGR_PLLMULL8
 
RCC_CFGR_PLLMULL8_Msk


	)

1423 
	#RCC_CFGR_PLLMULL9_Pos
 (18U)

	)

1424 
	#RCC_CFGR_PLLMULL9_Msk
 (0x7UL << 
RCC_CFGR_PLLMULL9_Pos
√ã

	)

1425 
	#RCC_CFGR_PLLMULL9
 
RCC_CFGR_PLLMULL9_Msk


	)

1426 
	#RCC_CFGR_PLLMULL10_Pos
 (21U)

	)

1427 
	#RCC_CFGR_PLLMULL10_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL10_Pos
√ã

	)

1428 
	#RCC_CFGR_PLLMULL10
 
RCC_CFGR_PLLMULL10_Msk


	)

1429 
	#RCC_CFGR_PLLMULL11_Pos
 (18U)

	)

1430 
	#RCC_CFGR_PLLMULL11_Msk
 (0x9UL << 
RCC_CFGR_PLLMULL11_Pos
√ã

	)

1431 
	#RCC_CFGR_PLLMULL11
 
RCC_CFGR_PLLMULL11_Msk


	)

1432 
	#RCC_CFGR_PLLMULL12_Pos
 (19U)

	)

1433 
	#RCC_CFGR_PLLMULL12_Msk
 (0x5UL << 
RCC_CFGR_PLLMULL12_Pos
√ã

	)

1434 
	#RCC_CFGR_PLLMULL12
 
RCC_CFGR_PLLMULL12_Msk


	)

1435 
	#RCC_CFGR_PLLMULL13_Pos
 (18U)

	)

1436 
	#RCC_CFGR_PLLMULL13_Msk
 (0xBUL << 
RCC_CFGR_PLLMULL13_Pos
√ã

	)

1437 
	#RCC_CFGR_PLLMULL13
 
RCC_CFGR_PLLMULL13_Msk


	)

1438 
	#RCC_CFGR_PLLMULL14_Pos
 (20U)

	)

1439 
	#RCC_CFGR_PLLMULL14_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL14_Pos
√ã

	)

1440 
	#RCC_CFGR_PLLMULL14
 
RCC_CFGR_PLLMULL14_Msk


	)

1441 
	#RCC_CFGR_PLLMULL15_Pos
 (18U)

	)

1442 
	#RCC_CFGR_PLLMULL15_Msk
 (0xDUL << 
RCC_CFGR_PLLMULL15_Pos
√ã

	)

1443 
	#RCC_CFGR_PLLMULL15
 
RCC_CFGR_PLLMULL15_Msk


	)

1444 
	#RCC_CFGR_PLLMULL16_Pos
 (19U)

	)

1445 
	#RCC_CFGR_PLLMULL16_Msk
 (0x7UL << 
RCC_CFGR_PLLMULL16_Pos
√ã

	)

1446 
	#RCC_CFGR_PLLMULL16
 
RCC_CFGR_PLLMULL16_Msk


	)

1447 
	#RCC_CFGR_USBPRE_Pos
 (22U)

	)

1448 
	#RCC_CFGR_USBPRE_Msk
 (0x1UL << 
RCC_CFGR_USBPRE_Pos
√ã

	)

1449 
	#RCC_CFGR_USBPRE
 
RCC_CFGR_USBPRE_Msk


	)

1452 
	#RCC_CFGR_MCO_Pos
 (24U)

	)

1453 
	#RCC_CFGR_MCO_Msk
 (0x7UL << 
RCC_CFGR_MCO_Pos
√ã

	)

1454 
	#RCC_CFGR_MCO
 
RCC_CFGR_MCO_Msk


	)

1455 
	#RCC_CFGR_MCO_0
 (0x1UL << 
RCC_CFGR_MCO_Pos
√ã

	)

1456 
	#RCC_CFGR_MCO_1
 (0x2UL << 
RCC_CFGR_MCO_Pos
√ã

	)

1457 
	#RCC_CFGR_MCO_2
 (0x4UL << 
RCC_CFGR_MCO_Pos
√ã

	)

1459 
	#RCC_CFGR_MCO_NOCLOCK
 0x00000000U

	)

1460 
	#RCC_CFGR_MCO_SYSCLK
 0x04000000U

	)

1461 
	#RCC_CFGR_MCO_HSI
 0x05000000U

	)

1462 
	#RCC_CFGR_MCO_HSE
 0x06000000U

	)

1463 
	#RCC_CFGR_MCO_PLLCLK_DIV2
 0x07000000U

	)

1466 
	#RCC_CFGR_MCOSEL
 
RCC_CFGR_MCO


	)

1467 
	#RCC_CFGR_MCOSEL_0
 
RCC_CFGR_MCO_0


	)

1468 
	#RCC_CFGR_MCOSEL_1
 
RCC_CFGR_MCO_1


	)

1469 
	#RCC_CFGR_MCOSEL_2
 
RCC_CFGR_MCO_2


	)

1470 
	#RCC_CFGR_MCOSEL_NOCLOCK
 
RCC_CFGR_MCO_NOCLOCK


	)

1471 
	#RCC_CFGR_MCOSEL_SYSCLK
 
RCC_CFGR_MCO_SYSCLK


	)

1472 
	#RCC_CFGR_MCOSEL_HSI
 
RCC_CFGR_MCO_HSI


	)

1473 
	#RCC_CFGR_MCOSEL_HSE
 
RCC_CFGR_MCO_HSE


	)

1474 
	#RCC_CFGR_MCOSEL_PLL_DIV2
 
RCC_CFGR_MCO_PLLCLK_DIV2


	)

1477 
	#RCC_CIR_LSIRDYF_Pos
 (0U)

	)

1478 
	#RCC_CIR_LSIRDYF_Msk
 (0x1UL << 
RCC_CIR_LSIRDYF_Pos
√ã

	)

1479 
	#RCC_CIR_LSIRDYF
 
RCC_CIR_LSIRDYF_Msk


	)

1480 
	#RCC_CIR_LSERDYF_Pos
 (1U)

	)

1481 
	#RCC_CIR_LSERDYF_Msk
 (0x1UL << 
RCC_CIR_LSERDYF_Pos
√ã

	)

1482 
	#RCC_CIR_LSERDYF
 
RCC_CIR_LSERDYF_Msk


	)

1483 
	#RCC_CIR_HSIRDYF_Pos
 (2U)

	)

1484 
	#RCC_CIR_HSIRDYF_Msk
 (0x1UL << 
RCC_CIR_HSIRDYF_Pos
√ã

	)

1485 
	#RCC_CIR_HSIRDYF
 
RCC_CIR_HSIRDYF_Msk


	)

1486 
	#RCC_CIR_HSERDYF_Pos
 (3U)

	)

1487 
	#RCC_CIR_HSERDYF_Msk
 (0x1UL << 
RCC_CIR_HSERDYF_Pos
√ã

	)

1488 
	#RCC_CIR_HSERDYF
 
RCC_CIR_HSERDYF_Msk


	)

1489 
	#RCC_CIR_PLLRDYF_Pos
 (4U)

	)

1490 
	#RCC_CIR_PLLRDYF_Msk
 (0x1UL << 
RCC_CIR_PLLRDYF_Pos
√ã

	)

1491 
	#RCC_CIR_PLLRDYF
 
RCC_CIR_PLLRDYF_Msk


	)

1492 
	#RCC_CIR_CSSF_Pos
 (7U)

	)

1493 
	#RCC_CIR_CSSF_Msk
 (0x1UL << 
RCC_CIR_CSSF_Pos
√ã

	)

1494 
	#RCC_CIR_CSSF
 
RCC_CIR_CSSF_Msk


	)

1495 
	#RCC_CIR_LSIRDYIE_Pos
 (8U)

	)

1496 
	#RCC_CIR_LSIRDYIE_Msk
 (0x1UL << 
RCC_CIR_LSIRDYIE_Pos
√ã

	)

1497 
	#RCC_CIR_LSIRDYIE
 
RCC_CIR_LSIRDYIE_Msk


	)

1498 
	#RCC_CIR_LSERDYIE_Pos
 (9U)

	)

1499 
	#RCC_CIR_LSERDYIE_Msk
 (0x1UL << 
RCC_CIR_LSERDYIE_Pos
√ã

	)

1500 
	#RCC_CIR_LSERDYIE
 
RCC_CIR_LSERDYIE_Msk


	)

1501 
	#RCC_CIR_HSIRDYIE_Pos
 (10U)

	)

1502 
	#RCC_CIR_HSIRDYIE_Msk
 (0x1UL << 
RCC_CIR_HSIRDYIE_Pos
√ã

	)

1503 
	#RCC_CIR_HSIRDYIE
 
RCC_CIR_HSIRDYIE_Msk


	)

1504 
	#RCC_CIR_HSERDYIE_Pos
 (11U)

	)

1505 
	#RCC_CIR_HSERDYIE_Msk
 (0x1UL << 
RCC_CIR_HSERDYIE_Pos
√ã

	)

1506 
	#RCC_CIR_HSERDYIE
 
RCC_CIR_HSERDYIE_Msk


	)

1507 
	#RCC_CIR_PLLRDYIE_Pos
 (12U)

	)

1508 
	#RCC_CIR_PLLRDYIE_Msk
 (0x1UL << 
RCC_CIR_PLLRDYIE_Pos
√ã

	)

1509 
	#RCC_CIR_PLLRDYIE
 
RCC_CIR_PLLRDYIE_Msk


	)

1510 
	#RCC_CIR_LSIRDYC_Pos
 (16U)

	)

1511 
	#RCC_CIR_LSIRDYC_Msk
 (0x1UL << 
RCC_CIR_LSIRDYC_Pos
√ã

	)

1512 
	#RCC_CIR_LSIRDYC
 
RCC_CIR_LSIRDYC_Msk


	)

1513 
	#RCC_CIR_LSERDYC_Pos
 (17U)

	)

1514 
	#RCC_CIR_LSERDYC_Msk
 (0x1UL << 
RCC_CIR_LSERDYC_Pos
√ã

	)

1515 
	#RCC_CIR_LSERDYC
 
RCC_CIR_LSERDYC_Msk


	)

1516 
	#RCC_CIR_HSIRDYC_Pos
 (18U)

	)

1517 
	#RCC_CIR_HSIRDYC_Msk
 (0x1UL << 
RCC_CIR_HSIRDYC_Pos
√ã

	)

1518 
	#RCC_CIR_HSIRDYC
 
RCC_CIR_HSIRDYC_Msk


	)

1519 
	#RCC_CIR_HSERDYC_Pos
 (19U)

	)

1520 
	#RCC_CIR_HSERDYC_Msk
 (0x1UL << 
RCC_CIR_HSERDYC_Pos
√ã

	)

1521 
	#RCC_CIR_HSERDYC
 
RCC_CIR_HSERDYC_Msk


	)

1522 
	#RCC_CIR_PLLRDYC_Pos
 (20U)

	)

1523 
	#RCC_CIR_PLLRDYC_Msk
 (0x1UL << 
RCC_CIR_PLLRDYC_Pos
√ã

	)

1524 
	#RCC_CIR_PLLRDYC
 
RCC_CIR_PLLRDYC_Msk


	)

1525 
	#RCC_CIR_CSSC_Pos
 (23U)

	)

1526 
	#RCC_CIR_CSSC_Msk
 (0x1UL << 
RCC_CIR_CSSC_Pos
√ã

	)

1527 
	#RCC_CIR_CSSC
 
RCC_CIR_CSSC_Msk


	)

1531 
	#RCC_APB2RSTR_AFIORST_Pos
 (0U)

	)

1532 
	#RCC_APB2RSTR_AFIORST_Msk
 (0x1UL << 
RCC_APB2RSTR_AFIORST_Pos
√ã

	)

1533 
	#RCC_APB2RSTR_AFIORST
 
RCC_APB2RSTR_AFIORST_Msk


	)

1534 
	#RCC_APB2RSTR_IOPARST_Pos
 (2U)

	)

1535 
	#RCC_APB2RSTR_IOPARST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPARST_Pos
√ã

	)

1536 
	#RCC_APB2RSTR_IOPARST
 
RCC_APB2RSTR_IOPARST_Msk


	)

1537 
	#RCC_APB2RSTR_IOPBRST_Pos
 (3U)

	)

1538 
	#RCC_APB2RSTR_IOPBRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPBRST_Pos
√ã

	)

1539 
	#RCC_APB2RSTR_IOPBRST
 
RCC_APB2RSTR_IOPBRST_Msk


	)

1540 
	#RCC_APB2RSTR_IOPCRST_Pos
 (4U)

	)

1541 
	#RCC_APB2RSTR_IOPCRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPCRST_Pos
√ã

	)

1542 
	#RCC_APB2RSTR_IOPCRST
 
RCC_APB2RSTR_IOPCRST_Msk


	)

1543 
	#RCC_APB2RSTR_IOPDRST_Pos
 (5U)

	)

1544 
	#RCC_APB2RSTR_IOPDRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPDRST_Pos
√ã

	)

1545 
	#RCC_APB2RSTR_IOPDRST
 
RCC_APB2RSTR_IOPDRST_Msk


	)

1546 
	#RCC_APB2RSTR_ADC1RST_Pos
 (9U)

	)

1547 
	#RCC_APB2RSTR_ADC1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC1RST_Pos
√ã

	)

1548 
	#RCC_APB2RSTR_ADC1RST
 
RCC_APB2RSTR_ADC1RST_Msk


	)

1550 
	#RCC_APB2RSTR_ADC2RST_Pos
 (10U)

	)

1551 
	#RCC_APB2RSTR_ADC2RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC2RST_Pos
√ã

	)

1552 
	#RCC_APB2RSTR_ADC2RST
 
RCC_APB2RSTR_ADC2RST_Msk


	)

1554 
	#RCC_APB2RSTR_TIM1RST_Pos
 (11U)

	)

1555 
	#RCC_APB2RSTR_TIM1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_TIM1RST_Pos
√ã

	)

1556 
	#RCC_APB2RSTR_TIM1RST
 
RCC_APB2RSTR_TIM1RST_Msk


	)

1557 
	#RCC_APB2RSTR_SPI1RST_Pos
 (12U)

	)

1558 
	#RCC_APB2RSTR_SPI1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_SPI1RST_Pos
√ã

	)

1559 
	#RCC_APB2RSTR_SPI1RST
 
RCC_APB2RSTR_SPI1RST_Msk


	)

1560 
	#RCC_APB2RSTR_USART1RST_Pos
 (14U)

	)

1561 
	#RCC_APB2RSTR_USART1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_USART1RST_Pos
√ã

	)

1562 
	#RCC_APB2RSTR_USART1RST
 
RCC_APB2RSTR_USART1RST_Msk


	)

1565 
	#RCC_APB2RSTR_IOPERST_Pos
 (6U)

	)

1566 
	#RCC_APB2RSTR_IOPERST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPERST_Pos
√ã

	)

1567 
	#RCC_APB2RSTR_IOPERST
 
RCC_APB2RSTR_IOPERST_Msk


	)

1569 
	#RCC_APB2RSTR_IOPFRST_Pos
 (7U)

	)

1570 
	#RCC_APB2RSTR_IOPFRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPFRST_Pos
√ã

	)

1571 
	#RCC_APB2RSTR_IOPFRST
 
RCC_APB2RSTR_IOPFRST_Msk


	)

1572 
	#RCC_APB2RSTR_IOPGRST_Pos
 (8U)

	)

1573 
	#RCC_APB2RSTR_IOPGRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPGRST_Pos
√ã

	)

1574 
	#RCC_APB2RSTR_IOPGRST
 
RCC_APB2RSTR_IOPGRST_Msk


	)

1575 
	#RCC_APB2RSTR_TIM8RST_Pos
 (13U)

	)

1576 
	#RCC_APB2RSTR_TIM8RST_Msk
 (0x1UL << 
RCC_APB2RSTR_TIM8RST_Pos
√ã

	)

1577 
	#RCC_APB2RSTR_TIM8RST
 
RCC_APB2RSTR_TIM8RST_Msk


	)

1578 
	#RCC_APB2RSTR_ADC3RST_Pos
 (15U)

	)

1579 
	#RCC_APB2RSTR_ADC3RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC3RST_Pos
√ã

	)

1580 
	#RCC_APB2RSTR_ADC3RST
 
RCC_APB2RSTR_ADC3RST_Msk


	)

1585 
	#RCC_APB1RSTR_TIM2RST_Pos
 (0U)

	)

1586 
	#RCC_APB1RSTR_TIM2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM2RST_Pos
√ã

	)

1587 
	#RCC_APB1RSTR_TIM2RST
 
RCC_APB1RSTR_TIM2RST_Msk


	)

1588 
	#RCC_APB1RSTR_TIM3RST_Pos
 (1U)

	)

1589 
	#RCC_APB1RSTR_TIM3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM3RST_Pos
√ã

	)

1590 
	#RCC_APB1RSTR_TIM3RST
 
RCC_APB1RSTR_TIM3RST_Msk


	)

1591 
	#RCC_APB1RSTR_WWDGRST_Pos
 (11U)

	)

1592 
	#RCC_APB1RSTR_WWDGRST_Msk
 (0x1UL << 
RCC_APB1RSTR_WWDGRST_Pos
√ã

	)

1593 
	#RCC_APB1RSTR_WWDGRST
 
RCC_APB1RSTR_WWDGRST_Msk


	)

1594 
	#RCC_APB1RSTR_USART2RST_Pos
 (17U)

	)

1595 
	#RCC_APB1RSTR_USART2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_USART2RST_Pos
√ã

	)

1596 
	#RCC_APB1RSTR_USART2RST
 
RCC_APB1RSTR_USART2RST_Msk


	)

1597 
	#RCC_APB1RSTR_I2C1RST_Pos
 (21U)

	)

1598 
	#RCC_APB1RSTR_I2C1RST_Msk
 (0x1UL << 
RCC_APB1RSTR_I2C1RST_Pos
√ã

	)

1599 
	#RCC_APB1RSTR_I2C1RST
 
RCC_APB1RSTR_I2C1RST_Msk


	)

1601 
	#RCC_APB1RSTR_CAN1RST_Pos
 (25U)

	)

1602 
	#RCC_APB1RSTR_CAN1RST_Msk
 (0x1UL << 
RCC_APB1RSTR_CAN1RST_Pos
√ã

	)

1603 
	#RCC_APB1RSTR_CAN1RST
 
RCC_APB1RSTR_CAN1RST_Msk


	)

1605 
	#RCC_APB1RSTR_BKPRST_Pos
 (27U)

	)

1606 
	#RCC_APB1RSTR_BKPRST_Msk
 (0x1UL << 
RCC_APB1RSTR_BKPRST_Pos
√ã

	)

1607 
	#RCC_APB1RSTR_BKPRST
 
RCC_APB1RSTR_BKPRST_Msk


	)

1608 
	#RCC_APB1RSTR_PWRRST_Pos
 (28U)

	)

1609 
	#RCC_APB1RSTR_PWRRST_Msk
 (0x1UL << 
RCC_APB1RSTR_PWRRST_Pos
√ã

	)

1610 
	#RCC_APB1RSTR_PWRRST
 
RCC_APB1RSTR_PWRRST_Msk


	)

1612 
	#RCC_APB1RSTR_TIM4RST_Pos
 (2U)

	)

1613 
	#RCC_APB1RSTR_TIM4RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM4RST_Pos
√ã

	)

1614 
	#RCC_APB1RSTR_TIM4RST
 
RCC_APB1RSTR_TIM4RST_Msk


	)

1615 
	#RCC_APB1RSTR_SPI2RST_Pos
 (14U)

	)

1616 
	#RCC_APB1RSTR_SPI2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_SPI2RST_Pos
√ã

	)

1617 
	#RCC_APB1RSTR_SPI2RST
 
RCC_APB1RSTR_SPI2RST_Msk


	)

1618 
	#RCC_APB1RSTR_USART3RST_Pos
 (18U)

	)

1619 
	#RCC_APB1RSTR_USART3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_USART3RST_Pos
√ã

	)

1620 
	#RCC_APB1RSTR_USART3RST
 
RCC_APB1RSTR_USART3RST_Msk


	)

1621 
	#RCC_APB1RSTR_I2C2RST_Pos
 (22U)

	)

1622 
	#RCC_APB1RSTR_I2C2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_I2C2RST_Pos
√ã

	)

1623 
	#RCC_APB1RSTR_I2C2RST
 
RCC_APB1RSTR_I2C2RST_Msk


	)

1625 
	#RCC_APB1RSTR_USBRST_Pos
 (23U)

	)

1626 
	#RCC_APB1RSTR_USBRST_Msk
 (0x1UL << 
RCC_APB1RSTR_USBRST_Pos
√ã

	)

1627 
	#RCC_APB1RSTR_USBRST
 
RCC_APB1RSTR_USBRST_Msk


	)

1629 
	#RCC_APB1RSTR_TIM5RST_Pos
 (3U)

	)

1630 
	#RCC_APB1RSTR_TIM5RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM5RST_Pos
√ã

	)

1631 
	#RCC_APB1RSTR_TIM5RST
 
RCC_APB1RSTR_TIM5RST_Msk


	)

1632 
	#RCC_APB1RSTR_TIM6RST_Pos
 (4U)

	)

1633 
	#RCC_APB1RSTR_TIM6RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM6RST_Pos
√ã

	)

1634 
	#RCC_APB1RSTR_TIM6RST
 
RCC_APB1RSTR_TIM6RST_Msk


	)

1635 
	#RCC_APB1RSTR_TIM7RST_Pos
 (5U)

	)

1636 
	#RCC_APB1RSTR_TIM7RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM7RST_Pos
√ã

	)

1637 
	#RCC_APB1RSTR_TIM7RST
 
RCC_APB1RSTR_TIM7RST_Msk


	)

1638 
	#RCC_APB1RSTR_SPI3RST_Pos
 (15U)

	)

1639 
	#RCC_APB1RSTR_SPI3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_SPI3RST_Pos
√ã

	)

1640 
	#RCC_APB1RSTR_SPI3RST
 
RCC_APB1RSTR_SPI3RST_Msk


	)

1641 
	#RCC_APB1RSTR_UART4RST_Pos
 (19U)

	)

1642 
	#RCC_APB1RSTR_UART4RST_Msk
 (0x1UL << 
RCC_APB1RSTR_UART4RST_Pos
√ã

	)

1643 
	#RCC_APB1RSTR_UART4RST
 
RCC_APB1RSTR_UART4RST_Msk


	)

1644 
	#RCC_APB1RSTR_UART5RST_Pos
 (20U)

	)

1645 
	#RCC_APB1RSTR_UART5RST_Msk
 (0x1UL << 
RCC_APB1RSTR_UART5RST_Pos
√ã

	)

1646 
	#RCC_APB1RSTR_UART5RST
 
RCC_APB1RSTR_UART5RST_Msk


	)

1651 
	#RCC_APB1RSTR_DACRST_Pos
 (29U)

	)

1652 
	#RCC_APB1RSTR_DACRST_Msk
 (0x1UL << 
RCC_APB1RSTR_DACRST_Pos
√ã

	)

1653 
	#RCC_APB1RSTR_DACRST
 
RCC_APB1RSTR_DACRST_Msk


	)

1656 
	#RCC_AHBENR_DMA1EN_Pos
 (0U)

	)

1657 
	#RCC_AHBENR_DMA1EN_Msk
 (0x1UL << 
RCC_AHBENR_DMA1EN_Pos
√ã

	)

1658 
	#RCC_AHBENR_DMA1EN
 
RCC_AHBENR_DMA1EN_Msk


	)

1659 
	#RCC_AHBENR_SRAMEN_Pos
 (2U)

	)

1660 
	#RCC_AHBENR_SRAMEN_Msk
 (0x1UL << 
RCC_AHBENR_SRAMEN_Pos
√ã

	)

1661 
	#RCC_AHBENR_SRAMEN
 
RCC_AHBENR_SRAMEN_Msk


	)

1662 
	#RCC_AHBENR_FLITFEN_Pos
 (4U)

	)

1663 
	#RCC_AHBENR_FLITFEN_Msk
 (0x1UL << 
RCC_AHBENR_FLITFEN_Pos
√ã

	)

1664 
	#RCC_AHBENR_FLITFEN
 
RCC_AHBENR_FLITFEN_Msk


	)

1665 
	#RCC_AHBENR_CRCEN_Pos
 (6U)

	)

1666 
	#RCC_AHBENR_CRCEN_Msk
 (0x1UL << 
RCC_AHBENR_CRCEN_Pos
√ã

	)

1667 
	#RCC_AHBENR_CRCEN
 
RCC_AHBENR_CRCEN_Msk


	)

1669 
	#RCC_AHBENR_DMA2EN_Pos
 (1U)

	)

1670 
	#RCC_AHBENR_DMA2EN_Msk
 (0x1UL << 
RCC_AHBENR_DMA2EN_Pos
√ã

	)

1671 
	#RCC_AHBENR_DMA2EN
 
RCC_AHBENR_DMA2EN_Msk


	)

1673 
	#RCC_AHBENR_FSMCEN_Pos
 (8U)

	)

1674 
	#RCC_AHBENR_FSMCEN_Msk
 (0x1UL << 
RCC_AHBENR_FSMCEN_Pos
√ã

	)

1675 
	#RCC_AHBENR_FSMCEN
 
RCC_AHBENR_FSMCEN_Msk


	)

1676 
	#RCC_AHBENR_SDIOEN_Pos
 (10U)

	)

1677 
	#RCC_AHBENR_SDIOEN_Msk
 (0x1UL << 
RCC_AHBENR_SDIOEN_Pos
√ã

	)

1678 
	#RCC_AHBENR_SDIOEN
 
RCC_AHBENR_SDIOEN_Msk


	)

1682 
	#RCC_APB2ENR_AFIOEN_Pos
 (0U)

	)

1683 
	#RCC_APB2ENR_AFIOEN_Msk
 (0x1UL << 
RCC_APB2ENR_AFIOEN_Pos
√ã

	)

1684 
	#RCC_APB2ENR_AFIOEN
 
RCC_APB2ENR_AFIOEN_Msk


	)

1685 
	#RCC_APB2ENR_IOPAEN_Pos
 (2U)

	)

1686 
	#RCC_APB2ENR_IOPAEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPAEN_Pos
√ã

	)

1687 
	#RCC_APB2ENR_IOPAEN
 
RCC_APB2ENR_IOPAEN_Msk


	)

1688 
	#RCC_APB2ENR_IOPBEN_Pos
 (3U)

	)

1689 
	#RCC_APB2ENR_IOPBEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPBEN_Pos
√ã

	)

1690 
	#RCC_APB2ENR_IOPBEN
 
RCC_APB2ENR_IOPBEN_Msk


	)

1691 
	#RCC_APB2ENR_IOPCEN_Pos
 (4U)

	)

1692 
	#RCC_APB2ENR_IOPCEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPCEN_Pos
√ã

	)

1693 
	#RCC_APB2ENR_IOPCEN
 
RCC_APB2ENR_IOPCEN_Msk


	)

1694 
	#RCC_APB2ENR_IOPDEN_Pos
 (5U)

	)

1695 
	#RCC_APB2ENR_IOPDEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPDEN_Pos
√ã

	)

1696 
	#RCC_APB2ENR_IOPDEN
 
RCC_APB2ENR_IOPDEN_Msk


	)

1697 
	#RCC_APB2ENR_ADC1EN_Pos
 (9U)

	)

1698 
	#RCC_APB2ENR_ADC1EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC1EN_Pos
√ã

	)

1699 
	#RCC_APB2ENR_ADC1EN
 
RCC_APB2ENR_ADC1EN_Msk


	)

1701 
	#RCC_APB2ENR_ADC2EN_Pos
 (10U)

	)

1702 
	#RCC_APB2ENR_ADC2EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC2EN_Pos
√ã

	)

1703 
	#RCC_APB2ENR_ADC2EN
 
RCC_APB2ENR_ADC2EN_Msk


	)

1705 
	#RCC_APB2ENR_TIM1EN_Pos
 (11U)

	)

1706 
	#RCC_APB2ENR_TIM1EN_Msk
 (0x1UL << 
RCC_APB2ENR_TIM1EN_Pos
√ã

	)

1707 
	#RCC_APB2ENR_TIM1EN
 
RCC_APB2ENR_TIM1EN_Msk


	)

1708 
	#RCC_APB2ENR_SPI1EN_Pos
 (12U)

	)

1709 
	#RCC_APB2ENR_SPI1EN_Msk
 (0x1UL << 
RCC_APB2ENR_SPI1EN_Pos
√ã

	)

1710 
	#RCC_APB2ENR_SPI1EN
 
RCC_APB2ENR_SPI1EN_Msk


	)

1711 
	#RCC_APB2ENR_USART1EN_Pos
 (14U)

	)

1712 
	#RCC_APB2ENR_USART1EN_Msk
 (0x1UL << 
RCC_APB2ENR_USART1EN_Pos
√ã

	)

1713 
	#RCC_APB2ENR_USART1EN
 
RCC_APB2ENR_USART1EN_Msk


	)

1716 
	#RCC_APB2ENR_IOPEEN_Pos
 (6U)

	)

1717 
	#RCC_APB2ENR_IOPEEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPEEN_Pos
√ã

	)

1718 
	#RCC_APB2ENR_IOPEEN
 
RCC_APB2ENR_IOPEEN_Msk


	)

1720 
	#RCC_APB2ENR_IOPFEN_Pos
 (7U)

	)

1721 
	#RCC_APB2ENR_IOPFEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPFEN_Pos
√ã

	)

1722 
	#RCC_APB2ENR_IOPFEN
 
RCC_APB2ENR_IOPFEN_Msk


	)

1723 
	#RCC_APB2ENR_IOPGEN_Pos
 (8U)

	)

1724 
	#RCC_APB2ENR_IOPGEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPGEN_Pos
√ã

	)

1725 
	#RCC_APB2ENR_IOPGEN
 
RCC_APB2ENR_IOPGEN_Msk


	)

1726 
	#RCC_APB2ENR_TIM8EN_Pos
 (13U)

	)

1727 
	#RCC_APB2ENR_TIM8EN_Msk
 (0x1UL << 
RCC_APB2ENR_TIM8EN_Pos
√ã

	)

1728 
	#RCC_APB2ENR_TIM8EN
 
RCC_APB2ENR_TIM8EN_Msk


	)

1729 
	#RCC_APB2ENR_ADC3EN_Pos
 (15U)

	)

1730 
	#RCC_APB2ENR_ADC3EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC3EN_Pos
√ã

	)

1731 
	#RCC_APB2ENR_ADC3EN
 
RCC_APB2ENR_ADC3EN_Msk


	)

1736 
	#RCC_APB1ENR_TIM2EN_Pos
 (0U)

	)

1737 
	#RCC_APB1ENR_TIM2EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM2EN_Pos
√ã

	)

1738 
	#RCC_APB1ENR_TIM2EN
 
RCC_APB1ENR_TIM2EN_Msk


	)

1739 
	#RCC_APB1ENR_TIM3EN_Pos
 (1U)

	)

1740 
	#RCC_APB1ENR_TIM3EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM3EN_Pos
√ã

	)

1741 
	#RCC_APB1ENR_TIM3EN
 
RCC_APB1ENR_TIM3EN_Msk


	)

1742 
	#RCC_APB1ENR_WWDGEN_Pos
 (11U)

	)

1743 
	#RCC_APB1ENR_WWDGEN_Msk
 (0x1UL << 
RCC_APB1ENR_WWDGEN_Pos
√ã

	)

1744 
	#RCC_APB1ENR_WWDGEN
 
RCC_APB1ENR_WWDGEN_Msk


	)

1745 
	#RCC_APB1ENR_USART2EN_Pos
 (17U)

	)

1746 
	#RCC_APB1ENR_USART2EN_Msk
 (0x1UL << 
RCC_APB1ENR_USART2EN_Pos
√ã

	)

1747 
	#RCC_APB1ENR_USART2EN
 
RCC_APB1ENR_USART2EN_Msk


	)

1748 
	#RCC_APB1ENR_I2C1EN_Pos
 (21U)

	)

1749 
	#RCC_APB1ENR_I2C1EN_Msk
 (0x1UL << 
RCC_APB1ENR_I2C1EN_Pos
√ã

	)

1750 
	#RCC_APB1ENR_I2C1EN
 
RCC_APB1ENR_I2C1EN_Msk


	)

1752 
	#RCC_APB1ENR_CAN1EN_Pos
 (25U)

	)

1753 
	#RCC_APB1ENR_CAN1EN_Msk
 (0x1UL << 
RCC_APB1ENR_CAN1EN_Pos
√ã

	)

1754 
	#RCC_APB1ENR_CAN1EN
 
RCC_APB1ENR_CAN1EN_Msk


	)

1756 
	#RCC_APB1ENR_BKPEN_Pos
 (27U)

	)

1757 
	#RCC_APB1ENR_BKPEN_Msk
 (0x1UL << 
RCC_APB1ENR_BKPEN_Pos
√ã

	)

1758 
	#RCC_APB1ENR_BKPEN
 
RCC_APB1ENR_BKPEN_Msk


	)

1759 
	#RCC_APB1ENR_PWREN_Pos
 (28U)

	)

1760 
	#RCC_APB1ENR_PWREN_Msk
 (0x1UL << 
RCC_APB1ENR_PWREN_Pos
√ã

	)

1761 
	#RCC_APB1ENR_PWREN
 
RCC_APB1ENR_PWREN_Msk


	)

1763 
	#RCC_APB1ENR_TIM4EN_Pos
 (2U)

	)

1764 
	#RCC_APB1ENR_TIM4EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM4EN_Pos
√ã

	)

1765 
	#RCC_APB1ENR_TIM4EN
 
RCC_APB1ENR_TIM4EN_Msk


	)

1766 
	#RCC_APB1ENR_SPI2EN_Pos
 (14U)

	)

1767 
	#RCC_APB1ENR_SPI2EN_Msk
 (0x1UL << 
RCC_APB1ENR_SPI2EN_Pos
√ã

	)

1768 
	#RCC_APB1ENR_SPI2EN
 
RCC_APB1ENR_SPI2EN_Msk


	)

1769 
	#RCC_APB1ENR_USART3EN_Pos
 (18U)

	)

1770 
	#RCC_APB1ENR_USART3EN_Msk
 (0x1UL << 
RCC_APB1ENR_USART3EN_Pos
√ã

	)

1771 
	#RCC_APB1ENR_USART3EN
 
RCC_APB1ENR_USART3EN_Msk


	)

1772 
	#RCC_APB1ENR_I2C2EN_Pos
 (22U)

	)

1773 
	#RCC_APB1ENR_I2C2EN_Msk
 (0x1UL << 
RCC_APB1ENR_I2C2EN_Pos
√ã

	)

1774 
	#RCC_APB1ENR_I2C2EN
 
RCC_APB1ENR_I2C2EN_Msk


	)

1776 
	#RCC_APB1ENR_USBEN_Pos
 (23U)

	)

1777 
	#RCC_APB1ENR_USBEN_Msk
 (0x1UL << 
RCC_APB1ENR_USBEN_Pos
√ã

	)

1778 
	#RCC_APB1ENR_USBEN
 
RCC_APB1ENR_USBEN_Msk


	)

1780 
	#RCC_APB1ENR_TIM5EN_Pos
 (3U)

	)

1781 
	#RCC_APB1ENR_TIM5EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM5EN_Pos
√ã

	)

1782 
	#RCC_APB1ENR_TIM5EN
 
RCC_APB1ENR_TIM5EN_Msk


	)

1783 
	#RCC_APB1ENR_TIM6EN_Pos
 (4U)

	)

1784 
	#RCC_APB1ENR_TIM6EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM6EN_Pos
√ã

	)

1785 
	#RCC_APB1ENR_TIM6EN
 
RCC_APB1ENR_TIM6EN_Msk


	)

1786 
	#RCC_APB1ENR_TIM7EN_Pos
 (5U)

	)

1787 
	#RCC_APB1ENR_TIM7EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM7EN_Pos
√ã

	)

1788 
	#RCC_APB1ENR_TIM7EN
 
RCC_APB1ENR_TIM7EN_Msk


	)

1789 
	#RCC_APB1ENR_SPI3EN_Pos
 (15U)

	)

1790 
	#RCC_APB1ENR_SPI3EN_Msk
 (0x1UL << 
RCC_APB1ENR_SPI3EN_Pos
√ã

	)

1791 
	#RCC_APB1ENR_SPI3EN
 
RCC_APB1ENR_SPI3EN_Msk


	)

1792 
	#RCC_APB1ENR_UART4EN_Pos
 (19U)

	)

1793 
	#RCC_APB1ENR_UART4EN_Msk
 (0x1UL << 
RCC_APB1ENR_UART4EN_Pos
√ã

	)

1794 
	#RCC_APB1ENR_UART4EN
 
RCC_APB1ENR_UART4EN_Msk


	)

1795 
	#RCC_APB1ENR_UART5EN_Pos
 (20U)

	)

1796 
	#RCC_APB1ENR_UART5EN_Msk
 (0x1UL << 
RCC_APB1ENR_UART5EN_Pos
√ã

	)

1797 
	#RCC_APB1ENR_UART5EN
 
RCC_APB1ENR_UART5EN_Msk


	)

1802 
	#RCC_APB1ENR_DACEN_Pos
 (29U)

	)

1803 
	#RCC_APB1ENR_DACEN_Msk
 (0x1UL << 
RCC_APB1ENR_DACEN_Pos
√ã

	)

1804 
	#RCC_APB1ENR_DACEN
 
RCC_APB1ENR_DACEN_Msk


	)

1807 
	#RCC_BDCR_LSEON_Pos
 (0U)

	)

1808 
	#RCC_BDCR_LSEON_Msk
 (0x1UL << 
RCC_BDCR_LSEON_Pos
√ã

	)

1809 
	#RCC_BDCR_LSEON
 
RCC_BDCR_LSEON_Msk


	)

1810 
	#RCC_BDCR_LSERDY_Pos
 (1U)

	)

1811 
	#RCC_BDCR_LSERDY_Msk
 (0x1UL << 
RCC_BDCR_LSERDY_Pos
√ã

	)

1812 
	#RCC_BDCR_LSERDY
 
RCC_BDCR_LSERDY_Msk


	)

1813 
	#RCC_BDCR_LSEBYP_Pos
 (2U)

	)

1814 
	#RCC_BDCR_LSEBYP_Msk
 (0x1UL << 
RCC_BDCR_LSEBYP_Pos
√ã

	)

1815 
	#RCC_BDCR_LSEBYP
 
RCC_BDCR_LSEBYP_Msk


	)

1817 
	#RCC_BDCR_RTCSEL_Pos
 (8U)

	)

1818 
	#RCC_BDCR_RTCSEL_Msk
 (0x3UL << 
RCC_BDCR_RTCSEL_Pos
√ã

	)

1819 
	#RCC_BDCR_RTCSEL
 
RCC_BDCR_RTCSEL_Msk


	)

1820 
	#RCC_BDCR_RTCSEL_0
 (0x1UL << 
RCC_BDCR_RTCSEL_Pos
√ã

	)

1821 
	#RCC_BDCR_RTCSEL_1
 (0x2UL << 
RCC_BDCR_RTCSEL_Pos
√ã

	)

1824 
	#RCC_BDCR_RTCSEL_NOCLOCK
 0x00000000U

	)

1825 
	#RCC_BDCR_RTCSEL_LSE
 0x00000100U

	)

1826 
	#RCC_BDCR_RTCSEL_LSI
 0x00000200U

	)

1827 
	#RCC_BDCR_RTCSEL_HSE
 0x00000300U

	)

1829 
	#RCC_BDCR_RTCEN_Pos
 (15U)

	)

1830 
	#RCC_BDCR_RTCEN_Msk
 (0x1UL << 
RCC_BDCR_RTCEN_Pos
√ã

	)

1831 
	#RCC_BDCR_RTCEN
 
RCC_BDCR_RTCEN_Msk


	)

1832 
	#RCC_BDCR_BDRST_Pos
 (16U)

	)

1833 
	#RCC_BDCR_BDRST_Msk
 (0x1UL << 
RCC_BDCR_BDRST_Pos
√ã

	)

1834 
	#RCC_BDCR_BDRST
 
RCC_BDCR_BDRST_Msk


	)

1837 
	#RCC_CSR_LSION_Pos
 (0U)

	)

1838 
	#RCC_CSR_LSION_Msk
 (0x1UL << 
RCC_CSR_LSION_Pos
√ã

	)

1839 
	#RCC_CSR_LSION
 
RCC_CSR_LSION_Msk


	)

1840 
	#RCC_CSR_LSIRDY_Pos
 (1U)

	)

1841 
	#RCC_CSR_LSIRDY_Msk
 (0x1UL << 
RCC_CSR_LSIRDY_Pos
√ã

	)

1842 
	#RCC_CSR_LSIRDY
 
RCC_CSR_LSIRDY_Msk


	)

1843 
	#RCC_CSR_RMVF_Pos
 (24U)

	)

1844 
	#RCC_CSR_RMVF_Msk
 (0x1UL << 
RCC_CSR_RMVF_Pos
√ã

	)

1845 
	#RCC_CSR_RMVF
 
RCC_CSR_RMVF_Msk


	)

1846 
	#RCC_CSR_PINRSTF_Pos
 (26U)

	)

1847 
	#RCC_CSR_PINRSTF_Msk
 (0x1UL << 
RCC_CSR_PINRSTF_Pos
√ã

	)

1848 
	#RCC_CSR_PINRSTF
 
RCC_CSR_PINRSTF_Msk


	)

1849 
	#RCC_CSR_PORRSTF_Pos
 (27U)

	)

1850 
	#RCC_CSR_PORRSTF_Msk
 (0x1UL << 
RCC_CSR_PORRSTF_Pos
√ã

	)

1851 
	#RCC_CSR_PORRSTF
 
RCC_CSR_PORRSTF_Msk


	)

1852 
	#RCC_CSR_SFTRSTF_Pos
 (28U)

	)

1853 
	#RCC_CSR_SFTRSTF_Msk
 (0x1UL << 
RCC_CSR_SFTRSTF_Pos
√ã

	)

1854 
	#RCC_CSR_SFTRSTF
 
RCC_CSR_SFTRSTF_Msk


	)

1855 
	#RCC_CSR_IWDGRSTF_Pos
 (29U)

	)

1856 
	#RCC_CSR_IWDGRSTF_Msk
 (0x1UL << 
RCC_CSR_IWDGRSTF_Pos
√ã

	)

1857 
	#RCC_CSR_IWDGRSTF
 
RCC_CSR_IWDGRSTF_Msk


	)

1858 
	#RCC_CSR_WWDGRSTF_Pos
 (30U)

	)

1859 
	#RCC_CSR_WWDGRSTF_Msk
 (0x1UL << 
RCC_CSR_WWDGRSTF_Pos
√ã

	)

1860 
	#RCC_CSR_WWDGRSTF
 
RCC_CSR_WWDGRSTF_Msk


	)

1861 
	#RCC_CSR_LPWRRSTF_Pos
 (31U)

	)

1862 
	#RCC_CSR_LPWRRSTF_Msk
 (0x1UL << 
RCC_CSR_LPWRRSTF_Pos
√ã

	)

1863 
	#RCC_CSR_LPWRRSTF
 
RCC_CSR_LPWRRSTF_Msk


	)

1874 
	#GPIO_CRL_MODE_Pos
 (0U)

	)

1875 
	#GPIO_CRL_MODE_Msk
 (0x33333333UL << 
GPIO_CRL_MODE_Pos
√ã

	)

1876 
	#GPIO_CRL_MODE
 
GPIO_CRL_MODE_Msk


	)

1878 
	#GPIO_CRL_MODE0_Pos
 (0U)

	)

1879 
	#GPIO_CRL_MODE0_Msk
 (0x3UL << 
GPIO_CRL_MODE0_Pos
√ã

	)

1880 
	#GPIO_CRL_MODE0
 
GPIO_CRL_MODE0_Msk


	)

1881 
	#GPIO_CRL_MODE0_0
 (0x1UL << 
GPIO_CRL_MODE0_Pos
√ã

	)

1882 
	#GPIO_CRL_MODE0_1
 (0x2UL << 
GPIO_CRL_MODE0_Pos
√ã

	)

1884 
	#GPIO_CRL_MODE1_Pos
 (4U)

	)

1885 
	#GPIO_CRL_MODE1_Msk
 (0x3UL << 
GPIO_CRL_MODE1_Pos
√ã

	)

1886 
	#GPIO_CRL_MODE1
 
GPIO_CRL_MODE1_Msk


	)

1887 
	#GPIO_CRL_MODE1_0
 (0x1UL << 
GPIO_CRL_MODE1_Pos
√ã

	)

1888 
	#GPIO_CRL_MODE1_1
 (0x2UL << 
GPIO_CRL_MODE1_Pos
√ã

	)

1890 
	#GPIO_CRL_MODE2_Pos
 (8U)

	)

1891 
	#GPIO_CRL_MODE2_Msk
 (0x3UL << 
GPIO_CRL_MODE2_Pos
√ã

	)

1892 
	#GPIO_CRL_MODE2
 
GPIO_CRL_MODE2_Msk


	)

1893 
	#GPIO_CRL_MODE2_0
 (0x1UL << 
GPIO_CRL_MODE2_Pos
√ã

	)

1894 
	#GPIO_CRL_MODE2_1
 (0x2UL << 
GPIO_CRL_MODE2_Pos
√ã

	)

1896 
	#GPIO_CRL_MODE3_Pos
 (12U)

	)

1897 
	#GPIO_CRL_MODE3_Msk
 (0x3UL << 
GPIO_CRL_MODE3_Pos
√ã

	)

1898 
	#GPIO_CRL_MODE3
 
GPIO_CRL_MODE3_Msk


	)

1899 
	#GPIO_CRL_MODE3_0
 (0x1UL << 
GPIO_CRL_MODE3_Pos
√ã

	)

1900 
	#GPIO_CRL_MODE3_1
 (0x2UL << 
GPIO_CRL_MODE3_Pos
√ã

	)

1902 
	#GPIO_CRL_MODE4_Pos
 (16U)

	)

1903 
	#GPIO_CRL_MODE4_Msk
 (0x3UL << 
GPIO_CRL_MODE4_Pos
√ã

	)

1904 
	#GPIO_CRL_MODE4
 
GPIO_CRL_MODE4_Msk


	)

1905 
	#GPIO_CRL_MODE4_0
 (0x1UL << 
GPIO_CRL_MODE4_Pos
√ã

	)

1906 
	#GPIO_CRL_MODE4_1
 (0x2UL << 
GPIO_CRL_MODE4_Pos
√ã

	)

1908 
	#GPIO_CRL_MODE5_Pos
 (20U)

	)

1909 
	#GPIO_CRL_MODE5_Msk
 (0x3UL << 
GPIO_CRL_MODE5_Pos
√ã

	)

1910 
	#GPIO_CRL_MODE5
 
GPIO_CRL_MODE5_Msk


	)

1911 
	#GPIO_CRL_MODE5_0
 (0x1UL << 
GPIO_CRL_MODE5_Pos
√ã

	)

1912 
	#GPIO_CRL_MODE5_1
 (0x2UL << 
GPIO_CRL_MODE5_Pos
√ã

	)

1914 
	#GPIO_CRL_MODE6_Pos
 (24U)

	)

1915 
	#GPIO_CRL_MODE6_Msk
 (0x3UL << 
GPIO_CRL_MODE6_Pos
√ã

	)

1916 
	#GPIO_CRL_MODE6
 
GPIO_CRL_MODE6_Msk


	)

1917 
	#GPIO_CRL_MODE6_0
 (0x1UL << 
GPIO_CRL_MODE6_Pos
√ã

	)

1918 
	#GPIO_CRL_MODE6_1
 (0x2UL << 
GPIO_CRL_MODE6_Pos
√ã

	)

1920 
	#GPIO_CRL_MODE7_Pos
 (28U)

	)

1921 
	#GPIO_CRL_MODE7_Msk
 (0x3UL << 
GPIO_CRL_MODE7_Pos
√ã

	)

1922 
	#GPIO_CRL_MODE7
 
GPIO_CRL_MODE7_Msk


	)

1923 
	#GPIO_CRL_MODE7_0
 (0x1UL << 
GPIO_CRL_MODE7_Pos
√ã

	)

1924 
	#GPIO_CRL_MODE7_1
 (0x2UL << 
GPIO_CRL_MODE7_Pos
√ã

	)

1926 
	#GPIO_CRL_CNF_Pos
 (2U)

	)

1927 
	#GPIO_CRL_CNF_Msk
 (0x33333333UL << 
GPIO_CRL_CNF_Pos
√ã

	)

1928 
	#GPIO_CRL_CNF
 
GPIO_CRL_CNF_Msk


	)

1930 
	#GPIO_CRL_CNF0_Pos
 (2U)

	)

1931 
	#GPIO_CRL_CNF0_Msk
 (0x3UL << 
GPIO_CRL_CNF0_Pos
√ã

	)

1932 
	#GPIO_CRL_CNF0
 
GPIO_CRL_CNF0_Msk


	)

1933 
	#GPIO_CRL_CNF0_0
 (0x1UL << 
GPIO_CRL_CNF0_Pos
√ã

	)

1934 
	#GPIO_CRL_CNF0_1
 (0x2UL << 
GPIO_CRL_CNF0_Pos
√ã

	)

1936 
	#GPIO_CRL_CNF1_Pos
 (6U)

	)

1937 
	#GPIO_CRL_CNF1_Msk
 (0x3UL << 
GPIO_CRL_CNF1_Pos
√ã

	)

1938 
	#GPIO_CRL_CNF1
 
GPIO_CRL_CNF1_Msk


	)

1939 
	#GPIO_CRL_CNF1_0
 (0x1UL << 
GPIO_CRL_CNF1_Pos
√ã

	)

1940 
	#GPIO_CRL_CNF1_1
 (0x2UL << 
GPIO_CRL_CNF1_Pos
√ã

	)

1942 
	#GPIO_CRL_CNF2_Pos
 (10U)

	)

1943 
	#GPIO_CRL_CNF2_Msk
 (0x3UL << 
GPIO_CRL_CNF2_Pos
√ã

	)

1944 
	#GPIO_CRL_CNF2
 
GPIO_CRL_CNF2_Msk


	)

1945 
	#GPIO_CRL_CNF2_0
 (0x1UL << 
GPIO_CRL_CNF2_Pos
√ã

	)

1946 
	#GPIO_CRL_CNF2_1
 (0x2UL << 
GPIO_CRL_CNF2_Pos
√ã

	)

1948 
	#GPIO_CRL_CNF3_Pos
 (14U)

	)

1949 
	#GPIO_CRL_CNF3_Msk
 (0x3UL << 
GPIO_CRL_CNF3_Pos
√ã

	)

1950 
	#GPIO_CRL_CNF3
 
GPIO_CRL_CNF3_Msk


	)

1951 
	#GPIO_CRL_CNF3_0
 (0x1UL << 
GPIO_CRL_CNF3_Pos
√ã

	)

1952 
	#GPIO_CRL_CNF3_1
 (0x2UL << 
GPIO_CRL_CNF3_Pos
√ã

	)

1954 
	#GPIO_CRL_CNF4_Pos
 (18U)

	)

1955 
	#GPIO_CRL_CNF4_Msk
 (0x3UL << 
GPIO_CRL_CNF4_Pos
√ã

	)

1956 
	#GPIO_CRL_CNF4
 
GPIO_CRL_CNF4_Msk


	)

1957 
	#GPIO_CRL_CNF4_0
 (0x1UL << 
GPIO_CRL_CNF4_Pos
√ã

	)

1958 
	#GPIO_CRL_CNF4_1
 (0x2UL << 
GPIO_CRL_CNF4_Pos
√ã

	)

1960 
	#GPIO_CRL_CNF5_Pos
 (22U)

	)

1961 
	#GPIO_CRL_CNF5_Msk
 (0x3UL << 
GPIO_CRL_CNF5_Pos
√ã

	)

1962 
	#GPIO_CRL_CNF5
 
GPIO_CRL_CNF5_Msk


	)

1963 
	#GPIO_CRL_CNF5_0
 (0x1UL << 
GPIO_CRL_CNF5_Pos
√ã

	)

1964 
	#GPIO_CRL_CNF5_1
 (0x2UL << 
GPIO_CRL_CNF5_Pos
√ã

	)

1966 
	#GPIO_CRL_CNF6_Pos
 (26U)

	)

1967 
	#GPIO_CRL_CNF6_Msk
 (0x3UL << 
GPIO_CRL_CNF6_Pos
√ã

	)

1968 
	#GPIO_CRL_CNF6
 
GPIO_CRL_CNF6_Msk


	)

1969 
	#GPIO_CRL_CNF6_0
 (0x1UL << 
GPIO_CRL_CNF6_Pos
√ã

	)

1970 
	#GPIO_CRL_CNF6_1
 (0x2UL << 
GPIO_CRL_CNF6_Pos
√ã

	)

1972 
	#GPIO_CRL_CNF7_Pos
 (30U)

	)

1973 
	#GPIO_CRL_CNF7_Msk
 (0x3UL << 
GPIO_CRL_CNF7_Pos
√ã

	)

1974 
	#GPIO_CRL_CNF7
 
GPIO_CRL_CNF7_Msk


	)

1975 
	#GPIO_CRL_CNF7_0
 (0x1UL << 
GPIO_CRL_CNF7_Pos
√ã

	)

1976 
	#GPIO_CRL_CNF7_1
 (0x2UL << 
GPIO_CRL_CNF7_Pos
√ã

	)

1979 
	#GPIO_CRH_MODE_Pos
 (0U)

	)

1980 
	#GPIO_CRH_MODE_Msk
 (0x33333333UL << 
GPIO_CRH_MODE_Pos
√ã

	)

1981 
	#GPIO_CRH_MODE
 
GPIO_CRH_MODE_Msk


	)

1983 
	#GPIO_CRH_MODE8_Pos
 (0U)

	)

1984 
	#GPIO_CRH_MODE8_Msk
 (0x3UL << 
GPIO_CRH_MODE8_Pos
√ã

	)

1985 
	#GPIO_CRH_MODE8
 
GPIO_CRH_MODE8_Msk


	)

1986 
	#GPIO_CRH_MODE8_0
 (0x1UL << 
GPIO_CRH_MODE8_Pos
√ã

	)

1987 
	#GPIO_CRH_MODE8_1
 (0x2UL << 
GPIO_CRH_MODE8_Pos
√ã

	)

1989 
	#GPIO_CRH_MODE9_Pos
 (4U)

	)

1990 
	#GPIO_CRH_MODE9_Msk
 (0x3UL << 
GPIO_CRH_MODE9_Pos
√ã

	)

1991 
	#GPIO_CRH_MODE9
 
GPIO_CRH_MODE9_Msk


	)

1992 
	#GPIO_CRH_MODE9_0
 (0x1UL << 
GPIO_CRH_MODE9_Pos
√ã

	)

1993 
	#GPIO_CRH_MODE9_1
 (0x2UL << 
GPIO_CRH_MODE9_Pos
√ã

	)

1995 
	#GPIO_CRH_MODE10_Pos
 (8U)

	)

1996 
	#GPIO_CRH_MODE10_Msk
 (0x3UL << 
GPIO_CRH_MODE10_Pos
√ã

	)

1997 
	#GPIO_CRH_MODE10
 
GPIO_CRH_MODE10_Msk


	)

1998 
	#GPIO_CRH_MODE10_0
 (0x1UL << 
GPIO_CRH_MODE10_Pos
√ã

	)

1999 
	#GPIO_CRH_MODE10_1
 (0x2UL << 
GPIO_CRH_MODE10_Pos
√ã

	)

2001 
	#GPIO_CRH_MODE11_Pos
 (12U)

	)

2002 
	#GPIO_CRH_MODE11_Msk
 (0x3UL << 
GPIO_CRH_MODE11_Pos
√ã

	)

2003 
	#GPIO_CRH_MODE11
 
GPIO_CRH_MODE11_Msk


	)

2004 
	#GPIO_CRH_MODE11_0
 (0x1UL << 
GPIO_CRH_MODE11_Pos
√ã

	)

2005 
	#GPIO_CRH_MODE11_1
 (0x2UL << 
GPIO_CRH_MODE11_Pos
√ã

	)

2007 
	#GPIO_CRH_MODE12_Pos
 (16U)

	)

2008 
	#GPIO_CRH_MODE12_Msk
 (0x3UL << 
GPIO_CRH_MODE12_Pos
√ã

	)

2009 
	#GPIO_CRH_MODE12
 
GPIO_CRH_MODE12_Msk


	)

2010 
	#GPIO_CRH_MODE12_0
 (0x1UL << 
GPIO_CRH_MODE12_Pos
√ã

	)

2011 
	#GPIO_CRH_MODE12_1
 (0x2UL << 
GPIO_CRH_MODE12_Pos
√ã

	)

2013 
	#GPIO_CRH_MODE13_Pos
 (20U)

	)

2014 
	#GPIO_CRH_MODE13_Msk
 (0x3UL << 
GPIO_CRH_MODE13_Pos
√ã

	)

2015 
	#GPIO_CRH_MODE13
 
GPIO_CRH_MODE13_Msk


	)

2016 
	#GPIO_CRH_MODE13_0
 (0x1UL << 
GPIO_CRH_MODE13_Pos
√ã

	)

2017 
	#GPIO_CRH_MODE13_1
 (0x2UL << 
GPIO_CRH_MODE13_Pos
√ã

	)

2019 
	#GPIO_CRH_MODE14_Pos
 (24U)

	)

2020 
	#GPIO_CRH_MODE14_Msk
 (0x3UL << 
GPIO_CRH_MODE14_Pos
√ã

	)

2021 
	#GPIO_CRH_MODE14
 
GPIO_CRH_MODE14_Msk


	)

2022 
	#GPIO_CRH_MODE14_0
 (0x1UL << 
GPIO_CRH_MODE14_Pos
√ã

	)

2023 
	#GPIO_CRH_MODE14_1
 (0x2UL << 
GPIO_CRH_MODE14_Pos
√ã

	)

2025 
	#GPIO_CRH_MODE15_Pos
 (28U)

	)

2026 
	#GPIO_CRH_MODE15_Msk
 (0x3UL << 
GPIO_CRH_MODE15_Pos
√ã

	)

2027 
	#GPIO_CRH_MODE15
 
GPIO_CRH_MODE15_Msk


	)

2028 
	#GPIO_CRH_MODE15_0
 (0x1UL << 
GPIO_CRH_MODE15_Pos
√ã

	)

2029 
	#GPIO_CRH_MODE15_1
 (0x2UL << 
GPIO_CRH_MODE15_Pos
√ã

	)

2031 
	#GPIO_CRH_CNF_Pos
 (2U)

	)

2032 
	#GPIO_CRH_CNF_Msk
 (0x33333333UL << 
GPIO_CRH_CNF_Pos
√ã

	)

2033 
	#GPIO_CRH_CNF
 
GPIO_CRH_CNF_Msk


	)

2035 
	#GPIO_CRH_CNF8_Pos
 (2U)

	)

2036 
	#GPIO_CRH_CNF8_Msk
 (0x3UL << 
GPIO_CRH_CNF8_Pos
√ã

	)

2037 
	#GPIO_CRH_CNF8
 
GPIO_CRH_CNF8_Msk


	)

2038 
	#GPIO_CRH_CNF8_0
 (0x1UL << 
GPIO_CRH_CNF8_Pos
√ã

	)

2039 
	#GPIO_CRH_CNF8_1
 (0x2UL << 
GPIO_CRH_CNF8_Pos
√ã

	)

2041 
	#GPIO_CRH_CNF9_Pos
 (6U)

	)

2042 
	#GPIO_CRH_CNF9_Msk
 (0x3UL << 
GPIO_CRH_CNF9_Pos
√ã

	)

2043 
	#GPIO_CRH_CNF9
 
GPIO_CRH_CNF9_Msk


	)

2044 
	#GPIO_CRH_CNF9_0
 (0x1UL << 
GPIO_CRH_CNF9_Pos
√ã

	)

2045 
	#GPIO_CRH_CNF9_1
 (0x2UL << 
GPIO_CRH_CNF9_Pos
√ã

	)

2047 
	#GPIO_CRH_CNF10_Pos
 (10U)

	)

2048 
	#GPIO_CRH_CNF10_Msk
 (0x3UL << 
GPIO_CRH_CNF10_Pos
√ã

	)

2049 
	#GPIO_CRH_CNF10
 
GPIO_CRH_CNF10_Msk


	)

2050 
	#GPIO_CRH_CNF10_0
 (0x1UL << 
GPIO_CRH_CNF10_Pos
√ã

	)

2051 
	#GPIO_CRH_CNF10_1
 (0x2UL << 
GPIO_CRH_CNF10_Pos
√ã

	)

2053 
	#GPIO_CRH_CNF11_Pos
 (14U)

	)

2054 
	#GPIO_CRH_CNF11_Msk
 (0x3UL << 
GPIO_CRH_CNF11_Pos
√ã

	)

2055 
	#GPIO_CRH_CNF11
 
GPIO_CRH_CNF11_Msk


	)

2056 
	#GPIO_CRH_CNF11_0
 (0x1UL << 
GPIO_CRH_CNF11_Pos
√ã

	)

2057 
	#GPIO_CRH_CNF11_1
 (0x2UL << 
GPIO_CRH_CNF11_Pos
√ã

	)

2059 
	#GPIO_CRH_CNF12_Pos
 (18U)

	)

2060 
	#GPIO_CRH_CNF12_Msk
 (0x3UL << 
GPIO_CRH_CNF12_Pos
√ã

	)

2061 
	#GPIO_CRH_CNF12
 
GPIO_CRH_CNF12_Msk


	)

2062 
	#GPIO_CRH_CNF12_0
 (0x1UL << 
GPIO_CRH_CNF12_Pos
√ã

	)

2063 
	#GPIO_CRH_CNF12_1
 (0x2UL << 
GPIO_CRH_CNF12_Pos
√ã

	)

2065 
	#GPIO_CRH_CNF13_Pos
 (22U)

	)

2066 
	#GPIO_CRH_CNF13_Msk
 (0x3UL << 
GPIO_CRH_CNF13_Pos
√ã

	)

2067 
	#GPIO_CRH_CNF13
 
GPIO_CRH_CNF13_Msk


	)

2068 
	#GPIO_CRH_CNF13_0
 (0x1UL << 
GPIO_CRH_CNF13_Pos
√ã

	)

2069 
	#GPIO_CRH_CNF13_1
 (0x2UL << 
GPIO_CRH_CNF13_Pos
√ã

	)

2071 
	#GPIO_CRH_CNF14_Pos
 (26U)

	)

2072 
	#GPIO_CRH_CNF14_Msk
 (0x3UL << 
GPIO_CRH_CNF14_Pos
√ã

	)

2073 
	#GPIO_CRH_CNF14
 
GPIO_CRH_CNF14_Msk


	)

2074 
	#GPIO_CRH_CNF14_0
 (0x1UL << 
GPIO_CRH_CNF14_Pos
√ã

	)

2075 
	#GPIO_CRH_CNF14_1
 (0x2UL << 
GPIO_CRH_CNF14_Pos
√ã

	)

2077 
	#GPIO_CRH_CNF15_Pos
 (30U)

	)

2078 
	#GPIO_CRH_CNF15_Msk
 (0x3UL << 
GPIO_CRH_CNF15_Pos
√ã

	)

2079 
	#GPIO_CRH_CNF15
 
GPIO_CRH_CNF15_Msk


	)

2080 
	#GPIO_CRH_CNF15_0
 (0x1UL << 
GPIO_CRH_CNF15_Pos
√ã

	)

2081 
	#GPIO_CRH_CNF15_1
 (0x2UL << 
GPIO_CRH_CNF15_Pos
√ã

	)

2084 
	#GPIO_IDR_IDR0_Pos
 (0U)

	)

2085 
	#GPIO_IDR_IDR0_Msk
 (0x1UL << 
GPIO_IDR_IDR0_Pos
√ã

	)

2086 
	#GPIO_IDR_IDR0
 
GPIO_IDR_IDR0_Msk


	)

2087 
	#GPIO_IDR_IDR1_Pos
 (1U)

	)

2088 
	#GPIO_IDR_IDR1_Msk
 (0x1UL << 
GPIO_IDR_IDR1_Pos
√ã

	)

2089 
	#GPIO_IDR_IDR1
 
GPIO_IDR_IDR1_Msk


	)

2090 
	#GPIO_IDR_IDR2_Pos
 (2U)

	)

2091 
	#GPIO_IDR_IDR2_Msk
 (0x1UL << 
GPIO_IDR_IDR2_Pos
√ã

	)

2092 
	#GPIO_IDR_IDR2
 
GPIO_IDR_IDR2_Msk


	)

2093 
	#GPIO_IDR_IDR3_Pos
 (3U)

	)

2094 
	#GPIO_IDR_IDR3_Msk
 (0x1UL << 
GPIO_IDR_IDR3_Pos
√ã

	)

2095 
	#GPIO_IDR_IDR3
 
GPIO_IDR_IDR3_Msk


	)

2096 
	#GPIO_IDR_IDR4_Pos
 (4U)

	)

2097 
	#GPIO_IDR_IDR4_Msk
 (0x1UL << 
GPIO_IDR_IDR4_Pos
√ã

	)

2098 
	#GPIO_IDR_IDR4
 
GPIO_IDR_IDR4_Msk


	)

2099 
	#GPIO_IDR_IDR5_Pos
 (5U)

	)

2100 
	#GPIO_IDR_IDR5_Msk
 (0x1UL << 
GPIO_IDR_IDR5_Pos
√ã

	)

2101 
	#GPIO_IDR_IDR5
 
GPIO_IDR_IDR5_Msk


	)

2102 
	#GPIO_IDR_IDR6_Pos
 (6U)

	)

2103 
	#GPIO_IDR_IDR6_Msk
 (0x1UL << 
GPIO_IDR_IDR6_Pos
√ã

	)

2104 
	#GPIO_IDR_IDR6
 
GPIO_IDR_IDR6_Msk


	)

2105 
	#GPIO_IDR_IDR7_Pos
 (7U)

	)

2106 
	#GPIO_IDR_IDR7_Msk
 (0x1UL << 
GPIO_IDR_IDR7_Pos
√ã

	)

2107 
	#GPIO_IDR_IDR7
 
GPIO_IDR_IDR7_Msk


	)

2108 
	#GPIO_IDR_IDR8_Pos
 (8U)

	)

2109 
	#GPIO_IDR_IDR8_Msk
 (0x1UL << 
GPIO_IDR_IDR8_Pos
√ã

	)

2110 
	#GPIO_IDR_IDR8
 
GPIO_IDR_IDR8_Msk


	)

2111 
	#GPIO_IDR_IDR9_Pos
 (9U)

	)

2112 
	#GPIO_IDR_IDR9_Msk
 (0x1UL << 
GPIO_IDR_IDR9_Pos
√ã

	)

2113 
	#GPIO_IDR_IDR9
 
GPIO_IDR_IDR9_Msk


	)

2114 
	#GPIO_IDR_IDR10_Pos
 (10U)

	)

2115 
	#GPIO_IDR_IDR10_Msk
 (0x1UL << 
GPIO_IDR_IDR10_Pos
√ã

	)

2116 
	#GPIO_IDR_IDR10
 
GPIO_IDR_IDR10_Msk


	)

2117 
	#GPIO_IDR_IDR11_Pos
 (11U)

	)

2118 
	#GPIO_IDR_IDR11_Msk
 (0x1UL << 
GPIO_IDR_IDR11_Pos
√ã

	)

2119 
	#GPIO_IDR_IDR11
 
GPIO_IDR_IDR11_Msk


	)

2120 
	#GPIO_IDR_IDR12_Pos
 (12U)

	)

2121 
	#GPIO_IDR_IDR12_Msk
 (0x1UL << 
GPIO_IDR_IDR12_Pos
√ã

	)

2122 
	#GPIO_IDR_IDR12
 
GPIO_IDR_IDR12_Msk


	)

2123 
	#GPIO_IDR_IDR13_Pos
 (13U)

	)

2124 
	#GPIO_IDR_IDR13_Msk
 (0x1UL << 
GPIO_IDR_IDR13_Pos
√ã

	)

2125 
	#GPIO_IDR_IDR13
 
GPIO_IDR_IDR13_Msk


	)

2126 
	#GPIO_IDR_IDR14_Pos
 (14U)

	)

2127 
	#GPIO_IDR_IDR14_Msk
 (0x1UL << 
GPIO_IDR_IDR14_Pos
√ã

	)

2128 
	#GPIO_IDR_IDR14
 
GPIO_IDR_IDR14_Msk


	)

2129 
	#GPIO_IDR_IDR15_Pos
 (15U)

	)

2130 
	#GPIO_IDR_IDR15_Msk
 (0x1UL << 
GPIO_IDR_IDR15_Pos
√ã

	)

2131 
	#GPIO_IDR_IDR15
 
GPIO_IDR_IDR15_Msk


	)

2134 
	#GPIO_ODR_ODR0_Pos
 (0U)

	)

2135 
	#GPIO_ODR_ODR0_Msk
 (0x1UL << 
GPIO_ODR_ODR0_Pos
√ã

	)

2136 
	#GPIO_ODR_ODR0
 
GPIO_ODR_ODR0_Msk


	)

2137 
	#GPIO_ODR_ODR1_Pos
 (1U)

	)

2138 
	#GPIO_ODR_ODR1_Msk
 (0x1UL << 
GPIO_ODR_ODR1_Pos
√ã

	)

2139 
	#GPIO_ODR_ODR1
 
GPIO_ODR_ODR1_Msk


	)

2140 
	#GPIO_ODR_ODR2_Pos
 (2U)

	)

2141 
	#GPIO_ODR_ODR2_Msk
 (0x1UL << 
GPIO_ODR_ODR2_Pos
√ã

	)

2142 
	#GPIO_ODR_ODR2
 
GPIO_ODR_ODR2_Msk


	)

2143 
	#GPIO_ODR_ODR3_Pos
 (3U)

	)

2144 
	#GPIO_ODR_ODR3_Msk
 (0x1UL << 
GPIO_ODR_ODR3_Pos
√ã

	)

2145 
	#GPIO_ODR_ODR3
 
GPIO_ODR_ODR3_Msk


	)

2146 
	#GPIO_ODR_ODR4_Pos
 (4U)

	)

2147 
	#GPIO_ODR_ODR4_Msk
 (0x1UL << 
GPIO_ODR_ODR4_Pos
√ã

	)

2148 
	#GPIO_ODR_ODR4
 
GPIO_ODR_ODR4_Msk


	)

2149 
	#GPIO_ODR_ODR5_Pos
 (5U)

	)

2150 
	#GPIO_ODR_ODR5_Msk
 (0x1UL << 
GPIO_ODR_ODR5_Pos
√ã

	)

2151 
	#GPIO_ODR_ODR5
 
GPIO_ODR_ODR5_Msk


	)

2152 
	#GPIO_ODR_ODR6_Pos
 (6U)

	)

2153 
	#GPIO_ODR_ODR6_Msk
 (0x1UL << 
GPIO_ODR_ODR6_Pos
√ã

	)

2154 
	#GPIO_ODR_ODR6
 
GPIO_ODR_ODR6_Msk


	)

2155 
	#GPIO_ODR_ODR7_Pos
 (7U)

	)

2156 
	#GPIO_ODR_ODR7_Msk
 (0x1UL << 
GPIO_ODR_ODR7_Pos
√ã

	)

2157 
	#GPIO_ODR_ODR7
 
GPIO_ODR_ODR7_Msk


	)

2158 
	#GPIO_ODR_ODR8_Pos
 (8U)

	)

2159 
	#GPIO_ODR_ODR8_Msk
 (0x1UL << 
GPIO_ODR_ODR8_Pos
√ã

	)

2160 
	#GPIO_ODR_ODR8
 
GPIO_ODR_ODR8_Msk


	)

2161 
	#GPIO_ODR_ODR9_Pos
 (9U)

	)

2162 
	#GPIO_ODR_ODR9_Msk
 (0x1UL << 
GPIO_ODR_ODR9_Pos
√ã

	)

2163 
	#GPIO_ODR_ODR9
 
GPIO_ODR_ODR9_Msk


	)

2164 
	#GPIO_ODR_ODR10_Pos
 (10U)

	)

2165 
	#GPIO_ODR_ODR10_Msk
 (0x1UL << 
GPIO_ODR_ODR10_Pos
√ã

	)

2166 
	#GPIO_ODR_ODR10
 
GPIO_ODR_ODR10_Msk


	)

2167 
	#GPIO_ODR_ODR11_Pos
 (11U)

	)

2168 
	#GPIO_ODR_ODR11_Msk
 (0x1UL << 
GPIO_ODR_ODR11_Pos
√ã

	)

2169 
	#GPIO_ODR_ODR11
 
GPIO_ODR_ODR11_Msk


	)

2170 
	#GPIO_ODR_ODR12_Pos
 (12U)

	)

2171 
	#GPIO_ODR_ODR12_Msk
 (0x1UL << 
GPIO_ODR_ODR12_Pos
√ã

	)

2172 
	#GPIO_ODR_ODR12
 
GPIO_ODR_ODR12_Msk


	)

2173 
	#GPIO_ODR_ODR13_Pos
 (13U)

	)

2174 
	#GPIO_ODR_ODR13_Msk
 (0x1UL << 
GPIO_ODR_ODR13_Pos
√ã

	)

2175 
	#GPIO_ODR_ODR13
 
GPIO_ODR_ODR13_Msk


	)

2176 
	#GPIO_ODR_ODR14_Pos
 (14U)

	)

2177 
	#GPIO_ODR_ODR14_Msk
 (0x1UL << 
GPIO_ODR_ODR14_Pos
√ã

	)

2178 
	#GPIO_ODR_ODR14
 
GPIO_ODR_ODR14_Msk


	)

2179 
	#GPIO_ODR_ODR15_Pos
 (15U)

	)

2180 
	#GPIO_ODR_ODR15_Msk
 (0x1UL << 
GPIO_ODR_ODR15_Pos
√ã

	)

2181 
	#GPIO_ODR_ODR15
 
GPIO_ODR_ODR15_Msk


	)

2184 
	#GPIO_BSRR_BS0_Pos
 (0U)

	)

2185 
	#GPIO_BSRR_BS0_Msk
 (0x1UL << 
GPIO_BSRR_BS0_Pos
√ã

	)

2186 
	#GPIO_BSRR_BS0
 
GPIO_BSRR_BS0_Msk


	)

2187 
	#GPIO_BSRR_BS1_Pos
 (1U)

	)

2188 
	#GPIO_BSRR_BS1_Msk
 (0x1UL << 
GPIO_BSRR_BS1_Pos
√ã

	)

2189 
	#GPIO_BSRR_BS1
 
GPIO_BSRR_BS1_Msk


	)

2190 
	#GPIO_BSRR_BS2_Pos
 (2U)

	)

2191 
	#GPIO_BSRR_BS2_Msk
 (0x1UL << 
GPIO_BSRR_BS2_Pos
√ã

	)

2192 
	#GPIO_BSRR_BS2
 
GPIO_BSRR_BS2_Msk


	)

2193 
	#GPIO_BSRR_BS3_Pos
 (3U)

	)

2194 
	#GPIO_BSRR_BS3_Msk
 (0x1UL << 
GPIO_BSRR_BS3_Pos
√ã

	)

2195 
	#GPIO_BSRR_BS3
 
GPIO_BSRR_BS3_Msk


	)

2196 
	#GPIO_BSRR_BS4_Pos
 (4U)

	)

2197 
	#GPIO_BSRR_BS4_Msk
 (0x1UL << 
GPIO_BSRR_BS4_Pos
√ã

	)

2198 
	#GPIO_BSRR_BS4
 
GPIO_BSRR_BS4_Msk


	)

2199 
	#GPIO_BSRR_BS5_Pos
 (5U)

	)

2200 
	#GPIO_BSRR_BS5_Msk
 (0x1UL << 
GPIO_BSRR_BS5_Pos
√ã

	)

2201 
	#GPIO_BSRR_BS5
 
GPIO_BSRR_BS5_Msk


	)

2202 
	#GPIO_BSRR_BS6_Pos
 (6U)

	)

2203 
	#GPIO_BSRR_BS6_Msk
 (0x1UL << 
GPIO_BSRR_BS6_Pos
√ã

	)

2204 
	#GPIO_BSRR_BS6
 
GPIO_BSRR_BS6_Msk


	)

2205 
	#GPIO_BSRR_BS7_Pos
 (7U)

	)

2206 
	#GPIO_BSRR_BS7_Msk
 (0x1UL << 
GPIO_BSRR_BS7_Pos
√ã

	)

2207 
	#GPIO_BSRR_BS7
 
GPIO_BSRR_BS7_Msk


	)

2208 
	#GPIO_BSRR_BS8_Pos
 (8U)

	)

2209 
	#GPIO_BSRR_BS8_Msk
 (0x1UL << 
GPIO_BSRR_BS8_Pos
√ã

	)

2210 
	#GPIO_BSRR_BS8
 
GPIO_BSRR_BS8_Msk


	)

2211 
	#GPIO_BSRR_BS9_Pos
 (9U)

	)

2212 
	#GPIO_BSRR_BS9_Msk
 (0x1UL << 
GPIO_BSRR_BS9_Pos
√ã

	)

2213 
	#GPIO_BSRR_BS9
 
GPIO_BSRR_BS9_Msk


	)

2214 
	#GPIO_BSRR_BS10_Pos
 (10U)

	)

2215 
	#GPIO_BSRR_BS10_Msk
 (0x1UL << 
GPIO_BSRR_BS10_Pos
√ã

	)

2216 
	#GPIO_BSRR_BS10
 
GPIO_BSRR_BS10_Msk


	)

2217 
	#GPIO_BSRR_BS11_Pos
 (11U)

	)

2218 
	#GPIO_BSRR_BS11_Msk
 (0x1UL << 
GPIO_BSRR_BS11_Pos
√ã

	)

2219 
	#GPIO_BSRR_BS11
 
GPIO_BSRR_BS11_Msk


	)

2220 
	#GPIO_BSRR_BS12_Pos
 (12U)

	)

2221 
	#GPIO_BSRR_BS12_Msk
 (0x1UL << 
GPIO_BSRR_BS12_Pos
√ã

	)

2222 
	#GPIO_BSRR_BS12
 
GPIO_BSRR_BS12_Msk


	)

2223 
	#GPIO_BSRR_BS13_Pos
 (13U)

	)

2224 
	#GPIO_BSRR_BS13_Msk
 (0x1UL << 
GPIO_BSRR_BS13_Pos
√ã

	)

2225 
	#GPIO_BSRR_BS13
 
GPIO_BSRR_BS13_Msk


	)

2226 
	#GPIO_BSRR_BS14_Pos
 (14U)

	)

2227 
	#GPIO_BSRR_BS14_Msk
 (0x1UL << 
GPIO_BSRR_BS14_Pos
√ã

	)

2228 
	#GPIO_BSRR_BS14
 
GPIO_BSRR_BS14_Msk


	)

2229 
	#GPIO_BSRR_BS15_Pos
 (15U)

	)

2230 
	#GPIO_BSRR_BS15_Msk
 (0x1UL << 
GPIO_BSRR_BS15_Pos
√ã

	)

2231 
	#GPIO_BSRR_BS15
 
GPIO_BSRR_BS15_Msk


	)

2233 
	#GPIO_BSRR_BR0_Pos
 (16U)

	)

2234 
	#GPIO_BSRR_BR0_Msk
 (0x1UL << 
GPIO_BSRR_BR0_Pos
√ã

	)

2235 
	#GPIO_BSRR_BR0
 
GPIO_BSRR_BR0_Msk


	)

2236 
	#GPIO_BSRR_BR1_Pos
 (17U)

	)

2237 
	#GPIO_BSRR_BR1_Msk
 (0x1UL << 
GPIO_BSRR_BR1_Pos
√ã

	)

2238 
	#GPIO_BSRR_BR1
 
GPIO_BSRR_BR1_Msk


	)

2239 
	#GPIO_BSRR_BR2_Pos
 (18U)

	)

2240 
	#GPIO_BSRR_BR2_Msk
 (0x1UL << 
GPIO_BSRR_BR2_Pos
√ã

	)

2241 
	#GPIO_BSRR_BR2
 
GPIO_BSRR_BR2_Msk


	)

2242 
	#GPIO_BSRR_BR3_Pos
 (19U)

	)

2243 
	#GPIO_BSRR_BR3_Msk
 (0x1UL << 
GPIO_BSRR_BR3_Pos
√ã

	)

2244 
	#GPIO_BSRR_BR3
 
GPIO_BSRR_BR3_Msk


	)

2245 
	#GPIO_BSRR_BR4_Pos
 (20U)

	)

2246 
	#GPIO_BSRR_BR4_Msk
 (0x1UL << 
GPIO_BSRR_BR4_Pos
√ã

	)

2247 
	#GPIO_BSRR_BR4
 
GPIO_BSRR_BR4_Msk


	)

2248 
	#GPIO_BSRR_BR5_Pos
 (21U)

	)

2249 
	#GPIO_BSRR_BR5_Msk
 (0x1UL << 
GPIO_BSRR_BR5_Pos
√ã

	)

2250 
	#GPIO_BSRR_BR5
 
GPIO_BSRR_BR5_Msk


	)

2251 
	#GPIO_BSRR_BR6_Pos
 (22U)

	)

2252 
	#GPIO_BSRR_BR6_Msk
 (0x1UL << 
GPIO_BSRR_BR6_Pos
√ã

	)

2253 
	#GPIO_BSRR_BR6
 
GPIO_BSRR_BR6_Msk


	)

2254 
	#GPIO_BSRR_BR7_Pos
 (23U)

	)

2255 
	#GPIO_BSRR_BR7_Msk
 (0x1UL << 
GPIO_BSRR_BR7_Pos
√ã

	)

2256 
	#GPIO_BSRR_BR7
 
GPIO_BSRR_BR7_Msk


	)

2257 
	#GPIO_BSRR_BR8_Pos
 (24U)

	)

2258 
	#GPIO_BSRR_BR8_Msk
 (0x1UL << 
GPIO_BSRR_BR8_Pos
√ã

	)

2259 
	#GPIO_BSRR_BR8
 
GPIO_BSRR_BR8_Msk


	)

2260 
	#GPIO_BSRR_BR9_Pos
 (25U)

	)

2261 
	#GPIO_BSRR_BR9_Msk
 (0x1UL << 
GPIO_BSRR_BR9_Pos
√ã

	)

2262 
	#GPIO_BSRR_BR9
 
GPIO_BSRR_BR9_Msk


	)

2263 
	#GPIO_BSRR_BR10_Pos
 (26U)

	)

2264 
	#GPIO_BSRR_BR10_Msk
 (0x1UL << 
GPIO_BSRR_BR10_Pos
√ã

	)

2265 
	#GPIO_BSRR_BR10
 
GPIO_BSRR_BR10_Msk


	)

2266 
	#GPIO_BSRR_BR11_Pos
 (27U)

	)

2267 
	#GPIO_BSRR_BR11_Msk
 (0x1UL << 
GPIO_BSRR_BR11_Pos
√ã

	)

2268 
	#GPIO_BSRR_BR11
 
GPIO_BSRR_BR11_Msk


	)

2269 
	#GPIO_BSRR_BR12_Pos
 (28U)

	)

2270 
	#GPIO_BSRR_BR12_Msk
 (0x1UL << 
GPIO_BSRR_BR12_Pos
√ã

	)

2271 
	#GPIO_BSRR_BR12
 
GPIO_BSRR_BR12_Msk


	)

2272 
	#GPIO_BSRR_BR13_Pos
 (29U)

	)

2273 
	#GPIO_BSRR_BR13_Msk
 (0x1UL << 
GPIO_BSRR_BR13_Pos
√ã

	)

2274 
	#GPIO_BSRR_BR13
 
GPIO_BSRR_BR13_Msk


	)

2275 
	#GPIO_BSRR_BR14_Pos
 (30U)

	)

2276 
	#GPIO_BSRR_BR14_Msk
 (0x1UL << 
GPIO_BSRR_BR14_Pos
√ã

	)

2277 
	#GPIO_BSRR_BR14
 
GPIO_BSRR_BR14_Msk


	)

2278 
	#GPIO_BSRR_BR15_Pos
 (31U)

	)

2279 
	#GPIO_BSRR_BR15_Msk
 (0x1UL << 
GPIO_BSRR_BR15_Pos
√ã

	)

2280 
	#GPIO_BSRR_BR15
 
GPIO_BSRR_BR15_Msk


	)

2283 
	#GPIO_BRR_BR0_Pos
 (0U)

	)

2284 
	#GPIO_BRR_BR0_Msk
 (0x1UL << 
GPIO_BRR_BR0_Pos
√ã

	)

2285 
	#GPIO_BRR_BR0
 
GPIO_BRR_BR0_Msk


	)

2286 
	#GPIO_BRR_BR1_Pos
 (1U)

	)

2287 
	#GPIO_BRR_BR1_Msk
 (0x1UL << 
GPIO_BRR_BR1_Pos
√ã

	)

2288 
	#GPIO_BRR_BR1
 
GPIO_BRR_BR1_Msk


	)

2289 
	#GPIO_BRR_BR2_Pos
 (2U)

	)

2290 
	#GPIO_BRR_BR2_Msk
 (0x1UL << 
GPIO_BRR_BR2_Pos
√ã

	)

2291 
	#GPIO_BRR_BR2
 
GPIO_BRR_BR2_Msk


	)

2292 
	#GPIO_BRR_BR3_Pos
 (3U)

	)

2293 
	#GPIO_BRR_BR3_Msk
 (0x1UL << 
GPIO_BRR_BR3_Pos
√ã

	)

2294 
	#GPIO_BRR_BR3
 
GPIO_BRR_BR3_Msk


	)

2295 
	#GPIO_BRR_BR4_Pos
 (4U)

	)

2296 
	#GPIO_BRR_BR4_Msk
 (0x1UL << 
GPIO_BRR_BR4_Pos
√ã

	)

2297 
	#GPIO_BRR_BR4
 
GPIO_BRR_BR4_Msk


	)

2298 
	#GPIO_BRR_BR5_Pos
 (5U)

	)

2299 
	#GPIO_BRR_BR5_Msk
 (0x1UL << 
GPIO_BRR_BR5_Pos
√ã

	)

2300 
	#GPIO_BRR_BR5
 
GPIO_BRR_BR5_Msk


	)

2301 
	#GPIO_BRR_BR6_Pos
 (6U)

	)

2302 
	#GPIO_BRR_BR6_Msk
 (0x1UL << 
GPIO_BRR_BR6_Pos
√ã

	)

2303 
	#GPIO_BRR_BR6
 
GPIO_BRR_BR6_Msk


	)

2304 
	#GPIO_BRR_BR7_Pos
 (7U)

	)

2305 
	#GPIO_BRR_BR7_Msk
 (0x1UL << 
GPIO_BRR_BR7_Pos
√ã

	)

2306 
	#GPIO_BRR_BR7
 
GPIO_BRR_BR7_Msk


	)

2307 
	#GPIO_BRR_BR8_Pos
 (8U)

	)

2308 
	#GPIO_BRR_BR8_Msk
 (0x1UL << 
GPIO_BRR_BR8_Pos
√ã

	)

2309 
	#GPIO_BRR_BR8
 
GPIO_BRR_BR8_Msk


	)

2310 
	#GPIO_BRR_BR9_Pos
 (9U)

	)

2311 
	#GPIO_BRR_BR9_Msk
 (0x1UL << 
GPIO_BRR_BR9_Pos
√ã

	)

2312 
	#GPIO_BRR_BR9
 
GPIO_BRR_BR9_Msk


	)

2313 
	#GPIO_BRR_BR10_Pos
 (10U)

	)

2314 
	#GPIO_BRR_BR10_Msk
 (0x1UL << 
GPIO_BRR_BR10_Pos
√ã

	)

2315 
	#GPIO_BRR_BR10
 
GPIO_BRR_BR10_Msk


	)

2316 
	#GPIO_BRR_BR11_Pos
 (11U)

	)

2317 
	#GPIO_BRR_BR11_Msk
 (0x1UL << 
GPIO_BRR_BR11_Pos
√ã

	)

2318 
	#GPIO_BRR_BR11
 
GPIO_BRR_BR11_Msk


	)

2319 
	#GPIO_BRR_BR12_Pos
 (12U)

	)

2320 
	#GPIO_BRR_BR12_Msk
 (0x1UL << 
GPIO_BRR_BR12_Pos
√ã

	)

2321 
	#GPIO_BRR_BR12
 
GPIO_BRR_BR12_Msk


	)

2322 
	#GPIO_BRR_BR13_Pos
 (13U)

	)

2323 
	#GPIO_BRR_BR13_Msk
 (0x1UL << 
GPIO_BRR_BR13_Pos
√ã

	)

2324 
	#GPIO_BRR_BR13
 
GPIO_BRR_BR13_Msk


	)

2325 
	#GPIO_BRR_BR14_Pos
 (14U)

	)

2326 
	#GPIO_BRR_BR14_Msk
 (0x1UL << 
GPIO_BRR_BR14_Pos
√ã

	)

2327 
	#GPIO_BRR_BR14
 
GPIO_BRR_BR14_Msk


	)

2328 
	#GPIO_BRR_BR15_Pos
 (15U)

	)

2329 
	#GPIO_BRR_BR15_Msk
 (0x1UL << 
GPIO_BRR_BR15_Pos
√ã

	)

2330 
	#GPIO_BRR_BR15
 
GPIO_BRR_BR15_Msk


	)

2333 
	#GPIO_LCKR_LCK0_Pos
 (0U)

	)

2334 
	#GPIO_LCKR_LCK0_Msk
 (0x1UL << 
GPIO_LCKR_LCK0_Pos
√ã

	)

2335 
	#GPIO_LCKR_LCK0
 
GPIO_LCKR_LCK0_Msk


	)

2336 
	#GPIO_LCKR_LCK1_Pos
 (1U)

	)

2337 
	#GPIO_LCKR_LCK1_Msk
 (0x1UL << 
GPIO_LCKR_LCK1_Pos
√ã

	)

2338 
	#GPIO_LCKR_LCK1
 
GPIO_LCKR_LCK1_Msk


	)

2339 
	#GPIO_LCKR_LCK2_Pos
 (2U)

	)

2340 
	#GPIO_LCKR_LCK2_Msk
 (0x1UL << 
GPIO_LCKR_LCK2_Pos
√ã

	)

2341 
	#GPIO_LCKR_LCK2
 
GPIO_LCKR_LCK2_Msk


	)

2342 
	#GPIO_LCKR_LCK3_Pos
 (3U)

	)

2343 
	#GPIO_LCKR_LCK3_Msk
 (0x1UL << 
GPIO_LCKR_LCK3_Pos
√ã

	)

2344 
	#GPIO_LCKR_LCK3
 
GPIO_LCKR_LCK3_Msk


	)

2345 
	#GPIO_LCKR_LCK4_Pos
 (4U)

	)

2346 
	#GPIO_LCKR_LCK4_Msk
 (0x1UL << 
GPIO_LCKR_LCK4_Pos
√ã

	)

2347 
	#GPIO_LCKR_LCK4
 
GPIO_LCKR_LCK4_Msk


	)

2348 
	#GPIO_LCKR_LCK5_Pos
 (5U)

	)

2349 
	#GPIO_LCKR_LCK5_Msk
 (0x1UL << 
GPIO_LCKR_LCK5_Pos
√ã

	)

2350 
	#GPIO_LCKR_LCK5
 
GPIO_LCKR_LCK5_Msk


	)

2351 
	#GPIO_LCKR_LCK6_Pos
 (6U)

	)

2352 
	#GPIO_LCKR_LCK6_Msk
 (0x1UL << 
GPIO_LCKR_LCK6_Pos
√ã

	)

2353 
	#GPIO_LCKR_LCK6
 
GPIO_LCKR_LCK6_Msk


	)

2354 
	#GPIO_LCKR_LCK7_Pos
 (7U)

	)

2355 
	#GPIO_LCKR_LCK7_Msk
 (0x1UL << 
GPIO_LCKR_LCK7_Pos
√ã

	)

2356 
	#GPIO_LCKR_LCK7
 
GPIO_LCKR_LCK7_Msk


	)

2357 
	#GPIO_LCKR_LCK8_Pos
 (8U)

	)

2358 
	#GPIO_LCKR_LCK8_Msk
 (0x1UL << 
GPIO_LCKR_LCK8_Pos
√ã

	)

2359 
	#GPIO_LCKR_LCK8
 
GPIO_LCKR_LCK8_Msk


	)

2360 
	#GPIO_LCKR_LCK9_Pos
 (9U)

	)

2361 
	#GPIO_LCKR_LCK9_Msk
 (0x1UL << 
GPIO_LCKR_LCK9_Pos
√ã

	)

2362 
	#GPIO_LCKR_LCK9
 
GPIO_LCKR_LCK9_Msk


	)

2363 
	#GPIO_LCKR_LCK10_Pos
 (10U)

	)

2364 
	#GPIO_LCKR_LCK10_Msk
 (0x1UL << 
GPIO_LCKR_LCK10_Pos
√ã

	)

2365 
	#GPIO_LCKR_LCK10
 
GPIO_LCKR_LCK10_Msk


	)

2366 
	#GPIO_LCKR_LCK11_Pos
 (11U)

	)

2367 
	#GPIO_LCKR_LCK11_Msk
 (0x1UL << 
GPIO_LCKR_LCK11_Pos
√ã

	)

2368 
	#GPIO_LCKR_LCK11
 
GPIO_LCKR_LCK11_Msk


	)

2369 
	#GPIO_LCKR_LCK12_Pos
 (12U)

	)

2370 
	#GPIO_LCKR_LCK12_Msk
 (0x1UL << 
GPIO_LCKR_LCK12_Pos
√ã

	)

2371 
	#GPIO_LCKR_LCK12
 
GPIO_LCKR_LCK12_Msk


	)

2372 
	#GPIO_LCKR_LCK13_Pos
 (13U)

	)

2373 
	#GPIO_LCKR_LCK13_Msk
 (0x1UL << 
GPIO_LCKR_LCK13_Pos
√ã

	)

2374 
	#GPIO_LCKR_LCK13
 
GPIO_LCKR_LCK13_Msk


	)

2375 
	#GPIO_LCKR_LCK14_Pos
 (14U)

	)

2376 
	#GPIO_LCKR_LCK14_Msk
 (0x1UL << 
GPIO_LCKR_LCK14_Pos
√ã

	)

2377 
	#GPIO_LCKR_LCK14
 
GPIO_LCKR_LCK14_Msk


	)

2378 
	#GPIO_LCKR_LCK15_Pos
 (15U)

	)

2379 
	#GPIO_LCKR_LCK15_Msk
 (0x1UL << 
GPIO_LCKR_LCK15_Pos
√ã

	)

2380 
	#GPIO_LCKR_LCK15
 
GPIO_LCKR_LCK15_Msk


	)

2381 
	#GPIO_LCKR_LCKK_Pos
 (16U)

	)

2382 
	#GPIO_LCKR_LCKK_Msk
 (0x1UL << 
GPIO_LCKR_LCKK_Pos
√ã

	)

2383 
	#GPIO_LCKR_LCKK
 
GPIO_LCKR_LCKK_Msk


	)

2388 
	#AFIO_EVCR_PIN_Pos
 (0U)

	)

2389 
	#AFIO_EVCR_PIN_Msk
 (0xFUL << 
AFIO_EVCR_PIN_Pos
√ã

	)

2390 
	#AFIO_EVCR_PIN
 
AFIO_EVCR_PIN_Msk


	)

2391 
	#AFIO_EVCR_PIN_0
 (0x1UL << 
AFIO_EVCR_PIN_Pos
√ã

	)

2392 
	#AFIO_EVCR_PIN_1
 (0x2UL << 
AFIO_EVCR_PIN_Pos
√ã

	)

2393 
	#AFIO_EVCR_PIN_2
 (0x4UL << 
AFIO_EVCR_PIN_Pos
√ã

	)

2394 
	#AFIO_EVCR_PIN_3
 (0x8UL << 
AFIO_EVCR_PIN_Pos
√ã

	)

2397 
	#AFIO_EVCR_PIN_PX0
 0x00000000U

	)

2398 
	#AFIO_EVCR_PIN_PX1_Pos
 (0U)

	)

2399 
	#AFIO_EVCR_PIN_PX1_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX1_Pos
√ã

	)

2400 
	#AFIO_EVCR_PIN_PX1
 
AFIO_EVCR_PIN_PX1_Msk


	)

2401 
	#AFIO_EVCR_PIN_PX2_Pos
 (1U)

	)

2402 
	#AFIO_EVCR_PIN_PX2_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX2_Pos
√ã

	)

2403 
	#AFIO_EVCR_PIN_PX2
 
AFIO_EVCR_PIN_PX2_Msk


	)

2404 
	#AFIO_EVCR_PIN_PX3_Pos
 (0U)

	)

2405 
	#AFIO_EVCR_PIN_PX3_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX3_Pos
√ã

	)

2406 
	#AFIO_EVCR_PIN_PX3
 
AFIO_EVCR_PIN_PX3_Msk


	)

2407 
	#AFIO_EVCR_PIN_PX4_Pos
 (2U)

	)

2408 
	#AFIO_EVCR_PIN_PX4_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX4_Pos
√ã

	)

2409 
	#AFIO_EVCR_PIN_PX4
 
AFIO_EVCR_PIN_PX4_Msk


	)

2410 
	#AFIO_EVCR_PIN_PX5_Pos
 (0U)

	)

2411 
	#AFIO_EVCR_PIN_PX5_Msk
 (0x5UL << 
AFIO_EVCR_PIN_PX5_Pos
√ã

	)

2412 
	#AFIO_EVCR_PIN_PX5
 
AFIO_EVCR_PIN_PX5_Msk


	)

2413 
	#AFIO_EVCR_PIN_PX6_Pos
 (1U)

	)

2414 
	#AFIO_EVCR_PIN_PX6_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX6_Pos
√ã

	)

2415 
	#AFIO_EVCR_PIN_PX6
 
AFIO_EVCR_PIN_PX6_Msk


	)

2416 
	#AFIO_EVCR_PIN_PX7_Pos
 (0U)

	)

2417 
	#AFIO_EVCR_PIN_PX7_Msk
 (0x7UL << 
AFIO_EVCR_PIN_PX7_Pos
√ã

	)

2418 
	#AFIO_EVCR_PIN_PX7
 
AFIO_EVCR_PIN_PX7_Msk


	)

2419 
	#AFIO_EVCR_PIN_PX8_Pos
 (3U)

	)

2420 
	#AFIO_EVCR_PIN_PX8_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX8_Pos
√ã

	)

2421 
	#AFIO_EVCR_PIN_PX8
 
AFIO_EVCR_PIN_PX8_Msk


	)

2422 
	#AFIO_EVCR_PIN_PX9_Pos
 (0U)

	)

2423 
	#AFIO_EVCR_PIN_PX9_Msk
 (0x9UL << 
AFIO_EVCR_PIN_PX9_Pos
√ã

	)

2424 
	#AFIO_EVCR_PIN_PX9
 
AFIO_EVCR_PIN_PX9_Msk


	)

2425 
	#AFIO_EVCR_PIN_PX10_Pos
 (1U)

	)

2426 
	#AFIO_EVCR_PIN_PX10_Msk
 (0x5UL << 
AFIO_EVCR_PIN_PX10_Pos
√ã

	)

2427 
	#AFIO_EVCR_PIN_PX10
 
AFIO_EVCR_PIN_PX10_Msk


	)

2428 
	#AFIO_EVCR_PIN_PX11_Pos
 (0U)

	)

2429 
	#AFIO_EVCR_PIN_PX11_Msk
 (0xBUL << 
AFIO_EVCR_PIN_PX11_Pos
√ã

	)

2430 
	#AFIO_EVCR_PIN_PX11
 
AFIO_EVCR_PIN_PX11_Msk


	)

2431 
	#AFIO_EVCR_PIN_PX12_Pos
 (2U)

	)

2432 
	#AFIO_EVCR_PIN_PX12_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX12_Pos
√ã

	)

2433 
	#AFIO_EVCR_PIN_PX12
 
AFIO_EVCR_PIN_PX12_Msk


	)

2434 
	#AFIO_EVCR_PIN_PX13_Pos
 (0U)

	)

2435 
	#AFIO_EVCR_PIN_PX13_Msk
 (0xDUL << 
AFIO_EVCR_PIN_PX13_Pos
√ã

	)

2436 
	#AFIO_EVCR_PIN_PX13
 
AFIO_EVCR_PIN_PX13_Msk


	)

2437 
	#AFIO_EVCR_PIN_PX14_Pos
 (1U)

	)

2438 
	#AFIO_EVCR_PIN_PX14_Msk
 (0x7UL << 
AFIO_EVCR_PIN_PX14_Pos
√ã

	)

2439 
	#AFIO_EVCR_PIN_PX14
 
AFIO_EVCR_PIN_PX14_Msk


	)

2440 
	#AFIO_EVCR_PIN_PX15_Pos
 (0U)

	)

2441 
	#AFIO_EVCR_PIN_PX15_Msk
 (0xFUL << 
AFIO_EVCR_PIN_PX15_Pos
√ã

	)

2442 
	#AFIO_EVCR_PIN_PX15
 
AFIO_EVCR_PIN_PX15_Msk


	)

2444 
	#AFIO_EVCR_PORT_Pos
 (4U)

	)

2445 
	#AFIO_EVCR_PORT_Msk
 (0x7UL << 
AFIO_EVCR_PORT_Pos
√ã

	)

2446 
	#AFIO_EVCR_PORT
 
AFIO_EVCR_PORT_Msk


	)

2447 
	#AFIO_EVCR_PORT_0
 (0x1UL << 
AFIO_EVCR_PORT_Pos
√ã

	)

2448 
	#AFIO_EVCR_PORT_1
 (0x2UL << 
AFIO_EVCR_PORT_Pos
√ã

	)

2449 
	#AFIO_EVCR_PORT_2
 (0x4UL << 
AFIO_EVCR_PORT_Pos
√ã

	)

2452 
	#AFIO_EVCR_PORT_PA
 0x00000000

	)

2453 
	#AFIO_EVCR_PORT_PB_Pos
 (4U)

	)

2454 
	#AFIO_EVCR_PORT_PB_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PB_Pos
√ã

	)

2455 
	#AFIO_EVCR_PORT_PB
 
AFIO_EVCR_PORT_PB_Msk


	)

2456 
	#AFIO_EVCR_PORT_PC_Pos
 (5U)

	)

2457 
	#AFIO_EVCR_PORT_PC_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PC_Pos
√ã

	)

2458 
	#AFIO_EVCR_PORT_PC
 
AFIO_EVCR_PORT_PC_Msk


	)

2459 
	#AFIO_EVCR_PORT_PD_Pos
 (4U)

	)

2460 
	#AFIO_EVCR_PORT_PD_Msk
 (0x3UL << 
AFIO_EVCR_PORT_PD_Pos
√ã

	)

2461 
	#AFIO_EVCR_PORT_PD
 
AFIO_EVCR_PORT_PD_Msk


	)

2462 
	#AFIO_EVCR_PORT_PE_Pos
 (6U)

	)

2463 
	#AFIO_EVCR_PORT_PE_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PE_Pos
√ã

	)

2464 
	#AFIO_EVCR_PORT_PE
 
AFIO_EVCR_PORT_PE_Msk


	)

2466 
	#AFIO_EVCR_EVOE_Pos
 (7U)

	)

2467 
	#AFIO_EVCR_EVOE_Msk
 (0x1UL << 
AFIO_EVCR_EVOE_Pos
√ã

	)

2468 
	#AFIO_EVCR_EVOE
 
AFIO_EVCR_EVOE_Msk


	)

2471 
	#AFIO_MAPR_SPI1_REMAP_Pos
 (0U)

	)

2472 
	#AFIO_MAPR_SPI1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_SPI1_REMAP_Pos
√ã

	)

2473 
	#AFIO_MAPR_SPI1_REMAP
 
AFIO_MAPR_SPI1_REMAP_Msk


	)

2474 
	#AFIO_MAPR_I2C1_REMAP_Pos
 (1U)

	)

2475 
	#AFIO_MAPR_I2C1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_I2C1_REMAP_Pos
√ã

	)

2476 
	#AFIO_MAPR_I2C1_REMAP
 
AFIO_MAPR_I2C1_REMAP_Msk


	)

2477 
	#AFIO_MAPR_USART1_REMAP_Pos
 (2U)

	)

2478 
	#AFIO_MAPR_USART1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART1_REMAP_Pos
√ã

	)

2479 
	#AFIO_MAPR_USART1_REMAP
 
AFIO_MAPR_USART1_REMAP_Msk


	)

2480 
	#AFIO_MAPR_USART2_REMAP_Pos
 (3U)

	)

2481 
	#AFIO_MAPR_USART2_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART2_REMAP_Pos
√ã

	)

2482 
	#AFIO_MAPR_USART2_REMAP
 
AFIO_MAPR_USART2_REMAP_Msk


	)

2484 
	#AFIO_MAPR_USART3_REMAP_Pos
 (4U)

	)

2485 
	#AFIO_MAPR_USART3_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_USART3_REMAP_Pos
√ã

	)

2486 
	#AFIO_MAPR_USART3_REMAP
 
AFIO_MAPR_USART3_REMAP_Msk


	)

2487 
	#AFIO_MAPR_USART3_REMAP_0
 (0x1UL << 
AFIO_MAPR_USART3_REMAP_Pos
√ã

	)

2488 
	#AFIO_MAPR_USART3_REMAP_1
 (0x2UL << 
AFIO_MAPR_USART3_REMAP_Pos
√ã

	)

2491 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 0x00000000U

	)

2492 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos
 (4U)

	)

2493 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos
√ã

	)

2494 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk


	)

2495 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos
 (4U)

	)

2496 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos
√ã

	)

2497 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 
AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk


	)

2499 
	#AFIO_MAPR_TIM1_REMAP_Pos
 (6U)

	)

2500 
	#AFIO_MAPR_TIM1_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM1_REMAP_Pos
√ã

	)

2501 
	#AFIO_MAPR_TIM1_REMAP
 
AFIO_MAPR_TIM1_REMAP_Msk


	)

2502 
	#AFIO_MAPR_TIM1_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM1_REMAP_Pos
√ã

	)

2503 
	#AFIO_MAPR_TIM1_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM1_REMAP_Pos
√ã

	)

2506 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 0x00000000U

	)

2507 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos
 (6U)

	)

2508 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos
√ã

	)

2509 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk


	)

2510 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos
 (6U)

	)

2511 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos
√ã

	)

2512 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 
AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk


	)

2514 
	#AFIO_MAPR_TIM2_REMAP_Pos
 (8U)

	)

2515 
	#AFIO_MAPR_TIM2_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM2_REMAP_Pos
√ã

	)

2516 
	#AFIO_MAPR_TIM2_REMAP
 
AFIO_MAPR_TIM2_REMAP_Msk


	)

2517 
	#AFIO_MAPR_TIM2_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_Pos
√ã

	)

2518 
	#AFIO_MAPR_TIM2_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM2_REMAP_Pos
√ã

	)

2521 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 0x00000000U

	)

2522 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos
 (8U)

	)

2523 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos
√ã

	)

2524 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk


	)

2525 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos
 (9U)

	)

2526 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos
√ã

	)

2527 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk


	)

2528 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos
 (8U)

	)

2529 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos
√ã

	)

2530 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 
AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk


	)

2532 
	#AFIO_MAPR_TIM3_REMAP_Pos
 (10U)

	)

2533 
	#AFIO_MAPR_TIM3_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM3_REMAP_Pos
√ã

	)

2534 
	#AFIO_MAPR_TIM3_REMAP
 
AFIO_MAPR_TIM3_REMAP_Msk


	)

2535 
	#AFIO_MAPR_TIM3_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM3_REMAP_Pos
√ã

	)

2536 
	#AFIO_MAPR_TIM3_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM3_REMAP_Pos
√ã

	)

2539 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 0x00000000U

	)

2540 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos
 (11U)

	)

2541 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos
√ã

	)

2542 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk


	)

2543 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos
 (10U)

	)

2544 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos
√ã

	)

2545 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 
AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk


	)

2547 
	#AFIO_MAPR_TIM4_REMAP_Pos
 (12U)

	)

2548 
	#AFIO_MAPR_TIM4_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM4_REMAP_Pos
√ã

	)

2549 
	#AFIO_MAPR_TIM4_REMAP
 
AFIO_MAPR_TIM4_REMAP_Msk


	)

2551 
	#AFIO_MAPR_CAN_REMAP_Pos
 (13U)

	)

2552 
	#AFIO_MAPR_CAN_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_CAN_REMAP_Pos
√ã

	)

2553 
	#AFIO_MAPR_CAN_REMAP
 
AFIO_MAPR_CAN_REMAP_Msk


	)

2554 
	#AFIO_MAPR_CAN_REMAP_0
 (0x1UL << 
AFIO_MAPR_CAN_REMAP_Pos
√ã

	)

2555 
	#AFIO_MAPR_CAN_REMAP_1
 (0x2UL << 
AFIO_MAPR_CAN_REMAP_Pos
√ã

	)

2558 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 0x00000000U

	)

2559 
	#AFIO_MAPR_CAN_REMAP_REMAP2_Pos
 (14U)

	)

2560 
	#AFIO_MAPR_CAN_REMAP_REMAP2_Msk
 (0x1UL << 
AFIO_MAPR_CAN_REMAP_REMAP2_Pos
√ã

	)

2561 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 
AFIO_MAPR_CAN_REMAP_REMAP2_Msk


	)

2562 
	#AFIO_MAPR_CAN_REMAP_REMAP3_Pos
 (13U)

	)

2563 
	#AFIO_MAPR_CAN_REMAP_REMAP3_Msk
 (0x3UL << 
AFIO_MAPR_CAN_REMAP_REMAP3_Pos
√ã

	)

2564 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 
AFIO_MAPR_CAN_REMAP_REMAP3_Msk


	)

2566 
	#AFIO_MAPR_PD01_REMAP_Pos
 (15U)

	)

2567 
	#AFIO_MAPR_PD01_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_PD01_REMAP_Pos
√ã

	)

2568 
	#AFIO_MAPR_PD01_REMAP
 
AFIO_MAPR_PD01_REMAP_Msk


	)

2569 
	#AFIO_MAPR_TIM5CH4_IREMAP_Pos
 (16U)

	)

2570 
	#AFIO_MAPR_TIM5CH4_IREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM5CH4_IREMAP_Pos
√ã

	)

2571 
	#AFIO_MAPR_TIM5CH4_IREMAP
 
AFIO_MAPR_TIM5CH4_IREMAP_Msk


	)

2572 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP_Pos
 (17U)

	)

2573 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_ADC1_ETRGINJ_REMAP_Pos
√ã

	)

2574 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 
AFIO_MAPR_ADC1_ETRGINJ_REMAP_Msk


	)

2575 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP_Pos
 (18U)

	)

2576 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_ADC1_ETRGREG_REMAP_Pos
√ã

	)

2577 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 
AFIO_MAPR_ADC1_ETRGREG_REMAP_Msk


	)

2578 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP_Pos
 (19U)

	)

2579 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_ADC2_ETRGINJ_REMAP_Pos
√ã

	)

2580 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 
AFIO_MAPR_ADC2_ETRGINJ_REMAP_Msk


	)

2581 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP_Pos
 (20U)

	)

2582 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_ADC2_ETRGREG_REMAP_Pos
√ã

	)

2583 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 
AFIO_MAPR_ADC2_ETRGREG_REMAP_Msk


	)

2586 
	#AFIO_MAPR_SWJ_CFG_Pos
 (24U)

	)

2587 
	#AFIO_MAPR_SWJ_CFG_Msk
 (0x7UL << 
AFIO_MAPR_SWJ_CFG_Pos
√ã

	)

2588 
	#AFIO_MAPR_SWJ_CFG
 
AFIO_MAPR_SWJ_CFG_Msk


	)

2589 
	#AFIO_MAPR_SWJ_CFG_0
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_Pos
√ã

	)

2590 
	#AFIO_MAPR_SWJ_CFG_1
 (0x2UL << 
AFIO_MAPR_SWJ_CFG_Pos
√ã

	)

2591 
	#AFIO_MAPR_SWJ_CFG_2
 (0x4UL << 
AFIO_MAPR_SWJ_CFG_Pos
√ã

	)

2593 
	#AFIO_MAPR_SWJ_CFG_RESET
 0x00000000U

	)

2594 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos
 (24U)

	)

2595 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos
√ã

	)

2596 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 
AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk


	)

2597 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos
 (25U)

	)

2598 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos
√ã

	)

2599 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk


	)

2600 
	#AFIO_MAPR_SWJ_CFG_DISABLE_Pos
 (26U)

	)

2601 
	#AFIO_MAPR_SWJ_CFG_DISABLE_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_DISABLE_Pos
√ã

	)

2602 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 
AFIO_MAPR_SWJ_CFG_DISABLE_Msk


	)

2606 
	#AFIO_EXTICR1_EXTI0_Pos
 (0U)

	)

2607 
	#AFIO_EXTICR1_EXTI0_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI0_Pos
√ã

	)

2608 
	#AFIO_EXTICR1_EXTI0
 
AFIO_EXTICR1_EXTI0_Msk


	)

2609 
	#AFIO_EXTICR1_EXTI1_Pos
 (4U)

	)

2610 
	#AFIO_EXTICR1_EXTI1_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI1_Pos
√ã

	)

2611 
	#AFIO_EXTICR1_EXTI1
 
AFIO_EXTICR1_EXTI1_Msk


	)

2612 
	#AFIO_EXTICR1_EXTI2_Pos
 (8U)

	)

2613 
	#AFIO_EXTICR1_EXTI2_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI2_Pos
√ã

	)

2614 
	#AFIO_EXTICR1_EXTI2
 
AFIO_EXTICR1_EXTI2_Msk


	)

2615 
	#AFIO_EXTICR1_EXTI3_Pos
 (12U)

	)

2616 
	#AFIO_EXTICR1_EXTI3_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI3_Pos
√ã

	)

2617 
	#AFIO_EXTICR1_EXTI3
 
AFIO_EXTICR1_EXTI3_Msk


	)

2620 
	#AFIO_EXTICR1_EXTI0_PA
 0x00000000U

	)

2621 
	#AFIO_EXTICR1_EXTI0_PB_Pos
 (0U)

	)

2622 
	#AFIO_EXTICR1_EXTI0_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PB_Pos
√ã

	)

2623 
	#AFIO_EXTICR1_EXTI0_PB
 
AFIO_EXTICR1_EXTI0_PB_Msk


	)

2624 
	#AFIO_EXTICR1_EXTI0_PC_Pos
 (1U)

	)

2625 
	#AFIO_EXTICR1_EXTI0_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PC_Pos
√ã

	)

2626 
	#AFIO_EXTICR1_EXTI0_PC
 
AFIO_EXTICR1_EXTI0_PC_Msk


	)

2627 
	#AFIO_EXTICR1_EXTI0_PD_Pos
 (0U)

	)

2628 
	#AFIO_EXTICR1_EXTI0_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI0_PD_Pos
√ã

	)

2629 
	#AFIO_EXTICR1_EXTI0_PD
 
AFIO_EXTICR1_EXTI0_PD_Msk


	)

2630 
	#AFIO_EXTICR1_EXTI0_PE_Pos
 (2U)

	)

2631 
	#AFIO_EXTICR1_EXTI0_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PE_Pos
√ã

	)

2632 
	#AFIO_EXTICR1_EXTI0_PE
 
AFIO_EXTICR1_EXTI0_PE_Msk


	)

2633 
	#AFIO_EXTICR1_EXTI0_PF_Pos
 (0U)

	)

2634 
	#AFIO_EXTICR1_EXTI0_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI0_PF_Pos
√ã

	)

2635 
	#AFIO_EXTICR1_EXTI0_PF
 
AFIO_EXTICR1_EXTI0_PF_Msk


	)

2636 
	#AFIO_EXTICR1_EXTI0_PG_Pos
 (1U)

	)

2637 
	#AFIO_EXTICR1_EXTI0_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI0_PG_Pos
√ã

	)

2638 
	#AFIO_EXTICR1_EXTI0_PG
 
AFIO_EXTICR1_EXTI0_PG_Msk


	)

2641 
	#AFIO_EXTICR1_EXTI1_PA
 0x00000000U

	)

2642 
	#AFIO_EXTICR1_EXTI1_PB_Pos
 (4U)

	)

2643 
	#AFIO_EXTICR1_EXTI1_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PB_Pos
√ã

	)

2644 
	#AFIO_EXTICR1_EXTI1_PB
 
AFIO_EXTICR1_EXTI1_PB_Msk


	)

2645 
	#AFIO_EXTICR1_EXTI1_PC_Pos
 (5U)

	)

2646 
	#AFIO_EXTICR1_EXTI1_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PC_Pos
√ã

	)

2647 
	#AFIO_EXTICR1_EXTI1_PC
 
AFIO_EXTICR1_EXTI1_PC_Msk


	)

2648 
	#AFIO_EXTICR1_EXTI1_PD_Pos
 (4U)

	)

2649 
	#AFIO_EXTICR1_EXTI1_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI1_PD_Pos
√ã

	)

2650 
	#AFIO_EXTICR1_EXTI1_PD
 
AFIO_EXTICR1_EXTI1_PD_Msk


	)

2651 
	#AFIO_EXTICR1_EXTI1_PE_Pos
 (6U)

	)

2652 
	#AFIO_EXTICR1_EXTI1_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PE_Pos
√ã

	)

2653 
	#AFIO_EXTICR1_EXTI1_PE
 
AFIO_EXTICR1_EXTI1_PE_Msk


	)

2654 
	#AFIO_EXTICR1_EXTI1_PF_Pos
 (4U)

	)

2655 
	#AFIO_EXTICR1_EXTI1_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI1_PF_Pos
√ã

	)

2656 
	#AFIO_EXTICR1_EXTI1_PF
 
AFIO_EXTICR1_EXTI1_PF_Msk


	)

2657 
	#AFIO_EXTICR1_EXTI1_PG_Pos
 (5U)

	)

2658 
	#AFIO_EXTICR1_EXTI1_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI1_PG_Pos
√ã

	)

2659 
	#AFIO_EXTICR1_EXTI1_PG
 
AFIO_EXTICR1_EXTI1_PG_Msk


	)

2662 
	#AFIO_EXTICR1_EXTI2_PA
 0x00000000U

	)

2663 
	#AFIO_EXTICR1_EXTI2_PB_Pos
 (8U)

	)

2664 
	#AFIO_EXTICR1_EXTI2_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PB_Pos
√ã

	)

2665 
	#AFIO_EXTICR1_EXTI2_PB
 
AFIO_EXTICR1_EXTI2_PB_Msk


	)

2666 
	#AFIO_EXTICR1_EXTI2_PC_Pos
 (9U)

	)

2667 
	#AFIO_EXTICR1_EXTI2_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PC_Pos
√ã

	)

2668 
	#AFIO_EXTICR1_EXTI2_PC
 
AFIO_EXTICR1_EXTI2_PC_Msk


	)

2669 
	#AFIO_EXTICR1_EXTI2_PD_Pos
 (8U)

	)

2670 
	#AFIO_EXTICR1_EXTI2_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI2_PD_Pos
√ã

	)

2671 
	#AFIO_EXTICR1_EXTI2_PD
 
AFIO_EXTICR1_EXTI2_PD_Msk


	)

2672 
	#AFIO_EXTICR1_EXTI2_PE_Pos
 (10U)

	)

2673 
	#AFIO_EXTICR1_EXTI2_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PE_Pos
√ã

	)

2674 
	#AFIO_EXTICR1_EXTI2_PE
 
AFIO_EXTICR1_EXTI2_PE_Msk


	)

2675 
	#AFIO_EXTICR1_EXTI2_PF_Pos
 (8U)

	)

2676 
	#AFIO_EXTICR1_EXTI2_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI2_PF_Pos
√ã

	)

2677 
	#AFIO_EXTICR1_EXTI2_PF
 
AFIO_EXTICR1_EXTI2_PF_Msk


	)

2678 
	#AFIO_EXTICR1_EXTI2_PG_Pos
 (9U)

	)

2679 
	#AFIO_EXTICR1_EXTI2_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI2_PG_Pos
√ã

	)

2680 
	#AFIO_EXTICR1_EXTI2_PG
 
AFIO_EXTICR1_EXTI2_PG_Msk


	)

2683 
	#AFIO_EXTICR1_EXTI3_PA
 0x00000000U

	)

2684 
	#AFIO_EXTICR1_EXTI3_PB_Pos
 (12U)

	)

2685 
	#AFIO_EXTICR1_EXTI3_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PB_Pos
√ã

	)

2686 
	#AFIO_EXTICR1_EXTI3_PB
 
AFIO_EXTICR1_EXTI3_PB_Msk


	)

2687 
	#AFIO_EXTICR1_EXTI3_PC_Pos
 (13U)

	)

2688 
	#AFIO_EXTICR1_EXTI3_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PC_Pos
√ã

	)

2689 
	#AFIO_EXTICR1_EXTI3_PC
 
AFIO_EXTICR1_EXTI3_PC_Msk


	)

2690 
	#AFIO_EXTICR1_EXTI3_PD_Pos
 (12U)

	)

2691 
	#AFIO_EXTICR1_EXTI3_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI3_PD_Pos
√ã

	)

2692 
	#AFIO_EXTICR1_EXTI3_PD
 
AFIO_EXTICR1_EXTI3_PD_Msk


	)

2693 
	#AFIO_EXTICR1_EXTI3_PE_Pos
 (14U)

	)

2694 
	#AFIO_EXTICR1_EXTI3_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PE_Pos
√ã

	)

2695 
	#AFIO_EXTICR1_EXTI3_PE
 
AFIO_EXTICR1_EXTI3_PE_Msk


	)

2696 
	#AFIO_EXTICR1_EXTI3_PF_Pos
 (12U)

	)

2697 
	#AFIO_EXTICR1_EXTI3_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI3_PF_Pos
√ã

	)

2698 
	#AFIO_EXTICR1_EXTI3_PF
 
AFIO_EXTICR1_EXTI3_PF_Msk


	)

2699 
	#AFIO_EXTICR1_EXTI3_PG_Pos
 (13U)

	)

2700 
	#AFIO_EXTICR1_EXTI3_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI3_PG_Pos
√ã

	)

2701 
	#AFIO_EXTICR1_EXTI3_PG
 
AFIO_EXTICR1_EXTI3_PG_Msk


	)

2704 
	#AFIO_EXTICR2_EXTI4_Pos
 (0U)

	)

2705 
	#AFIO_EXTICR2_EXTI4_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI4_Pos
√ã

	)

2706 
	#AFIO_EXTICR2_EXTI4
 
AFIO_EXTICR2_EXTI4_Msk


	)

2707 
	#AFIO_EXTICR2_EXTI5_Pos
 (4U)

	)

2708 
	#AFIO_EXTICR2_EXTI5_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI5_Pos
√ã

	)

2709 
	#AFIO_EXTICR2_EXTI5
 
AFIO_EXTICR2_EXTI5_Msk


	)

2710 
	#AFIO_EXTICR2_EXTI6_Pos
 (8U)

	)

2711 
	#AFIO_EXTICR2_EXTI6_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI6_Pos
√ã

	)

2712 
	#AFIO_EXTICR2_EXTI6
 
AFIO_EXTICR2_EXTI6_Msk


	)

2713 
	#AFIO_EXTICR2_EXTI7_Pos
 (12U)

	)

2714 
	#AFIO_EXTICR2_EXTI7_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI7_Pos
√ã

	)

2715 
	#AFIO_EXTICR2_EXTI7
 
AFIO_EXTICR2_EXTI7_Msk


	)

2718 
	#AFIO_EXTICR2_EXTI4_PA
 0x00000000U

	)

2719 
	#AFIO_EXTICR2_EXTI4_PB_Pos
 (0U)

	)

2720 
	#AFIO_EXTICR2_EXTI4_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PB_Pos
√ã

	)

2721 
	#AFIO_EXTICR2_EXTI4_PB
 
AFIO_EXTICR2_EXTI4_PB_Msk


	)

2722 
	#AFIO_EXTICR2_EXTI4_PC_Pos
 (1U)

	)

2723 
	#AFIO_EXTICR2_EXTI4_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PC_Pos
√ã

	)

2724 
	#AFIO_EXTICR2_EXTI4_PC
 
AFIO_EXTICR2_EXTI4_PC_Msk


	)

2725 
	#AFIO_EXTICR2_EXTI4_PD_Pos
 (0U)

	)

2726 
	#AFIO_EXTICR2_EXTI4_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI4_PD_Pos
√ã

	)

2727 
	#AFIO_EXTICR2_EXTI4_PD
 
AFIO_EXTICR2_EXTI4_PD_Msk


	)

2728 
	#AFIO_EXTICR2_EXTI4_PE_Pos
 (2U)

	)

2729 
	#AFIO_EXTICR2_EXTI4_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PE_Pos
√ã

	)

2730 
	#AFIO_EXTICR2_EXTI4_PE
 
AFIO_EXTICR2_EXTI4_PE_Msk


	)

2731 
	#AFIO_EXTICR2_EXTI4_PF_Pos
 (0U)

	)

2732 
	#AFIO_EXTICR2_EXTI4_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI4_PF_Pos
√ã

	)

2733 
	#AFIO_EXTICR2_EXTI4_PF
 
AFIO_EXTICR2_EXTI4_PF_Msk


	)

2734 
	#AFIO_EXTICR2_EXTI4_PG_Pos
 (1U)

	)

2735 
	#AFIO_EXTICR2_EXTI4_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI4_PG_Pos
√ã

	)

2736 
	#AFIO_EXTICR2_EXTI4_PG
 
AFIO_EXTICR2_EXTI4_PG_Msk


	)

2739 
	#AFIO_EXTICR2_EXTI5_PA
 0x00000000U

	)

2740 
	#AFIO_EXTICR2_EXTI5_PB_Pos
 (4U)

	)

2741 
	#AFIO_EXTICR2_EXTI5_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PB_Pos
√ã

	)

2742 
	#AFIO_EXTICR2_EXTI5_PB
 
AFIO_EXTICR2_EXTI5_PB_Msk


	)

2743 
	#AFIO_EXTICR2_EXTI5_PC_Pos
 (5U)

	)

2744 
	#AFIO_EXTICR2_EXTI5_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PC_Pos
√ã

	)

2745 
	#AFIO_EXTICR2_EXTI5_PC
 
AFIO_EXTICR2_EXTI5_PC_Msk


	)

2746 
	#AFIO_EXTICR2_EXTI5_PD_Pos
 (4U)

	)

2747 
	#AFIO_EXTICR2_EXTI5_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI5_PD_Pos
√ã

	)

2748 
	#AFIO_EXTICR2_EXTI5_PD
 
AFIO_EXTICR2_EXTI5_PD_Msk


	)

2749 
	#AFIO_EXTICR2_EXTI5_PE_Pos
 (6U)

	)

2750 
	#AFIO_EXTICR2_EXTI5_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PE_Pos
√ã

	)

2751 
	#AFIO_EXTICR2_EXTI5_PE
 
AFIO_EXTICR2_EXTI5_PE_Msk


	)

2752 
	#AFIO_EXTICR2_EXTI5_PF_Pos
 (4U)

	)

2753 
	#AFIO_EXTICR2_EXTI5_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI5_PF_Pos
√ã

	)

2754 
	#AFIO_EXTICR2_EXTI5_PF
 
AFIO_EXTICR2_EXTI5_PF_Msk


	)

2755 
	#AFIO_EXTICR2_EXTI5_PG_Pos
 (5U)

	)

2756 
	#AFIO_EXTICR2_EXTI5_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI5_PG_Pos
√ã

	)

2757 
	#AFIO_EXTICR2_EXTI5_PG
 
AFIO_EXTICR2_EXTI5_PG_Msk


	)

2760 
	#AFIO_EXTICR2_EXTI6_PA
 0x00000000U

	)

2761 
	#AFIO_EXTICR2_EXTI6_PB_Pos
 (8U)

	)

2762 
	#AFIO_EXTICR2_EXTI6_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PB_Pos
√ã

	)

2763 
	#AFIO_EXTICR2_EXTI6_PB
 
AFIO_EXTICR2_EXTI6_PB_Msk


	)

2764 
	#AFIO_EXTICR2_EXTI6_PC_Pos
 (9U)

	)

2765 
	#AFIO_EXTICR2_EXTI6_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PC_Pos
√ã

	)

2766 
	#AFIO_EXTICR2_EXTI6_PC
 
AFIO_EXTICR2_EXTI6_PC_Msk


	)

2767 
	#AFIO_EXTICR2_EXTI6_PD_Pos
 (8U)

	)

2768 
	#AFIO_EXTICR2_EXTI6_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI6_PD_Pos
√ã

	)

2769 
	#AFIO_EXTICR2_EXTI6_PD
 
AFIO_EXTICR2_EXTI6_PD_Msk


	)

2770 
	#AFIO_EXTICR2_EXTI6_PE_Pos
 (10U)

	)

2771 
	#AFIO_EXTICR2_EXTI6_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PE_Pos
√ã

	)

2772 
	#AFIO_EXTICR2_EXTI6_PE
 
AFIO_EXTICR2_EXTI6_PE_Msk


	)

2773 
	#AFIO_EXTICR2_EXTI6_PF_Pos
 (8U)

	)

2774 
	#AFIO_EXTICR2_EXTI6_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI6_PF_Pos
√ã

	)

2775 
	#AFIO_EXTICR2_EXTI6_PF
 
AFIO_EXTICR2_EXTI6_PF_Msk


	)

2776 
	#AFIO_EXTICR2_EXTI6_PG_Pos
 (9U)

	)

2777 
	#AFIO_EXTICR2_EXTI6_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI6_PG_Pos
√ã

	)

2778 
	#AFIO_EXTICR2_EXTI6_PG
 
AFIO_EXTICR2_EXTI6_PG_Msk


	)

2781 
	#AFIO_EXTICR2_EXTI7_PA
 0x00000000U

	)

2782 
	#AFIO_EXTICR2_EXTI7_PB_Pos
 (12U)

	)

2783 
	#AFIO_EXTICR2_EXTI7_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PB_Pos
√ã

	)

2784 
	#AFIO_EXTICR2_EXTI7_PB
 
AFIO_EXTICR2_EXTI7_PB_Msk


	)

2785 
	#AFIO_EXTICR2_EXTI7_PC_Pos
 (13U)

	)

2786 
	#AFIO_EXTICR2_EXTI7_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PC_Pos
√ã

	)

2787 
	#AFIO_EXTICR2_EXTI7_PC
 
AFIO_EXTICR2_EXTI7_PC_Msk


	)

2788 
	#AFIO_EXTICR2_EXTI7_PD_Pos
 (12U)

	)

2789 
	#AFIO_EXTICR2_EXTI7_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI7_PD_Pos
√ã

	)

2790 
	#AFIO_EXTICR2_EXTI7_PD
 
AFIO_EXTICR2_EXTI7_PD_Msk


	)

2791 
	#AFIO_EXTICR2_EXTI7_PE_Pos
 (14U)

	)

2792 
	#AFIO_EXTICR2_EXTI7_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PE_Pos
√ã

	)

2793 
	#AFIO_EXTICR2_EXTI7_PE
 
AFIO_EXTICR2_EXTI7_PE_Msk


	)

2794 
	#AFIO_EXTICR2_EXTI7_PF_Pos
 (12U)

	)

2795 
	#AFIO_EXTICR2_EXTI7_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI7_PF_Pos
√ã

	)

2796 
	#AFIO_EXTICR2_EXTI7_PF
 
AFIO_EXTICR2_EXTI7_PF_Msk


	)

2797 
	#AFIO_EXTICR2_EXTI7_PG_Pos
 (13U)

	)

2798 
	#AFIO_EXTICR2_EXTI7_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI7_PG_Pos
√ã

	)

2799 
	#AFIO_EXTICR2_EXTI7_PG
 
AFIO_EXTICR2_EXTI7_PG_Msk


	)

2802 
	#AFIO_EXTICR3_EXTI8_Pos
 (0U)

	)

2803 
	#AFIO_EXTICR3_EXTI8_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI8_Pos
√ã

	)

2804 
	#AFIO_EXTICR3_EXTI8
 
AFIO_EXTICR3_EXTI8_Msk


	)

2805 
	#AFIO_EXTICR3_EXTI9_Pos
 (4U)

	)

2806 
	#AFIO_EXTICR3_EXTI9_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI9_Pos
√ã

	)

2807 
	#AFIO_EXTICR3_EXTI9
 
AFIO_EXTICR3_EXTI9_Msk


	)

2808 
	#AFIO_EXTICR3_EXTI10_Pos
 (8U)

	)

2809 
	#AFIO_EXTICR3_EXTI10_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI10_Pos
√ã

	)

2810 
	#AFIO_EXTICR3_EXTI10
 
AFIO_EXTICR3_EXTI10_Msk


	)

2811 
	#AFIO_EXTICR3_EXTI11_Pos
 (12U)

	)

2812 
	#AFIO_EXTICR3_EXTI11_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI11_Pos
√ã

	)

2813 
	#AFIO_EXTICR3_EXTI11
 
AFIO_EXTICR3_EXTI11_Msk


	)

2816 
	#AFIO_EXTICR3_EXTI8_PA
 0x00000000U

	)

2817 
	#AFIO_EXTICR3_EXTI8_PB_Pos
 (0U)

	)

2818 
	#AFIO_EXTICR3_EXTI8_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PB_Pos
√ã

	)

2819 
	#AFIO_EXTICR3_EXTI8_PB
 
AFIO_EXTICR3_EXTI8_PB_Msk


	)

2820 
	#AFIO_EXTICR3_EXTI8_PC_Pos
 (1U)

	)

2821 
	#AFIO_EXTICR3_EXTI8_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PC_Pos
√ã

	)

2822 
	#AFIO_EXTICR3_EXTI8_PC
 
AFIO_EXTICR3_EXTI8_PC_Msk


	)

2823 
	#AFIO_EXTICR3_EXTI8_PD_Pos
 (0U)

	)

2824 
	#AFIO_EXTICR3_EXTI8_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI8_PD_Pos
√ã

	)

2825 
	#AFIO_EXTICR3_EXTI8_PD
 
AFIO_EXTICR3_EXTI8_PD_Msk


	)

2826 
	#AFIO_EXTICR3_EXTI8_PE_Pos
 (2U)

	)

2827 
	#AFIO_EXTICR3_EXTI8_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PE_Pos
√ã

	)

2828 
	#AFIO_EXTICR3_EXTI8_PE
 
AFIO_EXTICR3_EXTI8_PE_Msk


	)

2829 
	#AFIO_EXTICR3_EXTI8_PF_Pos
 (0U)

	)

2830 
	#AFIO_EXTICR3_EXTI8_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI8_PF_Pos
√ã

	)

2831 
	#AFIO_EXTICR3_EXTI8_PF
 
AFIO_EXTICR3_EXTI8_PF_Msk


	)

2832 
	#AFIO_EXTICR3_EXTI8_PG_Pos
 (1U)

	)

2833 
	#AFIO_EXTICR3_EXTI8_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI8_PG_Pos
√ã

	)

2834 
	#AFIO_EXTICR3_EXTI8_PG
 
AFIO_EXTICR3_EXTI8_PG_Msk


	)

2837 
	#AFIO_EXTICR3_EXTI9_PA
 0x00000000U

	)

2838 
	#AFIO_EXTICR3_EXTI9_PB_Pos
 (4U)

	)

2839 
	#AFIO_EXTICR3_EXTI9_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PB_Pos
√ã

	)

2840 
	#AFIO_EXTICR3_EXTI9_PB
 
AFIO_EXTICR3_EXTI9_PB_Msk


	)

2841 
	#AFIO_EXTICR3_EXTI9_PC_Pos
 (5U)

	)

2842 
	#AFIO_EXTICR3_EXTI9_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PC_Pos
√ã

	)

2843 
	#AFIO_EXTICR3_EXTI9_PC
 
AFIO_EXTICR3_EXTI9_PC_Msk


	)

2844 
	#AFIO_EXTICR3_EXTI9_PD_Pos
 (4U)

	)

2845 
	#AFIO_EXTICR3_EXTI9_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI9_PD_Pos
√ã

	)

2846 
	#AFIO_EXTICR3_EXTI9_PD
 
AFIO_EXTICR3_EXTI9_PD_Msk


	)

2847 
	#AFIO_EXTICR3_EXTI9_PE_Pos
 (6U)

	)

2848 
	#AFIO_EXTICR3_EXTI9_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PE_Pos
√ã

	)

2849 
	#AFIO_EXTICR3_EXTI9_PE
 
AFIO_EXTICR3_EXTI9_PE_Msk


	)

2850 
	#AFIO_EXTICR3_EXTI9_PF_Pos
 (4U)

	)

2851 
	#AFIO_EXTICR3_EXTI9_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI9_PF_Pos
√ã

	)

2852 
	#AFIO_EXTICR3_EXTI9_PF
 
AFIO_EXTICR3_EXTI9_PF_Msk


	)

2853 
	#AFIO_EXTICR3_EXTI9_PG_Pos
 (5U)

	)

2854 
	#AFIO_EXTICR3_EXTI9_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI9_PG_Pos
√ã

	)

2855 
	#AFIO_EXTICR3_EXTI9_PG
 
AFIO_EXTICR3_EXTI9_PG_Msk


	)

2858 
	#AFIO_EXTICR3_EXTI10_PA
 0x00000000U

	)

2859 
	#AFIO_EXTICR3_EXTI10_PB_Pos
 (8U)

	)

2860 
	#AFIO_EXTICR3_EXTI10_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PB_Pos
√ã

	)

2861 
	#AFIO_EXTICR3_EXTI10_PB
 
AFIO_EXTICR3_EXTI10_PB_Msk


	)

2862 
	#AFIO_EXTICR3_EXTI10_PC_Pos
 (9U)

	)

2863 
	#AFIO_EXTICR3_EXTI10_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PC_Pos
√ã

	)

2864 
	#AFIO_EXTICR3_EXTI10_PC
 
AFIO_EXTICR3_EXTI10_PC_Msk


	)

2865 
	#AFIO_EXTICR3_EXTI10_PD_Pos
 (8U)

	)

2866 
	#AFIO_EXTICR3_EXTI10_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI10_PD_Pos
√ã

	)

2867 
	#AFIO_EXTICR3_EXTI10_PD
 
AFIO_EXTICR3_EXTI10_PD_Msk


	)

2868 
	#AFIO_EXTICR3_EXTI10_PE_Pos
 (10U)

	)

2869 
	#AFIO_EXTICR3_EXTI10_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PE_Pos
√ã

	)

2870 
	#AFIO_EXTICR3_EXTI10_PE
 
AFIO_EXTICR3_EXTI10_PE_Msk


	)

2871 
	#AFIO_EXTICR3_EXTI10_PF_Pos
 (8U)

	)

2872 
	#AFIO_EXTICR3_EXTI10_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI10_PF_Pos
√ã

	)

2873 
	#AFIO_EXTICR3_EXTI10_PF
 
AFIO_EXTICR3_EXTI10_PF_Msk


	)

2874 
	#AFIO_EXTICR3_EXTI10_PG_Pos
 (9U)

	)

2875 
	#AFIO_EXTICR3_EXTI10_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI10_PG_Pos
√ã

	)

2876 
	#AFIO_EXTICR3_EXTI10_PG
 
AFIO_EXTICR3_EXTI10_PG_Msk


	)

2879 
	#AFIO_EXTICR3_EXTI11_PA
 0x00000000U

	)

2880 
	#AFIO_EXTICR3_EXTI11_PB_Pos
 (12U)

	)

2881 
	#AFIO_EXTICR3_EXTI11_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PB_Pos
√ã

	)

2882 
	#AFIO_EXTICR3_EXTI11_PB
 
AFIO_EXTICR3_EXTI11_PB_Msk


	)

2883 
	#AFIO_EXTICR3_EXTI11_PC_Pos
 (13U)

	)

2884 
	#AFIO_EXTICR3_EXTI11_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PC_Pos
√ã

	)

2885 
	#AFIO_EXTICR3_EXTI11_PC
 
AFIO_EXTICR3_EXTI11_PC_Msk


	)

2886 
	#AFIO_EXTICR3_EXTI11_PD_Pos
 (12U)

	)

2887 
	#AFIO_EXTICR3_EXTI11_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI11_PD_Pos
√ã

	)

2888 
	#AFIO_EXTICR3_EXTI11_PD
 
AFIO_EXTICR3_EXTI11_PD_Msk


	)

2889 
	#AFIO_EXTICR3_EXTI11_PE_Pos
 (14U)

	)

2890 
	#AFIO_EXTICR3_EXTI11_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PE_Pos
√ã

	)

2891 
	#AFIO_EXTICR3_EXTI11_PE
 
AFIO_EXTICR3_EXTI11_PE_Msk


	)

2892 
	#AFIO_EXTICR3_EXTI11_PF_Pos
 (12U)

	)

2893 
	#AFIO_EXTICR3_EXTI11_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI11_PF_Pos
√ã

	)

2894 
	#AFIO_EXTICR3_EXTI11_PF
 
AFIO_EXTICR3_EXTI11_PF_Msk


	)

2895 
	#AFIO_EXTICR3_EXTI11_PG_Pos
 (13U)

	)

2896 
	#AFIO_EXTICR3_EXTI11_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI11_PG_Pos
√ã

	)

2897 
	#AFIO_EXTICR3_EXTI11_PG
 
AFIO_EXTICR3_EXTI11_PG_Msk


	)

2900 
	#AFIO_EXTICR4_EXTI12_Pos
 (0U)

	)

2901 
	#AFIO_EXTICR4_EXTI12_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI12_Pos
√ã

	)

2902 
	#AFIO_EXTICR4_EXTI12
 
AFIO_EXTICR4_EXTI12_Msk


	)

2903 
	#AFIO_EXTICR4_EXTI13_Pos
 (4U)

	)

2904 
	#AFIO_EXTICR4_EXTI13_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI13_Pos
√ã

	)

2905 
	#AFIO_EXTICR4_EXTI13
 
AFIO_EXTICR4_EXTI13_Msk


	)

2906 
	#AFIO_EXTICR4_EXTI14_Pos
 (8U)

	)

2907 
	#AFIO_EXTICR4_EXTI14_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI14_Pos
√ã

	)

2908 
	#AFIO_EXTICR4_EXTI14
 
AFIO_EXTICR4_EXTI14_Msk


	)

2909 
	#AFIO_EXTICR4_EXTI15_Pos
 (12U)

	)

2910 
	#AFIO_EXTICR4_EXTI15_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI15_Pos
√ã

	)

2911 
	#AFIO_EXTICR4_EXTI15
 
AFIO_EXTICR4_EXTI15_Msk


	)

2914 
	#AFIO_EXTICR4_EXTI12_PA
 0x00000000U

	)

2915 
	#AFIO_EXTICR4_EXTI12_PB_Pos
 (0U)

	)

2916 
	#AFIO_EXTICR4_EXTI12_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PB_Pos
√ã

	)

2917 
	#AFIO_EXTICR4_EXTI12_PB
 
AFIO_EXTICR4_EXTI12_PB_Msk


	)

2918 
	#AFIO_EXTICR4_EXTI12_PC_Pos
 (1U)

	)

2919 
	#AFIO_EXTICR4_EXTI12_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PC_Pos
√ã

	)

2920 
	#AFIO_EXTICR4_EXTI12_PC
 
AFIO_EXTICR4_EXTI12_PC_Msk


	)

2921 
	#AFIO_EXTICR4_EXTI12_PD_Pos
 (0U)

	)

2922 
	#AFIO_EXTICR4_EXTI12_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI12_PD_Pos
√ã

	)

2923 
	#AFIO_EXTICR4_EXTI12_PD
 
AFIO_EXTICR4_EXTI12_PD_Msk


	)

2924 
	#AFIO_EXTICR4_EXTI12_PE_Pos
 (2U)

	)

2925 
	#AFIO_EXTICR4_EXTI12_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PE_Pos
√ã

	)

2926 
	#AFIO_EXTICR4_EXTI12_PE
 
AFIO_EXTICR4_EXTI12_PE_Msk


	)

2927 
	#AFIO_EXTICR4_EXTI12_PF_Pos
 (0U)

	)

2928 
	#AFIO_EXTICR4_EXTI12_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI12_PF_Pos
√ã

	)

2929 
	#AFIO_EXTICR4_EXTI12_PF
 
AFIO_EXTICR4_EXTI12_PF_Msk


	)

2930 
	#AFIO_EXTICR4_EXTI12_PG_Pos
 (1U)

	)

2931 
	#AFIO_EXTICR4_EXTI12_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI12_PG_Pos
√ã

	)

2932 
	#AFIO_EXTICR4_EXTI12_PG
 
AFIO_EXTICR4_EXTI12_PG_Msk


	)

2935 
	#AFIO_EXTICR4_EXTI13_PA
 0x00000000U

	)

2936 
	#AFIO_EXTICR4_EXTI13_PB_Pos
 (4U)

	)

2937 
	#AFIO_EXTICR4_EXTI13_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PB_Pos
√ã

	)

2938 
	#AFIO_EXTICR4_EXTI13_PB
 
AFIO_EXTICR4_EXTI13_PB_Msk


	)

2939 
	#AFIO_EXTICR4_EXTI13_PC_Pos
 (5U)

	)

2940 
	#AFIO_EXTICR4_EXTI13_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PC_Pos
√ã

	)

2941 
	#AFIO_EXTICR4_EXTI13_PC
 
AFIO_EXTICR4_EXTI13_PC_Msk


	)

2942 
	#AFIO_EXTICR4_EXTI13_PD_Pos
 (4U)

	)

2943 
	#AFIO_EXTICR4_EXTI13_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI13_PD_Pos
√ã

	)

2944 
	#AFIO_EXTICR4_EXTI13_PD
 
AFIO_EXTICR4_EXTI13_PD_Msk


	)

2945 
	#AFIO_EXTICR4_EXTI13_PE_Pos
 (6U)

	)

2946 
	#AFIO_EXTICR4_EXTI13_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PE_Pos
√ã

	)

2947 
	#AFIO_EXTICR4_EXTI13_PE
 
AFIO_EXTICR4_EXTI13_PE_Msk


	)

2948 
	#AFIO_EXTICR4_EXTI13_PF_Pos
 (4U)

	)

2949 
	#AFIO_EXTICR4_EXTI13_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI13_PF_Pos
√ã

	)

2950 
	#AFIO_EXTICR4_EXTI13_PF
 
AFIO_EXTICR4_EXTI13_PF_Msk


	)

2951 
	#AFIO_EXTICR4_EXTI13_PG_Pos
 (5U)

	)

2952 
	#AFIO_EXTICR4_EXTI13_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI13_PG_Pos
√ã

	)

2953 
	#AFIO_EXTICR4_EXTI13_PG
 
AFIO_EXTICR4_EXTI13_PG_Msk


	)

2956 
	#AFIO_EXTICR4_EXTI14_PA
 0x00000000U

	)

2957 
	#AFIO_EXTICR4_EXTI14_PB_Pos
 (8U)

	)

2958 
	#AFIO_EXTICR4_EXTI14_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PB_Pos
√ã

	)

2959 
	#AFIO_EXTICR4_EXTI14_PB
 
AFIO_EXTICR4_EXTI14_PB_Msk


	)

2960 
	#AFIO_EXTICR4_EXTI14_PC_Pos
 (9U)

	)

2961 
	#AFIO_EXTICR4_EXTI14_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PC_Pos
√ã

	)

2962 
	#AFIO_EXTICR4_EXTI14_PC
 
AFIO_EXTICR4_EXTI14_PC_Msk


	)

2963 
	#AFIO_EXTICR4_EXTI14_PD_Pos
 (8U)

	)

2964 
	#AFIO_EXTICR4_EXTI14_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI14_PD_Pos
√ã

	)

2965 
	#AFIO_EXTICR4_EXTI14_PD
 
AFIO_EXTICR4_EXTI14_PD_Msk


	)

2966 
	#AFIO_EXTICR4_EXTI14_PE_Pos
 (10U)

	)

2967 
	#AFIO_EXTICR4_EXTI14_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PE_Pos
√ã

	)

2968 
	#AFIO_EXTICR4_EXTI14_PE
 
AFIO_EXTICR4_EXTI14_PE_Msk


	)

2969 
	#AFIO_EXTICR4_EXTI14_PF_Pos
 (8U)

	)

2970 
	#AFIO_EXTICR4_EXTI14_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI14_PF_Pos
√ã

	)

2971 
	#AFIO_EXTICR4_EXTI14_PF
 
AFIO_EXTICR4_EXTI14_PF_Msk


	)

2972 
	#AFIO_EXTICR4_EXTI14_PG_Pos
 (9U)

	)

2973 
	#AFIO_EXTICR4_EXTI14_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI14_PG_Pos
√ã

	)

2974 
	#AFIO_EXTICR4_EXTI14_PG
 
AFIO_EXTICR4_EXTI14_PG_Msk


	)

2977 
	#AFIO_EXTICR4_EXTI15_PA
 0x00000000U

	)

2978 
	#AFIO_EXTICR4_EXTI15_PB_Pos
 (12U)

	)

2979 
	#AFIO_EXTICR4_EXTI15_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PB_Pos
√ã

	)

2980 
	#AFIO_EXTICR4_EXTI15_PB
 
AFIO_EXTICR4_EXTI15_PB_Msk


	)

2981 
	#AFIO_EXTICR4_EXTI15_PC_Pos
 (13U)

	)

2982 
	#AFIO_EXTICR4_EXTI15_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PC_Pos
√ã

	)

2983 
	#AFIO_EXTICR4_EXTI15_PC
 
AFIO_EXTICR4_EXTI15_PC_Msk


	)

2984 
	#AFIO_EXTICR4_EXTI15_PD_Pos
 (12U)

	)

2985 
	#AFIO_EXTICR4_EXTI15_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI15_PD_Pos
√ã

	)

2986 
	#AFIO_EXTICR4_EXTI15_PD
 
AFIO_EXTICR4_EXTI15_PD_Msk


	)

2987 
	#AFIO_EXTICR4_EXTI15_PE_Pos
 (14U)

	)

2988 
	#AFIO_EXTICR4_EXTI15_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PE_Pos
√ã

	)

2989 
	#AFIO_EXTICR4_EXTI15_PE
 
AFIO_EXTICR4_EXTI15_PE_Msk


	)

2990 
	#AFIO_EXTICR4_EXTI15_PF_Pos
 (12U)

	)

2991 
	#AFIO_EXTICR4_EXTI15_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI15_PF_Pos
√ã

	)

2992 
	#AFIO_EXTICR4_EXTI15_PF
 
AFIO_EXTICR4_EXTI15_PF_Msk


	)

2993 
	#AFIO_EXTICR4_EXTI15_PG_Pos
 (13U)

	)

2994 
	#AFIO_EXTICR4_EXTI15_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI15_PG_Pos
√ã

	)

2995 
	#AFIO_EXTICR4_EXTI15_PG
 
AFIO_EXTICR4_EXTI15_PG_Msk


	)

3000 
	#AFIO_MAPR2_FSMC_NADV_REMAP_Pos
 (10U)

	)

3001 
	#AFIO_MAPR2_FSMC_NADV_REMAP_Msk
 (0x1UL << 
AFIO_MAPR2_FSMC_NADV_REMAP_Pos
√ã

	)

3002 
	#AFIO_MAPR2_FSMC_NADV_REMAP
 
AFIO_MAPR2_FSMC_NADV_REMAP_Msk


	)

3011 
	#EXTI_IMR_MR0_Pos
 (0U)

	)

3012 
	#EXTI_IMR_MR0_Msk
 (0x1UL << 
EXTI_IMR_MR0_Pos
√ã

	)

3013 
	#EXTI_IMR_MR0
 
EXTI_IMR_MR0_Msk


	)

3014 
	#EXTI_IMR_MR1_Pos
 (1U)

	)

3015 
	#EXTI_IMR_MR1_Msk
 (0x1UL << 
EXTI_IMR_MR1_Pos
√ã

	)

3016 
	#EXTI_IMR_MR1
 
EXTI_IMR_MR1_Msk


	)

3017 
	#EXTI_IMR_MR2_Pos
 (2U)

	)

3018 
	#EXTI_IMR_MR2_Msk
 (0x1UL << 
EXTI_IMR_MR2_Pos
√ã

	)

3019 
	#EXTI_IMR_MR2
 
EXTI_IMR_MR2_Msk


	)

3020 
	#EXTI_IMR_MR3_Pos
 (3U)

	)

3021 
	#EXTI_IMR_MR3_Msk
 (0x1UL << 
EXTI_IMR_MR3_Pos
√ã

	)

3022 
	#EXTI_IMR_MR3
 
EXTI_IMR_MR3_Msk


	)

3023 
	#EXTI_IMR_MR4_Pos
 (4U)

	)

3024 
	#EXTI_IMR_MR4_Msk
 (0x1UL << 
EXTI_IMR_MR4_Pos
√ã

	)

3025 
	#EXTI_IMR_MR4
 
EXTI_IMR_MR4_Msk


	)

3026 
	#EXTI_IMR_MR5_Pos
 (5U)

	)

3027 
	#EXTI_IMR_MR5_Msk
 (0x1UL << 
EXTI_IMR_MR5_Pos
√ã

	)

3028 
	#EXTI_IMR_MR5
 
EXTI_IMR_MR5_Msk


	)

3029 
	#EXTI_IMR_MR6_Pos
 (6U)

	)

3030 
	#EXTI_IMR_MR6_Msk
 (0x1UL << 
EXTI_IMR_MR6_Pos
√ã

	)

3031 
	#EXTI_IMR_MR6
 
EXTI_IMR_MR6_Msk


	)

3032 
	#EXTI_IMR_MR7_Pos
 (7U)

	)

3033 
	#EXTI_IMR_MR7_Msk
 (0x1UL << 
EXTI_IMR_MR7_Pos
√ã

	)

3034 
	#EXTI_IMR_MR7
 
EXTI_IMR_MR7_Msk


	)

3035 
	#EXTI_IMR_MR8_Pos
 (8U)

	)

3036 
	#EXTI_IMR_MR8_Msk
 (0x1UL << 
EXTI_IMR_MR8_Pos
√ã

	)

3037 
	#EXTI_IMR_MR8
 
EXTI_IMR_MR8_Msk


	)

3038 
	#EXTI_IMR_MR9_Pos
 (9U)

	)

3039 
	#EXTI_IMR_MR9_Msk
 (0x1UL << 
EXTI_IMR_MR9_Pos
√ã

	)

3040 
	#EXTI_IMR_MR9
 
EXTI_IMR_MR9_Msk


	)

3041 
	#EXTI_IMR_MR10_Pos
 (10U)

	)

3042 
	#EXTI_IMR_MR10_Msk
 (0x1UL << 
EXTI_IMR_MR10_Pos
√ã

	)

3043 
	#EXTI_IMR_MR10
 
EXTI_IMR_MR10_Msk


	)

3044 
	#EXTI_IMR_MR11_Pos
 (11U)

	)

3045 
	#EXTI_IMR_MR11_Msk
 (0x1UL << 
EXTI_IMR_MR11_Pos
√ã

	)

3046 
	#EXTI_IMR_MR11
 
EXTI_IMR_MR11_Msk


	)

3047 
	#EXTI_IMR_MR12_Pos
 (12U)

	)

3048 
	#EXTI_IMR_MR12_Msk
 (0x1UL << 
EXTI_IMR_MR12_Pos
√ã

	)

3049 
	#EXTI_IMR_MR12
 
EXTI_IMR_MR12_Msk


	)

3050 
	#EXTI_IMR_MR13_Pos
 (13U)

	)

3051 
	#EXTI_IMR_MR13_Msk
 (0x1UL << 
EXTI_IMR_MR13_Pos
√ã

	)

3052 
	#EXTI_IMR_MR13
 
EXTI_IMR_MR13_Msk


	)

3053 
	#EXTI_IMR_MR14_Pos
 (14U)

	)

3054 
	#EXTI_IMR_MR14_Msk
 (0x1UL << 
EXTI_IMR_MR14_Pos
√ã

	)

3055 
	#EXTI_IMR_MR14
 
EXTI_IMR_MR14_Msk


	)

3056 
	#EXTI_IMR_MR15_Pos
 (15U)

	)

3057 
	#EXTI_IMR_MR15_Msk
 (0x1UL << 
EXTI_IMR_MR15_Pos
√ã

	)

3058 
	#EXTI_IMR_MR15
 
EXTI_IMR_MR15_Msk


	)

3059 
	#EXTI_IMR_MR16_Pos
 (16U)

	)

3060 
	#EXTI_IMR_MR16_Msk
 (0x1UL << 
EXTI_IMR_MR16_Pos
√ã

	)

3061 
	#EXTI_IMR_MR16
 
EXTI_IMR_MR16_Msk


	)

3062 
	#EXTI_IMR_MR17_Pos
 (17U)

	)

3063 
	#EXTI_IMR_MR17_Msk
 (0x1UL << 
EXTI_IMR_MR17_Pos
√ã

	)

3064 
	#EXTI_IMR_MR17
 
EXTI_IMR_MR17_Msk


	)

3065 
	#EXTI_IMR_MR18_Pos
 (18U)

	)

3066 
	#EXTI_IMR_MR18_Msk
 (0x1UL << 
EXTI_IMR_MR18_Pos
√ã

	)

3067 
	#EXTI_IMR_MR18
 
EXTI_IMR_MR18_Msk


	)

3070 
	#EXTI_IMR_IM0
 
EXTI_IMR_MR0


	)

3071 
	#EXTI_IMR_IM1
 
EXTI_IMR_MR1


	)

3072 
	#EXTI_IMR_IM2
 
EXTI_IMR_MR2


	)

3073 
	#EXTI_IMR_IM3
 
EXTI_IMR_MR3


	)

3074 
	#EXTI_IMR_IM4
 
EXTI_IMR_MR4


	)

3075 
	#EXTI_IMR_IM5
 
EXTI_IMR_MR5


	)

3076 
	#EXTI_IMR_IM6
 
EXTI_IMR_MR6


	)

3077 
	#EXTI_IMR_IM7
 
EXTI_IMR_MR7


	)

3078 
	#EXTI_IMR_IM8
 
EXTI_IMR_MR8


	)

3079 
	#EXTI_IMR_IM9
 
EXTI_IMR_MR9


	)

3080 
	#EXTI_IMR_IM10
 
EXTI_IMR_MR10


	)

3081 
	#EXTI_IMR_IM11
 
EXTI_IMR_MR11


	)

3082 
	#EXTI_IMR_IM12
 
EXTI_IMR_MR12


	)

3083 
	#EXTI_IMR_IM13
 
EXTI_IMR_MR13


	)

3084 
	#EXTI_IMR_IM14
 
EXTI_IMR_MR14


	)

3085 
	#EXTI_IMR_IM15
 
EXTI_IMR_MR15


	)

3086 
	#EXTI_IMR_IM16
 
EXTI_IMR_MR16


	)

3087 
	#EXTI_IMR_IM17
 
EXTI_IMR_MR17


	)

3088 
	#EXTI_IMR_IM18
 
EXTI_IMR_MR18


	)

3089 
	#EXTI_IMR_IM
 0x0007FFFFU

	)

3092 
	#EXTI_EMR_MR0_Pos
 (0U)

	)

3093 
	#EXTI_EMR_MR0_Msk
 (0x1UL << 
EXTI_EMR_MR0_Pos
√ã

	)

3094 
	#EXTI_EMR_MR0
 
EXTI_EMR_MR0_Msk


	)

3095 
	#EXTI_EMR_MR1_Pos
 (1U)

	)

3096 
	#EXTI_EMR_MR1_Msk
 (0x1UL << 
EXTI_EMR_MR1_Pos
√ã

	)

3097 
	#EXTI_EMR_MR1
 
EXTI_EMR_MR1_Msk


	)

3098 
	#EXTI_EMR_MR2_Pos
 (2U)

	)

3099 
	#EXTI_EMR_MR2_Msk
 (0x1UL << 
EXTI_EMR_MR2_Pos
√ã

	)

3100 
	#EXTI_EMR_MR2
 
EXTI_EMR_MR2_Msk


	)

3101 
	#EXTI_EMR_MR3_Pos
 (3U)

	)

3102 
	#EXTI_EMR_MR3_Msk
 (0x1UL << 
EXTI_EMR_MR3_Pos
√ã

	)

3103 
	#EXTI_EMR_MR3
 
EXTI_EMR_MR3_Msk


	)

3104 
	#EXTI_EMR_MR4_Pos
 (4U)

	)

3105 
	#EXTI_EMR_MR4_Msk
 (0x1UL << 
EXTI_EMR_MR4_Pos
√ã

	)

3106 
	#EXTI_EMR_MR4
 
EXTI_EMR_MR4_Msk


	)

3107 
	#EXTI_EMR_MR5_Pos
 (5U)

	)

3108 
	#EXTI_EMR_MR5_Msk
 (0x1UL << 
EXTI_EMR_MR5_Pos
√ã

	)

3109 
	#EXTI_EMR_MR5
 
EXTI_EMR_MR5_Msk


	)

3110 
	#EXTI_EMR_MR6_Pos
 (6U)

	)

3111 
	#EXTI_EMR_MR6_Msk
 (0x1UL << 
EXTI_EMR_MR6_Pos
√ã

	)

3112 
	#EXTI_EMR_MR6
 
EXTI_EMR_MR6_Msk


	)

3113 
	#EXTI_EMR_MR7_Pos
 (7U)

	)

3114 
	#EXTI_EMR_MR7_Msk
 (0x1UL << 
EXTI_EMR_MR7_Pos
√ã

	)

3115 
	#EXTI_EMR_MR7
 
EXTI_EMR_MR7_Msk


	)

3116 
	#EXTI_EMR_MR8_Pos
 (8U)

	)

3117 
	#EXTI_EMR_MR8_Msk
 (0x1UL << 
EXTI_EMR_MR8_Pos
√ã

	)

3118 
	#EXTI_EMR_MR8
 
EXTI_EMR_MR8_Msk


	)

3119 
	#EXTI_EMR_MR9_Pos
 (9U)

	)

3120 
	#EXTI_EMR_MR9_Msk
 (0x1UL << 
EXTI_EMR_MR9_Pos
√ã

	)

3121 
	#EXTI_EMR_MR9
 
EXTI_EMR_MR9_Msk


	)

3122 
	#EXTI_EMR_MR10_Pos
 (10U)

	)

3123 
	#EXTI_EMR_MR10_Msk
 (0x1UL << 
EXTI_EMR_MR10_Pos
√ã

	)

3124 
	#EXTI_EMR_MR10
 
EXTI_EMR_MR10_Msk


	)

3125 
	#EXTI_EMR_MR11_Pos
 (11U)

	)

3126 
	#EXTI_EMR_MR11_Msk
 (0x1UL << 
EXTI_EMR_MR11_Pos
√ã

	)

3127 
	#EXTI_EMR_MR11
 
EXTI_EMR_MR11_Msk


	)

3128 
	#EXTI_EMR_MR12_Pos
 (12U)

	)

3129 
	#EXTI_EMR_MR12_Msk
 (0x1UL << 
EXTI_EMR_MR12_Pos
√ã

	)

3130 
	#EXTI_EMR_MR12
 
EXTI_EMR_MR12_Msk


	)

3131 
	#EXTI_EMR_MR13_Pos
 (13U)

	)

3132 
	#EXTI_EMR_MR13_Msk
 (0x1UL << 
EXTI_EMR_MR13_Pos
√ã

	)

3133 
	#EXTI_EMR_MR13
 
EXTI_EMR_MR13_Msk


	)

3134 
	#EXTI_EMR_MR14_Pos
 (14U)

	)

3135 
	#EXTI_EMR_MR14_Msk
 (0x1UL << 
EXTI_EMR_MR14_Pos
√ã

	)

3136 
	#EXTI_EMR_MR14
 
EXTI_EMR_MR14_Msk


	)

3137 
	#EXTI_EMR_MR15_Pos
 (15U)

	)

3138 
	#EXTI_EMR_MR15_Msk
 (0x1UL << 
EXTI_EMR_MR15_Pos
√ã

	)

3139 
	#EXTI_EMR_MR15
 
EXTI_EMR_MR15_Msk


	)

3140 
	#EXTI_EMR_MR16_Pos
 (16U)

	)

3141 
	#EXTI_EMR_MR16_Msk
 (0x1UL << 
EXTI_EMR_MR16_Pos
√ã

	)

3142 
	#EXTI_EMR_MR16
 
EXTI_EMR_MR16_Msk


	)

3143 
	#EXTI_EMR_MR17_Pos
 (17U)

	)

3144 
	#EXTI_EMR_MR17_Msk
 (0x1UL << 
EXTI_EMR_MR17_Pos
√ã

	)

3145 
	#EXTI_EMR_MR17
 
EXTI_EMR_MR17_Msk


	)

3146 
	#EXTI_EMR_MR18_Pos
 (18U)

	)

3147 
	#EXTI_EMR_MR18_Msk
 (0x1UL << 
EXTI_EMR_MR18_Pos
√ã

	)

3148 
	#EXTI_EMR_MR18
 
EXTI_EMR_MR18_Msk


	)

3151 
	#EXTI_EMR_EM0
 
EXTI_EMR_MR0


	)

3152 
	#EXTI_EMR_EM1
 
EXTI_EMR_MR1


	)

3153 
	#EXTI_EMR_EM2
 
EXTI_EMR_MR2


	)

3154 
	#EXTI_EMR_EM3
 
EXTI_EMR_MR3


	)

3155 
	#EXTI_EMR_EM4
 
EXTI_EMR_MR4


	)

3156 
	#EXTI_EMR_EM5
 
EXTI_EMR_MR5


	)

3157 
	#EXTI_EMR_EM6
 
EXTI_EMR_MR6


	)

3158 
	#EXTI_EMR_EM7
 
EXTI_EMR_MR7


	)

3159 
	#EXTI_EMR_EM8
 
EXTI_EMR_MR8


	)

3160 
	#EXTI_EMR_EM9
 
EXTI_EMR_MR9


	)

3161 
	#EXTI_EMR_EM10
 
EXTI_EMR_MR10


	)

3162 
	#EXTI_EMR_EM11
 
EXTI_EMR_MR11


	)

3163 
	#EXTI_EMR_EM12
 
EXTI_EMR_MR12


	)

3164 
	#EXTI_EMR_EM13
 
EXTI_EMR_MR13


	)

3165 
	#EXTI_EMR_EM14
 
EXTI_EMR_MR14


	)

3166 
	#EXTI_EMR_EM15
 
EXTI_EMR_MR15


	)

3167 
	#EXTI_EMR_EM16
 
EXTI_EMR_MR16


	)

3168 
	#EXTI_EMR_EM17
 
EXTI_EMR_MR17


	)

3169 
	#EXTI_EMR_EM18
 
EXTI_EMR_MR18


	)

3172 
	#EXTI_RTSR_TR0_Pos
 (0U)

	)

3173 
	#EXTI_RTSR_TR0_Msk
 (0x1UL << 
EXTI_RTSR_TR0_Pos
√ã

	)

3174 
	#EXTI_RTSR_TR0
 
EXTI_RTSR_TR0_Msk


	)

3175 
	#EXTI_RTSR_TR1_Pos
 (1U)

	)

3176 
	#EXTI_RTSR_TR1_Msk
 (0x1UL << 
EXTI_RTSR_TR1_Pos
√ã

	)

3177 
	#EXTI_RTSR_TR1
 
EXTI_RTSR_TR1_Msk


	)

3178 
	#EXTI_RTSR_TR2_Pos
 (2U)

	)

3179 
	#EXTI_RTSR_TR2_Msk
 (0x1UL << 
EXTI_RTSR_TR2_Pos
√ã

	)

3180 
	#EXTI_RTSR_TR2
 
EXTI_RTSR_TR2_Msk


	)

3181 
	#EXTI_RTSR_TR3_Pos
 (3U)

	)

3182 
	#EXTI_RTSR_TR3_Msk
 (0x1UL << 
EXTI_RTSR_TR3_Pos
√ã

	)

3183 
	#EXTI_RTSR_TR3
 
EXTI_RTSR_TR3_Msk


	)

3184 
	#EXTI_RTSR_TR4_Pos
 (4U)

	)

3185 
	#EXTI_RTSR_TR4_Msk
 (0x1UL << 
EXTI_RTSR_TR4_Pos
√ã

	)

3186 
	#EXTI_RTSR_TR4
 
EXTI_RTSR_TR4_Msk


	)

3187 
	#EXTI_RTSR_TR5_Pos
 (5U)

	)

3188 
	#EXTI_RTSR_TR5_Msk
 (0x1UL << 
EXTI_RTSR_TR5_Pos
√ã

	)

3189 
	#EXTI_RTSR_TR5
 
EXTI_RTSR_TR5_Msk


	)

3190 
	#EXTI_RTSR_TR6_Pos
 (6U)

	)

3191 
	#EXTI_RTSR_TR6_Msk
 (0x1UL << 
EXTI_RTSR_TR6_Pos
√ã

	)

3192 
	#EXTI_RTSR_TR6
 
EXTI_RTSR_TR6_Msk


	)

3193 
	#EXTI_RTSR_TR7_Pos
 (7U)

	)

3194 
	#EXTI_RTSR_TR7_Msk
 (0x1UL << 
EXTI_RTSR_TR7_Pos
√ã

	)

3195 
	#EXTI_RTSR_TR7
 
EXTI_RTSR_TR7_Msk


	)

3196 
	#EXTI_RTSR_TR8_Pos
 (8U)

	)

3197 
	#EXTI_RTSR_TR8_Msk
 (0x1UL << 
EXTI_RTSR_TR8_Pos
√ã

	)

3198 
	#EXTI_RTSR_TR8
 
EXTI_RTSR_TR8_Msk


	)

3199 
	#EXTI_RTSR_TR9_Pos
 (9U)

	)

3200 
	#EXTI_RTSR_TR9_Msk
 (0x1UL << 
EXTI_RTSR_TR9_Pos
√ã

	)

3201 
	#EXTI_RTSR_TR9
 
EXTI_RTSR_TR9_Msk


	)

3202 
	#EXTI_RTSR_TR10_Pos
 (10U)

	)

3203 
	#EXTI_RTSR_TR10_Msk
 (0x1UL << 
EXTI_RTSR_TR10_Pos
√ã

	)

3204 
	#EXTI_RTSR_TR10
 
EXTI_RTSR_TR10_Msk


	)

3205 
	#EXTI_RTSR_TR11_Pos
 (11U)

	)

3206 
	#EXTI_RTSR_TR11_Msk
 (0x1UL << 
EXTI_RTSR_TR11_Pos
√ã

	)

3207 
	#EXTI_RTSR_TR11
 
EXTI_RTSR_TR11_Msk


	)

3208 
	#EXTI_RTSR_TR12_Pos
 (12U)

	)

3209 
	#EXTI_RTSR_TR12_Msk
 (0x1UL << 
EXTI_RTSR_TR12_Pos
√ã

	)

3210 
	#EXTI_RTSR_TR12
 
EXTI_RTSR_TR12_Msk


	)

3211 
	#EXTI_RTSR_TR13_Pos
 (13U)

	)

3212 
	#EXTI_RTSR_TR13_Msk
 (0x1UL << 
EXTI_RTSR_TR13_Pos
√ã

	)

3213 
	#EXTI_RTSR_TR13
 
EXTI_RTSR_TR13_Msk


	)

3214 
	#EXTI_RTSR_TR14_Pos
 (14U)

	)

3215 
	#EXTI_RTSR_TR14_Msk
 (0x1UL << 
EXTI_RTSR_TR14_Pos
√ã

	)

3216 
	#EXTI_RTSR_TR14
 
EXTI_RTSR_TR14_Msk


	)

3217 
	#EXTI_RTSR_TR15_Pos
 (15U)

	)

3218 
	#EXTI_RTSR_TR15_Msk
 (0x1UL << 
EXTI_RTSR_TR15_Pos
√ã

	)

3219 
	#EXTI_RTSR_TR15
 
EXTI_RTSR_TR15_Msk


	)

3220 
	#EXTI_RTSR_TR16_Pos
 (16U)

	)

3221 
	#EXTI_RTSR_TR16_Msk
 (0x1UL << 
EXTI_RTSR_TR16_Pos
√ã

	)

3222 
	#EXTI_RTSR_TR16
 
EXTI_RTSR_TR16_Msk


	)

3223 
	#EXTI_RTSR_TR17_Pos
 (17U)

	)

3224 
	#EXTI_RTSR_TR17_Msk
 (0x1UL << 
EXTI_RTSR_TR17_Pos
√ã

	)

3225 
	#EXTI_RTSR_TR17
 
EXTI_RTSR_TR17_Msk


	)

3226 
	#EXTI_RTSR_TR18_Pos
 (18U)

	)

3227 
	#EXTI_RTSR_TR18_Msk
 (0x1UL << 
EXTI_RTSR_TR18_Pos
√ã

	)

3228 
	#EXTI_RTSR_TR18
 
EXTI_RTSR_TR18_Msk


	)

3231 
	#EXTI_RTSR_RT0
 
EXTI_RTSR_TR0


	)

3232 
	#EXTI_RTSR_RT1
 
EXTI_RTSR_TR1


	)

3233 
	#EXTI_RTSR_RT2
 
EXTI_RTSR_TR2


	)

3234 
	#EXTI_RTSR_RT3
 
EXTI_RTSR_TR3


	)

3235 
	#EXTI_RTSR_RT4
 
EXTI_RTSR_TR4


	)

3236 
	#EXTI_RTSR_RT5
 
EXTI_RTSR_TR5


	)

3237 
	#EXTI_RTSR_RT6
 
EXTI_RTSR_TR6


	)

3238 
	#EXTI_RTSR_RT7
 
EXTI_RTSR_TR7


	)

3239 
	#EXTI_RTSR_RT8
 
EXTI_RTSR_TR8


	)

3240 
	#EXTI_RTSR_RT9
 
EXTI_RTSR_TR9


	)

3241 
	#EXTI_RTSR_RT10
 
EXTI_RTSR_TR10


	)

3242 
	#EXTI_RTSR_RT11
 
EXTI_RTSR_TR11


	)

3243 
	#EXTI_RTSR_RT12
 
EXTI_RTSR_TR12


	)

3244 
	#EXTI_RTSR_RT13
 
EXTI_RTSR_TR13


	)

3245 
	#EXTI_RTSR_RT14
 
EXTI_RTSR_TR14


	)

3246 
	#EXTI_RTSR_RT15
 
EXTI_RTSR_TR15


	)

3247 
	#EXTI_RTSR_RT16
 
EXTI_RTSR_TR16


	)

3248 
	#EXTI_RTSR_RT17
 
EXTI_RTSR_TR17


	)

3249 
	#EXTI_RTSR_RT18
 
EXTI_RTSR_TR18


	)

3252 
	#EXTI_FTSR_TR0_Pos
 (0U)

	)

3253 
	#EXTI_FTSR_TR0_Msk
 (0x1UL << 
EXTI_FTSR_TR0_Pos
√ã

	)

3254 
	#EXTI_FTSR_TR0
 
EXTI_FTSR_TR0_Msk


	)

3255 
	#EXTI_FTSR_TR1_Pos
 (1U)

	)

3256 
	#EXTI_FTSR_TR1_Msk
 (0x1UL << 
EXTI_FTSR_TR1_Pos
√ã

	)

3257 
	#EXTI_FTSR_TR1
 
EXTI_FTSR_TR1_Msk


	)

3258 
	#EXTI_FTSR_TR2_Pos
 (2U)

	)

3259 
	#EXTI_FTSR_TR2_Msk
 (0x1UL << 
EXTI_FTSR_TR2_Pos
√ã

	)

3260 
	#EXTI_FTSR_TR2
 
EXTI_FTSR_TR2_Msk


	)

3261 
	#EXTI_FTSR_TR3_Pos
 (3U)

	)

3262 
	#EXTI_FTSR_TR3_Msk
 (0x1UL << 
EXTI_FTSR_TR3_Pos
√ã

	)

3263 
	#EXTI_FTSR_TR3
 
EXTI_FTSR_TR3_Msk


	)

3264 
	#EXTI_FTSR_TR4_Pos
 (4U)

	)

3265 
	#EXTI_FTSR_TR4_Msk
 (0x1UL << 
EXTI_FTSR_TR4_Pos
√ã

	)

3266 
	#EXTI_FTSR_TR4
 
EXTI_FTSR_TR4_Msk


	)

3267 
	#EXTI_FTSR_TR5_Pos
 (5U)

	)

3268 
	#EXTI_FTSR_TR5_Msk
 (0x1UL << 
EXTI_FTSR_TR5_Pos
√ã

	)

3269 
	#EXTI_FTSR_TR5
 
EXTI_FTSR_TR5_Msk


	)

3270 
	#EXTI_FTSR_TR6_Pos
 (6U)

	)

3271 
	#EXTI_FTSR_TR6_Msk
 (0x1UL << 
EXTI_FTSR_TR6_Pos
√ã

	)

3272 
	#EXTI_FTSR_TR6
 
EXTI_FTSR_TR6_Msk


	)

3273 
	#EXTI_FTSR_TR7_Pos
 (7U)

	)

3274 
	#EXTI_FTSR_TR7_Msk
 (0x1UL << 
EXTI_FTSR_TR7_Pos
√ã

	)

3275 
	#EXTI_FTSR_TR7
 
EXTI_FTSR_TR7_Msk


	)

3276 
	#EXTI_FTSR_TR8_Pos
 (8U)

	)

3277 
	#EXTI_FTSR_TR8_Msk
 (0x1UL << 
EXTI_FTSR_TR8_Pos
√ã

	)

3278 
	#EXTI_FTSR_TR8
 
EXTI_FTSR_TR8_Msk


	)

3279 
	#EXTI_FTSR_TR9_Pos
 (9U)

	)

3280 
	#EXTI_FTSR_TR9_Msk
 (0x1UL << 
EXTI_FTSR_TR9_Pos
√ã

	)

3281 
	#EXTI_FTSR_TR9
 
EXTI_FTSR_TR9_Msk


	)

3282 
	#EXTI_FTSR_TR10_Pos
 (10U)

	)

3283 
	#EXTI_FTSR_TR10_Msk
 (0x1UL << 
EXTI_FTSR_TR10_Pos
√ã

	)

3284 
	#EXTI_FTSR_TR10
 
EXTI_FTSR_TR10_Msk


	)

3285 
	#EXTI_FTSR_TR11_Pos
 (11U)

	)

3286 
	#EXTI_FTSR_TR11_Msk
 (0x1UL << 
EXTI_FTSR_TR11_Pos
√ã

	)

3287 
	#EXTI_FTSR_TR11
 
EXTI_FTSR_TR11_Msk


	)

3288 
	#EXTI_FTSR_TR12_Pos
 (12U)

	)

3289 
	#EXTI_FTSR_TR12_Msk
 (0x1UL << 
EXTI_FTSR_TR12_Pos
√ã

	)

3290 
	#EXTI_FTSR_TR12
 
EXTI_FTSR_TR12_Msk


	)

3291 
	#EXTI_FTSR_TR13_Pos
 (13U)

	)

3292 
	#EXTI_FTSR_TR13_Msk
 (0x1UL << 
EXTI_FTSR_TR13_Pos
√ã

	)

3293 
	#EXTI_FTSR_TR13
 
EXTI_FTSR_TR13_Msk


	)

3294 
	#EXTI_FTSR_TR14_Pos
 (14U)

	)

3295 
	#EXTI_FTSR_TR14_Msk
 (0x1UL << 
EXTI_FTSR_TR14_Pos
√ã

	)

3296 
	#EXTI_FTSR_TR14
 
EXTI_FTSR_TR14_Msk


	)

3297 
	#EXTI_FTSR_TR15_Pos
 (15U)

	)

3298 
	#EXTI_FTSR_TR15_Msk
 (0x1UL << 
EXTI_FTSR_TR15_Pos
√ã

	)

3299 
	#EXTI_FTSR_TR15
 
EXTI_FTSR_TR15_Msk


	)

3300 
	#EXTI_FTSR_TR16_Pos
 (16U)

	)

3301 
	#EXTI_FTSR_TR16_Msk
 (0x1UL << 
EXTI_FTSR_TR16_Pos
√ã

	)

3302 
	#EXTI_FTSR_TR16
 
EXTI_FTSR_TR16_Msk


	)

3303 
	#EXTI_FTSR_TR17_Pos
 (17U)

	)

3304 
	#EXTI_FTSR_TR17_Msk
 (0x1UL << 
EXTI_FTSR_TR17_Pos
√ã

	)

3305 
	#EXTI_FTSR_TR17
 
EXTI_FTSR_TR17_Msk


	)

3306 
	#EXTI_FTSR_TR18_Pos
 (18U)

	)

3307 
	#EXTI_FTSR_TR18_Msk
 (0x1UL << 
EXTI_FTSR_TR18_Pos
√ã

	)

3308 
	#EXTI_FTSR_TR18
 
EXTI_FTSR_TR18_Msk


	)

3311 
	#EXTI_FTSR_FT0
 
EXTI_FTSR_TR0


	)

3312 
	#EXTI_FTSR_FT1
 
EXTI_FTSR_TR1


	)

3313 
	#EXTI_FTSR_FT2
 
EXTI_FTSR_TR2


	)

3314 
	#EXTI_FTSR_FT3
 
EXTI_FTSR_TR3


	)

3315 
	#EXTI_FTSR_FT4
 
EXTI_FTSR_TR4


	)

3316 
	#EXTI_FTSR_FT5
 
EXTI_FTSR_TR5


	)

3317 
	#EXTI_FTSR_FT6
 
EXTI_FTSR_TR6


	)

3318 
	#EXTI_FTSR_FT7
 
EXTI_FTSR_TR7


	)

3319 
	#EXTI_FTSR_FT8
 
EXTI_FTSR_TR8


	)

3320 
	#EXTI_FTSR_FT9
 
EXTI_FTSR_TR9


	)

3321 
	#EXTI_FTSR_FT10
 
EXTI_FTSR_TR10


	)

3322 
	#EXTI_FTSR_FT11
 
EXTI_FTSR_TR11


	)

3323 
	#EXTI_FTSR_FT12
 
EXTI_FTSR_TR12


	)

3324 
	#EXTI_FTSR_FT13
 
EXTI_FTSR_TR13


	)

3325 
	#EXTI_FTSR_FT14
 
EXTI_FTSR_TR14


	)

3326 
	#EXTI_FTSR_FT15
 
EXTI_FTSR_TR15


	)

3327 
	#EXTI_FTSR_FT16
 
EXTI_FTSR_TR16


	)

3328 
	#EXTI_FTSR_FT17
 
EXTI_FTSR_TR17


	)

3329 
	#EXTI_FTSR_FT18
 
EXTI_FTSR_TR18


	)

3332 
	#EXTI_SWIER_SWIER0_Pos
 (0U)

	)

3333 
	#EXTI_SWIER_SWIER0_Msk
 (0x1UL << 
EXTI_SWIER_SWIER0_Pos
√ã

	)

3334 
	#EXTI_SWIER_SWIER0
 
EXTI_SWIER_SWIER0_Msk


	)

3335 
	#EXTI_SWIER_SWIER1_Pos
 (1U)

	)

3336 
	#EXTI_SWIER_SWIER1_Msk
 (0x1UL << 
EXTI_SWIER_SWIER1_Pos
√ã

	)

3337 
	#EXTI_SWIER_SWIER1
 
EXTI_SWIER_SWIER1_Msk


	)

3338 
	#EXTI_SWIER_SWIER2_Pos
 (2U)

	)

3339 
	#EXTI_SWIER_SWIER2_Msk
 (0x1UL << 
EXTI_SWIER_SWIER2_Pos
√ã

	)

3340 
	#EXTI_SWIER_SWIER2
 
EXTI_SWIER_SWIER2_Msk


	)

3341 
	#EXTI_SWIER_SWIER3_Pos
 (3U)

	)

3342 
	#EXTI_SWIER_SWIER3_Msk
 (0x1UL << 
EXTI_SWIER_SWIER3_Pos
√ã

	)

3343 
	#EXTI_SWIER_SWIER3
 
EXTI_SWIER_SWIER3_Msk


	)

3344 
	#EXTI_SWIER_SWIER4_Pos
 (4U)

	)

3345 
	#EXTI_SWIER_SWIER4_Msk
 (0x1UL << 
EXTI_SWIER_SWIER4_Pos
√ã

	)

3346 
	#EXTI_SWIER_SWIER4
 
EXTI_SWIER_SWIER4_Msk


	)

3347 
	#EXTI_SWIER_SWIER5_Pos
 (5U)

	)

3348 
	#EXTI_SWIER_SWIER5_Msk
 (0x1UL << 
EXTI_SWIER_SWIER5_Pos
√ã

	)

3349 
	#EXTI_SWIER_SWIER5
 
EXTI_SWIER_SWIER5_Msk


	)

3350 
	#EXTI_SWIER_SWIER6_Pos
 (6U)

	)

3351 
	#EXTI_SWIER_SWIER6_Msk
 (0x1UL << 
EXTI_SWIER_SWIER6_Pos
√ã

	)

3352 
	#EXTI_SWIER_SWIER6
 
EXTI_SWIER_SWIER6_Msk


	)

3353 
	#EXTI_SWIER_SWIER7_Pos
 (7U)

	)

3354 
	#EXTI_SWIER_SWIER7_Msk
 (0x1UL << 
EXTI_SWIER_SWIER7_Pos
√ã

	)

3355 
	#EXTI_SWIER_SWIER7
 
EXTI_SWIER_SWIER7_Msk


	)

3356 
	#EXTI_SWIER_SWIER8_Pos
 (8U)

	)

3357 
	#EXTI_SWIER_SWIER8_Msk
 (0x1UL << 
EXTI_SWIER_SWIER8_Pos
√ã

	)

3358 
	#EXTI_SWIER_SWIER8
 
EXTI_SWIER_SWIER8_Msk


	)

3359 
	#EXTI_SWIER_SWIER9_Pos
 (9U)

	)

3360 
	#EXTI_SWIER_SWIER9_Msk
 (0x1UL << 
EXTI_SWIER_SWIER9_Pos
√ã

	)

3361 
	#EXTI_SWIER_SWIER9
 
EXTI_SWIER_SWIER9_Msk


	)

3362 
	#EXTI_SWIER_SWIER10_Pos
 (10U)

	)

3363 
	#EXTI_SWIER_SWIER10_Msk
 (0x1UL << 
EXTI_SWIER_SWIER10_Pos
√ã

	)

3364 
	#EXTI_SWIER_SWIER10
 
EXTI_SWIER_SWIER10_Msk


	)

3365 
	#EXTI_SWIER_SWIER11_Pos
 (11U)

	)

3366 
	#EXTI_SWIER_SWIER11_Msk
 (0x1UL << 
EXTI_SWIER_SWIER11_Pos
√ã

	)

3367 
	#EXTI_SWIER_SWIER11
 
EXTI_SWIER_SWIER11_Msk


	)

3368 
	#EXTI_SWIER_SWIER12_Pos
 (12U)

	)

3369 
	#EXTI_SWIER_SWIER12_Msk
 (0x1UL << 
EXTI_SWIER_SWIER12_Pos
√ã

	)

3370 
	#EXTI_SWIER_SWIER12
 
EXTI_SWIER_SWIER12_Msk


	)

3371 
	#EXTI_SWIER_SWIER13_Pos
 (13U)

	)

3372 
	#EXTI_SWIER_SWIER13_Msk
 (0x1UL << 
EXTI_SWIER_SWIER13_Pos
√ã

	)

3373 
	#EXTI_SWIER_SWIER13
 
EXTI_SWIER_SWIER13_Msk


	)

3374 
	#EXTI_SWIER_SWIER14_Pos
 (14U)

	)

3375 
	#EXTI_SWIER_SWIER14_Msk
 (0x1UL << 
EXTI_SWIER_SWIER14_Pos
√ã

	)

3376 
	#EXTI_SWIER_SWIER14
 
EXTI_SWIER_SWIER14_Msk


	)

3377 
	#EXTI_SWIER_SWIER15_Pos
 (15U)

	)

3378 
	#EXTI_SWIER_SWIER15_Msk
 (0x1UL << 
EXTI_SWIER_SWIER15_Pos
√ã

	)

3379 
	#EXTI_SWIER_SWIER15
 
EXTI_SWIER_SWIER15_Msk


	)

3380 
	#EXTI_SWIER_SWIER16_Pos
 (16U)

	)

3381 
	#EXTI_SWIER_SWIER16_Msk
 (0x1UL << 
EXTI_SWIER_SWIER16_Pos
√ã

	)

3382 
	#EXTI_SWIER_SWIER16
 
EXTI_SWIER_SWIER16_Msk


	)

3383 
	#EXTI_SWIER_SWIER17_Pos
 (17U)

	)

3384 
	#EXTI_SWIER_SWIER17_Msk
 (0x1UL << 
EXTI_SWIER_SWIER17_Pos
√ã

	)

3385 
	#EXTI_SWIER_SWIER17
 
EXTI_SWIER_SWIER17_Msk


	)

3386 
	#EXTI_SWIER_SWIER18_Pos
 (18U)

	)

3387 
	#EXTI_SWIER_SWIER18_Msk
 (0x1UL << 
EXTI_SWIER_SWIER18_Pos
√ã

	)

3388 
	#EXTI_SWIER_SWIER18
 
EXTI_SWIER_SWIER18_Msk


	)

3391 
	#EXTI_SWIER_SWI0
 
EXTI_SWIER_SWIER0


	)

3392 
	#EXTI_SWIER_SWI1
 
EXTI_SWIER_SWIER1


	)

3393 
	#EXTI_SWIER_SWI2
 
EXTI_SWIER_SWIER2


	)

3394 
	#EXTI_SWIER_SWI3
 
EXTI_SWIER_SWIER3


	)

3395 
	#EXTI_SWIER_SWI4
 
EXTI_SWIER_SWIER4


	)

3396 
	#EXTI_SWIER_SWI5
 
EXTI_SWIER_SWIER5


	)

3397 
	#EXTI_SWIER_SWI6
 
EXTI_SWIER_SWIER6


	)

3398 
	#EXTI_SWIER_SWI7
 
EXTI_SWIER_SWIER7


	)

3399 
	#EXTI_SWIER_SWI8
 
EXTI_SWIER_SWIER8


	)

3400 
	#EXTI_SWIER_SWI9
 
EXTI_SWIER_SWIER9


	)

3401 
	#EXTI_SWIER_SWI10
 
EXTI_SWIER_SWIER10


	)

3402 
	#EXTI_SWIER_SWI11
 
EXTI_SWIER_SWIER11


	)

3403 
	#EXTI_SWIER_SWI12
 
EXTI_SWIER_SWIER12


	)

3404 
	#EXTI_SWIER_SWI13
 
EXTI_SWIER_SWIER13


	)

3405 
	#EXTI_SWIER_SWI14
 
EXTI_SWIER_SWIER14


	)

3406 
	#EXTI_SWIER_SWI15
 
EXTI_SWIER_SWIER15


	)

3407 
	#EXTI_SWIER_SWI16
 
EXTI_SWIER_SWIER16


	)

3408 
	#EXTI_SWIER_SWI17
 
EXTI_SWIER_SWIER17


	)

3409 
	#EXTI_SWIER_SWI18
 
EXTI_SWIER_SWIER18


	)

3412 
	#EXTI_PR_PR0_Pos
 (0U)

	)

3413 
	#EXTI_PR_PR0_Msk
 (0x1UL << 
EXTI_PR_PR0_Pos
√ã

	)

3414 
	#EXTI_PR_PR0
 
EXTI_PR_PR0_Msk


	)

3415 
	#EXTI_PR_PR1_Pos
 (1U)

	)

3416 
	#EXTI_PR_PR1_Msk
 (0x1UL << 
EXTI_PR_PR1_Pos
√ã

	)

3417 
	#EXTI_PR_PR1
 
EXTI_PR_PR1_Msk


	)

3418 
	#EXTI_PR_PR2_Pos
 (2U)

	)

3419 
	#EXTI_PR_PR2_Msk
 (0x1UL << 
EXTI_PR_PR2_Pos
√ã

	)

3420 
	#EXTI_PR_PR2
 
EXTI_PR_PR2_Msk


	)

3421 
	#EXTI_PR_PR3_Pos
 (3U)

	)

3422 
	#EXTI_PR_PR3_Msk
 (0x1UL << 
EXTI_PR_PR3_Pos
√ã

	)

3423 
	#EXTI_PR_PR3
 
EXTI_PR_PR3_Msk


	)

3424 
	#EXTI_PR_PR4_Pos
 (4U)

	)

3425 
	#EXTI_PR_PR4_Msk
 (0x1UL << 
EXTI_PR_PR4_Pos
√ã

	)

3426 
	#EXTI_PR_PR4
 
EXTI_PR_PR4_Msk


	)

3427 
	#EXTI_PR_PR5_Pos
 (5U)

	)

3428 
	#EXTI_PR_PR5_Msk
 (0x1UL << 
EXTI_PR_PR5_Pos
√ã

	)

3429 
	#EXTI_PR_PR5
 
EXTI_PR_PR5_Msk


	)

3430 
	#EXTI_PR_PR6_Pos
 (6U)

	)

3431 
	#EXTI_PR_PR6_Msk
 (0x1UL << 
EXTI_PR_PR6_Pos
√ã

	)

3432 
	#EXTI_PR_PR6
 
EXTI_PR_PR6_Msk


	)

3433 
	#EXTI_PR_PR7_Pos
 (7U)

	)

3434 
	#EXTI_PR_PR7_Msk
 (0x1UL << 
EXTI_PR_PR7_Pos
√ã

	)

3435 
	#EXTI_PR_PR7
 
EXTI_PR_PR7_Msk


	)

3436 
	#EXTI_PR_PR8_Pos
 (8U)

	)

3437 
	#EXTI_PR_PR8_Msk
 (0x1UL << 
EXTI_PR_PR8_Pos
√ã

	)

3438 
	#EXTI_PR_PR8
 
EXTI_PR_PR8_Msk


	)

3439 
	#EXTI_PR_PR9_Pos
 (9U)

	)

3440 
	#EXTI_PR_PR9_Msk
 (0x1UL << 
EXTI_PR_PR9_Pos
√ã

	)

3441 
	#EXTI_PR_PR9
 
EXTI_PR_PR9_Msk


	)

3442 
	#EXTI_PR_PR10_Pos
 (10U)

	)

3443 
	#EXTI_PR_PR10_Msk
 (0x1UL << 
EXTI_PR_PR10_Pos
√ã

	)

3444 
	#EXTI_PR_PR10
 
EXTI_PR_PR10_Msk


	)

3445 
	#EXTI_PR_PR11_Pos
 (11U)

	)

3446 
	#EXTI_PR_PR11_Msk
 (0x1UL << 
EXTI_PR_PR11_Pos
√ã

	)

3447 
	#EXTI_PR_PR11
 
EXTI_PR_PR11_Msk


	)

3448 
	#EXTI_PR_PR12_Pos
 (12U)

	)

3449 
	#EXTI_PR_PR12_Msk
 (0x1UL << 
EXTI_PR_PR12_Pos
√ã

	)

3450 
	#EXTI_PR_PR12
 
EXTI_PR_PR12_Msk


	)

3451 
	#EXTI_PR_PR13_Pos
 (13U)

	)

3452 
	#EXTI_PR_PR13_Msk
 (0x1UL << 
EXTI_PR_PR13_Pos
√ã

	)

3453 
	#EXTI_PR_PR13
 
EXTI_PR_PR13_Msk


	)

3454 
	#EXTI_PR_PR14_Pos
 (14U)

	)

3455 
	#EXTI_PR_PR14_Msk
 (0x1UL << 
EXTI_PR_PR14_Pos
√ã

	)

3456 
	#EXTI_PR_PR14
 
EXTI_PR_PR14_Msk


	)

3457 
	#EXTI_PR_PR15_Pos
 (15U)

	)

3458 
	#EXTI_PR_PR15_Msk
 (0x1UL << 
EXTI_PR_PR15_Pos
√ã

	)

3459 
	#EXTI_PR_PR15
 
EXTI_PR_PR15_Msk


	)

3460 
	#EXTI_PR_PR16_Pos
 (16U)

	)

3461 
	#EXTI_PR_PR16_Msk
 (0x1UL << 
EXTI_PR_PR16_Pos
√ã

	)

3462 
	#EXTI_PR_PR16
 
EXTI_PR_PR16_Msk


	)

3463 
	#EXTI_PR_PR17_Pos
 (17U)

	)

3464 
	#EXTI_PR_PR17_Msk
 (0x1UL << 
EXTI_PR_PR17_Pos
√ã

	)

3465 
	#EXTI_PR_PR17
 
EXTI_PR_PR17_Msk


	)

3466 
	#EXTI_PR_PR18_Pos
 (18U)

	)

3467 
	#EXTI_PR_PR18_Msk
 (0x1UL << 
EXTI_PR_PR18_Pos
√ã

	)

3468 
	#EXTI_PR_PR18
 
EXTI_PR_PR18_Msk


	)

3471 
	#EXTI_PR_PIF0
 
EXTI_PR_PR0


	)

3472 
	#EXTI_PR_PIF1
 
EXTI_PR_PR1


	)

3473 
	#EXTI_PR_PIF2
 
EXTI_PR_PR2


	)

3474 
	#EXTI_PR_PIF3
 
EXTI_PR_PR3


	)

3475 
	#EXTI_PR_PIF4
 
EXTI_PR_PR4


	)

3476 
	#EXTI_PR_PIF5
 
EXTI_PR_PR5


	)

3477 
	#EXTI_PR_PIF6
 
EXTI_PR_PR6


	)

3478 
	#EXTI_PR_PIF7
 
EXTI_PR_PR7


	)

3479 
	#EXTI_PR_PIF8
 
EXTI_PR_PR8


	)

3480 
	#EXTI_PR_PIF9
 
EXTI_PR_PR9


	)

3481 
	#EXTI_PR_PIF10
 
EXTI_PR_PR10


	)

3482 
	#EXTI_PR_PIF11
 
EXTI_PR_PR11


	)

3483 
	#EXTI_PR_PIF12
 
EXTI_PR_PR12


	)

3484 
	#EXTI_PR_PIF13
 
EXTI_PR_PR13


	)

3485 
	#EXTI_PR_PIF14
 
EXTI_PR_PR14


	)

3486 
	#EXTI_PR_PIF15
 
EXTI_PR_PR15


	)

3487 
	#EXTI_PR_PIF16
 
EXTI_PR_PR16


	)

3488 
	#EXTI_PR_PIF17
 
EXTI_PR_PR17


	)

3489 
	#EXTI_PR_PIF18
 
EXTI_PR_PR18


	)

3498 
	#DMA_ISR_GIF1_Pos
 (0U)

	)

3499 
	#DMA_ISR_GIF1_Msk
 (0x1UL << 
DMA_ISR_GIF1_Pos
√ã

	)

3500 
	#DMA_ISR_GIF1
 
DMA_ISR_GIF1_Msk


	)

3501 
	#DMA_ISR_TCIF1_Pos
 (1U)

	)

3502 
	#DMA_ISR_TCIF1_Msk
 (0x1UL << 
DMA_ISR_TCIF1_Pos
√ã

	)

3503 
	#DMA_ISR_TCIF1
 
DMA_ISR_TCIF1_Msk


	)

3504 
	#DMA_ISR_HTIF1_Pos
 (2U)

	)

3505 
	#DMA_ISR_HTIF1_Msk
 (0x1UL << 
DMA_ISR_HTIF1_Pos
√ã

	)

3506 
	#DMA_ISR_HTIF1
 
DMA_ISR_HTIF1_Msk


	)

3507 
	#DMA_ISR_TEIF1_Pos
 (3U)

	)

3508 
	#DMA_ISR_TEIF1_Msk
 (0x1UL << 
DMA_ISR_TEIF1_Pos
√ã

	)

3509 
	#DMA_ISR_TEIF1
 
DMA_ISR_TEIF1_Msk


	)

3510 
	#DMA_ISR_GIF2_Pos
 (4U)

	)

3511 
	#DMA_ISR_GIF2_Msk
 (0x1UL << 
DMA_ISR_GIF2_Pos
√ã

	)

3512 
	#DMA_ISR_GIF2
 
DMA_ISR_GIF2_Msk


	)

3513 
	#DMA_ISR_TCIF2_Pos
 (5U)

	)

3514 
	#DMA_ISR_TCIF2_Msk
 (0x1UL << 
DMA_ISR_TCIF2_Pos
√ã

	)

3515 
	#DMA_ISR_TCIF2
 
DMA_ISR_TCIF2_Msk


	)

3516 
	#DMA_ISR_HTIF2_Pos
 (6U)

	)

3517 
	#DMA_ISR_HTIF2_Msk
 (0x1UL << 
DMA_ISR_HTIF2_Pos
√ã

	)

3518 
	#DMA_ISR_HTIF2
 
DMA_ISR_HTIF2_Msk


	)

3519 
	#DMA_ISR_TEIF2_Pos
 (7U)

	)

3520 
	#DMA_ISR_TEIF2_Msk
 (0x1UL << 
DMA_ISR_TEIF2_Pos
√ã

	)

3521 
	#DMA_ISR_TEIF2
 
DMA_ISR_TEIF2_Msk


	)

3522 
	#DMA_ISR_GIF3_Pos
 (8U)

	)

3523 
	#DMA_ISR_GIF3_Msk
 (0x1UL << 
DMA_ISR_GIF3_Pos
√ã

	)

3524 
	#DMA_ISR_GIF3
 
DMA_ISR_GIF3_Msk


	)

3525 
	#DMA_ISR_TCIF3_Pos
 (9U)

	)

3526 
	#DMA_ISR_TCIF3_Msk
 (0x1UL << 
DMA_ISR_TCIF3_Pos
√ã

	)

3527 
	#DMA_ISR_TCIF3
 
DMA_ISR_TCIF3_Msk


	)

3528 
	#DMA_ISR_HTIF3_Pos
 (10U)

	)

3529 
	#DMA_ISR_HTIF3_Msk
 (0x1UL << 
DMA_ISR_HTIF3_Pos
√ã

	)

3530 
	#DMA_ISR_HTIF3
 
DMA_ISR_HTIF3_Msk


	)

3531 
	#DMA_ISR_TEIF3_Pos
 (11U)

	)

3532 
	#DMA_ISR_TEIF3_Msk
 (0x1UL << 
DMA_ISR_TEIF3_Pos
√ã

	)

3533 
	#DMA_ISR_TEIF3
 
DMA_ISR_TEIF3_Msk


	)

3534 
	#DMA_ISR_GIF4_Pos
 (12U)

	)

3535 
	#DMA_ISR_GIF4_Msk
 (0x1UL << 
DMA_ISR_GIF4_Pos
√ã

	)

3536 
	#DMA_ISR_GIF4
 
DMA_ISR_GIF4_Msk


	)

3537 
	#DMA_ISR_TCIF4_Pos
 (13U)

	)

3538 
	#DMA_ISR_TCIF4_Msk
 (0x1UL << 
DMA_ISR_TCIF4_Pos
√ã

	)

3539 
	#DMA_ISR_TCIF4
 
DMA_ISR_TCIF4_Msk


	)

3540 
	#DMA_ISR_HTIF4_Pos
 (14U)

	)

3541 
	#DMA_ISR_HTIF4_Msk
 (0x1UL << 
DMA_ISR_HTIF4_Pos
√ã

	)

3542 
	#DMA_ISR_HTIF4
 
DMA_ISR_HTIF4_Msk


	)

3543 
	#DMA_ISR_TEIF4_Pos
 (15U)

	)

3544 
	#DMA_ISR_TEIF4_Msk
 (0x1UL << 
DMA_ISR_TEIF4_Pos
√ã

	)

3545 
	#DMA_ISR_TEIF4
 
DMA_ISR_TEIF4_Msk


	)

3546 
	#DMA_ISR_GIF5_Pos
 (16U)

	)

3547 
	#DMA_ISR_GIF5_Msk
 (0x1UL << 
DMA_ISR_GIF5_Pos
√ã

	)

3548 
	#DMA_ISR_GIF5
 
DMA_ISR_GIF5_Msk


	)

3549 
	#DMA_ISR_TCIF5_Pos
 (17U)

	)

3550 
	#DMA_ISR_TCIF5_Msk
 (0x1UL << 
DMA_ISR_TCIF5_Pos
√ã

	)

3551 
	#DMA_ISR_TCIF5
 
DMA_ISR_TCIF5_Msk


	)

3552 
	#DMA_ISR_HTIF5_Pos
 (18U)

	)

3553 
	#DMA_ISR_HTIF5_Msk
 (0x1UL << 
DMA_ISR_HTIF5_Pos
√ã

	)

3554 
	#DMA_ISR_HTIF5
 
DMA_ISR_HTIF5_Msk


	)

3555 
	#DMA_ISR_TEIF5_Pos
 (19U)

	)

3556 
	#DMA_ISR_TEIF5_Msk
 (0x1UL << 
DMA_ISR_TEIF5_Pos
√ã

	)

3557 
	#DMA_ISR_TEIF5
 
DMA_ISR_TEIF5_Msk


	)

3558 
	#DMA_ISR_GIF6_Pos
 (20U)

	)

3559 
	#DMA_ISR_GIF6_Msk
 (0x1UL << 
DMA_ISR_GIF6_Pos
√ã

	)

3560 
	#DMA_ISR_GIF6
 
DMA_ISR_GIF6_Msk


	)

3561 
	#DMA_ISR_TCIF6_Pos
 (21U)

	)

3562 
	#DMA_ISR_TCIF6_Msk
 (0x1UL << 
DMA_ISR_TCIF6_Pos
√ã

	)

3563 
	#DMA_ISR_TCIF6
 
DMA_ISR_TCIF6_Msk


	)

3564 
	#DMA_ISR_HTIF6_Pos
 (22U)

	)

3565 
	#DMA_ISR_HTIF6_Msk
 (0x1UL << 
DMA_ISR_HTIF6_Pos
√ã

	)

3566 
	#DMA_ISR_HTIF6
 
DMA_ISR_HTIF6_Msk


	)

3567 
	#DMA_ISR_TEIF6_Pos
 (23U)

	)

3568 
	#DMA_ISR_TEIF6_Msk
 (0x1UL << 
DMA_ISR_TEIF6_Pos
√ã

	)

3569 
	#DMA_ISR_TEIF6
 
DMA_ISR_TEIF6_Msk


	)

3570 
	#DMA_ISR_GIF7_Pos
 (24U)

	)

3571 
	#DMA_ISR_GIF7_Msk
 (0x1UL << 
DMA_ISR_GIF7_Pos
√ã

	)

3572 
	#DMA_ISR_GIF7
 
DMA_ISR_GIF7_Msk


	)

3573 
	#DMA_ISR_TCIF7_Pos
 (25U)

	)

3574 
	#DMA_ISR_TCIF7_Msk
 (0x1UL << 
DMA_ISR_TCIF7_Pos
√ã

	)

3575 
	#DMA_ISR_TCIF7
 
DMA_ISR_TCIF7_Msk


	)

3576 
	#DMA_ISR_HTIF7_Pos
 (26U)

	)

3577 
	#DMA_ISR_HTIF7_Msk
 (0x1UL << 
DMA_ISR_HTIF7_Pos
√ã

	)

3578 
	#DMA_ISR_HTIF7
 
DMA_ISR_HTIF7_Msk


	)

3579 
	#DMA_ISR_TEIF7_Pos
 (27U)

	)

3580 
	#DMA_ISR_TEIF7_Msk
 (0x1UL << 
DMA_ISR_TEIF7_Pos
√ã

	)

3581 
	#DMA_ISR_TEIF7
 
DMA_ISR_TEIF7_Msk


	)

3584 
	#DMA_IFCR_CGIF1_Pos
 (0U)

	)

3585 
	#DMA_IFCR_CGIF1_Msk
 (0x1UL << 
DMA_IFCR_CGIF1_Pos
√ã

	)

3586 
	#DMA_IFCR_CGIF1
 
DMA_IFCR_CGIF1_Msk


	)

3587 
	#DMA_IFCR_CTCIF1_Pos
 (1U)

	)

3588 
	#DMA_IFCR_CTCIF1_Msk
 (0x1UL << 
DMA_IFCR_CTCIF1_Pos
√ã

	)

3589 
	#DMA_IFCR_CTCIF1
 
DMA_IFCR_CTCIF1_Msk


	)

3590 
	#DMA_IFCR_CHTIF1_Pos
 (2U)

	)

3591 
	#DMA_IFCR_CHTIF1_Msk
 (0x1UL << 
DMA_IFCR_CHTIF1_Pos
√ã

	)

3592 
	#DMA_IFCR_CHTIF1
 
DMA_IFCR_CHTIF1_Msk


	)

3593 
	#DMA_IFCR_CTEIF1_Pos
 (3U)

	)

3594 
	#DMA_IFCR_CTEIF1_Msk
 (0x1UL << 
DMA_IFCR_CTEIF1_Pos
√ã

	)

3595 
	#DMA_IFCR_CTEIF1
 
DMA_IFCR_CTEIF1_Msk


	)

3596 
	#DMA_IFCR_CGIF2_Pos
 (4U)

	)

3597 
	#DMA_IFCR_CGIF2_Msk
 (0x1UL << 
DMA_IFCR_CGIF2_Pos
√ã

	)

3598 
	#DMA_IFCR_CGIF2
 
DMA_IFCR_CGIF2_Msk


	)

3599 
	#DMA_IFCR_CTCIF2_Pos
 (5U)

	)

3600 
	#DMA_IFCR_CTCIF2_Msk
 (0x1UL << 
DMA_IFCR_CTCIF2_Pos
√ã

	)

3601 
	#DMA_IFCR_CTCIF2
 
DMA_IFCR_CTCIF2_Msk


	)

3602 
	#DMA_IFCR_CHTIF2_Pos
 (6U)

	)

3603 
	#DMA_IFCR_CHTIF2_Msk
 (0x1UL << 
DMA_IFCR_CHTIF2_Pos
√ã

	)

3604 
	#DMA_IFCR_CHTIF2
 
DMA_IFCR_CHTIF2_Msk


	)

3605 
	#DMA_IFCR_CTEIF2_Pos
 (7U)

	)

3606 
	#DMA_IFCR_CTEIF2_Msk
 (0x1UL << 
DMA_IFCR_CTEIF2_Pos
√ã

	)

3607 
	#DMA_IFCR_CTEIF2
 
DMA_IFCR_CTEIF2_Msk


	)

3608 
	#DMA_IFCR_CGIF3_Pos
 (8U)

	)

3609 
	#DMA_IFCR_CGIF3_Msk
 (0x1UL << 
DMA_IFCR_CGIF3_Pos
√ã

	)

3610 
	#DMA_IFCR_CGIF3
 
DMA_IFCR_CGIF3_Msk


	)

3611 
	#DMA_IFCR_CTCIF3_Pos
 (9U)

	)

3612 
	#DMA_IFCR_CTCIF3_Msk
 (0x1UL << 
DMA_IFCR_CTCIF3_Pos
√ã

	)

3613 
	#DMA_IFCR_CTCIF3
 
DMA_IFCR_CTCIF3_Msk


	)

3614 
	#DMA_IFCR_CHTIF3_Pos
 (10U)

	)

3615 
	#DMA_IFCR_CHTIF3_Msk
 (0x1UL << 
DMA_IFCR_CHTIF3_Pos
√ã

	)

3616 
	#DMA_IFCR_CHTIF3
 
DMA_IFCR_CHTIF3_Msk


	)

3617 
	#DMA_IFCR_CTEIF3_Pos
 (11U)

	)

3618 
	#DMA_IFCR_CTEIF3_Msk
 (0x1UL << 
DMA_IFCR_CTEIF3_Pos
√ã

	)

3619 
	#DMA_IFCR_CTEIF3
 
DMA_IFCR_CTEIF3_Msk


	)

3620 
	#DMA_IFCR_CGIF4_Pos
 (12U)

	)

3621 
	#DMA_IFCR_CGIF4_Msk
 (0x1UL << 
DMA_IFCR_CGIF4_Pos
√ã

	)

3622 
	#DMA_IFCR_CGIF4
 
DMA_IFCR_CGIF4_Msk


	)

3623 
	#DMA_IFCR_CTCIF4_Pos
 (13U)

	)

3624 
	#DMA_IFCR_CTCIF4_Msk
 (0x1UL << 
DMA_IFCR_CTCIF4_Pos
√ã

	)

3625 
	#DMA_IFCR_CTCIF4
 
DMA_IFCR_CTCIF4_Msk


	)

3626 
	#DMA_IFCR_CHTIF4_Pos
 (14U)

	)

3627 
	#DMA_IFCR_CHTIF4_Msk
 (0x1UL << 
DMA_IFCR_CHTIF4_Pos
√ã

	)

3628 
	#DMA_IFCR_CHTIF4
 
DMA_IFCR_CHTIF4_Msk


	)

3629 
	#DMA_IFCR_CTEIF4_Pos
 (15U)

	)

3630 
	#DMA_IFCR_CTEIF4_Msk
 (0x1UL << 
DMA_IFCR_CTEIF4_Pos
√ã

	)

3631 
	#DMA_IFCR_CTEIF4
 
DMA_IFCR_CTEIF4_Msk


	)

3632 
	#DMA_IFCR_CGIF5_Pos
 (16U)

	)

3633 
	#DMA_IFCR_CGIF5_Msk
 (0x1UL << 
DMA_IFCR_CGIF5_Pos
√ã

	)

3634 
	#DMA_IFCR_CGIF5
 
DMA_IFCR_CGIF5_Msk


	)

3635 
	#DMA_IFCR_CTCIF5_Pos
 (17U)

	)

3636 
	#DMA_IFCR_CTCIF5_Msk
 (0x1UL << 
DMA_IFCR_CTCIF5_Pos
√ã

	)

3637 
	#DMA_IFCR_CTCIF5
 
DMA_IFCR_CTCIF5_Msk


	)

3638 
	#DMA_IFCR_CHTIF5_Pos
 (18U)

	)

3639 
	#DMA_IFCR_CHTIF5_Msk
 (0x1UL << 
DMA_IFCR_CHTIF5_Pos
√ã

	)

3640 
	#DMA_IFCR_CHTIF5
 
DMA_IFCR_CHTIF5_Msk


	)

3641 
	#DMA_IFCR_CTEIF5_Pos
 (19U)

	)

3642 
	#DMA_IFCR_CTEIF5_Msk
 (0x1UL << 
DMA_IFCR_CTEIF5_Pos
√ã

	)

3643 
	#DMA_IFCR_CTEIF5
 
DMA_IFCR_CTEIF5_Msk


	)

3644 
	#DMA_IFCR_CGIF6_Pos
 (20U)

	)

3645 
	#DMA_IFCR_CGIF6_Msk
 (0x1UL << 
DMA_IFCR_CGIF6_Pos
√ã

	)

3646 
	#DMA_IFCR_CGIF6
 
DMA_IFCR_CGIF6_Msk


	)

3647 
	#DMA_IFCR_CTCIF6_Pos
 (21U)

	)

3648 
	#DMA_IFCR_CTCIF6_Msk
 (0x1UL << 
DMA_IFCR_CTCIF6_Pos
√ã

	)

3649 
	#DMA_IFCR_CTCIF6
 
DMA_IFCR_CTCIF6_Msk


	)

3650 
	#DMA_IFCR_CHTIF6_Pos
 (22U)

	)

3651 
	#DMA_IFCR_CHTIF6_Msk
 (0x1UL << 
DMA_IFCR_CHTIF6_Pos
√ã

	)

3652 
	#DMA_IFCR_CHTIF6
 
DMA_IFCR_CHTIF6_Msk


	)

3653 
	#DMA_IFCR_CTEIF6_Pos
 (23U)

	)

3654 
	#DMA_IFCR_CTEIF6_Msk
 (0x1UL << 
DMA_IFCR_CTEIF6_Pos
√ã

	)

3655 
	#DMA_IFCR_CTEIF6
 
DMA_IFCR_CTEIF6_Msk


	)

3656 
	#DMA_IFCR_CGIF7_Pos
 (24U)

	)

3657 
	#DMA_IFCR_CGIF7_Msk
 (0x1UL << 
DMA_IFCR_CGIF7_Pos
√ã

	)

3658 
	#DMA_IFCR_CGIF7
 
DMA_IFCR_CGIF7_Msk


	)

3659 
	#DMA_IFCR_CTCIF7_Pos
 (25U)

	)

3660 
	#DMA_IFCR_CTCIF7_Msk
 (0x1UL << 
DMA_IFCR_CTCIF7_Pos
√ã

	)

3661 
	#DMA_IFCR_CTCIF7
 
DMA_IFCR_CTCIF7_Msk


	)

3662 
	#DMA_IFCR_CHTIF7_Pos
 (26U)

	)

3663 
	#DMA_IFCR_CHTIF7_Msk
 (0x1UL << 
DMA_IFCR_CHTIF7_Pos
√ã

	)

3664 
	#DMA_IFCR_CHTIF7
 
DMA_IFCR_CHTIF7_Msk


	)

3665 
	#DMA_IFCR_CTEIF7_Pos
 (27U)

	)

3666 
	#DMA_IFCR_CTEIF7_Msk
 (0x1UL << 
DMA_IFCR_CTEIF7_Pos
√ã

	)

3667 
	#DMA_IFCR_CTEIF7
 
DMA_IFCR_CTEIF7_Msk


	)

3670 
	#DMA_CCR_EN_Pos
 (0U)

	)

3671 
	#DMA_CCR_EN_Msk
 (0x1UL << 
DMA_CCR_EN_Pos
√ã

	)

3672 
	#DMA_CCR_EN
 
DMA_CCR_EN_Msk


	)

3673 
	#DMA_CCR_TCIE_Pos
 (1U)

	)

3674 
	#DMA_CCR_TCIE_Msk
 (0x1UL << 
DMA_CCR_TCIE_Pos
√ã

	)

3675 
	#DMA_CCR_TCIE
 
DMA_CCR_TCIE_Msk


	)

3676 
	#DMA_CCR_HTIE_Pos
 (2U)

	)

3677 
	#DMA_CCR_HTIE_Msk
 (0x1UL << 
DMA_CCR_HTIE_Pos
√ã

	)

3678 
	#DMA_CCR_HTIE
 
DMA_CCR_HTIE_Msk


	)

3679 
	#DMA_CCR_TEIE_Pos
 (3U)

	)

3680 
	#DMA_CCR_TEIE_Msk
 (0x1UL << 
DMA_CCR_TEIE_Pos
√ã

	)

3681 
	#DMA_CCR_TEIE
 
DMA_CCR_TEIE_Msk


	)

3682 
	#DMA_CCR_DIR_Pos
 (4U)

	)

3683 
	#DMA_CCR_DIR_Msk
 (0x1UL << 
DMA_CCR_DIR_Pos
√ã

	)

3684 
	#DMA_CCR_DIR
 
DMA_CCR_DIR_Msk


	)

3685 
	#DMA_CCR_CIRC_Pos
 (5U)

	)

3686 
	#DMA_CCR_CIRC_Msk
 (0x1UL << 
DMA_CCR_CIRC_Pos
√ã

	)

3687 
	#DMA_CCR_CIRC
 
DMA_CCR_CIRC_Msk


	)

3688 
	#DMA_CCR_PINC_Pos
 (6U)

	)

3689 
	#DMA_CCR_PINC_Msk
 (0x1UL << 
DMA_CCR_PINC_Pos
√ã

	)

3690 
	#DMA_CCR_PINC
 
DMA_CCR_PINC_Msk


	)

3691 
	#DMA_CCR_MINC_Pos
 (7U)

	)

3692 
	#DMA_CCR_MINC_Msk
 (0x1UL << 
DMA_CCR_MINC_Pos
√ã

	)

3693 
	#DMA_CCR_MINC
 
DMA_CCR_MINC_Msk


	)

3695 
	#DMA_CCR_PSIZE_Pos
 (8U)

	)

3696 
	#DMA_CCR_PSIZE_Msk
 (0x3UL << 
DMA_CCR_PSIZE_Pos
√ã

	)

3697 
	#DMA_CCR_PSIZE
 
DMA_CCR_PSIZE_Msk


	)

3698 
	#DMA_CCR_PSIZE_0
 (0x1UL << 
DMA_CCR_PSIZE_Pos
√ã

	)

3699 
	#DMA_CCR_PSIZE_1
 (0x2UL << 
DMA_CCR_PSIZE_Pos
√ã

	)

3701 
	#DMA_CCR_MSIZE_Pos
 (10U)

	)

3702 
	#DMA_CCR_MSIZE_Msk
 (0x3UL << 
DMA_CCR_MSIZE_Pos
√ã

	)

3703 
	#DMA_CCR_MSIZE
 
DMA_CCR_MSIZE_Msk


	)

3704 
	#DMA_CCR_MSIZE_0
 (0x1UL << 
DMA_CCR_MSIZE_Pos
√ã

	)

3705 
	#DMA_CCR_MSIZE_1
 (0x2UL << 
DMA_CCR_MSIZE_Pos
√ã

	)

3707 
	#DMA_CCR_PL_Pos
 (12U)

	)

3708 
	#DMA_CCR_PL_Msk
 (0x3UL << 
DMA_CCR_PL_Pos
√ã

	)

3709 
	#DMA_CCR_PL
 
DMA_CCR_PL_Msk


	)

3710 
	#DMA_CCR_PL_0
 (0x1UL << 
DMA_CCR_PL_Pos
√ã

	)

3711 
	#DMA_CCR_PL_1
 (0x2UL << 
DMA_CCR_PL_Pos
√ã

	)

3713 
	#DMA_CCR_MEM2MEM_Pos
 (14U)

	)

3714 
	#DMA_CCR_MEM2MEM_Msk
 (0x1UL << 
DMA_CCR_MEM2MEM_Pos
√ã

	)

3715 
	#DMA_CCR_MEM2MEM
 
DMA_CCR_MEM2MEM_Msk


	)

3718 
	#DMA_CNDTR_NDT_Pos
 (0U)

	)

3719 
	#DMA_CNDTR_NDT_Msk
 (0xFFFFUL << 
DMA_CNDTR_NDT_Pos
√ã

	)

3720 
	#DMA_CNDTR_NDT
 
DMA_CNDTR_NDT_Msk


	)

3723 
	#DMA_CPAR_PA_Pos
 (0U)

	)

3724 
	#DMA_CPAR_PA_Msk
 (0xFFFFFFFFUL << 
DMA_CPAR_PA_Pos
√ã

	)

3725 
	#DMA_CPAR_PA
 
DMA_CPAR_PA_Msk


	)

3728 
	#DMA_CMAR_MA_Pos
 (0U)

	)

3729 
	#DMA_CMAR_MA_Msk
 (0xFFFFFFFFUL << 
DMA_CMAR_MA_Pos
√ã

	)

3730 
	#DMA_CMAR_MA
 
DMA_CMAR_MA_Msk


	)

3741 
	#ADC_MULTIMODE_SUPPORT


	)

3744 
	#ADC_SR_AWD_Pos
 (0U)

	)

3745 
	#ADC_SR_AWD_Msk
 (0x1UL << 
ADC_SR_AWD_Pos
√ã

	)

3746 
	#ADC_SR_AWD
 
ADC_SR_AWD_Msk


	)

3747 
	#ADC_SR_EOS_Pos
 (1U)

	)

3748 
	#ADC_SR_EOS_Msk
 (0x1UL << 
ADC_SR_EOS_Pos
√ã

	)

3749 
	#ADC_SR_EOS
 
ADC_SR_EOS_Msk


	)

3750 
	#ADC_SR_JEOS_Pos
 (2U)

	)

3751 
	#ADC_SR_JEOS_Msk
 (0x1UL << 
ADC_SR_JEOS_Pos
√ã

	)

3752 
	#ADC_SR_JEOS
 
ADC_SR_JEOS_Msk


	)

3753 
	#ADC_SR_JSTRT_Pos
 (3U)

	)

3754 
	#ADC_SR_JSTRT_Msk
 (0x1UL << 
ADC_SR_JSTRT_Pos
√ã

	)

3755 
	#ADC_SR_JSTRT
 
ADC_SR_JSTRT_Msk


	)

3756 
	#ADC_SR_STRT_Pos
 (4U)

	)

3757 
	#ADC_SR_STRT_Msk
 (0x1UL << 
ADC_SR_STRT_Pos
√ã

	)

3758 
	#ADC_SR_STRT
 
ADC_SR_STRT_Msk


	)

3761 
	#ADC_SR_EOC
 (
ADC_SR_EOS
)

	)

3762 
	#ADC_SR_JEOC
 (
ADC_SR_JEOS
)

	)

3765 
	#ADC_CR1_AWDCH_Pos
 (0U)

	)

3766 
	#ADC_CR1_AWDCH_Msk
 (0x1FUL << 
ADC_CR1_AWDCH_Pos
√ã

	)

3767 
	#ADC_CR1_AWDCH
 
ADC_CR1_AWDCH_Msk


	)

3768 
	#ADC_CR1_AWDCH_0
 (0x01UL << 
ADC_CR1_AWDCH_Pos
√ã

	)

3769 
	#ADC_CR1_AWDCH_1
 (0x02UL << 
ADC_CR1_AWDCH_Pos
√ã

	)

3770 
	#ADC_CR1_AWDCH_2
 (0x04UL << 
ADC_CR1_AWDCH_Pos
√ã

	)

3771 
	#ADC_CR1_AWDCH_3
 (0x08UL << 
ADC_CR1_AWDCH_Pos
√ã

	)

3772 
	#ADC_CR1_AWDCH_4
 (0x10UL << 
ADC_CR1_AWDCH_Pos
√ã

	)

3774 
	#ADC_CR1_EOSIE_Pos
 (5U)

	)

3775 
	#ADC_CR1_EOSIE_Msk
 (0x1UL << 
ADC_CR1_EOSIE_Pos
√ã

	)

3776 
	#ADC_CR1_EOSIE
 
ADC_CR1_EOSIE_Msk


	)

3777 
	#ADC_CR1_AWDIE_Pos
 (6U)

	)

3778 
	#ADC_CR1_AWDIE_Msk
 (0x1UL << 
ADC_CR1_AWDIE_Pos
√ã

	)

3779 
	#ADC_CR1_AWDIE
 
ADC_CR1_AWDIE_Msk


	)

3780 
	#ADC_CR1_JEOSIE_Pos
 (7U)

	)

3781 
	#ADC_CR1_JEOSIE_Msk
 (0x1UL << 
ADC_CR1_JEOSIE_Pos
√ã

	)

3782 
	#ADC_CR1_JEOSIE
 
ADC_CR1_JEOSIE_Msk


	)

3783 
	#ADC_CR1_SCAN_Pos
 (8U)

	)

3784 
	#ADC_CR1_SCAN_Msk
 (0x1UL << 
ADC_CR1_SCAN_Pos
√ã

	)

3785 
	#ADC_CR1_SCAN
 
ADC_CR1_SCAN_Msk


	)

3786 
	#ADC_CR1_AWDSGL_Pos
 (9U)

	)

3787 
	#ADC_CR1_AWDSGL_Msk
 (0x1UL << 
ADC_CR1_AWDSGL_Pos
√ã

	)

3788 
	#ADC_CR1_AWDSGL
 
ADC_CR1_AWDSGL_Msk


	)

3789 
	#ADC_CR1_JAUTO_Pos
 (10U)

	)

3790 
	#ADC_CR1_JAUTO_Msk
 (0x1UL << 
ADC_CR1_JAUTO_Pos
√ã

	)

3791 
	#ADC_CR1_JAUTO
 
ADC_CR1_JAUTO_Msk


	)

3792 
	#ADC_CR1_DISCEN_Pos
 (11U)

	)

3793 
	#ADC_CR1_DISCEN_Msk
 (0x1UL << 
ADC_CR1_DISCEN_Pos
√ã

	)

3794 
	#ADC_CR1_DISCEN
 
ADC_CR1_DISCEN_Msk


	)

3795 
	#ADC_CR1_JDISCEN_Pos
 (12U)

	)

3796 
	#ADC_CR1_JDISCEN_Msk
 (0x1UL << 
ADC_CR1_JDISCEN_Pos
√ã

	)

3797 
	#ADC_CR1_JDISCEN
 
ADC_CR1_JDISCEN_Msk


	)

3799 
	#ADC_CR1_DISCNUM_Pos
 (13U)

	)

3800 
	#ADC_CR1_DISCNUM_Msk
 (0x7UL << 
ADC_CR1_DISCNUM_Pos
√ã

	)

3801 
	#ADC_CR1_DISCNUM
 
ADC_CR1_DISCNUM_Msk


	)

3802 
	#ADC_CR1_DISCNUM_0
 (0x1UL << 
ADC_CR1_DISCNUM_Pos
√ã

	)

3803 
	#ADC_CR1_DISCNUM_1
 (0x2UL << 
ADC_CR1_DISCNUM_Pos
√ã

	)

3804 
	#ADC_CR1_DISCNUM_2
 (0x4UL << 
ADC_CR1_DISCNUM_Pos
√ã

	)

3806 
	#ADC_CR1_DUALMOD_Pos
 (16U)

	)

3807 
	#ADC_CR1_DUALMOD_Msk
 (0xFUL << 
ADC_CR1_DUALMOD_Pos
√ã

	)

3808 
	#ADC_CR1_DUALMOD
 
ADC_CR1_DUALMOD_Msk


	)

3809 
	#ADC_CR1_DUALMOD_0
 (0x1UL << 
ADC_CR1_DUALMOD_Pos
√ã

	)

3810 
	#ADC_CR1_DUALMOD_1
 (0x2UL << 
ADC_CR1_DUALMOD_Pos
√ã

	)

3811 
	#ADC_CR1_DUALMOD_2
 (0x4UL << 
ADC_CR1_DUALMOD_Pos
√ã

	)

3812 
	#ADC_CR1_DUALMOD_3
 (0x8UL << 
ADC_CR1_DUALMOD_Pos
√ã

	)

3814 
	#ADC_CR1_JAWDEN_Pos
 (22U)

	)

3815 
	#ADC_CR1_JAWDEN_Msk
 (0x1UL << 
ADC_CR1_JAWDEN_Pos
√ã

	)

3816 
	#ADC_CR1_JAWDEN
 
ADC_CR1_JAWDEN_Msk


	)

3817 
	#ADC_CR1_AWDEN_Pos
 (23U)

	)

3818 
	#ADC_CR1_AWDEN_Msk
 (0x1UL << 
ADC_CR1_AWDEN_Pos
√ã

	)

3819 
	#ADC_CR1_AWDEN
 
ADC_CR1_AWDEN_Msk


	)

3822 
	#ADC_CR1_EOCIE
 (
ADC_CR1_EOSIE
)

	)

3823 
	#ADC_CR1_JEOCIE
 (
ADC_CR1_JEOSIE
)

	)

3826 
	#ADC_CR2_ADON_Pos
 (0U)

	)

3827 
	#ADC_CR2_ADON_Msk
 (0x1UL << 
ADC_CR2_ADON_Pos
√ã

	)

3828 
	#ADC_CR2_ADON
 
ADC_CR2_ADON_Msk


	)

3829 
	#ADC_CR2_CONT_Pos
 (1U)

	)

3830 
	#ADC_CR2_CONT_Msk
 (0x1UL << 
ADC_CR2_CONT_Pos
√ã

	)

3831 
	#ADC_CR2_CONT
 
ADC_CR2_CONT_Msk


	)

3832 
	#ADC_CR2_CAL_Pos
 (2U)

	)

3833 
	#ADC_CR2_CAL_Msk
 (0x1UL << 
ADC_CR2_CAL_Pos
√ã

	)

3834 
	#ADC_CR2_CAL
 
ADC_CR2_CAL_Msk


	)

3835 
	#ADC_CR2_RSTCAL_Pos
 (3U)

	)

3836 
	#ADC_CR2_RSTCAL_Msk
 (0x1UL << 
ADC_CR2_RSTCAL_Pos
√ã

	)

3837 
	#ADC_CR2_RSTCAL
 
ADC_CR2_RSTCAL_Msk


	)

3838 
	#ADC_CR2_DMA_Pos
 (8U)

	)

3839 
	#ADC_CR2_DMA_Msk
 (0x1UL << 
ADC_CR2_DMA_Pos
√ã

	)

3840 
	#ADC_CR2_DMA
 
ADC_CR2_DMA_Msk


	)

3841 
	#ADC_CR2_ALIGN_Pos
 (11U)

	)

3842 
	#ADC_CR2_ALIGN_Msk
 (0x1UL << 
ADC_CR2_ALIGN_Pos
√ã

	)

3843 
	#ADC_CR2_ALIGN
 
ADC_CR2_ALIGN_Msk


	)

3845 
	#ADC_CR2_JEXTSEL_Pos
 (12U)

	)

3846 
	#ADC_CR2_JEXTSEL_Msk
 (0x7UL << 
ADC_CR2_JEXTSEL_Pos
√ã

	)

3847 
	#ADC_CR2_JEXTSEL
 
ADC_CR2_JEXTSEL_Msk


	)

3848 
	#ADC_CR2_JEXTSEL_0
 (0x1UL << 
ADC_CR2_JEXTSEL_Pos
√ã

	)

3849 
	#ADC_CR2_JEXTSEL_1
 (0x2UL << 
ADC_CR2_JEXTSEL_Pos
√ã

	)

3850 
	#ADC_CR2_JEXTSEL_2
 (0x4UL << 
ADC_CR2_JEXTSEL_Pos
√ã

	)

3852 
	#ADC_CR2_JEXTTRIG_Pos
 (15U)

	)

3853 
	#ADC_CR2_JEXTTRIG_Msk
 (0x1UL << 
ADC_CR2_JEXTTRIG_Pos
√ã

	)

3854 
	#ADC_CR2_JEXTTRIG
 
ADC_CR2_JEXTTRIG_Msk


	)

3856 
	#ADC_CR2_EXTSEL_Pos
 (17U)

	)

3857 
	#ADC_CR2_EXTSEL_Msk
 (0x7UL << 
ADC_CR2_EXTSEL_Pos
√ã

	)

3858 
	#ADC_CR2_EXTSEL
 
ADC_CR2_EXTSEL_Msk


	)

3859 
	#ADC_CR2_EXTSEL_0
 (0x1UL << 
ADC_CR2_EXTSEL_Pos
√ã

	)

3860 
	#ADC_CR2_EXTSEL_1
 (0x2UL << 
ADC_CR2_EXTSEL_Pos
√ã

	)

3861 
	#ADC_CR2_EXTSEL_2
 (0x4UL << 
ADC_CR2_EXTSEL_Pos
√ã

	)

3863 
	#ADC_CR2_EXTTRIG_Pos
 (20U)

	)

3864 
	#ADC_CR2_EXTTRIG_Msk
 (0x1UL << 
ADC_CR2_EXTTRIG_Pos
√ã

	)

3865 
	#ADC_CR2_EXTTRIG
 
ADC_CR2_EXTTRIG_Msk


	)

3866 
	#ADC_CR2_JSWSTART_Pos
 (21U)

	)

3867 
	#ADC_CR2_JSWSTART_Msk
 (0x1UL << 
ADC_CR2_JSWSTART_Pos
√ã

	)

3868 
	#ADC_CR2_JSWSTART
 
ADC_CR2_JSWSTART_Msk


	)

3869 
	#ADC_CR2_SWSTART_Pos
 (22U)

	)

3870 
	#ADC_CR2_SWSTART_Msk
 (0x1UL << 
ADC_CR2_SWSTART_Pos
√ã

	)

3871 
	#ADC_CR2_SWSTART
 
ADC_CR2_SWSTART_Msk


	)

3872 
	#ADC_CR2_TSVREFE_Pos
 (23U)

	)

3873 
	#ADC_CR2_TSVREFE_Msk
 (0x1UL << 
ADC_CR2_TSVREFE_Pos
√ã

	)

3874 
	#ADC_CR2_TSVREFE
 
ADC_CR2_TSVREFE_Msk


	)

3877 
	#ADC_SMPR1_SMP10_Pos
 (0U)

	)

3878 
	#ADC_SMPR1_SMP10_Msk
 (0x7UL << 
ADC_SMPR1_SMP10_Pos
√ã

	)

3879 
	#ADC_SMPR1_SMP10
 
ADC_SMPR1_SMP10_Msk


	)

3880 
	#ADC_SMPR1_SMP10_0
 (0x1UL << 
ADC_SMPR1_SMP10_Pos
√ã

	)

3881 
	#ADC_SMPR1_SMP10_1
 (0x2UL << 
ADC_SMPR1_SMP10_Pos
√ã

	)

3882 
	#ADC_SMPR1_SMP10_2
 (0x4UL << 
ADC_SMPR1_SMP10_Pos
√ã

	)

3884 
	#ADC_SMPR1_SMP11_Pos
 (3U)

	)

3885 
	#ADC_SMPR1_SMP11_Msk
 (0x7UL << 
ADC_SMPR1_SMP11_Pos
√ã

	)

3886 
	#ADC_SMPR1_SMP11
 
ADC_SMPR1_SMP11_Msk


	)

3887 
	#ADC_SMPR1_SMP11_0
 (0x1UL << 
ADC_SMPR1_SMP11_Pos
√ã

	)

3888 
	#ADC_SMPR1_SMP11_1
 (0x2UL << 
ADC_SMPR1_SMP11_Pos
√ã

	)

3889 
	#ADC_SMPR1_SMP11_2
 (0x4UL << 
ADC_SMPR1_SMP11_Pos
√ã

	)

3891 
	#ADC_SMPR1_SMP12_Pos
 (6U)

	)

3892 
	#ADC_SMPR1_SMP12_Msk
 (0x7UL << 
ADC_SMPR1_SMP12_Pos
√ã

	)

3893 
	#ADC_SMPR1_SMP12
 
ADC_SMPR1_SMP12_Msk


	)

3894 
	#ADC_SMPR1_SMP12_0
 (0x1UL << 
ADC_SMPR1_SMP12_Pos
√ã

	)

3895 
	#ADC_SMPR1_SMP12_1
 (0x2UL << 
ADC_SMPR1_SMP12_Pos
√ã

	)

3896 
	#ADC_SMPR1_SMP12_2
 (0x4UL << 
ADC_SMPR1_SMP12_Pos
√ã

	)

3898 
	#ADC_SMPR1_SMP13_Pos
 (9U)

	)

3899 
	#ADC_SMPR1_SMP13_Msk
 (0x7UL << 
ADC_SMPR1_SMP13_Pos
√ã

	)

3900 
	#ADC_SMPR1_SMP13
 
ADC_SMPR1_SMP13_Msk


	)

3901 
	#ADC_SMPR1_SMP13_0
 (0x1UL << 
ADC_SMPR1_SMP13_Pos
√ã

	)

3902 
	#ADC_SMPR1_SMP13_1
 (0x2UL << 
ADC_SMPR1_SMP13_Pos
√ã

	)

3903 
	#ADC_SMPR1_SMP13_2
 (0x4UL << 
ADC_SMPR1_SMP13_Pos
√ã

	)

3905 
	#ADC_SMPR1_SMP14_Pos
 (12U)

	)

3906 
	#ADC_SMPR1_SMP14_Msk
 (0x7UL << 
ADC_SMPR1_SMP14_Pos
√ã

	)

3907 
	#ADC_SMPR1_SMP14
 
ADC_SMPR1_SMP14_Msk


	)

3908 
	#ADC_SMPR1_SMP14_0
 (0x1UL << 
ADC_SMPR1_SMP14_Pos
√ã

	)

3909 
	#ADC_SMPR1_SMP14_1
 (0x2UL << 
ADC_SMPR1_SMP14_Pos
√ã

	)

3910 
	#ADC_SMPR1_SMP14_2
 (0x4UL << 
ADC_SMPR1_SMP14_Pos
√ã

	)

3912 
	#ADC_SMPR1_SMP15_Pos
 (15U)

	)

3913 
	#ADC_SMPR1_SMP15_Msk
 (0x7UL << 
ADC_SMPR1_SMP15_Pos
√ã

	)

3914 
	#ADC_SMPR1_SMP15
 
ADC_SMPR1_SMP15_Msk


	)

3915 
	#ADC_SMPR1_SMP15_0
 (0x1UL << 
ADC_SMPR1_SMP15_Pos
√ã

	)

3916 
	#ADC_SMPR1_SMP15_1
 (0x2UL << 
ADC_SMPR1_SMP15_Pos
√ã

	)

3917 
	#ADC_SMPR1_SMP15_2
 (0x4UL << 
ADC_SMPR1_SMP15_Pos
√ã

	)

3919 
	#ADC_SMPR1_SMP16_Pos
 (18U)

	)

3920 
	#ADC_SMPR1_SMP16_Msk
 (0x7UL << 
ADC_SMPR1_SMP16_Pos
√ã

	)

3921 
	#ADC_SMPR1_SMP16
 
ADC_SMPR1_SMP16_Msk


	)

3922 
	#ADC_SMPR1_SMP16_0
 (0x1UL << 
ADC_SMPR1_SMP16_Pos
√ã

	)

3923 
	#ADC_SMPR1_SMP16_1
 (0x2UL << 
ADC_SMPR1_SMP16_Pos
√ã

	)

3924 
	#ADC_SMPR1_SMP16_2
 (0x4UL << 
ADC_SMPR1_SMP16_Pos
√ã

	)

3926 
	#ADC_SMPR1_SMP17_Pos
 (21U)

	)

3927 
	#ADC_SMPR1_SMP17_Msk
 (0x7UL << 
ADC_SMPR1_SMP17_Pos
√ã

	)

3928 
	#ADC_SMPR1_SMP17
 
ADC_SMPR1_SMP17_Msk


	)

3929 
	#ADC_SMPR1_SMP17_0
 (0x1UL << 
ADC_SMPR1_SMP17_Pos
√ã

	)

3930 
	#ADC_SMPR1_SMP17_1
 (0x2UL << 
ADC_SMPR1_SMP17_Pos
√ã

	)

3931 
	#ADC_SMPR1_SMP17_2
 (0x4UL << 
ADC_SMPR1_SMP17_Pos
√ã

	)

3934 
	#ADC_SMPR2_SMP0_Pos
 (0U)

	)

3935 
	#ADC_SMPR2_SMP0_Msk
 (0x7UL << 
ADC_SMPR2_SMP0_Pos
√ã

	)

3936 
	#ADC_SMPR2_SMP0
 
ADC_SMPR2_SMP0_Msk


	)

3937 
	#ADC_SMPR2_SMP0_0
 (0x1UL << 
ADC_SMPR2_SMP0_Pos
√ã

	)

3938 
	#ADC_SMPR2_SMP0_1
 (0x2UL << 
ADC_SMPR2_SMP0_Pos
√ã

	)

3939 
	#ADC_SMPR2_SMP0_2
 (0x4UL << 
ADC_SMPR2_SMP0_Pos
√ã

	)

3941 
	#ADC_SMPR2_SMP1_Pos
 (3U)

	)

3942 
	#ADC_SMPR2_SMP1_Msk
 (0x7UL << 
ADC_SMPR2_SMP1_Pos
√ã

	)

3943 
	#ADC_SMPR2_SMP1
 
ADC_SMPR2_SMP1_Msk


	)

3944 
	#ADC_SMPR2_SMP1_0
 (0x1UL << 
ADC_SMPR2_SMP1_Pos
√ã

	)

3945 
	#ADC_SMPR2_SMP1_1
 (0x2UL << 
ADC_SMPR2_SMP1_Pos
√ã

	)

3946 
	#ADC_SMPR2_SMP1_2
 (0x4UL << 
ADC_SMPR2_SMP1_Pos
√ã

	)

3948 
	#ADC_SMPR2_SMP2_Pos
 (6U)

	)

3949 
	#ADC_SMPR2_SMP2_Msk
 (0x7UL << 
ADC_SMPR2_SMP2_Pos
√ã

	)

3950 
	#ADC_SMPR2_SMP2
 
ADC_SMPR2_SMP2_Msk


	)

3951 
	#ADC_SMPR2_SMP2_0
 (0x1UL << 
ADC_SMPR2_SMP2_Pos
√ã

	)

3952 
	#ADC_SMPR2_SMP2_1
 (0x2UL << 
ADC_SMPR2_SMP2_Pos
√ã

	)

3953 
	#ADC_SMPR2_SMP2_2
 (0x4UL << 
ADC_SMPR2_SMP2_Pos
√ã

	)

3955 
	#ADC_SMPR2_SMP3_Pos
 (9U)

	)

3956 
	#ADC_SMPR2_SMP3_Msk
 (0x7UL << 
ADC_SMPR2_SMP3_Pos
√ã

	)

3957 
	#ADC_SMPR2_SMP3
 
ADC_SMPR2_SMP3_Msk


	)

3958 
	#ADC_SMPR2_SMP3_0
 (0x1UL << 
ADC_SMPR2_SMP3_Pos
√ã

	)

3959 
	#ADC_SMPR2_SMP3_1
 (0x2UL << 
ADC_SMPR2_SMP3_Pos
√ã

	)

3960 
	#ADC_SMPR2_SMP3_2
 (0x4UL << 
ADC_SMPR2_SMP3_Pos
√ã

	)

3962 
	#ADC_SMPR2_SMP4_Pos
 (12U)

	)

3963 
	#ADC_SMPR2_SMP4_Msk
 (0x7UL << 
ADC_SMPR2_SMP4_Pos
√ã

	)

3964 
	#ADC_SMPR2_SMP4
 
ADC_SMPR2_SMP4_Msk


	)

3965 
	#ADC_SMPR2_SMP4_0
 (0x1UL << 
ADC_SMPR2_SMP4_Pos
√ã

	)

3966 
	#ADC_SMPR2_SMP4_1
 (0x2UL << 
ADC_SMPR2_SMP4_Pos
√ã

	)

3967 
	#ADC_SMPR2_SMP4_2
 (0x4UL << 
ADC_SMPR2_SMP4_Pos
√ã

	)

3969 
	#ADC_SMPR2_SMP5_Pos
 (15U)

	)

3970 
	#ADC_SMPR2_SMP5_Msk
 (0x7UL << 
ADC_SMPR2_SMP5_Pos
√ã

	)

3971 
	#ADC_SMPR2_SMP5
 
ADC_SMPR2_SMP5_Msk


	)

3972 
	#ADC_SMPR2_SMP5_0
 (0x1UL << 
ADC_SMPR2_SMP5_Pos
√ã

	)

3973 
	#ADC_SMPR2_SMP5_1
 (0x2UL << 
ADC_SMPR2_SMP5_Pos
√ã

	)

3974 
	#ADC_SMPR2_SMP5_2
 (0x4UL << 
ADC_SMPR2_SMP5_Pos
√ã

	)

3976 
	#ADC_SMPR2_SMP6_Pos
 (18U)

	)

3977 
	#ADC_SMPR2_SMP6_Msk
 (0x7UL << 
ADC_SMPR2_SMP6_Pos
√ã

	)

3978 
	#ADC_SMPR2_SMP6
 
ADC_SMPR2_SMP6_Msk


	)

3979 
	#ADC_SMPR2_SMP6_0
 (0x1UL << 
ADC_SMPR2_SMP6_Pos
√ã

	)

3980 
	#ADC_SMPR2_SMP6_1
 (0x2UL << 
ADC_SMPR2_SMP6_Pos
√ã

	)

3981 
	#ADC_SMPR2_SMP6_2
 (0x4UL << 
ADC_SMPR2_SMP6_Pos
√ã

	)

3983 
	#ADC_SMPR2_SMP7_Pos
 (21U)

	)

3984 
	#ADC_SMPR2_SMP7_Msk
 (0x7UL << 
ADC_SMPR2_SMP7_Pos
√ã

	)

3985 
	#ADC_SMPR2_SMP7
 
ADC_SMPR2_SMP7_Msk


	)

3986 
	#ADC_SMPR2_SMP7_0
 (0x1UL << 
ADC_SMPR2_SMP7_Pos
√ã

	)

3987 
	#ADC_SMPR2_SMP7_1
 (0x2UL << 
ADC_SMPR2_SMP7_Pos
√ã

	)

3988 
	#ADC_SMPR2_SMP7_2
 (0x4UL << 
ADC_SMPR2_SMP7_Pos
√ã

	)

3990 
	#ADC_SMPR2_SMP8_Pos
 (24U)

	)

3991 
	#ADC_SMPR2_SMP8_Msk
 (0x7UL << 
ADC_SMPR2_SMP8_Pos
√ã

	)

3992 
	#ADC_SMPR2_SMP8
 
ADC_SMPR2_SMP8_Msk


	)

3993 
	#ADC_SMPR2_SMP8_0
 (0x1UL << 
ADC_SMPR2_SMP8_Pos
√ã

	)

3994 
	#ADC_SMPR2_SMP8_1
 (0x2UL << 
ADC_SMPR2_SMP8_Pos
√ã

	)

3995 
	#ADC_SMPR2_SMP8_2
 (0x4UL << 
ADC_SMPR2_SMP8_Pos
√ã

	)

3997 
	#ADC_SMPR2_SMP9_Pos
 (27U)

	)

3998 
	#ADC_SMPR2_SMP9_Msk
 (0x7UL << 
ADC_SMPR2_SMP9_Pos
√ã

	)

3999 
	#ADC_SMPR2_SMP9
 
ADC_SMPR2_SMP9_Msk


	)

4000 
	#ADC_SMPR2_SMP9_0
 (0x1UL << 
ADC_SMPR2_SMP9_Pos
√ã

	)

4001 
	#ADC_SMPR2_SMP9_1
 (0x2UL << 
ADC_SMPR2_SMP9_Pos
√ã

	)

4002 
	#ADC_SMPR2_SMP9_2
 (0x4UL << 
ADC_SMPR2_SMP9_Pos
√ã

	)

4005 
	#ADC_JOFR1_JOFFSET1_Pos
 (0U)

	)

4006 
	#ADC_JOFR1_JOFFSET1_Msk
 (0xFFFUL << 
ADC_JOFR1_JOFFSET1_Pos
√ã

	)

4007 
	#ADC_JOFR1_JOFFSET1
 
ADC_JOFR1_JOFFSET1_Msk


	)

4010 
	#ADC_JOFR2_JOFFSET2_Pos
 (0U)

	)

4011 
	#ADC_JOFR2_JOFFSET2_Msk
 (0xFFFUL << 
ADC_JOFR2_JOFFSET2_Pos
√ã

	)

4012 
	#ADC_JOFR2_JOFFSET2
 
ADC_JOFR2_JOFFSET2_Msk


	)

4015 
	#ADC_JOFR3_JOFFSET3_Pos
 (0U)

	)

4016 
	#ADC_JOFR3_JOFFSET3_Msk
 (0xFFFUL << 
ADC_JOFR3_JOFFSET3_Pos
√ã

	)

4017 
	#ADC_JOFR3_JOFFSET3
 
ADC_JOFR3_JOFFSET3_Msk


	)

4020 
	#ADC_JOFR4_JOFFSET4_Pos
 (0U)

	)

4021 
	#ADC_JOFR4_JOFFSET4_Msk
 (0xFFFUL << 
ADC_JOFR4_JOFFSET4_Pos
√ã

	)

4022 
	#ADC_JOFR4_JOFFSET4
 
ADC_JOFR4_JOFFSET4_Msk


	)

4025 
	#ADC_HTR_HT_Pos
 (0U)

	)

4026 
	#ADC_HTR_HT_Msk
 (0xFFFUL << 
ADC_HTR_HT_Pos
√ã

	)

4027 
	#ADC_HTR_HT
 
ADC_HTR_HT_Msk


	)

4030 
	#ADC_LTR_LT_Pos
 (0U)

	)

4031 
	#ADC_LTR_LT_Msk
 (0xFFFUL << 
ADC_LTR_LT_Pos
√ã

	)

4032 
	#ADC_LTR_LT
 
ADC_LTR_LT_Msk


	)

4035 
	#ADC_SQR1_SQ13_Pos
 (0U)

	)

4036 
	#ADC_SQR1_SQ13_Msk
 (0x1FUL << 
ADC_SQR1_SQ13_Pos
√ã

	)

4037 
	#ADC_SQR1_SQ13
 
ADC_SQR1_SQ13_Msk


	)

4038 
	#ADC_SQR1_SQ13_0
 (0x01UL << 
ADC_SQR1_SQ13_Pos
√ã

	)

4039 
	#ADC_SQR1_SQ13_1
 (0x02UL << 
ADC_SQR1_SQ13_Pos
√ã

	)

4040 
	#ADC_SQR1_SQ13_2
 (0x04UL << 
ADC_SQR1_SQ13_Pos
√ã

	)

4041 
	#ADC_SQR1_SQ13_3
 (0x08UL << 
ADC_SQR1_SQ13_Pos
√ã

	)

4042 
	#ADC_SQR1_SQ13_4
 (0x10UL << 
ADC_SQR1_SQ13_Pos
√ã

	)

4044 
	#ADC_SQR1_SQ14_Pos
 (5U)

	)

4045 
	#ADC_SQR1_SQ14_Msk
 (0x1FUL << 
ADC_SQR1_SQ14_Pos
√ã

	)

4046 
	#ADC_SQR1_SQ14
 
ADC_SQR1_SQ14_Msk


	)

4047 
	#ADC_SQR1_SQ14_0
 (0x01UL << 
ADC_SQR1_SQ14_Pos
√ã

	)

4048 
	#ADC_SQR1_SQ14_1
 (0x02UL << 
ADC_SQR1_SQ14_Pos
√ã

	)

4049 
	#ADC_SQR1_SQ14_2
 (0x04UL << 
ADC_SQR1_SQ14_Pos
√ã

	)

4050 
	#ADC_SQR1_SQ14_3
 (0x08UL << 
ADC_SQR1_SQ14_Pos
√ã

	)

4051 
	#ADC_SQR1_SQ14_4
 (0x10UL << 
ADC_SQR1_SQ14_Pos
√ã

	)

4053 
	#ADC_SQR1_SQ15_Pos
 (10U)

	)

4054 
	#ADC_SQR1_SQ15_Msk
 (0x1FUL << 
ADC_SQR1_SQ15_Pos
√ã

	)

4055 
	#ADC_SQR1_SQ15
 
ADC_SQR1_SQ15_Msk


	)

4056 
	#ADC_SQR1_SQ15_0
 (0x01UL << 
ADC_SQR1_SQ15_Pos
√ã

	)

4057 
	#ADC_SQR1_SQ15_1
 (0x02UL << 
ADC_SQR1_SQ15_Pos
√ã

	)

4058 
	#ADC_SQR1_SQ15_2
 (0x04UL << 
ADC_SQR1_SQ15_Pos
√ã

	)

4059 
	#ADC_SQR1_SQ15_3
 (0x08UL << 
ADC_SQR1_SQ15_Pos
√ã

	)

4060 
	#ADC_SQR1_SQ15_4
 (0x10UL << 
ADC_SQR1_SQ15_Pos
√ã

	)

4062 
	#ADC_SQR1_SQ16_Pos
 (15U)

	)

4063 
	#ADC_SQR1_SQ16_Msk
 (0x1FUL << 
ADC_SQR1_SQ16_Pos
√ã

	)

4064 
	#ADC_SQR1_SQ16
 
ADC_SQR1_SQ16_Msk


	)

4065 
	#ADC_SQR1_SQ16_0
 (0x01UL << 
ADC_SQR1_SQ16_Pos
√ã

	)

4066 
	#ADC_SQR1_SQ16_1
 (0x02UL << 
ADC_SQR1_SQ16_Pos
√ã

	)

4067 
	#ADC_SQR1_SQ16_2
 (0x04UL << 
ADC_SQR1_SQ16_Pos
√ã

	)

4068 
	#ADC_SQR1_SQ16_3
 (0x08UL << 
ADC_SQR1_SQ16_Pos
√ã

	)

4069 
	#ADC_SQR1_SQ16_4
 (0x10UL << 
ADC_SQR1_SQ16_Pos
√ã

	)

4071 
	#ADC_SQR1_L_Pos
 (20U)

	)

4072 
	#ADC_SQR1_L_Msk
 (0xFUL << 
ADC_SQR1_L_Pos
√ã

	)

4073 
	#ADC_SQR1_L
 
ADC_SQR1_L_Msk


	)

4074 
	#ADC_SQR1_L_0
 (0x1UL << 
ADC_SQR1_L_Pos
√ã

	)

4075 
	#ADC_SQR1_L_1
 (0x2UL << 
ADC_SQR1_L_Pos
√ã

	)

4076 
	#ADC_SQR1_L_2
 (0x4UL << 
ADC_SQR1_L_Pos
√ã

	)

4077 
	#ADC_SQR1_L_3
 (0x8UL << 
ADC_SQR1_L_Pos
√ã

	)

4080 
	#ADC_SQR2_SQ7_Pos
 (0U)

	)

4081 
	#ADC_SQR2_SQ7_Msk
 (0x1FUL << 
ADC_SQR2_SQ7_Pos
√ã

	)

4082 
	#ADC_SQR2_SQ7
 
ADC_SQR2_SQ7_Msk


	)

4083 
	#ADC_SQR2_SQ7_0
 (0x01UL << 
ADC_SQR2_SQ7_Pos
√ã

	)

4084 
	#ADC_SQR2_SQ7_1
 (0x02UL << 
ADC_SQR2_SQ7_Pos
√ã

	)

4085 
	#ADC_SQR2_SQ7_2
 (0x04UL << 
ADC_SQR2_SQ7_Pos
√ã

	)

4086 
	#ADC_SQR2_SQ7_3
 (0x08UL << 
ADC_SQR2_SQ7_Pos
√ã

	)

4087 
	#ADC_SQR2_SQ7_4
 (0x10UL << 
ADC_SQR2_SQ7_Pos
√ã

	)

4089 
	#ADC_SQR2_SQ8_Pos
 (5U)

	)

4090 
	#ADC_SQR2_SQ8_Msk
 (0x1FUL << 
ADC_SQR2_SQ8_Pos
√ã

	)

4091 
	#ADC_SQR2_SQ8
 
ADC_SQR2_SQ8_Msk


	)

4092 
	#ADC_SQR2_SQ8_0
 (0x01UL << 
ADC_SQR2_SQ8_Pos
√ã

	)

4093 
	#ADC_SQR2_SQ8_1
 (0x02UL << 
ADC_SQR2_SQ8_Pos
√ã

	)

4094 
	#ADC_SQR2_SQ8_2
 (0x04UL << 
ADC_SQR2_SQ8_Pos
√ã

	)

4095 
	#ADC_SQR2_SQ8_3
 (0x08UL << 
ADC_SQR2_SQ8_Pos
√ã

	)

4096 
	#ADC_SQR2_SQ8_4
 (0x10UL << 
ADC_SQR2_SQ8_Pos
√ã

	)

4098 
	#ADC_SQR2_SQ9_Pos
 (10U)

	)

4099 
	#ADC_SQR2_SQ9_Msk
 (0x1FUL << 
ADC_SQR2_SQ9_Pos
√ã

	)

4100 
	#ADC_SQR2_SQ9
 
ADC_SQR2_SQ9_Msk


	)

4101 
	#ADC_SQR2_SQ9_0
 (0x01UL << 
ADC_SQR2_SQ9_Pos
√ã

	)

4102 
	#ADC_SQR2_SQ9_1
 (0x02UL << 
ADC_SQR2_SQ9_Pos
√ã

	)

4103 
	#ADC_SQR2_SQ9_2
 (0x04UL << 
ADC_SQR2_SQ9_Pos
√ã

	)

4104 
	#ADC_SQR2_SQ9_3
 (0x08UL << 
ADC_SQR2_SQ9_Pos
√ã

	)

4105 
	#ADC_SQR2_SQ9_4
 (0x10UL << 
ADC_SQR2_SQ9_Pos
√ã

	)

4107 
	#ADC_SQR2_SQ10_Pos
 (15U)

	)

4108 
	#ADC_SQR2_SQ10_Msk
 (0x1FUL << 
ADC_SQR2_SQ10_Pos
√ã

	)

4109 
	#ADC_SQR2_SQ10
 
ADC_SQR2_SQ10_Msk


	)

4110 
	#ADC_SQR2_SQ10_0
 (0x01UL << 
ADC_SQR2_SQ10_Pos
√ã

	)

4111 
	#ADC_SQR2_SQ10_1
 (0x02UL << 
ADC_SQR2_SQ10_Pos
√ã

	)

4112 
	#ADC_SQR2_SQ10_2
 (0x04UL << 
ADC_SQR2_SQ10_Pos
√ã

	)

4113 
	#ADC_SQR2_SQ10_3
 (0x08UL << 
ADC_SQR2_SQ10_Pos
√ã

	)

4114 
	#ADC_SQR2_SQ10_4
 (0x10UL << 
ADC_SQR2_SQ10_Pos
√ã

	)

4116 
	#ADC_SQR2_SQ11_Pos
 (20U)

	)

4117 
	#ADC_SQR2_SQ11_Msk
 (0x1FUL << 
ADC_SQR2_SQ11_Pos
√ã

	)

4118 
	#ADC_SQR2_SQ11
 
ADC_SQR2_SQ11_Msk


	)

4119 
	#ADC_SQR2_SQ11_0
 (0x01UL << 
ADC_SQR2_SQ11_Pos
√ã

	)

4120 
	#ADC_SQR2_SQ11_1
 (0x02UL << 
ADC_SQR2_SQ11_Pos
√ã

	)

4121 
	#ADC_SQR2_SQ11_2
 (0x04UL << 
ADC_SQR2_SQ11_Pos
√ã

	)

4122 
	#ADC_SQR2_SQ11_3
 (0x08UL << 
ADC_SQR2_SQ11_Pos
√ã

	)

4123 
	#ADC_SQR2_SQ11_4
 (0x10UL << 
ADC_SQR2_SQ11_Pos
√ã

	)

4125 
	#ADC_SQR2_SQ12_Pos
 (25U)

	)

4126 
	#ADC_SQR2_SQ12_Msk
 (0x1FUL << 
ADC_SQR2_SQ12_Pos
√ã

	)

4127 
	#ADC_SQR2_SQ12
 
ADC_SQR2_SQ12_Msk


	)

4128 
	#ADC_SQR2_SQ12_0
 (0x01UL << 
ADC_SQR2_SQ12_Pos
√ã

	)

4129 
	#ADC_SQR2_SQ12_1
 (0x02UL << 
ADC_SQR2_SQ12_Pos
√ã

	)

4130 
	#ADC_SQR2_SQ12_2
 (0x04UL << 
ADC_SQR2_SQ12_Pos
√ã

	)

4131 
	#ADC_SQR2_SQ12_3
 (0x08UL << 
ADC_SQR2_SQ12_Pos
√ã

	)

4132 
	#ADC_SQR2_SQ12_4
 (0x10UL << 
ADC_SQR2_SQ12_Pos
√ã

	)

4135 
	#ADC_SQR3_SQ1_Pos
 (0U)

	)

4136 
	#ADC_SQR3_SQ1_Msk
 (0x1FUL << 
ADC_SQR3_SQ1_Pos
√ã

	)

4137 
	#ADC_SQR3_SQ1
 
ADC_SQR3_SQ1_Msk


	)

4138 
	#ADC_SQR3_SQ1_0
 (0x01UL << 
ADC_SQR3_SQ1_Pos
√ã

	)

4139 
	#ADC_SQR3_SQ1_1
 (0x02UL << 
ADC_SQR3_SQ1_Pos
√ã

	)

4140 
	#ADC_SQR3_SQ1_2
 (0x04UL << 
ADC_SQR3_SQ1_Pos
√ã

	)

4141 
	#ADC_SQR3_SQ1_3
 (0x08UL << 
ADC_SQR3_SQ1_Pos
√ã

	)

4142 
	#ADC_SQR3_SQ1_4
 (0x10UL << 
ADC_SQR3_SQ1_Pos
√ã

	)

4144 
	#ADC_SQR3_SQ2_Pos
 (5U)

	)

4145 
	#ADC_SQR3_SQ2_Msk
 (0x1FUL << 
ADC_SQR3_SQ2_Pos
√ã

	)

4146 
	#ADC_SQR3_SQ2
 
ADC_SQR3_SQ2_Msk


	)

4147 
	#ADC_SQR3_SQ2_0
 (0x01UL << 
ADC_SQR3_SQ2_Pos
√ã

	)

4148 
	#ADC_SQR3_SQ2_1
 (0x02UL << 
ADC_SQR3_SQ2_Pos
√ã

	)

4149 
	#ADC_SQR3_SQ2_2
 (0x04UL << 
ADC_SQR3_SQ2_Pos
√ã

	)

4150 
	#ADC_SQR3_SQ2_3
 (0x08UL << 
ADC_SQR3_SQ2_Pos
√ã

	)

4151 
	#ADC_SQR3_SQ2_4
 (0x10UL << 
ADC_SQR3_SQ2_Pos
√ã

	)

4153 
	#ADC_SQR3_SQ3_Pos
 (10U)

	)

4154 
	#ADC_SQR3_SQ3_Msk
 (0x1FUL << 
ADC_SQR3_SQ3_Pos
√ã

	)

4155 
	#ADC_SQR3_SQ3
 
ADC_SQR3_SQ3_Msk


	)

4156 
	#ADC_SQR3_SQ3_0
 (0x01UL << 
ADC_SQR3_SQ3_Pos
√ã

	)

4157 
	#ADC_SQR3_SQ3_1
 (0x02UL << 
ADC_SQR3_SQ3_Pos
√ã

	)

4158 
	#ADC_SQR3_SQ3_2
 (0x04UL << 
ADC_SQR3_SQ3_Pos
√ã

	)

4159 
	#ADC_SQR3_SQ3_3
 (0x08UL << 
ADC_SQR3_SQ3_Pos
√ã

	)

4160 
	#ADC_SQR3_SQ3_4
 (0x10UL << 
ADC_SQR3_SQ3_Pos
√ã

	)

4162 
	#ADC_SQR3_SQ4_Pos
 (15U)

	)

4163 
	#ADC_SQR3_SQ4_Msk
 (0x1FUL << 
ADC_SQR3_SQ4_Pos
√ã

	)

4164 
	#ADC_SQR3_SQ4
 
ADC_SQR3_SQ4_Msk


	)

4165 
	#ADC_SQR3_SQ4_0
 (0x01UL << 
ADC_SQR3_SQ4_Pos
√ã

	)

4166 
	#ADC_SQR3_SQ4_1
 (0x02UL << 
ADC_SQR3_SQ4_Pos
√ã

	)

4167 
	#ADC_SQR3_SQ4_2
 (0x04UL << 
ADC_SQR3_SQ4_Pos
√ã

	)

4168 
	#ADC_SQR3_SQ4_3
 (0x08UL << 
ADC_SQR3_SQ4_Pos
√ã

	)

4169 
	#ADC_SQR3_SQ4_4
 (0x10UL << 
ADC_SQR3_SQ4_Pos
√ã

	)

4171 
	#ADC_SQR3_SQ5_Pos
 (20U)

	)

4172 
	#ADC_SQR3_SQ5_Msk
 (0x1FUL << 
ADC_SQR3_SQ5_Pos
√ã

	)

4173 
	#ADC_SQR3_SQ5
 
ADC_SQR3_SQ5_Msk


	)

4174 
	#ADC_SQR3_SQ5_0
 (0x01UL << 
ADC_SQR3_SQ5_Pos
√ã

	)

4175 
	#ADC_SQR3_SQ5_1
 (0x02UL << 
ADC_SQR3_SQ5_Pos
√ã

	)

4176 
	#ADC_SQR3_SQ5_2
 (0x04UL << 
ADC_SQR3_SQ5_Pos
√ã

	)

4177 
	#ADC_SQR3_SQ5_3
 (0x08UL << 
ADC_SQR3_SQ5_Pos
√ã

	)

4178 
	#ADC_SQR3_SQ5_4
 (0x10UL << 
ADC_SQR3_SQ5_Pos
√ã

	)

4180 
	#ADC_SQR3_SQ6_Pos
 (25U)

	)

4181 
	#ADC_SQR3_SQ6_Msk
 (0x1FUL << 
ADC_SQR3_SQ6_Pos
√ã

	)

4182 
	#ADC_SQR3_SQ6
 
ADC_SQR3_SQ6_Msk


	)

4183 
	#ADC_SQR3_SQ6_0
 (0x01UL << 
ADC_SQR3_SQ6_Pos
√ã

	)

4184 
	#ADC_SQR3_SQ6_1
 (0x02UL << 
ADC_SQR3_SQ6_Pos
√ã

	)

4185 
	#ADC_SQR3_SQ6_2
 (0x04UL << 
ADC_SQR3_SQ6_Pos
√ã

	)

4186 
	#ADC_SQR3_SQ6_3
 (0x08UL << 
ADC_SQR3_SQ6_Pos
√ã

	)

4187 
	#ADC_SQR3_SQ6_4
 (0x10UL << 
ADC_SQR3_SQ6_Pos
√ã

	)

4190 
	#ADC_JSQR_JSQ1_Pos
 (0U)

	)

4191 
	#ADC_JSQR_JSQ1_Msk
 (0x1FUL << 
ADC_JSQR_JSQ1_Pos
√ã

	)

4192 
	#ADC_JSQR_JSQ1
 
ADC_JSQR_JSQ1_Msk


	)

4193 
	#ADC_JSQR_JSQ1_0
 (0x01UL << 
ADC_JSQR_JSQ1_Pos
√ã

	)

4194 
	#ADC_JSQR_JSQ1_1
 (0x02UL << 
ADC_JSQR_JSQ1_Pos
√ã

	)

4195 
	#ADC_JSQR_JSQ1_2
 (0x04UL << 
ADC_JSQR_JSQ1_Pos
√ã

	)

4196 
	#ADC_JSQR_JSQ1_3
 (0x08UL << 
ADC_JSQR_JSQ1_Pos
√ã

	)

4197 
	#ADC_JSQR_JSQ1_4
 (0x10UL << 
ADC_JSQR_JSQ1_Pos
√ã

	)

4199 
	#ADC_JSQR_JSQ2_Pos
 (5U)

	)

4200 
	#ADC_JSQR_JSQ2_Msk
 (0x1FUL << 
ADC_JSQR_JSQ2_Pos
√ã

	)

4201 
	#ADC_JSQR_JSQ2
 
ADC_JSQR_JSQ2_Msk


	)

4202 
	#ADC_JSQR_JSQ2_0
 (0x01UL << 
ADC_JSQR_JSQ2_Pos
√ã

	)

4203 
	#ADC_JSQR_JSQ2_1
 (0x02UL << 
ADC_JSQR_JSQ2_Pos
√ã

	)

4204 
	#ADC_JSQR_JSQ2_2
 (0x04UL << 
ADC_JSQR_JSQ2_Pos
√ã

	)

4205 
	#ADC_JSQR_JSQ2_3
 (0x08UL << 
ADC_JSQR_JSQ2_Pos
√ã

	)

4206 
	#ADC_JSQR_JSQ2_4
 (0x10UL << 
ADC_JSQR_JSQ2_Pos
√ã

	)

4208 
	#ADC_JSQR_JSQ3_Pos
 (10U)

	)

4209 
	#ADC_JSQR_JSQ3_Msk
 (0x1FUL << 
ADC_JSQR_JSQ3_Pos
√ã

	)

4210 
	#ADC_JSQR_JSQ3
 
ADC_JSQR_JSQ3_Msk


	)

4211 
	#ADC_JSQR_JSQ3_0
 (0x01UL << 
ADC_JSQR_JSQ3_Pos
√ã

	)

4212 
	#ADC_JSQR_JSQ3_1
 (0x02UL << 
ADC_JSQR_JSQ3_Pos
√ã

	)

4213 
	#ADC_JSQR_JSQ3_2
 (0x04UL << 
ADC_JSQR_JSQ3_Pos
√ã

	)

4214 
	#ADC_JSQR_JSQ3_3
 (0x08UL << 
ADC_JSQR_JSQ3_Pos
√ã

	)

4215 
	#ADC_JSQR_JSQ3_4
 (0x10UL << 
ADC_JSQR_JSQ3_Pos
√ã

	)

4217 
	#ADC_JSQR_JSQ4_Pos
 (15U)

	)

4218 
	#ADC_JSQR_JSQ4_Msk
 (0x1FUL << 
ADC_JSQR_JSQ4_Pos
√ã

	)

4219 
	#ADC_JSQR_JSQ4
 
ADC_JSQR_JSQ4_Msk


	)

4220 
	#ADC_JSQR_JSQ4_0
 (0x01UL << 
ADC_JSQR_JSQ4_Pos
√ã

	)

4221 
	#ADC_JSQR_JSQ4_1
 (0x02UL << 
ADC_JSQR_JSQ4_Pos
√ã

	)

4222 
	#ADC_JSQR_JSQ4_2
 (0x04UL << 
ADC_JSQR_JSQ4_Pos
√ã

	)

4223 
	#ADC_JSQR_JSQ4_3
 (0x08UL << 
ADC_JSQR_JSQ4_Pos
√ã

	)

4224 
	#ADC_JSQR_JSQ4_4
 (0x10UL << 
ADC_JSQR_JSQ4_Pos
√ã

	)

4226 
	#ADC_JSQR_JL_Pos
 (20U)

	)

4227 
	#ADC_JSQR_JL_Msk
 (0x3UL << 
ADC_JSQR_JL_Pos
√ã

	)

4228 
	#ADC_JSQR_JL
 
ADC_JSQR_JL_Msk


	)

4229 
	#ADC_JSQR_JL_0
 (0x1UL << 
ADC_JSQR_JL_Pos
√ã

	)

4230 
	#ADC_JSQR_JL_1
 (0x2UL << 
ADC_JSQR_JL_Pos
√ã

	)

4233 
	#ADC_JDR1_JDATA_Pos
 (0U)

	)

4234 
	#ADC_JDR1_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR1_JDATA_Pos
√ã

	)

4235 
	#ADC_JDR1_JDATA
 
ADC_JDR1_JDATA_Msk


	)

4238 
	#ADC_JDR2_JDATA_Pos
 (0U)

	)

4239 
	#ADC_JDR2_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR2_JDATA_Pos
√ã

	)

4240 
	#ADC_JDR2_JDATA
 
ADC_JDR2_JDATA_Msk


	)

4243 
	#ADC_JDR3_JDATA_Pos
 (0U)

	)

4244 
	#ADC_JDR3_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR3_JDATA_Pos
√ã

	)

4245 
	#ADC_JDR3_JDATA
 
ADC_JDR3_JDATA_Msk


	)

4248 
	#ADC_JDR4_JDATA_Pos
 (0U)

	)

4249 
	#ADC_JDR4_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR4_JDATA_Pos
√ã

	)

4250 
	#ADC_JDR4_JDATA
 
ADC_JDR4_JDATA_Msk


	)

4253 
	#ADC_DR_DATA_Pos
 (0U)

	)

4254 
	#ADC_DR_DATA_Msk
 (0xFFFFUL << 
ADC_DR_DATA_Pos
√ã

	)

4255 
	#ADC_DR_DATA
 
ADC_DR_DATA_Msk


	)

4256 
	#ADC_DR_ADC2DATA_Pos
 (16U)

	)

4257 
	#ADC_DR_ADC2DATA_Msk
 (0xFFFFUL << 
ADC_DR_ADC2DATA_Pos
√ã

	)

4258 
	#ADC_DR_ADC2DATA
 
ADC_DR_ADC2DATA_Msk


	)

4266 
	#DAC_CR_EN1_Pos
 (0U)

	)

4267 
	#DAC_CR_EN1_Msk
 (0x1UL << 
DAC_CR_EN1_Pos
√ã

	)

4268 
	#DAC_CR_EN1
 
DAC_CR_EN1_Msk


	)

4269 
	#DAC_CR_BOFF1_Pos
 (1U)

	)

4270 
	#DAC_CR_BOFF1_Msk
 (0x1UL << 
DAC_CR_BOFF1_Pos
√ã

	)

4271 
	#DAC_CR_BOFF1
 
DAC_CR_BOFF1_Msk


	)

4272 
	#DAC_CR_TEN1_Pos
 (2U)

	)

4273 
	#DAC_CR_TEN1_Msk
 (0x1UL << 
DAC_CR_TEN1_Pos
√ã

	)

4274 
	#DAC_CR_TEN1
 
DAC_CR_TEN1_Msk


	)

4276 
	#DAC_CR_TSEL1_Pos
 (3U)

	)

4277 
	#DAC_CR_TSEL1_Msk
 (0x7UL << 
DAC_CR_TSEL1_Pos
√ã

	)

4278 
	#DAC_CR_TSEL1
 
DAC_CR_TSEL1_Msk


	)

4279 
	#DAC_CR_TSEL1_0
 (0x1UL << 
DAC_CR_TSEL1_Pos
√ã

	)

4280 
	#DAC_CR_TSEL1_1
 (0x2UL << 
DAC_CR_TSEL1_Pos
√ã

	)

4281 
	#DAC_CR_TSEL1_2
 (0x4UL << 
DAC_CR_TSEL1_Pos
√ã

	)

4283 
	#DAC_CR_WAVE1_Pos
 (6U)

	)

4284 
	#DAC_CR_WAVE1_Msk
 (0x3UL << 
DAC_CR_WAVE1_Pos
√ã

	)

4285 
	#DAC_CR_WAVE1
 
DAC_CR_WAVE1_Msk


	)

4286 
	#DAC_CR_WAVE1_0
 (0x1UL << 
DAC_CR_WAVE1_Pos
√ã

	)

4287 
	#DAC_CR_WAVE1_1
 (0x2UL << 
DAC_CR_WAVE1_Pos
√ã

	)

4289 
	#DAC_CR_MAMP1_Pos
 (8U)

	)

4290 
	#DAC_CR_MAMP1_Msk
 (0xFUL << 
DAC_CR_MAMP1_Pos
√ã

	)

4291 
	#DAC_CR_MAMP1
 
DAC_CR_MAMP1_Msk


	)

4292 
	#DAC_CR_MAMP1_0
 (0x1UL << 
DAC_CR_MAMP1_Pos
√ã

	)

4293 
	#DAC_CR_MAMP1_1
 (0x2UL << 
DAC_CR_MAMP1_Pos
√ã

	)

4294 
	#DAC_CR_MAMP1_2
 (0x4UL << 
DAC_CR_MAMP1_Pos
√ã

	)

4295 
	#DAC_CR_MAMP1_3
 (0x8UL << 
DAC_CR_MAMP1_Pos
√ã

	)

4297 
	#DAC_CR_DMAEN1_Pos
 (12U)

	)

4298 
	#DAC_CR_DMAEN1_Msk
 (0x1UL << 
DAC_CR_DMAEN1_Pos
√ã

	)

4299 
	#DAC_CR_DMAEN1
 
DAC_CR_DMAEN1_Msk


	)

4300 
	#DAC_CR_EN2_Pos
 (16U)

	)

4301 
	#DAC_CR_EN2_Msk
 (0x1UL << 
DAC_CR_EN2_Pos
√ã

	)

4302 
	#DAC_CR_EN2
 
DAC_CR_EN2_Msk


	)

4303 
	#DAC_CR_BOFF2_Pos
 (17U)

	)

4304 
	#DAC_CR_BOFF2_Msk
 (0x1UL << 
DAC_CR_BOFF2_Pos
√ã

	)

4305 
	#DAC_CR_BOFF2
 
DAC_CR_BOFF2_Msk


	)

4306 
	#DAC_CR_TEN2_Pos
 (18U)

	)

4307 
	#DAC_CR_TEN2_Msk
 (0x1UL << 
DAC_CR_TEN2_Pos
√ã

	)

4308 
	#DAC_CR_TEN2
 
DAC_CR_TEN2_Msk


	)

4310 
	#DAC_CR_TSEL2_Pos
 (19U)

	)

4311 
	#DAC_CR_TSEL2_Msk
 (0x7UL << 
DAC_CR_TSEL2_Pos
√ã

	)

4312 
	#DAC_CR_TSEL2
 
DAC_CR_TSEL2_Msk


	)

4313 
	#DAC_CR_TSEL2_0
 (0x1UL << 
DAC_CR_TSEL2_Pos
√ã

	)

4314 
	#DAC_CR_TSEL2_1
 (0x2UL << 
DAC_CR_TSEL2_Pos
√ã

	)

4315 
	#DAC_CR_TSEL2_2
 (0x4UL << 
DAC_CR_TSEL2_Pos
√ã

	)

4317 
	#DAC_CR_WAVE2_Pos
 (22U)

	)

4318 
	#DAC_CR_WAVE2_Msk
 (0x3UL << 
DAC_CR_WAVE2_Pos
√ã

	)

4319 
	#DAC_CR_WAVE2
 
DAC_CR_WAVE2_Msk


	)

4320 
	#DAC_CR_WAVE2_0
 (0x1UL << 
DAC_CR_WAVE2_Pos
√ã

	)

4321 
	#DAC_CR_WAVE2_1
 (0x2UL << 
DAC_CR_WAVE2_Pos
√ã

	)

4323 
	#DAC_CR_MAMP2_Pos
 (24U)

	)

4324 
	#DAC_CR_MAMP2_Msk
 (0xFUL << 
DAC_CR_MAMP2_Pos
√ã

	)

4325 
	#DAC_CR_MAMP2
 
DAC_CR_MAMP2_Msk


	)

4326 
	#DAC_CR_MAMP2_0
 (0x1UL << 
DAC_CR_MAMP2_Pos
√ã

	)

4327 
	#DAC_CR_MAMP2_1
 (0x2UL << 
DAC_CR_MAMP2_Pos
√ã

	)

4328 
	#DAC_CR_MAMP2_2
 (0x4UL << 
DAC_CR_MAMP2_Pos
√ã

	)

4329 
	#DAC_CR_MAMP2_3
 (0x8UL << 
DAC_CR_MAMP2_Pos
√ã

	)

4331 
	#DAC_CR_DMAEN2_Pos
 (28U)

	)

4332 
	#DAC_CR_DMAEN2_Msk
 (0x1UL << 
DAC_CR_DMAEN2_Pos
√ã

	)

4333 
	#DAC_CR_DMAEN2
 
DAC_CR_DMAEN2_Msk


	)

4337 
	#DAC_SWTRIGR_SWTRIG1_Pos
 (0U)

	)

4338 
	#DAC_SWTRIGR_SWTRIG1_Msk
 (0x1UL << 
DAC_SWTRIGR_SWTRIG1_Pos
√ã

	)

4339 
	#DAC_SWTRIGR_SWTRIG1
 
DAC_SWTRIGR_SWTRIG1_Msk


	)

4340 
	#DAC_SWTRIGR_SWTRIG2_Pos
 (1U)

	)

4341 
	#DAC_SWTRIGR_SWTRIG2_Msk
 (0x1UL << 
DAC_SWTRIGR_SWTRIG2_Pos
√ã

	)

4342 
	#DAC_SWTRIGR_SWTRIG2
 
DAC_SWTRIGR_SWTRIG2_Msk


	)

4345 
	#DAC_DHR12R1_DACC1DHR_Pos
 (0U)

	)

4346 
	#DAC_DHR12R1_DACC1DHR_Msk
 (0xFFFUL << 
DAC_DHR12R1_DACC1DHR_Pos
√ã

	)

4347 
	#DAC_DHR12R1_DACC1DHR
 
DAC_DHR12R1_DACC1DHR_Msk


	)

4350 
	#DAC_DHR12L1_DACC1DHR_Pos
 (4U)

	)

4351 
	#DAC_DHR12L1_DACC1DHR_Msk
 (0xFFFUL << 
DAC_DHR12L1_DACC1DHR_Pos
√ã

	)

4352 
	#DAC_DHR12L1_DACC1DHR
 
DAC_DHR12L1_DACC1DHR_Msk


	)

4355 
	#DAC_DHR8R1_DACC1DHR_Pos
 (0U)

	)

4356 
	#DAC_DHR8R1_DACC1DHR_Msk
 (0xFFUL << 
DAC_DHR8R1_DACC1DHR_Pos
√ã

	)

4357 
	#DAC_DHR8R1_DACC1DHR
 
DAC_DHR8R1_DACC1DHR_Msk


	)

4360 
	#DAC_DHR12R2_DACC2DHR_Pos
 (0U)

	)

4361 
	#DAC_DHR12R2_DACC2DHR_Msk
 (0xFFFUL << 
DAC_DHR12R2_DACC2DHR_Pos
√ã

	)

4362 
	#DAC_DHR12R2_DACC2DHR
 
DAC_DHR12R2_DACC2DHR_Msk


	)

4365 
	#DAC_DHR12L2_DACC2DHR_Pos
 (4U)

	)

4366 
	#DAC_DHR12L2_DACC2DHR_Msk
 (0xFFFUL << 
DAC_DHR12L2_DACC2DHR_Pos
√ã

	)

4367 
	#DAC_DHR12L2_DACC2DHR
 
DAC_DHR12L2_DACC2DHR_Msk


	)

4370 
	#DAC_DHR8R2_DACC2DHR_Pos
 (0U)

	)

4371 
	#DAC_DHR8R2_DACC2DHR_Msk
 (0xFFUL << 
DAC_DHR8R2_DACC2DHR_Pos
√ã

	)

4372 
	#DAC_DHR8R2_DACC2DHR
 
DAC_DHR8R2_DACC2DHR_Msk


	)

4375 
	#DAC_DHR12RD_DACC1DHR_Pos
 (0U)

	)

4376 
	#DAC_DHR12RD_DACC1DHR_Msk
 (0xFFFUL << 
DAC_DHR12RD_DACC1DHR_Pos
√ã

	)

4377 
	#DAC_DHR12RD_DACC1DHR
 
DAC_DHR12RD_DACC1DHR_Msk


	)

4378 
	#DAC_DHR12RD_DACC2DHR_Pos
 (16U)

	)

4379 
	#DAC_DHR12RD_DACC2DHR_Msk
 (0xFFFUL << 
DAC_DHR12RD_DACC2DHR_Pos
√ã

	)

4380 
	#DAC_DHR12RD_DACC2DHR
 
DAC_DHR12RD_DACC2DHR_Msk


	)

4383 
	#DAC_DHR12LD_DACC1DHR_Pos
 (4U)

	)

4384 
	#DAC_DHR12LD_DACC1DHR_Msk
 (0xFFFUL << 
DAC_DHR12LD_DACC1DHR_Pos
√ã

	)

4385 
	#DAC_DHR12LD_DACC1DHR
 
DAC_DHR12LD_DACC1DHR_Msk


	)

4386 
	#DAC_DHR12LD_DACC2DHR_Pos
 (20U)

	)

4387 
	#DAC_DHR12LD_DACC2DHR_Msk
 (0xFFFUL << 
DAC_DHR12LD_DACC2DHR_Pos
√ã

	)

4388 
	#DAC_DHR12LD_DACC2DHR
 
DAC_DHR12LD_DACC2DHR_Msk


	)

4391 
	#DAC_DHR8RD_DACC1DHR_Pos
 (0U)

	)

4392 
	#DAC_DHR8RD_DACC1DHR_Msk
 (0xFFUL << 
DAC_DHR8RD_DACC1DHR_Pos
√ã

	)

4393 
	#DAC_DHR8RD_DACC1DHR
 
DAC_DHR8RD_DACC1DHR_Msk


	)

4394 
	#DAC_DHR8RD_DACC2DHR_Pos
 (8U)

	)

4395 
	#DAC_DHR8RD_DACC2DHR_Msk
 (0xFFUL << 
DAC_DHR8RD_DACC2DHR_Pos
√ã

	)

4396 
	#DAC_DHR8RD_DACC2DHR
 
DAC_DHR8RD_DACC2DHR_Msk


	)

4399 
	#DAC_DOR1_DACC1DOR_Pos
 (0U)

	)

4400 
	#DAC_DOR1_DACC1DOR_Msk
 (0xFFFUL << 
DAC_DOR1_DACC1DOR_Pos
√ã

	)

4401 
	#DAC_DOR1_DACC1DOR
 
DAC_DOR1_DACC1DOR_Msk


	)

4404 
	#DAC_DOR2_DACC2DOR_Pos
 (0U)

	)

4405 
	#DAC_DOR2_DACC2DOR_Msk
 (0xFFFUL << 
DAC_DOR2_DACC2DOR_Pos
√ã

	)

4406 
	#DAC_DOR2_DACC2DOR
 
DAC_DOR2_DACC2DOR_Msk


	)

4416 
	#TIM_CR1_CEN_Pos
 (0U)

	)

4417 
	#TIM_CR1_CEN_Msk
 (0x1UL << 
TIM_CR1_CEN_Pos
√ã

	)

4418 
	#TIM_CR1_CEN
 
TIM_CR1_CEN_Msk


	)

4419 
	#TIM_CR1_UDIS_Pos
 (1U)

	)

4420 
	#TIM_CR1_UDIS_Msk
 (0x1UL << 
TIM_CR1_UDIS_Pos
√ã

	)

4421 
	#TIM_CR1_UDIS
 
TIM_CR1_UDIS_Msk


	)

4422 
	#TIM_CR1_URS_Pos
 (2U)

	)

4423 
	#TIM_CR1_URS_Msk
 (0x1UL << 
TIM_CR1_URS_Pos
√ã

	)

4424 
	#TIM_CR1_URS
 
TIM_CR1_URS_Msk


	)

4425 
	#TIM_CR1_OPM_Pos
 (3U)

	)

4426 
	#TIM_CR1_OPM_Msk
 (0x1UL << 
TIM_CR1_OPM_Pos
√ã

	)

4427 
	#TIM_CR1_OPM
 
TIM_CR1_OPM_Msk


	)

4428 
	#TIM_CR1_DIR_Pos
 (4U)

	)

4429 
	#TIM_CR1_DIR_Msk
 (0x1UL << 
TIM_CR1_DIR_Pos
√ã

	)

4430 
	#TIM_CR1_DIR
 
TIM_CR1_DIR_Msk


	)

4432 
	#TIM_CR1_CMS_Pos
 (5U)

	)

4433 
	#TIM_CR1_CMS_Msk
 (0x3UL << 
TIM_CR1_CMS_Pos
√ã

	)

4434 
	#TIM_CR1_CMS
 
TIM_CR1_CMS_Msk


	)

4435 
	#TIM_CR1_CMS_0
 (0x1UL << 
TIM_CR1_CMS_Pos
√ã

	)

4436 
	#TIM_CR1_CMS_1
 (0x2UL << 
TIM_CR1_CMS_Pos
√ã

	)

4438 
	#TIM_CR1_ARPE_Pos
 (7U)

	)

4439 
	#TIM_CR1_ARPE_Msk
 (0x1UL << 
TIM_CR1_ARPE_Pos
√ã

	)

4440 
	#TIM_CR1_ARPE
 
TIM_CR1_ARPE_Msk


	)

4442 
	#TIM_CR1_CKD_Pos
 (8U)

	)

4443 
	#TIM_CR1_CKD_Msk
 (0x3UL << 
TIM_CR1_CKD_Pos
√ã

	)

4444 
	#TIM_CR1_CKD
 
TIM_CR1_CKD_Msk


	)

4445 
	#TIM_CR1_CKD_0
 (0x1UL << 
TIM_CR1_CKD_Pos
√ã

	)

4446 
	#TIM_CR1_CKD_1
 (0x2UL << 
TIM_CR1_CKD_Pos
√ã

	)

4449 
	#TIM_CR2_CCPC_Pos
 (0U)

	)

4450 
	#TIM_CR2_CCPC_Msk
 (0x1UL << 
TIM_CR2_CCPC_Pos
√ã

	)

4451 
	#TIM_CR2_CCPC
 
TIM_CR2_CCPC_Msk


	)

4452 
	#TIM_CR2_CCUS_Pos
 (2U)

	)

4453 
	#TIM_CR2_CCUS_Msk
 (0x1UL << 
TIM_CR2_CCUS_Pos
√ã

	)

4454 
	#TIM_CR2_CCUS
 
TIM_CR2_CCUS_Msk


	)

4455 
	#TIM_CR2_CCDS_Pos
 (3U)

	)

4456 
	#TIM_CR2_CCDS_Msk
 (0x1UL << 
TIM_CR2_CCDS_Pos
√ã

	)

4457 
	#TIM_CR2_CCDS
 
TIM_CR2_CCDS_Msk


	)

4459 
	#TIM_CR2_MMS_Pos
 (4U)

	)

4460 
	#TIM_CR2_MMS_Msk
 (0x7UL << 
TIM_CR2_MMS_Pos
√ã

	)

4461 
	#TIM_CR2_MMS
 
TIM_CR2_MMS_Msk


	)

4462 
	#TIM_CR2_MMS_0
 (0x1UL << 
TIM_CR2_MMS_Pos
√ã

	)

4463 
	#TIM_CR2_MMS_1
 (0x2UL << 
TIM_CR2_MMS_Pos
√ã

	)

4464 
	#TIM_CR2_MMS_2
 (0x4UL << 
TIM_CR2_MMS_Pos
√ã

	)

4466 
	#TIM_CR2_TI1S_Pos
 (7U)

	)

4467 
	#TIM_CR2_TI1S_Msk
 (0x1UL << 
TIM_CR2_TI1S_Pos
√ã

	)

4468 
	#TIM_CR2_TI1S
 
TIM_CR2_TI1S_Msk


	)

4469 
	#TIM_CR2_OIS1_Pos
 (8U)

	)

4470 
	#TIM_CR2_OIS1_Msk
 (0x1UL << 
TIM_CR2_OIS1_Pos
√ã

	)

4471 
	#TIM_CR2_OIS1
 
TIM_CR2_OIS1_Msk


	)

4472 
	#TIM_CR2_OIS1N_Pos
 (9U)

	)

4473 
	#TIM_CR2_OIS1N_Msk
 (0x1UL << 
TIM_CR2_OIS1N_Pos
√ã

	)

4474 
	#TIM_CR2_OIS1N
 
TIM_CR2_OIS1N_Msk


	)

4475 
	#TIM_CR2_OIS2_Pos
 (10U)

	)

4476 
	#TIM_CR2_OIS2_Msk
 (0x1UL << 
TIM_CR2_OIS2_Pos
√ã

	)

4477 
	#TIM_CR2_OIS2
 
TIM_CR2_OIS2_Msk


	)

4478 
	#TIM_CR2_OIS2N_Pos
 (11U)

	)

4479 
	#TIM_CR2_OIS2N_Msk
 (0x1UL << 
TIM_CR2_OIS2N_Pos
√ã

	)

4480 
	#TIM_CR2_OIS2N
 
TIM_CR2_OIS2N_Msk


	)

4481 
	#TIM_CR2_OIS3_Pos
 (12U)

	)

4482 
	#TIM_CR2_OIS3_Msk
 (0x1UL << 
TIM_CR2_OIS3_Pos
√ã

	)

4483 
	#TIM_CR2_OIS3
 
TIM_CR2_OIS3_Msk


	)

4484 
	#TIM_CR2_OIS3N_Pos
 (13U)

	)

4485 
	#TIM_CR2_OIS3N_Msk
 (0x1UL << 
TIM_CR2_OIS3N_Pos
√ã

	)

4486 
	#TIM_CR2_OIS3N
 
TIM_CR2_OIS3N_Msk


	)

4487 
	#TIM_CR2_OIS4_Pos
 (14U)

	)

4488 
	#TIM_CR2_OIS4_Msk
 (0x1UL << 
TIM_CR2_OIS4_Pos
√ã

	)

4489 
	#TIM_CR2_OIS4
 
TIM_CR2_OIS4_Msk


	)

4492 
	#TIM_SMCR_SMS_Pos
 (0U)

	)

4493 
	#TIM_SMCR_SMS_Msk
 (0x7UL << 
TIM_SMCR_SMS_Pos
√ã

	)

4494 
	#TIM_SMCR_SMS
 
TIM_SMCR_SMS_Msk


	)

4495 
	#TIM_SMCR_SMS_0
 (0x1UL << 
TIM_SMCR_SMS_Pos
√ã

	)

4496 
	#TIM_SMCR_SMS_1
 (0x2UL << 
TIM_SMCR_SMS_Pos
√ã

	)

4497 
	#TIM_SMCR_SMS_2
 (0x4UL << 
TIM_SMCR_SMS_Pos
√ã

	)

4499 
	#TIM_SMCR_TS_Pos
 (4U)

	)

4500 
	#TIM_SMCR_TS_Msk
 (0x7UL << 
TIM_SMCR_TS_Pos
√ã

	)

4501 
	#TIM_SMCR_TS
 
TIM_SMCR_TS_Msk


	)

4502 
	#TIM_SMCR_TS_0
 (0x1UL << 
TIM_SMCR_TS_Pos
√ã

	)

4503 
	#TIM_SMCR_TS_1
 (0x2UL << 
TIM_SMCR_TS_Pos
√ã

	)

4504 
	#TIM_SMCR_TS_2
 (0x4UL << 
TIM_SMCR_TS_Pos
√ã

	)

4506 
	#TIM_SMCR_MSM_Pos
 (7U)

	)

4507 
	#TIM_SMCR_MSM_Msk
 (0x1UL << 
TIM_SMCR_MSM_Pos
√ã

	)

4508 
	#TIM_SMCR_MSM
 
TIM_SMCR_MSM_Msk


	)

4510 
	#TIM_SMCR_ETF_Pos
 (8U)

	)

4511 
	#TIM_SMCR_ETF_Msk
 (0xFUL << 
TIM_SMCR_ETF_Pos
√ã

	)

4512 
	#TIM_SMCR_ETF
 
TIM_SMCR_ETF_Msk


	)

4513 
	#TIM_SMCR_ETF_0
 (0x1UL << 
TIM_SMCR_ETF_Pos
√ã

	)

4514 
	#TIM_SMCR_ETF_1
 (0x2UL << 
TIM_SMCR_ETF_Pos
√ã

	)

4515 
	#TIM_SMCR_ETF_2
 (0x4UL << 
TIM_SMCR_ETF_Pos
√ã

	)

4516 
	#TIM_SMCR_ETF_3
 (0x8UL << 
TIM_SMCR_ETF_Pos
√ã

	)

4518 
	#TIM_SMCR_ETPS_Pos
 (12U)

	)

4519 
	#TIM_SMCR_ETPS_Msk
 (0x3UL << 
TIM_SMCR_ETPS_Pos
√ã

	)

4520 
	#TIM_SMCR_ETPS
 
TIM_SMCR_ETPS_Msk


	)

4521 
	#TIM_SMCR_ETPS_0
 (0x1UL << 
TIM_SMCR_ETPS_Pos
√ã

	)

4522 
	#TIM_SMCR_ETPS_1
 (0x2UL << 
TIM_SMCR_ETPS_Pos
√ã

	)

4524 
	#TIM_SMCR_ECE_Pos
 (14U)

	)

4525 
	#TIM_SMCR_ECE_Msk
 (0x1UL << 
TIM_SMCR_ECE_Pos
√ã

	)

4526 
	#TIM_SMCR_ECE
 
TIM_SMCR_ECE_Msk


	)

4527 
	#TIM_SMCR_ETP_Pos
 (15U)

	)

4528 
	#TIM_SMCR_ETP_Msk
 (0x1UL << 
TIM_SMCR_ETP_Pos
√ã

	)

4529 
	#TIM_SMCR_ETP
 
TIM_SMCR_ETP_Msk


	)

4532 
	#TIM_DIER_UIE_Pos
 (0U)

	)

4533 
	#TIM_DIER_UIE_Msk
 (0x1UL << 
TIM_DIER_UIE_Pos
√ã

	)

4534 
	#TIM_DIER_UIE
 
TIM_DIER_UIE_Msk


	)

4535 
	#TIM_DIER_CC1IE_Pos
 (1U)

	)

4536 
	#TIM_DIER_CC1IE_Msk
 (0x1UL << 
TIM_DIER_CC1IE_Pos
√ã

	)

4537 
	#TIM_DIER_CC1IE
 
TIM_DIER_CC1IE_Msk


	)

4538 
	#TIM_DIER_CC2IE_Pos
 (2U)

	)

4539 
	#TIM_DIER_CC2IE_Msk
 (0x1UL << 
TIM_DIER_CC2IE_Pos
√ã

	)

4540 
	#TIM_DIER_CC2IE
 
TIM_DIER_CC2IE_Msk


	)

4541 
	#TIM_DIER_CC3IE_Pos
 (3U)

	)

4542 
	#TIM_DIER_CC3IE_Msk
 (0x1UL << 
TIM_DIER_CC3IE_Pos
√ã

	)

4543 
	#TIM_DIER_CC3IE
 
TIM_DIER_CC3IE_Msk


	)

4544 
	#TIM_DIER_CC4IE_Pos
 (4U)

	)

4545 
	#TIM_DIER_CC4IE_Msk
 (0x1UL << 
TIM_DIER_CC4IE_Pos
√ã

	)

4546 
	#TIM_DIER_CC4IE
 
TIM_DIER_CC4IE_Msk


	)

4547 
	#TIM_DIER_COMIE_Pos
 (5U)

	)

4548 
	#TIM_DIER_COMIE_Msk
 (0x1UL << 
TIM_DIER_COMIE_Pos
√ã

	)

4549 
	#TIM_DIER_COMIE
 
TIM_DIER_COMIE_Msk


	)

4550 
	#TIM_DIER_TIE_Pos
 (6U)

	)

4551 
	#TIM_DIER_TIE_Msk
 (0x1UL << 
TIM_DIER_TIE_Pos
√ã

	)

4552 
	#TIM_DIER_TIE
 
TIM_DIER_TIE_Msk


	)

4553 
	#TIM_DIER_BIE_Pos
 (7U)

	)

4554 
	#TIM_DIER_BIE_Msk
 (0x1UL << 
TIM_DIER_BIE_Pos
√ã

	)

4555 
	#TIM_DIER_BIE
 
TIM_DIER_BIE_Msk


	)

4556 
	#TIM_DIER_UDE_Pos
 (8U)

	)

4557 
	#TIM_DIER_UDE_Msk
 (0x1UL << 
TIM_DIER_UDE_Pos
√ã

	)

4558 
	#TIM_DIER_UDE
 
TIM_DIER_UDE_Msk


	)

4559 
	#TIM_DIER_CC1DE_Pos
 (9U)

	)

4560 
	#TIM_DIER_CC1DE_Msk
 (0x1UL << 
TIM_DIER_CC1DE_Pos
√ã

	)

4561 
	#TIM_DIER_CC1DE
 
TIM_DIER_CC1DE_Msk


	)

4562 
	#TIM_DIER_CC2DE_Pos
 (10U)

	)

4563 
	#TIM_DIER_CC2DE_Msk
 (0x1UL << 
TIM_DIER_CC2DE_Pos
√ã

	)

4564 
	#TIM_DIER_CC2DE
 
TIM_DIER_CC2DE_Msk


	)

4565 
	#TIM_DIER_CC3DE_Pos
 (11U)

	)

4566 
	#TIM_DIER_CC3DE_Msk
 (0x1UL << 
TIM_DIER_CC3DE_Pos
√ã

	)

4567 
	#TIM_DIER_CC3DE
 
TIM_DIER_CC3DE_Msk


	)

4568 
	#TIM_DIER_CC4DE_Pos
 (12U)

	)

4569 
	#TIM_DIER_CC4DE_Msk
 (0x1UL << 
TIM_DIER_CC4DE_Pos
√ã

	)

4570 
	#TIM_DIER_CC4DE
 
TIM_DIER_CC4DE_Msk


	)

4571 
	#TIM_DIER_COMDE_Pos
 (13U)

	)

4572 
	#TIM_DIER_COMDE_Msk
 (0x1UL << 
TIM_DIER_COMDE_Pos
√ã

	)

4573 
	#TIM_DIER_COMDE
 
TIM_DIER_COMDE_Msk


	)

4574 
	#TIM_DIER_TDE_Pos
 (14U)

	)

4575 
	#TIM_DIER_TDE_Msk
 (0x1UL << 
TIM_DIER_TDE_Pos
√ã

	)

4576 
	#TIM_DIER_TDE
 
TIM_DIER_TDE_Msk


	)

4579 
	#TIM_SR_UIF_Pos
 (0U)

	)

4580 
	#TIM_SR_UIF_Msk
 (0x1UL << 
TIM_SR_UIF_Pos
√ã

	)

4581 
	#TIM_SR_UIF
 
TIM_SR_UIF_Msk


	)

4582 
	#TIM_SR_CC1IF_Pos
 (1U)

	)

4583 
	#TIM_SR_CC1IF_Msk
 (0x1UL << 
TIM_SR_CC1IF_Pos
√ã

	)

4584 
	#TIM_SR_CC1IF
 
TIM_SR_CC1IF_Msk


	)

4585 
	#TIM_SR_CC2IF_Pos
 (2U)

	)

4586 
	#TIM_SR_CC2IF_Msk
 (0x1UL << 
TIM_SR_CC2IF_Pos
√ã

	)

4587 
	#TIM_SR_CC2IF
 
TIM_SR_CC2IF_Msk


	)

4588 
	#TIM_SR_CC3IF_Pos
 (3U)

	)

4589 
	#TIM_SR_CC3IF_Msk
 (0x1UL << 
TIM_SR_CC3IF_Pos
√ã

	)

4590 
	#TIM_SR_CC3IF
 
TIM_SR_CC3IF_Msk


	)

4591 
	#TIM_SR_CC4IF_Pos
 (4U)

	)

4592 
	#TIM_SR_CC4IF_Msk
 (0x1UL << 
TIM_SR_CC4IF_Pos
√ã

	)

4593 
	#TIM_SR_CC4IF
 
TIM_SR_CC4IF_Msk


	)

4594 
	#TIM_SR_COMIF_Pos
 (5U)

	)

4595 
	#TIM_SR_COMIF_Msk
 (0x1UL << 
TIM_SR_COMIF_Pos
√ã

	)

4596 
	#TIM_SR_COMIF
 
TIM_SR_COMIF_Msk


	)

4597 
	#TIM_SR_TIF_Pos
 (6U)

	)

4598 
	#TIM_SR_TIF_Msk
 (0x1UL << 
TIM_SR_TIF_Pos
√ã

	)

4599 
	#TIM_SR_TIF
 
TIM_SR_TIF_Msk


	)

4600 
	#TIM_SR_BIF_Pos
 (7U)

	)

4601 
	#TIM_SR_BIF_Msk
 (0x1UL << 
TIM_SR_BIF_Pos
√ã

	)

4602 
	#TIM_SR_BIF
 
TIM_SR_BIF_Msk


	)

4603 
	#TIM_SR_CC1OF_Pos
 (9U)

	)

4604 
	#TIM_SR_CC1OF_Msk
 (0x1UL << 
TIM_SR_CC1OF_Pos
√ã

	)

4605 
	#TIM_SR_CC1OF
 
TIM_SR_CC1OF_Msk


	)

4606 
	#TIM_SR_CC2OF_Pos
 (10U)

	)

4607 
	#TIM_SR_CC2OF_Msk
 (0x1UL << 
TIM_SR_CC2OF_Pos
√ã

	)

4608 
	#TIM_SR_CC2OF
 
TIM_SR_CC2OF_Msk


	)

4609 
	#TIM_SR_CC3OF_Pos
 (11U)

	)

4610 
	#TIM_SR_CC3OF_Msk
 (0x1UL << 
TIM_SR_CC3OF_Pos
√ã

	)

4611 
	#TIM_SR_CC3OF
 
TIM_SR_CC3OF_Msk


	)

4612 
	#TIM_SR_CC4OF_Pos
 (12U)

	)

4613 
	#TIM_SR_CC4OF_Msk
 (0x1UL << 
TIM_SR_CC4OF_Pos
√ã

	)

4614 
	#TIM_SR_CC4OF
 
TIM_SR_CC4OF_Msk


	)

4617 
	#TIM_EGR_UG_Pos
 (0U)

	)

4618 
	#TIM_EGR_UG_Msk
 (0x1UL << 
TIM_EGR_UG_Pos
√ã

	)

4619 
	#TIM_EGR_UG
 
TIM_EGR_UG_Msk


	)

4620 
	#TIM_EGR_CC1G_Pos
 (1U)

	)

4621 
	#TIM_EGR_CC1G_Msk
 (0x1UL << 
TIM_EGR_CC1G_Pos
√ã

	)

4622 
	#TIM_EGR_CC1G
 
TIM_EGR_CC1G_Msk


	)

4623 
	#TIM_EGR_CC2G_Pos
 (2U)

	)

4624 
	#TIM_EGR_CC2G_Msk
 (0x1UL << 
TIM_EGR_CC2G_Pos
√ã

	)

4625 
	#TIM_EGR_CC2G
 
TIM_EGR_CC2G_Msk


	)

4626 
	#TIM_EGR_CC3G_Pos
 (3U)

	)

4627 
	#TIM_EGR_CC3G_Msk
 (0x1UL << 
TIM_EGR_CC3G_Pos
√ã

	)

4628 
	#TIM_EGR_CC3G
 
TIM_EGR_CC3G_Msk


	)

4629 
	#TIM_EGR_CC4G_Pos
 (4U)

	)

4630 
	#TIM_EGR_CC4G_Msk
 (0x1UL << 
TIM_EGR_CC4G_Pos
√ã

	)

4631 
	#TIM_EGR_CC4G
 
TIM_EGR_CC4G_Msk


	)

4632 
	#TIM_EGR_COMG_Pos
 (5U)

	)

4633 
	#TIM_EGR_COMG_Msk
 (0x1UL << 
TIM_EGR_COMG_Pos
√ã

	)

4634 
	#TIM_EGR_COMG
 
TIM_EGR_COMG_Msk


	)

4635 
	#TIM_EGR_TG_Pos
 (6U)

	)

4636 
	#TIM_EGR_TG_Msk
 (0x1UL << 
TIM_EGR_TG_Pos
√ã

	)

4637 
	#TIM_EGR_TG
 
TIM_EGR_TG_Msk


	)

4638 
	#TIM_EGR_BG_Pos
 (7U)

	)

4639 
	#TIM_EGR_BG_Msk
 (0x1UL << 
TIM_EGR_BG_Pos
√ã

	)

4640 
	#TIM_EGR_BG
 
TIM_EGR_BG_Msk


	)

4643 
	#TIM_CCMR1_CC1S_Pos
 (0U)

	)

4644 
	#TIM_CCMR1_CC1S_Msk
 (0x3UL << 
TIM_CCMR1_CC1S_Pos
√ã

	)

4645 
	#TIM_CCMR1_CC1S
 
TIM_CCMR1_CC1S_Msk


	)

4646 
	#TIM_CCMR1_CC1S_0
 (0x1UL << 
TIM_CCMR1_CC1S_Pos
√ã

	)

4647 
	#TIM_CCMR1_CC1S_1
 (0x2UL << 
TIM_CCMR1_CC1S_Pos
√ã

	)

4649 
	#TIM_CCMR1_OC1FE_Pos
 (2U)

	)

4650 
	#TIM_CCMR1_OC1FE_Msk
 (0x1UL << 
TIM_CCMR1_OC1FE_Pos
√ã

	)

4651 
	#TIM_CCMR1_OC1FE
 
TIM_CCMR1_OC1FE_Msk


	)

4652 
	#TIM_CCMR1_OC1PE_Pos
 (3U)

	)

4653 
	#TIM_CCMR1_OC1PE_Msk
 (0x1UL << 
TIM_CCMR1_OC1PE_Pos
√ã

	)

4654 
	#TIM_CCMR1_OC1PE
 
TIM_CCMR1_OC1PE_Msk


	)

4656 
	#TIM_CCMR1_OC1M_Pos
 (4U)

	)

4657 
	#TIM_CCMR1_OC1M_Msk
 (0x7UL << 
TIM_CCMR1_OC1M_Pos
√ã

	)

4658 
	#TIM_CCMR1_OC1M
 
TIM_CCMR1_OC1M_Msk


	)

4659 
	#TIM_CCMR1_OC1M_0
 (0x1UL << 
TIM_CCMR1_OC1M_Pos
√ã

	)

4660 
	#TIM_CCMR1_OC1M_1
 (0x2UL << 
TIM_CCMR1_OC1M_Pos
√ã

	)

4661 
	#TIM_CCMR1_OC1M_2
 (0x4UL << 
TIM_CCMR1_OC1M_Pos
√ã

	)

4663 
	#TIM_CCMR1_OC1CE_Pos
 (7U)

	)

4664 
	#TIM_CCMR1_OC1CE_Msk
 (0x1UL << 
TIM_CCMR1_OC1CE_Pos
√ã

	)

4665 
	#TIM_CCMR1_OC1CE
 
TIM_CCMR1_OC1CE_Msk


	)

4667 
	#TIM_CCMR1_CC2S_Pos
 (8U)

	)

4668 
	#TIM_CCMR1_CC2S_Msk
 (0x3UL << 
TIM_CCMR1_CC2S_Pos
√ã

	)

4669 
	#TIM_CCMR1_CC2S
 
TIM_CCMR1_CC2S_Msk


	)

4670 
	#TIM_CCMR1_CC2S_0
 (0x1UL << 
TIM_CCMR1_CC2S_Pos
√ã

	)

4671 
	#TIM_CCMR1_CC2S_1
 (0x2UL << 
TIM_CCMR1_CC2S_Pos
√ã

	)

4673 
	#TIM_CCMR1_OC2FE_Pos
 (10U)

	)

4674 
	#TIM_CCMR1_OC2FE_Msk
 (0x1UL << 
TIM_CCMR1_OC2FE_Pos
√ã

	)

4675 
	#TIM_CCMR1_OC2FE
 
TIM_CCMR1_OC2FE_Msk


	)

4676 
	#TIM_CCMR1_OC2PE_Pos
 (11U)

	)

4677 
	#TIM_CCMR1_OC2PE_Msk
 (0x1UL << 
TIM_CCMR1_OC2PE_Pos
√ã

	)

4678 
	#TIM_CCMR1_OC2PE
 
TIM_CCMR1_OC2PE_Msk


	)

4680 
	#TIM_CCMR1_OC2M_Pos
 (12U)

	)

4681 
	#TIM_CCMR1_OC2M_Msk
 (0x7UL << 
TIM_CCMR1_OC2M_Pos
√ã

	)

4682 
	#TIM_CCMR1_OC2M
 
TIM_CCMR1_OC2M_Msk


	)

4683 
	#TIM_CCMR1_OC2M_0
 (0x1UL << 
TIM_CCMR1_OC2M_Pos
√ã

	)

4684 
	#TIM_CCMR1_OC2M_1
 (0x2UL << 
TIM_CCMR1_OC2M_Pos
√ã

	)

4685 
	#TIM_CCMR1_OC2M_2
 (0x4UL << 
TIM_CCMR1_OC2M_Pos
√ã

	)

4687 
	#TIM_CCMR1_OC2CE_Pos
 (15U)

	)

4688 
	#TIM_CCMR1_OC2CE_Msk
 (0x1UL << 
TIM_CCMR1_OC2CE_Pos
√ã

	)

4689 
	#TIM_CCMR1_OC2CE
 
TIM_CCMR1_OC2CE_Msk


	)

4693 
	#TIM_CCMR1_IC1PSC_Pos
 (2U)

	)

4694 
	#TIM_CCMR1_IC1PSC_Msk
 (0x3UL << 
TIM_CCMR1_IC1PSC_Pos
√ã

	)

4695 
	#TIM_CCMR1_IC1PSC
 
TIM_CCMR1_IC1PSC_Msk


	)

4696 
	#TIM_CCMR1_IC1PSC_0
 (0x1UL << 
TIM_CCMR1_IC1PSC_Pos
√ã

	)

4697 
	#TIM_CCMR1_IC1PSC_1
 (0x2UL << 
TIM_CCMR1_IC1PSC_Pos
√ã

	)

4699 
	#TIM_CCMR1_IC1F_Pos
 (4U)

	)

4700 
	#TIM_CCMR1_IC1F_Msk
 (0xFUL << 
TIM_CCMR1_IC1F_Pos
√ã

	)

4701 
	#TIM_CCMR1_IC1F
 
TIM_CCMR1_IC1F_Msk


	)

4702 
	#TIM_CCMR1_IC1F_0
 (0x1UL << 
TIM_CCMR1_IC1F_Pos
√ã

	)

4703 
	#TIM_CCMR1_IC1F_1
 (0x2UL << 
TIM_CCMR1_IC1F_Pos
√ã

	)

4704 
	#TIM_CCMR1_IC1F_2
 (0x4UL << 
TIM_CCMR1_IC1F_Pos
√ã

	)

4705 
	#TIM_CCMR1_IC1F_3
 (0x8UL << 
TIM_CCMR1_IC1F_Pos
√ã

	)

4707 
	#TIM_CCMR1_IC2PSC_Pos
 (10U)

	)

4708 
	#TIM_CCMR1_IC2PSC_Msk
 (0x3UL << 
TIM_CCMR1_IC2PSC_Pos
√ã

	)

4709 
	#TIM_CCMR1_IC2PSC
 
TIM_CCMR1_IC2PSC_Msk


	)

4710 
	#TIM_CCMR1_IC2PSC_0
 (0x1UL << 
TIM_CCMR1_IC2PSC_Pos
√ã

	)

4711 
	#TIM_CCMR1_IC2PSC_1
 (0x2UL << 
TIM_CCMR1_IC2PSC_Pos
√ã

	)

4713 
	#TIM_CCMR1_IC2F_Pos
 (12U)

	)

4714 
	#TIM_CCMR1_IC2F_Msk
 (0xFUL << 
TIM_CCMR1_IC2F_Pos
√ã

	)

4715 
	#TIM_CCMR1_IC2F
 
TIM_CCMR1_IC2F_Msk


	)

4716 
	#TIM_CCMR1_IC2F_0
 (0x1UL << 
TIM_CCMR1_IC2F_Pos
√ã

	)

4717 
	#TIM_CCMR1_IC2F_1
 (0x2UL << 
TIM_CCMR1_IC2F_Pos
√ã

	)

4718 
	#TIM_CCMR1_IC2F_2
 (0x4UL << 
TIM_CCMR1_IC2F_Pos
√ã

	)

4719 
	#TIM_CCMR1_IC2F_3
 (0x8UL << 
TIM_CCMR1_IC2F_Pos
√ã

	)

4722 
	#TIM_CCMR2_CC3S_Pos
 (0U)

	)

4723 
	#TIM_CCMR2_CC3S_Msk
 (0x3UL << 
TIM_CCMR2_CC3S_Pos
√ã

	)

4724 
	#TIM_CCMR2_CC3S
 
TIM_CCMR2_CC3S_Msk


	)

4725 
	#TIM_CCMR2_CC3S_0
 (0x1UL << 
TIM_CCMR2_CC3S_Pos
√ã

	)

4726 
	#TIM_CCMR2_CC3S_1
 (0x2UL << 
TIM_CCMR2_CC3S_Pos
√ã

	)

4728 
	#TIM_CCMR2_OC3FE_Pos
 (2U)

	)

4729 
	#TIM_CCMR2_OC3FE_Msk
 (0x1UL << 
TIM_CCMR2_OC3FE_Pos
√ã

	)

4730 
	#TIM_CCMR2_OC3FE
 
TIM_CCMR2_OC3FE_Msk


	)

4731 
	#TIM_CCMR2_OC3PE_Pos
 (3U)

	)

4732 
	#TIM_CCMR2_OC3PE_Msk
 (0x1UL << 
TIM_CCMR2_OC3PE_Pos
√ã

	)

4733 
	#TIM_CCMR2_OC3PE
 
TIM_CCMR2_OC3PE_Msk


	)

4735 
	#TIM_CCMR2_OC3M_Pos
 (4U)

	)

4736 
	#TIM_CCMR2_OC3M_Msk
 (0x7UL << 
TIM_CCMR2_OC3M_Pos
√ã

	)

4737 
	#TIM_CCMR2_OC3M
 
TIM_CCMR2_OC3M_Msk


	)

4738 
	#TIM_CCMR2_OC3M_0
 (0x1UL << 
TIM_CCMR2_OC3M_Pos
√ã

	)

4739 
	#TIM_CCMR2_OC3M_1
 (0x2UL << 
TIM_CCMR2_OC3M_Pos
√ã

	)

4740 
	#TIM_CCMR2_OC3M_2
 (0x4UL << 
TIM_CCMR2_OC3M_Pos
√ã

	)

4742 
	#TIM_CCMR2_OC3CE_Pos
 (7U)

	)

4743 
	#TIM_CCMR2_OC3CE_Msk
 (0x1UL << 
TIM_CCMR2_OC3CE_Pos
√ã

	)

4744 
	#TIM_CCMR2_OC3CE
 
TIM_CCMR2_OC3CE_Msk


	)

4746 
	#TIM_CCMR2_CC4S_Pos
 (8U)

	)

4747 
	#TIM_CCMR2_CC4S_Msk
 (0x3UL << 
TIM_CCMR2_CC4S_Pos
√ã

	)

4748 
	#TIM_CCMR2_CC4S
 
TIM_CCMR2_CC4S_Msk


	)

4749 
	#TIM_CCMR2_CC4S_0
 (0x1UL << 
TIM_CCMR2_CC4S_Pos
√ã

	)

4750 
	#TIM_CCMR2_CC4S_1
 (0x2UL << 
TIM_CCMR2_CC4S_Pos
√ã

	)

4752 
	#TIM_CCMR2_OC4FE_Pos
 (10U)

	)

4753 
	#TIM_CCMR2_OC4FE_Msk
 (0x1UL << 
TIM_CCMR2_OC4FE_Pos
√ã

	)

4754 
	#TIM_CCMR2_OC4FE
 
TIM_CCMR2_OC4FE_Msk


	)

4755 
	#TIM_CCMR2_OC4PE_Pos
 (11U)

	)

4756 
	#TIM_CCMR2_OC4PE_Msk
 (0x1UL << 
TIM_CCMR2_OC4PE_Pos
√ã

	)

4757 
	#TIM_CCMR2_OC4PE
 
TIM_CCMR2_OC4PE_Msk


	)

4759 
	#TIM_CCMR2_OC4M_Pos
 (12U)

	)

4760 
	#TIM_CCMR2_OC4M_Msk
 (0x7UL << 
TIM_CCMR2_OC4M_Pos
√ã

	)

4761 
	#TIM_CCMR2_OC4M
 
TIM_CCMR2_OC4M_Msk


	)

4762 
	#TIM_CCMR2_OC4M_0
 (0x1UL << 
TIM_CCMR2_OC4M_Pos
√ã

	)

4763 
	#TIM_CCMR2_OC4M_1
 (0x2UL << 
TIM_CCMR2_OC4M_Pos
√ã

	)

4764 
	#TIM_CCMR2_OC4M_2
 (0x4UL << 
TIM_CCMR2_OC4M_Pos
√ã

	)

4766 
	#TIM_CCMR2_OC4CE_Pos
 (15U)

	)

4767 
	#TIM_CCMR2_OC4CE_Msk
 (0x1UL << 
TIM_CCMR2_OC4CE_Pos
√ã

	)

4768 
	#TIM_CCMR2_OC4CE
 
TIM_CCMR2_OC4CE_Msk


	)

4772 
	#TIM_CCMR2_IC3PSC_Pos
 (2U)

	)

4773 
	#TIM_CCMR2_IC3PSC_Msk
 (0x3UL << 
TIM_CCMR2_IC3PSC_Pos
√ã

	)

4774 
	#TIM_CCMR2_IC3PSC
 
TIM_CCMR2_IC3PSC_Msk


	)

4775 
	#TIM_CCMR2_IC3PSC_0
 (0x1UL << 
TIM_CCMR2_IC3PSC_Pos
√ã

	)

4776 
	#TIM_CCMR2_IC3PSC_1
 (0x2UL << 
TIM_CCMR2_IC3PSC_Pos
√ã

	)

4778 
	#TIM_CCMR2_IC3F_Pos
 (4U)

	)

4779 
	#TIM_CCMR2_IC3F_Msk
 (0xFUL << 
TIM_CCMR2_IC3F_Pos
√ã

	)

4780 
	#TIM_CCMR2_IC3F
 
TIM_CCMR2_IC3F_Msk


	)

4781 
	#TIM_CCMR2_IC3F_0
 (0x1UL << 
TIM_CCMR2_IC3F_Pos
√ã

	)

4782 
	#TIM_CCMR2_IC3F_1
 (0x2UL << 
TIM_CCMR2_IC3F_Pos
√ã

	)

4783 
	#TIM_CCMR2_IC3F_2
 (0x4UL << 
TIM_CCMR2_IC3F_Pos
√ã

	)

4784 
	#TIM_CCMR2_IC3F_3
 (0x8UL << 
TIM_CCMR2_IC3F_Pos
√ã

	)

4786 
	#TIM_CCMR2_IC4PSC_Pos
 (10U)

	)

4787 
	#TIM_CCMR2_IC4PSC_Msk
 (0x3UL << 
TIM_CCMR2_IC4PSC_Pos
√ã

	)

4788 
	#TIM_CCMR2_IC4PSC
 
TIM_CCMR2_IC4PSC_Msk


	)

4789 
	#TIM_CCMR2_IC4PSC_0
 (0x1UL << 
TIM_CCMR2_IC4PSC_Pos
√ã

	)

4790 
	#TIM_CCMR2_IC4PSC_1
 (0x2UL << 
TIM_CCMR2_IC4PSC_Pos
√ã

	)

4792 
	#TIM_CCMR2_IC4F_Pos
 (12U)

	)

4793 
	#TIM_CCMR2_IC4F_Msk
 (0xFUL << 
TIM_CCMR2_IC4F_Pos
√ã

	)

4794 
	#TIM_CCMR2_IC4F
 
TIM_CCMR2_IC4F_Msk


	)

4795 
	#TIM_CCMR2_IC4F_0
 (0x1UL << 
TIM_CCMR2_IC4F_Pos
√ã

	)

4796 
	#TIM_CCMR2_IC4F_1
 (0x2UL << 
TIM_CCMR2_IC4F_Pos
√ã

	)

4797 
	#TIM_CCMR2_IC4F_2
 (0x4UL << 
TIM_CCMR2_IC4F_Pos
√ã

	)

4798 
	#TIM_CCMR2_IC4F_3
 (0x8UL << 
TIM_CCMR2_IC4F_Pos
√ã

	)

4801 
	#TIM_CCER_CC1E_Pos
 (0U)

	)

4802 
	#TIM_CCER_CC1E_Msk
 (0x1UL << 
TIM_CCER_CC1E_Pos
√ã

	)

4803 
	#TIM_CCER_CC1E
 
TIM_CCER_CC1E_Msk


	)

4804 
	#TIM_CCER_CC1P_Pos
 (1U)

	)

4805 
	#TIM_CCER_CC1P_Msk
 (0x1UL << 
TIM_CCER_CC1P_Pos
√ã

	)

4806 
	#TIM_CCER_CC1P
 
TIM_CCER_CC1P_Msk


	)

4807 
	#TIM_CCER_CC1NE_Pos
 (2U)

	)

4808 
	#TIM_CCER_CC1NE_Msk
 (0x1UL << 
TIM_CCER_CC1NE_Pos
√ã

	)

4809 
	#TIM_CCER_CC1NE
 
TIM_CCER_CC1NE_Msk


	)

4810 
	#TIM_CCER_CC1NP_Pos
 (3U)

	)

4811 
	#TIM_CCER_CC1NP_Msk
 (0x1UL << 
TIM_CCER_CC1NP_Pos
√ã

	)

4812 
	#TIM_CCER_CC1NP
 
TIM_CCER_CC1NP_Msk


	)

4813 
	#TIM_CCER_CC2E_Pos
 (4U)

	)

4814 
	#TIM_CCER_CC2E_Msk
 (0x1UL << 
TIM_CCER_CC2E_Pos
√ã

	)

4815 
	#TIM_CCER_CC2E
 
TIM_CCER_CC2E_Msk


	)

4816 
	#TIM_CCER_CC2P_Pos
 (5U)

	)

4817 
	#TIM_CCER_CC2P_Msk
 (0x1UL << 
TIM_CCER_CC2P_Pos
√ã

	)

4818 
	#TIM_CCER_CC2P
 
TIM_CCER_CC2P_Msk


	)

4819 
	#TIM_CCER_CC2NE_Pos
 (6U)

	)

4820 
	#TIM_CCER_CC2NE_Msk
 (0x1UL << 
TIM_CCER_CC2NE_Pos
√ã

	)

4821 
	#TIM_CCER_CC2NE
 
TIM_CCER_CC2NE_Msk


	)

4822 
	#TIM_CCER_CC2NP_Pos
 (7U)

	)

4823 
	#TIM_CCER_CC2NP_Msk
 (0x1UL << 
TIM_CCER_CC2NP_Pos
√ã

	)

4824 
	#TIM_CCER_CC2NP
 
TIM_CCER_CC2NP_Msk


	)

4825 
	#TIM_CCER_CC3E_Pos
 (8U)

	)

4826 
	#TIM_CCER_CC3E_Msk
 (0x1UL << 
TIM_CCER_CC3E_Pos
√ã

	)

4827 
	#TIM_CCER_CC3E
 
TIM_CCER_CC3E_Msk


	)

4828 
	#TIM_CCER_CC3P_Pos
 (9U)

	)

4829 
	#TIM_CCER_CC3P_Msk
 (0x1UL << 
TIM_CCER_CC3P_Pos
√ã

	)

4830 
	#TIM_CCER_CC3P
 
TIM_CCER_CC3P_Msk


	)

4831 
	#TIM_CCER_CC3NE_Pos
 (10U)

	)

4832 
	#TIM_CCER_CC3NE_Msk
 (0x1UL << 
TIM_CCER_CC3NE_Pos
√ã

	)

4833 
	#TIM_CCER_CC3NE
 
TIM_CCER_CC3NE_Msk


	)

4834 
	#TIM_CCER_CC3NP_Pos
 (11U)

	)

4835 
	#TIM_CCER_CC3NP_Msk
 (0x1UL << 
TIM_CCER_CC3NP_Pos
√ã

	)

4836 
	#TIM_CCER_CC3NP
 
TIM_CCER_CC3NP_Msk


	)

4837 
	#TIM_CCER_CC4E_Pos
 (12U)

	)

4838 
	#TIM_CCER_CC4E_Msk
 (0x1UL << 
TIM_CCER_CC4E_Pos
√ã

	)

4839 
	#TIM_CCER_CC4E
 
TIM_CCER_CC4E_Msk


	)

4840 
	#TIM_CCER_CC4P_Pos
 (13U)

	)

4841 
	#TIM_CCER_CC4P_Msk
 (0x1UL << 
TIM_CCER_CC4P_Pos
√ã

	)

4842 
	#TIM_CCER_CC4P
 
TIM_CCER_CC4P_Msk


	)

4845 
	#TIM_CNT_CNT_Pos
 (0U)

	)

4846 
	#TIM_CNT_CNT_Msk
 (0xFFFFFFFFUL << 
TIM_CNT_CNT_Pos
√ã

	)

4847 
	#TIM_CNT_CNT
 
TIM_CNT_CNT_Msk


	)

4850 
	#TIM_PSC_PSC_Pos
 (0U)

	)

4851 
	#TIM_PSC_PSC_Msk
 (0xFFFFUL << 
TIM_PSC_PSC_Pos
√ã

	)

4852 
	#TIM_PSC_PSC
 
TIM_PSC_PSC_Msk


	)

4855 
	#TIM_ARR_ARR_Pos
 (0U)

	)

4856 
	#TIM_ARR_ARR_Msk
 (0xFFFFFFFFUL << 
TIM_ARR_ARR_Pos
√ã

	)

4857 
	#TIM_ARR_ARR
 
TIM_ARR_ARR_Msk


	)

4860 
	#TIM_RCR_REP_Pos
 (0U)

	)

4861 
	#TIM_RCR_REP_Msk
 (0xFFUL << 
TIM_RCR_REP_Pos
√ã

	)

4862 
	#TIM_RCR_REP
 
TIM_RCR_REP_Msk


	)

4865 
	#TIM_CCR1_CCR1_Pos
 (0U)

	)

4866 
	#TIM_CCR1_CCR1_Msk
 (0xFFFFUL << 
TIM_CCR1_CCR1_Pos
√ã

	)

4867 
	#TIM_CCR1_CCR1
 
TIM_CCR1_CCR1_Msk


	)

4870 
	#TIM_CCR2_CCR2_Pos
 (0U)

	)

4871 
	#TIM_CCR2_CCR2_Msk
 (0xFFFFUL << 
TIM_CCR2_CCR2_Pos
√ã

	)

4872 
	#TIM_CCR2_CCR2
 
TIM_CCR2_CCR2_Msk


	)

4875 
	#TIM_CCR3_CCR3_Pos
 (0U)

	)

4876 
	#TIM_CCR3_CCR3_Msk
 (0xFFFFUL << 
TIM_CCR3_CCR3_Pos
√ã

	)

4877 
	#TIM_CCR3_CCR3
 
TIM_CCR3_CCR3_Msk


	)

4880 
	#TIM_CCR4_CCR4_Pos
 (0U)

	)

4881 
	#TIM_CCR4_CCR4_Msk
 (0xFFFFUL << 
TIM_CCR4_CCR4_Pos
√ã

	)

4882 
	#TIM_CCR4_CCR4
 
TIM_CCR4_CCR4_Msk


	)

4885 
	#TIM_BDTR_DTG_Pos
 (0U)

	)

4886 
	#TIM_BDTR_DTG_Msk
 (0xFFUL << 
TIM_BDTR_DTG_Pos
√ã

	)

4887 
	#TIM_BDTR_DTG
 
TIM_BDTR_DTG_Msk


	)

4888 
	#TIM_BDTR_DTG_0
 (0x01UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4889 
	#TIM_BDTR_DTG_1
 (0x02UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4890 
	#TIM_BDTR_DTG_2
 (0x04UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4891 
	#TIM_BDTR_DTG_3
 (0x08UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4892 
	#TIM_BDTR_DTG_4
 (0x10UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4893 
	#TIM_BDTR_DTG_5
 (0x20UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4894 
	#TIM_BDTR_DTG_6
 (0x40UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4895 
	#TIM_BDTR_DTG_7
 (0x80UL << 
TIM_BDTR_DTG_Pos
√ã

	)

4897 
	#TIM_BDTR_LOCK_Pos
 (8U)

	)

4898 
	#TIM_BDTR_LOCK_Msk
 (0x3UL << 
TIM_BDTR_LOCK_Pos
√ã

	)

4899 
	#TIM_BDTR_LOCK
 
TIM_BDTR_LOCK_Msk


	)

4900 
	#TIM_BDTR_LOCK_0
 (0x1UL << 
TIM_BDTR_LOCK_Pos
√ã

	)

4901 
	#TIM_BDTR_LOCK_1
 (0x2UL << 
TIM_BDTR_LOCK_Pos
√ã

	)

4903 
	#TIM_BDTR_OSSI_Pos
 (10U)

	)

4904 
	#TIM_BDTR_OSSI_Msk
 (0x1UL << 
TIM_BDTR_OSSI_Pos
√ã

	)

4905 
	#TIM_BDTR_OSSI
 
TIM_BDTR_OSSI_Msk


	)

4906 
	#TIM_BDTR_OSSR_Pos
 (11U)

	)

4907 
	#TIM_BDTR_OSSR_Msk
 (0x1UL << 
TIM_BDTR_OSSR_Pos
√ã

	)

4908 
	#TIM_BDTR_OSSR
 
TIM_BDTR_OSSR_Msk


	)

4909 
	#TIM_BDTR_BKE_Pos
 (12U)

	)

4910 
	#TIM_BDTR_BKE_Msk
 (0x1UL << 
TIM_BDTR_BKE_Pos
√ã

	)

4911 
	#TIM_BDTR_BKE
 
TIM_BDTR_BKE_Msk


	)

4912 
	#TIM_BDTR_BKP_Pos
 (13U)

	)

4913 
	#TIM_BDTR_BKP_Msk
 (0x1UL << 
TIM_BDTR_BKP_Pos
√ã

	)

4914 
	#TIM_BDTR_BKP
 
TIM_BDTR_BKP_Msk


	)

4915 
	#TIM_BDTR_AOE_Pos
 (14U)

	)

4916 
	#TIM_BDTR_AOE_Msk
 (0x1UL << 
TIM_BDTR_AOE_Pos
√ã

	)

4917 
	#TIM_BDTR_AOE
 
TIM_BDTR_AOE_Msk


	)

4918 
	#TIM_BDTR_MOE_Pos
 (15U)

	)

4919 
	#TIM_BDTR_MOE_Msk
 (0x1UL << 
TIM_BDTR_MOE_Pos
√ã

	)

4920 
	#TIM_BDTR_MOE
 
TIM_BDTR_MOE_Msk


	)

4923 
	#TIM_DCR_DBA_Pos
 (0U)

	)

4924 
	#TIM_DCR_DBA_Msk
 (0x1FUL << 
TIM_DCR_DBA_Pos
√ã

	)

4925 
	#TIM_DCR_DBA
 
TIM_DCR_DBA_Msk


	)

4926 
	#TIM_DCR_DBA_0
 (0x01UL << 
TIM_DCR_DBA_Pos
√ã

	)

4927 
	#TIM_DCR_DBA_1
 (0x02UL << 
TIM_DCR_DBA_Pos
√ã

	)

4928 
	#TIM_DCR_DBA_2
 (0x04UL << 
TIM_DCR_DBA_Pos
√ã

	)

4929 
	#TIM_DCR_DBA_3
 (0x08UL << 
TIM_DCR_DBA_Pos
√ã

	)

4930 
	#TIM_DCR_DBA_4
 (0x10UL << 
TIM_DCR_DBA_Pos
√ã

	)

4932 
	#TIM_DCR_DBL_Pos
 (8U)

	)

4933 
	#TIM_DCR_DBL_Msk
 (0x1FUL << 
TIM_DCR_DBL_Pos
√ã

	)

4934 
	#TIM_DCR_DBL
 
TIM_DCR_DBL_Msk


	)

4935 
	#TIM_DCR_DBL_0
 (0x01UL << 
TIM_DCR_DBL_Pos
√ã

	)

4936 
	#TIM_DCR_DBL_1
 (0x02UL << 
TIM_DCR_DBL_Pos
√ã

	)

4937 
	#TIM_DCR_DBL_2
 (0x04UL << 
TIM_DCR_DBL_Pos
√ã

	)

4938 
	#TIM_DCR_DBL_3
 (0x08UL << 
TIM_DCR_DBL_Pos
√ã

	)

4939 
	#TIM_DCR_DBL_4
 (0x10UL << 
TIM_DCR_DBL_Pos
√ã

	)

4942 
	#TIM_DMAR_DMAB_Pos
 (0U)

	)

4943 
	#TIM_DMAR_DMAB_Msk
 (0xFFFFUL << 
TIM_DMAR_DMAB_Pos
√ã

	)

4944 
	#TIM_DMAR_DMAB
 
TIM_DMAR_DMAB_Msk


	)

4953 
	#RTC_CRH_SECIE_Pos
 (0U)

	)

4954 
	#RTC_CRH_SECIE_Msk
 (0x1UL << 
RTC_CRH_SECIE_Pos
√ã

	)

4955 
	#RTC_CRH_SECIE
 
RTC_CRH_SECIE_Msk


	)

4956 
	#RTC_CRH_ALRIE_Pos
 (1U)

	)

4957 
	#RTC_CRH_ALRIE_Msk
 (0x1UL << 
RTC_CRH_ALRIE_Pos
√ã

	)

4958 
	#RTC_CRH_ALRIE
 
RTC_CRH_ALRIE_Msk


	)

4959 
	#RTC_CRH_OWIE_Pos
 (2U)

	)

4960 
	#RTC_CRH_OWIE_Msk
 (0x1UL << 
RTC_CRH_OWIE_Pos
√ã

	)

4961 
	#RTC_CRH_OWIE
 
RTC_CRH_OWIE_Msk


	)

4964 
	#RTC_CRL_SECF_Pos
 (0U)

	)

4965 
	#RTC_CRL_SECF_Msk
 (0x1UL << 
RTC_CRL_SECF_Pos
√ã

	)

4966 
	#RTC_CRL_SECF
 
RTC_CRL_SECF_Msk


	)

4967 
	#RTC_CRL_ALRF_Pos
 (1U)

	)

4968 
	#RTC_CRL_ALRF_Msk
 (0x1UL << 
RTC_CRL_ALRF_Pos
√ã

	)

4969 
	#RTC_CRL_ALRF
 
RTC_CRL_ALRF_Msk


	)

4970 
	#RTC_CRL_OWF_Pos
 (2U)

	)

4971 
	#RTC_CRL_OWF_Msk
 (0x1UL << 
RTC_CRL_OWF_Pos
√ã

	)

4972 
	#RTC_CRL_OWF
 
RTC_CRL_OWF_Msk


	)

4973 
	#RTC_CRL_RSF_Pos
 (3U)

	)

4974 
	#RTC_CRL_RSF_Msk
 (0x1UL << 
RTC_CRL_RSF_Pos
√ã

	)

4975 
	#RTC_CRL_RSF
 
RTC_CRL_RSF_Msk


	)

4976 
	#RTC_CRL_CNF_Pos
 (4U)

	)

4977 
	#RTC_CRL_CNF_Msk
 (0x1UL << 
RTC_CRL_CNF_Pos
√ã

	)

4978 
	#RTC_CRL_CNF
 
RTC_CRL_CNF_Msk


	)

4979 
	#RTC_CRL_RTOFF_Pos
 (5U)

	)

4980 
	#RTC_CRL_RTOFF_Msk
 (0x1UL << 
RTC_CRL_RTOFF_Pos
√ã

	)

4981 
	#RTC_CRL_RTOFF
 
RTC_CRL_RTOFF_Msk


	)

4984 
	#RTC_PRLH_PRL_Pos
 (0U)

	)

4985 
	#RTC_PRLH_PRL_Msk
 (0xFUL << 
RTC_PRLH_PRL_Pos
√ã

	)

4986 
	#RTC_PRLH_PRL
 
RTC_PRLH_PRL_Msk


	)

4989 
	#RTC_PRLL_PRL_Pos
 (0U)

	)

4990 
	#RTC_PRLL_PRL_Msk
 (0xFFFFUL << 
RTC_PRLL_PRL_Pos
√ã

	)

4991 
	#RTC_PRLL_PRL
 
RTC_PRLL_PRL_Msk


	)

4994 
	#RTC_DIVH_RTC_DIV_Pos
 (0U)

	)

4995 
	#RTC_DIVH_RTC_DIV_Msk
 (0xFUL << 
RTC_DIVH_RTC_DIV_Pos
√ã

	)

4996 
	#RTC_DIVH_RTC_DIV
 
RTC_DIVH_RTC_DIV_Msk


	)

4999 
	#RTC_DIVL_RTC_DIV_Pos
 (0U)

	)

5000 
	#RTC_DIVL_RTC_DIV_Msk
 (0xFFFFUL << 
RTC_DIVL_RTC_DIV_Pos
√ã

	)

5001 
	#RTC_DIVL_RTC_DIV
 
RTC_DIVL_RTC_DIV_Msk


	)

5004 
	#RTC_CNTH_RTC_CNT_Pos
 (0U)

	)

5005 
	#RTC_CNTH_RTC_CNT_Msk
 (0xFFFFUL << 
RTC_CNTH_RTC_CNT_Pos
√ã

	)

5006 
	#RTC_CNTH_RTC_CNT
 
RTC_CNTH_RTC_CNT_Msk


	)

5009 
	#RTC_CNTL_RTC_CNT_Pos
 (0U)

	)

5010 
	#RTC_CNTL_RTC_CNT_Msk
 (0xFFFFUL << 
RTC_CNTL_RTC_CNT_Pos
√ã

	)

5011 
	#RTC_CNTL_RTC_CNT
 
RTC_CNTL_RTC_CNT_Msk


	)

5014 
	#RTC_ALRH_RTC_ALR_Pos
 (0U)

	)

5015 
	#RTC_ALRH_RTC_ALR_Msk
 (0xFFFFUL << 
RTC_ALRH_RTC_ALR_Pos
√ã

	)

5016 
	#RTC_ALRH_RTC_ALR
 
RTC_ALRH_RTC_ALR_Msk


	)

5019 
	#RTC_ALRL_RTC_ALR_Pos
 (0U)

	)

5020 
	#RTC_ALRL_RTC_ALR_Msk
 (0xFFFFUL << 
RTC_ALRL_RTC_ALR_Pos
√ã

	)

5021 
	#RTC_ALRL_RTC_ALR
 
RTC_ALRL_RTC_ALR_Msk


	)

5030 
	#IWDG_KR_KEY_Pos
 (0U)

	)

5031 
	#IWDG_KR_KEY_Msk
 (0xFFFFUL << 
IWDG_KR_KEY_Pos
√ã

	)

5032 
	#IWDG_KR_KEY
 
IWDG_KR_KEY_Msk


	)

5035 
	#IWDG_PR_PR_Pos
 (0U)

	)

5036 
	#IWDG_PR_PR_Msk
 (0x7UL << 
IWDG_PR_PR_Pos
√ã

	)

5037 
	#IWDG_PR_PR
 
IWDG_PR_PR_Msk


	)

5038 
	#IWDG_PR_PR_0
 (0x1UL << 
IWDG_PR_PR_Pos
√ã

	)

5039 
	#IWDG_PR_PR_1
 (0x2UL << 
IWDG_PR_PR_Pos
√ã

	)

5040 
	#IWDG_PR_PR_2
 (0x4UL << 
IWDG_PR_PR_Pos
√ã

	)

5043 
	#IWDG_RLR_RL_Pos
 (0U)

	)

5044 
	#IWDG_RLR_RL_Msk
 (0xFFFUL << 
IWDG_RLR_RL_Pos
√ã

	)

5045 
	#IWDG_RLR_RL
 
IWDG_RLR_RL_Msk


	)

5048 
	#IWDG_SR_PVU_Pos
 (0U)

	)

5049 
	#IWDG_SR_PVU_Msk
 (0x1UL << 
IWDG_SR_PVU_Pos
√ã

	)

5050 
	#IWDG_SR_PVU
 
IWDG_SR_PVU_Msk


	)

5051 
	#IWDG_SR_RVU_Pos
 (1U)

	)

5052 
	#IWDG_SR_RVU_Msk
 (0x1UL << 
IWDG_SR_RVU_Pos
√ã

	)

5053 
	#IWDG_SR_RVU
 
IWDG_SR_RVU_Msk


	)

5062 
	#WWDG_CR_T_Pos
 (0U)

	)

5063 
	#WWDG_CR_T_Msk
 (0x7FUL << 
WWDG_CR_T_Pos
√ã

	)

5064 
	#WWDG_CR_T
 
WWDG_CR_T_Msk


	)

5065 
	#WWDG_CR_T_0
 (0x01UL << 
WWDG_CR_T_Pos
√ã

	)

5066 
	#WWDG_CR_T_1
 (0x02UL << 
WWDG_CR_T_Pos
√ã

	)

5067 
	#WWDG_CR_T_2
 (0x04UL << 
WWDG_CR_T_Pos
√ã

	)

5068 
	#WWDG_CR_T_3
 (0x08UL << 
WWDG_CR_T_Pos
√ã

	)

5069 
	#WWDG_CR_T_4
 (0x10UL << 
WWDG_CR_T_Pos
√ã

	)

5070 
	#WWDG_CR_T_5
 (0x20UL << 
WWDG_CR_T_Pos
√ã

	)

5071 
	#WWDG_CR_T_6
 (0x40UL << 
WWDG_CR_T_Pos
√ã

	)

5074 
	#WWDG_CR_T0
 
WWDG_CR_T_0


	)

5075 
	#WWDG_CR_T1
 
WWDG_CR_T_1


	)

5076 
	#WWDG_CR_T2
 
WWDG_CR_T_2


	)

5077 
	#WWDG_CR_T3
 
WWDG_CR_T_3


	)

5078 
	#WWDG_CR_T4
 
WWDG_CR_T_4


	)

5079 
	#WWDG_CR_T5
 
WWDG_CR_T_5


	)

5080 
	#WWDG_CR_T6
 
WWDG_CR_T_6


	)

5082 
	#WWDG_CR_WDGA_Pos
 (7U)

	)

5083 
	#WWDG_CR_WDGA_Msk
 (0x1UL << 
WWDG_CR_WDGA_Pos
√ã

	)

5084 
	#WWDG_CR_WDGA
 
WWDG_CR_WDGA_Msk


	)

5087 
	#WWDG_CFR_W_Pos
 (0U)

	)

5088 
	#WWDG_CFR_W_Msk
 (0x7FUL << 
WWDG_CFR_W_Pos
√ã

	)

5089 
	#WWDG_CFR_W
 
WWDG_CFR_W_Msk


	)

5090 
	#WWDG_CFR_W_0
 (0x01UL << 
WWDG_CFR_W_Pos
√ã

	)

5091 
	#WWDG_CFR_W_1
 (0x02UL << 
WWDG_CFR_W_Pos
√ã

	)

5092 
	#WWDG_CFR_W_2
 (0x04UL << 
WWDG_CFR_W_Pos
√ã

	)

5093 
	#WWDG_CFR_W_3
 (0x08UL << 
WWDG_CFR_W_Pos
√ã

	)

5094 
	#WWDG_CFR_W_4
 (0x10UL << 
WWDG_CFR_W_Pos
√ã

	)

5095 
	#WWDG_CFR_W_5
 (0x20UL << 
WWDG_CFR_W_Pos
√ã

	)

5096 
	#WWDG_CFR_W_6
 (0x40UL << 
WWDG_CFR_W_Pos
√ã

	)

5099 
	#WWDG_CFR_W0
 
WWDG_CFR_W_0


	)

5100 
	#WWDG_CFR_W1
 
WWDG_CFR_W_1


	)

5101 
	#WWDG_CFR_W2
 
WWDG_CFR_W_2


	)

5102 
	#WWDG_CFR_W3
 
WWDG_CFR_W_3


	)

5103 
	#WWDG_CFR_W4
 
WWDG_CFR_W_4


	)

5104 
	#WWDG_CFR_W5
 
WWDG_CFR_W_5


	)

5105 
	#WWDG_CFR_W6
 
WWDG_CFR_W_6


	)

5107 
	#WWDG_CFR_WDGTB_Pos
 (7U)

	)

5108 
	#WWDG_CFR_WDGTB_Msk
 (0x3UL << 
WWDG_CFR_WDGTB_Pos
√ã

	)

5109 
	#WWDG_CFR_WDGTB
 
WWDG_CFR_WDGTB_Msk


	)

5110 
	#WWDG_CFR_WDGTB_0
 (0x1UL << 
WWDG_CFR_WDGTB_Pos
√ã

	)

5111 
	#WWDG_CFR_WDGTB_1
 (0x2UL << 
WWDG_CFR_WDGTB_Pos
√ã

	)

5114 
	#WWDG_CFR_WDGTB0
 
WWDG_CFR_WDGTB_0


	)

5115 
	#WWDG_CFR_WDGTB1
 
WWDG_CFR_WDGTB_1


	)

5117 
	#WWDG_CFR_EWI_Pos
 (9U)

	)

5118 
	#WWDG_CFR_EWI_Msk
 (0x1UL << 
WWDG_CFR_EWI_Pos
√ã

	)

5119 
	#WWDG_CFR_EWI
 
WWDG_CFR_EWI_Msk


	)

5122 
	#WWDG_SR_EWIF_Pos
 (0U)

	)

5123 
	#WWDG_SR_EWIF_Msk
 (0x1UL << 
WWDG_SR_EWIF_Pos
√ã

	)

5124 
	#WWDG_SR_EWIF
 
WWDG_SR_EWIF_Msk


	)

5133 
	#FSMC_BCRx_MBKEN_Pos
 (0U)

	)

5134 
	#FSMC_BCRx_MBKEN_Msk
 (0x1UL << 
FSMC_BCRx_MBKEN_Pos
√ã

	)

5135 
	#FSMC_BCRx_MBKEN
 
FSMC_BCRx_MBKEN_Msk


	)

5136 
	#FSMC_BCRx_MUXEN_Pos
 (1U)

	)

5137 
	#FSMC_BCRx_MUXEN_Msk
 (0x1UL << 
FSMC_BCRx_MUXEN_Pos
√ã

	)

5138 
	#FSMC_BCRx_MUXEN
 
FSMC_BCRx_MUXEN_Msk


	)

5140 
	#FSMC_BCRx_MTYP_Pos
 (2U)

	)

5141 
	#FSMC_BCRx_MTYP_Msk
 (0x3UL << 
FSMC_BCRx_MTYP_Pos
√ã

	)

5142 
	#FSMC_BCRx_MTYP
 
FSMC_BCRx_MTYP_Msk


	)

5143 
	#FSMC_BCRx_MTYP_0
 (0x1UL << 
FSMC_BCRx_MTYP_Pos
√ã

	)

5144 
	#FSMC_BCRx_MTYP_1
 (0x2UL << 
FSMC_BCRx_MTYP_Pos
√ã

	)

5146 
	#FSMC_BCRx_MWID_Pos
 (4U)

	)

5147 
	#FSMC_BCRx_MWID_Msk
 (0x3UL << 
FSMC_BCRx_MWID_Pos
√ã

	)

5148 
	#FSMC_BCRx_MWID
 
FSMC_BCRx_MWID_Msk


	)

5149 
	#FSMC_BCRx_MWID_0
 (0x1UL << 
FSMC_BCRx_MWID_Pos
√ã

	)

5150 
	#FSMC_BCRx_MWID_1
 (0x2UL << 
FSMC_BCRx_MWID_Pos
√ã

	)

5152 
	#FSMC_BCRx_FACCEN_Pos
 (6U)

	)

5153 
	#FSMC_BCRx_FACCEN_Msk
 (0x1UL << 
FSMC_BCRx_FACCEN_Pos
√ã

	)

5154 
	#FSMC_BCRx_FACCEN
 
FSMC_BCRx_FACCEN_Msk


	)

5155 
	#FSMC_BCRx_BURSTEN_Pos
 (8U)

	)

5156 
	#FSMC_BCRx_BURSTEN_Msk
 (0x1UL << 
FSMC_BCRx_BURSTEN_Pos
√ã

	)

5157 
	#FSMC_BCRx_BURSTEN
 
FSMC_BCRx_BURSTEN_Msk


	)

5158 
	#FSMC_BCRx_WAITPOL_Pos
 (9U)

	)

5159 
	#FSMC_BCRx_WAITPOL_Msk
 (0x1UL << 
FSMC_BCRx_WAITPOL_Pos
√ã

	)

5160 
	#FSMC_BCRx_WAITPOL
 
FSMC_BCRx_WAITPOL_Msk


	)

5161 
	#FSMC_BCRx_WRAPMOD_Pos
 (10U)

	)

5162 
	#FSMC_BCRx_WRAPMOD_Msk
 (0x1UL << 
FSMC_BCRx_WRAPMOD_Pos
√ã

	)

5163 
	#FSMC_BCRx_WRAPMOD
 
FSMC_BCRx_WRAPMOD_Msk


	)

5164 
	#FSMC_BCRx_WAITCFG_Pos
 (11U)

	)

5165 
	#FSMC_BCRx_WAITCFG_Msk
 (0x1UL << 
FSMC_BCRx_WAITCFG_Pos
√ã

	)

5166 
	#FSMC_BCRx_WAITCFG
 
FSMC_BCRx_WAITCFG_Msk


	)

5167 
	#FSMC_BCRx_WREN_Pos
 (12U)

	)

5168 
	#FSMC_BCRx_WREN_Msk
 (0x1UL << 
FSMC_BCRx_WREN_Pos
√ã

	)

5169 
	#FSMC_BCRx_WREN
 
FSMC_BCRx_WREN_Msk


	)

5170 
	#FSMC_BCRx_WAITEN_Pos
 (13U)

	)

5171 
	#FSMC_BCRx_WAITEN_Msk
 (0x1UL << 
FSMC_BCRx_WAITEN_Pos
√ã

	)

5172 
	#FSMC_BCRx_WAITEN
 
FSMC_BCRx_WAITEN_Msk


	)

5173 
	#FSMC_BCRx_EXTMOD_Pos
 (14U)

	)

5174 
	#FSMC_BCRx_EXTMOD_Msk
 (0x1UL << 
FSMC_BCRx_EXTMOD_Pos
√ã

	)

5175 
	#FSMC_BCRx_EXTMOD
 
FSMC_BCRx_EXTMOD_Msk


	)

5176 
	#FSMC_BCRx_ASYNCWAIT_Pos
 (15U)

	)

5177 
	#FSMC_BCRx_ASYNCWAIT_Msk
 (0x1UL << 
FSMC_BCRx_ASYNCWAIT_Pos
√ã

	)

5178 
	#FSMC_BCRx_ASYNCWAIT
 
FSMC_BCRx_ASYNCWAIT_Msk


	)

5179 
	#FSMC_BCRx_CBURSTRW_Pos
 (19U)

	)

5180 
	#FSMC_BCRx_CBURSTRW_Msk
 (0x1UL << 
FSMC_BCRx_CBURSTRW_Pos
√ã

	)

5181 
	#FSMC_BCRx_CBURSTRW
 
FSMC_BCRx_CBURSTRW_Msk


	)

5184 
	#FSMC_BTRx_ADDSET_Pos
 (0U)

	)

5185 
	#FSMC_BTRx_ADDSET_Msk
 (0xFUL << 
FSMC_BTRx_ADDSET_Pos
√ã

	)

5186 
	#FSMC_BTRx_ADDSET
 
FSMC_BTRx_ADDSET_Msk


	)

5187 
	#FSMC_BTRx_ADDSET_0
 (0x1UL << 
FSMC_BTRx_ADDSET_Pos
√ã

	)

5188 
	#FSMC_BTRx_ADDSET_1
 (0x2UL << 
FSMC_BTRx_ADDSET_Pos
√ã

	)

5189 
	#FSMC_BTRx_ADDSET_2
 (0x4UL << 
FSMC_BTRx_ADDSET_Pos
√ã

	)

5190 
	#FSMC_BTRx_ADDSET_3
 (0x8UL << 
FSMC_BTRx_ADDSET_Pos
√ã

	)

5192 
	#FSMC_BTRx_ADDHLD_Pos
 (4U)

	)

5193 
	#FSMC_BTRx_ADDHLD_Msk
 (0xFUL << 
FSMC_BTRx_ADDHLD_Pos
√ã

	)

5194 
	#FSMC_BTRx_ADDHLD
 
FSMC_BTRx_ADDHLD_Msk


	)

5195 
	#FSMC_BTRx_ADDHLD_0
 (0x1UL << 
FSMC_BTRx_ADDHLD_Pos
√ã

	)

5196 
	#FSMC_BTRx_ADDHLD_1
 (0x2UL << 
FSMC_BTRx_ADDHLD_Pos
√ã

	)

5197 
	#FSMC_BTRx_ADDHLD_2
 (0x4UL << 
FSMC_BTRx_ADDHLD_Pos
√ã

	)

5198 
	#FSMC_BTRx_ADDHLD_3
 (0x8UL << 
FSMC_BTRx_ADDHLD_Pos
√ã

	)

5200 
	#FSMC_BTRx_DATAST_Pos
 (8U)

	)

5201 
	#FSMC_BTRx_DATAST_Msk
 (0xFFUL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5202 
	#FSMC_BTRx_DATAST
 
FSMC_BTRx_DATAST_Msk


	)

5203 
	#FSMC_BTRx_DATAST_0
 (0x01UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5204 
	#FSMC_BTRx_DATAST_1
 (0x02UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5205 
	#FSMC_BTRx_DATAST_2
 (0x04UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5206 
	#FSMC_BTRx_DATAST_3
 (0x08UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5207 
	#FSMC_BTRx_DATAST_4
 (0x10UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5208 
	#FSMC_BTRx_DATAST_5
 (0x20UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5209 
	#FSMC_BTRx_DATAST_6
 (0x40UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5210 
	#FSMC_BTRx_DATAST_7
 (0x80UL << 
FSMC_BTRx_DATAST_Pos
√ã

	)

5212 
	#FSMC_BTRx_BUSTURN_Pos
 (16U)

	)

5213 
	#FSMC_BTRx_BUSTURN_Msk
 (0xFUL << 
FSMC_BTRx_BUSTURN_Pos
√ã

	)

5214 
	#FSMC_BTRx_BUSTURN
 
FSMC_BTRx_BUSTURN_Msk


	)

5215 
	#FSMC_BTRx_BUSTURN_0
 (0x1UL << 
FSMC_BTRx_BUSTURN_Pos
√ã

	)

5216 
	#FSMC_BTRx_BUSTURN_1
 (0x2UL << 
FSMC_BTRx_BUSTURN_Pos
√ã

	)

5217 
	#FSMC_BTRx_BUSTURN_2
 (0x4UL << 
FSMC_BTRx_BUSTURN_Pos
√ã

	)

5218 
	#FSMC_BTRx_BUSTURN_3
 (0x8UL << 
FSMC_BTRx_BUSTURN_Pos
√ã

	)

5220 
	#FSMC_BTRx_CLKDIV_Pos
 (20U)

	)

5221 
	#FSMC_BTRx_CLKDIV_Msk
 (0xFUL << 
FSMC_BTRx_CLKDIV_Pos
√ã

	)

5222 
	#FSMC_BTRx_CLKDIV
 
FSMC_BTRx_CLKDIV_Msk


	)

5223 
	#FSMC_BTRx_CLKDIV_0
 (0x1UL << 
FSMC_BTRx_CLKDIV_Pos
√ã

	)

5224 
	#FSMC_BTRx_CLKDIV_1
 (0x2UL << 
FSMC_BTRx_CLKDIV_Pos
√ã

	)

5225 
	#FSMC_BTRx_CLKDIV_2
 (0x4UL << 
FSMC_BTRx_CLKDIV_Pos
√ã

	)

5226 
	#FSMC_BTRx_CLKDIV_3
 (0x8UL << 
FSMC_BTRx_CLKDIV_Pos
√ã

	)

5228 
	#FSMC_BTRx_DATLAT_Pos
 (24U)

	)

5229 
	#FSMC_BTRx_DATLAT_Msk
 (0xFUL << 
FSMC_BTRx_DATLAT_Pos
√ã

	)

5230 
	#FSMC_BTRx_DATLAT
 
FSMC_BTRx_DATLAT_Msk


	)

5231 
	#FSMC_BTRx_DATLAT_0
 (0x1UL << 
FSMC_BTRx_DATLAT_Pos
√ã

	)

5232 
	#FSMC_BTRx_DATLAT_1
 (0x2UL << 
FSMC_BTRx_DATLAT_Pos
√ã

	)

5233 
	#FSMC_BTRx_DATLAT_2
 (0x4UL << 
FSMC_BTRx_DATLAT_Pos
√ã

	)

5234 
	#FSMC_BTRx_DATLAT_3
 (0x8UL << 
FSMC_BTRx_DATLAT_Pos
√ã

	)

5236 
	#FSMC_BTRx_ACCMOD_Pos
 (28U)

	)

5237 
	#FSMC_BTRx_ACCMOD_Msk
 (0x3UL << 
FSMC_BTRx_ACCMOD_Pos
√ã

	)

5238 
	#FSMC_BTRx_ACCMOD
 
FSMC_BTRx_ACCMOD_Msk


	)

5239 
	#FSMC_BTRx_ACCMOD_0
 (0x1UL << 
FSMC_BTRx_ACCMOD_Pos
√ã

	)

5240 
	#FSMC_BTRx_ACCMOD_1
 (0x2UL << 
FSMC_BTRx_ACCMOD_Pos
√ã

	)

5243 
	#FSMC_BWTRx_ADDSET_Pos
 (0U)

	)

5244 
	#FSMC_BWTRx_ADDSET_Msk
 (0xFUL << 
FSMC_BWTRx_ADDSET_Pos
√ã

	)

5245 
	#FSMC_BWTRx_ADDSET
 
FSMC_BWTRx_ADDSET_Msk


	)

5246 
	#FSMC_BWTRx_ADDSET_0
 (0x1UL << 
FSMC_BWTRx_ADDSET_Pos
√ã

	)

5247 
	#FSMC_BWTRx_ADDSET_1
 (0x2UL << 
FSMC_BWTRx_ADDSET_Pos
√ã

	)

5248 
	#FSMC_BWTRx_ADDSET_2
 (0x4UL << 
FSMC_BWTRx_ADDSET_Pos
√ã

	)

5249 
	#FSMC_BWTRx_ADDSET_3
 (0x8UL << 
FSMC_BWTRx_ADDSET_Pos
√ã

	)

5251 
	#FSMC_BWTRx_ADDHLD_Pos
 (4U)

	)

5252 
	#FSMC_BWTRx_ADDHLD_Msk
 (0xFUL << 
FSMC_BWTRx_ADDHLD_Pos
√ã

	)

5253 
	#FSMC_BWTRx_ADDHLD
 
FSMC_BWTRx_ADDHLD_Msk


	)

5254 
	#FSMC_BWTRx_ADDHLD_0
 (0x1UL << 
FSMC_BWTRx_ADDHLD_Pos
√ã

	)

5255 
	#FSMC_BWTRx_ADDHLD_1
 (0x2UL << 
FSMC_BWTRx_ADDHLD_Pos
√ã

	)

5256 
	#FSMC_BWTRx_ADDHLD_2
 (0x4UL << 
FSMC_BWTRx_ADDHLD_Pos
√ã

	)

5257 
	#FSMC_BWTRx_ADDHLD_3
 (0x8UL << 
FSMC_BWTRx_ADDHLD_Pos
√ã

	)

5259 
	#FSMC_BWTRx_DATAST_Pos
 (8U)

	)

5260 
	#FSMC_BWTRx_DATAST_Msk
 (0xFFUL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5261 
	#FSMC_BWTRx_DATAST
 
FSMC_BWTRx_DATAST_Msk


	)

5262 
	#FSMC_BWTRx_DATAST_0
 (0x01UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5263 
	#FSMC_BWTRx_DATAST_1
 (0x02UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5264 
	#FSMC_BWTRx_DATAST_2
 (0x04UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5265 
	#FSMC_BWTRx_DATAST_3
 (0x08UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5266 
	#FSMC_BWTRx_DATAST_4
 (0x10UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5267 
	#FSMC_BWTRx_DATAST_5
 (0x20UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5268 
	#FSMC_BWTRx_DATAST_6
 (0x40UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5269 
	#FSMC_BWTRx_DATAST_7
 (0x80UL << 
FSMC_BWTRx_DATAST_Pos
√ã

	)

5271 
	#FSMC_BWTRx_BUSTURN_Pos
 (16U)

	)

5272 
	#FSMC_BWTRx_BUSTURN_Msk
 (0xFUL << 
FSMC_BWTRx_BUSTURN_Pos
√ã

	)

5273 
	#FSMC_BWTRx_BUSTURN
 
FSMC_BWTRx_BUSTURN_Msk


	)

5274 
	#FSMC_BWTRx_BUSTURN_0
 (0x1UL << 
FSMC_BWTRx_BUSTURN_Pos
√ã

	)

5275 
	#FSMC_BWTRx_BUSTURN_1
 (0x2UL << 
FSMC_BWTRx_BUSTURN_Pos
√ã

	)

5276 
	#FSMC_BWTRx_BUSTURN_2
 (0x4UL << 
FSMC_BWTRx_BUSTURN_Pos
√ã

	)

5277 
	#FSMC_BWTRx_BUSTURN_3
 (0x8UL << 
FSMC_BWTRx_BUSTURN_Pos
√ã

	)

5279 
	#FSMC_BWTRx_ACCMOD_Pos
 (28U)

	)

5280 
	#FSMC_BWTRx_ACCMOD_Msk
 (0x3UL << 
FSMC_BWTRx_ACCMOD_Pos
√ã

	)

5281 
	#FSMC_BWTRx_ACCMOD
 
FSMC_BWTRx_ACCMOD_Msk


	)

5282 
	#FSMC_BWTRx_ACCMOD_0
 (0x1UL << 
FSMC_BWTRx_ACCMOD_Pos
√ã

	)

5283 
	#FSMC_BWTRx_ACCMOD_1
 (0x2UL << 
FSMC_BWTRx_ACCMOD_Pos
√ã

	)

5286 
	#FSMC_PCRx_PWAITEN_Pos
 (1U)

	)

5287 
	#FSMC_PCRx_PWAITEN_Msk
 (0x1UL << 
FSMC_PCRx_PWAITEN_Pos
√ã

	)

5288 
	#FSMC_PCRx_PWAITEN
 
FSMC_PCRx_PWAITEN_Msk


	)

5289 
	#FSMC_PCRx_PBKEN_Pos
 (2U)

	)

5290 
	#FSMC_PCRx_PBKEN_Msk
 (0x1UL << 
FSMC_PCRx_PBKEN_Pos
√ã

	)

5291 
	#FSMC_PCRx_PBKEN
 
FSMC_PCRx_PBKEN_Msk


	)

5292 
	#FSMC_PCRx_PTYP_Pos
 (3U)

	)

5293 
	#FSMC_PCRx_PTYP_Msk
 (0x1UL << 
FSMC_PCRx_PTYP_Pos
√ã

	)

5294 
	#FSMC_PCRx_PTYP
 
FSMC_PCRx_PTYP_Msk


	)

5296 
	#FSMC_PCRx_PWID_Pos
 (4U)

	)

5297 
	#FSMC_PCRx_PWID_Msk
 (0x3UL << 
FSMC_PCRx_PWID_Pos
√ã

	)

5298 
	#FSMC_PCRx_PWID
 
FSMC_PCRx_PWID_Msk


	)

5299 
	#FSMC_PCRx_PWID_0
 (0x1UL << 
FSMC_PCRx_PWID_Pos
√ã

	)

5300 
	#FSMC_PCRx_PWID_1
 (0x2UL << 
FSMC_PCRx_PWID_Pos
√ã

	)

5302 
	#FSMC_PCRx_ECCEN_Pos
 (6U)

	)

5303 
	#FSMC_PCRx_ECCEN_Msk
 (0x1UL << 
FSMC_PCRx_ECCEN_Pos
√ã

	)

5304 
	#FSMC_PCRx_ECCEN
 
FSMC_PCRx_ECCEN_Msk


	)

5306 
	#FSMC_PCRx_TCLR_Pos
 (9U)

	)

5307 
	#FSMC_PCRx_TCLR_Msk
 (0xFUL << 
FSMC_PCRx_TCLR_Pos
√ã

	)

5308 
	#FSMC_PCRx_TCLR
 
FSMC_PCRx_TCLR_Msk


	)

5309 
	#FSMC_PCRx_TCLR_0
 (0x1UL << 
FSMC_PCRx_TCLR_Pos
√ã

	)

5310 
	#FSMC_PCRx_TCLR_1
 (0x2UL << 
FSMC_PCRx_TCLR_Pos
√ã

	)

5311 
	#FSMC_PCRx_TCLR_2
 (0x4UL << 
FSMC_PCRx_TCLR_Pos
√ã

	)

5312 
	#FSMC_PCRx_TCLR_3
 (0x8UL << 
FSMC_PCRx_TCLR_Pos
√ã

	)

5314 
	#FSMC_PCRx_TAR_Pos
 (13U)

	)

5315 
	#FSMC_PCRx_TAR_Msk
 (0xFUL << 
FSMC_PCRx_TAR_Pos
√ã

	)

5316 
	#FSMC_PCRx_TAR
 
FSMC_PCRx_TAR_Msk


	)

5317 
	#FSMC_PCRx_TAR_0
 (0x1UL << 
FSMC_PCRx_TAR_Pos
√ã

	)

5318 
	#FSMC_PCRx_TAR_1
 (0x2UL << 
FSMC_PCRx_TAR_Pos
√ã

	)

5319 
	#FSMC_PCRx_TAR_2
 (0x4UL << 
FSMC_PCRx_TAR_Pos
√ã

	)

5320 
	#FSMC_PCRx_TAR_3
 (0x8UL << 
FSMC_PCRx_TAR_Pos
√ã

	)

5322 
	#FSMC_PCRx_ECCPS_Pos
 (17U)

	)

5323 
	#FSMC_PCRx_ECCPS_Msk
 (0x7UL << 
FSMC_PCRx_ECCPS_Pos
√ã

	)

5324 
	#FSMC_PCRx_ECCPS
 
FSMC_PCRx_ECCPS_Msk


	)

5325 
	#FSMC_PCRx_ECCPS_0
 (0x1UL << 
FSMC_PCRx_ECCPS_Pos
√ã

	)

5326 
	#FSMC_PCRx_ECCPS_1
 (0x2UL << 
FSMC_PCRx_ECCPS_Pos
√ã

	)

5327 
	#FSMC_PCRx_ECCPS_2
 (0x4UL << 
FSMC_PCRx_ECCPS_Pos
√ã

	)

5330 
	#FSMC_SRx_IRS_Pos
 (0U)

	)

5331 
	#FSMC_SRx_IRS_Msk
 (0x1UL << 
FSMC_SRx_IRS_Pos
√ã

	)

5332 
	#FSMC_SRx_IRS
 
FSMC_SRx_IRS_Msk


	)

5333 
	#FSMC_SRx_ILS_Pos
 (1U)

	)

5334 
	#FSMC_SRx_ILS_Msk
 (0x1UL << 
FSMC_SRx_ILS_Pos
√ã

	)

5335 
	#FSMC_SRx_ILS
 
FSMC_SRx_ILS_Msk


	)

5336 
	#FSMC_SRx_IFS_Pos
 (2U)

	)

5337 
	#FSMC_SRx_IFS_Msk
 (0x1UL << 
FSMC_SRx_IFS_Pos
√ã

	)

5338 
	#FSMC_SRx_IFS
 
FSMC_SRx_IFS_Msk


	)

5339 
	#FSMC_SRx_IREN_Pos
 (3U)

	)

5340 
	#FSMC_SRx_IREN_Msk
 (0x1UL << 
FSMC_SRx_IREN_Pos
√ã

	)

5341 
	#FSMC_SRx_IREN
 
FSMC_SRx_IREN_Msk


	)

5342 
	#FSMC_SRx_ILEN_Pos
 (4U)

	)

5343 
	#FSMC_SRx_ILEN_Msk
 (0x1UL << 
FSMC_SRx_ILEN_Pos
√ã

	)

5344 
	#FSMC_SRx_ILEN
 
FSMC_SRx_ILEN_Msk


	)

5345 
	#FSMC_SRx_IFEN_Pos
 (5U)

	)

5346 
	#FSMC_SRx_IFEN_Msk
 (0x1UL << 
FSMC_SRx_IFEN_Pos
√ã

	)

5347 
	#FSMC_SRx_IFEN
 
FSMC_SRx_IFEN_Msk


	)

5348 
	#FSMC_SRx_FEMPT_Pos
 (6U)

	)

5349 
	#FSMC_SRx_FEMPT_Msk
 (0x1UL << 
FSMC_SRx_FEMPT_Pos
√ã

	)

5350 
	#FSMC_SRx_FEMPT
 
FSMC_SRx_FEMPT_Msk


	)

5353 
	#FSMC_PMEMx_MEMSETx_Pos
 (0U)

	)

5354 
	#FSMC_PMEMx_MEMSETx_Msk
 (0xFFUL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5355 
	#FSMC_PMEMx_MEMSETx
 
FSMC_PMEMx_MEMSETx_Msk


	)

5356 
	#FSMC_PMEMx_MEMSETx_0
 (0x01UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5357 
	#FSMC_PMEMx_MEMSETx_1
 (0x02UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5358 
	#FSMC_PMEMx_MEMSETx_2
 (0x04UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5359 
	#FSMC_PMEMx_MEMSETx_3
 (0x08UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5360 
	#FSMC_PMEMx_MEMSETx_4
 (0x10UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5361 
	#FSMC_PMEMx_MEMSETx_5
 (0x20UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5362 
	#FSMC_PMEMx_MEMSETx_6
 (0x40UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5363 
	#FSMC_PMEMx_MEMSETx_7
 (0x80UL << 
FSMC_PMEMx_MEMSETx_Pos
√ã

	)

5365 
	#FSMC_PMEMx_MEMWAITx_Pos
 (8U)

	)

5366 
	#FSMC_PMEMx_MEMWAITx_Msk
 (0xFFUL << 
FSMC_PMEMx_MEMWAITx_Pos
√ã

	)

5367 
	#FSMC_PMEMx_MEMWAITx
 
FSMC_PMEMx_MEMWAITx_Msk


	)

5368 
	#FSMC_PMEMx_MEMWAIT2_0
 0x00000100U

	)

5369 
	#FSMC_PMEMx_MEMWAITx_1
 0x00000200U

	)

5370 
	#FSMC_PMEMx_MEMWAITx_2
 0x00000400U

	)

5371 
	#FSMC_PMEMx_MEMWAITx_3
 0x00000800U

	)

5372 
	#FSMC_PMEMx_MEMWAITx_4
 0x00001000U

	)

5373 
	#FSMC_PMEMx_MEMWAITx_5
 0x00002000U

	)

5374 
	#FSMC_PMEMx_MEMWAITx_6
 0x00004000U

	)

5375 
	#FSMC_PMEMx_MEMWAITx_7
 0x00008000U

	)

5377 
	#FSMC_PMEMx_MEMHOLDx_Pos
 (16U)

	)

5378 
	#FSMC_PMEMx_MEMHOLDx_Msk
 (0xFFUL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5379 
	#FSMC_PMEMx_MEMHOLDx
 
FSMC_PMEMx_MEMHOLDx_Msk


	)

5380 
	#FSMC_PMEMx_MEMHOLDx_0
 (0x01UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5381 
	#FSMC_PMEMx_MEMHOLDx_1
 (0x02UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5382 
	#FSMC_PMEMx_MEMHOLDx_2
 (0x04UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5383 
	#FSMC_PMEMx_MEMHOLDx_3
 (0x08UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5384 
	#FSMC_PMEMx_MEMHOLDx_4
 (0x10UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5385 
	#FSMC_PMEMx_MEMHOLDx_5
 (0x20UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5386 
	#FSMC_PMEMx_MEMHOLDx_6
 (0x40UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5387 
	#FSMC_PMEMx_MEMHOLDx_7
 (0x80UL << 
FSMC_PMEMx_MEMHOLDx_Pos
√ã

	)

5389 
	#FSMC_PMEMx_MEMHIZx_Pos
 (24U)

	)

5390 
	#FSMC_PMEMx_MEMHIZx_Msk
 (0xFFUL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5391 
	#FSMC_PMEMx_MEMHIZx
 
FSMC_PMEMx_MEMHIZx_Msk


	)

5392 
	#FSMC_PMEMx_MEMHIZx_0
 (0x01UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5393 
	#FSMC_PMEMx_MEMHIZx_1
 (0x02UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5394 
	#FSMC_PMEMx_MEMHIZx_2
 (0x04UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5395 
	#FSMC_PMEMx_MEMHIZx_3
 (0x08UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5396 
	#FSMC_PMEMx_MEMHIZx_4
 (0x10UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5397 
	#FSMC_PMEMx_MEMHIZx_5
 (0x20UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5398 
	#FSMC_PMEMx_MEMHIZx_6
 (0x40UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5399 
	#FSMC_PMEMx_MEMHIZx_7
 (0x80UL << 
FSMC_PMEMx_MEMHIZx_Pos
√ã

	)

5402 
	#FSMC_PATTx_ATTSETx_Pos
 (0U)

	)

5403 
	#FSMC_PATTx_ATTSETx_Msk
 (0xFFUL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5404 
	#FSMC_PATTx_ATTSETx
 
FSMC_PATTx_ATTSETx_Msk


	)

5405 
	#FSMC_PATTx_ATTSETx_0
 (0x01UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5406 
	#FSMC_PATTx_ATTSETx_1
 (0x02UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5407 
	#FSMC_PATTx_ATTSETx_2
 (0x04UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5408 
	#FSMC_PATTx_ATTSETx_3
 (0x08UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5409 
	#FSMC_PATTx_ATTSETx_4
 (0x10UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5410 
	#FSMC_PATTx_ATTSETx_5
 (0x20UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5411 
	#FSMC_PATTx_ATTSETx_6
 (0x40UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5412 
	#FSMC_PATTx_ATTSETx_7
 (0x80UL << 
FSMC_PATTx_ATTSETx_Pos
√ã

	)

5414 
	#FSMC_PATTx_ATTWAITx_Pos
 (8U)

	)

5415 
	#FSMC_PATTx_ATTWAITx_Msk
 (0xFFUL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5416 
	#FSMC_PATTx_ATTWAITx
 
FSMC_PATTx_ATTWAITx_Msk


	)

5417 
	#FSMC_PATTx_ATTWAITx_0
 (0x01UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5418 
	#FSMC_PATTx_ATTWAITx_1
 (0x02UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5419 
	#FSMC_PATTx_ATTWAITx_2
 (0x04UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5420 
	#FSMC_PATTx_ATTWAITx_3
 (0x08UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5421 
	#FSMC_PATTx_ATTWAITx_4
 (0x10UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5422 
	#FSMC_PATTx_ATTWAITx_5
 (0x20UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5423 
	#FSMC_PATTx_ATTWAITx_6
 (0x40UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5424 
	#FSMC_PATTx_ATTWAITx_7
 (0x80UL << 
FSMC_PATTx_ATTWAITx_Pos
√ã

	)

5426 
	#FSMC_PATTx_ATTHOLDx_Pos
 (16U)

	)

5427 
	#FSMC_PATTx_ATTHOLDx_Msk
 (0xFFUL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5428 
	#FSMC_PATTx_ATTHOLDx
 
FSMC_PATTx_ATTHOLDx_Msk


	)

5429 
	#FSMC_PATTx_ATTHOLDx_0
 (0x01UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5430 
	#FSMC_PATTx_ATTHOLDx_1
 (0x02UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5431 
	#FSMC_PATTx_ATTHOLDx_2
 (0x04UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5432 
	#FSMC_PATTx_ATTHOLDx_3
 (0x08UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5433 
	#FSMC_PATTx_ATTHOLDx_4
 (0x10UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5434 
	#FSMC_PATTx_ATTHOLDx_5
 (0x20UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5435 
	#FSMC_PATTx_ATTHOLDx_6
 (0x40UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5436 
	#FSMC_PATTx_ATTHOLDx_7
 (0x80UL << 
FSMC_PATTx_ATTHOLDx_Pos
√ã

	)

5438 
	#FSMC_PATTx_ATTHIZx_Pos
 (24U)

	)

5439 
	#FSMC_PATTx_ATTHIZx_Msk
 (0xFFUL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5440 
	#FSMC_PATTx_ATTHIZx
 
FSMC_PATTx_ATTHIZx_Msk


	)

5441 
	#FSMC_PATTx_ATTHIZx_0
 (0x01UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5442 
	#FSMC_PATTx_ATTHIZx_1
 (0x02UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5443 
	#FSMC_PATTx_ATTHIZx_2
 (0x04UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5444 
	#FSMC_PATTx_ATTHIZx_3
 (0x08UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5445 
	#FSMC_PATTx_ATTHIZx_4
 (0x10UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5446 
	#FSMC_PATTx_ATTHIZx_5
 (0x20UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5447 
	#FSMC_PATTx_ATTHIZx_6
 (0x40UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5448 
	#FSMC_PATTx_ATTHIZx_7
 (0x80UL << 
FSMC_PATTx_ATTHIZx_Pos
√ã

	)

5451 
	#FSMC_PIO4_IOSET4_Pos
 (0U)

	)

5452 
	#FSMC_PIO4_IOSET4_Msk
 (0xFFUL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5453 
	#FSMC_PIO4_IOSET4
 
FSMC_PIO4_IOSET4_Msk


	)

5454 
	#FSMC_PIO4_IOSET4_0
 (0x01UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5455 
	#FSMC_PIO4_IOSET4_1
 (0x02UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5456 
	#FSMC_PIO4_IOSET4_2
 (0x04UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5457 
	#FSMC_PIO4_IOSET4_3
 (0x08UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5458 
	#FSMC_PIO4_IOSET4_4
 (0x10UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5459 
	#FSMC_PIO4_IOSET4_5
 (0x20UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5460 
	#FSMC_PIO4_IOSET4_6
 (0x40UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5461 
	#FSMC_PIO4_IOSET4_7
 (0x80UL << 
FSMC_PIO4_IOSET4_Pos
√ã

	)

5463 
	#FSMC_PIO4_IOWAIT4_Pos
 (8U)

	)

5464 
	#FSMC_PIO4_IOWAIT4_Msk
 (0xFFUL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5465 
	#FSMC_PIO4_IOWAIT4
 
FSMC_PIO4_IOWAIT4_Msk


	)

5466 
	#FSMC_PIO4_IOWAIT4_0
 (0x01UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5467 
	#FSMC_PIO4_IOWAIT4_1
 (0x02UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5468 
	#FSMC_PIO4_IOWAIT4_2
 (0x04UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5469 
	#FSMC_PIO4_IOWAIT4_3
 (0x08UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5470 
	#FSMC_PIO4_IOWAIT4_4
 (0x10UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5471 
	#FSMC_PIO4_IOWAIT4_5
 (0x20UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5472 
	#FSMC_PIO4_IOWAIT4_6
 (0x40UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5473 
	#FSMC_PIO4_IOWAIT4_7
 (0x80UL << 
FSMC_PIO4_IOWAIT4_Pos
√ã

	)

5475 
	#FSMC_PIO4_IOHOLD4_Pos
 (16U)

	)

5476 
	#FSMC_PIO4_IOHOLD4_Msk
 (0xFFUL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5477 
	#FSMC_PIO4_IOHOLD4
 
FSMC_PIO4_IOHOLD4_Msk


	)

5478 
	#FSMC_PIO4_IOHOLD4_0
 (0x01UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5479 
	#FSMC_PIO4_IOHOLD4_1
 (0x02UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5480 
	#FSMC_PIO4_IOHOLD4_2
 (0x04UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5481 
	#FSMC_PIO4_IOHOLD4_3
 (0x08UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5482 
	#FSMC_PIO4_IOHOLD4_4
 (0x10UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5483 
	#FSMC_PIO4_IOHOLD4_5
 (0x20UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5484 
	#FSMC_PIO4_IOHOLD4_6
 (0x40UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5485 
	#FSMC_PIO4_IOHOLD4_7
 (0x80UL << 
FSMC_PIO4_IOHOLD4_Pos
√ã

	)

5487 
	#FSMC_PIO4_IOHIZ4_Pos
 (24U)

	)

5488 
	#FSMC_PIO4_IOHIZ4_Msk
 (0xFFUL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5489 
	#FSMC_PIO4_IOHIZ4
 
FSMC_PIO4_IOHIZ4_Msk


	)

5490 
	#FSMC_PIO4_IOHIZ4_0
 (0x01UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5491 
	#FSMC_PIO4_IOHIZ4_1
 (0x02UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5492 
	#FSMC_PIO4_IOHIZ4_2
 (0x04UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5493 
	#FSMC_PIO4_IOHIZ4_3
 (0x08UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5494 
	#FSMC_PIO4_IOHIZ4_4
 (0x10UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5495 
	#FSMC_PIO4_IOHIZ4_5
 (0x20UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5496 
	#FSMC_PIO4_IOHIZ4_6
 (0x40UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5497 
	#FSMC_PIO4_IOHIZ4_7
 (0x80UL << 
FSMC_PIO4_IOHIZ4_Pos
√ã

	)

5500 
	#FSMC_ECCR2_ECC2_Pos
 (0U)

	)

5501 
	#FSMC_ECCR2_ECC2_Msk
 (0xFFFFFFFFUL << 
FSMC_ECCR2_ECC2_Pos
√ã

	)

5502 
	#FSMC_ECCR2_ECC2
 
FSMC_ECCR2_ECC2_Msk


	)

5505 
	#FSMC_ECCR3_ECC3_Pos
 (0U)

	)

5506 
	#FSMC_ECCR3_ECC3_Msk
 (0xFFFFFFFFUL << 
FSMC_ECCR3_ECC3_Pos
√ã

	)

5507 
	#FSMC_ECCR3_ECC3
 
FSMC_ECCR3_ECC3_Msk


	)

5516 
	#SDIO_POWER_PWRCTRL_Pos
 (0U)

	)

5517 
	#SDIO_POWER_PWRCTRL_Msk
 (0x3UL << 
SDIO_POWER_PWRCTRL_Pos
√ã

	)

5518 
	#SDIO_POWER_PWRCTRL
 
SDIO_POWER_PWRCTRL_Msk


	)

5519 
	#SDIO_POWER_PWRCTRL_0
 (0x1UL << 
SDIO_POWER_PWRCTRL_Pos
√ã

	)

5520 
	#SDIO_POWER_PWRCTRL_1
 (0x2UL << 
SDIO_POWER_PWRCTRL_Pos
√ã

	)

5523 
	#SDIO_CLKCR_CLKDIV_Pos
 (0U)

	)

5524 
	#SDIO_CLKCR_CLKDIV_Msk
 (0xFFUL << 
SDIO_CLKCR_CLKDIV_Pos
√ã

	)

5525 
	#SDIO_CLKCR_CLKDIV
 
SDIO_CLKCR_CLKDIV_Msk


	)

5526 
	#SDIO_CLKCR_CLKEN_Pos
 (8U)

	)

5527 
	#SDIO_CLKCR_CLKEN_Msk
 (0x1UL << 
SDIO_CLKCR_CLKEN_Pos
√ã

	)

5528 
	#SDIO_CLKCR_CLKEN
 
SDIO_CLKCR_CLKEN_Msk


	)

5529 
	#SDIO_CLKCR_PWRSAV_Pos
 (9U)

	)

5530 
	#SDIO_CLKCR_PWRSAV_Msk
 (0x1UL << 
SDIO_CLKCR_PWRSAV_Pos
√ã

	)

5531 
	#SDIO_CLKCR_PWRSAV
 
SDIO_CLKCR_PWRSAV_Msk


	)

5532 
	#SDIO_CLKCR_BYPASS_Pos
 (10U)

	)

5533 
	#SDIO_CLKCR_BYPASS_Msk
 (0x1UL << 
SDIO_CLKCR_BYPASS_Pos
√ã

	)

5534 
	#SDIO_CLKCR_BYPASS
 
SDIO_CLKCR_BYPASS_Msk


	)

5536 
	#SDIO_CLKCR_WIDBUS_Pos
 (11U)

	)

5537 
	#SDIO_CLKCR_WIDBUS_Msk
 (0x3UL << 
SDIO_CLKCR_WIDBUS_Pos
√ã

	)

5538 
	#SDIO_CLKCR_WIDBUS
 
SDIO_CLKCR_WIDBUS_Msk


	)

5539 
	#SDIO_CLKCR_WIDBUS_0
 (0x1UL << 
SDIO_CLKCR_WIDBUS_Pos
√ã

	)

5540 
	#SDIO_CLKCR_WIDBUS_1
 (0x2UL << 
SDIO_CLKCR_WIDBUS_Pos
√ã

	)

5542 
	#SDIO_CLKCR_NEGEDGE_Pos
 (13U)

	)

5543 
	#SDIO_CLKCR_NEGEDGE_Msk
 (0x1UL << 
SDIO_CLKCR_NEGEDGE_Pos
√ã

	)

5544 
	#SDIO_CLKCR_NEGEDGE
 
SDIO_CLKCR_NEGEDGE_Msk


	)

5545 
	#SDIO_CLKCR_HWFC_EN_Pos
 (14U)

	)

5546 
	#SDIO_CLKCR_HWFC_EN_Msk
 (0x1UL << 
SDIO_CLKCR_HWFC_EN_Pos
√ã

	)

5547 
	#SDIO_CLKCR_HWFC_EN
 
SDIO_CLKCR_HWFC_EN_Msk


	)

5550 
	#SDIO_ARG_CMDARG_Pos
 (0U)

	)

5551 
	#SDIO_ARG_CMDARG_Msk
 (0xFFFFFFFFUL << 
SDIO_ARG_CMDARG_Pos
√ã

	)

5552 
	#SDIO_ARG_CMDARG
 
SDIO_ARG_CMDARG_Msk


	)

5555 
	#SDIO_CMD_CMDINDEX_Pos
 (0U)

	)

5556 
	#SDIO_CMD_CMDINDEX_Msk
 (0x3FUL << 
SDIO_CMD_CMDINDEX_Pos
√ã

	)

5557 
	#SDIO_CMD_CMDINDEX
 
SDIO_CMD_CMDINDEX_Msk


	)

5559 
	#SDIO_CMD_WAITRESP_Pos
 (6U)

	)

5560 
	#SDIO_CMD_WAITRESP_Msk
 (0x3UL << 
SDIO_CMD_WAITRESP_Pos
√ã

	)

5561 
	#SDIO_CMD_WAITRESP
 
SDIO_CMD_WAITRESP_Msk


	)

5562 
	#SDIO_CMD_WAITRESP_0
 (0x1UL << 
SDIO_CMD_WAITRESP_Pos
√ã

	)

5563 
	#SDIO_CMD_WAITRESP_1
 (0x2UL << 
SDIO_CMD_WAITRESP_Pos
√ã

	)

5565 
	#SDIO_CMD_WAITINT_Pos
 (8U)

	)

5566 
	#SDIO_CMD_WAITINT_Msk
 (0x1UL << 
SDIO_CMD_WAITINT_Pos
√ã

	)

5567 
	#SDIO_CMD_WAITINT
 
SDIO_CMD_WAITINT_Msk


	)

5568 
	#SDIO_CMD_WAITPEND_Pos
 (9U)

	)

5569 
	#SDIO_CMD_WAITPEND_Msk
 (0x1UL << 
SDIO_CMD_WAITPEND_Pos
√ã

	)

5570 
	#SDIO_CMD_WAITPEND
 
SDIO_CMD_WAITPEND_Msk


	)

5571 
	#SDIO_CMD_CPSMEN_Pos
 (10U)

	)

5572 
	#SDIO_CMD_CPSMEN_Msk
 (0x1UL << 
SDIO_CMD_CPSMEN_Pos
√ã

	)

5573 
	#SDIO_CMD_CPSMEN
 
SDIO_CMD_CPSMEN_Msk


	)

5574 
	#SDIO_CMD_SDIOSUSPEND_Pos
 (11U)

	)

5575 
	#SDIO_CMD_SDIOSUSPEND_Msk
 (0x1UL << 
SDIO_CMD_SDIOSUSPEND_Pos
√ã

	)

5576 
	#SDIO_CMD_SDIOSUSPEND
 
SDIO_CMD_SDIOSUSPEND_Msk


	)

5577 
	#SDIO_CMD_ENCMDCOMPL_Pos
 (12U)

	)

5578 
	#SDIO_CMD_ENCMDCOMPL_Msk
 (0x1UL << 
SDIO_CMD_ENCMDCOMPL_Pos
√ã

	)

5579 
	#SDIO_CMD_ENCMDCOMPL
 
SDIO_CMD_ENCMDCOMPL_Msk


	)

5580 
	#SDIO_CMD_NIEN_Pos
 (13U)

	)

5581 
	#SDIO_CMD_NIEN_Msk
 (0x1UL << 
SDIO_CMD_NIEN_Pos
√ã

	)

5582 
	#SDIO_CMD_NIEN
 
SDIO_CMD_NIEN_Msk


	)

5583 
	#SDIO_CMD_CEATACMD_Pos
 (14U)

	)

5584 
	#SDIO_CMD_CEATACMD_Msk
 (0x1UL << 
SDIO_CMD_CEATACMD_Pos
√ã

	)

5585 
	#SDIO_CMD_CEATACMD
 
SDIO_CMD_CEATACMD_Msk


	)

5588 
	#SDIO_RESPCMD_RESPCMD_Pos
 (0U)

	)

5589 
	#SDIO_RESPCMD_RESPCMD_Msk
 (0x3FUL << 
SDIO_RESPCMD_RESPCMD_Pos
√ã

	)

5590 
	#SDIO_RESPCMD_RESPCMD
 
SDIO_RESPCMD_RESPCMD_Msk


	)

5593 
	#SDIO_RESP0_CARDSTATUS0_Pos
 (0U)

	)

5594 
	#SDIO_RESP0_CARDSTATUS0_Msk
 (0xFFFFFFFFUL << 
SDIO_RESP0_CARDSTATUS0_Pos
√ã

	)

5595 
	#SDIO_RESP0_CARDSTATUS0
 
SDIO_RESP0_CARDSTATUS0_Msk


	)

5598 
	#SDIO_RESP1_CARDSTATUS1_Pos
 (0U)

	)

5599 
	#SDIO_RESP1_CARDSTATUS1_Msk
 (0xFFFFFFFFUL << 
SDIO_RESP1_CARDSTATUS1_Pos
√ã

	)

5600 
	#SDIO_RESP1_CARDSTATUS1
 
SDIO_RESP1_CARDSTATUS1_Msk


	)

5603 
	#SDIO_RESP2_CARDSTATUS2_Pos
 (0U)

	)

5604 
	#SDIO_RESP2_CARDSTATUS2_Msk
 (0xFFFFFFFFUL << 
SDIO_RESP2_CARDSTATUS2_Pos
√ã

	)

5605 
	#SDIO_RESP2_CARDSTATUS2
 
SDIO_RESP2_CARDSTATUS2_Msk


	)

5608 
	#SDIO_RESP3_CARDSTATUS3_Pos
 (0U)

	)

5609 
	#SDIO_RESP3_CARDSTATUS3_Msk
 (0xFFFFFFFFUL << 
SDIO_RESP3_CARDSTATUS3_Pos
√ã

	)

5610 
	#SDIO_RESP3_CARDSTATUS3
 
SDIO_RESP3_CARDSTATUS3_Msk


	)

5613 
	#SDIO_RESP4_CARDSTATUS4_Pos
 (0U)

	)

5614 
	#SDIO_RESP4_CARDSTATUS4_Msk
 (0xFFFFFFFFUL << 
SDIO_RESP4_CARDSTATUS4_Pos
√ã

	)

5615 
	#SDIO_RESP4_CARDSTATUS4
 
SDIO_RESP4_CARDSTATUS4_Msk


	)

5618 
	#SDIO_DTIMER_DATATIME_Pos
 (0U)

	)

5619 
	#SDIO_DTIMER_DATATIME_Msk
 (0xFFFFFFFFUL << 
SDIO_DTIMER_DATATIME_Pos
√ã

	)

5620 
	#SDIO_DTIMER_DATATIME
 
SDIO_DTIMER_DATATIME_Msk


	)

5623 
	#SDIO_DLEN_DATALENGTH_Pos
 (0U)

	)

5624 
	#SDIO_DLEN_DATALENGTH_Msk
 (0x1FFFFFFUL << 
SDIO_DLEN_DATALENGTH_Pos
√ã

	)

5625 
	#SDIO_DLEN_DATALENGTH
 
SDIO_DLEN_DATALENGTH_Msk


	)

5628 
	#SDIO_DCTRL_DTEN_Pos
 (0U)

	)

5629 
	#SDIO_DCTRL_DTEN_Msk
 (0x1UL << 
SDIO_DCTRL_DTEN_Pos
√ã

	)

5630 
	#SDIO_DCTRL_DTEN
 
SDIO_DCTRL_DTEN_Msk


	)

5631 
	#SDIO_DCTRL_DTDIR_Pos
 (1U)

	)

5632 
	#SDIO_DCTRL_DTDIR_Msk
 (0x1UL << 
SDIO_DCTRL_DTDIR_Pos
√ã

	)

5633 
	#SDIO_DCTRL_DTDIR
 
SDIO_DCTRL_DTDIR_Msk


	)

5634 
	#SDIO_DCTRL_DTMODE_Pos
 (2U)

	)

5635 
	#SDIO_DCTRL_DTMODE_Msk
 (0x1UL << 
SDIO_DCTRL_DTMODE_Pos
√ã

	)

5636 
	#SDIO_DCTRL_DTMODE
 
SDIO_DCTRL_DTMODE_Msk


	)

5637 
	#SDIO_DCTRL_DMAEN_Pos
 (3U)

	)

5638 
	#SDIO_DCTRL_DMAEN_Msk
 (0x1UL << 
SDIO_DCTRL_DMAEN_Pos
√ã

	)

5639 
	#SDIO_DCTRL_DMAEN
 
SDIO_DCTRL_DMAEN_Msk


	)

5641 
	#SDIO_DCTRL_DBLOCKSIZE_Pos
 (4U)

	)

5642 
	#SDIO_DCTRL_DBLOCKSIZE_Msk
 (0xFUL << 
SDIO_DCTRL_DBLOCKSIZE_Pos
√ã

	)

5643 
	#SDIO_DCTRL_DBLOCKSIZE
 
SDIO_DCTRL_DBLOCKSIZE_Msk


	)

5644 
	#SDIO_DCTRL_DBLOCKSIZE_0
 (0x1UL << 
SDIO_DCTRL_DBLOCKSIZE_Pos
√ã

	)

5645 
	#SDIO_DCTRL_DBLOCKSIZE_1
 (0x2UL << 
SDIO_DCTRL_DBLOCKSIZE_Pos
√ã

	)

5646 
	#SDIO_DCTRL_DBLOCKSIZE_2
 (0x4UL << 
SDIO_DCTRL_DBLOCKSIZE_Pos
√ã

	)

5647 
	#SDIO_DCTRL_DBLOCKSIZE_3
 (0x8UL << 
SDIO_DCTRL_DBLOCKSIZE_Pos
√ã

	)

5649 
	#SDIO_DCTRL_RWSTART_Pos
 (8U)

	)

5650 
	#SDIO_DCTRL_RWSTART_Msk
 (0x1UL << 
SDIO_DCTRL_RWSTART_Pos
√ã

	)

5651 
	#SDIO_DCTRL_RWSTART
 
SDIO_DCTRL_RWSTART_Msk


	)

5652 
	#SDIO_DCTRL_RWSTOP_Pos
 (9U)

	)

5653 
	#SDIO_DCTRL_RWSTOP_Msk
 (0x1UL << 
SDIO_DCTRL_RWSTOP_Pos
√ã

	)

5654 
	#SDIO_DCTRL_RWSTOP
 
SDIO_DCTRL_RWSTOP_Msk


	)

5655 
	#SDIO_DCTRL_RWMOD_Pos
 (10U)

	)

5656 
	#SDIO_DCTRL_RWMOD_Msk
 (0x1UL << 
SDIO_DCTRL_RWMOD_Pos
√ã

	)

5657 
	#SDIO_DCTRL_RWMOD
 
SDIO_DCTRL_RWMOD_Msk


	)

5658 
	#SDIO_DCTRL_SDIOEN_Pos
 (11U)

	)

5659 
	#SDIO_DCTRL_SDIOEN_Msk
 (0x1UL << 
SDIO_DCTRL_SDIOEN_Pos
√ã

	)

5660 
	#SDIO_DCTRL_SDIOEN
 
SDIO_DCTRL_SDIOEN_Msk


	)

5663 
	#SDIO_DCOUNT_DATACOUNT_Pos
 (0U)

	)

5664 
	#SDIO_DCOUNT_DATACOUNT_Msk
 (0x1FFFFFFUL << 
SDIO_DCOUNT_DATACOUNT_Pos
√ã

	)

5665 
	#SDIO_DCOUNT_DATACOUNT
 
SDIO_DCOUNT_DATACOUNT_Msk


	)

5668 
	#SDIO_STA_CCRCFAIL_Pos
 (0U)

	)

5669 
	#SDIO_STA_CCRCFAIL_Msk
 (0x1UL << 
SDIO_STA_CCRCFAIL_Pos
√ã

	)

5670 
	#SDIO_STA_CCRCFAIL
 
SDIO_STA_CCRCFAIL_Msk


	)

5671 
	#SDIO_STA_DCRCFAIL_Pos
 (1U)

	)

5672 
	#SDIO_STA_DCRCFAIL_Msk
 (0x1UL << 
SDIO_STA_DCRCFAIL_Pos
√ã

	)

5673 
	#SDIO_STA_DCRCFAIL
 
SDIO_STA_DCRCFAIL_Msk


	)

5674 
	#SDIO_STA_CTIMEOUT_Pos
 (2U)

	)

5675 
	#SDIO_STA_CTIMEOUT_Msk
 (0x1UL << 
SDIO_STA_CTIMEOUT_Pos
√ã

	)

5676 
	#SDIO_STA_CTIMEOUT
 
SDIO_STA_CTIMEOUT_Msk


	)

5677 
	#SDIO_STA_DTIMEOUT_Pos
 (3U)

	)

5678 
	#SDIO_STA_DTIMEOUT_Msk
 (0x1UL << 
SDIO_STA_DTIMEOUT_Pos
√ã

	)

5679 
	#SDIO_STA_DTIMEOUT
 
SDIO_STA_DTIMEOUT_Msk


	)

5680 
	#SDIO_STA_TXUNDERR_Pos
 (4U)

	)

5681 
	#SDIO_STA_TXUNDERR_Msk
 (0x1UL << 
SDIO_STA_TXUNDERR_Pos
√ã

	)

5682 
	#SDIO_STA_TXUNDERR
 
SDIO_STA_TXUNDERR_Msk


	)

5683 
	#SDIO_STA_RXOVERR_Pos
 (5U)

	)

5684 
	#SDIO_STA_RXOVERR_Msk
 (0x1UL << 
SDIO_STA_RXOVERR_Pos
√ã

	)

5685 
	#SDIO_STA_RXOVERR
 
SDIO_STA_RXOVERR_Msk


	)

5686 
	#SDIO_STA_CMDREND_Pos
 (6U)

	)

5687 
	#SDIO_STA_CMDREND_Msk
 (0x1UL << 
SDIO_STA_CMDREND_Pos
√ã

	)

5688 
	#SDIO_STA_CMDREND
 
SDIO_STA_CMDREND_Msk


	)

5689 
	#SDIO_STA_CMDSENT_Pos
 (7U)

	)

5690 
	#SDIO_STA_CMDSENT_Msk
 (0x1UL << 
SDIO_STA_CMDSENT_Pos
√ã

	)

5691 
	#SDIO_STA_CMDSENT
 
SDIO_STA_CMDSENT_Msk


	)

5692 
	#SDIO_STA_DATAEND_Pos
 (8U)

	)

5693 
	#SDIO_STA_DATAEND_Msk
 (0x1UL << 
SDIO_STA_DATAEND_Pos
√ã

	)

5694 
	#SDIO_STA_DATAEND
 
SDIO_STA_DATAEND_Msk


	)

5695 
	#SDIO_STA_STBITERR_Pos
 (9U)

	)

5696 
	#SDIO_STA_STBITERR_Msk
 (0x1UL << 
SDIO_STA_STBITERR_Pos
√ã

	)

5697 
	#SDIO_STA_STBITERR
 
SDIO_STA_STBITERR_Msk


	)

5698 
	#SDIO_STA_DBCKEND_Pos
 (10U)

	)

5699 
	#SDIO_STA_DBCKEND_Msk
 (0x1UL << 
SDIO_STA_DBCKEND_Pos
√ã

	)

5700 
	#SDIO_STA_DBCKEND
 
SDIO_STA_DBCKEND_Msk


	)

5701 
	#SDIO_STA_CMDACT_Pos
 (11U)

	)

5702 
	#SDIO_STA_CMDACT_Msk
 (0x1UL << 
SDIO_STA_CMDACT_Pos
√ã

	)

5703 
	#SDIO_STA_CMDACT
 
SDIO_STA_CMDACT_Msk


	)

5704 
	#SDIO_STA_TXACT_Pos
 (12U)

	)

5705 
	#SDIO_STA_TXACT_Msk
 (0x1UL << 
SDIO_STA_TXACT_Pos
√ã

	)

5706 
	#SDIO_STA_TXACT
 
SDIO_STA_TXACT_Msk


	)

5707 
	#SDIO_STA_RXACT_Pos
 (13U)

	)

5708 
	#SDIO_STA_RXACT_Msk
 (0x1UL << 
SDIO_STA_RXACT_Pos
√ã

	)

5709 
	#SDIO_STA_RXACT
 
SDIO_STA_RXACT_Msk


	)

5710 
	#SDIO_STA_TXFIFOHE_Pos
 (14U)

	)

5711 
	#SDIO_STA_TXFIFOHE_Msk
 (0x1UL << 
SDIO_STA_TXFIFOHE_Pos
√ã

	)

5712 
	#SDIO_STA_TXFIFOHE
 
SDIO_STA_TXFIFOHE_Msk


	)

5713 
	#SDIO_STA_RXFIFOHF_Pos
 (15U)

	)

5714 
	#SDIO_STA_RXFIFOHF_Msk
 (0x1UL << 
SDIO_STA_RXFIFOHF_Pos
√ã

	)

5715 
	#SDIO_STA_RXFIFOHF
 
SDIO_STA_RXFIFOHF_Msk


	)

5716 
	#SDIO_STA_TXFIFOF_Pos
 (16U)

	)

5717 
	#SDIO_STA_TXFIFOF_Msk
 (0x1UL << 
SDIO_STA_TXFIFOF_Pos
√ã

	)

5718 
	#SDIO_STA_TXFIFOF
 
SDIO_STA_TXFIFOF_Msk


	)

5719 
	#SDIO_STA_RXFIFOF_Pos
 (17U)

	)

5720 
	#SDIO_STA_RXFIFOF_Msk
 (0x1UL << 
SDIO_STA_RXFIFOF_Pos
√ã

	)

5721 
	#SDIO_STA_RXFIFOF
 
SDIO_STA_RXFIFOF_Msk


	)

5722 
	#SDIO_STA_TXFIFOE_Pos
 (18U)

	)

5723 
	#SDIO_STA_TXFIFOE_Msk
 (0x1UL << 
SDIO_STA_TXFIFOE_Pos
√ã

	)

5724 
	#SDIO_STA_TXFIFOE
 
SDIO_STA_TXFIFOE_Msk


	)

5725 
	#SDIO_STA_RXFIFOE_Pos
 (19U)

	)

5726 
	#SDIO_STA_RXFIFOE_Msk
 (0x1UL << 
SDIO_STA_RXFIFOE_Pos
√ã

	)

5727 
	#SDIO_STA_RXFIFOE
 
SDIO_STA_RXFIFOE_Msk


	)

5728 
	#SDIO_STA_TXDAVL_Pos
 (20U)

	)

5729 
	#SDIO_STA_TXDAVL_Msk
 (0x1UL << 
SDIO_STA_TXDAVL_Pos
√ã

	)

5730 
	#SDIO_STA_TXDAVL
 
SDIO_STA_TXDAVL_Msk


	)

5731 
	#SDIO_STA_RXDAVL_Pos
 (21U)

	)

5732 
	#SDIO_STA_RXDAVL_Msk
 (0x1UL << 
SDIO_STA_RXDAVL_Pos
√ã

	)

5733 
	#SDIO_STA_RXDAVL
 
SDIO_STA_RXDAVL_Msk


	)

5734 
	#SDIO_STA_SDIOIT_Pos
 (22U)

	)

5735 
	#SDIO_STA_SDIOIT_Msk
 (0x1UL << 
SDIO_STA_SDIOIT_Pos
√ã

	)

5736 
	#SDIO_STA_SDIOIT
 
SDIO_STA_SDIOIT_Msk


	)

5737 
	#SDIO_STA_CEATAEND_Pos
 (23U)

	)

5738 
	#SDIO_STA_CEATAEND_Msk
 (0x1UL << 
SDIO_STA_CEATAEND_Pos
√ã

	)

5739 
	#SDIO_STA_CEATAEND
 
SDIO_STA_CEATAEND_Msk


	)

5742 
	#SDIO_ICR_CCRCFAILC_Pos
 (0U)

	)

5743 
	#SDIO_ICR_CCRCFAILC_Msk
 (0x1UL << 
SDIO_ICR_CCRCFAILC_Pos
√ã

	)

5744 
	#SDIO_ICR_CCRCFAILC
 
SDIO_ICR_CCRCFAILC_Msk


	)

5745 
	#SDIO_ICR_DCRCFAILC_Pos
 (1U)

	)

5746 
	#SDIO_ICR_DCRCFAILC_Msk
 (0x1UL << 
SDIO_ICR_DCRCFAILC_Pos
√ã

	)

5747 
	#SDIO_ICR_DCRCFAILC
 
SDIO_ICR_DCRCFAILC_Msk


	)

5748 
	#SDIO_ICR_CTIMEOUTC_Pos
 (2U)

	)

5749 
	#SDIO_ICR_CTIMEOUTC_Msk
 (0x1UL << 
SDIO_ICR_CTIMEOUTC_Pos
√ã

	)

5750 
	#SDIO_ICR_CTIMEOUTC
 
SDIO_ICR_CTIMEOUTC_Msk


	)

5751 
	#SDIO_ICR_DTIMEOUTC_Pos
 (3U)

	)

5752 
	#SDIO_ICR_DTIMEOUTC_Msk
 (0x1UL << 
SDIO_ICR_DTIMEOUTC_Pos
√ã

	)

5753 
	#SDIO_ICR_DTIMEOUTC
 
SDIO_ICR_DTIMEOUTC_Msk


	)

5754 
	#SDIO_ICR_TXUNDERRC_Pos
 (4U)

	)

5755 
	#SDIO_ICR_TXUNDERRC_Msk
 (0x1UL << 
SDIO_ICR_TXUNDERRC_Pos
√ã

	)

5756 
	#SDIO_ICR_TXUNDERRC
 
SDIO_ICR_TXUNDERRC_Msk


	)

5757 
	#SDIO_ICR_RXOVERRC_Pos
 (5U)

	)

5758 
	#SDIO_ICR_RXOVERRC_Msk
 (0x1UL << 
SDIO_ICR_RXOVERRC_Pos
√ã

	)

5759 
	#SDIO_ICR_RXOVERRC
 
SDIO_ICR_RXOVERRC_Msk


	)

5760 
	#SDIO_ICR_CMDRENDC_Pos
 (6U)

	)

5761 
	#SDIO_ICR_CMDRENDC_Msk
 (0x1UL << 
SDIO_ICR_CMDRENDC_Pos
√ã

	)

5762 
	#SDIO_ICR_CMDRENDC
 
SDIO_ICR_CMDRENDC_Msk


	)

5763 
	#SDIO_ICR_CMDSENTC_Pos
 (7U)

	)

5764 
	#SDIO_ICR_CMDSENTC_Msk
 (0x1UL << 
SDIO_ICR_CMDSENTC_Pos
√ã

	)

5765 
	#SDIO_ICR_CMDSENTC
 
SDIO_ICR_CMDSENTC_Msk


	)

5766 
	#SDIO_ICR_DATAENDC_Pos
 (8U)

	)

5767 
	#SDIO_ICR_DATAENDC_Msk
 (0x1UL << 
SDIO_ICR_DATAENDC_Pos
√ã

	)

5768 
	#SDIO_ICR_DATAENDC
 
SDIO_ICR_DATAENDC_Msk


	)

5769 
	#SDIO_ICR_STBITERRC_Pos
 (9U)

	)

5770 
	#SDIO_ICR_STBITERRC_Msk
 (0x1UL << 
SDIO_ICR_STBITERRC_Pos
√ã

	)

5771 
	#SDIO_ICR_STBITERRC
 
SDIO_ICR_STBITERRC_Msk


	)

5772 
	#SDIO_ICR_DBCKENDC_Pos
 (10U)

	)

5773 
	#SDIO_ICR_DBCKENDC_Msk
 (0x1UL << 
SDIO_ICR_DBCKENDC_Pos
√ã

	)

5774 
	#SDIO_ICR_DBCKENDC
 
SDIO_ICR_DBCKENDC_Msk


	)

5775 
	#SDIO_ICR_SDIOITC_Pos
 (22U)

	)

5776 
	#SDIO_ICR_SDIOITC_Msk
 (0x1UL << 
SDIO_ICR_SDIOITC_Pos
√ã

	)

5777 
	#SDIO_ICR_SDIOITC
 
SDIO_ICR_SDIOITC_Msk


	)

5778 
	#SDIO_ICR_CEATAENDC_Pos
 (23U)

	)

5779 
	#SDIO_ICR_CEATAENDC_Msk
 (0x1UL << 
SDIO_ICR_CEATAENDC_Pos
√ã

	)

5780 
	#SDIO_ICR_CEATAENDC
 
SDIO_ICR_CEATAENDC_Msk


	)

5783 
	#SDIO_MASK_CCRCFAILIE_Pos
 (0U)

	)

5784 
	#SDIO_MASK_CCRCFAILIE_Msk
 (0x1UL << 
SDIO_MASK_CCRCFAILIE_Pos
√ã

	)

5785 
	#SDIO_MASK_CCRCFAILIE
 
SDIO_MASK_CCRCFAILIE_Msk


	)

5786 
	#SDIO_MASK_DCRCFAILIE_Pos
 (1U)

	)

5787 
	#SDIO_MASK_DCRCFAILIE_Msk
 (0x1UL << 
SDIO_MASK_DCRCFAILIE_Pos
√ã

	)

5788 
	#SDIO_MASK_DCRCFAILIE
 
SDIO_MASK_DCRCFAILIE_Msk


	)

5789 
	#SDIO_MASK_CTIMEOUTIE_Pos
 (2U)

	)

5790 
	#SDIO_MASK_CTIMEOUTIE_Msk
 (0x1UL << 
SDIO_MASK_CTIMEOUTIE_Pos
√ã

	)

5791 
	#SDIO_MASK_CTIMEOUTIE
 
SDIO_MASK_CTIMEOUTIE_Msk


	)

5792 
	#SDIO_MASK_DTIMEOUTIE_Pos
 (3U)

	)

5793 
	#SDIO_MASK_DTIMEOUTIE_Msk
 (0x1UL << 
SDIO_MASK_DTIMEOUTIE_Pos
√ã

	)

5794 
	#SDIO_MASK_DTIMEOUTIE
 
SDIO_MASK_DTIMEOUTIE_Msk


	)

5795 
	#SDIO_MASK_TXUNDERRIE_Pos
 (4U)

	)

5796 
	#SDIO_MASK_TXUNDERRIE_Msk
 (0x1UL << 
SDIO_MASK_TXUNDERRIE_Pos
√ã

	)

5797 
	#SDIO_MASK_TXUNDERRIE
 
SDIO_MASK_TXUNDERRIE_Msk


	)

5798 
	#SDIO_MASK_RXOVERRIE_Pos
 (5U)

	)

5799 
	#SDIO_MASK_RXOVERRIE_Msk
 (0x1UL << 
SDIO_MASK_RXOVERRIE_Pos
√ã

	)

5800 
	#SDIO_MASK_RXOVERRIE
 
SDIO_MASK_RXOVERRIE_Msk


	)

5801 
	#SDIO_MASK_CMDRENDIE_Pos
 (6U)

	)

5802 
	#SDIO_MASK_CMDRENDIE_Msk
 (0x1UL << 
SDIO_MASK_CMDRENDIE_Pos
√ã

	)

5803 
	#SDIO_MASK_CMDRENDIE
 
SDIO_MASK_CMDRENDIE_Msk


	)

5804 
	#SDIO_MASK_CMDSENTIE_Pos
 (7U)

	)

5805 
	#SDIO_MASK_CMDSENTIE_Msk
 (0x1UL << 
SDIO_MASK_CMDSENTIE_Pos
√ã

	)

5806 
	#SDIO_MASK_CMDSENTIE
 
SDIO_MASK_CMDSENTIE_Msk


	)

5807 
	#SDIO_MASK_DATAENDIE_Pos
 (8U)

	)

5808 
	#SDIO_MASK_DATAENDIE_Msk
 (0x1UL << 
SDIO_MASK_DATAENDIE_Pos
√ã

	)

5809 
	#SDIO_MASK_DATAENDIE
 
SDIO_MASK_DATAENDIE_Msk


	)

5810 
	#SDIO_MASK_STBITERRIE_Pos
 (9U)

	)

5811 
	#SDIO_MASK_STBITERRIE_Msk
 (0x1UL << 
SDIO_MASK_STBITERRIE_Pos
√ã

	)

5812 
	#SDIO_MASK_STBITERRIE
 
SDIO_MASK_STBITERRIE_Msk


	)

5813 
	#SDIO_MASK_DBCKENDIE_Pos
 (10U)

	)

5814 
	#SDIO_MASK_DBCKENDIE_Msk
 (0x1UL << 
SDIO_MASK_DBCKENDIE_Pos
√ã

	)

5815 
	#SDIO_MASK_DBCKENDIE
 
SDIO_MASK_DBCKENDIE_Msk


	)

5816 
	#SDIO_MASK_CMDACTIE_Pos
 (11U)

	)

5817 
	#SDIO_MASK_CMDACTIE_Msk
 (0x1UL << 
SDIO_MASK_CMDACTIE_Pos
√ã

	)

5818 
	#SDIO_MASK_CMDACTIE
 
SDIO_MASK_CMDACTIE_Msk


	)

5819 
	#SDIO_MASK_TXACTIE_Pos
 (12U)

	)

5820 
	#SDIO_MASK_TXACTIE_Msk
 (0x1UL << 
SDIO_MASK_TXACTIE_Pos
√ã

	)

5821 
	#SDIO_MASK_TXACTIE
 
SDIO_MASK_TXACTIE_Msk


	)

5822 
	#SDIO_MASK_RXACTIE_Pos
 (13U)

	)

5823 
	#SDIO_MASK_RXACTIE_Msk
 (0x1UL << 
SDIO_MASK_RXACTIE_Pos
√ã

	)

5824 
	#SDIO_MASK_RXACTIE
 
SDIO_MASK_RXACTIE_Msk


	)

5825 
	#SDIO_MASK_TXFIFOHEIE_Pos
 (14U)

	)

5826 
	#SDIO_MASK_TXFIFOHEIE_Msk
 (0x1UL << 
SDIO_MASK_TXFIFOHEIE_Pos
√ã

	)

5827 
	#SDIO_MASK_TXFIFOHEIE
 
SDIO_MASK_TXFIFOHEIE_Msk


	)

5828 
	#SDIO_MASK_RXFIFOHFIE_Pos
 (15U)

	)

5829 
	#SDIO_MASK_RXFIFOHFIE_Msk
 (0x1UL << 
SDIO_MASK_RXFIFOHFIE_Pos
√ã

	)

5830 
	#SDIO_MASK_RXFIFOHFIE
 
SDIO_MASK_RXFIFOHFIE_Msk


	)

5831 
	#SDIO_MASK_TXFIFOFIE_Pos
 (16U)

	)

5832 
	#SDIO_MASK_TXFIFOFIE_Msk
 (0x1UL << 
SDIO_MASK_TXFIFOFIE_Pos
√ã

	)

5833 
	#SDIO_MASK_TXFIFOFIE
 
SDIO_MASK_TXFIFOFIE_Msk


	)

5834 
	#SDIO_MASK_RXFIFOFIE_Pos
 (17U)

	)

5835 
	#SDIO_MASK_RXFIFOFIE_Msk
 (0x1UL << 
SDIO_MASK_RXFIFOFIE_Pos
√ã

	)

5836 
	#SDIO_MASK_RXFIFOFIE
 
SDIO_MASK_RXFIFOFIE_Msk


	)

5837 
	#SDIO_MASK_TXFIFOEIE_Pos
 (18U)

	)

5838 
	#SDIO_MASK_TXFIFOEIE_Msk
 (0x1UL << 
SDIO_MASK_TXFIFOEIE_Pos
√ã

	)

5839 
	#SDIO_MASK_TXFIFOEIE
 
SDIO_MASK_TXFIFOEIE_Msk


	)

5840 
	#SDIO_MASK_RXFIFOEIE_Pos
 (19U)

	)

5841 
	#SDIO_MASK_RXFIFOEIE_Msk
 (0x1UL << 
SDIO_MASK_RXFIFOEIE_Pos
√ã

	)

5842 
	#SDIO_MASK_RXFIFOEIE
 
SDIO_MASK_RXFIFOEIE_Msk


	)

5843 
	#SDIO_MASK_TXDAVLIE_Pos
 (20U)

	)

5844 
	#SDIO_MASK_TXDAVLIE_Msk
 (0x1UL << 
SDIO_MASK_TXDAVLIE_Pos
√ã

	)

5845 
	#SDIO_MASK_TXDAVLIE
 
SDIO_MASK_TXDAVLIE_Msk


	)

5846 
	#SDIO_MASK_RXDAVLIE_Pos
 (21U)

	)

5847 
	#SDIO_MASK_RXDAVLIE_Msk
 (0x1UL << 
SDIO_MASK_RXDAVLIE_Pos
√ã

	)

5848 
	#SDIO_MASK_RXDAVLIE
 
SDIO_MASK_RXDAVLIE_Msk


	)

5849 
	#SDIO_MASK_SDIOITIE_Pos
 (22U)

	)

5850 
	#SDIO_MASK_SDIOITIE_Msk
 (0x1UL << 
SDIO_MASK_SDIOITIE_Pos
√ã

	)

5851 
	#SDIO_MASK_SDIOITIE
 
SDIO_MASK_SDIOITIE_Msk


	)

5852 
	#SDIO_MASK_CEATAENDIE_Pos
 (23U)

	)

5853 
	#SDIO_MASK_CEATAENDIE_Msk
 (0x1UL << 
SDIO_MASK_CEATAENDIE_Pos
√ã

	)

5854 
	#SDIO_MASK_CEATAENDIE
 
SDIO_MASK_CEATAENDIE_Msk


	)

5857 
	#SDIO_FIFOCNT_FIFOCOUNT_Pos
 (0U)

	)

5858 
	#SDIO_FIFOCNT_FIFOCOUNT_Msk
 (0xFFFFFFUL << 
SDIO_FIFOCNT_FIFOCOUNT_Pos
√ã

	)

5859 
	#SDIO_FIFOCNT_FIFOCOUNT
 
SDIO_FIFOCNT_FIFOCOUNT_Msk


	)

5862 
	#SDIO_FIFO_FIFODATA_Pos
 (0U)

	)

5863 
	#SDIO_FIFO_FIFODATA_Msk
 (0xFFFFFFFFUL << 
SDIO_FIFO_FIFODATA_Pos
√ã

	)

5864 
	#SDIO_FIFO_FIFODATA
 
SDIO_FIFO_FIFODATA_Msk


	)

5873 
	#USB_EP0R
 
USB_BASE


	)

5874 
	#USB_EP1R
 (
USB_BASE
 + 0x00000004√ã

	)

5875 
	#USB_EP2R
 (
USB_BASE
 + 0x00000008√ã

	)

5876 
	#USB_EP3R
 (
USB_BASE
 + 0x0000000C√ã

	)

5877 
	#USB_EP4R
 (
USB_BASE
 + 0x00000010√ã

	)

5878 
	#USB_EP5R
 (
USB_BASE
 + 0x00000014√ã

	)

5879 
	#USB_EP6R
 (
USB_BASE
 + 0x00000018√ã

	)

5880 
	#USB_EP7R
 (
USB_BASE
 + 0x0000001C√ã

	)

5883 
	#USB_EP_CTR_RX_Pos
 (15U)

	)

5884 
	#USB_EP_CTR_RX_Msk
 (0x1UL << 
USB_EP_CTR_RX_Pos
√ã

	)

5885 
	#USB_EP_CTR_RX
 
USB_EP_CTR_RX_Msk


	)

5886 
	#USB_EP_DTOG_RX_Pos
 (14U)

	)

5887 
	#USB_EP_DTOG_RX_Msk
 (0x1UL << 
USB_EP_DTOG_RX_Pos
√ã

	)

5888 
	#USB_EP_DTOG_RX
 
USB_EP_DTOG_RX_Msk


	)

5889 
	#USB_EPRX_STAT_Pos
 (12U)

	)

5890 
	#USB_EPRX_STAT_Msk
 (0x3UL << 
USB_EPRX_STAT_Pos
√ã

	)

5891 
	#USB_EPRX_STAT
 
USB_EPRX_STAT_Msk


	)

5892 
	#USB_EP_SETUP_Pos
 (11U)

	)

5893 
	#USB_EP_SETUP_Msk
 (0x1UL << 
USB_EP_SETUP_Pos
√ã

	)

5894 
	#USB_EP_SETUP
 
USB_EP_SETUP_Msk


	)

5895 
	#USB_EP_T_FIELD_Pos
 (9U)

	)

5896 
	#USB_EP_T_FIELD_Msk
 (0x3UL << 
USB_EP_T_FIELD_Pos
√ã

	)

5897 
	#USB_EP_T_FIELD
 
USB_EP_T_FIELD_Msk


	)

5898 
	#USB_EP_KIND_Pos
 (8U)

	)

5899 
	#USB_EP_KIND_Msk
 (0x1UL << 
USB_EP_KIND_Pos
√ã

	)

5900 
	#USB_EP_KIND
 
USB_EP_KIND_Msk


	)

5901 
	#USB_EP_CTR_TX_Pos
 (7U)

	)

5902 
	#USB_EP_CTR_TX_Msk
 (0x1UL << 
USB_EP_CTR_TX_Pos
√ã

	)

5903 
	#USB_EP_CTR_TX
 
USB_EP_CTR_TX_Msk


	)

5904 
	#USB_EP_DTOG_TX_Pos
 (6U)

	)

5905 
	#USB_EP_DTOG_TX_Msk
 (0x1UL << 
USB_EP_DTOG_TX_Pos
√ã

	)

5906 
	#USB_EP_DTOG_TX
 
USB_EP_DTOG_TX_Msk


	)

5907 
	#USB_EPTX_STAT_Pos
 (4U)

	)

5908 
	#USB_EPTX_STAT_Msk
 (0x3UL << 
USB_EPTX_STAT_Pos
√ã

	)

5909 
	#USB_EPTX_STAT
 
USB_EPTX_STAT_Msk


	)

5910 
	#USB_EPADDR_FIELD_Pos
 (0U)

	)

5911 
	#USB_EPADDR_FIELD_Msk
 (0xFUL << 
USB_EPADDR_FIELD_Pos
√ã

	)

5912 
	#USB_EPADDR_FIELD
 
USB_EPADDR_FIELD_Msk


	)

5915 
	#USB_EPREG_MASK
 (
USB_EP_CTR_RX
|
USB_EP_SETUP
|
USB_EP_T_FIELD
|
USB_EP_KIND
|
USB_EP_CTR_TX
|
USB_EPADDR_FIELD
)

	)

5917 
	#USB_EP_TYPE_MASK_Pos
 (9U)

	)

5918 
	#USB_EP_TYPE_MASK_Msk
 (0x3UL << 
USB_EP_TYPE_MASK_Pos
√ã

	)

5919 
	#USB_EP_TYPE_MASK
 
USB_EP_TYPE_MASK_Msk


	)

5920 
	#USB_EP_BULK
 0x00000000U

	)

5921 
	#USB_EP_CONTROL
 0x00000200U

	)

5922 
	#USB_EP_ISOCHRONOUS
 0x00000400U

	)

5923 
	#USB_EP_INTERRUPT
 0x00000600U

	)

5924 
	#USB_EP_T_MASK
 (~
USB_EP_T_FIELD
 & 
USB_EPREG_MASK
)

	)

5926 
	#USB_EPKIND_MASK
 (~
USB_EP_KIND
 & 
USB_EPREG_MASK
√ã

	)

5928 
	#USB_EP_TX_DIS
 0x00000000U

	)

5929 
	#USB_EP_TX_STALL
 0x00000010U

	)

5930 
	#USB_EP_TX_NAK
 0x00000020U

	)

5931 
	#USB_EP_TX_VALID
 0x00000030U

	)

5932 
	#USB_EPTX_DTOG1
 0x00000010U

	)

5933 
	#USB_EPTX_DTOG2
 0x00000020U

	)

5934 
	#USB_EPTX_DTOGMASK
 (
USB_EPTX_STAT
|
USB_EPREG_MASK
)

	)

5936 
	#USB_EP_RX_DIS
 0x00000000U

	)

5937 
	#USB_EP_RX_STALL
 0x00001000U

	)

5938 
	#USB_EP_RX_NAK
 0x00002000U

	)

5939 
	#USB_EP_RX_VALID
 0x00003000U

	)

5940 
	#USB_EPRX_DTOG1
 0x00001000U

	)

5941 
	#USB_EPRX_DTOG2
 0x00002000U

	)

5942 
	#USB_EPRX_DTOGMASK
 (
USB_EPRX_STAT
|
USB_EPREG_MASK
)

	)

5945 
	#USB_EP0R_EA_Pos
 (0U)

	)

5946 
	#USB_EP0R_EA_Msk
 (0xFUL << 
USB_EP0R_EA_Pos
√ã

	)

5947 
	#USB_EP0R_EA
 
USB_EP0R_EA_Msk


	)

5949 
	#USB_EP0R_STAT_TX_Pos
 (4U)

	)

5950 
	#USB_EP0R_STAT_TX_Msk
 (0x3UL << 
USB_EP0R_STAT_TX_Pos
√ã

	)

5951 
	#USB_EP0R_STAT_TX
 
USB_EP0R_STAT_TX_Msk


	)

5952 
	#USB_EP0R_STAT_TX_0
 (0x1UL << 
USB_EP0R_STAT_TX_Pos
√ã

	)

5953 
	#USB_EP0R_STAT_TX_1
 (0x2UL << 
USB_EP0R_STAT_TX_Pos
√ã

	)

5955 
	#USB_EP0R_DTOG_TX_Pos
 (6U)

	)

5956 
	#USB_EP0R_DTOG_TX_Msk
 (0x1UL << 
USB_EP0R_DTOG_TX_Pos
√ã

	)

5957 
	#USB_EP0R_DTOG_TX
 
USB_EP0R_DTOG_TX_Msk


	)

5958 
	#USB_EP0R_CTR_TX_Pos
 (7U)

	)

5959 
	#USB_EP0R_CTR_TX_Msk
 (0x1UL << 
USB_EP0R_CTR_TX_Pos
√ã

	)

5960 
	#USB_EP0R_CTR_TX
 
USB_EP0R_CTR_TX_Msk


	)

5961 
	#USB_EP0R_EP_KIND_Pos
 (8U)

	)

5962 
	#USB_EP0R_EP_KIND_Msk
 (0x1UL << 
USB_EP0R_EP_KIND_Pos
√ã

	)

5963 
	#USB_EP0R_EP_KIND
 
USB_EP0R_EP_KIND_Msk


	)

5965 
	#USB_EP0R_EP_TYPE_Pos
 (9U)

	)

5966 
	#USB_EP0R_EP_TYPE_Msk
 (0x3UL << 
USB_EP0R_EP_TYPE_Pos
√ã

	)

5967 
	#USB_EP0R_EP_TYPE
 
USB_EP0R_EP_TYPE_Msk


	)

5968 
	#USB_EP0R_EP_TYPE_0
 (0x1UL << 
USB_EP0R_EP_TYPE_Pos
√ã

	)

5969 
	#USB_EP0R_EP_TYPE_1
 (0x2UL << 
USB_EP0R_EP_TYPE_Pos
√ã

	)

5971 
	#USB_EP0R_SETUP_Pos
 (11U)

	)

5972 
	#USB_EP0R_SETUP_Msk
 (0x1UL << 
USB_EP0R_SETUP_Pos
√ã

	)

5973 
	#USB_EP0R_SETUP
 
USB_EP0R_SETUP_Msk


	)

5975 
	#USB_EP0R_STAT_RX_Pos
 (12U)

	)

5976 
	#USB_EP0R_STAT_RX_Msk
 (0x3UL << 
USB_EP0R_STAT_RX_Pos
√ã

	)

5977 
	#USB_EP0R_STAT_RX
 
USB_EP0R_STAT_RX_Msk


	)

5978 
	#USB_EP0R_STAT_RX_0
 (0x1UL << 
USB_EP0R_STAT_RX_Pos
√ã

	)

5979 
	#USB_EP0R_STAT_RX_1
 (0x2UL << 
USB_EP0R_STAT_RX_Pos
√ã

	)

5981 
	#USB_EP0R_DTOG_RX_Pos
 (14U)

	)

5982 
	#USB_EP0R_DTOG_RX_Msk
 (0x1UL << 
USB_EP0R_DTOG_RX_Pos
√ã

	)

5983 
	#USB_EP0R_DTOG_RX
 
USB_EP0R_DTOG_RX_Msk


	)

5984 
	#USB_EP0R_CTR_RX_Pos
 (15U)

	)

5985 
	#USB_EP0R_CTR_RX_Msk
 (0x1UL << 
USB_EP0R_CTR_RX_Pos
√ã

	)

5986 
	#USB_EP0R_CTR_RX
 
USB_EP0R_CTR_RX_Msk


	)

5989 
	#USB_EP1R_EA_Pos
 (0U)

	)

5990 
	#USB_EP1R_EA_Msk
 (0xFUL << 
USB_EP1R_EA_Pos
√ã

	)

5991 
	#USB_EP1R_EA
 
USB_EP1R_EA_Msk


	)

5993 
	#USB_EP1R_STAT_TX_Pos
 (4U)

	)

5994 
	#USB_EP1R_STAT_TX_Msk
 (0x3UL << 
USB_EP1R_STAT_TX_Pos
√ã

	)

5995 
	#USB_EP1R_STAT_TX
 
USB_EP1R_STAT_TX_Msk


	)

5996 
	#USB_EP1R_STAT_TX_0
 (0x1UL << 
USB_EP1R_STAT_TX_Pos
√ã

	)

5997 
	#USB_EP1R_STAT_TX_1
 (0x2UL << 
USB_EP1R_STAT_TX_Pos
√ã

	)

5999 
	#USB_EP1R_DTOG_TX_Pos
 (6U)

	)

6000 
	#USB_EP1R_DTOG_TX_Msk
 (0x1UL << 
USB_EP1R_DTOG_TX_Pos
√ã

	)

6001 
	#USB_EP1R_DTOG_TX
 
USB_EP1R_DTOG_TX_Msk


	)

6002 
	#USB_EP1R_CTR_TX_Pos
 (7U)

	)

6003 
	#USB_EP1R_CTR_TX_Msk
 (0x1UL << 
USB_EP1R_CTR_TX_Pos
√ã

	)

6004 
	#USB_EP1R_CTR_TX
 
USB_EP1R_CTR_TX_Msk


	)

6005 
	#USB_EP1R_EP_KIND_Pos
 (8U)

	)

6006 
	#USB_EP1R_EP_KIND_Msk
 (0x1UL << 
USB_EP1R_EP_KIND_Pos
√ã

	)

6007 
	#USB_EP1R_EP_KIND
 
USB_EP1R_EP_KIND_Msk


	)

6009 
	#USB_EP1R_EP_TYPE_Pos
 (9U)

	)

6010 
	#USB_EP1R_EP_TYPE_Msk
 (0x3UL << 
USB_EP1R_EP_TYPE_Pos
√ã

	)

6011 
	#USB_EP1R_EP_TYPE
 
USB_EP1R_EP_TYPE_Msk


	)

6012 
	#USB_EP1R_EP_TYPE_0
 (0x1UL << 
USB_EP1R_EP_TYPE_Pos
√ã

	)

6013 
	#USB_EP1R_EP_TYPE_1
 (0x2UL << 
USB_EP1R_EP_TYPE_Pos
√ã

	)

6015 
	#USB_EP1R_SETUP_Pos
 (11U)

	)

6016 
	#USB_EP1R_SETUP_Msk
 (0x1UL << 
USB_EP1R_SETUP_Pos
√ã

	)

6017 
	#USB_EP1R_SETUP
 
USB_EP1R_SETUP_Msk


	)

6019 
	#USB_EP1R_STAT_RX_Pos
 (12U)

	)

6020 
	#USB_EP1R_STAT_RX_Msk
 (0x3UL << 
USB_EP1R_STAT_RX_Pos
√ã

	)

6021 
	#USB_EP1R_STAT_RX
 
USB_EP1R_STAT_RX_Msk


	)

6022 
	#USB_EP1R_STAT_RX_0
 (0x1UL << 
USB_EP1R_STAT_RX_Pos
√ã

	)

6023 
	#USB_EP1R_STAT_RX_1
 (0x2UL << 
USB_EP1R_STAT_RX_Pos
√ã

	)

6025 
	#USB_EP1R_DTOG_RX_Pos
 (14U)

	)

6026 
	#USB_EP1R_DTOG_RX_Msk
 (0x1UL << 
USB_EP1R_DTOG_RX_Pos
√ã

	)

6027 
	#USB_EP1R_DTOG_RX
 
USB_EP1R_DTOG_RX_Msk


	)

6028 
	#USB_EP1R_CTR_RX_Pos
 (15U)

	)

6029 
	#USB_EP1R_CTR_RX_Msk
 (0x1UL << 
USB_EP1R_CTR_RX_Pos
√ã

	)

6030 
	#USB_EP1R_CTR_RX
 
USB_EP1R_CTR_RX_Msk


	)

6033 
	#USB_EP2R_EA_Pos
 (0U)

	)

6034 
	#USB_EP2R_EA_Msk
 (0xFUL << 
USB_EP2R_EA_Pos
√ã

	)

6035 
	#USB_EP2R_EA
 
USB_EP2R_EA_Msk


	)

6037 
	#USB_EP2R_STAT_TX_Pos
 (4U)

	)

6038 
	#USB_EP2R_STAT_TX_Msk
 (0x3UL << 
USB_EP2R_STAT_TX_Pos
√ã

	)

6039 
	#USB_EP2R_STAT_TX
 
USB_EP2R_STAT_TX_Msk


	)

6040 
	#USB_EP2R_STAT_TX_0
 (0x1UL << 
USB_EP2R_STAT_TX_Pos
√ã

	)

6041 
	#USB_EP2R_STAT_TX_1
 (0x2UL << 
USB_EP2R_STAT_TX_Pos
√ã

	)

6043 
	#USB_EP2R_DTOG_TX_Pos
 (6U)

	)

6044 
	#USB_EP2R_DTOG_TX_Msk
 (0x1UL << 
USB_EP2R_DTOG_TX_Pos
√ã

	)

6045 
	#USB_EP2R_DTOG_TX
 
USB_EP2R_DTOG_TX_Msk


	)

6046 
	#USB_EP2R_CTR_TX_Pos
 (7U)

	)

6047 
	#USB_EP2R_CTR_TX_Msk
 (0x1UL << 
USB_EP2R_CTR_TX_Pos
√ã

	)

6048 
	#USB_EP2R_CTR_TX
 
USB_EP2R_CTR_TX_Msk


	)

6049 
	#USB_EP2R_EP_KIND_Pos
 (8U)

	)

6050 
	#USB_EP2R_EP_KIND_Msk
 (0x1UL << 
USB_EP2R_EP_KIND_Pos
√ã

	)

6051 
	#USB_EP2R_EP_KIND
 
USB_EP2R_EP_KIND_Msk


	)

6053 
	#USB_EP2R_EP_TYPE_Pos
 (9U)

	)

6054 
	#USB_EP2R_EP_TYPE_Msk
 (0x3UL << 
USB_EP2R_EP_TYPE_Pos
√ã

	)

6055 
	#USB_EP2R_EP_TYPE
 
USB_EP2R_EP_TYPE_Msk


	)

6056 
	#USB_EP2R_EP_TYPE_0
 (0x1UL << 
USB_EP2R_EP_TYPE_Pos
√ã

	)

6057 
	#USB_EP2R_EP_TYPE_1
 (0x2UL << 
USB_EP2R_EP_TYPE_Pos
√ã

	)

6059 
	#USB_EP2R_SETUP_Pos
 (11U)

	)

6060 
	#USB_EP2R_SETUP_Msk
 (0x1UL << 
USB_EP2R_SETUP_Pos
√ã

	)

6061 
	#USB_EP2R_SETUP
 
USB_EP2R_SETUP_Msk


	)

6063 
	#USB_EP2R_STAT_RX_Pos
 (12U)

	)

6064 
	#USB_EP2R_STAT_RX_Msk
 (0x3UL << 
USB_EP2R_STAT_RX_Pos
√ã

	)

6065 
	#USB_EP2R_STAT_RX
 
USB_EP2R_STAT_RX_Msk


	)

6066 
	#USB_EP2R_STAT_RX_0
 (0x1UL << 
USB_EP2R_STAT_RX_Pos
√ã

	)

6067 
	#USB_EP2R_STAT_RX_1
 (0x2UL << 
USB_EP2R_STAT_RX_Pos
√ã

	)

6069 
	#USB_EP2R_DTOG_RX_Pos
 (14U)

	)

6070 
	#USB_EP2R_DTOG_RX_Msk
 (0x1UL << 
USB_EP2R_DTOG_RX_Pos
√ã

	)

6071 
	#USB_EP2R_DTOG_RX
 
USB_EP2R_DTOG_RX_Msk


	)

6072 
	#USB_EP2R_CTR_RX_Pos
 (15U)

	)

6073 
	#USB_EP2R_CTR_RX_Msk
 (0x1UL << 
USB_EP2R_CTR_RX_Pos
√ã

	)

6074 
	#USB_EP2R_CTR_RX
 
USB_EP2R_CTR_RX_Msk


	)

6077 
	#USB_EP3R_EA_Pos
 (0U)

	)

6078 
	#USB_EP3R_EA_Msk
 (0xFUL << 
USB_EP3R_EA_Pos
√ã

	)

6079 
	#USB_EP3R_EA
 
USB_EP3R_EA_Msk


	)

6081 
	#USB_EP3R_STAT_TX_Pos
 (4U)

	)

6082 
	#USB_EP3R_STAT_TX_Msk
 (0x3UL << 
USB_EP3R_STAT_TX_Pos
√ã

	)

6083 
	#USB_EP3R_STAT_TX
 
USB_EP3R_STAT_TX_Msk


	)

6084 
	#USB_EP3R_STAT_TX_0
 (0x1UL << 
USB_EP3R_STAT_TX_Pos
√ã

	)

6085 
	#USB_EP3R_STAT_TX_1
 (0x2UL << 
USB_EP3R_STAT_TX_Pos
√ã

	)

6087 
	#USB_EP3R_DTOG_TX_Pos
 (6U)

	)

6088 
	#USB_EP3R_DTOG_TX_Msk
 (0x1UL << 
USB_EP3R_DTOG_TX_Pos
√ã

	)

6089 
	#USB_EP3R_DTOG_TX
 
USB_EP3R_DTOG_TX_Msk


	)

6090 
	#USB_EP3R_CTR_TX_Pos
 (7U)

	)

6091 
	#USB_EP3R_CTR_TX_Msk
 (0x1UL << 
USB_EP3R_CTR_TX_Pos
√ã

	)

6092 
	#USB_EP3R_CTR_TX
 
USB_EP3R_CTR_TX_Msk


	)

6093 
	#USB_EP3R_EP_KIND_Pos
 (8U)

	)

6094 
	#USB_EP3R_EP_KIND_Msk
 (0x1UL << 
USB_EP3R_EP_KIND_Pos
√ã

	)

6095 
	#USB_EP3R_EP_KIND
 
USB_EP3R_EP_KIND_Msk


	)

6097 
	#USB_EP3R_EP_TYPE_Pos
 (9U)

	)

6098 
	#USB_EP3R_EP_TYPE_Msk
 (0x3UL << 
USB_EP3R_EP_TYPE_Pos
√ã

	)

6099 
	#USB_EP3R_EP_TYPE
 
USB_EP3R_EP_TYPE_Msk


	)

6100 
	#USB_EP3R_EP_TYPE_0
 (0x1UL << 
USB_EP3R_EP_TYPE_Pos
√ã

	)

6101 
	#USB_EP3R_EP_TYPE_1
 (0x2UL << 
USB_EP3R_EP_TYPE_Pos
√ã

	)

6103 
	#USB_EP3R_SETUP_Pos
 (11U)

	)

6104 
	#USB_EP3R_SETUP_Msk
 (0x1UL << 
USB_EP3R_SETUP_Pos
√ã

	)

6105 
	#USB_EP3R_SETUP
 
USB_EP3R_SETUP_Msk


	)

6107 
	#USB_EP3R_STAT_RX_Pos
 (12U)

	)

6108 
	#USB_EP3R_STAT_RX_Msk
 (0x3UL << 
USB_EP3R_STAT_RX_Pos
√ã

	)

6109 
	#USB_EP3R_STAT_RX
 
USB_EP3R_STAT_RX_Msk


	)

6110 
	#USB_EP3R_STAT_RX_0
 (0x1UL << 
USB_EP3R_STAT_RX_Pos
√ã

	)

6111 
	#USB_EP3R_STAT_RX_1
 (0x2UL << 
USB_EP3R_STAT_RX_Pos
√ã

	)

6113 
	#USB_EP3R_DTOG_RX_Pos
 (14U)

	)

6114 
	#USB_EP3R_DTOG_RX_Msk
 (0x1UL << 
USB_EP3R_DTOG_RX_Pos
√ã

	)

6115 
	#USB_EP3R_DTOG_RX
 
USB_EP3R_DTOG_RX_Msk


	)

6116 
	#USB_EP3R_CTR_RX_Pos
 (15U)

	)

6117 
	#USB_EP3R_CTR_RX_Msk
 (0x1UL << 
USB_EP3R_CTR_RX_Pos
√ã

	)

6118 
	#USB_EP3R_CTR_RX
 
USB_EP3R_CTR_RX_Msk


	)

6121 
	#USB_EP4R_EA_Pos
 (0U)

	)

6122 
	#USB_EP4R_EA_Msk
 (0xFUL << 
USB_EP4R_EA_Pos
√ã

	)

6123 
	#USB_EP4R_EA
 
USB_EP4R_EA_Msk


	)

6125 
	#USB_EP4R_STAT_TX_Pos
 (4U)

	)

6126 
	#USB_EP4R_STAT_TX_Msk
 (0x3UL << 
USB_EP4R_STAT_TX_Pos
√ã

	)

6127 
	#USB_EP4R_STAT_TX
 
USB_EP4R_STAT_TX_Msk


	)

6128 
	#USB_EP4R_STAT_TX_0
 (0x1UL << 
USB_EP4R_STAT_TX_Pos
√ã

	)

6129 
	#USB_EP4R_STAT_TX_1
 (0x2UL << 
USB_EP4R_STAT_TX_Pos
√ã

	)

6131 
	#USB_EP4R_DTOG_TX_Pos
 (6U)

	)

6132 
	#USB_EP4R_DTOG_TX_Msk
 (0x1UL << 
USB_EP4R_DTOG_TX_Pos
√ã

	)

6133 
	#USB_EP4R_DTOG_TX
 
USB_EP4R_DTOG_TX_Msk


	)

6134 
	#USB_EP4R_CTR_TX_Pos
 (7U)

	)

6135 
	#USB_EP4R_CTR_TX_Msk
 (0x1UL << 
USB_EP4R_CTR_TX_Pos
√ã

	)

6136 
	#USB_EP4R_CTR_TX
 
USB_EP4R_CTR_TX_Msk


	)

6137 
	#USB_EP4R_EP_KIND_Pos
 (8U)

	)

6138 
	#USB_EP4R_EP_KIND_Msk
 (0x1UL << 
USB_EP4R_EP_KIND_Pos
√ã

	)

6139 
	#USB_EP4R_EP_KIND
 
USB_EP4R_EP_KIND_Msk


	)

6141 
	#USB_EP4R_EP_TYPE_Pos
 (9U)

	)

6142 
	#USB_EP4R_EP_TYPE_Msk
 (0x3UL << 
USB_EP4R_EP_TYPE_Pos
√ã

	)

6143 
	#USB_EP4R_EP_TYPE
 
USB_EP4R_EP_TYPE_Msk


	)

6144 
	#USB_EP4R_EP_TYPE_0
 (0x1UL << 
USB_EP4R_EP_TYPE_Pos
√ã

	)

6145 
	#USB_EP4R_EP_TYPE_1
 (0x2UL << 
USB_EP4R_EP_TYPE_Pos
√ã

	)

6147 
	#USB_EP4R_SETUP_Pos
 (11U)

	)

6148 
	#USB_EP4R_SETUP_Msk
 (0x1UL << 
USB_EP4R_SETUP_Pos
√ã

	)

6149 
	#USB_EP4R_SETUP
 
USB_EP4R_SETUP_Msk


	)

6151 
	#USB_EP4R_STAT_RX_Pos
 (12U)

	)

6152 
	#USB_EP4R_STAT_RX_Msk
 (0x3UL << 
USB_EP4R_STAT_RX_Pos
√ã

	)

6153 
	#USB_EP4R_STAT_RX
 
USB_EP4R_STAT_RX_Msk


	)

6154 
	#USB_EP4R_STAT_RX_0
 (0x1UL << 
USB_EP4R_STAT_RX_Pos
√ã

	)

6155 
	#USB_EP4R_STAT_RX_1
 (0x2UL << 
USB_EP4R_STAT_RX_Pos
√ã

	)

6157 
	#USB_EP4R_DTOG_RX_Pos
 (14U)

	)

6158 
	#USB_EP4R_DTOG_RX_Msk
 (0x1UL << 
USB_EP4R_DTOG_RX_Pos
√ã

	)

6159 
	#USB_EP4R_DTOG_RX
 
USB_EP4R_DTOG_RX_Msk


	)

6160 
	#USB_EP4R_CTR_RX_Pos
 (15U)

	)

6161 
	#USB_EP4R_CTR_RX_Msk
 (0x1UL << 
USB_EP4R_CTR_RX_Pos
√ã

	)

6162 
	#USB_EP4R_CTR_RX
 
USB_EP4R_CTR_RX_Msk


	)

6165 
	#USB_EP5R_EA_Pos
 (0U)

	)

6166 
	#USB_EP5R_EA_Msk
 (0xFUL << 
USB_EP5R_EA_Pos
√ã

	)

6167 
	#USB_EP5R_EA
 
USB_EP5R_EA_Msk


	)

6169 
	#USB_EP5R_STAT_TX_Pos
 (4U)

	)

6170 
	#USB_EP5R_STAT_TX_Msk
 (0x3UL << 
USB_EP5R_STAT_TX_Pos
√ã

	)

6171 
	#USB_EP5R_STAT_TX
 
USB_EP5R_STAT_TX_Msk


	)

6172 
	#USB_EP5R_STAT_TX_0
 (0x1UL << 
USB_EP5R_STAT_TX_Pos
√ã

	)

6173 
	#USB_EP5R_STAT_TX_1
 (0x2UL << 
USB_EP5R_STAT_TX_Pos
√ã

	)

6175 
	#USB_EP5R_DTOG_TX_Pos
 (6U)

	)

6176 
	#USB_EP5R_DTOG_TX_Msk
 (0x1UL << 
USB_EP5R_DTOG_TX_Pos
√ã

	)

6177 
	#USB_EP5R_DTOG_TX
 
USB_EP5R_DTOG_TX_Msk


	)

6178 
	#USB_EP5R_CTR_TX_Pos
 (7U)

	)

6179 
	#USB_EP5R_CTR_TX_Msk
 (0x1UL << 
USB_EP5R_CTR_TX_Pos
√ã

	)

6180 
	#USB_EP5R_CTR_TX
 
USB_EP5R_CTR_TX_Msk


	)

6181 
	#USB_EP5R_EP_KIND_Pos
 (8U)

	)

6182 
	#USB_EP5R_EP_KIND_Msk
 (0x1UL << 
USB_EP5R_EP_KIND_Pos
√ã

	)

6183 
	#USB_EP5R_EP_KIND
 
USB_EP5R_EP_KIND_Msk


	)

6185 
	#USB_EP5R_EP_TYPE_Pos
 (9U)

	)

6186 
	#USB_EP5R_EP_TYPE_Msk
 (0x3UL << 
USB_EP5R_EP_TYPE_Pos
√ã

	)

6187 
	#USB_EP5R_EP_TYPE
 
USB_EP5R_EP_TYPE_Msk


	)

6188 
	#USB_EP5R_EP_TYPE_0
 (0x1UL << 
USB_EP5R_EP_TYPE_Pos
√ã

	)

6189 
	#USB_EP5R_EP_TYPE_1
 (0x2UL << 
USB_EP5R_EP_TYPE_Pos
√ã

	)

6191 
	#USB_EP5R_SETUP_Pos
 (11U)

	)

6192 
	#USB_EP5R_SETUP_Msk
 (0x1UL << 
USB_EP5R_SETUP_Pos
√ã

	)

6193 
	#USB_EP5R_SETUP
 
USB_EP5R_SETUP_Msk


	)

6195 
	#USB_EP5R_STAT_RX_Pos
 (12U)

	)

6196 
	#USB_EP5R_STAT_RX_Msk
 (0x3UL << 
USB_EP5R_STAT_RX_Pos
√ã

	)

6197 
	#USB_EP5R_STAT_RX
 
USB_EP5R_STAT_RX_Msk


	)

6198 
	#USB_EP5R_STAT_RX_0
 (0x1UL << 
USB_EP5R_STAT_RX_Pos
√ã

	)

6199 
	#USB_EP5R_STAT_RX_1
 (0x2UL << 
USB_EP5R_STAT_RX_Pos
√ã

	)

6201 
	#USB_EP5R_DTOG_RX_Pos
 (14U)

	)

6202 
	#USB_EP5R_DTOG_RX_Msk
 (0x1UL << 
USB_EP5R_DTOG_RX_Pos
√ã

	)

6203 
	#USB_EP5R_DTOG_RX
 
USB_EP5R_DTOG_RX_Msk


	)

6204 
	#USB_EP5R_CTR_RX_Pos
 (15U)

	)

6205 
	#USB_EP5R_CTR_RX_Msk
 (0x1UL << 
USB_EP5R_CTR_RX_Pos
√ã

	)

6206 
	#USB_EP5R_CTR_RX
 
USB_EP5R_CTR_RX_Msk


	)

6209 
	#USB_EP6R_EA_Pos
 (0U)

	)

6210 
	#USB_EP6R_EA_Msk
 (0xFUL << 
USB_EP6R_EA_Pos
√ã

	)

6211 
	#USB_EP6R_EA
 
USB_EP6R_EA_Msk


	)

6213 
	#USB_EP6R_STAT_TX_Pos
 (4U)

	)

6214 
	#USB_EP6R_STAT_TX_Msk
 (0x3UL << 
USB_EP6R_STAT_TX_Pos
√ã

	)

6215 
	#USB_EP6R_STAT_TX
 
USB_EP6R_STAT_TX_Msk


	)

6216 
	#USB_EP6R_STAT_TX_0
 (0x1UL << 
USB_EP6R_STAT_TX_Pos
√ã

	)

6217 
	#USB_EP6R_STAT_TX_1
 (0x2UL << 
USB_EP6R_STAT_TX_Pos
√ã

	)

6219 
	#USB_EP6R_DTOG_TX_Pos
 (6U)

	)

6220 
	#USB_EP6R_DTOG_TX_Msk
 (0x1UL << 
USB_EP6R_DTOG_TX_Pos
√ã

	)

6221 
	#USB_EP6R_DTOG_TX
 
USB_EP6R_DTOG_TX_Msk


	)

6222 
	#USB_EP6R_CTR_TX_Pos
 (7U)

	)

6223 
	#USB_EP6R_CTR_TX_Msk
 (0x1UL << 
USB_EP6R_CTR_TX_Pos
√ã

	)

6224 
	#USB_EP6R_CTR_TX
 
USB_EP6R_CTR_TX_Msk


	)

6225 
	#USB_EP6R_EP_KIND_Pos
 (8U)

	)

6226 
	#USB_EP6R_EP_KIND_Msk
 (0x1UL << 
USB_EP6R_EP_KIND_Pos
√ã

	)

6227 
	#USB_EP6R_EP_KIND
 
USB_EP6R_EP_KIND_Msk


	)

6229 
	#USB_EP6R_EP_TYPE_Pos
 (9U)

	)

6230 
	#USB_EP6R_EP_TYPE_Msk
 (0x3UL << 
USB_EP6R_EP_TYPE_Pos
√ã

	)

6231 
	#USB_EP6R_EP_TYPE
 
USB_EP6R_EP_TYPE_Msk


	)

6232 
	#USB_EP6R_EP_TYPE_0
 (0x1UL << 
USB_EP6R_EP_TYPE_Pos
√ã

	)

6233 
	#USB_EP6R_EP_TYPE_1
 (0x2UL << 
USB_EP6R_EP_TYPE_Pos
√ã

	)

6235 
	#USB_EP6R_SETUP_Pos
 (11U)

	)

6236 
	#USB_EP6R_SETUP_Msk
 (0x1UL << 
USB_EP6R_SETUP_Pos
√ã

	)

6237 
	#USB_EP6R_SETUP
 
USB_EP6R_SETUP_Msk


	)

6239 
	#USB_EP6R_STAT_RX_Pos
 (12U)

	)

6240 
	#USB_EP6R_STAT_RX_Msk
 (0x3UL << 
USB_EP6R_STAT_RX_Pos
√ã

	)

6241 
	#USB_EP6R_STAT_RX
 
USB_EP6R_STAT_RX_Msk


	)

6242 
	#USB_EP6R_STAT_RX_0
 (0x1UL << 
USB_EP6R_STAT_RX_Pos
√ã

	)

6243 
	#USB_EP6R_STAT_RX_1
 (0x2UL << 
USB_EP6R_STAT_RX_Pos
√ã

	)

6245 
	#USB_EP6R_DTOG_RX_Pos
 (14U)

	)

6246 
	#USB_EP6R_DTOG_RX_Msk
 (0x1UL << 
USB_EP6R_DTOG_RX_Pos
√ã

	)

6247 
	#USB_EP6R_DTOG_RX
 
USB_EP6R_DTOG_RX_Msk


	)

6248 
	#USB_EP6R_CTR_RX_Pos
 (15U)

	)

6249 
	#USB_EP6R_CTR_RX_Msk
 (0x1UL << 
USB_EP6R_CTR_RX_Pos
√ã

	)

6250 
	#USB_EP6R_CTR_RX
 
USB_EP6R_CTR_RX_Msk


	)

6253 
	#USB_EP7R_EA_Pos
 (0U)

	)

6254 
	#USB_EP7R_EA_Msk
 (0xFUL << 
USB_EP7R_EA_Pos
√ã

	)

6255 
	#USB_EP7R_EA
 
USB_EP7R_EA_Msk


	)

6257 
	#USB_EP7R_STAT_TX_Pos
 (4U)

	)

6258 
	#USB_EP7R_STAT_TX_Msk
 (0x3UL << 
USB_EP7R_STAT_TX_Pos
√ã

	)

6259 
	#USB_EP7R_STAT_TX
 
USB_EP7R_STAT_TX_Msk


	)

6260 
	#USB_EP7R_STAT_TX_0
 (0x1UL << 
USB_EP7R_STAT_TX_Pos
√ã

	)

6261 
	#USB_EP7R_STAT_TX_1
 (0x2UL << 
USB_EP7R_STAT_TX_Pos
√ã

	)

6263 
	#USB_EP7R_DTOG_TX_Pos
 (6U)

	)

6264 
	#USB_EP7R_DTOG_TX_Msk
 (0x1UL << 
USB_EP7R_DTOG_TX_Pos
√ã

	)

6265 
	#USB_EP7R_DTOG_TX
 
USB_EP7R_DTOG_TX_Msk


	)

6266 
	#USB_EP7R_CTR_TX_Pos
 (7U)

	)

6267 
	#USB_EP7R_CTR_TX_Msk
 (0x1UL << 
USB_EP7R_CTR_TX_Pos
√ã

	)

6268 
	#USB_EP7R_CTR_TX
 
USB_EP7R_CTR_TX_Msk


	)

6269 
	#USB_EP7R_EP_KIND_Pos
 (8U)

	)

6270 
	#USB_EP7R_EP_KIND_Msk
 (0x1UL << 
USB_EP7R_EP_KIND_Pos
√ã

	)

6271 
	#USB_EP7R_EP_KIND
 
USB_EP7R_EP_KIND_Msk


	)

6273 
	#USB_EP7R_EP_TYPE_Pos
 (9U)

	)

6274 
	#USB_EP7R_EP_TYPE_Msk
 (0x3UL << 
USB_EP7R_EP_TYPE_Pos
√ã

	)

6275 
	#USB_EP7R_EP_TYPE
 
USB_EP7R_EP_TYPE_Msk


	)

6276 
	#USB_EP7R_EP_TYPE_0
 (0x1UL << 
USB_EP7R_EP_TYPE_Pos
√ã

	)

6277 
	#USB_EP7R_EP_TYPE_1
 (0x2UL << 
USB_EP7R_EP_TYPE_Pos
√ã

	)

6279 
	#USB_EP7R_SETUP_Pos
 (11U)

	)

6280 
	#USB_EP7R_SETUP_Msk
 (0x1UL << 
USB_EP7R_SETUP_Pos
√ã

	)

6281 
	#USB_EP7R_SETUP
 
USB_EP7R_SETUP_Msk


	)

6283 
	#USB_EP7R_STAT_RX_Pos
 (12U)

	)

6284 
	#USB_EP7R_STAT_RX_Msk
 (0x3UL << 
USB_EP7R_STAT_RX_Pos
√ã

	)

6285 
	#USB_EP7R_STAT_RX
 
USB_EP7R_STAT_RX_Msk


	)

6286 
	#USB_EP7R_STAT_RX_0
 (0x1UL << 
USB_EP7R_STAT_RX_Pos
√ã

	)

6287 
	#USB_EP7R_STAT_RX_1
 (0x2UL << 
USB_EP7R_STAT_RX_Pos
√ã

	)

6289 
	#USB_EP7R_DTOG_RX_Pos
 (14U)

	)

6290 
	#USB_EP7R_DTOG_RX_Msk
 (0x1UL << 
USB_EP7R_DTOG_RX_Pos
√ã

	)

6291 
	#USB_EP7R_DTOG_RX
 
USB_EP7R_DTOG_RX_Msk


	)

6292 
	#USB_EP7R_CTR_RX_Pos
 (15U)

	)

6293 
	#USB_EP7R_CTR_RX_Msk
 (0x1UL << 
USB_EP7R_CTR_RX_Pos
√ã

	)

6294 
	#USB_EP7R_CTR_RX
 
USB_EP7R_CTR_RX_Msk


	)

6298 
	#USB_CNTR_FRES_Pos
 (0U)

	)

6299 
	#USB_CNTR_FRES_Msk
 (0x1UL << 
USB_CNTR_FRES_Pos
√ã

	)

6300 
	#USB_CNTR_FRES
 
USB_CNTR_FRES_Msk


	)

6301 
	#USB_CNTR_PDWN_Pos
 (1U)

	)

6302 
	#USB_CNTR_PDWN_Msk
 (0x1UL << 
USB_CNTR_PDWN_Pos
√ã

	)

6303 
	#USB_CNTR_PDWN
 
USB_CNTR_PDWN_Msk


	)

6304 
	#USB_CNTR_LP_MODE_Pos
 (2U)

	)

6305 
	#USB_CNTR_LP_MODE_Msk
 (0x1UL << 
USB_CNTR_LP_MODE_Pos
√ã

	)

6306 
	#USB_CNTR_LP_MODE
 
USB_CNTR_LP_MODE_Msk


	)

6307 
	#USB_CNTR_FSUSP_Pos
 (3U)

	)

6308 
	#USB_CNTR_FSUSP_Msk
 (0x1UL << 
USB_CNTR_FSUSP_Pos
√ã

	)

6309 
	#USB_CNTR_FSUSP
 
USB_CNTR_FSUSP_Msk


	)

6310 
	#USB_CNTR_RESUME_Pos
 (4U)

	)

6311 
	#USB_CNTR_RESUME_Msk
 (0x1UL << 
USB_CNTR_RESUME_Pos
√ã

	)

6312 
	#USB_CNTR_RESUME
 
USB_CNTR_RESUME_Msk


	)

6313 
	#USB_CNTR_ESOFM_Pos
 (8U)

	)

6314 
	#USB_CNTR_ESOFM_Msk
 (0x1UL << 
USB_CNTR_ESOFM_Pos
√ã

	)

6315 
	#USB_CNTR_ESOFM
 
USB_CNTR_ESOFM_Msk


	)

6316 
	#USB_CNTR_SOFM_Pos
 (9U)

	)

6317 
	#USB_CNTR_SOFM_Msk
 (0x1UL << 
USB_CNTR_SOFM_Pos
√ã

	)

6318 
	#USB_CNTR_SOFM
 
USB_CNTR_SOFM_Msk


	)

6319 
	#USB_CNTR_RESETM_Pos
 (10U)

	)

6320 
	#USB_CNTR_RESETM_Msk
 (0x1UL << 
USB_CNTR_RESETM_Pos
√ã

	)

6321 
	#USB_CNTR_RESETM
 
USB_CNTR_RESETM_Msk


	)

6322 
	#USB_CNTR_SUSPM_Pos
 (11U)

	)

6323 
	#USB_CNTR_SUSPM_Msk
 (0x1UL << 
USB_CNTR_SUSPM_Pos
√ã

	)

6324 
	#USB_CNTR_SUSPM
 
USB_CNTR_SUSPM_Msk


	)

6325 
	#USB_CNTR_WKUPM_Pos
 (12U)

	)

6326 
	#USB_CNTR_WKUPM_Msk
 (0x1UL << 
USB_CNTR_WKUPM_Pos
√ã

	)

6327 
	#USB_CNTR_WKUPM
 
USB_CNTR_WKUPM_Msk


	)

6328 
	#USB_CNTR_ERRM_Pos
 (13U)

	)

6329 
	#USB_CNTR_ERRM_Msk
 (0x1UL << 
USB_CNTR_ERRM_Pos
√ã

	)

6330 
	#USB_CNTR_ERRM
 
USB_CNTR_ERRM_Msk


	)

6331 
	#USB_CNTR_PMAOVRM_Pos
 (14U)

	)

6332 
	#USB_CNTR_PMAOVRM_Msk
 (0x1UL << 
USB_CNTR_PMAOVRM_Pos
√ã

	)

6333 
	#USB_CNTR_PMAOVRM
 
USB_CNTR_PMAOVRM_Msk


	)

6334 
	#USB_CNTR_CTRM_Pos
 (15U)

	)

6335 
	#USB_CNTR_CTRM_Msk
 (0x1UL << 
USB_CNTR_CTRM_Pos
√ã

	)

6336 
	#USB_CNTR_CTRM
 
USB_CNTR_CTRM_Msk


	)

6339 
	#USB_ISTR_EP_ID_Pos
 (0U)

	)

6340 
	#USB_ISTR_EP_ID_Msk
 (0xFUL << 
USB_ISTR_EP_ID_Pos
√ã

	)

6341 
	#USB_ISTR_EP_ID
 
USB_ISTR_EP_ID_Msk


	)

6342 
	#USB_ISTR_DIR_Pos
 (4U)

	)

6343 
	#USB_ISTR_DIR_Msk
 (0x1UL << 
USB_ISTR_DIR_Pos
√ã

	)

6344 
	#USB_ISTR_DIR
 
USB_ISTR_DIR_Msk


	)

6345 
	#USB_ISTR_ESOF_Pos
 (8U)

	)

6346 
	#USB_ISTR_ESOF_Msk
 (0x1UL << 
USB_ISTR_ESOF_Pos
√ã

	)

6347 
	#USB_ISTR_ESOF
 
USB_ISTR_ESOF_Msk


	)

6348 
	#USB_ISTR_SOF_Pos
 (9U)

	)

6349 
	#USB_ISTR_SOF_Msk
 (0x1UL << 
USB_ISTR_SOF_Pos
√ã

	)

6350 
	#USB_ISTR_SOF
 
USB_ISTR_SOF_Msk


	)

6351 
	#USB_ISTR_RESET_Pos
 (10U)

	)

6352 
	#USB_ISTR_RESET_Msk
 (0x1UL << 
USB_ISTR_RESET_Pos
√ã

	)

6353 
	#USB_ISTR_RESET
 
USB_ISTR_RESET_Msk


	)

6354 
	#USB_ISTR_SUSP_Pos
 (11U)

	)

6355 
	#USB_ISTR_SUSP_Msk
 (0x1UL << 
USB_ISTR_SUSP_Pos
√ã

	)

6356 
	#USB_ISTR_SUSP
 
USB_ISTR_SUSP_Msk


	)

6357 
	#USB_ISTR_WKUP_Pos
 (12U)

	)

6358 
	#USB_ISTR_WKUP_Msk
 (0x1UL << 
USB_ISTR_WKUP_Pos
√ã

	)

6359 
	#USB_ISTR_WKUP
 
USB_ISTR_WKUP_Msk


	)

6360 
	#USB_ISTR_ERR_Pos
 (13U)

	)

6361 
	#USB_ISTR_ERR_Msk
 (0x1UL << 
USB_ISTR_ERR_Pos
√ã

	)

6362 
	#USB_ISTR_ERR
 
USB_ISTR_ERR_Msk


	)

6363 
	#USB_ISTR_PMAOVR_Pos
 (14U)

	)

6364 
	#USB_ISTR_PMAOVR_Msk
 (0x1UL << 
USB_ISTR_PMAOVR_Pos
√ã

	)

6365 
	#USB_ISTR_PMAOVR
 
USB_ISTR_PMAOVR_Msk


	)

6366 
	#USB_ISTR_CTR_Pos
 (15U)

	)

6367 
	#USB_ISTR_CTR_Msk
 (0x1UL << 
USB_ISTR_CTR_Pos
√ã

	)

6368 
	#USB_ISTR_CTR
 
USB_ISTR_CTR_Msk


	)

6371 
	#USB_FNR_FN_Pos
 (0U)

	)

6372 
	#USB_FNR_FN_Msk
 (0x7FFUL << 
USB_FNR_FN_Pos
√ã

	)

6373 
	#USB_FNR_FN
 
USB_FNR_FN_Msk


	)

6374 
	#USB_FNR_LSOF_Pos
 (11U)

	)

6375 
	#USB_FNR_LSOF_Msk
 (0x3UL << 
USB_FNR_LSOF_Pos
√ã

	)

6376 
	#USB_FNR_LSOF
 
USB_FNR_LSOF_Msk


	)

6377 
	#USB_FNR_LCK_Pos
 (13U)

	)

6378 
	#USB_FNR_LCK_Msk
 (0x1UL << 
USB_FNR_LCK_Pos
√ã

	)

6379 
	#USB_FNR_LCK
 
USB_FNR_LCK_Msk


	)

6380 
	#USB_FNR_RXDM_Pos
 (14U)

	)

6381 
	#USB_FNR_RXDM_Msk
 (0x1UL << 
USB_FNR_RXDM_Pos
√ã

	)

6382 
	#USB_FNR_RXDM
 
USB_FNR_RXDM_Msk


	)

6383 
	#USB_FNR_RXDP_Pos
 (15U)

	)

6384 
	#USB_FNR_RXDP_Msk
 (0x1UL << 
USB_FNR_RXDP_Pos
√ã

	)

6385 
	#USB_FNR_RXDP
 
USB_FNR_RXDP_Msk


	)

6388 
	#USB_DADDR_ADD_Pos
 (0U)

	)

6389 
	#USB_DADDR_ADD_Msk
 (0x7FUL << 
USB_DADDR_ADD_Pos
√ã

	)

6390 
	#USB_DADDR_ADD
 
USB_DADDR_ADD_Msk


	)

6391 
	#USB_DADDR_ADD0_Pos
 (0U)

	)

6392 
	#USB_DADDR_ADD0_Msk
 (0x1UL << 
USB_DADDR_ADD0_Pos
√ã

	)

6393 
	#USB_DADDR_ADD0
 
USB_DADDR_ADD0_Msk


	)

6394 
	#USB_DADDR_ADD1_Pos
 (1U)

	)

6395 
	#USB_DADDR_ADD1_Msk
 (0x1UL << 
USB_DADDR_ADD1_Pos
√ã

	)

6396 
	#USB_DADDR_ADD1
 
USB_DADDR_ADD1_Msk


	)

6397 
	#USB_DADDR_ADD2_Pos
 (2U)

	)

6398 
	#USB_DADDR_ADD2_Msk
 (0x1UL << 
USB_DADDR_ADD2_Pos
√ã

	)

6399 
	#USB_DADDR_ADD2
 
USB_DADDR_ADD2_Msk


	)

6400 
	#USB_DADDR_ADD3_Pos
 (3U)

	)

6401 
	#USB_DADDR_ADD3_Msk
 (0x1UL << 
USB_DADDR_ADD3_Pos
√ã

	)

6402 
	#USB_DADDR_ADD3
 
USB_DADDR_ADD3_Msk


	)

6403 
	#USB_DADDR_ADD4_Pos
 (4U)

	)

6404 
	#USB_DADDR_ADD4_Msk
 (0x1UL << 
USB_DADDR_ADD4_Pos
√ã

	)

6405 
	#USB_DADDR_ADD4
 
USB_DADDR_ADD4_Msk


	)

6406 
	#USB_DADDR_ADD5_Pos
 (5U)

	)

6407 
	#USB_DADDR_ADD5_Msk
 (0x1UL << 
USB_DADDR_ADD5_Pos
√ã

	)

6408 
	#USB_DADDR_ADD5
 
USB_DADDR_ADD5_Msk


	)

6409 
	#USB_DADDR_ADD6_Pos
 (6U)

	)

6410 
	#USB_DADDR_ADD6_Msk
 (0x1UL << 
USB_DADDR_ADD6_Pos
√ã

	)

6411 
	#USB_DADDR_ADD6
 
USB_DADDR_ADD6_Msk


	)

6413 
	#USB_DADDR_EF_Pos
 (7U)

	)

6414 
	#USB_DADDR_EF_Msk
 (0x1UL << 
USB_DADDR_EF_Pos
√ã

	)

6415 
	#USB_DADDR_EF
 
USB_DADDR_EF_Msk


	)

6418 
	#USB_BTABLE_BTABLE_Pos
 (3U)

	)

6419 
	#USB_BTABLE_BTABLE_Msk
 (0x1FFFUL << 
USB_BTABLE_BTABLE_Pos
√ã

	)

6420 
	#USB_BTABLE_BTABLE
 
USB_BTABLE_BTABLE_Msk


	)

6424 
	#USB_ADDR0_TX_ADDR0_TX_Pos
 (1U)

	)

6425 
	#USB_ADDR0_TX_ADDR0_TX_Msk
 (0x7FFFUL << 
USB_ADDR0_TX_ADDR0_TX_Pos
√ã

	)

6426 
	#USB_ADDR0_TX_ADDR0_TX
 
USB_ADDR0_TX_ADDR0_TX_Msk


	)

6429 
	#USB_ADDR1_TX_ADDR1_TX_Pos
 (1U)

	)

6430 
	#USB_ADDR1_TX_ADDR1_TX_Msk
 (0x7FFFUL << 
USB_ADDR1_TX_ADDR1_TX_Pos
√ã

	)

6431 
	#USB_ADDR1_TX_ADDR1_TX
 
USB_ADDR1_TX_ADDR1_TX_Msk


	)

6434 
	#USB_ADDR2_TX_ADDR2_TX_Pos
 (1U)

	)

6435 
	#USB_ADDR2_TX_ADDR2_TX_Msk
 (0x7FFFUL << 
USB_ADDR2_TX_ADDR2_TX_Pos
√ã

	)

6436 
	#USB_ADDR2_TX_ADDR2_TX
 
USB_ADDR2_TX_ADDR2_TX_Msk


	)

6439 
	#USB_ADDR3_TX_ADDR3_TX_Pos
 (1U)

	)

6440 
	#USB_ADDR3_TX_ADDR3_TX_Msk
 (0x7FFFUL << 
USB_ADDR3_TX_ADDR3_TX_Pos
√ã

	)

6441 
	#USB_ADDR3_TX_ADDR3_TX
 
USB_ADDR3_TX_ADDR3_TX_Msk


	)

6444 
	#USB_ADDR4_TX_ADDR4_TX_Pos
 (1U)

	)

6445 
	#USB_ADDR4_TX_ADDR4_TX_Msk
 (0x7FFFUL << 
USB_ADDR4_TX_ADDR4_TX_Pos
√ã

	)

6446 
	#USB_ADDR4_TX_ADDR4_TX
 
USB_ADDR4_TX_ADDR4_TX_Msk


	)

6449 
	#USB_ADDR5_TX_ADDR5_TX_Pos
 (1U)

	)

6450 
	#USB_ADDR5_TX_ADDR5_TX_Msk
 (0x7FFFUL << 
USB_ADDR5_TX_ADDR5_TX_Pos
√ã

	)

6451 
	#USB_ADDR5_TX_ADDR5_TX
 
USB_ADDR5_TX_ADDR5_TX_Msk


	)

6454 
	#USB_ADDR6_TX_ADDR6_TX_Pos
 (1U)

	)

6455 
	#USB_ADDR6_TX_ADDR6_TX_Msk
 (0x7FFFUL << 
USB_ADDR6_TX_ADDR6_TX_Pos
√ã

	)

6456 
	#USB_ADDR6_TX_ADDR6_TX
 
USB_ADDR6_TX_ADDR6_TX_Msk


	)

6459 
	#USB_ADDR7_TX_ADDR7_TX_Pos
 (1U)

	)

6460 
	#USB_ADDR7_TX_ADDR7_TX_Msk
 (0x7FFFUL << 
USB_ADDR7_TX_ADDR7_TX_Pos
√ã

	)

6461 
	#USB_ADDR7_TX_ADDR7_TX
 
USB_ADDR7_TX_ADDR7_TX_Msk


	)

6466 
	#USB_COUNT0_TX_COUNT0_TX_Pos
 (0U)

	)

6467 
	#USB_COUNT0_TX_COUNT0_TX_Msk
 (0x3FFUL << 
USB_COUNT0_TX_COUNT0_TX_Pos
√ã

	)

6468 
	#USB_COUNT0_TX_COUNT0_TX
 
USB_COUNT0_TX_COUNT0_TX_Msk


	)

6471 
	#USB_COUNT1_TX_COUNT1_TX_Pos
 (0U)

	)

6472 
	#USB_COUNT1_TX_COUNT1_TX_Msk
 (0x3FFUL << 
USB_COUNT1_TX_COUNT1_TX_Pos
√ã

	)

6473 
	#USB_COUNT1_TX_COUNT1_TX
 
USB_COUNT1_TX_COUNT1_TX_Msk


	)

6476 
	#USB_COUNT2_TX_COUNT2_TX_Pos
 (0U)

	)

6477 
	#USB_COUNT2_TX_COUNT2_TX_Msk
 (0x3FFUL << 
USB_COUNT2_TX_COUNT2_TX_Pos
√ã

	)

6478 
	#USB_COUNT2_TX_COUNT2_TX
 
USB_COUNT2_TX_COUNT2_TX_Msk


	)

6481 
	#USB_COUNT3_TX_COUNT3_TX_Pos
 (0U)

	)

6482 
	#USB_COUNT3_TX_COUNT3_TX_Msk
 (0x3FFUL << 
USB_COUNT3_TX_COUNT3_TX_Pos
√ã

	)

6483 
	#USB_COUNT3_TX_COUNT3_TX
 
USB_COUNT3_TX_COUNT3_TX_Msk


	)

6486 
	#USB_COUNT4_TX_COUNT4_TX_Pos
 (0U)

	)

6487 
	#USB_COUNT4_TX_COUNT4_TX_Msk
 (0x3FFUL << 
USB_COUNT4_TX_COUNT4_TX_Pos
√ã

	)

6488 
	#USB_COUNT4_TX_COUNT4_TX
 
USB_COUNT4_TX_COUNT4_TX_Msk


	)

6491 
	#USB_COUNT5_TX_COUNT5_TX_Pos
 (0U)

	)

6492 
	#USB_COUNT5_TX_COUNT5_TX_Msk
 (0x3FFUL << 
USB_COUNT5_TX_COUNT5_TX_Pos
√ã

	)

6493 
	#USB_COUNT5_TX_COUNT5_TX
 
USB_COUNT5_TX_COUNT5_TX_Msk


	)

6496 
	#USB_COUNT6_TX_COUNT6_TX_Pos
 (0U)

	)

6497 
	#USB_COUNT6_TX_COUNT6_TX_Msk
 (0x3FFUL << 
USB_COUNT6_TX_COUNT6_TX_Pos
√ã

	)

6498 
	#USB_COUNT6_TX_COUNT6_TX
 
USB_COUNT6_TX_COUNT6_TX_Msk


	)

6501 
	#USB_COUNT7_TX_COUNT7_TX_Pos
 (0U)

	)

6502 
	#USB_COUNT7_TX_COUNT7_TX_Msk
 (0x3FFUL << 
USB_COUNT7_TX_COUNT7_TX_Pos
√ã

	)

6503 
	#USB_COUNT7_TX_COUNT7_TX
 
USB_COUNT7_TX_COUNT7_TX_Msk


	)

6508 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 0x000003FFU

	)

6511 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 0x03FF0000U

	)

6514 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 0x000003FFU

	)

6517 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 0x03FF0000U

	)

6520 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 0x000003FFU

	)

6523 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 0x03FF0000U

	)

6526 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 0x000003FFU

	)

6529 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 0x03FF0000U

	)

6532 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 0x000003FFU

	)

6535 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 0x03FF0000U

	)

6538 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 0x000003FFU

	)

6541 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 0x03FF0000U

	)

6544 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 0x000003FFU

	)

6547 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 0x03FF0000U

	)

6550 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 0x000003FFU

	)

6553 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 0x03FF0000U

	)

6558 
	#USB_ADDR0_RX_ADDR0_RX_Pos
 (1U)

	)

6559 
	#USB_ADDR0_RX_ADDR0_RX_Msk
 (0x7FFFUL << 
USB_ADDR0_RX_ADDR0_RX_Pos
√ã

	)

6560 
	#USB_ADDR0_RX_ADDR0_RX
 
USB_ADDR0_RX_ADDR0_RX_Msk


	)

6563 
	#USB_ADDR1_RX_ADDR1_RX_Pos
 (1U)

	)

6564 
	#USB_ADDR1_RX_ADDR1_RX_Msk
 (0x7FFFUL << 
USB_ADDR1_RX_ADDR1_RX_Pos
√ã

	)

6565 
	#USB_ADDR1_RX_ADDR1_RX
 
USB_ADDR1_RX_ADDR1_RX_Msk


	)

6568 
	#USB_ADDR2_RX_ADDR2_RX_Pos
 (1U)

	)

6569 
	#USB_ADDR2_RX_ADDR2_RX_Msk
 (0x7FFFUL << 
USB_ADDR2_RX_ADDR2_RX_Pos
√ã

	)

6570 
	#USB_ADDR2_RX_ADDR2_RX
 
USB_ADDR2_RX_ADDR2_RX_Msk


	)

6573 
	#USB_ADDR3_RX_ADDR3_RX_Pos
 (1U)

	)

6574 
	#USB_ADDR3_RX_ADDR3_RX_Msk
 (0x7FFFUL << 
USB_ADDR3_RX_ADDR3_RX_Pos
√ã

	)

6575 
	#USB_ADDR3_RX_ADDR3_RX
 
USB_ADDR3_RX_ADDR3_RX_Msk


	)

6578 
	#USB_ADDR4_RX_ADDR4_RX_Pos
 (1U)

	)

6579 
	#USB_ADDR4_RX_ADDR4_RX_Msk
 (0x7FFFUL << 
USB_ADDR4_RX_ADDR4_RX_Pos
√ã

	)

6580 
	#USB_ADDR4_RX_ADDR4_RX
 
USB_ADDR4_RX_ADDR4_RX_Msk


	)

6583 
	#USB_ADDR5_RX_ADDR5_RX_Pos
 (1U)

	)

6584 
	#USB_ADDR5_RX_ADDR5_RX_Msk
 (0x7FFFUL << 
USB_ADDR5_RX_ADDR5_RX_Pos
√ã

	)

6585 
	#USB_ADDR5_RX_ADDR5_RX
 
USB_ADDR5_RX_ADDR5_RX_Msk


	)

6588 
	#USB_ADDR6_RX_ADDR6_RX_Pos
 (1U)

	)

6589 
	#USB_ADDR6_RX_ADDR6_RX_Msk
 (0x7FFFUL << 
USB_ADDR6_RX_ADDR6_RX_Pos
√ã

	)

6590 
	#USB_ADDR6_RX_ADDR6_RX
 
USB_ADDR6_RX_ADDR6_RX_Msk


	)

6593 
	#USB_ADDR7_RX_ADDR7_RX_Pos
 (1U)

	)

6594 
	#USB_ADDR7_RX_ADDR7_RX_Msk
 (0x7FFFUL << 
USB_ADDR7_RX_ADDR7_RX_Pos
√ã

	)

6595 
	#USB_ADDR7_RX_ADDR7_RX
 
USB_ADDR7_RX_ADDR7_RX_Msk


	)

6600 
	#USB_COUNT0_RX_COUNT0_RX_Pos
 (0U)

	)

6601 
	#USB_COUNT0_RX_COUNT0_RX_Msk
 (0x3FFUL << 
USB_COUNT0_RX_COUNT0_RX_Pos
√ã

	)

6602 
	#USB_COUNT0_RX_COUNT0_RX
 
USB_COUNT0_RX_COUNT0_RX_Msk


	)

6604 
	#USB_COUNT0_RX_NUM_BLOCK_Pos
 (10U)

	)

6605 
	#USB_COUNT0_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
√ã

	)

6606 
	#USB_COUNT0_RX_NUM_BLOCK
 
USB_COUNT0_RX_NUM_BLOCK_Msk


	)

6607 
	#USB_COUNT0_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
√ã

	)

6608 
	#USB_COUNT0_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
√ã

	)

6609 
	#USB_COUNT0_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
√ã

	)

6610 
	#USB_COUNT0_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
√ã

	)

6611 
	#USB_COUNT0_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
√ã

	)

6613 
	#USB_COUNT0_RX_BLSIZE_Pos
 (15U)

	)

6614 
	#USB_COUNT0_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT0_RX_BLSIZE_Pos
√ã

	)

6615 
	#USB_COUNT0_RX_BLSIZE
 
USB_COUNT0_RX_BLSIZE_Msk


	)

6618 
	#USB_COUNT1_RX_COUNT1_RX_Pos
 (0U)

	)

6619 
	#USB_COUNT1_RX_COUNT1_RX_Msk
 (0x3FFUL << 
USB_COUNT1_RX_COUNT1_RX_Pos
√ã

	)

6620 
	#USB_COUNT1_RX_COUNT1_RX
 
USB_COUNT1_RX_COUNT1_RX_Msk


	)

6622 
	#USB_COUNT1_RX_NUM_BLOCK_Pos
 (10U)

	)

6623 
	#USB_COUNT1_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
√ã

	)

6624 
	#USB_COUNT1_RX_NUM_BLOCK
 
USB_COUNT1_RX_NUM_BLOCK_Msk


	)

6625 
	#USB_COUNT1_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
√ã

	)

6626 
	#USB_COUNT1_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
√ã

	)

6627 
	#USB_COUNT1_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
√ã

	)

6628 
	#USB_COUNT1_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
√ã

	)

6629 
	#USB_COUNT1_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
√ã

	)

6631 
	#USB_COUNT1_RX_BLSIZE_Pos
 (15U)

	)

6632 
	#USB_COUNT1_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT1_RX_BLSIZE_Pos
√ã

	)

6633 
	#USB_COUNT1_RX_BLSIZE
 
USB_COUNT1_RX_BLSIZE_Msk


	)

6636 
	#USB_COUNT2_RX_COUNT2_RX_Pos
 (0U)

	)

6637 
	#USB_COUNT2_RX_COUNT2_RX_Msk
 (0x3FFUL << 
USB_COUNT2_RX_COUNT2_RX_Pos
√ã

	)

6638 
	#USB_COUNT2_RX_COUNT2_RX
 
USB_COUNT2_RX_COUNT2_RX_Msk


	)

6640 
	#USB_COUNT2_RX_NUM_BLOCK_Pos
 (10U)

	)

6641 
	#USB_COUNT2_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
√ã

	)

6642 
	#USB_COUNT2_RX_NUM_BLOCK
 
USB_COUNT2_RX_NUM_BLOCK_Msk


	)

6643 
	#USB_COUNT2_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
√ã

	)

6644 
	#USB_COUNT2_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
√ã

	)

6645 
	#USB_COUNT2_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
√ã

	)

6646 
	#USB_COUNT2_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
√ã

	)

6647 
	#USB_COUNT2_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
√ã

	)

6649 
	#USB_COUNT2_RX_BLSIZE_Pos
 (15U)

	)

6650 
	#USB_COUNT2_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT2_RX_BLSIZE_Pos
√ã

	)

6651 
	#USB_COUNT2_RX_BLSIZE
 
USB_COUNT2_RX_BLSIZE_Msk


	)

6654 
	#USB_COUNT3_RX_COUNT3_RX_Pos
 (0U)

	)

6655 
	#USB_COUNT3_RX_COUNT3_RX_Msk
 (0x3FFUL << 
USB_COUNT3_RX_COUNT3_RX_Pos
√ã

	)

6656 
	#USB_COUNT3_RX_COUNT3_RX
 
USB_COUNT3_RX_COUNT3_RX_Msk


	)

6658 
	#USB_COUNT3_RX_NUM_BLOCK_Pos
 (10U)

	)

6659 
	#USB_COUNT3_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
√ã

	)

6660 
	#USB_COUNT3_RX_NUM_BLOCK
 
USB_COUNT3_RX_NUM_BLOCK_Msk


	)

6661 
	#USB_COUNT3_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
√ã

	)

6662 
	#USB_COUNT3_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
√ã

	)

6663 
	#USB_COUNT3_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
√ã

	)

6664 
	#USB_COUNT3_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
√ã

	)

6665 
	#USB_COUNT3_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
√ã

	)

6667 
	#USB_COUNT3_RX_BLSIZE_Pos
 (15U)

	)

6668 
	#USB_COUNT3_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT3_RX_BLSIZE_Pos
√ã

	)

6669 
	#USB_COUNT3_RX_BLSIZE
 
USB_COUNT3_RX_BLSIZE_Msk


	)

6672 
	#USB_COUNT4_RX_COUNT4_RX_Pos
 (0U)

	)

6673 
	#USB_COUNT4_RX_COUNT4_RX_Msk
 (0x3FFUL << 
USB_COUNT4_RX_COUNT4_RX_Pos
√ã

	)

6674 
	#USB_COUNT4_RX_COUNT4_RX
 
USB_COUNT4_RX_COUNT4_RX_Msk


	)

6676 
	#USB_COUNT4_RX_NUM_BLOCK_Pos
 (10U)

	)

6677 
	#USB_COUNT4_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
√ã

	)

6678 
	#USB_COUNT4_RX_NUM_BLOCK
 
USB_COUNT4_RX_NUM_BLOCK_Msk


	)

6679 
	#USB_COUNT4_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
√ã

	)

6680 
	#USB_COUNT4_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
√ã

	)

6681 
	#USB_COUNT4_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
√ã

	)

6682 
	#USB_COUNT4_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
√ã

	)

6683 
	#USB_COUNT4_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
√ã

	)

6685 
	#USB_COUNT4_RX_BLSIZE_Pos
 (15U)

	)

6686 
	#USB_COUNT4_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT4_RX_BLSIZE_Pos
√ã

	)

6687 
	#USB_COUNT4_RX_BLSIZE
 
USB_COUNT4_RX_BLSIZE_Msk


	)

6690 
	#USB_COUNT5_RX_COUNT5_RX_Pos
 (0U)

	)

6691 
	#USB_COUNT5_RX_COUNT5_RX_Msk
 (0x3FFUL << 
USB_COUNT5_RX_COUNT5_RX_Pos
√ã

	)

6692 
	#USB_COUNT5_RX_COUNT5_RX
 
USB_COUNT5_RX_COUNT5_RX_Msk


	)

6694 
	#USB_COUNT5_RX_NUM_BLOCK_Pos
 (10U)

	)

6695 
	#USB_COUNT5_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
√ã

	)

6696 
	#USB_COUNT5_RX_NUM_BLOCK
 
USB_COUNT5_RX_NUM_BLOCK_Msk


	)

6697 
	#USB_COUNT5_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
√ã

	)

6698 
	#USB_COUNT5_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
√ã

	)

6699 
	#USB_COUNT5_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
√ã

	)

6700 
	#USB_COUNT5_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
√ã

	)

6701 
	#USB_COUNT5_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
√ã

	)

6703 
	#USB_COUNT5_RX_BLSIZE_Pos
 (15U)

	)

6704 
	#USB_COUNT5_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT5_RX_BLSIZE_Pos
√ã

	)

6705 
	#USB_COUNT5_RX_BLSIZE
 
USB_COUNT5_RX_BLSIZE_Msk


	)

6708 
	#USB_COUNT6_RX_COUNT6_RX_Pos
 (0U)

	)

6709 
	#USB_COUNT6_RX_COUNT6_RX_Msk
 (0x3FFUL << 
USB_COUNT6_RX_COUNT6_RX_Pos
√ã

	)

6710 
	#USB_COUNT6_RX_COUNT6_RX
 
USB_COUNT6_RX_COUNT6_RX_Msk


	)

6712 
	#USB_COUNT6_RX_NUM_BLOCK_Pos
 (10U)

	)

6713 
	#USB_COUNT6_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
√ã

	)

6714 
	#USB_COUNT6_RX_NUM_BLOCK
 
USB_COUNT6_RX_NUM_BLOCK_Msk


	)

6715 
	#USB_COUNT6_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
√ã

	)

6716 
	#USB_COUNT6_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
√ã

	)

6717 
	#USB_COUNT6_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
√ã

	)

6718 
	#USB_COUNT6_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
√ã

	)

6719 
	#USB_COUNT6_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
√ã

	)

6721 
	#USB_COUNT6_RX_BLSIZE_Pos
 (15U)

	)

6722 
	#USB_COUNT6_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT6_RX_BLSIZE_Pos
√ã

	)

6723 
	#USB_COUNT6_RX_BLSIZE
 
USB_COUNT6_RX_BLSIZE_Msk


	)

6726 
	#USB_COUNT7_RX_COUNT7_RX_Pos
 (0U)

	)

6727 
	#USB_COUNT7_RX_COUNT7_RX_Msk
 (0x3FFUL << 
USB_COUNT7_RX_COUNT7_RX_Pos
√ã

	)

6728 
	#USB_COUNT7_RX_COUNT7_RX
 
USB_COUNT7_RX_COUNT7_RX_Msk


	)

6730 
	#USB_COUNT7_RX_NUM_BLOCK_Pos
 (10U)

	)

6731 
	#USB_COUNT7_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
√ã

	)

6732 
	#USB_COUNT7_RX_NUM_BLOCK
 
USB_COUNT7_RX_NUM_BLOCK_Msk


	)

6733 
	#USB_COUNT7_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
√ã

	)

6734 
	#USB_COUNT7_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
√ã

	)

6735 
	#USB_COUNT7_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
√ã

	)

6736 
	#USB_COUNT7_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
√ã

	)

6737 
	#USB_COUNT7_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
√ã

	)

6739 
	#USB_COUNT7_RX_BLSIZE_Pos
 (15U)

	)

6740 
	#USB_COUNT7_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT7_RX_BLSIZE_Pos
√ã

	)

6741 
	#USB_COUNT7_RX_BLSIZE
 
USB_COUNT7_RX_BLSIZE_Msk


	)

6746 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 0x000003FFU

	)

6748 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6749 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6750 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6751 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6752 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6753 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6755 
	#USB_COUNT0_RX_0_BLSIZE_0
 0x00008000U

	)

6758 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 0x03FF0000U

	)

6760 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6761 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6762 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6763 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6764 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6765 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6767 
	#USB_COUNT0_RX_1_BLSIZE_1
 0x80000000U

	)

6770 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 0x000003FFU

	)

6772 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6773 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6774 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6775 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6776 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6777 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6779 
	#USB_COUNT1_RX_0_BLSIZE_0
 0x00008000U

	)

6782 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 0x03FF0000U

	)

6784 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6785 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6786 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6787 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6788 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6789 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6791 
	#USB_COUNT1_RX_1_BLSIZE_1
 0x80000000U

	)

6794 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 0x000003FFU

	)

6796 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6797 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6798 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6799 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6800 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6801 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6803 
	#USB_COUNT2_RX_0_BLSIZE_0
 0x00008000U

	)

6806 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 0x03FF0000U

	)

6808 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6809 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6810 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6811 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6812 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6813 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6815 
	#USB_COUNT2_RX_1_BLSIZE_1
 0x80000000U

	)

6818 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 0x000003FFU

	)

6820 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6821 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6822 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6823 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6824 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6825 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6827 
	#USB_COUNT3_RX_0_BLSIZE_0
 0x00008000U

	)

6830 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 0x03FF0000U

	)

6832 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6833 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6834 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6835 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6836 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6837 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6839 
	#USB_COUNT3_RX_1_BLSIZE_1
 0x80000000U

	)

6842 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 0x000003FFU

	)

6844 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6845 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6846 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6847 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6848 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6849 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6851 
	#USB_COUNT4_RX_0_BLSIZE_0
 0x00008000U

	)

6854 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 0x03FF0000U

	)

6856 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6857 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6858 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6859 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6860 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6861 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6863 
	#USB_COUNT4_RX_1_BLSIZE_1
 0x80000000U

	)

6866 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 0x000003FFU

	)

6868 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6869 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6870 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6871 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6872 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6873 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6875 
	#USB_COUNT5_RX_0_BLSIZE_0
 0x00008000U

	)

6878 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 0x03FF0000U

	)

6880 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6881 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6882 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6883 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6884 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6885 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6887 
	#USB_COUNT5_RX_1_BLSIZE_1
 0x80000000U

	)

6890 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 0x000003FFU

	)

6892 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6893 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6894 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6895 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6896 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6897 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6899 
	#USB_COUNT6_RX_0_BLSIZE_0
 0x00008000U

	)

6902 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 0x03FF0000U

	)

6904 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6905 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6906 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6907 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6908 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6909 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6911 
	#USB_COUNT6_RX_1_BLSIZE_1
 0x80000000U

	)

6914 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 0x000003FFU

	)

6916 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

6917 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

6918 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

6919 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

6920 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

6921 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

6923 
	#USB_COUNT7_RX_0_BLSIZE_0
 0x00008000U

	)

6926 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 0x03FF0000U

	)

6928 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

6929 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

6930 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

6931 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

6932 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

6933 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

6935 
	#USB_COUNT7_RX_1_BLSIZE_1
 0x80000000U

	)

6945 
	#CAN_MCR_INRQ_Pos
 (0U)

	)

6946 
	#CAN_MCR_INRQ_Msk
 (0x1UL << 
CAN_MCR_INRQ_Pos
√ã

	)

6947 
	#CAN_MCR_INRQ
 
CAN_MCR_INRQ_Msk


	)

6948 
	#CAN_MCR_SLEEP_Pos
 (1U)

	)

6949 
	#CAN_MCR_SLEEP_Msk
 (0x1UL << 
CAN_MCR_SLEEP_Pos
√ã

	)

6950 
	#CAN_MCR_SLEEP
 
CAN_MCR_SLEEP_Msk


	)

6951 
	#CAN_MCR_TXFP_Pos
 (2U)

	)

6952 
	#CAN_MCR_TXFP_Msk
 (0x1UL << 
CAN_MCR_TXFP_Pos
√ã

	)

6953 
	#CAN_MCR_TXFP
 
CAN_MCR_TXFP_Msk


	)

6954 
	#CAN_MCR_RFLM_Pos
 (3U)

	)

6955 
	#CAN_MCR_RFLM_Msk
 (0x1UL << 
CAN_MCR_RFLM_Pos
√ã

	)

6956 
	#CAN_MCR_RFLM
 
CAN_MCR_RFLM_Msk


	)

6957 
	#CAN_MCR_NART_Pos
 (4U)

	)

6958 
	#CAN_MCR_NART_Msk
 (0x1UL << 
CAN_MCR_NART_Pos
√ã

	)

6959 
	#CAN_MCR_NART
 
CAN_MCR_NART_Msk


	)

6960 
	#CAN_MCR_AWUM_Pos
 (5U)

	)

6961 
	#CAN_MCR_AWUM_Msk
 (0x1UL << 
CAN_MCR_AWUM_Pos
√ã

	)

6962 
	#CAN_MCR_AWUM
 
CAN_MCR_AWUM_Msk


	)

6963 
	#CAN_MCR_ABOM_Pos
 (6U)

	)

6964 
	#CAN_MCR_ABOM_Msk
 (0x1UL << 
CAN_MCR_ABOM_Pos
√ã

	)

6965 
	#CAN_MCR_ABOM
 
CAN_MCR_ABOM_Msk


	)

6966 
	#CAN_MCR_TTCM_Pos
 (7U)

	)

6967 
	#CAN_MCR_TTCM_Msk
 (0x1UL << 
CAN_MCR_TTCM_Pos
√ã

	)

6968 
	#CAN_MCR_TTCM
 
CAN_MCR_TTCM_Msk


	)

6969 
	#CAN_MCR_RESET_Pos
 (15U)

	)

6970 
	#CAN_MCR_RESET_Msk
 (0x1UL << 
CAN_MCR_RESET_Pos
√ã

	)

6971 
	#CAN_MCR_RESET
 
CAN_MCR_RESET_Msk


	)

6972 
	#CAN_MCR_DBF_Pos
 (16U)

	)

6973 
	#CAN_MCR_DBF_Msk
 (0x1UL << 
CAN_MCR_DBF_Pos
√ã

	)

6974 
	#CAN_MCR_DBF
 
CAN_MCR_DBF_Msk


	)

6977 
	#CAN_MSR_INAK_Pos
 (0U)

	)

6978 
	#CAN_MSR_INAK_Msk
 (0x1UL << 
CAN_MSR_INAK_Pos
√ã

	)

6979 
	#CAN_MSR_INAK
 
CAN_MSR_INAK_Msk


	)

6980 
	#CAN_MSR_SLAK_Pos
 (1U)

	)

6981 
	#CAN_MSR_SLAK_Msk
 (0x1UL << 
CAN_MSR_SLAK_Pos
√ã

	)

6982 
	#CAN_MSR_SLAK
 
CAN_MSR_SLAK_Msk


	)

6983 
	#CAN_MSR_ERRI_Pos
 (2U)

	)

6984 
	#CAN_MSR_ERRI_Msk
 (0x1UL << 
CAN_MSR_ERRI_Pos
√ã

	)

6985 
	#CAN_MSR_ERRI
 
CAN_MSR_ERRI_Msk


	)

6986 
	#CAN_MSR_WKUI_Pos
 (3U)

	)

6987 
	#CAN_MSR_WKUI_Msk
 (0x1UL << 
CAN_MSR_WKUI_Pos
√ã

	)

6988 
	#CAN_MSR_WKUI
 
CAN_MSR_WKUI_Msk


	)

6989 
	#CAN_MSR_SLAKI_Pos
 (4U)

	)

6990 
	#CAN_MSR_SLAKI_Msk
 (0x1UL << 
CAN_MSR_SLAKI_Pos
√ã

	)

6991 
	#CAN_MSR_SLAKI
 
CAN_MSR_SLAKI_Msk


	)

6992 
	#CAN_MSR_TXM_Pos
 (8U)

	)

6993 
	#CAN_MSR_TXM_Msk
 (0x1UL << 
CAN_MSR_TXM_Pos
√ã

	)

6994 
	#CAN_MSR_TXM
 
CAN_MSR_TXM_Msk


	)

6995 
	#CAN_MSR_RXM_Pos
 (9U)

	)

6996 
	#CAN_MSR_RXM_Msk
 (0x1UL << 
CAN_MSR_RXM_Pos
√ã

	)

6997 
	#CAN_MSR_RXM
 
CAN_MSR_RXM_Msk


	)

6998 
	#CAN_MSR_SAMP_Pos
 (10U)

	)

6999 
	#CAN_MSR_SAMP_Msk
 (0x1UL << 
CAN_MSR_SAMP_Pos
√ã

	)

7000 
	#CAN_MSR_SAMP
 
CAN_MSR_SAMP_Msk


	)

7001 
	#CAN_MSR_RX_Pos
 (11U)

	)

7002 
	#CAN_MSR_RX_Msk
 (0x1UL << 
CAN_MSR_RX_Pos
√ã

	)

7003 
	#CAN_MSR_RX
 
CAN_MSR_RX_Msk


	)

7006 
	#CAN_TSR_RQCP0_Pos
 (0U)

	)

7007 
	#CAN_TSR_RQCP0_Msk
 (0x1UL << 
CAN_TSR_RQCP0_Pos
√ã

	)

7008 
	#CAN_TSR_RQCP0
 
CAN_TSR_RQCP0_Msk


	)

7009 
	#CAN_TSR_TXOK0_Pos
 (1U)

	)

7010 
	#CAN_TSR_TXOK0_Msk
 (0x1UL << 
CAN_TSR_TXOK0_Pos
√ã

	)

7011 
	#CAN_TSR_TXOK0
 
CAN_TSR_TXOK0_Msk


	)

7012 
	#CAN_TSR_ALST0_Pos
 (2U)

	)

7013 
	#CAN_TSR_ALST0_Msk
 (0x1UL << 
CAN_TSR_ALST0_Pos
√ã

	)

7014 
	#CAN_TSR_ALST0
 
CAN_TSR_ALST0_Msk


	)

7015 
	#CAN_TSR_TERR0_Pos
 (3U)

	)

7016 
	#CAN_TSR_TERR0_Msk
 (0x1UL << 
CAN_TSR_TERR0_Pos
√ã

	)

7017 
	#CAN_TSR_TERR0
 
CAN_TSR_TERR0_Msk


	)

7018 
	#CAN_TSR_ABRQ0_Pos
 (7U)

	)

7019 
	#CAN_TSR_ABRQ0_Msk
 (0x1UL << 
CAN_TSR_ABRQ0_Pos
√ã

	)

7020 
	#CAN_TSR_ABRQ0
 
CAN_TSR_ABRQ0_Msk


	)

7021 
	#CAN_TSR_RQCP1_Pos
 (8U)

	)

7022 
	#CAN_TSR_RQCP1_Msk
 (0x1UL << 
CAN_TSR_RQCP1_Pos
√ã

	)

7023 
	#CAN_TSR_RQCP1
 
CAN_TSR_RQCP1_Msk


	)

7024 
	#CAN_TSR_TXOK1_Pos
 (9U)

	)

7025 
	#CAN_TSR_TXOK1_Msk
 (0x1UL << 
CAN_TSR_TXOK1_Pos
√ã

	)

7026 
	#CAN_TSR_TXOK1
 
CAN_TSR_TXOK1_Msk


	)

7027 
	#CAN_TSR_ALST1_Pos
 (10U)

	)

7028 
	#CAN_TSR_ALST1_Msk
 (0x1UL << 
CAN_TSR_ALST1_Pos
√ã

	)

7029 
	#CAN_TSR_ALST1
 
CAN_TSR_ALST1_Msk


	)

7030 
	#CAN_TSR_TERR1_Pos
 (11U)

	)

7031 
	#CAN_TSR_TERR1_Msk
 (0x1UL << 
CAN_TSR_TERR1_Pos
√ã

	)

7032 
	#CAN_TSR_TERR1
 
CAN_TSR_TERR1_Msk


	)

7033 
	#CAN_TSR_ABRQ1_Pos
 (15U)

	)

7034 
	#CAN_TSR_ABRQ1_Msk
 (0x1UL << 
CAN_TSR_ABRQ1_Pos
√ã

	)

7035 
	#CAN_TSR_ABRQ1
 
CAN_TSR_ABRQ1_Msk


	)

7036 
	#CAN_TSR_RQCP2_Pos
 (16U)

	)

7037 
	#CAN_TSR_RQCP2_Msk
 (0x1UL << 
CAN_TSR_RQCP2_Pos
√ã

	)

7038 
	#CAN_TSR_RQCP2
 
CAN_TSR_RQCP2_Msk


	)

7039 
	#CAN_TSR_TXOK2_Pos
 (17U)

	)

7040 
	#CAN_TSR_TXOK2_Msk
 (0x1UL << 
CAN_TSR_TXOK2_Pos
√ã

	)

7041 
	#CAN_TSR_TXOK2
 
CAN_TSR_TXOK2_Msk


	)

7042 
	#CAN_TSR_ALST2_Pos
 (18U)

	)

7043 
	#CAN_TSR_ALST2_Msk
 (0x1UL << 
CAN_TSR_ALST2_Pos
√ã

	)

7044 
	#CAN_TSR_ALST2
 
CAN_TSR_ALST2_Msk


	)

7045 
	#CAN_TSR_TERR2_Pos
 (19U)

	)

7046 
	#CAN_TSR_TERR2_Msk
 (0x1UL << 
CAN_TSR_TERR2_Pos
√ã

	)

7047 
	#CAN_TSR_TERR2
 
CAN_TSR_TERR2_Msk


	)

7048 
	#CAN_TSR_ABRQ2_Pos
 (23U)

	)

7049 
	#CAN_TSR_ABRQ2_Msk
 (0x1UL << 
CAN_TSR_ABRQ2_Pos
√ã

	)

7050 
	#CAN_TSR_ABRQ2
 
CAN_TSR_ABRQ2_Msk


	)

7051 
	#CAN_TSR_CODE_Pos
 (24U)

	)

7052 
	#CAN_TSR_CODE_Msk
 (0x3UL << 
CAN_TSR_CODE_Pos
√ã

	)

7053 
	#CAN_TSR_CODE
 
CAN_TSR_CODE_Msk


	)

7055 
	#CAN_TSR_TME_Pos
 (26U)

	)

7056 
	#CAN_TSR_TME_Msk
 (0x7UL << 
CAN_TSR_TME_Pos
√ã

	)

7057 
	#CAN_TSR_TME
 
CAN_TSR_TME_Msk


	)

7058 
	#CAN_TSR_TME0_Pos
 (26U)

	)

7059 
	#CAN_TSR_TME0_Msk
 (0x1UL << 
CAN_TSR_TME0_Pos
√ã

	)

7060 
	#CAN_TSR_TME0
 
CAN_TSR_TME0_Msk


	)

7061 
	#CAN_TSR_TME1_Pos
 (27U)

	)

7062 
	#CAN_TSR_TME1_Msk
 (0x1UL << 
CAN_TSR_TME1_Pos
√ã

	)

7063 
	#CAN_TSR_TME1
 
CAN_TSR_TME1_Msk


	)

7064 
	#CAN_TSR_TME2_Pos
 (28U)

	)

7065 
	#CAN_TSR_TME2_Msk
 (0x1UL << 
CAN_TSR_TME2_Pos
√ã

	)

7066 
	#CAN_TSR_TME2
 
CAN_TSR_TME2_Msk


	)

7068 
	#CAN_TSR_LOW_Pos
 (29U)

	)

7069 
	#CAN_TSR_LOW_Msk
 (0x7UL << 
CAN_TSR_LOW_Pos
√ã

	)

7070 
	#CAN_TSR_LOW
 
CAN_TSR_LOW_Msk


	)

7071 
	#CAN_TSR_LOW0_Pos
 (29U)

	)

7072 
	#CAN_TSR_LOW0_Msk
 (0x1UL << 
CAN_TSR_LOW0_Pos
√ã

	)

7073 
	#CAN_TSR_LOW0
 
CAN_TSR_LOW0_Msk


	)

7074 
	#CAN_TSR_LOW1_Pos
 (30U)

	)

7075 
	#CAN_TSR_LOW1_Msk
 (0x1UL << 
CAN_TSR_LOW1_Pos
√ã

	)

7076 
	#CAN_TSR_LOW1
 
CAN_TSR_LOW1_Msk


	)

7077 
	#CAN_TSR_LOW2_Pos
 (31U)

	)

7078 
	#CAN_TSR_LOW2_Msk
 (0x1UL << 
CAN_TSR_LOW2_Pos
√ã

	)

7079 
	#CAN_TSR_LOW2
 
CAN_TSR_LOW2_Msk


	)

7082 
	#CAN_RF0R_FMP0_Pos
 (0U)

	)

7083 
	#CAN_RF0R_FMP0_Msk
 (0x3UL << 
CAN_RF0R_FMP0_Pos
√ã

	)

7084 
	#CAN_RF0R_FMP0
 
CAN_RF0R_FMP0_Msk


	)

7085 
	#CAN_RF0R_FULL0_Pos
 (3U)

	)

7086 
	#CAN_RF0R_FULL0_Msk
 (0x1UL << 
CAN_RF0R_FULL0_Pos
√ã

	)

7087 
	#CAN_RF0R_FULL0
 
CAN_RF0R_FULL0_Msk


	)

7088 
	#CAN_RF0R_FOVR0_Pos
 (4U)

	)

7089 
	#CAN_RF0R_FOVR0_Msk
 (0x1UL << 
CAN_RF0R_FOVR0_Pos
√ã

	)

7090 
	#CAN_RF0R_FOVR0
 
CAN_RF0R_FOVR0_Msk


	)

7091 
	#CAN_RF0R_RFOM0_Pos
 (5U)

	)

7092 
	#CAN_RF0R_RFOM0_Msk
 (0x1UL << 
CAN_RF0R_RFOM0_Pos
√ã

	)

7093 
	#CAN_RF0R_RFOM0
 
CAN_RF0R_RFOM0_Msk


	)

7096 
	#CAN_RF1R_FMP1_Pos
 (0U)

	)

7097 
	#CAN_RF1R_FMP1_Msk
 (0x3UL << 
CAN_RF1R_FMP1_Pos
√ã

	)

7098 
	#CAN_RF1R_FMP1
 
CAN_RF1R_FMP1_Msk


	)

7099 
	#CAN_RF1R_FULL1_Pos
 (3U)

	)

7100 
	#CAN_RF1R_FULL1_Msk
 (0x1UL << 
CAN_RF1R_FULL1_Pos
√ã

	)

7101 
	#CAN_RF1R_FULL1
 
CAN_RF1R_FULL1_Msk


	)

7102 
	#CAN_RF1R_FOVR1_Pos
 (4U)

	)

7103 
	#CAN_RF1R_FOVR1_Msk
 (0x1UL << 
CAN_RF1R_FOVR1_Pos
√ã

	)

7104 
	#CAN_RF1R_FOVR1
 
CAN_RF1R_FOVR1_Msk


	)

7105 
	#CAN_RF1R_RFOM1_Pos
 (5U)

	)

7106 
	#CAN_RF1R_RFOM1_Msk
 (0x1UL << 
CAN_RF1R_RFOM1_Pos
√ã

	)

7107 
	#CAN_RF1R_RFOM1
 
CAN_RF1R_RFOM1_Msk


	)

7110 
	#CAN_IER_TMEIE_Pos
 (0U)

	)

7111 
	#CAN_IER_TMEIE_Msk
 (0x1UL << 
CAN_IER_TMEIE_Pos
√ã

	)

7112 
	#CAN_IER_TMEIE
 
CAN_IER_TMEIE_Msk


	)

7113 
	#CAN_IER_FMPIE0_Pos
 (1U)

	)

7114 
	#CAN_IER_FMPIE0_Msk
 (0x1UL << 
CAN_IER_FMPIE0_Pos
√ã

	)

7115 
	#CAN_IER_FMPIE0
 
CAN_IER_FMPIE0_Msk


	)

7116 
	#CAN_IER_FFIE0_Pos
 (2U)

	)

7117 
	#CAN_IER_FFIE0_Msk
 (0x1UL << 
CAN_IER_FFIE0_Pos
√ã

	)

7118 
	#CAN_IER_FFIE0
 
CAN_IER_FFIE0_Msk


	)

7119 
	#CAN_IER_FOVIE0_Pos
 (3U)

	)

7120 
	#CAN_IER_FOVIE0_Msk
 (0x1UL << 
CAN_IER_FOVIE0_Pos
√ã

	)

7121 
	#CAN_IER_FOVIE0
 
CAN_IER_FOVIE0_Msk


	)

7122 
	#CAN_IER_FMPIE1_Pos
 (4U)

	)

7123 
	#CAN_IER_FMPIE1_Msk
 (0x1UL << 
CAN_IER_FMPIE1_Pos
√ã

	)

7124 
	#CAN_IER_FMPIE1
 
CAN_IER_FMPIE1_Msk


	)

7125 
	#CAN_IER_FFIE1_Pos
 (5U)

	)

7126 
	#CAN_IER_FFIE1_Msk
 (0x1UL << 
CAN_IER_FFIE1_Pos
√ã

	)

7127 
	#CAN_IER_FFIE1
 
CAN_IER_FFIE1_Msk


	)

7128 
	#CAN_IER_FOVIE1_Pos
 (6U)

	)

7129 
	#CAN_IER_FOVIE1_Msk
 (0x1UL << 
CAN_IER_FOVIE1_Pos
√ã

	)

7130 
	#CAN_IER_FOVIE1
 
CAN_IER_FOVIE1_Msk


	)

7131 
	#CAN_IER_EWGIE_Pos
 (8U)

	)

7132 
	#CAN_IER_EWGIE_Msk
 (0x1UL << 
CAN_IER_EWGIE_Pos
√ã

	)

7133 
	#CAN_IER_EWGIE
 
CAN_IER_EWGIE_Msk


	)

7134 
	#CAN_IER_EPVIE_Pos
 (9U)

	)

7135 
	#CAN_IER_EPVIE_Msk
 (0x1UL << 
CAN_IER_EPVIE_Pos
√ã

	)

7136 
	#CAN_IER_EPVIE
 
CAN_IER_EPVIE_Msk


	)

7137 
	#CAN_IER_BOFIE_Pos
 (10U)

	)

7138 
	#CAN_IER_BOFIE_Msk
 (0x1UL << 
CAN_IER_BOFIE_Pos
√ã

	)

7139 
	#CAN_IER_BOFIE
 
CAN_IER_BOFIE_Msk


	)

7140 
	#CAN_IER_LECIE_Pos
 (11U)

	)

7141 
	#CAN_IER_LECIE_Msk
 (0x1UL << 
CAN_IER_LECIE_Pos
√ã

	)

7142 
	#CAN_IER_LECIE
 
CAN_IER_LECIE_Msk


	)

7143 
	#CAN_IER_ERRIE_Pos
 (15U)

	)

7144 
	#CAN_IER_ERRIE_Msk
 (0x1UL << 
CAN_IER_ERRIE_Pos
√ã

	)

7145 
	#CAN_IER_ERRIE
 
CAN_IER_ERRIE_Msk


	)

7146 
	#CAN_IER_WKUIE_Pos
 (16U)

	)

7147 
	#CAN_IER_WKUIE_Msk
 (0x1UL << 
CAN_IER_WKUIE_Pos
√ã

	)

7148 
	#CAN_IER_WKUIE
 
CAN_IER_WKUIE_Msk


	)

7149 
	#CAN_IER_SLKIE_Pos
 (17U)

	)

7150 
	#CAN_IER_SLKIE_Msk
 (0x1UL << 
CAN_IER_SLKIE_Pos
√ã

	)

7151 
	#CAN_IER_SLKIE
 
CAN_IER_SLKIE_Msk


	)

7154 
	#CAN_ESR_EWGF_Pos
 (0U)

	)

7155 
	#CAN_ESR_EWGF_Msk
 (0x1UL << 
CAN_ESR_EWGF_Pos
√ã

	)

7156 
	#CAN_ESR_EWGF
 
CAN_ESR_EWGF_Msk


	)

7157 
	#CAN_ESR_EPVF_Pos
 (1U)

	)

7158 
	#CAN_ESR_EPVF_Msk
 (0x1UL << 
CAN_ESR_EPVF_Pos
√ã

	)

7159 
	#CAN_ESR_EPVF
 
CAN_ESR_EPVF_Msk


	)

7160 
	#CAN_ESR_BOFF_Pos
 (2U)

	)

7161 
	#CAN_ESR_BOFF_Msk
 (0x1UL << 
CAN_ESR_BOFF_Pos
√ã

	)

7162 
	#CAN_ESR_BOFF
 
CAN_ESR_BOFF_Msk


	)

7164 
	#CAN_ESR_LEC_Pos
 (4U)

	)

7165 
	#CAN_ESR_LEC_Msk
 (0x7UL << 
CAN_ESR_LEC_Pos
√ã

	)

7166 
	#CAN_ESR_LEC
 
CAN_ESR_LEC_Msk


	)

7167 
	#CAN_ESR_LEC_0
 (0x1UL << 
CAN_ESR_LEC_Pos
√ã

	)

7168 
	#CAN_ESR_LEC_1
 (0x2UL << 
CAN_ESR_LEC_Pos
√ã

	)

7169 
	#CAN_ESR_LEC_2
 (0x4UL << 
CAN_ESR_LEC_Pos
√ã

	)

7171 
	#CAN_ESR_TEC_Pos
 (16U)

	)

7172 
	#CAN_ESR_TEC_Msk
 (0xFFUL << 
CAN_ESR_TEC_Pos
√ã

	)

7173 
	#CAN_ESR_TEC
 
CAN_ESR_TEC_Msk


	)

7174 
	#CAN_ESR_REC_Pos
 (24U)

	)

7175 
	#CAN_ESR_REC_Msk
 (0xFFUL << 
CAN_ESR_REC_Pos
√ã

	)

7176 
	#CAN_ESR_REC
 
CAN_ESR_REC_Msk


	)

7179 
	#CAN_BTR_BRP_Pos
 (0U)

	)

7180 
	#CAN_BTR_BRP_Msk
 (0x3FFUL << 
CAN_BTR_BRP_Pos
√ã

	)

7181 
	#CAN_BTR_BRP
 
CAN_BTR_BRP_Msk


	)

7182 
	#CAN_BTR_TS1_Pos
 (16U)

	)

7183 
	#CAN_BTR_TS1_Msk
 (0xFUL << 
CAN_BTR_TS1_Pos
√ã

	)

7184 
	#CAN_BTR_TS1
 
CAN_BTR_TS1_Msk


	)

7185 
	#CAN_BTR_TS1_0
 (0x1UL << 
CAN_BTR_TS1_Pos
√ã

	)

7186 
	#CAN_BTR_TS1_1
 (0x2UL << 
CAN_BTR_TS1_Pos
√ã

	)

7187 
	#CAN_BTR_TS1_2
 (0x4UL << 
CAN_BTR_TS1_Pos
√ã

	)

7188 
	#CAN_BTR_TS1_3
 (0x8UL << 
CAN_BTR_TS1_Pos
√ã

	)

7189 
	#CAN_BTR_TS2_Pos
 (20U)

	)

7190 
	#CAN_BTR_TS2_Msk
 (0x7UL << 
CAN_BTR_TS2_Pos
√ã

	)

7191 
	#CAN_BTR_TS2
 
CAN_BTR_TS2_Msk


	)

7192 
	#CAN_BTR_TS2_0
 (0x1UL << 
CAN_BTR_TS2_Pos
√ã

	)

7193 
	#CAN_BTR_TS2_1
 (0x2UL << 
CAN_BTR_TS2_Pos
√ã

	)

7194 
	#CAN_BTR_TS2_2
 (0x4UL << 
CAN_BTR_TS2_Pos
√ã

	)

7195 
	#CAN_BTR_SJW_Pos
 (24U)

	)

7196 
	#CAN_BTR_SJW_Msk
 (0x3UL << 
CAN_BTR_SJW_Pos
√ã

	)

7197 
	#CAN_BTR_SJW
 
CAN_BTR_SJW_Msk


	)

7198 
	#CAN_BTR_SJW_0
 (0x1UL << 
CAN_BTR_SJW_Pos
√ã

	)

7199 
	#CAN_BTR_SJW_1
 (0x2UL << 
CAN_BTR_SJW_Pos
√ã

	)

7200 
	#CAN_BTR_LBKM_Pos
 (30U)

	)

7201 
	#CAN_BTR_LBKM_Msk
 (0x1UL << 
CAN_BTR_LBKM_Pos
√ã

	)

7202 
	#CAN_BTR_LBKM
 
CAN_BTR_LBKM_Msk


	)

7203 
	#CAN_BTR_SILM_Pos
 (31U)

	)

7204 
	#CAN_BTR_SILM_Msk
 (0x1UL << 
CAN_BTR_SILM_Pos
√ã

	)

7205 
	#CAN_BTR_SILM
 
CAN_BTR_SILM_Msk


	)

7209 
	#CAN_TI0R_TXRQ_Pos
 (0U)

	)

7210 
	#CAN_TI0R_TXRQ_Msk
 (0x1UL << 
CAN_TI0R_TXRQ_Pos
√ã

	)

7211 
	#CAN_TI0R_TXRQ
 
CAN_TI0R_TXRQ_Msk


	)

7212 
	#CAN_TI0R_RTR_Pos
 (1U)

	)

7213 
	#CAN_TI0R_RTR_Msk
 (0x1UL << 
CAN_TI0R_RTR_Pos
√ã

	)

7214 
	#CAN_TI0R_RTR
 
CAN_TI0R_RTR_Msk


	)

7215 
	#CAN_TI0R_IDE_Pos
 (2U)

	)

7216 
	#CAN_TI0R_IDE_Msk
 (0x1UL << 
CAN_TI0R_IDE_Pos
√ã

	)

7217 
	#CAN_TI0R_IDE
 
CAN_TI0R_IDE_Msk


	)

7218 
	#CAN_TI0R_EXID_Pos
 (3U)

	)

7219 
	#CAN_TI0R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI0R_EXID_Pos
√ã

	)

7220 
	#CAN_TI0R_EXID
 
CAN_TI0R_EXID_Msk


	)

7221 
	#CAN_TI0R_STID_Pos
 (21U)

	)

7222 
	#CAN_TI0R_STID_Msk
 (0x7FFUL << 
CAN_TI0R_STID_Pos
√ã

	)

7223 
	#CAN_TI0R_STID
 
CAN_TI0R_STID_Msk


	)

7226 
	#CAN_TDT0R_DLC_Pos
 (0U)

	)

7227 
	#CAN_TDT0R_DLC_Msk
 (0xFUL << 
CAN_TDT0R_DLC_Pos
√ã

	)

7228 
	#CAN_TDT0R_DLC
 
CAN_TDT0R_DLC_Msk


	)

7229 
	#CAN_TDT0R_TGT_Pos
 (8U)

	)

7230 
	#CAN_TDT0R_TGT_Msk
 (0x1UL << 
CAN_TDT0R_TGT_Pos
√ã

	)

7231 
	#CAN_TDT0R_TGT
 
CAN_TDT0R_TGT_Msk


	)

7232 
	#CAN_TDT0R_TIME_Pos
 (16U)

	)

7233 
	#CAN_TDT0R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT0R_TIME_Pos
√ã

	)

7234 
	#CAN_TDT0R_TIME
 
CAN_TDT0R_TIME_Msk


	)

7237 
	#CAN_TDL0R_DATA0_Pos
 (0U)

	)

7238 
	#CAN_TDL0R_DATA0_Msk
 (0xFFUL << 
CAN_TDL0R_DATA0_Pos
√ã

	)

7239 
	#CAN_TDL0R_DATA0
 
CAN_TDL0R_DATA0_Msk


	)

7240 
	#CAN_TDL0R_DATA1_Pos
 (8U)

	)

7241 
	#CAN_TDL0R_DATA1_Msk
 (0xFFUL << 
CAN_TDL0R_DATA1_Pos
√ã

	)

7242 
	#CAN_TDL0R_DATA1
 
CAN_TDL0R_DATA1_Msk


	)

7243 
	#CAN_TDL0R_DATA2_Pos
 (16U)

	)

7244 
	#CAN_TDL0R_DATA2_Msk
 (0xFFUL << 
CAN_TDL0R_DATA2_Pos
√ã

	)

7245 
	#CAN_TDL0R_DATA2
 
CAN_TDL0R_DATA2_Msk


	)

7246 
	#CAN_TDL0R_DATA3_Pos
 (24U)

	)

7247 
	#CAN_TDL0R_DATA3_Msk
 (0xFFUL << 
CAN_TDL0R_DATA3_Pos
√ã

	)

7248 
	#CAN_TDL0R_DATA3
 
CAN_TDL0R_DATA3_Msk


	)

7251 
	#CAN_TDH0R_DATA4_Pos
 (0U)

	)

7252 
	#CAN_TDH0R_DATA4_Msk
 (0xFFUL << 
CAN_TDH0R_DATA4_Pos
√ã

	)

7253 
	#CAN_TDH0R_DATA4
 
CAN_TDH0R_DATA4_Msk


	)

7254 
	#CAN_TDH0R_DATA5_Pos
 (8U)

	)

7255 
	#CAN_TDH0R_DATA5_Msk
 (0xFFUL << 
CAN_TDH0R_DATA5_Pos
√ã

	)

7256 
	#CAN_TDH0R_DATA5
 
CAN_TDH0R_DATA5_Msk


	)

7257 
	#CAN_TDH0R_DATA6_Pos
 (16U)

	)

7258 
	#CAN_TDH0R_DATA6_Msk
 (0xFFUL << 
CAN_TDH0R_DATA6_Pos
√ã

	)

7259 
	#CAN_TDH0R_DATA6
 
CAN_TDH0R_DATA6_Msk


	)

7260 
	#CAN_TDH0R_DATA7_Pos
 (24U)

	)

7261 
	#CAN_TDH0R_DATA7_Msk
 (0xFFUL << 
CAN_TDH0R_DATA7_Pos
√ã

	)

7262 
	#CAN_TDH0R_DATA7
 
CAN_TDH0R_DATA7_Msk


	)

7265 
	#CAN_TI1R_TXRQ_Pos
 (0U)

	)

7266 
	#CAN_TI1R_TXRQ_Msk
 (0x1UL << 
CAN_TI1R_TXRQ_Pos
√ã

	)

7267 
	#CAN_TI1R_TXRQ
 
CAN_TI1R_TXRQ_Msk


	)

7268 
	#CAN_TI1R_RTR_Pos
 (1U)

	)

7269 
	#CAN_TI1R_RTR_Msk
 (0x1UL << 
CAN_TI1R_RTR_Pos
√ã

	)

7270 
	#CAN_TI1R_RTR
 
CAN_TI1R_RTR_Msk


	)

7271 
	#CAN_TI1R_IDE_Pos
 (2U)

	)

7272 
	#CAN_TI1R_IDE_Msk
 (0x1UL << 
CAN_TI1R_IDE_Pos
√ã

	)

7273 
	#CAN_TI1R_IDE
 
CAN_TI1R_IDE_Msk


	)

7274 
	#CAN_TI1R_EXID_Pos
 (3U)

	)

7275 
	#CAN_TI1R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI1R_EXID_Pos
√ã

	)

7276 
	#CAN_TI1R_EXID
 
CAN_TI1R_EXID_Msk


	)

7277 
	#CAN_TI1R_STID_Pos
 (21U)

	)

7278 
	#CAN_TI1R_STID_Msk
 (0x7FFUL << 
CAN_TI1R_STID_Pos
√ã

	)

7279 
	#CAN_TI1R_STID
 
CAN_TI1R_STID_Msk


	)

7282 
	#CAN_TDT1R_DLC_Pos
 (0U)

	)

7283 
	#CAN_TDT1R_DLC_Msk
 (0xFUL << 
CAN_TDT1R_DLC_Pos
√ã

	)

7284 
	#CAN_TDT1R_DLC
 
CAN_TDT1R_DLC_Msk


	)

7285 
	#CAN_TDT1R_TGT_Pos
 (8U)

	)

7286 
	#CAN_TDT1R_TGT_Msk
 (0x1UL << 
CAN_TDT1R_TGT_Pos
√ã

	)

7287 
	#CAN_TDT1R_TGT
 
CAN_TDT1R_TGT_Msk


	)

7288 
	#CAN_TDT1R_TIME_Pos
 (16U)

	)

7289 
	#CAN_TDT1R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT1R_TIME_Pos
√ã

	)

7290 
	#CAN_TDT1R_TIME
 
CAN_TDT1R_TIME_Msk


	)

7293 
	#CAN_TDL1R_DATA0_Pos
 (0U)

	)

7294 
	#CAN_TDL1R_DATA0_Msk
 (0xFFUL << 
CAN_TDL1R_DATA0_Pos
√ã

	)

7295 
	#CAN_TDL1R_DATA0
 
CAN_TDL1R_DATA0_Msk


	)

7296 
	#CAN_TDL1R_DATA1_Pos
 (8U)

	)

7297 
	#CAN_TDL1R_DATA1_Msk
 (0xFFUL << 
CAN_TDL1R_DATA1_Pos
√ã

	)

7298 
	#CAN_TDL1R_DATA1
 
CAN_TDL1R_DATA1_Msk


	)

7299 
	#CAN_TDL1R_DATA2_Pos
 (16U)

	)

7300 
	#CAN_TDL1R_DATA2_Msk
 (0xFFUL << 
CAN_TDL1R_DATA2_Pos
√ã

	)

7301 
	#CAN_TDL1R_DATA2
 
CAN_TDL1R_DATA2_Msk


	)

7302 
	#CAN_TDL1R_DATA3_Pos
 (24U)

	)

7303 
	#CAN_TDL1R_DATA3_Msk
 (0xFFUL << 
CAN_TDL1R_DATA3_Pos
√ã

	)

7304 
	#CAN_TDL1R_DATA3
 
CAN_TDL1R_DATA3_Msk


	)

7307 
	#CAN_TDH1R_DATA4_Pos
 (0U)

	)

7308 
	#CAN_TDH1R_DATA4_Msk
 (0xFFUL << 
CAN_TDH1R_DATA4_Pos
√ã

	)

7309 
	#CAN_TDH1R_DATA4
 
CAN_TDH1R_DATA4_Msk


	)

7310 
	#CAN_TDH1R_DATA5_Pos
 (8U)

	)

7311 
	#CAN_TDH1R_DATA5_Msk
 (0xFFUL << 
CAN_TDH1R_DATA5_Pos
√ã

	)

7312 
	#CAN_TDH1R_DATA5
 
CAN_TDH1R_DATA5_Msk


	)

7313 
	#CAN_TDH1R_DATA6_Pos
 (16U)

	)

7314 
	#CAN_TDH1R_DATA6_Msk
 (0xFFUL << 
CAN_TDH1R_DATA6_Pos
√ã

	)

7315 
	#CAN_TDH1R_DATA6
 
CAN_TDH1R_DATA6_Msk


	)

7316 
	#CAN_TDH1R_DATA7_Pos
 (24U)

	)

7317 
	#CAN_TDH1R_DATA7_Msk
 (0xFFUL << 
CAN_TDH1R_DATA7_Pos
√ã

	)

7318 
	#CAN_TDH1R_DATA7
 
CAN_TDH1R_DATA7_Msk


	)

7321 
	#CAN_TI2R_TXRQ_Pos
 (0U)

	)

7322 
	#CAN_TI2R_TXRQ_Msk
 (0x1UL << 
CAN_TI2R_TXRQ_Pos
√ã

	)

7323 
	#CAN_TI2R_TXRQ
 
CAN_TI2R_TXRQ_Msk


	)

7324 
	#CAN_TI2R_RTR_Pos
 (1U)

	)

7325 
	#CAN_TI2R_RTR_Msk
 (0x1UL << 
CAN_TI2R_RTR_Pos
√ã

	)

7326 
	#CAN_TI2R_RTR
 
CAN_TI2R_RTR_Msk


	)

7327 
	#CAN_TI2R_IDE_Pos
 (2U)

	)

7328 
	#CAN_TI2R_IDE_Msk
 (0x1UL << 
CAN_TI2R_IDE_Pos
√ã

	)

7329 
	#CAN_TI2R_IDE
 
CAN_TI2R_IDE_Msk


	)

7330 
	#CAN_TI2R_EXID_Pos
 (3U)

	)

7331 
	#CAN_TI2R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI2R_EXID_Pos
√ã

	)

7332 
	#CAN_TI2R_EXID
 
CAN_TI2R_EXID_Msk


	)

7333 
	#CAN_TI2R_STID_Pos
 (21U)

	)

7334 
	#CAN_TI2R_STID_Msk
 (0x7FFUL << 
CAN_TI2R_STID_Pos
√ã

	)

7335 
	#CAN_TI2R_STID
 
CAN_TI2R_STID_Msk


	)

7338 
	#CAN_TDT2R_DLC_Pos
 (0U)

	)

7339 
	#CAN_TDT2R_DLC_Msk
 (0xFUL << 
CAN_TDT2R_DLC_Pos
√ã

	)

7340 
	#CAN_TDT2R_DLC
 
CAN_TDT2R_DLC_Msk


	)

7341 
	#CAN_TDT2R_TGT_Pos
 (8U)

	)

7342 
	#CAN_TDT2R_TGT_Msk
 (0x1UL << 
CAN_TDT2R_TGT_Pos
√ã

	)

7343 
	#CAN_TDT2R_TGT
 
CAN_TDT2R_TGT_Msk


	)

7344 
	#CAN_TDT2R_TIME_Pos
 (16U)

	)

7345 
	#CAN_TDT2R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT2R_TIME_Pos
√ã

	)

7346 
	#CAN_TDT2R_TIME
 
CAN_TDT2R_TIME_Msk


	)

7349 
	#CAN_TDL2R_DATA0_Pos
 (0U)

	)

7350 
	#CAN_TDL2R_DATA0_Msk
 (0xFFUL << 
CAN_TDL2R_DATA0_Pos
√ã

	)

7351 
	#CAN_TDL2R_DATA0
 
CAN_TDL2R_DATA0_Msk


	)

7352 
	#CAN_TDL2R_DATA1_Pos
 (8U)

	)

7353 
	#CAN_TDL2R_DATA1_Msk
 (0xFFUL << 
CAN_TDL2R_DATA1_Pos
√ã

	)

7354 
	#CAN_TDL2R_DATA1
 
CAN_TDL2R_DATA1_Msk


	)

7355 
	#CAN_TDL2R_DATA2_Pos
 (16U)

	)

7356 
	#CAN_TDL2R_DATA2_Msk
 (0xFFUL << 
CAN_TDL2R_DATA2_Pos
√ã

	)

7357 
	#CAN_TDL2R_DATA2
 
CAN_TDL2R_DATA2_Msk


	)

7358 
	#CAN_TDL2R_DATA3_Pos
 (24U)

	)

7359 
	#CAN_TDL2R_DATA3_Msk
 (0xFFUL << 
CAN_TDL2R_DATA3_Pos
√ã

	)

7360 
	#CAN_TDL2R_DATA3
 
CAN_TDL2R_DATA3_Msk


	)

7363 
	#CAN_TDH2R_DATA4_Pos
 (0U)

	)

7364 
	#CAN_TDH2R_DATA4_Msk
 (0xFFUL << 
CAN_TDH2R_DATA4_Pos
√ã

	)

7365 
	#CAN_TDH2R_DATA4
 
CAN_TDH2R_DATA4_Msk


	)

7366 
	#CAN_TDH2R_DATA5_Pos
 (8U)

	)

7367 
	#CAN_TDH2R_DATA5_Msk
 (0xFFUL << 
CAN_TDH2R_DATA5_Pos
√ã

	)

7368 
	#CAN_TDH2R_DATA5
 
CAN_TDH2R_DATA5_Msk


	)

7369 
	#CAN_TDH2R_DATA6_Pos
 (16U)

	)

7370 
	#CAN_TDH2R_DATA6_Msk
 (0xFFUL << 
CAN_TDH2R_DATA6_Pos
√ã

	)

7371 
	#CAN_TDH2R_DATA6
 
CAN_TDH2R_DATA6_Msk


	)

7372 
	#CAN_TDH2R_DATA7_Pos
 (24U)

	)

7373 
	#CAN_TDH2R_DATA7_Msk
 (0xFFUL << 
CAN_TDH2R_DATA7_Pos
√ã

	)

7374 
	#CAN_TDH2R_DATA7
 
CAN_TDH2R_DATA7_Msk


	)

7377 
	#CAN_RI0R_RTR_Pos
 (1U)

	)

7378 
	#CAN_RI0R_RTR_Msk
 (0x1UL << 
CAN_RI0R_RTR_Pos
√ã

	)

7379 
	#CAN_RI0R_RTR
 
CAN_RI0R_RTR_Msk


	)

7380 
	#CAN_RI0R_IDE_Pos
 (2U)

	)

7381 
	#CAN_RI0R_IDE_Msk
 (0x1UL << 
CAN_RI0R_IDE_Pos
√ã

	)

7382 
	#CAN_RI0R_IDE
 
CAN_RI0R_IDE_Msk


	)

7383 
	#CAN_RI0R_EXID_Pos
 (3U)

	)

7384 
	#CAN_RI0R_EXID_Msk
 (0x3FFFFUL << 
CAN_RI0R_EXID_Pos
√ã

	)

7385 
	#CAN_RI0R_EXID
 
CAN_RI0R_EXID_Msk


	)

7386 
	#CAN_RI0R_STID_Pos
 (21U)

	)

7387 
	#CAN_RI0R_STID_Msk
 (0x7FFUL << 
CAN_RI0R_STID_Pos
√ã

	)

7388 
	#CAN_RI0R_STID
 
CAN_RI0R_STID_Msk


	)

7391 
	#CAN_RDT0R_DLC_Pos
 (0U)

	)

7392 
	#CAN_RDT0R_DLC_Msk
 (0xFUL << 
CAN_RDT0R_DLC_Pos
√ã

	)

7393 
	#CAN_RDT0R_DLC
 
CAN_RDT0R_DLC_Msk


	)

7394 
	#CAN_RDT0R_FMI_Pos
 (8U)

	)

7395 
	#CAN_RDT0R_FMI_Msk
 (0xFFUL << 
CAN_RDT0R_FMI_Pos
√ã

	)

7396 
	#CAN_RDT0R_FMI
 
CAN_RDT0R_FMI_Msk


	)

7397 
	#CAN_RDT0R_TIME_Pos
 (16U)

	)

7398 
	#CAN_RDT0R_TIME_Msk
 (0xFFFFUL << 
CAN_RDT0R_TIME_Pos
√ã

	)

7399 
	#CAN_RDT0R_TIME
 
CAN_RDT0R_TIME_Msk


	)

7402 
	#CAN_RDL0R_DATA0_Pos
 (0U)

	)

7403 
	#CAN_RDL0R_DATA0_Msk
 (0xFFUL << 
CAN_RDL0R_DATA0_Pos
√ã

	)

7404 
	#CAN_RDL0R_DATA0
 
CAN_RDL0R_DATA0_Msk


	)

7405 
	#CAN_RDL0R_DATA1_Pos
 (8U)

	)

7406 
	#CAN_RDL0R_DATA1_Msk
 (0xFFUL << 
CAN_RDL0R_DATA1_Pos
√ã

	)

7407 
	#CAN_RDL0R_DATA1
 
CAN_RDL0R_DATA1_Msk


	)

7408 
	#CAN_RDL0R_DATA2_Pos
 (16U)

	)

7409 
	#CAN_RDL0R_DATA2_Msk
 (0xFFUL << 
CAN_RDL0R_DATA2_Pos
√ã

	)

7410 
	#CAN_RDL0R_DATA2
 
CAN_RDL0R_DATA2_Msk


	)

7411 
	#CAN_RDL0R_DATA3_Pos
 (24U)

	)

7412 
	#CAN_RDL0R_DATA3_Msk
 (0xFFUL << 
CAN_RDL0R_DATA3_Pos
√ã

	)

7413 
	#CAN_RDL0R_DATA3
 
CAN_RDL0R_DATA3_Msk


	)

7416 
	#CAN_RDH0R_DATA4_Pos
 (0U)

	)

7417 
	#CAN_RDH0R_DATA4_Msk
 (0xFFUL << 
CAN_RDH0R_DATA4_Pos
√ã

	)

7418 
	#CAN_RDH0R_DATA4
 
CAN_RDH0R_DATA4_Msk


	)

7419 
	#CAN_RDH0R_DATA5_Pos
 (8U)

	)

7420 
	#CAN_RDH0R_DATA5_Msk
 (0xFFUL << 
CAN_RDH0R_DATA5_Pos
√ã

	)

7421 
	#CAN_RDH0R_DATA5
 
CAN_RDH0R_DATA5_Msk


	)

7422 
	#CAN_RDH0R_DATA6_Pos
 (16U)

	)

7423 
	#CAN_RDH0R_DATA6_Msk
 (0xFFUL << 
CAN_RDH0R_DATA6_Pos
√ã

	)

7424 
	#CAN_RDH0R_DATA6
 
CAN_RDH0R_DATA6_Msk


	)

7425 
	#CAN_RDH0R_DATA7_Pos
 (24U)

	)

7426 
	#CAN_RDH0R_DATA7_Msk
 (0xFFUL << 
CAN_RDH0R_DATA7_Pos
√ã

	)

7427 
	#CAN_RDH0R_DATA7
 
CAN_RDH0R_DATA7_Msk


	)

7430 
	#CAN_RI1R_RTR_Pos
 (1U)

	)

7431 
	#CAN_RI1R_RTR_Msk
 (0x1UL << 
CAN_RI1R_RTR_Pos
√ã

	)

7432 
	#CAN_RI1R_RTR
 
CAN_RI1R_RTR_Msk


	)

7433 
	#CAN_RI1R_IDE_Pos
 (2U)

	)

7434 
	#CAN_RI1R_IDE_Msk
 (0x1UL << 
CAN_RI1R_IDE_Pos
√ã

	)

7435 
	#CAN_RI1R_IDE
 
CAN_RI1R_IDE_Msk


	)

7436 
	#CAN_RI1R_EXID_Pos
 (3U)

	)

7437 
	#CAN_RI1R_EXID_Msk
 (0x3FFFFUL << 
CAN_RI1R_EXID_Pos
√ã

	)

7438 
	#CAN_RI1R_EXID
 
CAN_RI1R_EXID_Msk


	)

7439 
	#CAN_RI1R_STID_Pos
 (21U)

	)

7440 
	#CAN_RI1R_STID_Msk
 (0x7FFUL << 
CAN_RI1R_STID_Pos
√ã

	)

7441 
	#CAN_RI1R_STID
 
CAN_RI1R_STID_Msk


	)

7444 
	#CAN_RDT1R_DLC_Pos
 (0U)

	)

7445 
	#CAN_RDT1R_DLC_Msk
 (0xFUL << 
CAN_RDT1R_DLC_Pos
√ã

	)

7446 
	#CAN_RDT1R_DLC
 
CAN_RDT1R_DLC_Msk


	)

7447 
	#CAN_RDT1R_FMI_Pos
 (8U)

	)

7448 
	#CAN_RDT1R_FMI_Msk
 (0xFFUL << 
CAN_RDT1R_FMI_Pos
√ã

	)

7449 
	#CAN_RDT1R_FMI
 
CAN_RDT1R_FMI_Msk


	)

7450 
	#CAN_RDT1R_TIME_Pos
 (16U)

	)

7451 
	#CAN_RDT1R_TIME_Msk
 (0xFFFFUL << 
CAN_RDT1R_TIME_Pos
√ã

	)

7452 
	#CAN_RDT1R_TIME
 
CAN_RDT1R_TIME_Msk


	)

7455 
	#CAN_RDL1R_DATA0_Pos
 (0U)

	)

7456 
	#CAN_RDL1R_DATA0_Msk
 (0xFFUL << 
CAN_RDL1R_DATA0_Pos
√ã

	)

7457 
	#CAN_RDL1R_DATA0
 
CAN_RDL1R_DATA0_Msk


	)

7458 
	#CAN_RDL1R_DATA1_Pos
 (8U)

	)

7459 
	#CAN_RDL1R_DATA1_Msk
 (0xFFUL << 
CAN_RDL1R_DATA1_Pos
√ã

	)

7460 
	#CAN_RDL1R_DATA1
 
CAN_RDL1R_DATA1_Msk


	)

7461 
	#CAN_RDL1R_DATA2_Pos
 (16U)

	)

7462 
	#CAN_RDL1R_DATA2_Msk
 (0xFFUL << 
CAN_RDL1R_DATA2_Pos
√ã

	)

7463 
	#CAN_RDL1R_DATA2
 
CAN_RDL1R_DATA2_Msk


	)

7464 
	#CAN_RDL1R_DATA3_Pos
 (24U)

	)

7465 
	#CAN_RDL1R_DATA3_Msk
 (0xFFUL << 
CAN_RDL1R_DATA3_Pos
√ã

	)

7466 
	#CAN_RDL1R_DATA3
 
CAN_RDL1R_DATA3_Msk


	)

7469 
	#CAN_RDH1R_DATA4_Pos
 (0U)

	)

7470 
	#CAN_RDH1R_DATA4_Msk
 (0xFFUL << 
CAN_RDH1R_DATA4_Pos
√ã

	)

7471 
	#CAN_RDH1R_DATA4
 
CAN_RDH1R_DATA4_Msk


	)

7472 
	#CAN_RDH1R_DATA5_Pos
 (8U)

	)

7473 
	#CAN_RDH1R_DATA5_Msk
 (0xFFUL << 
CAN_RDH1R_DATA5_Pos
√ã

	)

7474 
	#CAN_RDH1R_DATA5
 
CAN_RDH1R_DATA5_Msk


	)

7475 
	#CAN_RDH1R_DATA6_Pos
 (16U)

	)

7476 
	#CAN_RDH1R_DATA6_Msk
 (0xFFUL << 
CAN_RDH1R_DATA6_Pos
√ã

	)

7477 
	#CAN_RDH1R_DATA6
 
CAN_RDH1R_DATA6_Msk


	)

7478 
	#CAN_RDH1R_DATA7_Pos
 (24U)

	)

7479 
	#CAN_RDH1R_DATA7_Msk
 (0xFFUL << 
CAN_RDH1R_DATA7_Pos
√ã

	)

7480 
	#CAN_RDH1R_DATA7
 
CAN_RDH1R_DATA7_Msk


	)

7484 
	#CAN_FMR_FINIT_Pos
 (0U)

	)

7485 
	#CAN_FMR_FINIT_Msk
 (0x1UL << 
CAN_FMR_FINIT_Pos
√ã

	)

7486 
	#CAN_FMR_FINIT
 
CAN_FMR_FINIT_Msk


	)

7487 
	#CAN_FMR_CAN2SB_Pos
 (8U)

	)

7488 
	#CAN_FMR_CAN2SB_Msk
 (0x3FUL << 
CAN_FMR_CAN2SB_Pos
√ã

	)

7489 
	#CAN_FMR_CAN2SB
 
CAN_FMR_CAN2SB_Msk


	)

7492 
	#CAN_FM1R_FBM_Pos
 (0U)

	)

7493 
	#CAN_FM1R_FBM_Msk
 (0x3FFFUL << 
CAN_FM1R_FBM_Pos
√ã

	)

7494 
	#CAN_FM1R_FBM
 
CAN_FM1R_FBM_Msk


	)

7495 
	#CAN_FM1R_FBM0_Pos
 (0U)

	)

7496 
	#CAN_FM1R_FBM0_Msk
 (0x1UL << 
CAN_FM1R_FBM0_Pos
√ã

	)

7497 
	#CAN_FM1R_FBM0
 
CAN_FM1R_FBM0_Msk


	)

7498 
	#CAN_FM1R_FBM1_Pos
 (1U)

	)

7499 
	#CAN_FM1R_FBM1_Msk
 (0x1UL << 
CAN_FM1R_FBM1_Pos
√ã

	)

7500 
	#CAN_FM1R_FBM1
 
CAN_FM1R_FBM1_Msk


	)

7501 
	#CAN_FM1R_FBM2_Pos
 (2U)

	)

7502 
	#CAN_FM1R_FBM2_Msk
 (0x1UL << 
CAN_FM1R_FBM2_Pos
√ã

	)

7503 
	#CAN_FM1R_FBM2
 
CAN_FM1R_FBM2_Msk


	)

7504 
	#CAN_FM1R_FBM3_Pos
 (3U)

	)

7505 
	#CAN_FM1R_FBM3_Msk
 (0x1UL << 
CAN_FM1R_FBM3_Pos
√ã

	)

7506 
	#CAN_FM1R_FBM3
 
CAN_FM1R_FBM3_Msk


	)

7507 
	#CAN_FM1R_FBM4_Pos
 (4U)

	)

7508 
	#CAN_FM1R_FBM4_Msk
 (0x1UL << 
CAN_FM1R_FBM4_Pos
√ã

	)

7509 
	#CAN_FM1R_FBM4
 
CAN_FM1R_FBM4_Msk


	)

7510 
	#CAN_FM1R_FBM5_Pos
 (5U)

	)

7511 
	#CAN_FM1R_FBM5_Msk
 (0x1UL << 
CAN_FM1R_FBM5_Pos
√ã

	)

7512 
	#CAN_FM1R_FBM5
 
CAN_FM1R_FBM5_Msk


	)

7513 
	#CAN_FM1R_FBM6_Pos
 (6U)

	)

7514 
	#CAN_FM1R_FBM6_Msk
 (0x1UL << 
CAN_FM1R_FBM6_Pos
√ã

	)

7515 
	#CAN_FM1R_FBM6
 
CAN_FM1R_FBM6_Msk


	)

7516 
	#CAN_FM1R_FBM7_Pos
 (7U)

	)

7517 
	#CAN_FM1R_FBM7_Msk
 (0x1UL << 
CAN_FM1R_FBM7_Pos
√ã

	)

7518 
	#CAN_FM1R_FBM7
 
CAN_FM1R_FBM7_Msk


	)

7519 
	#CAN_FM1R_FBM8_Pos
 (8U)

	)

7520 
	#CAN_FM1R_FBM8_Msk
 (0x1UL << 
CAN_FM1R_FBM8_Pos
√ã

	)

7521 
	#CAN_FM1R_FBM8
 
CAN_FM1R_FBM8_Msk


	)

7522 
	#CAN_FM1R_FBM9_Pos
 (9U)

	)

7523 
	#CAN_FM1R_FBM9_Msk
 (0x1UL << 
CAN_FM1R_FBM9_Pos
√ã

	)

7524 
	#CAN_FM1R_FBM9
 
CAN_FM1R_FBM9_Msk


	)

7525 
	#CAN_FM1R_FBM10_Pos
 (10U)

	)

7526 
	#CAN_FM1R_FBM10_Msk
 (0x1UL << 
CAN_FM1R_FBM10_Pos
√ã

	)

7527 
	#CAN_FM1R_FBM10
 
CAN_FM1R_FBM10_Msk


	)

7528 
	#CAN_FM1R_FBM11_Pos
 (11U)

	)

7529 
	#CAN_FM1R_FBM11_Msk
 (0x1UL << 
CAN_FM1R_FBM11_Pos
√ã

	)

7530 
	#CAN_FM1R_FBM11
 
CAN_FM1R_FBM11_Msk


	)

7531 
	#CAN_FM1R_FBM12_Pos
 (12U)

	)

7532 
	#CAN_FM1R_FBM12_Msk
 (0x1UL << 
CAN_FM1R_FBM12_Pos
√ã

	)

7533 
	#CAN_FM1R_FBM12
 
CAN_FM1R_FBM12_Msk


	)

7534 
	#CAN_FM1R_FBM13_Pos
 (13U)

	)

7535 
	#CAN_FM1R_FBM13_Msk
 (0x1UL << 
CAN_FM1R_FBM13_Pos
√ã

	)

7536 
	#CAN_FM1R_FBM13
 
CAN_FM1R_FBM13_Msk


	)

7539 
	#CAN_FS1R_FSC_Pos
 (0U)

	)

7540 
	#CAN_FS1R_FSC_Msk
 (0x3FFFUL << 
CAN_FS1R_FSC_Pos
√ã

	)

7541 
	#CAN_FS1R_FSC
 
CAN_FS1R_FSC_Msk


	)

7542 
	#CAN_FS1R_FSC0_Pos
 (0U)

	)

7543 
	#CAN_FS1R_FSC0_Msk
 (0x1UL << 
CAN_FS1R_FSC0_Pos
√ã

	)

7544 
	#CAN_FS1R_FSC0
 
CAN_FS1R_FSC0_Msk


	)

7545 
	#CAN_FS1R_FSC1_Pos
 (1U)

	)

7546 
	#CAN_FS1R_FSC1_Msk
 (0x1UL << 
CAN_FS1R_FSC1_Pos
√ã

	)

7547 
	#CAN_FS1R_FSC1
 
CAN_FS1R_FSC1_Msk


	)

7548 
	#CAN_FS1R_FSC2_Pos
 (2U)

	)

7549 
	#CAN_FS1R_FSC2_Msk
 (0x1UL << 
CAN_FS1R_FSC2_Pos
√ã

	)

7550 
	#CAN_FS1R_FSC2
 
CAN_FS1R_FSC2_Msk


	)

7551 
	#CAN_FS1R_FSC3_Pos
 (3U)

	)

7552 
	#CAN_FS1R_FSC3_Msk
 (0x1UL << 
CAN_FS1R_FSC3_Pos
√ã

	)

7553 
	#CAN_FS1R_FSC3
 
CAN_FS1R_FSC3_Msk


	)

7554 
	#CAN_FS1R_FSC4_Pos
 (4U)

	)

7555 
	#CAN_FS1R_FSC4_Msk
 (0x1UL << 
CAN_FS1R_FSC4_Pos
√ã

	)

7556 
	#CAN_FS1R_FSC4
 
CAN_FS1R_FSC4_Msk


	)

7557 
	#CAN_FS1R_FSC5_Pos
 (5U)

	)

7558 
	#CAN_FS1R_FSC5_Msk
 (0x1UL << 
CAN_FS1R_FSC5_Pos
√ã

	)

7559 
	#CAN_FS1R_FSC5
 
CAN_FS1R_FSC5_Msk


	)

7560 
	#CAN_FS1R_FSC6_Pos
 (6U)

	)

7561 
	#CAN_FS1R_FSC6_Msk
 (0x1UL << 
CAN_FS1R_FSC6_Pos
√ã

	)

7562 
	#CAN_FS1R_FSC6
 
CAN_FS1R_FSC6_Msk


	)

7563 
	#CAN_FS1R_FSC7_Pos
 (7U)

	)

7564 
	#CAN_FS1R_FSC7_Msk
 (0x1UL << 
CAN_FS1R_FSC7_Pos
√ã

	)

7565 
	#CAN_FS1R_FSC7
 
CAN_FS1R_FSC7_Msk


	)

7566 
	#CAN_FS1R_FSC8_Pos
 (8U)

	)

7567 
	#CAN_FS1R_FSC8_Msk
 (0x1UL << 
CAN_FS1R_FSC8_Pos
√ã

	)

7568 
	#CAN_FS1R_FSC8
 
CAN_FS1R_FSC8_Msk


	)

7569 
	#CAN_FS1R_FSC9_Pos
 (9U)

	)

7570 
	#CAN_FS1R_FSC9_Msk
 (0x1UL << 
CAN_FS1R_FSC9_Pos
√ã

	)

7571 
	#CAN_FS1R_FSC9
 
CAN_FS1R_FSC9_Msk


	)

7572 
	#CAN_FS1R_FSC10_Pos
 (10U)

	)

7573 
	#CAN_FS1R_FSC10_Msk
 (0x1UL << 
CAN_FS1R_FSC10_Pos
√ã

	)

7574 
	#CAN_FS1R_FSC10
 
CAN_FS1R_FSC10_Msk


	)

7575 
	#CAN_FS1R_FSC11_Pos
 (11U)

	)

7576 
	#CAN_FS1R_FSC11_Msk
 (0x1UL << 
CAN_FS1R_FSC11_Pos
√ã

	)

7577 
	#CAN_FS1R_FSC11
 
CAN_FS1R_FSC11_Msk


	)

7578 
	#CAN_FS1R_FSC12_Pos
 (12U)

	)

7579 
	#CAN_FS1R_FSC12_Msk
 (0x1UL << 
CAN_FS1R_FSC12_Pos
√ã

	)

7580 
	#CAN_FS1R_FSC12
 
CAN_FS1R_FSC12_Msk


	)

7581 
	#CAN_FS1R_FSC13_Pos
 (13U)

	)

7582 
	#CAN_FS1R_FSC13_Msk
 (0x1UL << 
CAN_FS1R_FSC13_Pos
√ã

	)

7583 
	#CAN_FS1R_FSC13
 
CAN_FS1R_FSC13_Msk


	)

7586 
	#CAN_FFA1R_FFA_Pos
 (0U)

	)

7587 
	#CAN_FFA1R_FFA_Msk
 (0x3FFFUL << 
CAN_FFA1R_FFA_Pos
√ã

	)

7588 
	#CAN_FFA1R_FFA
 
CAN_FFA1R_FFA_Msk


	)

7589 
	#CAN_FFA1R_FFA0_Pos
 (0U)

	)

7590 
	#CAN_FFA1R_FFA0_Msk
 (0x1UL << 
CAN_FFA1R_FFA0_Pos
√ã

	)

7591 
	#CAN_FFA1R_FFA0
 
CAN_FFA1R_FFA0_Msk


	)

7592 
	#CAN_FFA1R_FFA1_Pos
 (1U)

	)

7593 
	#CAN_FFA1R_FFA1_Msk
 (0x1UL << 
CAN_FFA1R_FFA1_Pos
√ã

	)

7594 
	#CAN_FFA1R_FFA1
 
CAN_FFA1R_FFA1_Msk


	)

7595 
	#CAN_FFA1R_FFA2_Pos
 (2U)

	)

7596 
	#CAN_FFA1R_FFA2_Msk
 (0x1UL << 
CAN_FFA1R_FFA2_Pos
√ã

	)

7597 
	#CAN_FFA1R_FFA2
 
CAN_FFA1R_FFA2_Msk


	)

7598 
	#CAN_FFA1R_FFA3_Pos
 (3U)

	)

7599 
	#CAN_FFA1R_FFA3_Msk
 (0x1UL << 
CAN_FFA1R_FFA3_Pos
√ã

	)

7600 
	#CAN_FFA1R_FFA3
 
CAN_FFA1R_FFA3_Msk


	)

7601 
	#CAN_FFA1R_FFA4_Pos
 (4U)

	)

7602 
	#CAN_FFA1R_FFA4_Msk
 (0x1UL << 
CAN_FFA1R_FFA4_Pos
√ã

	)

7603 
	#CAN_FFA1R_FFA4
 
CAN_FFA1R_FFA4_Msk


	)

7604 
	#CAN_FFA1R_FFA5_Pos
 (5U)

	)

7605 
	#CAN_FFA1R_FFA5_Msk
 (0x1UL << 
CAN_FFA1R_FFA5_Pos
√ã

	)

7606 
	#CAN_FFA1R_FFA5
 
CAN_FFA1R_FFA5_Msk


	)

7607 
	#CAN_FFA1R_FFA6_Pos
 (6U)

	)

7608 
	#CAN_FFA1R_FFA6_Msk
 (0x1UL << 
CAN_FFA1R_FFA6_Pos
√ã

	)

7609 
	#CAN_FFA1R_FFA6
 
CAN_FFA1R_FFA6_Msk


	)

7610 
	#CAN_FFA1R_FFA7_Pos
 (7U)

	)

7611 
	#CAN_FFA1R_FFA7_Msk
 (0x1UL << 
CAN_FFA1R_FFA7_Pos
√ã

	)

7612 
	#CAN_FFA1R_FFA7
 
CAN_FFA1R_FFA7_Msk


	)

7613 
	#CAN_FFA1R_FFA8_Pos
 (8U)

	)

7614 
	#CAN_FFA1R_FFA8_Msk
 (0x1UL << 
CAN_FFA1R_FFA8_Pos
√ã

	)

7615 
	#CAN_FFA1R_FFA8
 
CAN_FFA1R_FFA8_Msk


	)

7616 
	#CAN_FFA1R_FFA9_Pos
 (9U)

	)

7617 
	#CAN_FFA1R_FFA9_Msk
 (0x1UL << 
CAN_FFA1R_FFA9_Pos
√ã

	)

7618 
	#CAN_FFA1R_FFA9
 
CAN_FFA1R_FFA9_Msk


	)

7619 
	#CAN_FFA1R_FFA10_Pos
 (10U)

	)

7620 
	#CAN_FFA1R_FFA10_Msk
 (0x1UL << 
CAN_FFA1R_FFA10_Pos
√ã

	)

7621 
	#CAN_FFA1R_FFA10
 
CAN_FFA1R_FFA10_Msk


	)

7622 
	#CAN_FFA1R_FFA11_Pos
 (11U)

	)

7623 
	#CAN_FFA1R_FFA11_Msk
 (0x1UL << 
CAN_FFA1R_FFA11_Pos
√ã

	)

7624 
	#CAN_FFA1R_FFA11
 
CAN_FFA1R_FFA11_Msk


	)

7625 
	#CAN_FFA1R_FFA12_Pos
 (12U)

	)

7626 
	#CAN_FFA1R_FFA12_Msk
 (0x1UL << 
CAN_FFA1R_FFA12_Pos
√ã

	)

7627 
	#CAN_FFA1R_FFA12
 
CAN_FFA1R_FFA12_Msk


	)

7628 
	#CAN_FFA1R_FFA13_Pos
 (13U)

	)

7629 
	#CAN_FFA1R_FFA13_Msk
 (0x1UL << 
CAN_FFA1R_FFA13_Pos
√ã

	)

7630 
	#CAN_FFA1R_FFA13
 
CAN_FFA1R_FFA13_Msk


	)

7633 
	#CAN_FA1R_FACT_Pos
 (0U)

	)

7634 
	#CAN_FA1R_FACT_Msk
 (0x3FFFUL << 
CAN_FA1R_FACT_Pos
√ã

	)

7635 
	#CAN_FA1R_FACT
 
CAN_FA1R_FACT_Msk


	)

7636 
	#CAN_FA1R_FACT0_Pos
 (0U)

	)

7637 
	#CAN_FA1R_FACT0_Msk
 (0x1UL << 
CAN_FA1R_FACT0_Pos
√ã

	)

7638 
	#CAN_FA1R_FACT0
 
CAN_FA1R_FACT0_Msk


	)

7639 
	#CAN_FA1R_FACT1_Pos
 (1U)

	)

7640 
	#CAN_FA1R_FACT1_Msk
 (0x1UL << 
CAN_FA1R_FACT1_Pos
√ã

	)

7641 
	#CAN_FA1R_FACT1
 
CAN_FA1R_FACT1_Msk


	)

7642 
	#CAN_FA1R_FACT2_Pos
 (2U)

	)

7643 
	#CAN_FA1R_FACT2_Msk
 (0x1UL << 
CAN_FA1R_FACT2_Pos
√ã

	)

7644 
	#CAN_FA1R_FACT2
 
CAN_FA1R_FACT2_Msk


	)

7645 
	#CAN_FA1R_FACT3_Pos
 (3U)

	)

7646 
	#CAN_FA1R_FACT3_Msk
 (0x1UL << 
CAN_FA1R_FACT3_Pos
√ã

	)

7647 
	#CAN_FA1R_FACT3
 
CAN_FA1R_FACT3_Msk


	)

7648 
	#CAN_FA1R_FACT4_Pos
 (4U)

	)

7649 
	#CAN_FA1R_FACT4_Msk
 (0x1UL << 
CAN_FA1R_FACT4_Pos
√ã

	)

7650 
	#CAN_FA1R_FACT4
 
CAN_FA1R_FACT4_Msk


	)

7651 
	#CAN_FA1R_FACT5_Pos
 (5U)

	)

7652 
	#CAN_FA1R_FACT5_Msk
 (0x1UL << 
CAN_FA1R_FACT5_Pos
√ã

	)

7653 
	#CAN_FA1R_FACT5
 
CAN_FA1R_FACT5_Msk


	)

7654 
	#CAN_FA1R_FACT6_Pos
 (6U)

	)

7655 
	#CAN_FA1R_FACT6_Msk
 (0x1UL << 
CAN_FA1R_FACT6_Pos
√ã

	)

7656 
	#CAN_FA1R_FACT6
 
CAN_FA1R_FACT6_Msk


	)

7657 
	#CAN_FA1R_FACT7_Pos
 (7U)

	)

7658 
	#CAN_FA1R_FACT7_Msk
 (0x1UL << 
CAN_FA1R_FACT7_Pos
√ã

	)

7659 
	#CAN_FA1R_FACT7
 
CAN_FA1R_FACT7_Msk


	)

7660 
	#CAN_FA1R_FACT8_Pos
 (8U)

	)

7661 
	#CAN_FA1R_FACT8_Msk
 (0x1UL << 
CAN_FA1R_FACT8_Pos
√ã

	)

7662 
	#CAN_FA1R_FACT8
 
CAN_FA1R_FACT8_Msk


	)

7663 
	#CAN_FA1R_FACT9_Pos
 (9U)

	)

7664 
	#CAN_FA1R_FACT9_Msk
 (0x1UL << 
CAN_FA1R_FACT9_Pos
√ã

	)

7665 
	#CAN_FA1R_FACT9
 
CAN_FA1R_FACT9_Msk


	)

7666 
	#CAN_FA1R_FACT10_Pos
 (10U)

	)

7667 
	#CAN_FA1R_FACT10_Msk
 (0x1UL << 
CAN_FA1R_FACT10_Pos
√ã

	)

7668 
	#CAN_FA1R_FACT10
 
CAN_FA1R_FACT10_Msk


	)

7669 
	#CAN_FA1R_FACT11_Pos
 (11U)

	)

7670 
	#CAN_FA1R_FACT11_Msk
 (0x1UL << 
CAN_FA1R_FACT11_Pos
√ã

	)

7671 
	#CAN_FA1R_FACT11
 
CAN_FA1R_FACT11_Msk


	)

7672 
	#CAN_FA1R_FACT12_Pos
 (12U)

	)

7673 
	#CAN_FA1R_FACT12_Msk
 (0x1UL << 
CAN_FA1R_FACT12_Pos
√ã

	)

7674 
	#CAN_FA1R_FACT12
 
CAN_FA1R_FACT12_Msk


	)

7675 
	#CAN_FA1R_FACT13_Pos
 (13U)

	)

7676 
	#CAN_FA1R_FACT13_Msk
 (0x1UL << 
CAN_FA1R_FACT13_Pos
√ã

	)

7677 
	#CAN_FA1R_FACT13
 
CAN_FA1R_FACT13_Msk


	)

7680 
	#CAN_F0R1_FB0_Pos
 (0U)

	)

7681 
	#CAN_F0R1_FB0_Msk
 (0x1UL << 
CAN_F0R1_FB0_Pos
√ã

	)

7682 
	#CAN_F0R1_FB0
 
CAN_F0R1_FB0_Msk


	)

7683 
	#CAN_F0R1_FB1_Pos
 (1U)

	)

7684 
	#CAN_F0R1_FB1_Msk
 (0x1UL << 
CAN_F0R1_FB1_Pos
√ã

	)

7685 
	#CAN_F0R1_FB1
 
CAN_F0R1_FB1_Msk


	)

7686 
	#CAN_F0R1_FB2_Pos
 (2U)

	)

7687 
	#CAN_F0R1_FB2_Msk
 (0x1UL << 
CAN_F0R1_FB2_Pos
√ã

	)

7688 
	#CAN_F0R1_FB2
 
CAN_F0R1_FB2_Msk


	)

7689 
	#CAN_F0R1_FB3_Pos
 (3U)

	)

7690 
	#CAN_F0R1_FB3_Msk
 (0x1UL << 
CAN_F0R1_FB3_Pos
√ã

	)

7691 
	#CAN_F0R1_FB3
 
CAN_F0R1_FB3_Msk


	)

7692 
	#CAN_F0R1_FB4_Pos
 (4U)

	)

7693 
	#CAN_F0R1_FB4_Msk
 (0x1UL << 
CAN_F0R1_FB4_Pos
√ã

	)

7694 
	#CAN_F0R1_FB4
 
CAN_F0R1_FB4_Msk


	)

7695 
	#CAN_F0R1_FB5_Pos
 (5U)

	)

7696 
	#CAN_F0R1_FB5_Msk
 (0x1UL << 
CAN_F0R1_FB5_Pos
√ã

	)

7697 
	#CAN_F0R1_FB5
 
CAN_F0R1_FB5_Msk


	)

7698 
	#CAN_F0R1_FB6_Pos
 (6U)

	)

7699 
	#CAN_F0R1_FB6_Msk
 (0x1UL << 
CAN_F0R1_FB6_Pos
√ã

	)

7700 
	#CAN_F0R1_FB6
 
CAN_F0R1_FB6_Msk


	)

7701 
	#CAN_F0R1_FB7_Pos
 (7U)

	)

7702 
	#CAN_F0R1_FB7_Msk
 (0x1UL << 
CAN_F0R1_FB7_Pos
√ã

	)

7703 
	#CAN_F0R1_FB7
 
CAN_F0R1_FB7_Msk


	)

7704 
	#CAN_F0R1_FB8_Pos
 (8U)

	)

7705 
	#CAN_F0R1_FB8_Msk
 (0x1UL << 
CAN_F0R1_FB8_Pos
√ã

	)

7706 
	#CAN_F0R1_FB8
 
CAN_F0R1_FB8_Msk


	)

7707 
	#CAN_F0R1_FB9_Pos
 (9U)

	)

7708 
	#CAN_F0R1_FB9_Msk
 (0x1UL << 
CAN_F0R1_FB9_Pos
√ã

	)

7709 
	#CAN_F0R1_FB9
 
CAN_F0R1_FB9_Msk


	)

7710 
	#CAN_F0R1_FB10_Pos
 (10U)

	)

7711 
	#CAN_F0R1_FB10_Msk
 (0x1UL << 
CAN_F0R1_FB10_Pos
√ã

	)

7712 
	#CAN_F0R1_FB10
 
CAN_F0R1_FB10_Msk


	)

7713 
	#CAN_F0R1_FB11_Pos
 (11U)

	)

7714 
	#CAN_F0R1_FB11_Msk
 (0x1UL << 
CAN_F0R1_FB11_Pos
√ã

	)

7715 
	#CAN_F0R1_FB11
 
CAN_F0R1_FB11_Msk


	)

7716 
	#CAN_F0R1_FB12_Pos
 (12U)

	)

7717 
	#CAN_F0R1_FB12_Msk
 (0x1UL << 
CAN_F0R1_FB12_Pos
√ã

	)

7718 
	#CAN_F0R1_FB12
 
CAN_F0R1_FB12_Msk


	)

7719 
	#CAN_F0R1_FB13_Pos
 (13U)

	)

7720 
	#CAN_F0R1_FB13_Msk
 (0x1UL << 
CAN_F0R1_FB13_Pos
√ã

	)

7721 
	#CAN_F0R1_FB13
 
CAN_F0R1_FB13_Msk


	)

7722 
	#CAN_F0R1_FB14_Pos
 (14U)

	)

7723 
	#CAN_F0R1_FB14_Msk
 (0x1UL << 
CAN_F0R1_FB14_Pos
√ã

	)

7724 
	#CAN_F0R1_FB14
 
CAN_F0R1_FB14_Msk


	)

7725 
	#CAN_F0R1_FB15_Pos
 (15U)

	)

7726 
	#CAN_F0R1_FB15_Msk
 (0x1UL << 
CAN_F0R1_FB15_Pos
√ã

	)

7727 
	#CAN_F0R1_FB15
 
CAN_F0R1_FB15_Msk


	)

7728 
	#CAN_F0R1_FB16_Pos
 (16U)

	)

7729 
	#CAN_F0R1_FB16_Msk
 (0x1UL << 
CAN_F0R1_FB16_Pos
√ã

	)

7730 
	#CAN_F0R1_FB16
 
CAN_F0R1_FB16_Msk


	)

7731 
	#CAN_F0R1_FB17_Pos
 (17U)

	)

7732 
	#CAN_F0R1_FB17_Msk
 (0x1UL << 
CAN_F0R1_FB17_Pos
√ã

	)

7733 
	#CAN_F0R1_FB17
 
CAN_F0R1_FB17_Msk


	)

7734 
	#CAN_F0R1_FB18_Pos
 (18U)

	)

7735 
	#CAN_F0R1_FB18_Msk
 (0x1UL << 
CAN_F0R1_FB18_Pos
√ã

	)

7736 
	#CAN_F0R1_FB18
 
CAN_F0R1_FB18_Msk


	)

7737 
	#CAN_F0R1_FB19_Pos
 (19U)

	)

7738 
	#CAN_F0R1_FB19_Msk
 (0x1UL << 
CAN_F0R1_FB19_Pos
√ã

	)

7739 
	#CAN_F0R1_FB19
 
CAN_F0R1_FB19_Msk


	)

7740 
	#CAN_F0R1_FB20_Pos
 (20U)

	)

7741 
	#CAN_F0R1_FB20_Msk
 (0x1UL << 
CAN_F0R1_FB20_Pos
√ã

	)

7742 
	#CAN_F0R1_FB20
 
CAN_F0R1_FB20_Msk


	)

7743 
	#CAN_F0R1_FB21_Pos
 (21U)

	)

7744 
	#CAN_F0R1_FB21_Msk
 (0x1UL << 
CAN_F0R1_FB21_Pos
√ã

	)

7745 
	#CAN_F0R1_FB21
 
CAN_F0R1_FB21_Msk


	)

7746 
	#CAN_F0R1_FB22_Pos
 (22U)

	)

7747 
	#CAN_F0R1_FB22_Msk
 (0x1UL << 
CAN_F0R1_FB22_Pos
√ã

	)

7748 
	#CAN_F0R1_FB22
 
CAN_F0R1_FB22_Msk


	)

7749 
	#CAN_F0R1_FB23_Pos
 (23U)

	)

7750 
	#CAN_F0R1_FB23_Msk
 (0x1UL << 
CAN_F0R1_FB23_Pos
√ã

	)

7751 
	#CAN_F0R1_FB23
 
CAN_F0R1_FB23_Msk


	)

7752 
	#CAN_F0R1_FB24_Pos
 (24U)

	)

7753 
	#CAN_F0R1_FB24_Msk
 (0x1UL << 
CAN_F0R1_FB24_Pos
√ã

	)

7754 
	#CAN_F0R1_FB24
 
CAN_F0R1_FB24_Msk


	)

7755 
	#CAN_F0R1_FB25_Pos
 (25U)

	)

7756 
	#CAN_F0R1_FB25_Msk
 (0x1UL << 
CAN_F0R1_FB25_Pos
√ã

	)

7757 
	#CAN_F0R1_FB25
 
CAN_F0R1_FB25_Msk


	)

7758 
	#CAN_F0R1_FB26_Pos
 (26U)

	)

7759 
	#CAN_F0R1_FB26_Msk
 (0x1UL << 
CAN_F0R1_FB26_Pos
√ã

	)

7760 
	#CAN_F0R1_FB26
 
CAN_F0R1_FB26_Msk


	)

7761 
	#CAN_F0R1_FB27_Pos
 (27U)

	)

7762 
	#CAN_F0R1_FB27_Msk
 (0x1UL << 
CAN_F0R1_FB27_Pos
√ã

	)

7763 
	#CAN_F0R1_FB27
 
CAN_F0R1_FB27_Msk


	)

7764 
	#CAN_F0R1_FB28_Pos
 (28U)

	)

7765 
	#CAN_F0R1_FB28_Msk
 (0x1UL << 
CAN_F0R1_FB28_Pos
√ã

	)

7766 
	#CAN_F0R1_FB28
 
CAN_F0R1_FB28_Msk


	)

7767 
	#CAN_F0R1_FB29_Pos
 (29U)

	)

7768 
	#CAN_F0R1_FB29_Msk
 (0x1UL << 
CAN_F0R1_FB29_Pos
√ã

	)

7769 
	#CAN_F0R1_FB29
 
CAN_F0R1_FB29_Msk


	)

7770 
	#CAN_F0R1_FB30_Pos
 (30U)

	)

7771 
	#CAN_F0R1_FB30_Msk
 (0x1UL << 
CAN_F0R1_FB30_Pos
√ã

	)

7772 
	#CAN_F0R1_FB30
 
CAN_F0R1_FB30_Msk


	)

7773 
	#CAN_F0R1_FB31_Pos
 (31U)

	)

7774 
	#CAN_F0R1_FB31_Msk
 (0x1UL << 
CAN_F0R1_FB31_Pos
√ã

	)

7775 
	#CAN_F0R1_FB31
 
CAN_F0R1_FB31_Msk


	)

7778 
	#CAN_F1R1_FB0_Pos
 (0U)

	)

7779 
	#CAN_F1R1_FB0_Msk
 (0x1UL << 
CAN_F1R1_FB0_Pos
√ã

	)

7780 
	#CAN_F1R1_FB0
 
CAN_F1R1_FB0_Msk


	)

7781 
	#CAN_F1R1_FB1_Pos
 (1U)

	)

7782 
	#CAN_F1R1_FB1_Msk
 (0x1UL << 
CAN_F1R1_FB1_Pos
√ã

	)

7783 
	#CAN_F1R1_FB1
 
CAN_F1R1_FB1_Msk


	)

7784 
	#CAN_F1R1_FB2_Pos
 (2U)

	)

7785 
	#CAN_F1R1_FB2_Msk
 (0x1UL << 
CAN_F1R1_FB2_Pos
√ã

	)

7786 
	#CAN_F1R1_FB2
 
CAN_F1R1_FB2_Msk


	)

7787 
	#CAN_F1R1_FB3_Pos
 (3U)

	)

7788 
	#CAN_F1R1_FB3_Msk
 (0x1UL << 
CAN_F1R1_FB3_Pos
√ã

	)

7789 
	#CAN_F1R1_FB3
 
CAN_F1R1_FB3_Msk


	)

7790 
	#CAN_F1R1_FB4_Pos
 (4U)

	)

7791 
	#CAN_F1R1_FB4_Msk
 (0x1UL << 
CAN_F1R1_FB4_Pos
√ã

	)

7792 
	#CAN_F1R1_FB4
 
CAN_F1R1_FB4_Msk


	)

7793 
	#CAN_F1R1_FB5_Pos
 (5U)

	)

7794 
	#CAN_F1R1_FB5_Msk
 (0x1UL << 
CAN_F1R1_FB5_Pos
√ã

	)

7795 
	#CAN_F1R1_FB5
 
CAN_F1R1_FB5_Msk


	)

7796 
	#CAN_F1R1_FB6_Pos
 (6U)

	)

7797 
	#CAN_F1R1_FB6_Msk
 (0x1UL << 
CAN_F1R1_FB6_Pos
√ã

	)

7798 
	#CAN_F1R1_FB6
 
CAN_F1R1_FB6_Msk


	)

7799 
	#CAN_F1R1_FB7_Pos
 (7U)

	)

7800 
	#CAN_F1R1_FB7_Msk
 (0x1UL << 
CAN_F1R1_FB7_Pos
√ã

	)

7801 
	#CAN_F1R1_FB7
 
CAN_F1R1_FB7_Msk


	)

7802 
	#CAN_F1R1_FB8_Pos
 (8U)

	)

7803 
	#CAN_F1R1_FB8_Msk
 (0x1UL << 
CAN_F1R1_FB8_Pos
√ã

	)

7804 
	#CAN_F1R1_FB8
 
CAN_F1R1_FB8_Msk


	)

7805 
	#CAN_F1R1_FB9_Pos
 (9U)

	)

7806 
	#CAN_F1R1_FB9_Msk
 (0x1UL << 
CAN_F1R1_FB9_Pos
√ã

	)

7807 
	#CAN_F1R1_FB9
 
CAN_F1R1_FB9_Msk


	)

7808 
	#CAN_F1R1_FB10_Pos
 (10U)

	)

7809 
	#CAN_F1R1_FB10_Msk
 (0x1UL << 
CAN_F1R1_FB10_Pos
√ã

	)

7810 
	#CAN_F1R1_FB10
 
CAN_F1R1_FB10_Msk


	)

7811 
	#CAN_F1R1_FB11_Pos
 (11U)

	)

7812 
	#CAN_F1R1_FB11_Msk
 (0x1UL << 
CAN_F1R1_FB11_Pos
√ã

	)

7813 
	#CAN_F1R1_FB11
 
CAN_F1R1_FB11_Msk


	)

7814 
	#CAN_F1R1_FB12_Pos
 (12U)

	)

7815 
	#CAN_F1R1_FB12_Msk
 (0x1UL << 
CAN_F1R1_FB12_Pos
√ã

	)

7816 
	#CAN_F1R1_FB12
 
CAN_F1R1_FB12_Msk


	)

7817 
	#CAN_F1R1_FB13_Pos
 (13U)

	)

7818 
	#CAN_F1R1_FB13_Msk
 (0x1UL << 
CAN_F1R1_FB13_Pos
√ã

	)

7819 
	#CAN_F1R1_FB13
 
CAN_F1R1_FB13_Msk


	)

7820 
	#CAN_F1R1_FB14_Pos
 (14U)

	)

7821 
	#CAN_F1R1_FB14_Msk
 (0x1UL << 
CAN_F1R1_FB14_Pos
√ã

	)

7822 
	#CAN_F1R1_FB14
 
CAN_F1R1_FB14_Msk


	)

7823 
	#CAN_F1R1_FB15_Pos
 (15U)

	)

7824 
	#CAN_F1R1_FB15_Msk
 (0x1UL << 
CAN_F1R1_FB15_Pos
√ã

	)

7825 
	#CAN_F1R1_FB15
 
CAN_F1R1_FB15_Msk


	)

7826 
	#CAN_F1R1_FB16_Pos
 (16U)

	)

7827 
	#CAN_F1R1_FB16_Msk
 (0x1UL << 
CAN_F1R1_FB16_Pos
√ã

	)

7828 
	#CAN_F1R1_FB16
 
CAN_F1R1_FB16_Msk


	)

7829 
	#CAN_F1R1_FB17_Pos
 (17U)

	)

7830 
	#CAN_F1R1_FB17_Msk
 (0x1UL << 
CAN_F1R1_FB17_Pos
√ã

	)

7831 
	#CAN_F1R1_FB17
 
CAN_F1R1_FB17_Msk


	)

7832 
	#CAN_F1R1_FB18_Pos
 (18U)

	)

7833 
	#CAN_F1R1_FB18_Msk
 (0x1UL << 
CAN_F1R1_FB18_Pos
√ã

	)

7834 
	#CAN_F1R1_FB18
 
CAN_F1R1_FB18_Msk


	)

7835 
	#CAN_F1R1_FB19_Pos
 (19U)

	)

7836 
	#CAN_F1R1_FB19_Msk
 (0x1UL << 
CAN_F1R1_FB19_Pos
√ã

	)

7837 
	#CAN_F1R1_FB19
 
CAN_F1R1_FB19_Msk


	)

7838 
	#CAN_F1R1_FB20_Pos
 (20U)

	)

7839 
	#CAN_F1R1_FB20_Msk
 (0x1UL << 
CAN_F1R1_FB20_Pos
√ã

	)

7840 
	#CAN_F1R1_FB20
 
CAN_F1R1_FB20_Msk


	)

7841 
	#CAN_F1R1_FB21_Pos
 (21U)

	)

7842 
	#CAN_F1R1_FB21_Msk
 (0x1UL << 
CAN_F1R1_FB21_Pos
√ã

	)

7843 
	#CAN_F1R1_FB21
 
CAN_F1R1_FB21_Msk


	)

7844 
	#CAN_F1R1_FB22_Pos
 (22U)

	)

7845 
	#CAN_F1R1_FB22_Msk
 (0x1UL << 
CAN_F1R1_FB22_Pos
√ã

	)

7846 
	#CAN_F1R1_FB22
 
CAN_F1R1_FB22_Msk


	)

7847 
	#CAN_F1R1_FB23_Pos
 (23U)

	)

7848 
	#CAN_F1R1_FB23_Msk
 (0x1UL << 
CAN_F1R1_FB23_Pos
√ã

	)

7849 
	#CAN_F1R1_FB23
 
CAN_F1R1_FB23_Msk


	)

7850 
	#CAN_F1R1_FB24_Pos
 (24U)

	)

7851 
	#CAN_F1R1_FB24_Msk
 (0x1UL << 
CAN_F1R1_FB24_Pos
√ã

	)

7852 
	#CAN_F1R1_FB24
 
CAN_F1R1_FB24_Msk


	)

7853 
	#CAN_F1R1_FB25_Pos
 (25U)

	)

7854 
	#CAN_F1R1_FB25_Msk
 (0x1UL << 
CAN_F1R1_FB25_Pos
√ã

	)

7855 
	#CAN_F1R1_FB25
 
CAN_F1R1_FB25_Msk


	)

7856 
	#CAN_F1R1_FB26_Pos
 (26U)

	)

7857 
	#CAN_F1R1_FB26_Msk
 (0x1UL << 
CAN_F1R1_FB26_Pos
√ã

	)

7858 
	#CAN_F1R1_FB26
 
CAN_F1R1_FB26_Msk


	)

7859 
	#CAN_F1R1_FB27_Pos
 (27U)

	)

7860 
	#CAN_F1R1_FB27_Msk
 (0x1UL << 
CAN_F1R1_FB27_Pos
√ã

	)

7861 
	#CAN_F1R1_FB27
 
CAN_F1R1_FB27_Msk


	)

7862 
	#CAN_F1R1_FB28_Pos
 (28U)

	)

7863 
	#CAN_F1R1_FB28_Msk
 (0x1UL << 
CAN_F1R1_FB28_Pos
√ã

	)

7864 
	#CAN_F1R1_FB28
 
CAN_F1R1_FB28_Msk


	)

7865 
	#CAN_F1R1_FB29_Pos
 (29U)

	)

7866 
	#CAN_F1R1_FB29_Msk
 (0x1UL << 
CAN_F1R1_FB29_Pos
√ã

	)

7867 
	#CAN_F1R1_FB29
 
CAN_F1R1_FB29_Msk


	)

7868 
	#CAN_F1R1_FB30_Pos
 (30U)

	)

7869 
	#CAN_F1R1_FB30_Msk
 (0x1UL << 
CAN_F1R1_FB30_Pos
√ã

	)

7870 
	#CAN_F1R1_FB30
 
CAN_F1R1_FB30_Msk


	)

7871 
	#CAN_F1R1_FB31_Pos
 (31U)

	)

7872 
	#CAN_F1R1_FB31_Msk
 (0x1UL << 
CAN_F1R1_FB31_Pos
√ã

	)

7873 
	#CAN_F1R1_FB31
 
CAN_F1R1_FB31_Msk


	)

7876 
	#CAN_F2R1_FB0_Pos
 (0U)

	)

7877 
	#CAN_F2R1_FB0_Msk
 (0x1UL << 
CAN_F2R1_FB0_Pos
√ã

	)

7878 
	#CAN_F2R1_FB0
 
CAN_F2R1_FB0_Msk


	)

7879 
	#CAN_F2R1_FB1_Pos
 (1U)

	)

7880 
	#CAN_F2R1_FB1_Msk
 (0x1UL << 
CAN_F2R1_FB1_Pos
√ã

	)

7881 
	#CAN_F2R1_FB1
 
CAN_F2R1_FB1_Msk


	)

7882 
	#CAN_F2R1_FB2_Pos
 (2U)

	)

7883 
	#CAN_F2R1_FB2_Msk
 (0x1UL << 
CAN_F2R1_FB2_Pos
√ã

	)

7884 
	#CAN_F2R1_FB2
 
CAN_F2R1_FB2_Msk


	)

7885 
	#CAN_F2R1_FB3_Pos
 (3U)

	)

7886 
	#CAN_F2R1_FB3_Msk
 (0x1UL << 
CAN_F2R1_FB3_Pos
√ã

	)

7887 
	#CAN_F2R1_FB3
 
CAN_F2R1_FB3_Msk


	)

7888 
	#CAN_F2R1_FB4_Pos
 (4U)

	)

7889 
	#CAN_F2R1_FB4_Msk
 (0x1UL << 
CAN_F2R1_FB4_Pos
√ã

	)

7890 
	#CAN_F2R1_FB4
 
CAN_F2R1_FB4_Msk


	)

7891 
	#CAN_F2R1_FB5_Pos
 (5U)

	)

7892 
	#CAN_F2R1_FB5_Msk
 (0x1UL << 
CAN_F2R1_FB5_Pos
√ã

	)

7893 
	#CAN_F2R1_FB5
 
CAN_F2R1_FB5_Msk


	)

7894 
	#CAN_F2R1_FB6_Pos
 (6U)

	)

7895 
	#CAN_F2R1_FB6_Msk
 (0x1UL << 
CAN_F2R1_FB6_Pos
√ã

	)

7896 
	#CAN_F2R1_FB6
 
CAN_F2R1_FB6_Msk


	)

7897 
	#CAN_F2R1_FB7_Pos
 (7U)

	)

7898 
	#CAN_F2R1_FB7_Msk
 (0x1UL << 
CAN_F2R1_FB7_Pos
√ã

	)

7899 
	#CAN_F2R1_FB7
 
CAN_F2R1_FB7_Msk


	)

7900 
	#CAN_F2R1_FB8_Pos
 (8U)

	)

7901 
	#CAN_F2R1_FB8_Msk
 (0x1UL << 
CAN_F2R1_FB8_Pos
√ã

	)

7902 
	#CAN_F2R1_FB8
 
CAN_F2R1_FB8_Msk


	)

7903 
	#CAN_F2R1_FB9_Pos
 (9U)

	)

7904 
	#CAN_F2R1_FB9_Msk
 (0x1UL << 
CAN_F2R1_FB9_Pos
√ã

	)

7905 
	#CAN_F2R1_FB9
 
CAN_F2R1_FB9_Msk


	)

7906 
	#CAN_F2R1_FB10_Pos
 (10U)

	)

7907 
	#CAN_F2R1_FB10_Msk
 (0x1UL << 
CAN_F2R1_FB10_Pos
√ã

	)

7908 
	#CAN_F2R1_FB10
 
CAN_F2R1_FB10_Msk


	)

7909 
	#CAN_F2R1_FB11_Pos
 (11U)

	)

7910 
	#CAN_F2R1_FB11_Msk
 (0x1UL << 
CAN_F2R1_FB11_Pos
√ã

	)

7911 
	#CAN_F2R1_FB11
 
CAN_F2R1_FB11_Msk


	)

7912 
	#CAN_F2R1_FB12_Pos
 (12U)

	)

7913 
	#CAN_F2R1_FB12_Msk
 (0x1UL << 
CAN_F2R1_FB12_Pos
√ã

	)

7914 
	#CAN_F2R1_FB12
 
CAN_F2R1_FB12_Msk


	)

7915 
	#CAN_F2R1_FB13_Pos
 (13U)

	)

7916 
	#CAN_F2R1_FB13_Msk
 (0x1UL << 
CAN_F2R1_FB13_Pos
√ã

	)

7917 
	#CAN_F2R1_FB13
 
CAN_F2R1_FB13_Msk


	)

7918 
	#CAN_F2R1_FB14_Pos
 (14U)

	)

7919 
	#CAN_F2R1_FB14_Msk
 (0x1UL << 
CAN_F2R1_FB14_Pos
√ã

	)

7920 
	#CAN_F2R1_FB14
 
CAN_F2R1_FB14_Msk


	)

7921 
	#CAN_F2R1_FB15_Pos
 (15U)

	)

7922 
	#CAN_F2R1_FB15_Msk
 (0x1UL << 
CAN_F2R1_FB15_Pos
√ã

	)

7923 
	#CAN_F2R1_FB15
 
CAN_F2R1_FB15_Msk


	)

7924 
	#CAN_F2R1_FB16_Pos
 (16U)

	)

7925 
	#CAN_F2R1_FB16_Msk
 (0x1UL << 
CAN_F2R1_FB16_Pos
√ã

	)

7926 
	#CAN_F2R1_FB16
 
CAN_F2R1_FB16_Msk


	)

7927 
	#CAN_F2R1_FB17_Pos
 (17U)

	)

7928 
	#CAN_F2R1_FB17_Msk
 (0x1UL << 
CAN_F2R1_FB17_Pos
√ã

	)

7929 
	#CAN_F2R1_FB17
 
CAN_F2R1_FB17_Msk


	)

7930 
	#CAN_F2R1_FB18_Pos
 (18U)

	)

7931 
	#CAN_F2R1_FB18_Msk
 (0x1UL << 
CAN_F2R1_FB18_Pos
√ã

	)

7932 
	#CAN_F2R1_FB18
 
CAN_F2R1_FB18_Msk


	)

7933 
	#CAN_F2R1_FB19_Pos
 (19U)

	)

7934 
	#CAN_F2R1_FB19_Msk
 (0x1UL << 
CAN_F2R1_FB19_Pos
√ã

	)

7935 
	#CAN_F2R1_FB19
 
CAN_F2R1_FB19_Msk


	)

7936 
	#CAN_F2R1_FB20_Pos
 (20U)

	)

7937 
	#CAN_F2R1_FB20_Msk
 (0x1UL << 
CAN_F2R1_FB20_Pos
√ã

	)

7938 
	#CAN_F2R1_FB20
 
CAN_F2R1_FB20_Msk


	)

7939 
	#CAN_F2R1_FB21_Pos
 (21U)

	)

7940 
	#CAN_F2R1_FB21_Msk
 (0x1UL << 
CAN_F2R1_FB21_Pos
√ã

	)

7941 
	#CAN_F2R1_FB21
 
CAN_F2R1_FB21_Msk


	)

7942 
	#CAN_F2R1_FB22_Pos
 (22U)

	)

7943 
	#CAN_F2R1_FB22_Msk
 (0x1UL << 
CAN_F2R1_FB22_Pos
√ã

	)

7944 
	#CAN_F2R1_FB22
 
CAN_F2R1_FB22_Msk


	)

7945 
	#CAN_F2R1_FB23_Pos
 (23U)

	)

7946 
	#CAN_F2R1_FB23_Msk
 (0x1UL << 
CAN_F2R1_FB23_Pos
√ã

	)

7947 
	#CAN_F2R1_FB23
 
CAN_F2R1_FB23_Msk


	)

7948 
	#CAN_F2R1_FB24_Pos
 (24U)

	)

7949 
	#CAN_F2R1_FB24_Msk
 (0x1UL << 
CAN_F2R1_FB24_Pos
√ã

	)

7950 
	#CAN_F2R1_FB24
 
CAN_F2R1_FB24_Msk


	)

7951 
	#CAN_F2R1_FB25_Pos
 (25U)

	)

7952 
	#CAN_F2R1_FB25_Msk
 (0x1UL << 
CAN_F2R1_FB25_Pos
√ã

	)

7953 
	#CAN_F2R1_FB25
 
CAN_F2R1_FB25_Msk


	)

7954 
	#CAN_F2R1_FB26_Pos
 (26U)

	)

7955 
	#CAN_F2R1_FB26_Msk
 (0x1UL << 
CAN_F2R1_FB26_Pos
√ã

	)

7956 
	#CAN_F2R1_FB26
 
CAN_F2R1_FB26_Msk


	)

7957 
	#CAN_F2R1_FB27_Pos
 (27U)

	)

7958 
	#CAN_F2R1_FB27_Msk
 (0x1UL << 
CAN_F2R1_FB27_Pos
√ã

	)

7959 
	#CAN_F2R1_FB27
 
CAN_F2R1_FB27_Msk


	)

7960 
	#CAN_F2R1_FB28_Pos
 (28U)

	)

7961 
	#CAN_F2R1_FB28_Msk
 (0x1UL << 
CAN_F2R1_FB28_Pos
√ã

	)

7962 
	#CAN_F2R1_FB28
 
CAN_F2R1_FB28_Msk


	)

7963 
	#CAN_F2R1_FB29_Pos
 (29U)

	)

7964 
	#CAN_F2R1_FB29_Msk
 (0x1UL << 
CAN_F2R1_FB29_Pos
√ã

	)

7965 
	#CAN_F2R1_FB29
 
CAN_F2R1_FB29_Msk


	)

7966 
	#CAN_F2R1_FB30_Pos
 (30U)

	)

7967 
	#CAN_F2R1_FB30_Msk
 (0x1UL << 
CAN_F2R1_FB30_Pos
√ã

	)

7968 
	#CAN_F2R1_FB30
 
CAN_F2R1_FB30_Msk


	)

7969 
	#CAN_F2R1_FB31_Pos
 (31U)

	)

7970 
	#CAN_F2R1_FB31_Msk
 (0x1UL << 
CAN_F2R1_FB31_Pos
√ã

	)

7971 
	#CAN_F2R1_FB31
 
CAN_F2R1_FB31_Msk


	)

7974 
	#CAN_F3R1_FB0_Pos
 (0U)

	)

7975 
	#CAN_F3R1_FB0_Msk
 (0x1UL << 
CAN_F3R1_FB0_Pos
√ã

	)

7976 
	#CAN_F3R1_FB0
 
CAN_F3R1_FB0_Msk


	)

7977 
	#CAN_F3R1_FB1_Pos
 (1U)

	)

7978 
	#CAN_F3R1_FB1_Msk
 (0x1UL << 
CAN_F3R1_FB1_Pos
√ã

	)

7979 
	#CAN_F3R1_FB1
 
CAN_F3R1_FB1_Msk


	)

7980 
	#CAN_F3R1_FB2_Pos
 (2U)

	)

7981 
	#CAN_F3R1_FB2_Msk
 (0x1UL << 
CAN_F3R1_FB2_Pos
√ã

	)

7982 
	#CAN_F3R1_FB2
 
CAN_F3R1_FB2_Msk


	)

7983 
	#CAN_F3R1_FB3_Pos
 (3U)

	)

7984 
	#CAN_F3R1_FB3_Msk
 (0x1UL << 
CAN_F3R1_FB3_Pos
√ã

	)

7985 
	#CAN_F3R1_FB3
 
CAN_F3R1_FB3_Msk


	)

7986 
	#CAN_F3R1_FB4_Pos
 (4U)

	)

7987 
	#CAN_F3R1_FB4_Msk
 (0x1UL << 
CAN_F3R1_FB4_Pos
√ã

	)

7988 
	#CAN_F3R1_FB4
 
CAN_F3R1_FB4_Msk


	)

7989 
	#CAN_F3R1_FB5_Pos
 (5U)

	)

7990 
	#CAN_F3R1_FB5_Msk
 (0x1UL << 
CAN_F3R1_FB5_Pos
√ã

	)

7991 
	#CAN_F3R1_FB5
 
CAN_F3R1_FB5_Msk


	)

7992 
	#CAN_F3R1_FB6_Pos
 (6U)

	)

7993 
	#CAN_F3R1_FB6_Msk
 (0x1UL << 
CAN_F3R1_FB6_Pos
√ã

	)

7994 
	#CAN_F3R1_FB6
 
CAN_F3R1_FB6_Msk


	)

7995 
	#CAN_F3R1_FB7_Pos
 (7U)

	)

7996 
	#CAN_F3R1_FB7_Msk
 (0x1UL << 
CAN_F3R1_FB7_Pos
√ã

	)

7997 
	#CAN_F3R1_FB7
 
CAN_F3R1_FB7_Msk


	)

7998 
	#CAN_F3R1_FB8_Pos
 (8U)

	)

7999 
	#CAN_F3R1_FB8_Msk
 (0x1UL << 
CAN_F3R1_FB8_Pos
√ã

	)

8000 
	#CAN_F3R1_FB8
 
CAN_F3R1_FB8_Msk


	)

8001 
	#CAN_F3R1_FB9_Pos
 (9U)

	)

8002 
	#CAN_F3R1_FB9_Msk
 (0x1UL << 
CAN_F3R1_FB9_Pos
√ã

	)

8003 
	#CAN_F3R1_FB9
 
CAN_F3R1_FB9_Msk


	)

8004 
	#CAN_F3R1_FB10_Pos
 (10U)

	)

8005 
	#CAN_F3R1_FB10_Msk
 (0x1UL << 
CAN_F3R1_FB10_Pos
√ã

	)

8006 
	#CAN_F3R1_FB10
 
CAN_F3R1_FB10_Msk


	)

8007 
	#CAN_F3R1_FB11_Pos
 (11U)

	)

8008 
	#CAN_F3R1_FB11_Msk
 (0x1UL << 
CAN_F3R1_FB11_Pos
√ã

	)

8009 
	#CAN_F3R1_FB11
 
CAN_F3R1_FB11_Msk


	)

8010 
	#CAN_F3R1_FB12_Pos
 (12U)

	)

8011 
	#CAN_F3R1_FB12_Msk
 (0x1UL << 
CAN_F3R1_FB12_Pos
√ã

	)

8012 
	#CAN_F3R1_FB12
 
CAN_F3R1_FB12_Msk


	)

8013 
	#CAN_F3R1_FB13_Pos
 (13U)

	)

8014 
	#CAN_F3R1_FB13_Msk
 (0x1UL << 
CAN_F3R1_FB13_Pos
√ã

	)

8015 
	#CAN_F3R1_FB13
 
CAN_F3R1_FB13_Msk


	)

8016 
	#CAN_F3R1_FB14_Pos
 (14U)

	)

8017 
	#CAN_F3R1_FB14_Msk
 (0x1UL << 
CAN_F3R1_FB14_Pos
√ã

	)

8018 
	#CAN_F3R1_FB14
 
CAN_F3R1_FB14_Msk


	)

8019 
	#CAN_F3R1_FB15_Pos
 (15U)

	)

8020 
	#CAN_F3R1_FB15_Msk
 (0x1UL << 
CAN_F3R1_FB15_Pos
√ã

	)

8021 
	#CAN_F3R1_FB15
 
CAN_F3R1_FB15_Msk


	)

8022 
	#CAN_F3R1_FB16_Pos
 (16U)

	)

8023 
	#CAN_F3R1_FB16_Msk
 (0x1UL << 
CAN_F3R1_FB16_Pos
√ã

	)

8024 
	#CAN_F3R1_FB16
 
CAN_F3R1_FB16_Msk


	)

8025 
	#CAN_F3R1_FB17_Pos
 (17U)

	)

8026 
	#CAN_F3R1_FB17_Msk
 (0x1UL << 
CAN_F3R1_FB17_Pos
√ã

	)

8027 
	#CAN_F3R1_FB17
 
CAN_F3R1_FB17_Msk


	)

8028 
	#CAN_F3R1_FB18_Pos
 (18U)

	)

8029 
	#CAN_F3R1_FB18_Msk
 (0x1UL << 
CAN_F3R1_FB18_Pos
√ã

	)

8030 
	#CAN_F3R1_FB18
 
CAN_F3R1_FB18_Msk


	)

8031 
	#CAN_F3R1_FB19_Pos
 (19U)

	)

8032 
	#CAN_F3R1_FB19_Msk
 (0x1UL << 
CAN_F3R1_FB19_Pos
√ã

	)

8033 
	#CAN_F3R1_FB19
 
CAN_F3R1_FB19_Msk


	)

8034 
	#CAN_F3R1_FB20_Pos
 (20U)

	)

8035 
	#CAN_F3R1_FB20_Msk
 (0x1UL << 
CAN_F3R1_FB20_Pos
√ã

	)

8036 
	#CAN_F3R1_FB20
 
CAN_F3R1_FB20_Msk


	)

8037 
	#CAN_F3R1_FB21_Pos
 (21U)

	)

8038 
	#CAN_F3R1_FB21_Msk
 (0x1UL << 
CAN_F3R1_FB21_Pos
√ã

	)

8039 
	#CAN_F3R1_FB21
 
CAN_F3R1_FB21_Msk


	)

8040 
	#CAN_F3R1_FB22_Pos
 (22U)

	)

8041 
	#CAN_F3R1_FB22_Msk
 (0x1UL << 
CAN_F3R1_FB22_Pos
√ã

	)

8042 
	#CAN_F3R1_FB22
 
CAN_F3R1_FB22_Msk


	)

8043 
	#CAN_F3R1_FB23_Pos
 (23U)

	)

8044 
	#CAN_F3R1_FB23_Msk
 (0x1UL << 
CAN_F3R1_FB23_Pos
√ã

	)

8045 
	#CAN_F3R1_FB23
 
CAN_F3R1_FB23_Msk


	)

8046 
	#CAN_F3R1_FB24_Pos
 (24U)

	)

8047 
	#CAN_F3R1_FB24_Msk
 (0x1UL << 
CAN_F3R1_FB24_Pos
√ã

	)

8048 
	#CAN_F3R1_FB24
 
CAN_F3R1_FB24_Msk


	)

8049 
	#CAN_F3R1_FB25_Pos
 (25U)

	)

8050 
	#CAN_F3R1_FB25_Msk
 (0x1UL << 
CAN_F3R1_FB25_Pos
√ã

	)

8051 
	#CAN_F3R1_FB25
 
CAN_F3R1_FB25_Msk


	)

8052 
	#CAN_F3R1_FB26_Pos
 (26U)

	)

8053 
	#CAN_F3R1_FB26_Msk
 (0x1UL << 
CAN_F3R1_FB26_Pos
√ã

	)

8054 
	#CAN_F3R1_FB26
 
CAN_F3R1_FB26_Msk


	)

8055 
	#CAN_F3R1_FB27_Pos
 (27U)

	)

8056 
	#CAN_F3R1_FB27_Msk
 (0x1UL << 
CAN_F3R1_FB27_Pos
√ã

	)

8057 
	#CAN_F3R1_FB27
 
CAN_F3R1_FB27_Msk


	)

8058 
	#CAN_F3R1_FB28_Pos
 (28U)

	)

8059 
	#CAN_F3R1_FB28_Msk
 (0x1UL << 
CAN_F3R1_FB28_Pos
√ã

	)

8060 
	#CAN_F3R1_FB28
 
CAN_F3R1_FB28_Msk


	)

8061 
	#CAN_F3R1_FB29_Pos
 (29U)

	)

8062 
	#CAN_F3R1_FB29_Msk
 (0x1UL << 
CAN_F3R1_FB29_Pos
√ã

	)

8063 
	#CAN_F3R1_FB29
 
CAN_F3R1_FB29_Msk


	)

8064 
	#CAN_F3R1_FB30_Pos
 (30U)

	)

8065 
	#CAN_F3R1_FB30_Msk
 (0x1UL << 
CAN_F3R1_FB30_Pos
√ã

	)

8066 
	#CAN_F3R1_FB30
 
CAN_F3R1_FB30_Msk


	)

8067 
	#CAN_F3R1_FB31_Pos
 (31U)

	)

8068 
	#CAN_F3R1_FB31_Msk
 (0x1UL << 
CAN_F3R1_FB31_Pos
√ã

	)

8069 
	#CAN_F3R1_FB31
 
CAN_F3R1_FB31_Msk


	)

8072 
	#CAN_F4R1_FB0_Pos
 (0U)

	)

8073 
	#CAN_F4R1_FB0_Msk
 (0x1UL << 
CAN_F4R1_FB0_Pos
√ã

	)

8074 
	#CAN_F4R1_FB0
 
CAN_F4R1_FB0_Msk


	)

8075 
	#CAN_F4R1_FB1_Pos
 (1U)

	)

8076 
	#CAN_F4R1_FB1_Msk
 (0x1UL << 
CAN_F4R1_FB1_Pos
√ã

	)

8077 
	#CAN_F4R1_FB1
 
CAN_F4R1_FB1_Msk


	)

8078 
	#CAN_F4R1_FB2_Pos
 (2U)

	)

8079 
	#CAN_F4R1_FB2_Msk
 (0x1UL << 
CAN_F4R1_FB2_Pos
√ã

	)

8080 
	#CAN_F4R1_FB2
 
CAN_F4R1_FB2_Msk


	)

8081 
	#CAN_F4R1_FB3_Pos
 (3U)

	)

8082 
	#CAN_F4R1_FB3_Msk
 (0x1UL << 
CAN_F4R1_FB3_Pos
√ã

	)

8083 
	#CAN_F4R1_FB3
 
CAN_F4R1_FB3_Msk


	)

8084 
	#CAN_F4R1_FB4_Pos
 (4U)

	)

8085 
	#CAN_F4R1_FB4_Msk
 (0x1UL << 
CAN_F4R1_FB4_Pos
√ã

	)

8086 
	#CAN_F4R1_FB4
 
CAN_F4R1_FB4_Msk


	)

8087 
	#CAN_F4R1_FB5_Pos
 (5U)

	)

8088 
	#CAN_F4R1_FB5_Msk
 (0x1UL << 
CAN_F4R1_FB5_Pos
√ã

	)

8089 
	#CAN_F4R1_FB5
 
CAN_F4R1_FB5_Msk


	)

8090 
	#CAN_F4R1_FB6_Pos
 (6U)

	)

8091 
	#CAN_F4R1_FB6_Msk
 (0x1UL << 
CAN_F4R1_FB6_Pos
√ã

	)

8092 
	#CAN_F4R1_FB6
 
CAN_F4R1_FB6_Msk


	)

8093 
	#CAN_F4R1_FB7_Pos
 (7U)

	)

8094 
	#CAN_F4R1_FB7_Msk
 (0x1UL << 
CAN_F4R1_FB7_Pos
√ã

	)

8095 
	#CAN_F4R1_FB7
 
CAN_F4R1_FB7_Msk


	)

8096 
	#CAN_F4R1_FB8_Pos
 (8U)

	)

8097 
	#CAN_F4R1_FB8_Msk
 (0x1UL << 
CAN_F4R1_FB8_Pos
√ã

	)

8098 
	#CAN_F4R1_FB8
 
CAN_F4R1_FB8_Msk


	)

8099 
	#CAN_F4R1_FB9_Pos
 (9U)

	)

8100 
	#CAN_F4R1_FB9_Msk
 (0x1UL << 
CAN_F4R1_FB9_Pos
√ã

	)

8101 
	#CAN_F4R1_FB9
 
CAN_F4R1_FB9_Msk


	)

8102 
	#CAN_F4R1_FB10_Pos
 (10U)

	)

8103 
	#CAN_F4R1_FB10_Msk
 (0x1UL << 
CAN_F4R1_FB10_Pos
√ã

	)

8104 
	#CAN_F4R1_FB10
 
CAN_F4R1_FB10_Msk


	)

8105 
	#CAN_F4R1_FB11_Pos
 (11U)

	)

8106 
	#CAN_F4R1_FB11_Msk
 (0x1UL << 
CAN_F4R1_FB11_Pos
√ã

	)

8107 
	#CAN_F4R1_FB11
 
CAN_F4R1_FB11_Msk


	)

8108 
	#CAN_F4R1_FB12_Pos
 (12U)

	)

8109 
	#CAN_F4R1_FB12_Msk
 (0x1UL << 
CAN_F4R1_FB12_Pos
√ã

	)

8110 
	#CAN_F4R1_FB12
 
CAN_F4R1_FB12_Msk


	)

8111 
	#CAN_F4R1_FB13_Pos
 (13U)

	)

8112 
	#CAN_F4R1_FB13_Msk
 (0x1UL << 
CAN_F4R1_FB13_Pos
√ã

	)

8113 
	#CAN_F4R1_FB13
 
CAN_F4R1_FB13_Msk


	)

8114 
	#CAN_F4R1_FB14_Pos
 (14U)

	)

8115 
	#CAN_F4R1_FB14_Msk
 (0x1UL << 
CAN_F4R1_FB14_Pos
√ã

	)

8116 
	#CAN_F4R1_FB14
 
CAN_F4R1_FB14_Msk


	)

8117 
	#CAN_F4R1_FB15_Pos
 (15U)

	)

8118 
	#CAN_F4R1_FB15_Msk
 (0x1UL << 
CAN_F4R1_FB15_Pos
√ã

	)

8119 
	#CAN_F4R1_FB15
 
CAN_F4R1_FB15_Msk


	)

8120 
	#CAN_F4R1_FB16_Pos
 (16U)

	)

8121 
	#CAN_F4R1_FB16_Msk
 (0x1UL << 
CAN_F4R1_FB16_Pos
√ã

	)

8122 
	#CAN_F4R1_FB16
 
CAN_F4R1_FB16_Msk


	)

8123 
	#CAN_F4R1_FB17_Pos
 (17U)

	)

8124 
	#CAN_F4R1_FB17_Msk
 (0x1UL << 
CAN_F4R1_FB17_Pos
√ã

	)

8125 
	#CAN_F4R1_FB17
 
CAN_F4R1_FB17_Msk


	)

8126 
	#CAN_F4R1_FB18_Pos
 (18U)

	)

8127 
	#CAN_F4R1_FB18_Msk
 (0x1UL << 
CAN_F4R1_FB18_Pos
√ã

	)

8128 
	#CAN_F4R1_FB18
 
CAN_F4R1_FB18_Msk


	)

8129 
	#CAN_F4R1_FB19_Pos
 (19U)

	)

8130 
	#CAN_F4R1_FB19_Msk
 (0x1UL << 
CAN_F4R1_FB19_Pos
√ã

	)

8131 
	#CAN_F4R1_FB19
 
CAN_F4R1_FB19_Msk


	)

8132 
	#CAN_F4R1_FB20_Pos
 (20U)

	)

8133 
	#CAN_F4R1_FB20_Msk
 (0x1UL << 
CAN_F4R1_FB20_Pos
√ã

	)

8134 
	#CAN_F4R1_FB20
 
CAN_F4R1_FB20_Msk


	)

8135 
	#CAN_F4R1_FB21_Pos
 (21U)

	)

8136 
	#CAN_F4R1_FB21_Msk
 (0x1UL << 
CAN_F4R1_FB21_Pos
√ã

	)

8137 
	#CAN_F4R1_FB21
 
CAN_F4R1_FB21_Msk


	)

8138 
	#CAN_F4R1_FB22_Pos
 (22U)

	)

8139 
	#CAN_F4R1_FB22_Msk
 (0x1UL << 
CAN_F4R1_FB22_Pos
√ã

	)

8140 
	#CAN_F4R1_FB22
 
CAN_F4R1_FB22_Msk


	)

8141 
	#CAN_F4R1_FB23_Pos
 (23U)

	)

8142 
	#CAN_F4R1_FB23_Msk
 (0x1UL << 
CAN_F4R1_FB23_Pos
√ã

	)

8143 
	#CAN_F4R1_FB23
 
CAN_F4R1_FB23_Msk


	)

8144 
	#CAN_F4R1_FB24_Pos
 (24U)

	)

8145 
	#CAN_F4R1_FB24_Msk
 (0x1UL << 
CAN_F4R1_FB24_Pos
√ã

	)

8146 
	#CAN_F4R1_FB24
 
CAN_F4R1_FB24_Msk


	)

8147 
	#CAN_F4R1_FB25_Pos
 (25U)

	)

8148 
	#CAN_F4R1_FB25_Msk
 (0x1UL << 
CAN_F4R1_FB25_Pos
√ã

	)

8149 
	#CAN_F4R1_FB25
 
CAN_F4R1_FB25_Msk


	)

8150 
	#CAN_F4R1_FB26_Pos
 (26U)

	)

8151 
	#CAN_F4R1_FB26_Msk
 (0x1UL << 
CAN_F4R1_FB26_Pos
√ã

	)

8152 
	#CAN_F4R1_FB26
 
CAN_F4R1_FB26_Msk


	)

8153 
	#CAN_F4R1_FB27_Pos
 (27U)

	)

8154 
	#CAN_F4R1_FB27_Msk
 (0x1UL << 
CAN_F4R1_FB27_Pos
√ã

	)

8155 
	#CAN_F4R1_FB27
 
CAN_F4R1_FB27_Msk


	)

8156 
	#CAN_F4R1_FB28_Pos
 (28U)

	)

8157 
	#CAN_F4R1_FB28_Msk
 (0x1UL << 
CAN_F4R1_FB28_Pos
√ã

	)

8158 
	#CAN_F4R1_FB28
 
CAN_F4R1_FB28_Msk


	)

8159 
	#CAN_F4R1_FB29_Pos
 (29U)

	)

8160 
	#CAN_F4R1_FB29_Msk
 (0x1UL << 
CAN_F4R1_FB29_Pos
√ã

	)

8161 
	#CAN_F4R1_FB29
 
CAN_F4R1_FB29_Msk


	)

8162 
	#CAN_F4R1_FB30_Pos
 (30U)

	)

8163 
	#CAN_F4R1_FB30_Msk
 (0x1UL << 
CAN_F4R1_FB30_Pos
√ã

	)

8164 
	#CAN_F4R1_FB30
 
CAN_F4R1_FB30_Msk


	)

8165 
	#CAN_F4R1_FB31_Pos
 (31U)

	)

8166 
	#CAN_F4R1_FB31_Msk
 (0x1UL << 
CAN_F4R1_FB31_Pos
√ã

	)

8167 
	#CAN_F4R1_FB31
 
CAN_F4R1_FB31_Msk


	)

8170 
	#CAN_F5R1_FB0_Pos
 (0U)

	)

8171 
	#CAN_F5R1_FB0_Msk
 (0x1UL << 
CAN_F5R1_FB0_Pos
√ã

	)

8172 
	#CAN_F5R1_FB0
 
CAN_F5R1_FB0_Msk


	)

8173 
	#CAN_F5R1_FB1_Pos
 (1U)

	)

8174 
	#CAN_F5R1_FB1_Msk
 (0x1UL << 
CAN_F5R1_FB1_Pos
√ã

	)

8175 
	#CAN_F5R1_FB1
 
CAN_F5R1_FB1_Msk


	)

8176 
	#CAN_F5R1_FB2_Pos
 (2U)

	)

8177 
	#CAN_F5R1_FB2_Msk
 (0x1UL << 
CAN_F5R1_FB2_Pos
√ã

	)

8178 
	#CAN_F5R1_FB2
 
CAN_F5R1_FB2_Msk


	)

8179 
	#CAN_F5R1_FB3_Pos
 (3U)

	)

8180 
	#CAN_F5R1_FB3_Msk
 (0x1UL << 
CAN_F5R1_FB3_Pos
√ã

	)

8181 
	#CAN_F5R1_FB3
 
CAN_F5R1_FB3_Msk


	)

8182 
	#CAN_F5R1_FB4_Pos
 (4U)

	)

8183 
	#CAN_F5R1_FB4_Msk
 (0x1UL << 
CAN_F5R1_FB4_Pos
√ã

	)

8184 
	#CAN_F5R1_FB4
 
CAN_F5R1_FB4_Msk


	)

8185 
	#CAN_F5R1_FB5_Pos
 (5U)

	)

8186 
	#CAN_F5R1_FB5_Msk
 (0x1UL << 
CAN_F5R1_FB5_Pos
√ã

	)

8187 
	#CAN_F5R1_FB5
 
CAN_F5R1_FB5_Msk


	)

8188 
	#CAN_F5R1_FB6_Pos
 (6U)

	)

8189 
	#CAN_F5R1_FB6_Msk
 (0x1UL << 
CAN_F5R1_FB6_Pos
√ã

	)

8190 
	#CAN_F5R1_FB6
 
CAN_F5R1_FB6_Msk


	)

8191 
	#CAN_F5R1_FB7_Pos
 (7U)

	)

8192 
	#CAN_F5R1_FB7_Msk
 (0x1UL << 
CAN_F5R1_FB7_Pos
√ã

	)

8193 
	#CAN_F5R1_FB7
 
CAN_F5R1_FB7_Msk


	)

8194 
	#CAN_F5R1_FB8_Pos
 (8U)

	)

8195 
	#CAN_F5R1_FB8_Msk
 (0x1UL << 
CAN_F5R1_FB8_Pos
√ã

	)

8196 
	#CAN_F5R1_FB8
 
CAN_F5R1_FB8_Msk


	)

8197 
	#CAN_F5R1_FB9_Pos
 (9U)

	)

8198 
	#CAN_F5R1_FB9_Msk
 (0x1UL << 
CAN_F5R1_FB9_Pos
√ã

	)

8199 
	#CAN_F5R1_FB9
 
CAN_F5R1_FB9_Msk


	)

8200 
	#CAN_F5R1_FB10_Pos
 (10U)

	)

8201 
	#CAN_F5R1_FB10_Msk
 (0x1UL << 
CAN_F5R1_FB10_Pos
√ã

	)

8202 
	#CAN_F5R1_FB10
 
CAN_F5R1_FB10_Msk


	)

8203 
	#CAN_F5R1_FB11_Pos
 (11U)

	)

8204 
	#CAN_F5R1_FB11_Msk
 (0x1UL << 
CAN_F5R1_FB11_Pos
√ã

	)

8205 
	#CAN_F5R1_FB11
 
CAN_F5R1_FB11_Msk


	)

8206 
	#CAN_F5R1_FB12_Pos
 (12U)

	)

8207 
	#CAN_F5R1_FB12_Msk
 (0x1UL << 
CAN_F5R1_FB12_Pos
√ã

	)

8208 
	#CAN_F5R1_FB12
 
CAN_F5R1_FB12_Msk


	)

8209 
	#CAN_F5R1_FB13_Pos
 (13U)

	)

8210 
	#CAN_F5R1_FB13_Msk
 (0x1UL << 
CAN_F5R1_FB13_Pos
√ã

	)

8211 
	#CAN_F5R1_FB13
 
CAN_F5R1_FB13_Msk


	)

8212 
	#CAN_F5R1_FB14_Pos
 (14U)

	)

8213 
	#CAN_F5R1_FB14_Msk
 (0x1UL << 
CAN_F5R1_FB14_Pos
√ã

	)

8214 
	#CAN_F5R1_FB14
 
CAN_F5R1_FB14_Msk


	)

8215 
	#CAN_F5R1_FB15_Pos
 (15U)

	)

8216 
	#CAN_F5R1_FB15_Msk
 (0x1UL << 
CAN_F5R1_FB15_Pos
√ã

	)

8217 
	#CAN_F5R1_FB15
 
CAN_F5R1_FB15_Msk


	)

8218 
	#CAN_F5R1_FB16_Pos
 (16U)

	)

8219 
	#CAN_F5R1_FB16_Msk
 (0x1UL << 
CAN_F5R1_FB16_Pos
√ã

	)

8220 
	#CAN_F5R1_FB16
 
CAN_F5R1_FB16_Msk


	)

8221 
	#CAN_F5R1_FB17_Pos
 (17U)

	)

8222 
	#CAN_F5R1_FB17_Msk
 (0x1UL << 
CAN_F5R1_FB17_Pos
√ã

	)

8223 
	#CAN_F5R1_FB17
 
CAN_F5R1_FB17_Msk


	)

8224 
	#CAN_F5R1_FB18_Pos
 (18U)

	)

8225 
	#CAN_F5R1_FB18_Msk
 (0x1UL << 
CAN_F5R1_FB18_Pos
√ã

	)

8226 
	#CAN_F5R1_FB18
 
CAN_F5R1_FB18_Msk


	)

8227 
	#CAN_F5R1_FB19_Pos
 (19U)

	)

8228 
	#CAN_F5R1_FB19_Msk
 (0x1UL << 
CAN_F5R1_FB19_Pos
√ã

	)

8229 
	#CAN_F5R1_FB19
 
CAN_F5R1_FB19_Msk


	)

8230 
	#CAN_F5R1_FB20_Pos
 (20U)

	)

8231 
	#CAN_F5R1_FB20_Msk
 (0x1UL << 
CAN_F5R1_FB20_Pos
√ã

	)

8232 
	#CAN_F5R1_FB20
 
CAN_F5R1_FB20_Msk


	)

8233 
	#CAN_F5R1_FB21_Pos
 (21U)

	)

8234 
	#CAN_F5R1_FB21_Msk
 (0x1UL << 
CAN_F5R1_FB21_Pos
√ã

	)

8235 
	#CAN_F5R1_FB21
 
CAN_F5R1_FB21_Msk


	)

8236 
	#CAN_F5R1_FB22_Pos
 (22U)

	)

8237 
	#CAN_F5R1_FB22_Msk
 (0x1UL << 
CAN_F5R1_FB22_Pos
√ã

	)

8238 
	#CAN_F5R1_FB22
 
CAN_F5R1_FB22_Msk


	)

8239 
	#CAN_F5R1_FB23_Pos
 (23U)

	)

8240 
	#CAN_F5R1_FB23_Msk
 (0x1UL << 
CAN_F5R1_FB23_Pos
√ã

	)

8241 
	#CAN_F5R1_FB23
 
CAN_F5R1_FB23_Msk


	)

8242 
	#CAN_F5R1_FB24_Pos
 (24U)

	)

8243 
	#CAN_F5R1_FB24_Msk
 (0x1UL << 
CAN_F5R1_FB24_Pos
√ã

	)

8244 
	#CAN_F5R1_FB24
 
CAN_F5R1_FB24_Msk


	)

8245 
	#CAN_F5R1_FB25_Pos
 (25U)

	)

8246 
	#CAN_F5R1_FB25_Msk
 (0x1UL << 
CAN_F5R1_FB25_Pos
√ã

	)

8247 
	#CAN_F5R1_FB25
 
CAN_F5R1_FB25_Msk


	)

8248 
	#CAN_F5R1_FB26_Pos
 (26U)

	)

8249 
	#CAN_F5R1_FB26_Msk
 (0x1UL << 
CAN_F5R1_FB26_Pos
√ã

	)

8250 
	#CAN_F5R1_FB26
 
CAN_F5R1_FB26_Msk


	)

8251 
	#CAN_F5R1_FB27_Pos
 (27U)

	)

8252 
	#CAN_F5R1_FB27_Msk
 (0x1UL << 
CAN_F5R1_FB27_Pos
√ã

	)

8253 
	#CAN_F5R1_FB27
 
CAN_F5R1_FB27_Msk


	)

8254 
	#CAN_F5R1_FB28_Pos
 (28U)

	)

8255 
	#CAN_F5R1_FB28_Msk
 (0x1UL << 
CAN_F5R1_FB28_Pos
√ã

	)

8256 
	#CAN_F5R1_FB28
 
CAN_F5R1_FB28_Msk


	)

8257 
	#CAN_F5R1_FB29_Pos
 (29U)

	)

8258 
	#CAN_F5R1_FB29_Msk
 (0x1UL << 
CAN_F5R1_FB29_Pos
√ã

	)

8259 
	#CAN_F5R1_FB29
 
CAN_F5R1_FB29_Msk


	)

8260 
	#CAN_F5R1_FB30_Pos
 (30U)

	)

8261 
	#CAN_F5R1_FB30_Msk
 (0x1UL << 
CAN_F5R1_FB30_Pos
√ã

	)

8262 
	#CAN_F5R1_FB30
 
CAN_F5R1_FB30_Msk


	)

8263 
	#CAN_F5R1_FB31_Pos
 (31U)

	)

8264 
	#CAN_F5R1_FB31_Msk
 (0x1UL << 
CAN_F5R1_FB31_Pos
√ã

	)

8265 
	#CAN_F5R1_FB31
 
CAN_F5R1_FB31_Msk


	)

8268 
	#CAN_F6R1_FB0_Pos
 (0U)

	)

8269 
	#CAN_F6R1_FB0_Msk
 (0x1UL << 
CAN_F6R1_FB0_Pos
√ã

	)

8270 
	#CAN_F6R1_FB0
 
CAN_F6R1_FB0_Msk


	)

8271 
	#CAN_F6R1_FB1_Pos
 (1U)

	)

8272 
	#CAN_F6R1_FB1_Msk
 (0x1UL << 
CAN_F6R1_FB1_Pos
√ã

	)

8273 
	#CAN_F6R1_FB1
 
CAN_F6R1_FB1_Msk


	)

8274 
	#CAN_F6R1_FB2_Pos
 (2U)

	)

8275 
	#CAN_F6R1_FB2_Msk
 (0x1UL << 
CAN_F6R1_FB2_Pos
√ã

	)

8276 
	#CAN_F6R1_FB2
 
CAN_F6R1_FB2_Msk


	)

8277 
	#CAN_F6R1_FB3_Pos
 (3U)

	)

8278 
	#CAN_F6R1_FB3_Msk
 (0x1UL << 
CAN_F6R1_FB3_Pos
√ã

	)

8279 
	#CAN_F6R1_FB3
 
CAN_F6R1_FB3_Msk


	)

8280 
	#CAN_F6R1_FB4_Pos
 (4U)

	)

8281 
	#CAN_F6R1_FB4_Msk
 (0x1UL << 
CAN_F6R1_FB4_Pos
√ã

	)

8282 
	#CAN_F6R1_FB4
 
CAN_F6R1_FB4_Msk


	)

8283 
	#CAN_F6R1_FB5_Pos
 (5U)

	)

8284 
	#CAN_F6R1_FB5_Msk
 (0x1UL << 
CAN_F6R1_FB5_Pos
√ã

	)

8285 
	#CAN_F6R1_FB5
 
CAN_F6R1_FB5_Msk


	)

8286 
	#CAN_F6R1_FB6_Pos
 (6U)

	)

8287 
	#CAN_F6R1_FB6_Msk
 (0x1UL << 
CAN_F6R1_FB6_Pos
√ã

	)

8288 
	#CAN_F6R1_FB6
 
CAN_F6R1_FB6_Msk


	)

8289 
	#CAN_F6R1_FB7_Pos
 (7U)

	)

8290 
	#CAN_F6R1_FB7_Msk
 (0x1UL << 
CAN_F6R1_FB7_Pos
√ã

	)

8291 
	#CAN_F6R1_FB7
 
CAN_F6R1_FB7_Msk


	)

8292 
	#CAN_F6R1_FB8_Pos
 (8U)

	)

8293 
	#CAN_F6R1_FB8_Msk
 (0x1UL << 
CAN_F6R1_FB8_Pos
√ã

	)

8294 
	#CAN_F6R1_FB8
 
CAN_F6R1_FB8_Msk


	)

8295 
	#CAN_F6R1_FB9_Pos
 (9U)

	)

8296 
	#CAN_F6R1_FB9_Msk
 (0x1UL << 
CAN_F6R1_FB9_Pos
√ã

	)

8297 
	#CAN_F6R1_FB9
 
CAN_F6R1_FB9_Msk


	)

8298 
	#CAN_F6R1_FB10_Pos
 (10U)

	)

8299 
	#CAN_F6R1_FB10_Msk
 (0x1UL << 
CAN_F6R1_FB10_Pos
√ã

	)

8300 
	#CAN_F6R1_FB10
 
CAN_F6R1_FB10_Msk


	)

8301 
	#CAN_F6R1_FB11_Pos
 (11U)

	)

8302 
	#CAN_F6R1_FB11_Msk
 (0x1UL << 
CAN_F6R1_FB11_Pos
√ã

	)

8303 
	#CAN_F6R1_FB11
 
CAN_F6R1_FB11_Msk


	)

8304 
	#CAN_F6R1_FB12_Pos
 (12U)

	)

8305 
	#CAN_F6R1_FB12_Msk
 (0x1UL << 
CAN_F6R1_FB12_Pos
√ã

	)

8306 
	#CAN_F6R1_FB12
 
CAN_F6R1_FB12_Msk


	)

8307 
	#CAN_F6R1_FB13_Pos
 (13U)

	)

8308 
	#CAN_F6R1_FB13_Msk
 (0x1UL << 
CAN_F6R1_FB13_Pos
√ã

	)

8309 
	#CAN_F6R1_FB13
 
CAN_F6R1_FB13_Msk


	)

8310 
	#CAN_F6R1_FB14_Pos
 (14U)

	)

8311 
	#CAN_F6R1_FB14_Msk
 (0x1UL << 
CAN_F6R1_FB14_Pos
√ã

	)

8312 
	#CAN_F6R1_FB14
 
CAN_F6R1_FB14_Msk


	)

8313 
	#CAN_F6R1_FB15_Pos
 (15U)

	)

8314 
	#CAN_F6R1_FB15_Msk
 (0x1UL << 
CAN_F6R1_FB15_Pos
√ã

	)

8315 
	#CAN_F6R1_FB15
 
CAN_F6R1_FB15_Msk


	)

8316 
	#CAN_F6R1_FB16_Pos
 (16U)

	)

8317 
	#CAN_F6R1_FB16_Msk
 (0x1UL << 
CAN_F6R1_FB16_Pos
√ã

	)

8318 
	#CAN_F6R1_FB16
 
CAN_F6R1_FB16_Msk


	)

8319 
	#CAN_F6R1_FB17_Pos
 (17U)

	)

8320 
	#CAN_F6R1_FB17_Msk
 (0x1UL << 
CAN_F6R1_FB17_Pos
√ã

	)

8321 
	#CAN_F6R1_FB17
 
CAN_F6R1_FB17_Msk


	)

8322 
	#CAN_F6R1_FB18_Pos
 (18U)

	)

8323 
	#CAN_F6R1_FB18_Msk
 (0x1UL << 
CAN_F6R1_FB18_Pos
√ã

	)

8324 
	#CAN_F6R1_FB18
 
CAN_F6R1_FB18_Msk


	)

8325 
	#CAN_F6R1_FB19_Pos
 (19U)

	)

8326 
	#CAN_F6R1_FB19_Msk
 (0x1UL << 
CAN_F6R1_FB19_Pos
√ã

	)

8327 
	#CAN_F6R1_FB19
 
CAN_F6R1_FB19_Msk


	)

8328 
	#CAN_F6R1_FB20_Pos
 (20U)

	)

8329 
	#CAN_F6R1_FB20_Msk
 (0x1UL << 
CAN_F6R1_FB20_Pos
√ã

	)

8330 
	#CAN_F6R1_FB20
 
CAN_F6R1_FB20_Msk


	)

8331 
	#CAN_F6R1_FB21_Pos
 (21U)

	)

8332 
	#CAN_F6R1_FB21_Msk
 (0x1UL << 
CAN_F6R1_FB21_Pos
√ã

	)

8333 
	#CAN_F6R1_FB21
 
CAN_F6R1_FB21_Msk


	)

8334 
	#CAN_F6R1_FB22_Pos
 (22U)

	)

8335 
	#CAN_F6R1_FB22_Msk
 (0x1UL << 
CAN_F6R1_FB22_Pos
√ã

	)

8336 
	#CAN_F6R1_FB22
 
CAN_F6R1_FB22_Msk


	)

8337 
	#CAN_F6R1_FB23_Pos
 (23U)

	)

8338 
	#CAN_F6R1_FB23_Msk
 (0x1UL << 
CAN_F6R1_FB23_Pos
√ã

	)

8339 
	#CAN_F6R1_FB23
 
CAN_F6R1_FB23_Msk


	)

8340 
	#CAN_F6R1_FB24_Pos
 (24U)

	)

8341 
	#CAN_F6R1_FB24_Msk
 (0x1UL << 
CAN_F6R1_FB24_Pos
√ã

	)

8342 
	#CAN_F6R1_FB24
 
CAN_F6R1_FB24_Msk


	)

8343 
	#CAN_F6R1_FB25_Pos
 (25U)

	)

8344 
	#CAN_F6R1_FB25_Msk
 (0x1UL << 
CAN_F6R1_FB25_Pos
√ã

	)

8345 
	#CAN_F6R1_FB25
 
CAN_F6R1_FB25_Msk


	)

8346 
	#CAN_F6R1_FB26_Pos
 (26U)

	)

8347 
	#CAN_F6R1_FB26_Msk
 (0x1UL << 
CAN_F6R1_FB26_Pos
√ã

	)

8348 
	#CAN_F6R1_FB26
 
CAN_F6R1_FB26_Msk


	)

8349 
	#CAN_F6R1_FB27_Pos
 (27U)

	)

8350 
	#CAN_F6R1_FB27_Msk
 (0x1UL << 
CAN_F6R1_FB27_Pos
√ã

	)

8351 
	#CAN_F6R1_FB27
 
CAN_F6R1_FB27_Msk


	)

8352 
	#CAN_F6R1_FB28_Pos
 (28U)

	)

8353 
	#CAN_F6R1_FB28_Msk
 (0x1UL << 
CAN_F6R1_FB28_Pos
√ã

	)

8354 
	#CAN_F6R1_FB28
 
CAN_F6R1_FB28_Msk


	)

8355 
	#CAN_F6R1_FB29_Pos
 (29U)

	)

8356 
	#CAN_F6R1_FB29_Msk
 (0x1UL << 
CAN_F6R1_FB29_Pos
√ã

	)

8357 
	#CAN_F6R1_FB29
 
CAN_F6R1_FB29_Msk


	)

8358 
	#CAN_F6R1_FB30_Pos
 (30U)

	)

8359 
	#CAN_F6R1_FB30_Msk
 (0x1UL << 
CAN_F6R1_FB30_Pos
√ã

	)

8360 
	#CAN_F6R1_FB30
 
CAN_F6R1_FB30_Msk


	)

8361 
	#CAN_F6R1_FB31_Pos
 (31U)

	)

8362 
	#CAN_F6R1_FB31_Msk
 (0x1UL << 
CAN_F6R1_FB31_Pos
√ã

	)

8363 
	#CAN_F6R1_FB31
 
CAN_F6R1_FB31_Msk


	)

8366 
	#CAN_F7R1_FB0_Pos
 (0U)

	)

8367 
	#CAN_F7R1_FB0_Msk
 (0x1UL << 
CAN_F7R1_FB0_Pos
√ã

	)

8368 
	#CAN_F7R1_FB0
 
CAN_F7R1_FB0_Msk


	)

8369 
	#CAN_F7R1_FB1_Pos
 (1U)

	)

8370 
	#CAN_F7R1_FB1_Msk
 (0x1UL << 
CAN_F7R1_FB1_Pos
√ã

	)

8371 
	#CAN_F7R1_FB1
 
CAN_F7R1_FB1_Msk


	)

8372 
	#CAN_F7R1_FB2_Pos
 (2U)

	)

8373 
	#CAN_F7R1_FB2_Msk
 (0x1UL << 
CAN_F7R1_FB2_Pos
√ã

	)

8374 
	#CAN_F7R1_FB2
 
CAN_F7R1_FB2_Msk


	)

8375 
	#CAN_F7R1_FB3_Pos
 (3U)

	)

8376 
	#CAN_F7R1_FB3_Msk
 (0x1UL << 
CAN_F7R1_FB3_Pos
√ã

	)

8377 
	#CAN_F7R1_FB3
 
CAN_F7R1_FB3_Msk


	)

8378 
	#CAN_F7R1_FB4_Pos
 (4U)

	)

8379 
	#CAN_F7R1_FB4_Msk
 (0x1UL << 
CAN_F7R1_FB4_Pos
√ã

	)

8380 
	#CAN_F7R1_FB4
 
CAN_F7R1_FB4_Msk


	)

8381 
	#CAN_F7R1_FB5_Pos
 (5U)

	)

8382 
	#CAN_F7R1_FB5_Msk
 (0x1UL << 
CAN_F7R1_FB5_Pos
√ã

	)

8383 
	#CAN_F7R1_FB5
 
CAN_F7R1_FB5_Msk


	)

8384 
	#CAN_F7R1_FB6_Pos
 (6U)

	)

8385 
	#CAN_F7R1_FB6_Msk
 (0x1UL << 
CAN_F7R1_FB6_Pos
√ã

	)

8386 
	#CAN_F7R1_FB6
 
CAN_F7R1_FB6_Msk


	)

8387 
	#CAN_F7R1_FB7_Pos
 (7U)

	)

8388 
	#CAN_F7R1_FB7_Msk
 (0x1UL << 
CAN_F7R1_FB7_Pos
√ã

	)

8389 
	#CAN_F7R1_FB7
 
CAN_F7R1_FB7_Msk


	)

8390 
	#CAN_F7R1_FB8_Pos
 (8U)

	)

8391 
	#CAN_F7R1_FB8_Msk
 (0x1UL << 
CAN_F7R1_FB8_Pos
√ã

	)

8392 
	#CAN_F7R1_FB8
 
CAN_F7R1_FB8_Msk


	)

8393 
	#CAN_F7R1_FB9_Pos
 (9U)

	)

8394 
	#CAN_F7R1_FB9_Msk
 (0x1UL << 
CAN_F7R1_FB9_Pos
√ã

	)

8395 
	#CAN_F7R1_FB9
 
CAN_F7R1_FB9_Msk


	)

8396 
	#CAN_F7R1_FB10_Pos
 (10U)

	)

8397 
	#CAN_F7R1_FB10_Msk
 (0x1UL << 
CAN_F7R1_FB10_Pos
√ã

	)

8398 
	#CAN_F7R1_FB10
 
CAN_F7R1_FB10_Msk


	)

8399 
	#CAN_F7R1_FB11_Pos
 (11U)

	)

8400 
	#CAN_F7R1_FB11_Msk
 (0x1UL << 
CAN_F7R1_FB11_Pos
√ã

	)

8401 
	#CAN_F7R1_FB11
 
CAN_F7R1_FB11_Msk


	)

8402 
	#CAN_F7R1_FB12_Pos
 (12U)

	)

8403 
	#CAN_F7R1_FB12_Msk
 (0x1UL << 
CAN_F7R1_FB12_Pos
√ã

	)

8404 
	#CAN_F7R1_FB12
 
CAN_F7R1_FB12_Msk


	)

8405 
	#CAN_F7R1_FB13_Pos
 (13U)

	)

8406 
	#CAN_F7R1_FB13_Msk
 (0x1UL << 
CAN_F7R1_FB13_Pos
√ã

	)

8407 
	#CAN_F7R1_FB13
 
CAN_F7R1_FB13_Msk


	)

8408 
	#CAN_F7R1_FB14_Pos
 (14U)

	)

8409 
	#CAN_F7R1_FB14_Msk
 (0x1UL << 
CAN_F7R1_FB14_Pos
√ã

	)

8410 
	#CAN_F7R1_FB14
 
CAN_F7R1_FB14_Msk


	)

8411 
	#CAN_F7R1_FB15_Pos
 (15U)

	)

8412 
	#CAN_F7R1_FB15_Msk
 (0x1UL << 
CAN_F7R1_FB15_Pos
√ã

	)

8413 
	#CAN_F7R1_FB15
 
CAN_F7R1_FB15_Msk


	)

8414 
	#CAN_F7R1_FB16_Pos
 (16U)

	)

8415 
	#CAN_F7R1_FB16_Msk
 (0x1UL << 
CAN_F7R1_FB16_Pos
√ã

	)

8416 
	#CAN_F7R1_FB16
 
CAN_F7R1_FB16_Msk


	)

8417 
	#CAN_F7R1_FB17_Pos
 (17U)

	)

8418 
	#CAN_F7R1_FB17_Msk
 (0x1UL << 
CAN_F7R1_FB17_Pos
√ã

	)

8419 
	#CAN_F7R1_FB17
 
CAN_F7R1_FB17_Msk


	)

8420 
	#CAN_F7R1_FB18_Pos
 (18U)

	)

8421 
	#CAN_F7R1_FB18_Msk
 (0x1UL << 
CAN_F7R1_FB18_Pos
√ã

	)

8422 
	#CAN_F7R1_FB18
 
CAN_F7R1_FB18_Msk


	)

8423 
	#CAN_F7R1_FB19_Pos
 (19U)

	)

8424 
	#CAN_F7R1_FB19_Msk
 (0x1UL << 
CAN_F7R1_FB19_Pos
√ã

	)

8425 
	#CAN_F7R1_FB19
 
CAN_F7R1_FB19_Msk


	)

8426 
	#CAN_F7R1_FB20_Pos
 (20U)

	)

8427 
	#CAN_F7R1_FB20_Msk
 (0x1UL << 
CAN_F7R1_FB20_Pos
√ã

	)

8428 
	#CAN_F7R1_FB20
 
CAN_F7R1_FB20_Msk


	)

8429 
	#CAN_F7R1_FB21_Pos
 (21U)

	)

8430 
	#CAN_F7R1_FB21_Msk
 (0x1UL << 
CAN_F7R1_FB21_Pos
√ã

	)

8431 
	#CAN_F7R1_FB21
 
CAN_F7R1_FB21_Msk


	)

8432 
	#CAN_F7R1_FB22_Pos
 (22U)

	)

8433 
	#CAN_F7R1_FB22_Msk
 (0x1UL << 
CAN_F7R1_FB22_Pos
√ã

	)

8434 
	#CAN_F7R1_FB22
 
CAN_F7R1_FB22_Msk


	)

8435 
	#CAN_F7R1_FB23_Pos
 (23U)

	)

8436 
	#CAN_F7R1_FB23_Msk
 (0x1UL << 
CAN_F7R1_FB23_Pos
√ã

	)

8437 
	#CAN_F7R1_FB23
 
CAN_F7R1_FB23_Msk


	)

8438 
	#CAN_F7R1_FB24_Pos
 (24U)

	)

8439 
	#CAN_F7R1_FB24_Msk
 (0x1UL << 
CAN_F7R1_FB24_Pos
√ã

	)

8440 
	#CAN_F7R1_FB24
 
CAN_F7R1_FB24_Msk


	)

8441 
	#CAN_F7R1_FB25_Pos
 (25U)

	)

8442 
	#CAN_F7R1_FB25_Msk
 (0x1UL << 
CAN_F7R1_FB25_Pos
√ã

	)

8443 
	#CAN_F7R1_FB25
 
CAN_F7R1_FB25_Msk


	)

8444 
	#CAN_F7R1_FB26_Pos
 (26U)

	)

8445 
	#CAN_F7R1_FB26_Msk
 (0x1UL << 
CAN_F7R1_FB26_Pos
√ã

	)

8446 
	#CAN_F7R1_FB26
 
CAN_F7R1_FB26_Msk


	)

8447 
	#CAN_F7R1_FB27_Pos
 (27U)

	)

8448 
	#CAN_F7R1_FB27_Msk
 (0x1UL << 
CAN_F7R1_FB27_Pos
√ã

	)

8449 
	#CAN_F7R1_FB27
 
CAN_F7R1_FB27_Msk


	)

8450 
	#CAN_F7R1_FB28_Pos
 (28U)

	)

8451 
	#CAN_F7R1_FB28_Msk
 (0x1UL << 
CAN_F7R1_FB28_Pos
√ã

	)

8452 
	#CAN_F7R1_FB28
 
CAN_F7R1_FB28_Msk


	)

8453 
	#CAN_F7R1_FB29_Pos
 (29U)

	)

8454 
	#CAN_F7R1_FB29_Msk
 (0x1UL << 
CAN_F7R1_FB29_Pos
√ã

	)

8455 
	#CAN_F7R1_FB29
 
CAN_F7R1_FB29_Msk


	)

8456 
	#CAN_F7R1_FB30_Pos
 (30U)

	)

8457 
	#CAN_F7R1_FB30_Msk
 (0x1UL << 
CAN_F7R1_FB30_Pos
√ã

	)

8458 
	#CAN_F7R1_FB30
 
CAN_F7R1_FB30_Msk


	)

8459 
	#CAN_F7R1_FB31_Pos
 (31U)

	)

8460 
	#CAN_F7R1_FB31_Msk
 (0x1UL << 
CAN_F7R1_FB31_Pos
√ã

	)

8461 
	#CAN_F7R1_FB31
 
CAN_F7R1_FB31_Msk


	)

8464 
	#CAN_F8R1_FB0_Pos
 (0U)

	)

8465 
	#CAN_F8R1_FB0_Msk
 (0x1UL << 
CAN_F8R1_FB0_Pos
√ã

	)

8466 
	#CAN_F8R1_FB0
 
CAN_F8R1_FB0_Msk


	)

8467 
	#CAN_F8R1_FB1_Pos
 (1U)

	)

8468 
	#CAN_F8R1_FB1_Msk
 (0x1UL << 
CAN_F8R1_FB1_Pos
√ã

	)

8469 
	#CAN_F8R1_FB1
 
CAN_F8R1_FB1_Msk


	)

8470 
	#CAN_F8R1_FB2_Pos
 (2U)

	)

8471 
	#CAN_F8R1_FB2_Msk
 (0x1UL << 
CAN_F8R1_FB2_Pos
√ã

	)

8472 
	#CAN_F8R1_FB2
 
CAN_F8R1_FB2_Msk


	)

8473 
	#CAN_F8R1_FB3_Pos
 (3U)

	)

8474 
	#CAN_F8R1_FB3_Msk
 (0x1UL << 
CAN_F8R1_FB3_Pos
√ã

	)

8475 
	#CAN_F8R1_FB3
 
CAN_F8R1_FB3_Msk


	)

8476 
	#CAN_F8R1_FB4_Pos
 (4U)

	)

8477 
	#CAN_F8R1_FB4_Msk
 (0x1UL << 
CAN_F8R1_FB4_Pos
√ã

	)

8478 
	#CAN_F8R1_FB4
 
CAN_F8R1_FB4_Msk


	)

8479 
	#CAN_F8R1_FB5_Pos
 (5U)

	)

8480 
	#CAN_F8R1_FB5_Msk
 (0x1UL << 
CAN_F8R1_FB5_Pos
√ã

	)

8481 
	#CAN_F8R1_FB5
 
CAN_F8R1_FB5_Msk


	)

8482 
	#CAN_F8R1_FB6_Pos
 (6U)

	)

8483 
	#CAN_F8R1_FB6_Msk
 (0x1UL << 
CAN_F8R1_FB6_Pos
√ã

	)

8484 
	#CAN_F8R1_FB6
 
CAN_F8R1_FB6_Msk


	)

8485 
	#CAN_F8R1_FB7_Pos
 (7U)

	)

8486 
	#CAN_F8R1_FB7_Msk
 (0x1UL << 
CAN_F8R1_FB7_Pos
√ã

	)

8487 
	#CAN_F8R1_FB7
 
CAN_F8R1_FB7_Msk


	)

8488 
	#CAN_F8R1_FB8_Pos
 (8U)

	)

8489 
	#CAN_F8R1_FB8_Msk
 (0x1UL << 
CAN_F8R1_FB8_Pos
√ã

	)

8490 
	#CAN_F8R1_FB8
 
CAN_F8R1_FB8_Msk


	)

8491 
	#CAN_F8R1_FB9_Pos
 (9U)

	)

8492 
	#CAN_F8R1_FB9_Msk
 (0x1UL << 
CAN_F8R1_FB9_Pos
√ã

	)

8493 
	#CAN_F8R1_FB9
 
CAN_F8R1_FB9_Msk


	)

8494 
	#CAN_F8R1_FB10_Pos
 (10U)

	)

8495 
	#CAN_F8R1_FB10_Msk
 (0x1UL << 
CAN_F8R1_FB10_Pos
√ã

	)

8496 
	#CAN_F8R1_FB10
 
CAN_F8R1_FB10_Msk


	)

8497 
	#CAN_F8R1_FB11_Pos
 (11U)

	)

8498 
	#CAN_F8R1_FB11_Msk
 (0x1UL << 
CAN_F8R1_FB11_Pos
√ã

	)

8499 
	#CAN_F8R1_FB11
 
CAN_F8R1_FB11_Msk


	)

8500 
	#CAN_F8R1_FB12_Pos
 (12U)

	)

8501 
	#CAN_F8R1_FB12_Msk
 (0x1UL << 
CAN_F8R1_FB12_Pos
√ã

	)

8502 
	#CAN_F8R1_FB12
 
CAN_F8R1_FB12_Msk


	)

8503 
	#CAN_F8R1_FB13_Pos
 (13U)

	)

8504 
	#CAN_F8R1_FB13_Msk
 (0x1UL << 
CAN_F8R1_FB13_Pos
√ã

	)

8505 
	#CAN_F8R1_FB13
 
CAN_F8R1_FB13_Msk


	)

8506 
	#CAN_F8R1_FB14_Pos
 (14U)

	)

8507 
	#CAN_F8R1_FB14_Msk
 (0x1UL << 
CAN_F8R1_FB14_Pos
√ã

	)

8508 
	#CAN_F8R1_FB14
 
CAN_F8R1_FB14_Msk


	)

8509 
	#CAN_F8R1_FB15_Pos
 (15U)

	)

8510 
	#CAN_F8R1_FB15_Msk
 (0x1UL << 
CAN_F8R1_FB15_Pos
√ã

	)

8511 
	#CAN_F8R1_FB15
 
CAN_F8R1_FB15_Msk


	)

8512 
	#CAN_F8R1_FB16_Pos
 (16U)

	)

8513 
	#CAN_F8R1_FB16_Msk
 (0x1UL << 
CAN_F8R1_FB16_Pos
√ã

	)

8514 
	#CAN_F8R1_FB16
 
CAN_F8R1_FB16_Msk


	)

8515 
	#CAN_F8R1_FB17_Pos
 (17U)

	)

8516 
	#CAN_F8R1_FB17_Msk
 (0x1UL << 
CAN_F8R1_FB17_Pos
√ã

	)

8517 
	#CAN_F8R1_FB17
 
CAN_F8R1_FB17_Msk


	)

8518 
	#CAN_F8R1_FB18_Pos
 (18U)

	)

8519 
	#CAN_F8R1_FB18_Msk
 (0x1UL << 
CAN_F8R1_FB18_Pos
√ã

	)

8520 
	#CAN_F8R1_FB18
 
CAN_F8R1_FB18_Msk


	)

8521 
	#CAN_F8R1_FB19_Pos
 (19U)

	)

8522 
	#CAN_F8R1_FB19_Msk
 (0x1UL << 
CAN_F8R1_FB19_Pos
√ã

	)

8523 
	#CAN_F8R1_FB19
 
CAN_F8R1_FB19_Msk


	)

8524 
	#CAN_F8R1_FB20_Pos
 (20U)

	)

8525 
	#CAN_F8R1_FB20_Msk
 (0x1UL << 
CAN_F8R1_FB20_Pos
√ã

	)

8526 
	#CAN_F8R1_FB20
 
CAN_F8R1_FB20_Msk


	)

8527 
	#CAN_F8R1_FB21_Pos
 (21U)

	)

8528 
	#CAN_F8R1_FB21_Msk
 (0x1UL << 
CAN_F8R1_FB21_Pos
√ã

	)

8529 
	#CAN_F8R1_FB21
 
CAN_F8R1_FB21_Msk


	)

8530 
	#CAN_F8R1_FB22_Pos
 (22U)

	)

8531 
	#CAN_F8R1_FB22_Msk
 (0x1UL << 
CAN_F8R1_FB22_Pos
√ã

	)

8532 
	#CAN_F8R1_FB22
 
CAN_F8R1_FB22_Msk


	)

8533 
	#CAN_F8R1_FB23_Pos
 (23U)

	)

8534 
	#CAN_F8R1_FB23_Msk
 (0x1UL << 
CAN_F8R1_FB23_Pos
√ã

	)

8535 
	#CAN_F8R1_FB23
 
CAN_F8R1_FB23_Msk


	)

8536 
	#CAN_F8R1_FB24_Pos
 (24U)

	)

8537 
	#CAN_F8R1_FB24_Msk
 (0x1UL << 
CAN_F8R1_FB24_Pos
√ã

	)

8538 
	#CAN_F8R1_FB24
 
CAN_F8R1_FB24_Msk


	)

8539 
	#CAN_F8R1_FB25_Pos
 (25U)

	)

8540 
	#CAN_F8R1_FB25_Msk
 (0x1UL << 
CAN_F8R1_FB25_Pos
√ã

	)

8541 
	#CAN_F8R1_FB25
 
CAN_F8R1_FB25_Msk


	)

8542 
	#CAN_F8R1_FB26_Pos
 (26U)

	)

8543 
	#CAN_F8R1_FB26_Msk
 (0x1UL << 
CAN_F8R1_FB26_Pos
√ã

	)

8544 
	#CAN_F8R1_FB26
 
CAN_F8R1_FB26_Msk


	)

8545 
	#CAN_F8R1_FB27_Pos
 (27U)

	)

8546 
	#CAN_F8R1_FB27_Msk
 (0x1UL << 
CAN_F8R1_FB27_Pos
√ã

	)

8547 
	#CAN_F8R1_FB27
 
CAN_F8R1_FB27_Msk


	)

8548 
	#CAN_F8R1_FB28_Pos
 (28U)

	)

8549 
	#CAN_F8R1_FB28_Msk
 (0x1UL << 
CAN_F8R1_FB28_Pos
√ã

	)

8550 
	#CAN_F8R1_FB28
 
CAN_F8R1_FB28_Msk


	)

8551 
	#CAN_F8R1_FB29_Pos
 (29U)

	)

8552 
	#CAN_F8R1_FB29_Msk
 (0x1UL << 
CAN_F8R1_FB29_Pos
√ã

	)

8553 
	#CAN_F8R1_FB29
 
CAN_F8R1_FB29_Msk


	)

8554 
	#CAN_F8R1_FB30_Pos
 (30U)

	)

8555 
	#CAN_F8R1_FB30_Msk
 (0x1UL << 
CAN_F8R1_FB30_Pos
√ã

	)

8556 
	#CAN_F8R1_FB30
 
CAN_F8R1_FB30_Msk


	)

8557 
	#CAN_F8R1_FB31_Pos
 (31U)

	)

8558 
	#CAN_F8R1_FB31_Msk
 (0x1UL << 
CAN_F8R1_FB31_Pos
√ã

	)

8559 
	#CAN_F8R1_FB31
 
CAN_F8R1_FB31_Msk


	)

8562 
	#CAN_F9R1_FB0_Pos
 (0U)

	)

8563 
	#CAN_F9R1_FB0_Msk
 (0x1UL << 
CAN_F9R1_FB0_Pos
√ã

	)

8564 
	#CAN_F9R1_FB0
 
CAN_F9R1_FB0_Msk


	)

8565 
	#CAN_F9R1_FB1_Pos
 (1U)

	)

8566 
	#CAN_F9R1_FB1_Msk
 (0x1UL << 
CAN_F9R1_FB1_Pos
√ã

	)

8567 
	#CAN_F9R1_FB1
 
CAN_F9R1_FB1_Msk


	)

8568 
	#CAN_F9R1_FB2_Pos
 (2U)

	)

8569 
	#CAN_F9R1_FB2_Msk
 (0x1UL << 
CAN_F9R1_FB2_Pos
√ã

	)

8570 
	#CAN_F9R1_FB2
 
CAN_F9R1_FB2_Msk


	)

8571 
	#CAN_F9R1_FB3_Pos
 (3U)

	)

8572 
	#CAN_F9R1_FB3_Msk
 (0x1UL << 
CAN_F9R1_FB3_Pos
√ã

	)

8573 
	#CAN_F9R1_FB3
 
CAN_F9R1_FB3_Msk


	)

8574 
	#CAN_F9R1_FB4_Pos
 (4U)

	)

8575 
	#CAN_F9R1_FB4_Msk
 (0x1UL << 
CAN_F9R1_FB4_Pos
√ã

	)

8576 
	#CAN_F9R1_FB4
 
CAN_F9R1_FB4_Msk


	)

8577 
	#CAN_F9R1_FB5_Pos
 (5U)

	)

8578 
	#CAN_F9R1_FB5_Msk
 (0x1UL << 
CAN_F9R1_FB5_Pos
√ã

	)

8579 
	#CAN_F9R1_FB5
 
CAN_F9R1_FB5_Msk


	)

8580 
	#CAN_F9R1_FB6_Pos
 (6U)

	)

8581 
	#CAN_F9R1_FB6_Msk
 (0x1UL << 
CAN_F9R1_FB6_Pos
√ã

	)

8582 
	#CAN_F9R1_FB6
 
CAN_F9R1_FB6_Msk


	)

8583 
	#CAN_F9R1_FB7_Pos
 (7U)

	)

8584 
	#CAN_F9R1_FB7_Msk
 (0x1UL << 
CAN_F9R1_FB7_Pos
√ã

	)

8585 
	#CAN_F9R1_FB7
 
CAN_F9R1_FB7_Msk


	)

8586 
	#CAN_F9R1_FB8_Pos
 (8U)

	)

8587 
	#CAN_F9R1_FB8_Msk
 (0x1UL << 
CAN_F9R1_FB8_Pos
√ã

	)

8588 
	#CAN_F9R1_FB8
 
CAN_F9R1_FB8_Msk


	)

8589 
	#CAN_F9R1_FB9_Pos
 (9U)

	)

8590 
	#CAN_F9R1_FB9_Msk
 (0x1UL << 
CAN_F9R1_FB9_Pos
√ã

	)

8591 
	#CAN_F9R1_FB9
 
CAN_F9R1_FB9_Msk


	)

8592 
	#CAN_F9R1_FB10_Pos
 (10U)

	)

8593 
	#CAN_F9R1_FB10_Msk
 (0x1UL << 
CAN_F9R1_FB10_Pos
√ã

	)

8594 
	#CAN_F9R1_FB10
 
CAN_F9R1_FB10_Msk


	)

8595 
	#CAN_F9R1_FB11_Pos
 (11U)

	)

8596 
	#CAN_F9R1_FB11_Msk
 (0x1UL << 
CAN_F9R1_FB11_Pos
√ã

	)

8597 
	#CAN_F9R1_FB11
 
CAN_F9R1_FB11_Msk


	)

8598 
	#CAN_F9R1_FB12_Pos
 (12U)

	)

8599 
	#CAN_F9R1_FB12_Msk
 (0x1UL << 
CAN_F9R1_FB12_Pos
√ã

	)

8600 
	#CAN_F9R1_FB12
 
CAN_F9R1_FB12_Msk


	)

8601 
	#CAN_F9R1_FB13_Pos
 (13U)

	)

8602 
	#CAN_F9R1_FB13_Msk
 (0x1UL << 
CAN_F9R1_FB13_Pos
√ã

	)

8603 
	#CAN_F9R1_FB13
 
CAN_F9R1_FB13_Msk


	)

8604 
	#CAN_F9R1_FB14_Pos
 (14U)

	)

8605 
	#CAN_F9R1_FB14_Msk
 (0x1UL << 
CAN_F9R1_FB14_Pos
√ã

	)

8606 
	#CAN_F9R1_FB14
 
CAN_F9R1_FB14_Msk


	)

8607 
	#CAN_F9R1_FB15_Pos
 (15U)

	)

8608 
	#CAN_F9R1_FB15_Msk
 (0x1UL << 
CAN_F9R1_FB15_Pos
√ã

	)

8609 
	#CAN_F9R1_FB15
 
CAN_F9R1_FB15_Msk


	)

8610 
	#CAN_F9R1_FB16_Pos
 (16U)

	)

8611 
	#CAN_F9R1_FB16_Msk
 (0x1UL << 
CAN_F9R1_FB16_Pos
√ã

	)

8612 
	#CAN_F9R1_FB16
 
CAN_F9R1_FB16_Msk


	)

8613 
	#CAN_F9R1_FB17_Pos
 (17U)

	)

8614 
	#CAN_F9R1_FB17_Msk
 (0x1UL << 
CAN_F9R1_FB17_Pos
√ã

	)

8615 
	#CAN_F9R1_FB17
 
CAN_F9R1_FB17_Msk


	)

8616 
	#CAN_F9R1_FB18_Pos
 (18U)

	)

8617 
	#CAN_F9R1_FB18_Msk
 (0x1UL << 
CAN_F9R1_FB18_Pos
√ã

	)

8618 
	#CAN_F9R1_FB18
 
CAN_F9R1_FB18_Msk


	)

8619 
	#CAN_F9R1_FB19_Pos
 (19U)

	)

8620 
	#CAN_F9R1_FB19_Msk
 (0x1UL << 
CAN_F9R1_FB19_Pos
√ã

	)

8621 
	#CAN_F9R1_FB19
 
CAN_F9R1_FB19_Msk


	)

8622 
	#CAN_F9R1_FB20_Pos
 (20U)

	)

8623 
	#CAN_F9R1_FB20_Msk
 (0x1UL << 
CAN_F9R1_FB20_Pos
√ã

	)

8624 
	#CAN_F9R1_FB20
 
CAN_F9R1_FB20_Msk


	)

8625 
	#CAN_F9R1_FB21_Pos
 (21U)

	)

8626 
	#CAN_F9R1_FB21_Msk
 (0x1UL << 
CAN_F9R1_FB21_Pos
√ã

	)

8627 
	#CAN_F9R1_FB21
 
CAN_F9R1_FB21_Msk


	)

8628 
	#CAN_F9R1_FB22_Pos
 (22U)

	)

8629 
	#CAN_F9R1_FB22_Msk
 (0x1UL << 
CAN_F9R1_FB22_Pos
√ã

	)

8630 
	#CAN_F9R1_FB22
 
CAN_F9R1_FB22_Msk


	)

8631 
	#CAN_F9R1_FB23_Pos
 (23U)

	)

8632 
	#CAN_F9R1_FB23_Msk
 (0x1UL << 
CAN_F9R1_FB23_Pos
√ã

	)

8633 
	#CAN_F9R1_FB23
 
CAN_F9R1_FB23_Msk


	)

8634 
	#CAN_F9R1_FB24_Pos
 (24U)

	)

8635 
	#CAN_F9R1_FB24_Msk
 (0x1UL << 
CAN_F9R1_FB24_Pos
√ã

	)

8636 
	#CAN_F9R1_FB24
 
CAN_F9R1_FB24_Msk


	)

8637 
	#CAN_F9R1_FB25_Pos
 (25U)

	)

8638 
	#CAN_F9R1_FB25_Msk
 (0x1UL << 
CAN_F9R1_FB25_Pos
√ã

	)

8639 
	#CAN_F9R1_FB25
 
CAN_F9R1_FB25_Msk


	)

8640 
	#CAN_F9R1_FB26_Pos
 (26U)

	)

8641 
	#CAN_F9R1_FB26_Msk
 (0x1UL << 
CAN_F9R1_FB26_Pos
√ã

	)

8642 
	#CAN_F9R1_FB26
 
CAN_F9R1_FB26_Msk


	)

8643 
	#CAN_F9R1_FB27_Pos
 (27U)

	)

8644 
	#CAN_F9R1_FB27_Msk
 (0x1UL << 
CAN_F9R1_FB27_Pos
√ã

	)

8645 
	#CAN_F9R1_FB27
 
CAN_F9R1_FB27_Msk


	)

8646 
	#CAN_F9R1_FB28_Pos
 (28U)

	)

8647 
	#CAN_F9R1_FB28_Msk
 (0x1UL << 
CAN_F9R1_FB28_Pos
√ã

	)

8648 
	#CAN_F9R1_FB28
 
CAN_F9R1_FB28_Msk


	)

8649 
	#CAN_F9R1_FB29_Pos
 (29U)

	)

8650 
	#CAN_F9R1_FB29_Msk
 (0x1UL << 
CAN_F9R1_FB29_Pos
√ã

	)

8651 
	#CAN_F9R1_FB29
 
CAN_F9R1_FB29_Msk


	)

8652 
	#CAN_F9R1_FB30_Pos
 (30U)

	)

8653 
	#CAN_F9R1_FB30_Msk
 (0x1UL << 
CAN_F9R1_FB30_Pos
√ã

	)

8654 
	#CAN_F9R1_FB30
 
CAN_F9R1_FB30_Msk


	)

8655 
	#CAN_F9R1_FB31_Pos
 (31U)

	)

8656 
	#CAN_F9R1_FB31_Msk
 (0x1UL << 
CAN_F9R1_FB31_Pos
√ã

	)

8657 
	#CAN_F9R1_FB31
 
CAN_F9R1_FB31_Msk


	)

8660 
	#CAN_F10R1_FB0_Pos
 (0U)

	)

8661 
	#CAN_F10R1_FB0_Msk
 (0x1UL << 
CAN_F10R1_FB0_Pos
√ã

	)

8662 
	#CAN_F10R1_FB0
 
CAN_F10R1_FB0_Msk


	)

8663 
	#CAN_F10R1_FB1_Pos
 (1U)

	)

8664 
	#CAN_F10R1_FB1_Msk
 (0x1UL << 
CAN_F10R1_FB1_Pos
√ã

	)

8665 
	#CAN_F10R1_FB1
 
CAN_F10R1_FB1_Msk


	)

8666 
	#CAN_F10R1_FB2_Pos
 (2U)

	)

8667 
	#CAN_F10R1_FB2_Msk
 (0x1UL << 
CAN_F10R1_FB2_Pos
√ã

	)

8668 
	#CAN_F10R1_FB2
 
CAN_F10R1_FB2_Msk


	)

8669 
	#CAN_F10R1_FB3_Pos
 (3U)

	)

8670 
	#CAN_F10R1_FB3_Msk
 (0x1UL << 
CAN_F10R1_FB3_Pos
√ã

	)

8671 
	#CAN_F10R1_FB3
 
CAN_F10R1_FB3_Msk


	)

8672 
	#CAN_F10R1_FB4_Pos
 (4U)

	)

8673 
	#CAN_F10R1_FB4_Msk
 (0x1UL << 
CAN_F10R1_FB4_Pos
√ã

	)

8674 
	#CAN_F10R1_FB4
 
CAN_F10R1_FB4_Msk


	)

8675 
	#CAN_F10R1_FB5_Pos
 (5U)

	)

8676 
	#CAN_F10R1_FB5_Msk
 (0x1UL << 
CAN_F10R1_FB5_Pos
√ã

	)

8677 
	#CAN_F10R1_FB5
 
CAN_F10R1_FB5_Msk


	)

8678 
	#CAN_F10R1_FB6_Pos
 (6U)

	)

8679 
	#CAN_F10R1_FB6_Msk
 (0x1UL << 
CAN_F10R1_FB6_Pos
√ã

	)

8680 
	#CAN_F10R1_FB6
 
CAN_F10R1_FB6_Msk


	)

8681 
	#CAN_F10R1_FB7_Pos
 (7U)

	)

8682 
	#CAN_F10R1_FB7_Msk
 (0x1UL << 
CAN_F10R1_FB7_Pos
√ã

	)

8683 
	#CAN_F10R1_FB7
 
CAN_F10R1_FB7_Msk


	)

8684 
	#CAN_F10R1_FB8_Pos
 (8U)

	)

8685 
	#CAN_F10R1_FB8_Msk
 (0x1UL << 
CAN_F10R1_FB8_Pos
√ã

	)

8686 
	#CAN_F10R1_FB8
 
CAN_F10R1_FB8_Msk


	)

8687 
	#CAN_F10R1_FB9_Pos
 (9U)

	)

8688 
	#CAN_F10R1_FB9_Msk
 (0x1UL << 
CAN_F10R1_FB9_Pos
√ã

	)

8689 
	#CAN_F10R1_FB9
 
CAN_F10R1_FB9_Msk


	)

8690 
	#CAN_F10R1_FB10_Pos
 (10U)

	)

8691 
	#CAN_F10R1_FB10_Msk
 (0x1UL << 
CAN_F10R1_FB10_Pos
√ã

	)

8692 
	#CAN_F10R1_FB10
 
CAN_F10R1_FB10_Msk


	)

8693 
	#CAN_F10R1_FB11_Pos
 (11U)

	)

8694 
	#CAN_F10R1_FB11_Msk
 (0x1UL << 
CAN_F10R1_FB11_Pos
√ã

	)

8695 
	#CAN_F10R1_FB11
 
CAN_F10R1_FB11_Msk


	)

8696 
	#CAN_F10R1_FB12_Pos
 (12U)

	)

8697 
	#CAN_F10R1_FB12_Msk
 (0x1UL << 
CAN_F10R1_FB12_Pos
√ã

	)

8698 
	#CAN_F10R1_FB12
 
CAN_F10R1_FB12_Msk


	)

8699 
	#CAN_F10R1_FB13_Pos
 (13U)

	)

8700 
	#CAN_F10R1_FB13_Msk
 (0x1UL << 
CAN_F10R1_FB13_Pos
√ã

	)

8701 
	#CAN_F10R1_FB13
 
CAN_F10R1_FB13_Msk


	)

8702 
	#CAN_F10R1_FB14_Pos
 (14U)

	)

8703 
	#CAN_F10R1_FB14_Msk
 (0x1UL << 
CAN_F10R1_FB14_Pos
√ã

	)

8704 
	#CAN_F10R1_FB14
 
CAN_F10R1_FB14_Msk


	)

8705 
	#CAN_F10R1_FB15_Pos
 (15U)

	)

8706 
	#CAN_F10R1_FB15_Msk
 (0x1UL << 
CAN_F10R1_FB15_Pos
√ã

	)

8707 
	#CAN_F10R1_FB15
 
CAN_F10R1_FB15_Msk


	)

8708 
	#CAN_F10R1_FB16_Pos
 (16U)

	)

8709 
	#CAN_F10R1_FB16_Msk
 (0x1UL << 
CAN_F10R1_FB16_Pos
√ã

	)

8710 
	#CAN_F10R1_FB16
 
CAN_F10R1_FB16_Msk


	)

8711 
	#CAN_F10R1_FB17_Pos
 (17U)

	)

8712 
	#CAN_F10R1_FB17_Msk
 (0x1UL << 
CAN_F10R1_FB17_Pos
√ã

	)

8713 
	#CAN_F10R1_FB17
 
CAN_F10R1_FB17_Msk


	)

8714 
	#CAN_F10R1_FB18_Pos
 (18U)

	)

8715 
	#CAN_F10R1_FB18_Msk
 (0x1UL << 
CAN_F10R1_FB18_Pos
√ã

	)

8716 
	#CAN_F10R1_FB18
 
CAN_F10R1_FB18_Msk


	)

8717 
	#CAN_F10R1_FB19_Pos
 (19U)

	)

8718 
	#CAN_F10R1_FB19_Msk
 (0x1UL << 
CAN_F10R1_FB19_Pos
√ã

	)

8719 
	#CAN_F10R1_FB19
 
CAN_F10R1_FB19_Msk


	)

8720 
	#CAN_F10R1_FB20_Pos
 (20U)

	)

8721 
	#CAN_F10R1_FB20_Msk
 (0x1UL << 
CAN_F10R1_FB20_Pos
√ã

	)

8722 
	#CAN_F10R1_FB20
 
CAN_F10R1_FB20_Msk


	)

8723 
	#CAN_F10R1_FB21_Pos
 (21U)

	)

8724 
	#CAN_F10R1_FB21_Msk
 (0x1UL << 
CAN_F10R1_FB21_Pos
√ã

	)

8725 
	#CAN_F10R1_FB21
 
CAN_F10R1_FB21_Msk


	)

8726 
	#CAN_F10R1_FB22_Pos
 (22U)

	)

8727 
	#CAN_F10R1_FB22_Msk
 (0x1UL << 
CAN_F10R1_FB22_Pos
√ã

	)

8728 
	#CAN_F10R1_FB22
 
CAN_F10R1_FB22_Msk


	)

8729 
	#CAN_F10R1_FB23_Pos
 (23U)

	)

8730 
	#CAN_F10R1_FB23_Msk
 (0x1UL << 
CAN_F10R1_FB23_Pos
√ã

	)

8731 
	#CAN_F10R1_FB23
 
CAN_F10R1_FB23_Msk


	)

8732 
	#CAN_F10R1_FB24_Pos
 (24U)

	)

8733 
	#CAN_F10R1_FB24_Msk
 (0x1UL << 
CAN_F10R1_FB24_Pos
√ã

	)

8734 
	#CAN_F10R1_FB24
 
CAN_F10R1_FB24_Msk


	)

8735 
	#CAN_F10R1_FB25_Pos
 (25U)

	)

8736 
	#CAN_F10R1_FB25_Msk
 (0x1UL << 
CAN_F10R1_FB25_Pos
√ã

	)

8737 
	#CAN_F10R1_FB25
 
CAN_F10R1_FB25_Msk


	)

8738 
	#CAN_F10R1_FB26_Pos
 (26U)

	)

8739 
	#CAN_F10R1_FB26_Msk
 (0x1UL << 
CAN_F10R1_FB26_Pos
√ã

	)

8740 
	#CAN_F10R1_FB26
 
CAN_F10R1_FB26_Msk


	)

8741 
	#CAN_F10R1_FB27_Pos
 (27U)

	)

8742 
	#CAN_F10R1_FB27_Msk
 (0x1UL << 
CAN_F10R1_FB27_Pos
√ã

	)

8743 
	#CAN_F10R1_FB27
 
CAN_F10R1_FB27_Msk


	)

8744 
	#CAN_F10R1_FB28_Pos
 (28U)

	)

8745 
	#CAN_F10R1_FB28_Msk
 (0x1UL << 
CAN_F10R1_FB28_Pos
√ã

	)

8746 
	#CAN_F10R1_FB28
 
CAN_F10R1_FB28_Msk


	)

8747 
	#CAN_F10R1_FB29_Pos
 (29U)

	)

8748 
	#CAN_F10R1_FB29_Msk
 (0x1UL << 
CAN_F10R1_FB29_Pos
√ã

	)

8749 
	#CAN_F10R1_FB29
 
CAN_F10R1_FB29_Msk


	)

8750 
	#CAN_F10R1_FB30_Pos
 (30U)

	)

8751 
	#CAN_F10R1_FB30_Msk
 (0x1UL << 
CAN_F10R1_FB30_Pos
√ã

	)

8752 
	#CAN_F10R1_FB30
 
CAN_F10R1_FB30_Msk


	)

8753 
	#CAN_F10R1_FB31_Pos
 (31U)

	)

8754 
	#CAN_F10R1_FB31_Msk
 (0x1UL << 
CAN_F10R1_FB31_Pos
√ã

	)

8755 
	#CAN_F10R1_FB31
 
CAN_F10R1_FB31_Msk


	)

8758 
	#CAN_F11R1_FB0_Pos
 (0U)

	)

8759 
	#CAN_F11R1_FB0_Msk
 (0x1UL << 
CAN_F11R1_FB0_Pos
√ã

	)

8760 
	#CAN_F11R1_FB0
 
CAN_F11R1_FB0_Msk


	)

8761 
	#CAN_F11R1_FB1_Pos
 (1U)

	)

8762 
	#CAN_F11R1_FB1_Msk
 (0x1UL << 
CAN_F11R1_FB1_Pos
√ã

	)

8763 
	#CAN_F11R1_FB1
 
CAN_F11R1_FB1_Msk


	)

8764 
	#CAN_F11R1_FB2_Pos
 (2U)

	)

8765 
	#CAN_F11R1_FB2_Msk
 (0x1UL << 
CAN_F11R1_FB2_Pos
√ã

	)

8766 
	#CAN_F11R1_FB2
 
CAN_F11R1_FB2_Msk


	)

8767 
	#CAN_F11R1_FB3_Pos
 (3U)

	)

8768 
	#CAN_F11R1_FB3_Msk
 (0x1UL << 
CAN_F11R1_FB3_Pos
√ã

	)

8769 
	#CAN_F11R1_FB3
 
CAN_F11R1_FB3_Msk


	)

8770 
	#CAN_F11R1_FB4_Pos
 (4U)

	)

8771 
	#CAN_F11R1_FB4_Msk
 (0x1UL << 
CAN_F11R1_FB4_Pos
√ã

	)

8772 
	#CAN_F11R1_FB4
 
CAN_F11R1_FB4_Msk


	)

8773 
	#CAN_F11R1_FB5_Pos
 (5U)

	)

8774 
	#CAN_F11R1_FB5_Msk
 (0x1UL << 
CAN_F11R1_FB5_Pos
√ã

	)

8775 
	#CAN_F11R1_FB5
 
CAN_F11R1_FB5_Msk


	)

8776 
	#CAN_F11R1_FB6_Pos
 (6U)

	)

8777 
	#CAN_F11R1_FB6_Msk
 (0x1UL << 
CAN_F11R1_FB6_Pos
√ã

	)

8778 
	#CAN_F11R1_FB6
 
CAN_F11R1_FB6_Msk


	)

8779 
	#CAN_F11R1_FB7_Pos
 (7U)

	)

8780 
	#CAN_F11R1_FB7_Msk
 (0x1UL << 
CAN_F11R1_FB7_Pos
√ã

	)

8781 
	#CAN_F11R1_FB7
 
CAN_F11R1_FB7_Msk


	)

8782 
	#CAN_F11R1_FB8_Pos
 (8U)

	)

8783 
	#CAN_F11R1_FB8_Msk
 (0x1UL << 
CAN_F11R1_FB8_Pos
√ã

	)

8784 
	#CAN_F11R1_FB8
 
CAN_F11R1_FB8_Msk


	)

8785 
	#CAN_F11R1_FB9_Pos
 (9U)

	)

8786 
	#CAN_F11R1_FB9_Msk
 (0x1UL << 
CAN_F11R1_FB9_Pos
√ã

	)

8787 
	#CAN_F11R1_FB9
 
CAN_F11R1_FB9_Msk


	)

8788 
	#CAN_F11R1_FB10_Pos
 (10U)

	)

8789 
	#CAN_F11R1_FB10_Msk
 (0x1UL << 
CAN_F11R1_FB10_Pos
√ã

	)

8790 
	#CAN_F11R1_FB10
 
CAN_F11R1_FB10_Msk


	)

8791 
	#CAN_F11R1_FB11_Pos
 (11U)

	)

8792 
	#CAN_F11R1_FB11_Msk
 (0x1UL << 
CAN_F11R1_FB11_Pos
√ã

	)

8793 
	#CAN_F11R1_FB11
 
CAN_F11R1_FB11_Msk


	)

8794 
	#CAN_F11R1_FB12_Pos
 (12U)

	)

8795 
	#CAN_F11R1_FB12_Msk
 (0x1UL << 
CAN_F11R1_FB12_Pos
√ã

	)

8796 
	#CAN_F11R1_FB12
 
CAN_F11R1_FB12_Msk


	)

8797 
	#CAN_F11R1_FB13_Pos
 (13U)

	)

8798 
	#CAN_F11R1_FB13_Msk
 (0x1UL << 
CAN_F11R1_FB13_Pos
√ã

	)

8799 
	#CAN_F11R1_FB13
 
CAN_F11R1_FB13_Msk


	)

8800 
	#CAN_F11R1_FB14_Pos
 (14U)

	)

8801 
	#CAN_F11R1_FB14_Msk
 (0x1UL << 
CAN_F11R1_FB14_Pos
√ã

	)

8802 
	#CAN_F11R1_FB14
 
CAN_F11R1_FB14_Msk


	)

8803 
	#CAN_F11R1_FB15_Pos
 (15U)

	)

8804 
	#CAN_F11R1_FB15_Msk
 (0x1UL << 
CAN_F11R1_FB15_Pos
√ã

	)

8805 
	#CAN_F11R1_FB15
 
CAN_F11R1_FB15_Msk


	)

8806 
	#CAN_F11R1_FB16_Pos
 (16U)

	)

8807 
	#CAN_F11R1_FB16_Msk
 (0x1UL << 
CAN_F11R1_FB16_Pos
√ã

	)

8808 
	#CAN_F11R1_FB16
 
CAN_F11R1_FB16_Msk


	)

8809 
	#CAN_F11R1_FB17_Pos
 (17U)

	)

8810 
	#CAN_F11R1_FB17_Msk
 (0x1UL << 
CAN_F11R1_FB17_Pos
√ã

	)

8811 
	#CAN_F11R1_FB17
 
CAN_F11R1_FB17_Msk


	)

8812 
	#CAN_F11R1_FB18_Pos
 (18U)

	)

8813 
	#CAN_F11R1_FB18_Msk
 (0x1UL << 
CAN_F11R1_FB18_Pos
√ã

	)

8814 
	#CAN_F11R1_FB18
 
CAN_F11R1_FB18_Msk


	)

8815 
	#CAN_F11R1_FB19_Pos
 (19U)

	)

8816 
	#CAN_F11R1_FB19_Msk
 (0x1UL << 
CAN_F11R1_FB19_Pos
√ã

	)

8817 
	#CAN_F11R1_FB19
 
CAN_F11R1_FB19_Msk


	)

8818 
	#CAN_F11R1_FB20_Pos
 (20U)

	)

8819 
	#CAN_F11R1_FB20_Msk
 (0x1UL << 
CAN_F11R1_FB20_Pos
√ã

	)

8820 
	#CAN_F11R1_FB20
 
CAN_F11R1_FB20_Msk


	)

8821 
	#CAN_F11R1_FB21_Pos
 (21U)

	)

8822 
	#CAN_F11R1_FB21_Msk
 (0x1UL << 
CAN_F11R1_FB21_Pos
√ã

	)

8823 
	#CAN_F11R1_FB21
 
CAN_F11R1_FB21_Msk


	)

8824 
	#CAN_F11R1_FB22_Pos
 (22U)

	)

8825 
	#CAN_F11R1_FB22_Msk
 (0x1UL << 
CAN_F11R1_FB22_Pos
√ã

	)

8826 
	#CAN_F11R1_FB22
 
CAN_F11R1_FB22_Msk


	)

8827 
	#CAN_F11R1_FB23_Pos
 (23U)

	)

8828 
	#CAN_F11R1_FB23_Msk
 (0x1UL << 
CAN_F11R1_FB23_Pos
√ã

	)

8829 
	#CAN_F11R1_FB23
 
CAN_F11R1_FB23_Msk


	)

8830 
	#CAN_F11R1_FB24_Pos
 (24U)

	)

8831 
	#CAN_F11R1_FB24_Msk
 (0x1UL << 
CAN_F11R1_FB24_Pos
√ã

	)

8832 
	#CAN_F11R1_FB24
 
CAN_F11R1_FB24_Msk


	)

8833 
	#CAN_F11R1_FB25_Pos
 (25U)

	)

8834 
	#CAN_F11R1_FB25_Msk
 (0x1UL << 
CAN_F11R1_FB25_Pos
√ã

	)

8835 
	#CAN_F11R1_FB25
 
CAN_F11R1_FB25_Msk


	)

8836 
	#CAN_F11R1_FB26_Pos
 (26U)

	)

8837 
	#CAN_F11R1_FB26_Msk
 (0x1UL << 
CAN_F11R1_FB26_Pos
√ã

	)

8838 
	#CAN_F11R1_FB26
 
CAN_F11R1_FB26_Msk


	)

8839 
	#CAN_F11R1_FB27_Pos
 (27U)

	)

8840 
	#CAN_F11R1_FB27_Msk
 (0x1UL << 
CAN_F11R1_FB27_Pos
√ã

	)

8841 
	#CAN_F11R1_FB27
 
CAN_F11R1_FB27_Msk


	)

8842 
	#CAN_F11R1_FB28_Pos
 (28U)

	)

8843 
	#CAN_F11R1_FB28_Msk
 (0x1UL << 
CAN_F11R1_FB28_Pos
√ã

	)

8844 
	#CAN_F11R1_FB28
 
CAN_F11R1_FB28_Msk


	)

8845 
	#CAN_F11R1_FB29_Pos
 (29U)

	)

8846 
	#CAN_F11R1_FB29_Msk
 (0x1UL << 
CAN_F11R1_FB29_Pos
√ã

	)

8847 
	#CAN_F11R1_FB29
 
CAN_F11R1_FB29_Msk


	)

8848 
	#CAN_F11R1_FB30_Pos
 (30U)

	)

8849 
	#CAN_F11R1_FB30_Msk
 (0x1UL << 
CAN_F11R1_FB30_Pos
√ã

	)

8850 
	#CAN_F11R1_FB30
 
CAN_F11R1_FB30_Msk


	)

8851 
	#CAN_F11R1_FB31_Pos
 (31U)

	)

8852 
	#CAN_F11R1_FB31_Msk
 (0x1UL << 
CAN_F11R1_FB31_Pos
√ã

	)

8853 
	#CAN_F11R1_FB31
 
CAN_F11R1_FB31_Msk


	)

8856 
	#CAN_F12R1_FB0_Pos
 (0U)

	)

8857 
	#CAN_F12R1_FB0_Msk
 (0x1UL << 
CAN_F12R1_FB0_Pos
√ã

	)

8858 
	#CAN_F12R1_FB0
 
CAN_F12R1_FB0_Msk


	)

8859 
	#CAN_F12R1_FB1_Pos
 (1U)

	)

8860 
	#CAN_F12R1_FB1_Msk
 (0x1UL << 
CAN_F12R1_FB1_Pos
√ã

	)

8861 
	#CAN_F12R1_FB1
 
CAN_F12R1_FB1_Msk


	)

8862 
	#CAN_F12R1_FB2_Pos
 (2U)

	)

8863 
	#CAN_F12R1_FB2_Msk
 (0x1UL << 
CAN_F12R1_FB2_Pos
√ã

	)

8864 
	#CAN_F12R1_FB2
 
CAN_F12R1_FB2_Msk


	)

8865 
	#CAN_F12R1_FB3_Pos
 (3U)

	)

8866 
	#CAN_F12R1_FB3_Msk
 (0x1UL << 
CAN_F12R1_FB3_Pos
√ã

	)

8867 
	#CAN_F12R1_FB3
 
CAN_F12R1_FB3_Msk


	)

8868 
	#CAN_F12R1_FB4_Pos
 (4U)

	)

8869 
	#CAN_F12R1_FB4_Msk
 (0x1UL << 
CAN_F12R1_FB4_Pos
√ã

	)

8870 
	#CAN_F12R1_FB4
 
CAN_F12R1_FB4_Msk


	)

8871 
	#CAN_F12R1_FB5_Pos
 (5U)

	)

8872 
	#CAN_F12R1_FB5_Msk
 (0x1UL << 
CAN_F12R1_FB5_Pos
√ã

	)

8873 
	#CAN_F12R1_FB5
 
CAN_F12R1_FB5_Msk


	)

8874 
	#CAN_F12R1_FB6_Pos
 (6U)

	)

8875 
	#CAN_F12R1_FB6_Msk
 (0x1UL << 
CAN_F12R1_FB6_Pos
√ã

	)

8876 
	#CAN_F12R1_FB6
 
CAN_F12R1_FB6_Msk


	)

8877 
	#CAN_F12R1_FB7_Pos
 (7U)

	)

8878 
	#CAN_F12R1_FB7_Msk
 (0x1UL << 
CAN_F12R1_FB7_Pos
√ã

	)

8879 
	#CAN_F12R1_FB7
 
CAN_F12R1_FB7_Msk


	)

8880 
	#CAN_F12R1_FB8_Pos
 (8U)

	)

8881 
	#CAN_F12R1_FB8_Msk
 (0x1UL << 
CAN_F12R1_FB8_Pos
√ã

	)

8882 
	#CAN_F12R1_FB8
 
CAN_F12R1_FB8_Msk


	)

8883 
	#CAN_F12R1_FB9_Pos
 (9U)

	)

8884 
	#CAN_F12R1_FB9_Msk
 (0x1UL << 
CAN_F12R1_FB9_Pos
√ã

	)

8885 
	#CAN_F12R1_FB9
 
CAN_F12R1_FB9_Msk


	)

8886 
	#CAN_F12R1_FB10_Pos
 (10U)

	)

8887 
	#CAN_F12R1_FB10_Msk
 (0x1UL << 
CAN_F12R1_FB10_Pos
√ã

	)

8888 
	#CAN_F12R1_FB10
 
CAN_F12R1_FB10_Msk


	)

8889 
	#CAN_F12R1_FB11_Pos
 (11U)

	)

8890 
	#CAN_F12R1_FB11_Msk
 (0x1UL << 
CAN_F12R1_FB11_Pos
√ã

	)

8891 
	#CAN_F12R1_FB11
 
CAN_F12R1_FB11_Msk


	)

8892 
	#CAN_F12R1_FB12_Pos
 (12U)

	)

8893 
	#CAN_F12R1_FB12_Msk
 (0x1UL << 
CAN_F12R1_FB12_Pos
√ã

	)

8894 
	#CAN_F12R1_FB12
 
CAN_F12R1_FB12_Msk


	)

8895 
	#CAN_F12R1_FB13_Pos
 (13U)

	)

8896 
	#CAN_F12R1_FB13_Msk
 (0x1UL << 
CAN_F12R1_FB13_Pos
√ã

	)

8897 
	#CAN_F12R1_FB13
 
CAN_F12R1_FB13_Msk


	)

8898 
	#CAN_F12R1_FB14_Pos
 (14U)

	)

8899 
	#CAN_F12R1_FB14_Msk
 (0x1UL << 
CAN_F12R1_FB14_Pos
√ã

	)

8900 
	#CAN_F12R1_FB14
 
CAN_F12R1_FB14_Msk


	)

8901 
	#CAN_F12R1_FB15_Pos
 (15U)

	)

8902 
	#CAN_F12R1_FB15_Msk
 (0x1UL << 
CAN_F12R1_FB15_Pos
√ã

	)

8903 
	#CAN_F12R1_FB15
 
CAN_F12R1_FB15_Msk


	)

8904 
	#CAN_F12R1_FB16_Pos
 (16U)

	)

8905 
	#CAN_F12R1_FB16_Msk
 (0x1UL << 
CAN_F12R1_FB16_Pos
√ã

	)

8906 
	#CAN_F12R1_FB16
 
CAN_F12R1_FB16_Msk


	)

8907 
	#CAN_F12R1_FB17_Pos
 (17U)

	)

8908 
	#CAN_F12R1_FB17_Msk
 (0x1UL << 
CAN_F12R1_FB17_Pos
√ã

	)

8909 
	#CAN_F12R1_FB17
 
CAN_F12R1_FB17_Msk


	)

8910 
	#CAN_F12R1_FB18_Pos
 (18U)

	)

8911 
	#CAN_F12R1_FB18_Msk
 (0x1UL << 
CAN_F12R1_FB18_Pos
√ã

	)

8912 
	#CAN_F12R1_FB18
 
CAN_F12R1_FB18_Msk


	)

8913 
	#CAN_F12R1_FB19_Pos
 (19U)

	)

8914 
	#CAN_F12R1_FB19_Msk
 (0x1UL << 
CAN_F12R1_FB19_Pos
√ã

	)

8915 
	#CAN_F12R1_FB19
 
CAN_F12R1_FB19_Msk


	)

8916 
	#CAN_F12R1_FB20_Pos
 (20U)

	)

8917 
	#CAN_F12R1_FB20_Msk
 (0x1UL << 
CAN_F12R1_FB20_Pos
√ã

	)

8918 
	#CAN_F12R1_FB20
 
CAN_F12R1_FB20_Msk


	)

8919 
	#CAN_F12R1_FB21_Pos
 (21U)

	)

8920 
	#CAN_F12R1_FB21_Msk
 (0x1UL << 
CAN_F12R1_FB21_Pos
√ã

	)

8921 
	#CAN_F12R1_FB21
 
CAN_F12R1_FB21_Msk


	)

8922 
	#CAN_F12R1_FB22_Pos
 (22U)

	)

8923 
	#CAN_F12R1_FB22_Msk
 (0x1UL << 
CAN_F12R1_FB22_Pos
√ã

	)

8924 
	#CAN_F12R1_FB22
 
CAN_F12R1_FB22_Msk


	)

8925 
	#CAN_F12R1_FB23_Pos
 (23U)

	)

8926 
	#CAN_F12R1_FB23_Msk
 (0x1UL << 
CAN_F12R1_FB23_Pos
√ã

	)

8927 
	#CAN_F12R1_FB23
 
CAN_F12R1_FB23_Msk


	)

8928 
	#CAN_F12R1_FB24_Pos
 (24U)

	)

8929 
	#CAN_F12R1_FB24_Msk
 (0x1UL << 
CAN_F12R1_FB24_Pos
√ã

	)

8930 
	#CAN_F12R1_FB24
 
CAN_F12R1_FB24_Msk


	)

8931 
	#CAN_F12R1_FB25_Pos
 (25U)

	)

8932 
	#CAN_F12R1_FB25_Msk
 (0x1UL << 
CAN_F12R1_FB25_Pos
√ã

	)

8933 
	#CAN_F12R1_FB25
 
CAN_F12R1_FB25_Msk


	)

8934 
	#CAN_F12R1_FB26_Pos
 (26U)

	)

8935 
	#CAN_F12R1_FB26_Msk
 (0x1UL << 
CAN_F12R1_FB26_Pos
√ã

	)

8936 
	#CAN_F12R1_FB26
 
CAN_F12R1_FB26_Msk


	)

8937 
	#CAN_F12R1_FB27_Pos
 (27U)

	)

8938 
	#CAN_F12R1_FB27_Msk
 (0x1UL << 
CAN_F12R1_FB27_Pos
√ã

	)

8939 
	#CAN_F12R1_FB27
 
CAN_F12R1_FB27_Msk


	)

8940 
	#CAN_F12R1_FB28_Pos
 (28U)

	)

8941 
	#CAN_F12R1_FB28_Msk
 (0x1UL << 
CAN_F12R1_FB28_Pos
√ã

	)

8942 
	#CAN_F12R1_FB28
 
CAN_F12R1_FB28_Msk


	)

8943 
	#CAN_F12R1_FB29_Pos
 (29U)

	)

8944 
	#CAN_F12R1_FB29_Msk
 (0x1UL << 
CAN_F12R1_FB29_Pos
√ã

	)

8945 
	#CAN_F12R1_FB29
 
CAN_F12R1_FB29_Msk


	)

8946 
	#CAN_F12R1_FB30_Pos
 (30U)

	)

8947 
	#CAN_F12R1_FB30_Msk
 (0x1UL << 
CAN_F12R1_FB30_Pos
√ã

	)

8948 
	#CAN_F12R1_FB30
 
CAN_F12R1_FB30_Msk


	)

8949 
	#CAN_F12R1_FB31_Pos
 (31U)

	)

8950 
	#CAN_F12R1_FB31_Msk
 (0x1UL << 
CAN_F12R1_FB31_Pos
√ã

	)

8951 
	#CAN_F12R1_FB31
 
CAN_F12R1_FB31_Msk


	)

8954 
	#CAN_F13R1_FB0_Pos
 (0U)

	)

8955 
	#CAN_F13R1_FB0_Msk
 (0x1UL << 
CAN_F13R1_FB0_Pos
√ã

	)

8956 
	#CAN_F13R1_FB0
 
CAN_F13R1_FB0_Msk


	)

8957 
	#CAN_F13R1_FB1_Pos
 (1U)

	)

8958 
	#CAN_F13R1_FB1_Msk
 (0x1UL << 
CAN_F13R1_FB1_Pos
√ã

	)

8959 
	#CAN_F13R1_FB1
 
CAN_F13R1_FB1_Msk


	)

8960 
	#CAN_F13R1_FB2_Pos
 (2U)

	)

8961 
	#CAN_F13R1_FB2_Msk
 (0x1UL << 
CAN_F13R1_FB2_Pos
√ã

	)

8962 
	#CAN_F13R1_FB2
 
CAN_F13R1_FB2_Msk


	)

8963 
	#CAN_F13R1_FB3_Pos
 (3U)

	)

8964 
	#CAN_F13R1_FB3_Msk
 (0x1UL << 
CAN_F13R1_FB3_Pos
√ã

	)

8965 
	#CAN_F13R1_FB3
 
CAN_F13R1_FB3_Msk


	)

8966 
	#CAN_F13R1_FB4_Pos
 (4U)

	)

8967 
	#CAN_F13R1_FB4_Msk
 (0x1UL << 
CAN_F13R1_FB4_Pos
√ã

	)

8968 
	#CAN_F13R1_FB4
 
CAN_F13R1_FB4_Msk


	)

8969 
	#CAN_F13R1_FB5_Pos
 (5U)

	)

8970 
	#CAN_F13R1_FB5_Msk
 (0x1UL << 
CAN_F13R1_FB5_Pos
√ã

	)

8971 
	#CAN_F13R1_FB5
 
CAN_F13R1_FB5_Msk


	)

8972 
	#CAN_F13R1_FB6_Pos
 (6U)

	)

8973 
	#CAN_F13R1_FB6_Msk
 (0x1UL << 
CAN_F13R1_FB6_Pos
√ã

	)

8974 
	#CAN_F13R1_FB6
 
CAN_F13R1_FB6_Msk


	)

8975 
	#CAN_F13R1_FB7_Pos
 (7U)

	)

8976 
	#CAN_F13R1_FB7_Msk
 (0x1UL << 
CAN_F13R1_FB7_Pos
√ã

	)

8977 
	#CAN_F13R1_FB7
 
CAN_F13R1_FB7_Msk


	)

8978 
	#CAN_F13R1_FB8_Pos
 (8U)

	)

8979 
	#CAN_F13R1_FB8_Msk
 (0x1UL << 
CAN_F13R1_FB8_Pos
√ã

	)

8980 
	#CAN_F13R1_FB8
 
CAN_F13R1_FB8_Msk


	)

8981 
	#CAN_F13R1_FB9_Pos
 (9U)

	)

8982 
	#CAN_F13R1_FB9_Msk
 (0x1UL << 
CAN_F13R1_FB9_Pos
√ã

	)

8983 
	#CAN_F13R1_FB9
 
CAN_F13R1_FB9_Msk


	)

8984 
	#CAN_F13R1_FB10_Pos
 (10U)

	)

8985 
	#CAN_F13R1_FB10_Msk
 (0x1UL << 
CAN_F13R1_FB10_Pos
√ã

	)

8986 
	#CAN_F13R1_FB10
 
CAN_F13R1_FB10_Msk


	)

8987 
	#CAN_F13R1_FB11_Pos
 (11U)

	)

8988 
	#CAN_F13R1_FB11_Msk
 (0x1UL << 
CAN_F13R1_FB11_Pos
√ã

	)

8989 
	#CAN_F13R1_FB11
 
CAN_F13R1_FB11_Msk


	)

8990 
	#CAN_F13R1_FB12_Pos
 (12U)

	)

8991 
	#CAN_F13R1_FB12_Msk
 (0x1UL << 
CAN_F13R1_FB12_Pos
√ã

	)

8992 
	#CAN_F13R1_FB12
 
CAN_F13R1_FB12_Msk


	)

8993 
	#CAN_F13R1_FB13_Pos
 (13U)

	)

8994 
	#CAN_F13R1_FB13_Msk
 (0x1UL << 
CAN_F13R1_FB13_Pos
√ã

	)

8995 
	#CAN_F13R1_FB13
 
CAN_F13R1_FB13_Msk


	)

8996 
	#CAN_F13R1_FB14_Pos
 (14U)

	)

8997 
	#CAN_F13R1_FB14_Msk
 (0x1UL << 
CAN_F13R1_FB14_Pos
√ã

	)

8998 
	#CAN_F13R1_FB14
 
CAN_F13R1_FB14_Msk


	)

8999 
	#CAN_F13R1_FB15_Pos
 (15U)

	)

9000 
	#CAN_F13R1_FB15_Msk
 (0x1UL << 
CAN_F13R1_FB15_Pos
√ã

	)

9001 
	#CAN_F13R1_FB15
 
CAN_F13R1_FB15_Msk


	)

9002 
	#CAN_F13R1_FB16_Pos
 (16U)

	)

9003 
	#CAN_F13R1_FB16_Msk
 (0x1UL << 
CAN_F13R1_FB16_Pos
√ã

	)

9004 
	#CAN_F13R1_FB16
 
CAN_F13R1_FB16_Msk


	)

9005 
	#CAN_F13R1_FB17_Pos
 (17U)

	)

9006 
	#CAN_F13R1_FB17_Msk
 (0x1UL << 
CAN_F13R1_FB17_Pos
√ã

	)

9007 
	#CAN_F13R1_FB17
 
CAN_F13R1_FB17_Msk


	)

9008 
	#CAN_F13R1_FB18_Pos
 (18U)

	)

9009 
	#CAN_F13R1_FB18_Msk
 (0x1UL << 
CAN_F13R1_FB18_Pos
√ã

	)

9010 
	#CAN_F13R1_FB18
 
CAN_F13R1_FB18_Msk


	)

9011 
	#CAN_F13R1_FB19_Pos
 (19U)

	)

9012 
	#CAN_F13R1_FB19_Msk
 (0x1UL << 
CAN_F13R1_FB19_Pos
√ã

	)

9013 
	#CAN_F13R1_FB19
 
CAN_F13R1_FB19_Msk


	)

9014 
	#CAN_F13R1_FB20_Pos
 (20U)

	)

9015 
	#CAN_F13R1_FB20_Msk
 (0x1UL << 
CAN_F13R1_FB20_Pos
√ã

	)

9016 
	#CAN_F13R1_FB20
 
CAN_F13R1_FB20_Msk


	)

9017 
	#CAN_F13R1_FB21_Pos
 (21U)

	)

9018 
	#CAN_F13R1_FB21_Msk
 (0x1UL << 
CAN_F13R1_FB21_Pos
√ã

	)

9019 
	#CAN_F13R1_FB21
 
CAN_F13R1_FB21_Msk


	)

9020 
	#CAN_F13R1_FB22_Pos
 (22U)

	)

9021 
	#CAN_F13R1_FB22_Msk
 (0x1UL << 
CAN_F13R1_FB22_Pos
√ã

	)

9022 
	#CAN_F13R1_FB22
 
CAN_F13R1_FB22_Msk


	)

9023 
	#CAN_F13R1_FB23_Pos
 (23U)

	)

9024 
	#CAN_F13R1_FB23_Msk
 (0x1UL << 
CAN_F13R1_FB23_Pos
√ã

	)

9025 
	#CAN_F13R1_FB23
 
CAN_F13R1_FB23_Msk


	)

9026 
	#CAN_F13R1_FB24_Pos
 (24U)

	)

9027 
	#CAN_F13R1_FB24_Msk
 (0x1UL << 
CAN_F13R1_FB24_Pos
√ã

	)

9028 
	#CAN_F13R1_FB24
 
CAN_F13R1_FB24_Msk


	)

9029 
	#CAN_F13R1_FB25_Pos
 (25U)

	)

9030 
	#CAN_F13R1_FB25_Msk
 (0x1UL << 
CAN_F13R1_FB25_Pos
√ã

	)

9031 
	#CAN_F13R1_FB25
 
CAN_F13R1_FB25_Msk


	)

9032 
	#CAN_F13R1_FB26_Pos
 (26U)

	)

9033 
	#CAN_F13R1_FB26_Msk
 (0x1UL << 
CAN_F13R1_FB26_Pos
√ã

	)

9034 
	#CAN_F13R1_FB26
 
CAN_F13R1_FB26_Msk


	)

9035 
	#CAN_F13R1_FB27_Pos
 (27U)

	)

9036 
	#CAN_F13R1_FB27_Msk
 (0x1UL << 
CAN_F13R1_FB27_Pos
√ã

	)

9037 
	#CAN_F13R1_FB27
 
CAN_F13R1_FB27_Msk


	)

9038 
	#CAN_F13R1_FB28_Pos
 (28U)

	)

9039 
	#CAN_F13R1_FB28_Msk
 (0x1UL << 
CAN_F13R1_FB28_Pos
√ã

	)

9040 
	#CAN_F13R1_FB28
 
CAN_F13R1_FB28_Msk


	)

9041 
	#CAN_F13R1_FB29_Pos
 (29U)

	)

9042 
	#CAN_F13R1_FB29_Msk
 (0x1UL << 
CAN_F13R1_FB29_Pos
√ã

	)

9043 
	#CAN_F13R1_FB29
 
CAN_F13R1_FB29_Msk


	)

9044 
	#CAN_F13R1_FB30_Pos
 (30U)

	)

9045 
	#CAN_F13R1_FB30_Msk
 (0x1UL << 
CAN_F13R1_FB30_Pos
√ã

	)

9046 
	#CAN_F13R1_FB30
 
CAN_F13R1_FB30_Msk


	)

9047 
	#CAN_F13R1_FB31_Pos
 (31U)

	)

9048 
	#CAN_F13R1_FB31_Msk
 (0x1UL << 
CAN_F13R1_FB31_Pos
√ã

	)

9049 
	#CAN_F13R1_FB31
 
CAN_F13R1_FB31_Msk


	)

9052 
	#CAN_F0R2_FB0_Pos
 (0U)

	)

9053 
	#CAN_F0R2_FB0_Msk
 (0x1UL << 
CAN_F0R2_FB0_Pos
√ã

	)

9054 
	#CAN_F0R2_FB0
 
CAN_F0R2_FB0_Msk


	)

9055 
	#CAN_F0R2_FB1_Pos
 (1U)

	)

9056 
	#CAN_F0R2_FB1_Msk
 (0x1UL << 
CAN_F0R2_FB1_Pos
√ã

	)

9057 
	#CAN_F0R2_FB1
 
CAN_F0R2_FB1_Msk


	)

9058 
	#CAN_F0R2_FB2_Pos
 (2U)

	)

9059 
	#CAN_F0R2_FB2_Msk
 (0x1UL << 
CAN_F0R2_FB2_Pos
√ã

	)

9060 
	#CAN_F0R2_FB2
 
CAN_F0R2_FB2_Msk


	)

9061 
	#CAN_F0R2_FB3_Pos
 (3U)

	)

9062 
	#CAN_F0R2_FB3_Msk
 (0x1UL << 
CAN_F0R2_FB3_Pos
√ã

	)

9063 
	#CAN_F0R2_FB3
 
CAN_F0R2_FB3_Msk


	)

9064 
	#CAN_F0R2_FB4_Pos
 (4U)

	)

9065 
	#CAN_F0R2_FB4_Msk
 (0x1UL << 
CAN_F0R2_FB4_Pos
√ã

	)

9066 
	#CAN_F0R2_FB4
 
CAN_F0R2_FB4_Msk


	)

9067 
	#CAN_F0R2_FB5_Pos
 (5U)

	)

9068 
	#CAN_F0R2_FB5_Msk
 (0x1UL << 
CAN_F0R2_FB5_Pos
√ã

	)

9069 
	#CAN_F0R2_FB5
 
CAN_F0R2_FB5_Msk


	)

9070 
	#CAN_F0R2_FB6_Pos
 (6U)

	)

9071 
	#CAN_F0R2_FB6_Msk
 (0x1UL << 
CAN_F0R2_FB6_Pos
√ã

	)

9072 
	#CAN_F0R2_FB6
 
CAN_F0R2_FB6_Msk


	)

9073 
	#CAN_F0R2_FB7_Pos
 (7U)

	)

9074 
	#CAN_F0R2_FB7_Msk
 (0x1UL << 
CAN_F0R2_FB7_Pos
√ã

	)

9075 
	#CAN_F0R2_FB7
 
CAN_F0R2_FB7_Msk


	)

9076 
	#CAN_F0R2_FB8_Pos
 (8U)

	)

9077 
	#CAN_F0R2_FB8_Msk
 (0x1UL << 
CAN_F0R2_FB8_Pos
√ã

	)

9078 
	#CAN_F0R2_FB8
 
CAN_F0R2_FB8_Msk


	)

9079 
	#CAN_F0R2_FB9_Pos
 (9U)

	)

9080 
	#CAN_F0R2_FB9_Msk
 (0x1UL << 
CAN_F0R2_FB9_Pos
√ã

	)

9081 
	#CAN_F0R2_FB9
 
CAN_F0R2_FB9_Msk


	)

9082 
	#CAN_F0R2_FB10_Pos
 (10U)

	)

9083 
	#CAN_F0R2_FB10_Msk
 (0x1UL << 
CAN_F0R2_FB10_Pos
√ã

	)

9084 
	#CAN_F0R2_FB10
 
CAN_F0R2_FB10_Msk


	)

9085 
	#CAN_F0R2_FB11_Pos
 (11U)

	)

9086 
	#CAN_F0R2_FB11_Msk
 (0x1UL << 
CAN_F0R2_FB11_Pos
√ã

	)

9087 
	#CAN_F0R2_FB11
 
CAN_F0R2_FB11_Msk


	)

9088 
	#CAN_F0R2_FB12_Pos
 (12U)

	)

9089 
	#CAN_F0R2_FB12_Msk
 (0x1UL << 
CAN_F0R2_FB12_Pos
√ã

	)

9090 
	#CAN_F0R2_FB12
 
CAN_F0R2_FB12_Msk


	)

9091 
	#CAN_F0R2_FB13_Pos
 (13U)

	)

9092 
	#CAN_F0R2_FB13_Msk
 (0x1UL << 
CAN_F0R2_FB13_Pos
√ã

	)

9093 
	#CAN_F0R2_FB13
 
CAN_F0R2_FB13_Msk


	)

9094 
	#CAN_F0R2_FB14_Pos
 (14U)

	)

9095 
	#CAN_F0R2_FB14_Msk
 (0x1UL << 
CAN_F0R2_FB14_Pos
√ã

	)

9096 
	#CAN_F0R2_FB14
 
CAN_F0R2_FB14_Msk


	)

9097 
	#CAN_F0R2_FB15_Pos
 (15U)

	)

9098 
	#CAN_F0R2_FB15_Msk
 (0x1UL << 
CAN_F0R2_FB15_Pos
√ã

	)

9099 
	#CAN_F0R2_FB15
 
CAN_F0R2_FB15_Msk


	)

9100 
	#CAN_F0R2_FB16_Pos
 (16U)

	)

9101 
	#CAN_F0R2_FB16_Msk
 (0x1UL << 
CAN_F0R2_FB16_Pos
√ã

	)

9102 
	#CAN_F0R2_FB16
 
CAN_F0R2_FB16_Msk


	)

9103 
	#CAN_F0R2_FB17_Pos
 (17U)

	)

9104 
	#CAN_F0R2_FB17_Msk
 (0x1UL << 
CAN_F0R2_FB17_Pos
√ã

	)

9105 
	#CAN_F0R2_FB17
 
CAN_F0R2_FB17_Msk


	)

9106 
	#CAN_F0R2_FB18_Pos
 (18U)

	)

9107 
	#CAN_F0R2_FB18_Msk
 (0x1UL << 
CAN_F0R2_FB18_Pos
√ã

	)

9108 
	#CAN_F0R2_FB18
 
CAN_F0R2_FB18_Msk


	)

9109 
	#CAN_F0R2_FB19_Pos
 (19U)

	)

9110 
	#CAN_F0R2_FB19_Msk
 (0x1UL << 
CAN_F0R2_FB19_Pos
√ã

	)

9111 
	#CAN_F0R2_FB19
 
CAN_F0R2_FB19_Msk


	)

9112 
	#CAN_F0R2_FB20_Pos
 (20U)

	)

9113 
	#CAN_F0R2_FB20_Msk
 (0x1UL << 
CAN_F0R2_FB20_Pos
√ã

	)

9114 
	#CAN_F0R2_FB20
 
CAN_F0R2_FB20_Msk


	)

9115 
	#CAN_F0R2_FB21_Pos
 (21U)

	)

9116 
	#CAN_F0R2_FB21_Msk
 (0x1UL << 
CAN_F0R2_FB21_Pos
√ã

	)

9117 
	#CAN_F0R2_FB21
 
CAN_F0R2_FB21_Msk


	)

9118 
	#CAN_F0R2_FB22_Pos
 (22U)

	)

9119 
	#CAN_F0R2_FB22_Msk
 (0x1UL << 
CAN_F0R2_FB22_Pos
√ã

	)

9120 
	#CAN_F0R2_FB22
 
CAN_F0R2_FB22_Msk


	)

9121 
	#CAN_F0R2_FB23_Pos
 (23U)

	)

9122 
	#CAN_F0R2_FB23_Msk
 (0x1UL << 
CAN_F0R2_FB23_Pos
√ã

	)

9123 
	#CAN_F0R2_FB23
 
CAN_F0R2_FB23_Msk


	)

9124 
	#CAN_F0R2_FB24_Pos
 (24U)

	)

9125 
	#CAN_F0R2_FB24_Msk
 (0x1UL << 
CAN_F0R2_FB24_Pos
√ã

	)

9126 
	#CAN_F0R2_FB24
 
CAN_F0R2_FB24_Msk


	)

9127 
	#CAN_F0R2_FB25_Pos
 (25U)

	)

9128 
	#CAN_F0R2_FB25_Msk
 (0x1UL << 
CAN_F0R2_FB25_Pos
√ã

	)

9129 
	#CAN_F0R2_FB25
 
CAN_F0R2_FB25_Msk


	)

9130 
	#CAN_F0R2_FB26_Pos
 (26U)

	)

9131 
	#CAN_F0R2_FB26_Msk
 (0x1UL << 
CAN_F0R2_FB26_Pos
√ã

	)

9132 
	#CAN_F0R2_FB26
 
CAN_F0R2_FB26_Msk


	)

9133 
	#CAN_F0R2_FB27_Pos
 (27U)

	)

9134 
	#CAN_F0R2_FB27_Msk
 (0x1UL << 
CAN_F0R2_FB27_Pos
√ã

	)

9135 
	#CAN_F0R2_FB27
 
CAN_F0R2_FB27_Msk


	)

9136 
	#CAN_F0R2_FB28_Pos
 (28U)

	)

9137 
	#CAN_F0R2_FB28_Msk
 (0x1UL << 
CAN_F0R2_FB28_Pos
√ã

	)

9138 
	#CAN_F0R2_FB28
 
CAN_F0R2_FB28_Msk


	)

9139 
	#CAN_F0R2_FB29_Pos
 (29U)

	)

9140 
	#CAN_F0R2_FB29_Msk
 (0x1UL << 
CAN_F0R2_FB29_Pos
√ã

	)

9141 
	#CAN_F0R2_FB29
 
CAN_F0R2_FB29_Msk


	)

9142 
	#CAN_F0R2_FB30_Pos
 (30U)

	)

9143 
	#CAN_F0R2_FB30_Msk
 (0x1UL << 
CAN_F0R2_FB30_Pos
√ã

	)

9144 
	#CAN_F0R2_FB30
 
CAN_F0R2_FB30_Msk


	)

9145 
	#CAN_F0R2_FB31_Pos
 (31U)

	)

9146 
	#CAN_F0R2_FB31_Msk
 (0x1UL << 
CAN_F0R2_FB31_Pos
√ã

	)

9147 
	#CAN_F0R2_FB31
 
CAN_F0R2_FB31_Msk


	)

9150 
	#CAN_F1R2_FB0_Pos
 (0U)

	)

9151 
	#CAN_F1R2_FB0_Msk
 (0x1UL << 
CAN_F1R2_FB0_Pos
√ã

	)

9152 
	#CAN_F1R2_FB0
 
CAN_F1R2_FB0_Msk


	)

9153 
	#CAN_F1R2_FB1_Pos
 (1U)

	)

9154 
	#CAN_F1R2_FB1_Msk
 (0x1UL << 
CAN_F1R2_FB1_Pos
√ã

	)

9155 
	#CAN_F1R2_FB1
 
CAN_F1R2_FB1_Msk


	)

9156 
	#CAN_F1R2_FB2_Pos
 (2U)

	)

9157 
	#CAN_F1R2_FB2_Msk
 (0x1UL << 
CAN_F1R2_FB2_Pos
√ã

	)

9158 
	#CAN_F1R2_FB2
 
CAN_F1R2_FB2_Msk


	)

9159 
	#CAN_F1R2_FB3_Pos
 (3U)

	)

9160 
	#CAN_F1R2_FB3_Msk
 (0x1UL << 
CAN_F1R2_FB3_Pos
√ã

	)

9161 
	#CAN_F1R2_FB3
 
CAN_F1R2_FB3_Msk


	)

9162 
	#CAN_F1R2_FB4_Pos
 (4U)

	)

9163 
	#CAN_F1R2_FB4_Msk
 (0x1UL << 
CAN_F1R2_FB4_Pos
√ã

	)

9164 
	#CAN_F1R2_FB4
 
CAN_F1R2_FB4_Msk


	)

9165 
	#CAN_F1R2_FB5_Pos
 (5U)

	)

9166 
	#CAN_F1R2_FB5_Msk
 (0x1UL << 
CAN_F1R2_FB5_Pos
√ã

	)

9167 
	#CAN_F1R2_FB5
 
CAN_F1R2_FB5_Msk


	)

9168 
	#CAN_F1R2_FB6_Pos
 (6U)

	)

9169 
	#CAN_F1R2_FB6_Msk
 (0x1UL << 
CAN_F1R2_FB6_Pos
√ã

	)

9170 
	#CAN_F1R2_FB6
 
CAN_F1R2_FB6_Msk


	)

9171 
	#CAN_F1R2_FB7_Pos
 (7U)

	)

9172 
	#CAN_F1R2_FB7_Msk
 (0x1UL << 
CAN_F1R2_FB7_Pos
√ã

	)

9173 
	#CAN_F1R2_FB7
 
CAN_F1R2_FB7_Msk


	)

9174 
	#CAN_F1R2_FB8_Pos
 (8U)

	)

9175 
	#CAN_F1R2_FB8_Msk
 (0x1UL << 
CAN_F1R2_FB8_Pos
√ã

	)

9176 
	#CAN_F1R2_FB8
 
CAN_F1R2_FB8_Msk


	)

9177 
	#CAN_F1R2_FB9_Pos
 (9U)

	)

9178 
	#CAN_F1R2_FB9_Msk
 (0x1UL << 
CAN_F1R2_FB9_Pos
√ã

	)

9179 
	#CAN_F1R2_FB9
 
CAN_F1R2_FB9_Msk


	)

9180 
	#CAN_F1R2_FB10_Pos
 (10U)

	)

9181 
	#CAN_F1R2_FB10_Msk
 (0x1UL << 
CAN_F1R2_FB10_Pos
√ã

	)

9182 
	#CAN_F1R2_FB10
 
CAN_F1R2_FB10_Msk


	)

9183 
	#CAN_F1R2_FB11_Pos
 (11U)

	)

9184 
	#CAN_F1R2_FB11_Msk
 (0x1UL << 
CAN_F1R2_FB11_Pos
√ã

	)

9185 
	#CAN_F1R2_FB11
 
CAN_F1R2_FB11_Msk


	)

9186 
	#CAN_F1R2_FB12_Pos
 (12U)

	)

9187 
	#CAN_F1R2_FB12_Msk
 (0x1UL << 
CAN_F1R2_FB12_Pos
√ã

	)

9188 
	#CAN_F1R2_FB12
 
CAN_F1R2_FB12_Msk


	)

9189 
	#CAN_F1R2_FB13_Pos
 (13U)

	)

9190 
	#CAN_F1R2_FB13_Msk
 (0x1UL << 
CAN_F1R2_FB13_Pos
√ã

	)

9191 
	#CAN_F1R2_FB13
 
CAN_F1R2_FB13_Msk


	)

9192 
	#CAN_F1R2_FB14_Pos
 (14U)

	)

9193 
	#CAN_F1R2_FB14_Msk
 (0x1UL << 
CAN_F1R2_FB14_Pos
√ã

	)

9194 
	#CAN_F1R2_FB14
 
CAN_F1R2_FB14_Msk


	)

9195 
	#CAN_F1R2_FB15_Pos
 (15U)

	)

9196 
	#CAN_F1R2_FB15_Msk
 (0x1UL << 
CAN_F1R2_FB15_Pos
√ã

	)

9197 
	#CAN_F1R2_FB15
 
CAN_F1R2_FB15_Msk


	)

9198 
	#CAN_F1R2_FB16_Pos
 (16U)

	)

9199 
	#CAN_F1R2_FB16_Msk
 (0x1UL << 
CAN_F1R2_FB16_Pos
√ã

	)

9200 
	#CAN_F1R2_FB16
 
CAN_F1R2_FB16_Msk


	)

9201 
	#CAN_F1R2_FB17_Pos
 (17U)

	)

9202 
	#CAN_F1R2_FB17_Msk
 (0x1UL << 
CAN_F1R2_FB17_Pos
√ã

	)

9203 
	#CAN_F1R2_FB17
 
CAN_F1R2_FB17_Msk


	)

9204 
	#CAN_F1R2_FB18_Pos
 (18U)

	)

9205 
	#CAN_F1R2_FB18_Msk
 (0x1UL << 
CAN_F1R2_FB18_Pos
√ã

	)

9206 
	#CAN_F1R2_FB18
 
CAN_F1R2_FB18_Msk


	)

9207 
	#CAN_F1R2_FB19_Pos
 (19U)

	)

9208 
	#CAN_F1R2_FB19_Msk
 (0x1UL << 
CAN_F1R2_FB19_Pos
√ã

	)

9209 
	#CAN_F1R2_FB19
 
CAN_F1R2_FB19_Msk


	)

9210 
	#CAN_F1R2_FB20_Pos
 (20U)

	)

9211 
	#CAN_F1R2_FB20_Msk
 (0x1UL << 
CAN_F1R2_FB20_Pos
√ã

	)

9212 
	#CAN_F1R2_FB20
 
CAN_F1R2_FB20_Msk


	)

9213 
	#CAN_F1R2_FB21_Pos
 (21U)

	)

9214 
	#CAN_F1R2_FB21_Msk
 (0x1UL << 
CAN_F1R2_FB21_Pos
√ã

	)

9215 
	#CAN_F1R2_FB21
 
CAN_F1R2_FB21_Msk


	)

9216 
	#CAN_F1R2_FB22_Pos
 (22U)

	)

9217 
	#CAN_F1R2_FB22_Msk
 (0x1UL << 
CAN_F1R2_FB22_Pos
√ã

	)

9218 
	#CAN_F1R2_FB22
 
CAN_F1R2_FB22_Msk


	)

9219 
	#CAN_F1R2_FB23_Pos
 (23U)

	)

9220 
	#CAN_F1R2_FB23_Msk
 (0x1UL << 
CAN_F1R2_FB23_Pos
√ã

	)

9221 
	#CAN_F1R2_FB23
 
CAN_F1R2_FB23_Msk


	)

9222 
	#CAN_F1R2_FB24_Pos
 (24U)

	)

9223 
	#CAN_F1R2_FB24_Msk
 (0x1UL << 
CAN_F1R2_FB24_Pos
√ã

	)

9224 
	#CAN_F1R2_FB24
 
CAN_F1R2_FB24_Msk


	)

9225 
	#CAN_F1R2_FB25_Pos
 (25U)

	)

9226 
	#CAN_F1R2_FB25_Msk
 (0x1UL << 
CAN_F1R2_FB25_Pos
√ã

	)

9227 
	#CAN_F1R2_FB25
 
CAN_F1R2_FB25_Msk


	)

9228 
	#CAN_F1R2_FB26_Pos
 (26U)

	)

9229 
	#CAN_F1R2_FB26_Msk
 (0x1UL << 
CAN_F1R2_FB26_Pos
√ã

	)

9230 
	#CAN_F1R2_FB26
 
CAN_F1R2_FB26_Msk


	)

9231 
	#CAN_F1R2_FB27_Pos
 (27U)

	)

9232 
	#CAN_F1R2_FB27_Msk
 (0x1UL << 
CAN_F1R2_FB27_Pos
√ã

	)

9233 
	#CAN_F1R2_FB27
 
CAN_F1R2_FB27_Msk


	)

9234 
	#CAN_F1R2_FB28_Pos
 (28U)

	)

9235 
	#CAN_F1R2_FB28_Msk
 (0x1UL << 
CAN_F1R2_FB28_Pos
√ã

	)

9236 
	#CAN_F1R2_FB28
 
CAN_F1R2_FB28_Msk


	)

9237 
	#CAN_F1R2_FB29_Pos
 (29U)

	)

9238 
	#CAN_F1R2_FB29_Msk
 (0x1UL << 
CAN_F1R2_FB29_Pos
√ã

	)

9239 
	#CAN_F1R2_FB29
 
CAN_F1R2_FB29_Msk


	)

9240 
	#CAN_F1R2_FB30_Pos
 (30U)

	)

9241 
	#CAN_F1R2_FB30_Msk
 (0x1UL << 
CAN_F1R2_FB30_Pos
√ã

	)

9242 
	#CAN_F1R2_FB30
 
CAN_F1R2_FB30_Msk


	)

9243 
	#CAN_F1R2_FB31_Pos
 (31U)

	)

9244 
	#CAN_F1R2_FB31_Msk
 (0x1UL << 
CAN_F1R2_FB31_Pos
√ã

	)

9245 
	#CAN_F1R2_FB31
 
CAN_F1R2_FB31_Msk


	)

9248 
	#CAN_F2R2_FB0_Pos
 (0U)

	)

9249 
	#CAN_F2R2_FB0_Msk
 (0x1UL << 
CAN_F2R2_FB0_Pos
√ã

	)

9250 
	#CAN_F2R2_FB0
 
CAN_F2R2_FB0_Msk


	)

9251 
	#CAN_F2R2_FB1_Pos
 (1U)

	)

9252 
	#CAN_F2R2_FB1_Msk
 (0x1UL << 
CAN_F2R2_FB1_Pos
√ã

	)

9253 
	#CAN_F2R2_FB1
 
CAN_F2R2_FB1_Msk


	)

9254 
	#CAN_F2R2_FB2_Pos
 (2U)

	)

9255 
	#CAN_F2R2_FB2_Msk
 (0x1UL << 
CAN_F2R2_FB2_Pos
√ã

	)

9256 
	#CAN_F2R2_FB2
 
CAN_F2R2_FB2_Msk


	)

9257 
	#CAN_F2R2_FB3_Pos
 (3U)

	)

9258 
	#CAN_F2R2_FB3_Msk
 (0x1UL << 
CAN_F2R2_FB3_Pos
√ã

	)

9259 
	#CAN_F2R2_FB3
 
CAN_F2R2_FB3_Msk


	)

9260 
	#CAN_F2R2_FB4_Pos
 (4U)

	)

9261 
	#CAN_F2R2_FB4_Msk
 (0x1UL << 
CAN_F2R2_FB4_Pos
√ã

	)

9262 
	#CAN_F2R2_FB4
 
CAN_F2R2_FB4_Msk


	)

9263 
	#CAN_F2R2_FB5_Pos
 (5U)

	)

9264 
	#CAN_F2R2_FB5_Msk
 (0x1UL << 
CAN_F2R2_FB5_Pos
√ã

	)

9265 
	#CAN_F2R2_FB5
 
CAN_F2R2_FB5_Msk


	)

9266 
	#CAN_F2R2_FB6_Pos
 (6U)

	)

9267 
	#CAN_F2R2_FB6_Msk
 (0x1UL << 
CAN_F2R2_FB6_Pos
√ã

	)

9268 
	#CAN_F2R2_FB6
 
CAN_F2R2_FB6_Msk


	)

9269 
	#CAN_F2R2_FB7_Pos
 (7U)

	)

9270 
	#CAN_F2R2_FB7_Msk
 (0x1UL << 
CAN_F2R2_FB7_Pos
√ã

	)

9271 
	#CAN_F2R2_FB7
 
CAN_F2R2_FB7_Msk


	)

9272 
	#CAN_F2R2_FB8_Pos
 (8U)

	)

9273 
	#CAN_F2R2_FB8_Msk
 (0x1UL << 
CAN_F2R2_FB8_Pos
√ã

	)

9274 
	#CAN_F2R2_FB8
 
CAN_F2R2_FB8_Msk


	)

9275 
	#CAN_F2R2_FB9_Pos
 (9U)

	)

9276 
	#CAN_F2R2_FB9_Msk
 (0x1UL << 
CAN_F2R2_FB9_Pos
√ã

	)

9277 
	#CAN_F2R2_FB9
 
CAN_F2R2_FB9_Msk


	)

9278 
	#CAN_F2R2_FB10_Pos
 (10U)

	)

9279 
	#CAN_F2R2_FB10_Msk
 (0x1UL << 
CAN_F2R2_FB10_Pos
√ã

	)

9280 
	#CAN_F2R2_FB10
 
CAN_F2R2_FB10_Msk


	)

9281 
	#CAN_F2R2_FB11_Pos
 (11U)

	)

9282 
	#CAN_F2R2_FB11_Msk
 (0x1UL << 
CAN_F2R2_FB11_Pos
√ã

	)

9283 
	#CAN_F2R2_FB11
 
CAN_F2R2_FB11_Msk


	)

9284 
	#CAN_F2R2_FB12_Pos
 (12U)

	)

9285 
	#CAN_F2R2_FB12_Msk
 (0x1UL << 
CAN_F2R2_FB12_Pos
√ã

	)

9286 
	#CAN_F2R2_FB12
 
CAN_F2R2_FB12_Msk


	)

9287 
	#CAN_F2R2_FB13_Pos
 (13U)

	)

9288 
	#CAN_F2R2_FB13_Msk
 (0x1UL << 
CAN_F2R2_FB13_Pos
√ã

	)

9289 
	#CAN_F2R2_FB13
 
CAN_F2R2_FB13_Msk


	)

9290 
	#CAN_F2R2_FB14_Pos
 (14U)

	)

9291 
	#CAN_F2R2_FB14_Msk
 (0x1UL << 
CAN_F2R2_FB14_Pos
√ã

	)

9292 
	#CAN_F2R2_FB14
 
CAN_F2R2_FB14_Msk


	)

9293 
	#CAN_F2R2_FB15_Pos
 (15U)

	)

9294 
	#CAN_F2R2_FB15_Msk
 (0x1UL << 
CAN_F2R2_FB15_Pos
√ã

	)

9295 
	#CAN_F2R2_FB15
 
CAN_F2R2_FB15_Msk


	)

9296 
	#CAN_F2R2_FB16_Pos
 (16U)

	)

9297 
	#CAN_F2R2_FB16_Msk
 (0x1UL << 
CAN_F2R2_FB16_Pos
√ã

	)

9298 
	#CAN_F2R2_FB16
 
CAN_F2R2_FB16_Msk


	)

9299 
	#CAN_F2R2_FB17_Pos
 (17U)

	)

9300 
	#CAN_F2R2_FB17_Msk
 (0x1UL << 
CAN_F2R2_FB17_Pos
√ã

	)

9301 
	#CAN_F2R2_FB17
 
CAN_F2R2_FB17_Msk


	)

9302 
	#CAN_F2R2_FB18_Pos
 (18U)

	)

9303 
	#CAN_F2R2_FB18_Msk
 (0x1UL << 
CAN_F2R2_FB18_Pos
√ã

	)

9304 
	#CAN_F2R2_FB18
 
CAN_F2R2_FB18_Msk


	)

9305 
	#CAN_F2R2_FB19_Pos
 (19U)

	)

9306 
	#CAN_F2R2_FB19_Msk
 (0x1UL << 
CAN_F2R2_FB19_Pos
√ã

	)

9307 
	#CAN_F2R2_FB19
 
CAN_F2R2_FB19_Msk


	)

9308 
	#CAN_F2R2_FB20_Pos
 (20U)

	)

9309 
	#CAN_F2R2_FB20_Msk
 (0x1UL << 
CAN_F2R2_FB20_Pos
√ã

	)

9310 
	#CAN_F2R2_FB20
 
CAN_F2R2_FB20_Msk


	)

9311 
	#CAN_F2R2_FB21_Pos
 (21U)

	)

9312 
	#CAN_F2R2_FB21_Msk
 (0x1UL << 
CAN_F2R2_FB21_Pos
√ã

	)

9313 
	#CAN_F2R2_FB21
 
CAN_F2R2_FB21_Msk


	)

9314 
	#CAN_F2R2_FB22_Pos
 (22U)

	)

9315 
	#CAN_F2R2_FB22_Msk
 (0x1UL << 
CAN_F2R2_FB22_Pos
√ã

	)

9316 
	#CAN_F2R2_FB22
 
CAN_F2R2_FB22_Msk


	)

9317 
	#CAN_F2R2_FB23_Pos
 (23U)

	)

9318 
	#CAN_F2R2_FB23_Msk
 (0x1UL << 
CAN_F2R2_FB23_Pos
√ã

	)

9319 
	#CAN_F2R2_FB23
 
CAN_F2R2_FB23_Msk


	)

9320 
	#CAN_F2R2_FB24_Pos
 (24U)

	)

9321 
	#CAN_F2R2_FB24_Msk
 (0x1UL << 
CAN_F2R2_FB24_Pos
√ã

	)

9322 
	#CAN_F2R2_FB24
 
CAN_F2R2_FB24_Msk


	)

9323 
	#CAN_F2R2_FB25_Pos
 (25U)

	)

9324 
	#CAN_F2R2_FB25_Msk
 (0x1UL << 
CAN_F2R2_FB25_Pos
√ã

	)

9325 
	#CAN_F2R2_FB25
 
CAN_F2R2_FB25_Msk


	)

9326 
	#CAN_F2R2_FB26_Pos
 (26U)

	)

9327 
	#CAN_F2R2_FB26_Msk
 (0x1UL << 
CAN_F2R2_FB26_Pos
√ã

	)

9328 
	#CAN_F2R2_FB26
 
CAN_F2R2_FB26_Msk


	)

9329 
	#CAN_F2R2_FB27_Pos
 (27U)

	)

9330 
	#CAN_F2R2_FB27_Msk
 (0x1UL << 
CAN_F2R2_FB27_Pos
√ã

	)

9331 
	#CAN_F2R2_FB27
 
CAN_F2R2_FB27_Msk


	)

9332 
	#CAN_F2R2_FB28_Pos
 (28U)

	)

9333 
	#CAN_F2R2_FB28_Msk
 (0x1UL << 
CAN_F2R2_FB28_Pos
√ã

	)

9334 
	#CAN_F2R2_FB28
 
CAN_F2R2_FB28_Msk


	)

9335 
	#CAN_F2R2_FB29_Pos
 (29U)

	)

9336 
	#CAN_F2R2_FB29_Msk
 (0x1UL << 
CAN_F2R2_FB29_Pos
√ã

	)

9337 
	#CAN_F2R2_FB29
 
CAN_F2R2_FB29_Msk


	)

9338 
	#CAN_F2R2_FB30_Pos
 (30U)

	)

9339 
	#CAN_F2R2_FB30_Msk
 (0x1UL << 
CAN_F2R2_FB30_Pos
√ã

	)

9340 
	#CAN_F2R2_FB30
 
CAN_F2R2_FB30_Msk


	)

9341 
	#CAN_F2R2_FB31_Pos
 (31U)

	)

9342 
	#CAN_F2R2_FB31_Msk
 (0x1UL << 
CAN_F2R2_FB31_Pos
√ã

	)

9343 
	#CAN_F2R2_FB31
 
CAN_F2R2_FB31_Msk


	)

9346 
	#CAN_F3R2_FB0_Pos
 (0U)

	)

9347 
	#CAN_F3R2_FB0_Msk
 (0x1UL << 
CAN_F3R2_FB0_Pos
√ã

	)

9348 
	#CAN_F3R2_FB0
 
CAN_F3R2_FB0_Msk


	)

9349 
	#CAN_F3R2_FB1_Pos
 (1U)

	)

9350 
	#CAN_F3R2_FB1_Msk
 (0x1UL << 
CAN_F3R2_FB1_Pos
√ã

	)

9351 
	#CAN_F3R2_FB1
 
CAN_F3R2_FB1_Msk


	)

9352 
	#CAN_F3R2_FB2_Pos
 (2U)

	)

9353 
	#CAN_F3R2_FB2_Msk
 (0x1UL << 
CAN_F3R2_FB2_Pos
√ã

	)

9354 
	#CAN_F3R2_FB2
 
CAN_F3R2_FB2_Msk


	)

9355 
	#CAN_F3R2_FB3_Pos
 (3U)

	)

9356 
	#CAN_F3R2_FB3_Msk
 (0x1UL << 
CAN_F3R2_FB3_Pos
√ã

	)

9357 
	#CAN_F3R2_FB3
 
CAN_F3R2_FB3_Msk


	)

9358 
	#CAN_F3R2_FB4_Pos
 (4U)

	)

9359 
	#CAN_F3R2_FB4_Msk
 (0x1UL << 
CAN_F3R2_FB4_Pos
√ã

	)

9360 
	#CAN_F3R2_FB4
 
CAN_F3R2_FB4_Msk


	)

9361 
	#CAN_F3R2_FB5_Pos
 (5U)

	)

9362 
	#CAN_F3R2_FB5_Msk
 (0x1UL << 
CAN_F3R2_FB5_Pos
√ã

	)

9363 
	#CAN_F3R2_FB5
 
CAN_F3R2_FB5_Msk


	)

9364 
	#CAN_F3R2_FB6_Pos
 (6U)

	)

9365 
	#CAN_F3R2_FB6_Msk
 (0x1UL << 
CAN_F3R2_FB6_Pos
√ã

	)

9366 
	#CAN_F3R2_FB6
 
CAN_F3R2_FB6_Msk


	)

9367 
	#CAN_F3R2_FB7_Pos
 (7U)

	)

9368 
	#CAN_F3R2_FB7_Msk
 (0x1UL << 
CAN_F3R2_FB7_Pos
√ã

	)

9369 
	#CAN_F3R2_FB7
 
CAN_F3R2_FB7_Msk


	)

9370 
	#CAN_F3R2_FB8_Pos
 (8U)

	)

9371 
	#CAN_F3R2_FB8_Msk
 (0x1UL << 
CAN_F3R2_FB8_Pos
√ã

	)

9372 
	#CAN_F3R2_FB8
 
CAN_F3R2_FB8_Msk


	)

9373 
	#CAN_F3R2_FB9_Pos
 (9U)

	)

9374 
	#CAN_F3R2_FB9_Msk
 (0x1UL << 
CAN_F3R2_FB9_Pos
√ã

	)

9375 
	#CAN_F3R2_FB9
 
CAN_F3R2_FB9_Msk


	)

9376 
	#CAN_F3R2_FB10_Pos
 (10U)

	)

9377 
	#CAN_F3R2_FB10_Msk
 (0x1UL << 
CAN_F3R2_FB10_Pos
√ã

	)

9378 
	#CAN_F3R2_FB10
 
CAN_F3R2_FB10_Msk


	)

9379 
	#CAN_F3R2_FB11_Pos
 (11U)

	)

9380 
	#CAN_F3R2_FB11_Msk
 (0x1UL << 
CAN_F3R2_FB11_Pos
√ã

	)

9381 
	#CAN_F3R2_FB11
 
CAN_F3R2_FB11_Msk


	)

9382 
	#CAN_F3R2_FB12_Pos
 (12U)

	)

9383 
	#CAN_F3R2_FB12_Msk
 (0x1UL << 
CAN_F3R2_FB12_Pos
√ã

	)

9384 
	#CAN_F3R2_FB12
 
CAN_F3R2_FB12_Msk


	)

9385 
	#CAN_F3R2_FB13_Pos
 (13U)

	)

9386 
	#CAN_F3R2_FB13_Msk
 (0x1UL << 
CAN_F3R2_FB13_Pos
√ã

	)

9387 
	#CAN_F3R2_FB13
 
CAN_F3R2_FB13_Msk


	)

9388 
	#CAN_F3R2_FB14_Pos
 (14U)

	)

9389 
	#CAN_F3R2_FB14_Msk
 (0x1UL << 
CAN_F3R2_FB14_Pos
√ã

	)

9390 
	#CAN_F3R2_FB14
 
CAN_F3R2_FB14_Msk


	)

9391 
	#CAN_F3R2_FB15_Pos
 (15U)

	)

9392 
	#CAN_F3R2_FB15_Msk
 (0x1UL << 
CAN_F3R2_FB15_Pos
√ã

	)

9393 
	#CAN_F3R2_FB15
 
CAN_F3R2_FB15_Msk


	)

9394 
	#CAN_F3R2_FB16_Pos
 (16U)

	)

9395 
	#CAN_F3R2_FB16_Msk
 (0x1UL << 
CAN_F3R2_FB16_Pos
√ã

	)

9396 
	#CAN_F3R2_FB16
 
CAN_F3R2_FB16_Msk


	)

9397 
	#CAN_F3R2_FB17_Pos
 (17U)

	)

9398 
	#CAN_F3R2_FB17_Msk
 (0x1UL << 
CAN_F3R2_FB17_Pos
√ã

	)

9399 
	#CAN_F3R2_FB17
 
CAN_F3R2_FB17_Msk


	)

9400 
	#CAN_F3R2_FB18_Pos
 (18U)

	)

9401 
	#CAN_F3R2_FB18_Msk
 (0x1UL << 
CAN_F3R2_FB18_Pos
√ã

	)

9402 
	#CAN_F3R2_FB18
 
CAN_F3R2_FB18_Msk


	)

9403 
	#CAN_F3R2_FB19_Pos
 (19U)

	)

9404 
	#CAN_F3R2_FB19_Msk
 (0x1UL << 
CAN_F3R2_FB19_Pos
√ã

	)

9405 
	#CAN_F3R2_FB19
 
CAN_F3R2_FB19_Msk


	)

9406 
	#CAN_F3R2_FB20_Pos
 (20U)

	)

9407 
	#CAN_F3R2_FB20_Msk
 (0x1UL << 
CAN_F3R2_FB20_Pos
√ã

	)

9408 
	#CAN_F3R2_FB20
 
CAN_F3R2_FB20_Msk


	)

9409 
	#CAN_F3R2_FB21_Pos
 (21U)

	)

9410 
	#CAN_F3R2_FB21_Msk
 (0x1UL << 
CAN_F3R2_FB21_Pos
√ã

	)

9411 
	#CAN_F3R2_FB21
 
CAN_F3R2_FB21_Msk


	)

9412 
	#CAN_F3R2_FB22_Pos
 (22U)

	)

9413 
	#CAN_F3R2_FB22_Msk
 (0x1UL << 
CAN_F3R2_FB22_Pos
√ã

	)

9414 
	#CAN_F3R2_FB22
 
CAN_F3R2_FB22_Msk


	)

9415 
	#CAN_F3R2_FB23_Pos
 (23U)

	)

9416 
	#CAN_F3R2_FB23_Msk
 (0x1UL << 
CAN_F3R2_FB23_Pos
√ã

	)

9417 
	#CAN_F3R2_FB23
 
CAN_F3R2_FB23_Msk


	)

9418 
	#CAN_F3R2_FB24_Pos
 (24U)

	)

9419 
	#CAN_F3R2_FB24_Msk
 (0x1UL << 
CAN_F3R2_FB24_Pos
√ã

	)

9420 
	#CAN_F3R2_FB24
 
CAN_F3R2_FB24_Msk


	)

9421 
	#CAN_F3R2_FB25_Pos
 (25U)

	)

9422 
	#CAN_F3R2_FB25_Msk
 (0x1UL << 
CAN_F3R2_FB25_Pos
√ã

	)

9423 
	#CAN_F3R2_FB25
 
CAN_F3R2_FB25_Msk


	)

9424 
	#CAN_F3R2_FB26_Pos
 (26U)

	)

9425 
	#CAN_F3R2_FB26_Msk
 (0x1UL << 
CAN_F3R2_FB26_Pos
√ã

	)

9426 
	#CAN_F3R2_FB26
 
CAN_F3R2_FB26_Msk


	)

9427 
	#CAN_F3R2_FB27_Pos
 (27U)

	)

9428 
	#CAN_F3R2_FB27_Msk
 (0x1UL << 
CAN_F3R2_FB27_Pos
√ã

	)

9429 
	#CAN_F3R2_FB27
 
CAN_F3R2_FB27_Msk


	)

9430 
	#CAN_F3R2_FB28_Pos
 (28U)

	)

9431 
	#CAN_F3R2_FB28_Msk
 (0x1UL << 
CAN_F3R2_FB28_Pos
√ã

	)

9432 
	#CAN_F3R2_FB28
 
CAN_F3R2_FB28_Msk


	)

9433 
	#CAN_F3R2_FB29_Pos
 (29U)

	)

9434 
	#CAN_F3R2_FB29_Msk
 (0x1UL << 
CAN_F3R2_FB29_Pos
√ã

	)

9435 
	#CAN_F3R2_FB29
 
CAN_F3R2_FB29_Msk


	)

9436 
	#CAN_F3R2_FB30_Pos
 (30U)

	)

9437 
	#CAN_F3R2_FB30_Msk
 (0x1UL << 
CAN_F3R2_FB30_Pos
√ã

	)

9438 
	#CAN_F3R2_FB30
 
CAN_F3R2_FB30_Msk


	)

9439 
	#CAN_F3R2_FB31_Pos
 (31U)

	)

9440 
	#CAN_F3R2_FB31_Msk
 (0x1UL << 
CAN_F3R2_FB31_Pos
√ã

	)

9441 
	#CAN_F3R2_FB31
 
CAN_F3R2_FB31_Msk


	)

9444 
	#CAN_F4R2_FB0_Pos
 (0U)

	)

9445 
	#CAN_F4R2_FB0_Msk
 (0x1UL << 
CAN_F4R2_FB0_Pos
√ã

	)

9446 
	#CAN_F4R2_FB0
 
CAN_F4R2_FB0_Msk


	)

9447 
	#CAN_F4R2_FB1_Pos
 (1U)

	)

9448 
	#CAN_F4R2_FB1_Msk
 (0x1UL << 
CAN_F4R2_FB1_Pos
√ã

	)

9449 
	#CAN_F4R2_FB1
 
CAN_F4R2_FB1_Msk


	)

9450 
	#CAN_F4R2_FB2_Pos
 (2U)

	)

9451 
	#CAN_F4R2_FB2_Msk
 (0x1UL << 
CAN_F4R2_FB2_Pos
√ã

	)

9452 
	#CAN_F4R2_FB2
 
CAN_F4R2_FB2_Msk


	)

9453 
	#CAN_F4R2_FB3_Pos
 (3U)

	)

9454 
	#CAN_F4R2_FB3_Msk
 (0x1UL << 
CAN_F4R2_FB3_Pos
√ã

	)

9455 
	#CAN_F4R2_FB3
 
CAN_F4R2_FB3_Msk


	)

9456 
	#CAN_F4R2_FB4_Pos
 (4U)

	)

9457 
	#CAN_F4R2_FB4_Msk
 (0x1UL << 
CAN_F4R2_FB4_Pos
√ã

	)

9458 
	#CAN_F4R2_FB4
 
CAN_F4R2_FB4_Msk


	)

9459 
	#CAN_F4R2_FB5_Pos
 (5U)

	)

9460 
	#CAN_F4R2_FB5_Msk
 (0x1UL << 
CAN_F4R2_FB5_Pos
√ã

	)

9461 
	#CAN_F4R2_FB5
 
CAN_F4R2_FB5_Msk


	)

9462 
	#CAN_F4R2_FB6_Pos
 (6U)

	)

9463 
	#CAN_F4R2_FB6_Msk
 (0x1UL << 
CAN_F4R2_FB6_Pos
√ã

	)

9464 
	#CAN_F4R2_FB6
 
CAN_F4R2_FB6_Msk


	)

9465 
	#CAN_F4R2_FB7_Pos
 (7U)

	)

9466 
	#CAN_F4R2_FB7_Msk
 (0x1UL << 
CAN_F4R2_FB7_Pos
√ã

	)

9467 
	#CAN_F4R2_FB7
 
CAN_F4R2_FB7_Msk


	)

9468 
	#CAN_F4R2_FB8_Pos
 (8U)

	)

9469 
	#CAN_F4R2_FB8_Msk
 (0x1UL << 
CAN_F4R2_FB8_Pos
√ã

	)

9470 
	#CAN_F4R2_FB8
 
CAN_F4R2_FB8_Msk


	)

9471 
	#CAN_F4R2_FB9_Pos
 (9U)

	)

9472 
	#CAN_F4R2_FB9_Msk
 (0x1UL << 
CAN_F4R2_FB9_Pos
√ã

	)

9473 
	#CAN_F4R2_FB9
 
CAN_F4R2_FB9_Msk


	)

9474 
	#CAN_F4R2_FB10_Pos
 (10U)

	)

9475 
	#CAN_F4R2_FB10_Msk
 (0x1UL << 
CAN_F4R2_FB10_Pos
√ã

	)

9476 
	#CAN_F4R2_FB10
 
CAN_F4R2_FB10_Msk


	)

9477 
	#CAN_F4R2_FB11_Pos
 (11U)

	)

9478 
	#CAN_F4R2_FB11_Msk
 (0x1UL << 
CAN_F4R2_FB11_Pos
√ã

	)

9479 
	#CAN_F4R2_FB11
 
CAN_F4R2_FB11_Msk


	)

9480 
	#CAN_F4R2_FB12_Pos
 (12U)

	)

9481 
	#CAN_F4R2_FB12_Msk
 (0x1UL << 
CAN_F4R2_FB12_Pos
√ã

	)

9482 
	#CAN_F4R2_FB12
 
CAN_F4R2_FB12_Msk


	)

9483 
	#CAN_F4R2_FB13_Pos
 (13U)

	)

9484 
	#CAN_F4R2_FB13_Msk
 (0x1UL << 
CAN_F4R2_FB13_Pos
√ã

	)

9485 
	#CAN_F4R2_FB13
 
CAN_F4R2_FB13_Msk


	)

9486 
	#CAN_F4R2_FB14_Pos
 (14U)

	)

9487 
	#CAN_F4R2_FB14_Msk
 (0x1UL << 
CAN_F4R2_FB14_Pos
√ã

	)

9488 
	#CAN_F4R2_FB14
 
CAN_F4R2_FB14_Msk


	)

9489 
	#CAN_F4R2_FB15_Pos
 (15U)

	)

9490 
	#CAN_F4R2_FB15_Msk
 (0x1UL << 
CAN_F4R2_FB15_Pos
√ã

	)

9491 
	#CAN_F4R2_FB15
 
CAN_F4R2_FB15_Msk


	)

9492 
	#CAN_F4R2_FB16_Pos
 (16U)

	)

9493 
	#CAN_F4R2_FB16_Msk
 (0x1UL << 
CAN_F4R2_FB16_Pos
√ã

	)

9494 
	#CAN_F4R2_FB16
 
CAN_F4R2_FB16_Msk


	)

9495 
	#CAN_F4R2_FB17_Pos
 (17U)

	)

9496 
	#CAN_F4R2_FB17_Msk
 (0x1UL << 
CAN_F4R2_FB17_Pos
√ã

	)

9497 
	#CAN_F4R2_FB17
 
CAN_F4R2_FB17_Msk


	)

9498 
	#CAN_F4R2_FB18_Pos
 (18U)

	)

9499 
	#CAN_F4R2_FB18_Msk
 (0x1UL << 
CAN_F4R2_FB18_Pos
√ã

	)

9500 
	#CAN_F4R2_FB18
 
CAN_F4R2_FB18_Msk


	)

9501 
	#CAN_F4R2_FB19_Pos
 (19U)

	)

9502 
	#CAN_F4R2_FB19_Msk
 (0x1UL << 
CAN_F4R2_FB19_Pos
√ã

	)

9503 
	#CAN_F4R2_FB19
 
CAN_F4R2_FB19_Msk


	)

9504 
	#CAN_F4R2_FB20_Pos
 (20U)

	)

9505 
	#CAN_F4R2_FB20_Msk
 (0x1UL << 
CAN_F4R2_FB20_Pos
√ã

	)

9506 
	#CAN_F4R2_FB20
 
CAN_F4R2_FB20_Msk


	)

9507 
	#CAN_F4R2_FB21_Pos
 (21U)

	)

9508 
	#CAN_F4R2_FB21_Msk
 (0x1UL << 
CAN_F4R2_FB21_Pos
√ã

	)

9509 
	#CAN_F4R2_FB21
 
CAN_F4R2_FB21_Msk


	)

9510 
	#CAN_F4R2_FB22_Pos
 (22U)

	)

9511 
	#CAN_F4R2_FB22_Msk
 (0x1UL << 
CAN_F4R2_FB22_Pos
√ã

	)

9512 
	#CAN_F4R2_FB22
 
CAN_F4R2_FB22_Msk


	)

9513 
	#CAN_F4R2_FB23_Pos
 (23U)

	)

9514 
	#CAN_F4R2_FB23_Msk
 (0x1UL << 
CAN_F4R2_FB23_Pos
√ã

	)

9515 
	#CAN_F4R2_FB23
 
CAN_F4R2_FB23_Msk


	)

9516 
	#CAN_F4R2_FB24_Pos
 (24U)

	)

9517 
	#CAN_F4R2_FB24_Msk
 (0x1UL << 
CAN_F4R2_FB24_Pos
√ã

	)

9518 
	#CAN_F4R2_FB24
 
CAN_F4R2_FB24_Msk


	)

9519 
	#CAN_F4R2_FB25_Pos
 (25U)

	)

9520 
	#CAN_F4R2_FB25_Msk
 (0x1UL << 
CAN_F4R2_FB25_Pos
√ã

	)

9521 
	#CAN_F4R2_FB25
 
CAN_F4R2_FB25_Msk


	)

9522 
	#CAN_F4R2_FB26_Pos
 (26U)

	)

9523 
	#CAN_F4R2_FB26_Msk
 (0x1UL << 
CAN_F4R2_FB26_Pos
√ã

	)

9524 
	#CAN_F4R2_FB26
 
CAN_F4R2_FB26_Msk


	)

9525 
	#CAN_F4R2_FB27_Pos
 (27U)

	)

9526 
	#CAN_F4R2_FB27_Msk
 (0x1UL << 
CAN_F4R2_FB27_Pos
√ã

	)

9527 
	#CAN_F4R2_FB27
 
CAN_F4R2_FB27_Msk


	)

9528 
	#CAN_F4R2_FB28_Pos
 (28U)

	)

9529 
	#CAN_F4R2_FB28_Msk
 (0x1UL << 
CAN_F4R2_FB28_Pos
√ã

	)

9530 
	#CAN_F4R2_FB28
 
CAN_F4R2_FB28_Msk


	)

9531 
	#CAN_F4R2_FB29_Pos
 (29U)

	)

9532 
	#CAN_F4R2_FB29_Msk
 (0x1UL << 
CAN_F4R2_FB29_Pos
√ã

	)

9533 
	#CAN_F4R2_FB29
 
CAN_F4R2_FB29_Msk


	)

9534 
	#CAN_F4R2_FB30_Pos
 (30U)

	)

9535 
	#CAN_F4R2_FB30_Msk
 (0x1UL << 
CAN_F4R2_FB30_Pos
√ã

	)

9536 
	#CAN_F4R2_FB30
 
CAN_F4R2_FB30_Msk


	)

9537 
	#CAN_F4R2_FB31_Pos
 (31U)

	)

9538 
	#CAN_F4R2_FB31_Msk
 (0x1UL << 
CAN_F4R2_FB31_Pos
√ã

	)

9539 
	#CAN_F4R2_FB31
 
CAN_F4R2_FB31_Msk


	)

9542 
	#CAN_F5R2_FB0_Pos
 (0U)

	)

9543 
	#CAN_F5R2_FB0_Msk
 (0x1UL << 
CAN_F5R2_FB0_Pos
√ã

	)

9544 
	#CAN_F5R2_FB0
 
CAN_F5R2_FB0_Msk


	)

9545 
	#CAN_F5R2_FB1_Pos
 (1U)

	)

9546 
	#CAN_F5R2_FB1_Msk
 (0x1UL << 
CAN_F5R2_FB1_Pos
√ã

	)

9547 
	#CAN_F5R2_FB1
 
CAN_F5R2_FB1_Msk


	)

9548 
	#CAN_F5R2_FB2_Pos
 (2U)

	)

9549 
	#CAN_F5R2_FB2_Msk
 (0x1UL << 
CAN_F5R2_FB2_Pos
√ã

	)

9550 
	#CAN_F5R2_FB2
 
CAN_F5R2_FB2_Msk


	)

9551 
	#CAN_F5R2_FB3_Pos
 (3U)

	)

9552 
	#CAN_F5R2_FB3_Msk
 (0x1UL << 
CAN_F5R2_FB3_Pos
√ã

	)

9553 
	#CAN_F5R2_FB3
 
CAN_F5R2_FB3_Msk


	)

9554 
	#CAN_F5R2_FB4_Pos
 (4U)

	)

9555 
	#CAN_F5R2_FB4_Msk
 (0x1UL << 
CAN_F5R2_FB4_Pos
√ã

	)

9556 
	#CAN_F5R2_FB4
 
CAN_F5R2_FB4_Msk


	)

9557 
	#CAN_F5R2_FB5_Pos
 (5U)

	)

9558 
	#CAN_F5R2_FB5_Msk
 (0x1UL << 
CAN_F5R2_FB5_Pos
√ã

	)

9559 
	#CAN_F5R2_FB5
 
CAN_F5R2_FB5_Msk


	)

9560 
	#CAN_F5R2_FB6_Pos
 (6U)

	)

9561 
	#CAN_F5R2_FB6_Msk
 (0x1UL << 
CAN_F5R2_FB6_Pos
√ã

	)

9562 
	#CAN_F5R2_FB6
 
CAN_F5R2_FB6_Msk


	)

9563 
	#CAN_F5R2_FB7_Pos
 (7U)

	)

9564 
	#CAN_F5R2_FB7_Msk
 (0x1UL << 
CAN_F5R2_FB7_Pos
√ã

	)

9565 
	#CAN_F5R2_FB7
 
CAN_F5R2_FB7_Msk


	)

9566 
	#CAN_F5R2_FB8_Pos
 (8U)

	)

9567 
	#CAN_F5R2_FB8_Msk
 (0x1UL << 
CAN_F5R2_FB8_Pos
√ã

	)

9568 
	#CAN_F5R2_FB8
 
CAN_F5R2_FB8_Msk


	)

9569 
	#CAN_F5R2_FB9_Pos
 (9U)

	)

9570 
	#CAN_F5R2_FB9_Msk
 (0x1UL << 
CAN_F5R2_FB9_Pos
√ã

	)

9571 
	#CAN_F5R2_FB9
 
CAN_F5R2_FB9_Msk


	)

9572 
	#CAN_F5R2_FB10_Pos
 (10U)

	)

9573 
	#CAN_F5R2_FB10_Msk
 (0x1UL << 
CAN_F5R2_FB10_Pos
√ã

	)

9574 
	#CAN_F5R2_FB10
 
CAN_F5R2_FB10_Msk


	)

9575 
	#CAN_F5R2_FB11_Pos
 (11U)

	)

9576 
	#CAN_F5R2_FB11_Msk
 (0x1UL << 
CAN_F5R2_FB11_Pos
√ã

	)

9577 
	#CAN_F5R2_FB11
 
CAN_F5R2_FB11_Msk


	)

9578 
	#CAN_F5R2_FB12_Pos
 (12U)

	)

9579 
	#CAN_F5R2_FB12_Msk
 (0x1UL << 
CAN_F5R2_FB12_Pos
√ã

	)

9580 
	#CAN_F5R2_FB12
 
CAN_F5R2_FB12_Msk


	)

9581 
	#CAN_F5R2_FB13_Pos
 (13U)

	)

9582 
	#CAN_F5R2_FB13_Msk
 (0x1UL << 
CAN_F5R2_FB13_Pos
√ã

	)

9583 
	#CAN_F5R2_FB13
 
CAN_F5R2_FB13_Msk


	)

9584 
	#CAN_F5R2_FB14_Pos
 (14U)

	)

9585 
	#CAN_F5R2_FB14_Msk
 (0x1UL << 
CAN_F5R2_FB14_Pos
√ã

	)

9586 
	#CAN_F5R2_FB14
 
CAN_F5R2_FB14_Msk


	)

9587 
	#CAN_F5R2_FB15_Pos
 (15U)

	)

9588 
	#CAN_F5R2_FB15_Msk
 (0x1UL << 
CAN_F5R2_FB15_Pos
√ã

	)

9589 
	#CAN_F5R2_FB15
 
CAN_F5R2_FB15_Msk


	)

9590 
	#CAN_F5R2_FB16_Pos
 (16U)

	)

9591 
	#CAN_F5R2_FB16_Msk
 (0x1UL << 
CAN_F5R2_FB16_Pos
√ã

	)

9592 
	#CAN_F5R2_FB16
 
CAN_F5R2_FB16_Msk


	)

9593 
	#CAN_F5R2_FB17_Pos
 (17U)

	)

9594 
	#CAN_F5R2_FB17_Msk
 (0x1UL << 
CAN_F5R2_FB17_Pos
√ã

	)

9595 
	#CAN_F5R2_FB17
 
CAN_F5R2_FB17_Msk


	)

9596 
	#CAN_F5R2_FB18_Pos
 (18U)

	)

9597 
	#CAN_F5R2_FB18_Msk
 (0x1UL << 
CAN_F5R2_FB18_Pos
√ã

	)

9598 
	#CAN_F5R2_FB18
 
CAN_F5R2_FB18_Msk


	)

9599 
	#CAN_F5R2_FB19_Pos
 (19U)

	)

9600 
	#CAN_F5R2_FB19_Msk
 (0x1UL << 
CAN_F5R2_FB19_Pos
√ã

	)

9601 
	#CAN_F5R2_FB19
 
CAN_F5R2_FB19_Msk


	)

9602 
	#CAN_F5R2_FB20_Pos
 (20U)

	)

9603 
	#CAN_F5R2_FB20_Msk
 (0x1UL << 
CAN_F5R2_FB20_Pos
√ã

	)

9604 
	#CAN_F5R2_FB20
 
CAN_F5R2_FB20_Msk


	)

9605 
	#CAN_F5R2_FB21_Pos
 (21U)

	)

9606 
	#CAN_F5R2_FB21_Msk
 (0x1UL << 
CAN_F5R2_FB21_Pos
√ã

	)

9607 
	#CAN_F5R2_FB21
 
CAN_F5R2_FB21_Msk


	)

9608 
	#CAN_F5R2_FB22_Pos
 (22U)

	)

9609 
	#CAN_F5R2_FB22_Msk
 (0x1UL << 
CAN_F5R2_FB22_Pos
√ã

	)

9610 
	#CAN_F5R2_FB22
 
CAN_F5R2_FB22_Msk


	)

9611 
	#CAN_F5R2_FB23_Pos
 (23U)

	)

9612 
	#CAN_F5R2_FB23_Msk
 (0x1UL << 
CAN_F5R2_FB23_Pos
√ã

	)

9613 
	#CAN_F5R2_FB23
 
CAN_F5R2_FB23_Msk


	)

9614 
	#CAN_F5R2_FB24_Pos
 (24U)

	)

9615 
	#CAN_F5R2_FB24_Msk
 (0x1UL << 
CAN_F5R2_FB24_Pos
√ã

	)

9616 
	#CAN_F5R2_FB24
 
CAN_F5R2_FB24_Msk


	)

9617 
	#CAN_F5R2_FB25_Pos
 (25U)

	)

9618 
	#CAN_F5R2_FB25_Msk
 (0x1UL << 
CAN_F5R2_FB25_Pos
√ã

	)

9619 
	#CAN_F5R2_FB25
 
CAN_F5R2_FB25_Msk


	)

9620 
	#CAN_F5R2_FB26_Pos
 (26U)

	)

9621 
	#CAN_F5R2_FB26_Msk
 (0x1UL << 
CAN_F5R2_FB26_Pos
√ã

	)

9622 
	#CAN_F5R2_FB26
 
CAN_F5R2_FB26_Msk


	)

9623 
	#CAN_F5R2_FB27_Pos
 (27U)

	)

9624 
	#CAN_F5R2_FB27_Msk
 (0x1UL << 
CAN_F5R2_FB27_Pos
√ã

	)

9625 
	#CAN_F5R2_FB27
 
CAN_F5R2_FB27_Msk


	)

9626 
	#CAN_F5R2_FB28_Pos
 (28U)

	)

9627 
	#CAN_F5R2_FB28_Msk
 (0x1UL << 
CAN_F5R2_FB28_Pos
√ã

	)

9628 
	#CAN_F5R2_FB28
 
CAN_F5R2_FB28_Msk


	)

9629 
	#CAN_F5R2_FB29_Pos
 (29U)

	)

9630 
	#CAN_F5R2_FB29_Msk
 (0x1UL << 
CAN_F5R2_FB29_Pos
√ã

	)

9631 
	#CAN_F5R2_FB29
 
CAN_F5R2_FB29_Msk


	)

9632 
	#CAN_F5R2_FB30_Pos
 (30U)

	)

9633 
	#CAN_F5R2_FB30_Msk
 (0x1UL << 
CAN_F5R2_FB30_Pos
√ã

	)

9634 
	#CAN_F5R2_FB30
 
CAN_F5R2_FB30_Msk


	)

9635 
	#CAN_F5R2_FB31_Pos
 (31U)

	)

9636 
	#CAN_F5R2_FB31_Msk
 (0x1UL << 
CAN_F5R2_FB31_Pos
√ã

	)

9637 
	#CAN_F5R2_FB31
 
CAN_F5R2_FB31_Msk


	)

9640 
	#CAN_F6R2_FB0_Pos
 (0U)

	)

9641 
	#CAN_F6R2_FB0_Msk
 (0x1UL << 
CAN_F6R2_FB0_Pos
√ã

	)

9642 
	#CAN_F6R2_FB0
 
CAN_F6R2_FB0_Msk


	)

9643 
	#CAN_F6R2_FB1_Pos
 (1U)

	)

9644 
	#CAN_F6R2_FB1_Msk
 (0x1UL << 
CAN_F6R2_FB1_Pos
√ã

	)

9645 
	#CAN_F6R2_FB1
 
CAN_F6R2_FB1_Msk


	)

9646 
	#CAN_F6R2_FB2_Pos
 (2U)

	)

9647 
	#CAN_F6R2_FB2_Msk
 (0x1UL << 
CAN_F6R2_FB2_Pos
√ã

	)

9648 
	#CAN_F6R2_FB2
 
CAN_F6R2_FB2_Msk


	)

9649 
	#CAN_F6R2_FB3_Pos
 (3U)

	)

9650 
	#CAN_F6R2_FB3_Msk
 (0x1UL << 
CAN_F6R2_FB3_Pos
√ã

	)

9651 
	#CAN_F6R2_FB3
 
CAN_F6R2_FB3_Msk


	)

9652 
	#CAN_F6R2_FB4_Pos
 (4U)

	)

9653 
	#CAN_F6R2_FB4_Msk
 (0x1UL << 
CAN_F6R2_FB4_Pos
√ã

	)

9654 
	#CAN_F6R2_FB4
 
CAN_F6R2_FB4_Msk


	)

9655 
	#CAN_F6R2_FB5_Pos
 (5U)

	)

9656 
	#CAN_F6R2_FB5_Msk
 (0x1UL << 
CAN_F6R2_FB5_Pos
√ã

	)

9657 
	#CAN_F6R2_FB5
 
CAN_F6R2_FB5_Msk


	)

9658 
	#CAN_F6R2_FB6_Pos
 (6U)

	)

9659 
	#CAN_F6R2_FB6_Msk
 (0x1UL << 
CAN_F6R2_FB6_Pos
√ã

	)

9660 
	#CAN_F6R2_FB6
 
CAN_F6R2_FB6_Msk


	)

9661 
	#CAN_F6R2_FB7_Pos
 (7U)

	)

9662 
	#CAN_F6R2_FB7_Msk
 (0x1UL << 
CAN_F6R2_FB7_Pos
√ã

	)

9663 
	#CAN_F6R2_FB7
 
CAN_F6R2_FB7_Msk


	)

9664 
	#CAN_F6R2_FB8_Pos
 (8U)

	)

9665 
	#CAN_F6R2_FB8_Msk
 (0x1UL << 
CAN_F6R2_FB8_Pos
√ã

	)

9666 
	#CAN_F6R2_FB8
 
CAN_F6R2_FB8_Msk


	)

9667 
	#CAN_F6R2_FB9_Pos
 (9U)

	)

9668 
	#CAN_F6R2_FB9_Msk
 (0x1UL << 
CAN_F6R2_FB9_Pos
√ã

	)

9669 
	#CAN_F6R2_FB9
 
CAN_F6R2_FB9_Msk


	)

9670 
	#CAN_F6R2_FB10_Pos
 (10U)

	)

9671 
	#CAN_F6R2_FB10_Msk
 (0x1UL << 
CAN_F6R2_FB10_Pos
√ã

	)

9672 
	#CAN_F6R2_FB10
 
CAN_F6R2_FB10_Msk


	)

9673 
	#CAN_F6R2_FB11_Pos
 (11U)

	)

9674 
	#CAN_F6R2_FB11_Msk
 (0x1UL << 
CAN_F6R2_FB11_Pos
√ã

	)

9675 
	#CAN_F6R2_FB11
 
CAN_F6R2_FB11_Msk


	)

9676 
	#CAN_F6R2_FB12_Pos
 (12U)

	)

9677 
	#CAN_F6R2_FB12_Msk
 (0x1UL << 
CAN_F6R2_FB12_Pos
√ã

	)

9678 
	#CAN_F6R2_FB12
 
CAN_F6R2_FB12_Msk


	)

9679 
	#CAN_F6R2_FB13_Pos
 (13U)

	)

9680 
	#CAN_F6R2_FB13_Msk
 (0x1UL << 
CAN_F6R2_FB13_Pos
√ã

	)

9681 
	#CAN_F6R2_FB13
 
CAN_F6R2_FB13_Msk


	)

9682 
	#CAN_F6R2_FB14_Pos
 (14U)

	)

9683 
	#CAN_F6R2_FB14_Msk
 (0x1UL << 
CAN_F6R2_FB14_Pos
√ã

	)

9684 
	#CAN_F6R2_FB14
 
CAN_F6R2_FB14_Msk


	)

9685 
	#CAN_F6R2_FB15_Pos
 (15U)

	)

9686 
	#CAN_F6R2_FB15_Msk
 (0x1UL << 
CAN_F6R2_FB15_Pos
√ã

	)

9687 
	#CAN_F6R2_FB15
 
CAN_F6R2_FB15_Msk


	)

9688 
	#CAN_F6R2_FB16_Pos
 (16U)

	)

9689 
	#CAN_F6R2_FB16_Msk
 (0x1UL << 
CAN_F6R2_FB16_Pos
√ã

	)

9690 
	#CAN_F6R2_FB16
 
CAN_F6R2_FB16_Msk


	)

9691 
	#CAN_F6R2_FB17_Pos
 (17U)

	)

9692 
	#CAN_F6R2_FB17_Msk
 (0x1UL << 
CAN_F6R2_FB17_Pos
√ã

	)

9693 
	#CAN_F6R2_FB17
 
CAN_F6R2_FB17_Msk


	)

9694 
	#CAN_F6R2_FB18_Pos
 (18U)

	)

9695 
	#CAN_F6R2_FB18_Msk
 (0x1UL << 
CAN_F6R2_FB18_Pos
√ã

	)

9696 
	#CAN_F6R2_FB18
 
CAN_F6R2_FB18_Msk


	)

9697 
	#CAN_F6R2_FB19_Pos
 (19U)

	)

9698 
	#CAN_F6R2_FB19_Msk
 (0x1UL << 
CAN_F6R2_FB19_Pos
√ã

	)

9699 
	#CAN_F6R2_FB19
 
CAN_F6R2_FB19_Msk


	)

9700 
	#CAN_F6R2_FB20_Pos
 (20U)

	)

9701 
	#CAN_F6R2_FB20_Msk
 (0x1UL << 
CAN_F6R2_FB20_Pos
√ã

	)

9702 
	#CAN_F6R2_FB20
 
CAN_F6R2_FB20_Msk


	)

9703 
	#CAN_F6R2_FB21_Pos
 (21U)

	)

9704 
	#CAN_F6R2_FB21_Msk
 (0x1UL << 
CAN_F6R2_FB21_Pos
√ã

	)

9705 
	#CAN_F6R2_FB21
 
CAN_F6R2_FB21_Msk


	)

9706 
	#CAN_F6R2_FB22_Pos
 (22U)

	)

9707 
	#CAN_F6R2_FB22_Msk
 (0x1UL << 
CAN_F6R2_FB22_Pos
√ã

	)

9708 
	#CAN_F6R2_FB22
 
CAN_F6R2_FB22_Msk


	)

9709 
	#CAN_F6R2_FB23_Pos
 (23U)

	)

9710 
	#CAN_F6R2_FB23_Msk
 (0x1UL << 
CAN_F6R2_FB23_Pos
√ã

	)

9711 
	#CAN_F6R2_FB23
 
CAN_F6R2_FB23_Msk


	)

9712 
	#CAN_F6R2_FB24_Pos
 (24U)

	)

9713 
	#CAN_F6R2_FB24_Msk
 (0x1UL << 
CAN_F6R2_FB24_Pos
√ã

	)

9714 
	#CAN_F6R2_FB24
 
CAN_F6R2_FB24_Msk


	)

9715 
	#CAN_F6R2_FB25_Pos
 (25U)

	)

9716 
	#CAN_F6R2_FB25_Msk
 (0x1UL << 
CAN_F6R2_FB25_Pos
√ã

	)

9717 
	#CAN_F6R2_FB25
 
CAN_F6R2_FB25_Msk


	)

9718 
	#CAN_F6R2_FB26_Pos
 (26U)

	)

9719 
	#CAN_F6R2_FB26_Msk
 (0x1UL << 
CAN_F6R2_FB26_Pos
√ã

	)

9720 
	#CAN_F6R2_FB26
 
CAN_F6R2_FB26_Msk


	)

9721 
	#CAN_F6R2_FB27_Pos
 (27U)

	)

9722 
	#CAN_F6R2_FB27_Msk
 (0x1UL << 
CAN_F6R2_FB27_Pos
√ã

	)

9723 
	#CAN_F6R2_FB27
 
CAN_F6R2_FB27_Msk


	)

9724 
	#CAN_F6R2_FB28_Pos
 (28U)

	)

9725 
	#CAN_F6R2_FB28_Msk
 (0x1UL << 
CAN_F6R2_FB28_Pos
√ã

	)

9726 
	#CAN_F6R2_FB28
 
CAN_F6R2_FB28_Msk


	)

9727 
	#CAN_F6R2_FB29_Pos
 (29U)

	)

9728 
	#CAN_F6R2_FB29_Msk
 (0x1UL << 
CAN_F6R2_FB29_Pos
√ã

	)

9729 
	#CAN_F6R2_FB29
 
CAN_F6R2_FB29_Msk


	)

9730 
	#CAN_F6R2_FB30_Pos
 (30U)

	)

9731 
	#CAN_F6R2_FB30_Msk
 (0x1UL << 
CAN_F6R2_FB30_Pos
√ã

	)

9732 
	#CAN_F6R2_FB30
 
CAN_F6R2_FB30_Msk


	)

9733 
	#CAN_F6R2_FB31_Pos
 (31U)

	)

9734 
	#CAN_F6R2_FB31_Msk
 (0x1UL << 
CAN_F6R2_FB31_Pos
√ã

	)

9735 
	#CAN_F6R2_FB31
 
CAN_F6R2_FB31_Msk


	)

9738 
	#CAN_F7R2_FB0_Pos
 (0U)

	)

9739 
	#CAN_F7R2_FB0_Msk
 (0x1UL << 
CAN_F7R2_FB0_Pos
√ã

	)

9740 
	#CAN_F7R2_FB0
 
CAN_F7R2_FB0_Msk


	)

9741 
	#CAN_F7R2_FB1_Pos
 (1U)

	)

9742 
	#CAN_F7R2_FB1_Msk
 (0x1UL << 
CAN_F7R2_FB1_Pos
√ã

	)

9743 
	#CAN_F7R2_FB1
 
CAN_F7R2_FB1_Msk


	)

9744 
	#CAN_F7R2_FB2_Pos
 (2U)

	)

9745 
	#CAN_F7R2_FB2_Msk
 (0x1UL << 
CAN_F7R2_FB2_Pos
√ã

	)

9746 
	#CAN_F7R2_FB2
 
CAN_F7R2_FB2_Msk


	)

9747 
	#CAN_F7R2_FB3_Pos
 (3U)

	)

9748 
	#CAN_F7R2_FB3_Msk
 (0x1UL << 
CAN_F7R2_FB3_Pos
√ã

	)

9749 
	#CAN_F7R2_FB3
 
CAN_F7R2_FB3_Msk


	)

9750 
	#CAN_F7R2_FB4_Pos
 (4U)

	)

9751 
	#CAN_F7R2_FB4_Msk
 (0x1UL << 
CAN_F7R2_FB4_Pos
√ã

	)

9752 
	#CAN_F7R2_FB4
 
CAN_F7R2_FB4_Msk


	)

9753 
	#CAN_F7R2_FB5_Pos
 (5U)

	)

9754 
	#CAN_F7R2_FB5_Msk
 (0x1UL << 
CAN_F7R2_FB5_Pos
√ã

	)

9755 
	#CAN_F7R2_FB5
 
CAN_F7R2_FB5_Msk


	)

9756 
	#CAN_F7R2_FB6_Pos
 (6U)

	)

9757 
	#CAN_F7R2_FB6_Msk
 (0x1UL << 
CAN_F7R2_FB6_Pos
√ã

	)

9758 
	#CAN_F7R2_FB6
 
CAN_F7R2_FB6_Msk


	)

9759 
	#CAN_F7R2_FB7_Pos
 (7U)

	)

9760 
	#CAN_F7R2_FB7_Msk
 (0x1UL << 
CAN_F7R2_FB7_Pos
√ã

	)

9761 
	#CAN_F7R2_FB7
 
CAN_F7R2_FB7_Msk


	)

9762 
	#CAN_F7R2_FB8_Pos
 (8U)

	)

9763 
	#CAN_F7R2_FB8_Msk
 (0x1UL << 
CAN_F7R2_FB8_Pos
√ã

	)

9764 
	#CAN_F7R2_FB8
 
CAN_F7R2_FB8_Msk


	)

9765 
	#CAN_F7R2_FB9_Pos
 (9U)

	)

9766 
	#CAN_F7R2_FB9_Msk
 (0x1UL << 
CAN_F7R2_FB9_Pos
√ã

	)

9767 
	#CAN_F7R2_FB9
 
CAN_F7R2_FB9_Msk


	)

9768 
	#CAN_F7R2_FB10_Pos
 (10U)

	)

9769 
	#CAN_F7R2_FB10_Msk
 (0x1UL << 
CAN_F7R2_FB10_Pos
√ã

	)

9770 
	#CAN_F7R2_FB10
 
CAN_F7R2_FB10_Msk


	)

9771 
	#CAN_F7R2_FB11_Pos
 (11U)

	)

9772 
	#CAN_F7R2_FB11_Msk
 (0x1UL << 
CAN_F7R2_FB11_Pos
√ã

	)

9773 
	#CAN_F7R2_FB11
 
CAN_F7R2_FB11_Msk


	)

9774 
	#CAN_F7R2_FB12_Pos
 (12U)

	)

9775 
	#CAN_F7R2_FB12_Msk
 (0x1UL << 
CAN_F7R2_FB12_Pos
√ã

	)

9776 
	#CAN_F7R2_FB12
 
CAN_F7R2_FB12_Msk


	)

9777 
	#CAN_F7R2_FB13_Pos
 (13U)

	)

9778 
	#CAN_F7R2_FB13_Msk
 (0x1UL << 
CAN_F7R2_FB13_Pos
√ã

	)

9779 
	#CAN_F7R2_FB13
 
CAN_F7R2_FB13_Msk


	)

9780 
	#CAN_F7R2_FB14_Pos
 (14U)

	)

9781 
	#CAN_F7R2_FB14_Msk
 (0x1UL << 
CAN_F7R2_FB14_Pos
√ã

	)

9782 
	#CAN_F7R2_FB14
 
CAN_F7R2_FB14_Msk


	)

9783 
	#CAN_F7R2_FB15_Pos
 (15U)

	)

9784 
	#CAN_F7R2_FB15_Msk
 (0x1UL << 
CAN_F7R2_FB15_Pos
√ã

	)

9785 
	#CAN_F7R2_FB15
 
CAN_F7R2_FB15_Msk


	)

9786 
	#CAN_F7R2_FB16_Pos
 (16U)

	)

9787 
	#CAN_F7R2_FB16_Msk
 (0x1UL << 
CAN_F7R2_FB16_Pos
√ã

	)

9788 
	#CAN_F7R2_FB16
 
CAN_F7R2_FB16_Msk


	)

9789 
	#CAN_F7R2_FB17_Pos
 (17U)

	)

9790 
	#CAN_F7R2_FB17_Msk
 (0x1UL << 
CAN_F7R2_FB17_Pos
√ã

	)

9791 
	#CAN_F7R2_FB17
 
CAN_F7R2_FB17_Msk


	)

9792 
	#CAN_F7R2_FB18_Pos
 (18U)

	)

9793 
	#CAN_F7R2_FB18_Msk
 (0x1UL << 
CAN_F7R2_FB18_Pos
√ã

	)

9794 
	#CAN_F7R2_FB18
 
CAN_F7R2_FB18_Msk


	)

9795 
	#CAN_F7R2_FB19_Pos
 (19U)

	)

9796 
	#CAN_F7R2_FB19_Msk
 (0x1UL << 
CAN_F7R2_FB19_Pos
√ã

	)

9797 
	#CAN_F7R2_FB19
 
CAN_F7R2_FB19_Msk


	)

9798 
	#CAN_F7R2_FB20_Pos
 (20U)

	)

9799 
	#CAN_F7R2_FB20_Msk
 (0x1UL << 
CAN_F7R2_FB20_Pos
√ã

	)

9800 
	#CAN_F7R2_FB20
 
CAN_F7R2_FB20_Msk


	)

9801 
	#CAN_F7R2_FB21_Pos
 (21U)

	)

9802 
	#CAN_F7R2_FB21_Msk
 (0x1UL << 
CAN_F7R2_FB21_Pos
√ã

	)

9803 
	#CAN_F7R2_FB21
 
CAN_F7R2_FB21_Msk


	)

9804 
	#CAN_F7R2_FB22_Pos
 (22U)

	)

9805 
	#CAN_F7R2_FB22_Msk
 (0x1UL << 
CAN_F7R2_FB22_Pos
√ã

	)

9806 
	#CAN_F7R2_FB22
 
CAN_F7R2_FB22_Msk


	)

9807 
	#CAN_F7R2_FB23_Pos
 (23U)

	)

9808 
	#CAN_F7R2_FB23_Msk
 (0x1UL << 
CAN_F7R2_FB23_Pos
√ã

	)

9809 
	#CAN_F7R2_FB23
 
CAN_F7R2_FB23_Msk


	)

9810 
	#CAN_F7R2_FB24_Pos
 (24U)

	)

9811 
	#CAN_F7R2_FB24_Msk
 (0x1UL << 
CAN_F7R2_FB24_Pos
√ã

	)

9812 
	#CAN_F7R2_FB24
 
CAN_F7R2_FB24_Msk


	)

9813 
	#CAN_F7R2_FB25_Pos
 (25U)

	)

9814 
	#CAN_F7R2_FB25_Msk
 (0x1UL << 
CAN_F7R2_FB25_Pos
√ã

	)

9815 
	#CAN_F7R2_FB25
 
CAN_F7R2_FB25_Msk


	)

9816 
	#CAN_F7R2_FB26_Pos
 (26U)

	)

9817 
	#CAN_F7R2_FB26_Msk
 (0x1UL << 
CAN_F7R2_FB26_Pos
√ã

	)

9818 
	#CAN_F7R2_FB26
 
CAN_F7R2_FB26_Msk


	)

9819 
	#CAN_F7R2_FB27_Pos
 (27U)

	)

9820 
	#CAN_F7R2_FB27_Msk
 (0x1UL << 
CAN_F7R2_FB27_Pos
√ã

	)

9821 
	#CAN_F7R2_FB27
 
CAN_F7R2_FB27_Msk


	)

9822 
	#CAN_F7R2_FB28_Pos
 (28U)

	)

9823 
	#CAN_F7R2_FB28_Msk
 (0x1UL << 
CAN_F7R2_FB28_Pos
√ã

	)

9824 
	#CAN_F7R2_FB28
 
CAN_F7R2_FB28_Msk


	)

9825 
	#CAN_F7R2_FB29_Pos
 (29U)

	)

9826 
	#CAN_F7R2_FB29_Msk
 (0x1UL << 
CAN_F7R2_FB29_Pos
√ã

	)

9827 
	#CAN_F7R2_FB29
 
CAN_F7R2_FB29_Msk


	)

9828 
	#CAN_F7R2_FB30_Pos
 (30U)

	)

9829 
	#CAN_F7R2_FB30_Msk
 (0x1UL << 
CAN_F7R2_FB30_Pos
√ã

	)

9830 
	#CAN_F7R2_FB30
 
CAN_F7R2_FB30_Msk


	)

9831 
	#CAN_F7R2_FB31_Pos
 (31U)

	)

9832 
	#CAN_F7R2_FB31_Msk
 (0x1UL << 
CAN_F7R2_FB31_Pos
√ã

	)

9833 
	#CAN_F7R2_FB31
 
CAN_F7R2_FB31_Msk


	)

9836 
	#CAN_F8R2_FB0_Pos
 (0U)

	)

9837 
	#CAN_F8R2_FB0_Msk
 (0x1UL << 
CAN_F8R2_FB0_Pos
√ã

	)

9838 
	#CAN_F8R2_FB0
 
CAN_F8R2_FB0_Msk


	)

9839 
	#CAN_F8R2_FB1_Pos
 (1U)

	)

9840 
	#CAN_F8R2_FB1_Msk
 (0x1UL << 
CAN_F8R2_FB1_Pos
√ã

	)

9841 
	#CAN_F8R2_FB1
 
CAN_F8R2_FB1_Msk


	)

9842 
	#CAN_F8R2_FB2_Pos
 (2U)

	)

9843 
	#CAN_F8R2_FB2_Msk
 (0x1UL << 
CAN_F8R2_FB2_Pos
√ã

	)

9844 
	#CAN_F8R2_FB2
 
CAN_F8R2_FB2_Msk


	)

9845 
	#CAN_F8R2_FB3_Pos
 (3U)

	)

9846 
	#CAN_F8R2_FB3_Msk
 (0x1UL << 
CAN_F8R2_FB3_Pos
√ã

	)

9847 
	#CAN_F8R2_FB3
 
CAN_F8R2_FB3_Msk


	)

9848 
	#CAN_F8R2_FB4_Pos
 (4U)

	)

9849 
	#CAN_F8R2_FB4_Msk
 (0x1UL << 
CAN_F8R2_FB4_Pos
√ã

	)

9850 
	#CAN_F8R2_FB4
 
CAN_F8R2_FB4_Msk


	)

9851 
	#CAN_F8R2_FB5_Pos
 (5U)

	)

9852 
	#CAN_F8R2_FB5_Msk
 (0x1UL << 
CAN_F8R2_FB5_Pos
√ã

	)

9853 
	#CAN_F8R2_FB5
 
CAN_F8R2_FB5_Msk


	)

9854 
	#CAN_F8R2_FB6_Pos
 (6U)

	)

9855 
	#CAN_F8R2_FB6_Msk
 (0x1UL << 
CAN_F8R2_FB6_Pos
√ã

	)

9856 
	#CAN_F8R2_FB6
 
CAN_F8R2_FB6_Msk


	)

9857 
	#CAN_F8R2_FB7_Pos
 (7U)

	)

9858 
	#CAN_F8R2_FB7_Msk
 (0x1UL << 
CAN_F8R2_FB7_Pos
√ã

	)

9859 
	#CAN_F8R2_FB7
 
CAN_F8R2_FB7_Msk


	)

9860 
	#CAN_F8R2_FB8_Pos
 (8U)

	)

9861 
	#CAN_F8R2_FB8_Msk
 (0x1UL << 
CAN_F8R2_FB8_Pos
√ã

	)

9862 
	#CAN_F8R2_FB8
 
CAN_F8R2_FB8_Msk


	)

9863 
	#CAN_F8R2_FB9_Pos
 (9U)

	)

9864 
	#CAN_F8R2_FB9_Msk
 (0x1UL << 
CAN_F8R2_FB9_Pos
√ã

	)

9865 
	#CAN_F8R2_FB9
 
CAN_F8R2_FB9_Msk


	)

9866 
	#CAN_F8R2_FB10_Pos
 (10U)

	)

9867 
	#CAN_F8R2_FB10_Msk
 (0x1UL << 
CAN_F8R2_FB10_Pos
√ã

	)

9868 
	#CAN_F8R2_FB10
 
CAN_F8R2_FB10_Msk


	)

9869 
	#CAN_F8R2_FB11_Pos
 (11U)

	)

9870 
	#CAN_F8R2_FB11_Msk
 (0x1UL << 
CAN_F8R2_FB11_Pos
√ã

	)

9871 
	#CAN_F8R2_FB11
 
CAN_F8R2_FB11_Msk


	)

9872 
	#CAN_F8R2_FB12_Pos
 (12U)

	)

9873 
	#CAN_F8R2_FB12_Msk
 (0x1UL << 
CAN_F8R2_FB12_Pos
√ã

	)

9874 
	#CAN_F8R2_FB12
 
CAN_F8R2_FB12_Msk


	)

9875 
	#CAN_F8R2_FB13_Pos
 (13U)

	)

9876 
	#CAN_F8R2_FB13_Msk
 (0x1UL << 
CAN_F8R2_FB13_Pos
√ã

	)

9877 
	#CAN_F8R2_FB13
 
CAN_F8R2_FB13_Msk


	)

9878 
	#CAN_F8R2_FB14_Pos
 (14U)

	)

9879 
	#CAN_F8R2_FB14_Msk
 (0x1UL << 
CAN_F8R2_FB14_Pos
√ã

	)

9880 
	#CAN_F8R2_FB14
 
CAN_F8R2_FB14_Msk


	)

9881 
	#CAN_F8R2_FB15_Pos
 (15U)

	)

9882 
	#CAN_F8R2_FB15_Msk
 (0x1UL << 
CAN_F8R2_FB15_Pos
√ã

	)

9883 
	#CAN_F8R2_FB15
 
CAN_F8R2_FB15_Msk


	)

9884 
	#CAN_F8R2_FB16_Pos
 (16U)

	)

9885 
	#CAN_F8R2_FB16_Msk
 (0x1UL << 
CAN_F8R2_FB16_Pos
√ã

	)

9886 
	#CAN_F8R2_FB16
 
CAN_F8R2_FB16_Msk


	)

9887 
	#CAN_F8R2_FB17_Pos
 (17U)

	)

9888 
	#CAN_F8R2_FB17_Msk
 (0x1UL << 
CAN_F8R2_FB17_Pos
√ã

	)

9889 
	#CAN_F8R2_FB17
 
CAN_F8R2_FB17_Msk


	)

9890 
	#CAN_F8R2_FB18_Pos
 (18U)

	)

9891 
	#CAN_F8R2_FB18_Msk
 (0x1UL << 
CAN_F8R2_FB18_Pos
√ã

	)

9892 
	#CAN_F8R2_FB18
 
CAN_F8R2_FB18_Msk


	)

9893 
	#CAN_F8R2_FB19_Pos
 (19U)

	)

9894 
	#CAN_F8R2_FB19_Msk
 (0x1UL << 
CAN_F8R2_FB19_Pos
√ã

	)

9895 
	#CAN_F8R2_FB19
 
CAN_F8R2_FB19_Msk


	)

9896 
	#CAN_F8R2_FB20_Pos
 (20U)

	)

9897 
	#CAN_F8R2_FB20_Msk
 (0x1UL << 
CAN_F8R2_FB20_Pos
√ã

	)

9898 
	#CAN_F8R2_FB20
 
CAN_F8R2_FB20_Msk


	)

9899 
	#CAN_F8R2_FB21_Pos
 (21U)

	)

9900 
	#CAN_F8R2_FB21_Msk
 (0x1UL << 
CAN_F8R2_FB21_Pos
√ã

	)

9901 
	#CAN_F8R2_FB21
 
CAN_F8R2_FB21_Msk


	)

9902 
	#CAN_F8R2_FB22_Pos
 (22U)

	)

9903 
	#CAN_F8R2_FB22_Msk
 (0x1UL << 
CAN_F8R2_FB22_Pos
√ã

	)

9904 
	#CAN_F8R2_FB22
 
CAN_F8R2_FB22_Msk


	)

9905 
	#CAN_F8R2_FB23_Pos
 (23U)

	)

9906 
	#CAN_F8R2_FB23_Msk
 (0x1UL << 
CAN_F8R2_FB23_Pos
√ã

	)

9907 
	#CAN_F8R2_FB23
 
CAN_F8R2_FB23_Msk


	)

9908 
	#CAN_F8R2_FB24_Pos
 (24U)

	)

9909 
	#CAN_F8R2_FB24_Msk
 (0x1UL << 
CAN_F8R2_FB24_Pos
√ã

	)

9910 
	#CAN_F8R2_FB24
 
CAN_F8R2_FB24_Msk


	)

9911 
	#CAN_F8R2_FB25_Pos
 (25U)

	)

9912 
	#CAN_F8R2_FB25_Msk
 (0x1UL << 
CAN_F8R2_FB25_Pos
√ã

	)

9913 
	#CAN_F8R2_FB25
 
CAN_F8R2_FB25_Msk


	)

9914 
	#CAN_F8R2_FB26_Pos
 (26U)

	)

9915 
	#CAN_F8R2_FB26_Msk
 (0x1UL << 
CAN_F8R2_FB26_Pos
√ã

	)

9916 
	#CAN_F8R2_FB26
 
CAN_F8R2_FB26_Msk


	)

9917 
	#CAN_F8R2_FB27_Pos
 (27U)

	)

9918 
	#CAN_F8R2_FB27_Msk
 (0x1UL << 
CAN_F8R2_FB27_Pos
√ã

	)

9919 
	#CAN_F8R2_FB27
 
CAN_F8R2_FB27_Msk


	)

9920 
	#CAN_F8R2_FB28_Pos
 (28U)

	)

9921 
	#CAN_F8R2_FB28_Msk
 (0x1UL << 
CAN_F8R2_FB28_Pos
√ã

	)

9922 
	#CAN_F8R2_FB28
 
CAN_F8R2_FB28_Msk


	)

9923 
	#CAN_F8R2_FB29_Pos
 (29U)

	)

9924 
	#CAN_F8R2_FB29_Msk
 (0x1UL << 
CAN_F8R2_FB29_Pos
√ã

	)

9925 
	#CAN_F8R2_FB29
 
CAN_F8R2_FB29_Msk


	)

9926 
	#CAN_F8R2_FB30_Pos
 (30U)

	)

9927 
	#CAN_F8R2_FB30_Msk
 (0x1UL << 
CAN_F8R2_FB30_Pos
√ã

	)

9928 
	#CAN_F8R2_FB30
 
CAN_F8R2_FB30_Msk


	)

9929 
	#CAN_F8R2_FB31_Pos
 (31U)

	)

9930 
	#CAN_F8R2_FB31_Msk
 (0x1UL << 
CAN_F8R2_FB31_Pos
√ã

	)

9931 
	#CAN_F8R2_FB31
 
CAN_F8R2_FB31_Msk


	)

9934 
	#CAN_F9R2_FB0_Pos
 (0U)

	)

9935 
	#CAN_F9R2_FB0_Msk
 (0x1UL << 
CAN_F9R2_FB0_Pos
√ã

	)

9936 
	#CAN_F9R2_FB0
 
CAN_F9R2_FB0_Msk


	)

9937 
	#CAN_F9R2_FB1_Pos
 (1U)

	)

9938 
	#CAN_F9R2_FB1_Msk
 (0x1UL << 
CAN_F9R2_FB1_Pos
√ã

	)

9939 
	#CAN_F9R2_FB1
 
CAN_F9R2_FB1_Msk


	)

9940 
	#CAN_F9R2_FB2_Pos
 (2U)

	)

9941 
	#CAN_F9R2_FB2_Msk
 (0x1UL << 
CAN_F9R2_FB2_Pos
√ã

	)

9942 
	#CAN_F9R2_FB2
 
CAN_F9R2_FB2_Msk


	)

9943 
	#CAN_F9R2_FB3_Pos
 (3U)

	)

9944 
	#CAN_F9R2_FB3_Msk
 (0x1UL << 
CAN_F9R2_FB3_Pos
√ã

	)

9945 
	#CAN_F9R2_FB3
 
CAN_F9R2_FB3_Msk


	)

9946 
	#CAN_F9R2_FB4_Pos
 (4U)

	)

9947 
	#CAN_F9R2_FB4_Msk
 (0x1UL << 
CAN_F9R2_FB4_Pos
√ã

	)

9948 
	#CAN_F9R2_FB4
 
CAN_F9R2_FB4_Msk


	)

9949 
	#CAN_F9R2_FB5_Pos
 (5U)

	)

9950 
	#CAN_F9R2_FB5_Msk
 (0x1UL << 
CAN_F9R2_FB5_Pos
√ã

	)

9951 
	#CAN_F9R2_FB5
 
CAN_F9R2_FB5_Msk


	)

9952 
	#CAN_F9R2_FB6_Pos
 (6U)

	)

9953 
	#CAN_F9R2_FB6_Msk
 (0x1UL << 
CAN_F9R2_FB6_Pos
√ã

	)

9954 
	#CAN_F9R2_FB6
 
CAN_F9R2_FB6_Msk


	)

9955 
	#CAN_F9R2_FB7_Pos
 (7U)

	)

9956 
	#CAN_F9R2_FB7_Msk
 (0x1UL << 
CAN_F9R2_FB7_Pos
√ã

	)

9957 
	#CAN_F9R2_FB7
 
CAN_F9R2_FB7_Msk


	)

9958 
	#CAN_F9R2_FB8_Pos
 (8U)

	)

9959 
	#CAN_F9R2_FB8_Msk
 (0x1UL << 
CAN_F9R2_FB8_Pos
√ã

	)

9960 
	#CAN_F9R2_FB8
 
CAN_F9R2_FB8_Msk


	)

9961 
	#CAN_F9R2_FB9_Pos
 (9U)

	)

9962 
	#CAN_F9R2_FB9_Msk
 (0x1UL << 
CAN_F9R2_FB9_Pos
√ã

	)

9963 
	#CAN_F9R2_FB9
 
CAN_F9R2_FB9_Msk


	)

9964 
	#CAN_F9R2_FB10_Pos
 (10U)

	)

9965 
	#CAN_F9R2_FB10_Msk
 (0x1UL << 
CAN_F9R2_FB10_Pos
√ã

	)

9966 
	#CAN_F9R2_FB10
 
CAN_F9R2_FB10_Msk


	)

9967 
	#CAN_F9R2_FB11_Pos
 (11U)

	)

9968 
	#CAN_F9R2_FB11_Msk
 (0x1UL << 
CAN_F9R2_FB11_Pos
√ã

	)

9969 
	#CAN_F9R2_FB11
 
CAN_F9R2_FB11_Msk


	)

9970 
	#CAN_F9R2_FB12_Pos
 (12U)

	)

9971 
	#CAN_F9R2_FB12_Msk
 (0x1UL << 
CAN_F9R2_FB12_Pos
√ã

	)

9972 
	#CAN_F9R2_FB12
 
CAN_F9R2_FB12_Msk


	)

9973 
	#CAN_F9R2_FB13_Pos
 (13U)

	)

9974 
	#CAN_F9R2_FB13_Msk
 (0x1UL << 
CAN_F9R2_FB13_Pos
√ã

	)

9975 
	#CAN_F9R2_FB13
 
CAN_F9R2_FB13_Msk


	)

9976 
	#CAN_F9R2_FB14_Pos
 (14U)

	)

9977 
	#CAN_F9R2_FB14_Msk
 (0x1UL << 
CAN_F9R2_FB14_Pos
√ã

	)

9978 
	#CAN_F9R2_FB14
 
CAN_F9R2_FB14_Msk


	)

9979 
	#CAN_F9R2_FB15_Pos
 (15U)

	)

9980 
	#CAN_F9R2_FB15_Msk
 (0x1UL << 
CAN_F9R2_FB15_Pos
√ã

	)

9981 
	#CAN_F9R2_FB15
 
CAN_F9R2_FB15_Msk


	)

9982 
	#CAN_F9R2_FB16_Pos
 (16U)

	)

9983 
	#CAN_F9R2_FB16_Msk
 (0x1UL << 
CAN_F9R2_FB16_Pos
√ã

	)

9984 
	#CAN_F9R2_FB16
 
CAN_F9R2_FB16_Msk


	)

9985 
	#CAN_F9R2_FB17_Pos
 (17U)

	)

9986 
	#CAN_F9R2_FB17_Msk
 (0x1UL << 
CAN_F9R2_FB17_Pos
√ã

	)

9987 
	#CAN_F9R2_FB17
 
CAN_F9R2_FB17_Msk


	)

9988 
	#CAN_F9R2_FB18_Pos
 (18U)

	)

9989 
	#CAN_F9R2_FB18_Msk
 (0x1UL << 
CAN_F9R2_FB18_Pos
√ã

	)

9990 
	#CAN_F9R2_FB18
 
CAN_F9R2_FB18_Msk


	)

9991 
	#CAN_F9R2_FB19_Pos
 (19U)

	)

9992 
	#CAN_F9R2_FB19_Msk
 (0x1UL << 
CAN_F9R2_FB19_Pos
√ã

	)

9993 
	#CAN_F9R2_FB19
 
CAN_F9R2_FB19_Msk


	)

9994 
	#CAN_F9R2_FB20_Pos
 (20U)

	)

9995 
	#CAN_F9R2_FB20_Msk
 (0x1UL << 
CAN_F9R2_FB20_Pos
√ã

	)

9996 
	#CAN_F9R2_FB20
 
CAN_F9R2_FB20_Msk


	)

9997 
	#CAN_F9R2_FB21_Pos
 (21U)

	)

9998 
	#CAN_F9R2_FB21_Msk
 (0x1UL << 
CAN_F9R2_FB21_Pos
√ã

	)

9999 
	#CAN_F9R2_FB21
 
CAN_F9R2_FB21_Msk


	)

10000 
	#CAN_F9R2_FB22_Pos
 (22U)

	)

10001 
	#CAN_F9R2_FB22_Msk
 (0x1UL << 
CAN_F9R2_FB22_Pos
√ã

	)

10002 
	#CAN_F9R2_FB22
 
CAN_F9R2_FB22_Msk


	)

10003 
	#CAN_F9R2_FB23_Pos
 (23U)

	)

10004 
	#CAN_F9R2_FB23_Msk
 (0x1UL << 
CAN_F9R2_FB23_Pos
√ã

	)

10005 
	#CAN_F9R2_FB23
 
CAN_F9R2_FB23_Msk


	)

10006 
	#CAN_F9R2_FB24_Pos
 (24U)

	)

10007 
	#CAN_F9R2_FB24_Msk
 (0x1UL << 
CAN_F9R2_FB24_Pos
√ã

	)

10008 
	#CAN_F9R2_FB24
 
CAN_F9R2_FB24_Msk


	)

10009 
	#CAN_F9R2_FB25_Pos
 (25U)

	)

10010 
	#CAN_F9R2_FB25_Msk
 (0x1UL << 
CAN_F9R2_FB25_Pos
√ã

	)

10011 
	#CAN_F9R2_FB25
 
CAN_F9R2_FB25_Msk


	)

10012 
	#CAN_F9R2_FB26_Pos
 (26U)

	)

10013 
	#CAN_F9R2_FB26_Msk
 (0x1UL << 
CAN_F9R2_FB26_Pos
√ã

	)

10014 
	#CAN_F9R2_FB26
 
CAN_F9R2_FB26_Msk


	)

10015 
	#CAN_F9R2_FB27_Pos
 (27U)

	)

10016 
	#CAN_F9R2_FB27_Msk
 (0x1UL << 
CAN_F9R2_FB27_Pos
√ã

	)

10017 
	#CAN_F9R2_FB27
 
CAN_F9R2_FB27_Msk


	)

10018 
	#CAN_F9R2_FB28_Pos
 (28U)

	)

10019 
	#CAN_F9R2_FB28_Msk
 (0x1UL << 
CAN_F9R2_FB28_Pos
√ã

	)

10020 
	#CAN_F9R2_FB28
 
CAN_F9R2_FB28_Msk


	)

10021 
	#CAN_F9R2_FB29_Pos
 (29U)

	)

10022 
	#CAN_F9R2_FB29_Msk
 (0x1UL << 
CAN_F9R2_FB29_Pos
√ã

	)

10023 
	#CAN_F9R2_FB29
 
CAN_F9R2_FB29_Msk


	)

10024 
	#CAN_F9R2_FB30_Pos
 (30U)

	)

10025 
	#CAN_F9R2_FB30_Msk
 (0x1UL << 
CAN_F9R2_FB30_Pos
√ã

	)

10026 
	#CAN_F9R2_FB30
 
CAN_F9R2_FB30_Msk


	)

10027 
	#CAN_F9R2_FB31_Pos
 (31U)

	)

10028 
	#CAN_F9R2_FB31_Msk
 (0x1UL << 
CAN_F9R2_FB31_Pos
√ã

	)

10029 
	#CAN_F9R2_FB31
 
CAN_F9R2_FB31_Msk


	)

10032 
	#CAN_F10R2_FB0_Pos
 (0U)

	)

10033 
	#CAN_F10R2_FB0_Msk
 (0x1UL << 
CAN_F10R2_FB0_Pos
√ã

	)

10034 
	#CAN_F10R2_FB0
 
CAN_F10R2_FB0_Msk


	)

10035 
	#CAN_F10R2_FB1_Pos
 (1U)

	)

10036 
	#CAN_F10R2_FB1_Msk
 (0x1UL << 
CAN_F10R2_FB1_Pos
√ã

	)

10037 
	#CAN_F10R2_FB1
 
CAN_F10R2_FB1_Msk


	)

10038 
	#CAN_F10R2_FB2_Pos
 (2U)

	)

10039 
	#CAN_F10R2_FB2_Msk
 (0x1UL << 
CAN_F10R2_FB2_Pos
√ã

	)

10040 
	#CAN_F10R2_FB2
 
CAN_F10R2_FB2_Msk


	)

10041 
	#CAN_F10R2_FB3_Pos
 (3U)

	)

10042 
	#CAN_F10R2_FB3_Msk
 (0x1UL << 
CAN_F10R2_FB3_Pos
√ã

	)

10043 
	#CAN_F10R2_FB3
 
CAN_F10R2_FB3_Msk


	)

10044 
	#CAN_F10R2_FB4_Pos
 (4U)

	)

10045 
	#CAN_F10R2_FB4_Msk
 (0x1UL << 
CAN_F10R2_FB4_Pos
√ã

	)

10046 
	#CAN_F10R2_FB4
 
CAN_F10R2_FB4_Msk


	)

10047 
	#CAN_F10R2_FB5_Pos
 (5U)

	)

10048 
	#CAN_F10R2_FB5_Msk
 (0x1UL << 
CAN_F10R2_FB5_Pos
√ã

	)

10049 
	#CAN_F10R2_FB5
 
CAN_F10R2_FB5_Msk


	)

10050 
	#CAN_F10R2_FB6_Pos
 (6U)

	)

10051 
	#CAN_F10R2_FB6_Msk
 (0x1UL << 
CAN_F10R2_FB6_Pos
√ã

	)

10052 
	#CAN_F10R2_FB6
 
CAN_F10R2_FB6_Msk


	)

10053 
	#CAN_F10R2_FB7_Pos
 (7U)

	)

10054 
	#CAN_F10R2_FB7_Msk
 (0x1UL << 
CAN_F10R2_FB7_Pos
√ã

	)

10055 
	#CAN_F10R2_FB7
 
CAN_F10R2_FB7_Msk


	)

10056 
	#CAN_F10R2_FB8_Pos
 (8U)

	)

10057 
	#CAN_F10R2_FB8_Msk
 (0x1UL << 
CAN_F10R2_FB8_Pos
√ã

	)

10058 
	#CAN_F10R2_FB8
 
CAN_F10R2_FB8_Msk


	)

10059 
	#CAN_F10R2_FB9_Pos
 (9U)

	)

10060 
	#CAN_F10R2_FB9_Msk
 (0x1UL << 
CAN_F10R2_FB9_Pos
√ã

	)

10061 
	#CAN_F10R2_FB9
 
CAN_F10R2_FB9_Msk


	)

10062 
	#CAN_F10R2_FB10_Pos
 (10U)

	)

10063 
	#CAN_F10R2_FB10_Msk
 (0x1UL << 
CAN_F10R2_FB10_Pos
√ã

	)

10064 
	#CAN_F10R2_FB10
 
CAN_F10R2_FB10_Msk


	)

10065 
	#CAN_F10R2_FB11_Pos
 (11U)

	)

10066 
	#CAN_F10R2_FB11_Msk
 (0x1UL << 
CAN_F10R2_FB11_Pos
√ã

	)

10067 
	#CAN_F10R2_FB11
 
CAN_F10R2_FB11_Msk


	)

10068 
	#CAN_F10R2_FB12_Pos
 (12U)

	)

10069 
	#CAN_F10R2_FB12_Msk
 (0x1UL << 
CAN_F10R2_FB12_Pos
√ã

	)

10070 
	#CAN_F10R2_FB12
 
CAN_F10R2_FB12_Msk


	)

10071 
	#CAN_F10R2_FB13_Pos
 (13U)

	)

10072 
	#CAN_F10R2_FB13_Msk
 (0x1UL << 
CAN_F10R2_FB13_Pos
√ã

	)

10073 
	#CAN_F10R2_FB13
 
CAN_F10R2_FB13_Msk


	)

10074 
	#CAN_F10R2_FB14_Pos
 (14U)

	)

10075 
	#CAN_F10R2_FB14_Msk
 (0x1UL << 
CAN_F10R2_FB14_Pos
√ã

	)

10076 
	#CAN_F10R2_FB14
 
CAN_F10R2_FB14_Msk


	)

10077 
	#CAN_F10R2_FB15_Pos
 (15U)

	)

10078 
	#CAN_F10R2_FB15_Msk
 (0x1UL << 
CAN_F10R2_FB15_Pos
√ã

	)

10079 
	#CAN_F10R2_FB15
 
CAN_F10R2_FB15_Msk


	)

10080 
	#CAN_F10R2_FB16_Pos
 (16U)

	)

10081 
	#CAN_F10R2_FB16_Msk
 (0x1UL << 
CAN_F10R2_FB16_Pos
√ã

	)

10082 
	#CAN_F10R2_FB16
 
CAN_F10R2_FB16_Msk


	)

10083 
	#CAN_F10R2_FB17_Pos
 (17U)

	)

10084 
	#CAN_F10R2_FB17_Msk
 (0x1UL << 
CAN_F10R2_FB17_Pos
√ã

	)

10085 
	#CAN_F10R2_FB17
 
CAN_F10R2_FB17_Msk


	)

10086 
	#CAN_F10R2_FB18_Pos
 (18U)

	)

10087 
	#CAN_F10R2_FB18_Msk
 (0x1UL << 
CAN_F10R2_FB18_Pos
√ã

	)

10088 
	#CAN_F10R2_FB18
 
CAN_F10R2_FB18_Msk


	)

10089 
	#CAN_F10R2_FB19_Pos
 (19U)

	)

10090 
	#CAN_F10R2_FB19_Msk
 (0x1UL << 
CAN_F10R2_FB19_Pos
√ã

	)

10091 
	#CAN_F10R2_FB19
 
CAN_F10R2_FB19_Msk


	)

10092 
	#CAN_F10R2_FB20_Pos
 (20U)

	)

10093 
	#CAN_F10R2_FB20_Msk
 (0x1UL << 
CAN_F10R2_FB20_Pos
√ã

	)

10094 
	#CAN_F10R2_FB20
 
CAN_F10R2_FB20_Msk


	)

10095 
	#CAN_F10R2_FB21_Pos
 (21U)

	)

10096 
	#CAN_F10R2_FB21_Msk
 (0x1UL << 
CAN_F10R2_FB21_Pos
√ã

	)

10097 
	#CAN_F10R2_FB21
 
CAN_F10R2_FB21_Msk


	)

10098 
	#CAN_F10R2_FB22_Pos
 (22U)

	)

10099 
	#CAN_F10R2_FB22_Msk
 (0x1UL << 
CAN_F10R2_FB22_Pos
√ã

	)

10100 
	#CAN_F10R2_FB22
 
CAN_F10R2_FB22_Msk


	)

10101 
	#CAN_F10R2_FB23_Pos
 (23U)

	)

10102 
	#CAN_F10R2_FB23_Msk
 (0x1UL << 
CAN_F10R2_FB23_Pos
√ã

	)

10103 
	#CAN_F10R2_FB23
 
CAN_F10R2_FB23_Msk


	)

10104 
	#CAN_F10R2_FB24_Pos
 (24U)

	)

10105 
	#CAN_F10R2_FB24_Msk
 (0x1UL << 
CAN_F10R2_FB24_Pos
√ã

	)

10106 
	#CAN_F10R2_FB24
 
CAN_F10R2_FB24_Msk


	)

10107 
	#CAN_F10R2_FB25_Pos
 (25U)

	)

10108 
	#CAN_F10R2_FB25_Msk
 (0x1UL << 
CAN_F10R2_FB25_Pos
√ã

	)

10109 
	#CAN_F10R2_FB25
 
CAN_F10R2_FB25_Msk


	)

10110 
	#CAN_F10R2_FB26_Pos
 (26U)

	)

10111 
	#CAN_F10R2_FB26_Msk
 (0x1UL << 
CAN_F10R2_FB26_Pos
√ã

	)

10112 
	#CAN_F10R2_FB26
 
CAN_F10R2_FB26_Msk


	)

10113 
	#CAN_F10R2_FB27_Pos
 (27U)

	)

10114 
	#CAN_F10R2_FB27_Msk
 (0x1UL << 
CAN_F10R2_FB27_Pos
√ã

	)

10115 
	#CAN_F10R2_FB27
 
CAN_F10R2_FB27_Msk


	)

10116 
	#CAN_F10R2_FB28_Pos
 (28U)

	)

10117 
	#CAN_F10R2_FB28_Msk
 (0x1UL << 
CAN_F10R2_FB28_Pos
√ã

	)

10118 
	#CAN_F10R2_FB28
 
CAN_F10R2_FB28_Msk


	)

10119 
	#CAN_F10R2_FB29_Pos
 (29U)

	)

10120 
	#CAN_F10R2_FB29_Msk
 (0x1UL << 
CAN_F10R2_FB29_Pos
√ã

	)

10121 
	#CAN_F10R2_FB29
 
CAN_F10R2_FB29_Msk


	)

10122 
	#CAN_F10R2_FB30_Pos
 (30U)

	)

10123 
	#CAN_F10R2_FB30_Msk
 (0x1UL << 
CAN_F10R2_FB30_Pos
√ã

	)

10124 
	#CAN_F10R2_FB30
 
CAN_F10R2_FB30_Msk


	)

10125 
	#CAN_F10R2_FB31_Pos
 (31U)

	)

10126 
	#CAN_F10R2_FB31_Msk
 (0x1UL << 
CAN_F10R2_FB31_Pos
√ã

	)

10127 
	#CAN_F10R2_FB31
 
CAN_F10R2_FB31_Msk


	)

10130 
	#CAN_F11R2_FB0_Pos
 (0U)

	)

10131 
	#CAN_F11R2_FB0_Msk
 (0x1UL << 
CAN_F11R2_FB0_Pos
√ã

	)

10132 
	#CAN_F11R2_FB0
 
CAN_F11R2_FB0_Msk


	)

10133 
	#CAN_F11R2_FB1_Pos
 (1U)

	)

10134 
	#CAN_F11R2_FB1_Msk
 (0x1UL << 
CAN_F11R2_FB1_Pos
√ã

	)

10135 
	#CAN_F11R2_FB1
 
CAN_F11R2_FB1_Msk


	)

10136 
	#CAN_F11R2_FB2_Pos
 (2U)

	)

10137 
	#CAN_F11R2_FB2_Msk
 (0x1UL << 
CAN_F11R2_FB2_Pos
√ã

	)

10138 
	#CAN_F11R2_FB2
 
CAN_F11R2_FB2_Msk


	)

10139 
	#CAN_F11R2_FB3_Pos
 (3U)

	)

10140 
	#CAN_F11R2_FB3_Msk
 (0x1UL << 
CAN_F11R2_FB3_Pos
√ã

	)

10141 
	#CAN_F11R2_FB3
 
CAN_F11R2_FB3_Msk


	)

10142 
	#CAN_F11R2_FB4_Pos
 (4U)

	)

10143 
	#CAN_F11R2_FB4_Msk
 (0x1UL << 
CAN_F11R2_FB4_Pos
√ã

	)

10144 
	#CAN_F11R2_FB4
 
CAN_F11R2_FB4_Msk


	)

10145 
	#CAN_F11R2_FB5_Pos
 (5U)

	)

10146 
	#CAN_F11R2_FB5_Msk
 (0x1UL << 
CAN_F11R2_FB5_Pos
√ã

	)

10147 
	#CAN_F11R2_FB5
 
CAN_F11R2_FB5_Msk


	)

10148 
	#CAN_F11R2_FB6_Pos
 (6U)

	)

10149 
	#CAN_F11R2_FB6_Msk
 (0x1UL << 
CAN_F11R2_FB6_Pos
√ã

	)

10150 
	#CAN_F11R2_FB6
 
CAN_F11R2_FB6_Msk


	)

10151 
	#CAN_F11R2_FB7_Pos
 (7U)

	)

10152 
	#CAN_F11R2_FB7_Msk
 (0x1UL << 
CAN_F11R2_FB7_Pos
√ã

	)

10153 
	#CAN_F11R2_FB7
 
CAN_F11R2_FB7_Msk


	)

10154 
	#CAN_F11R2_FB8_Pos
 (8U)

	)

10155 
	#CAN_F11R2_FB8_Msk
 (0x1UL << 
CAN_F11R2_FB8_Pos
√ã

	)

10156 
	#CAN_F11R2_FB8
 
CAN_F11R2_FB8_Msk


	)

10157 
	#CAN_F11R2_FB9_Pos
 (9U)

	)

10158 
	#CAN_F11R2_FB9_Msk
 (0x1UL << 
CAN_F11R2_FB9_Pos
√ã

	)

10159 
	#CAN_F11R2_FB9
 
CAN_F11R2_FB9_Msk


	)

10160 
	#CAN_F11R2_FB10_Pos
 (10U)

	)

10161 
	#CAN_F11R2_FB10_Msk
 (0x1UL << 
CAN_F11R2_FB10_Pos
√ã

	)

10162 
	#CAN_F11R2_FB10
 
CAN_F11R2_FB10_Msk


	)

10163 
	#CAN_F11R2_FB11_Pos
 (11U)

	)

10164 
	#CAN_F11R2_FB11_Msk
 (0x1UL << 
CAN_F11R2_FB11_Pos
√ã

	)

10165 
	#CAN_F11R2_FB11
 
CAN_F11R2_FB11_Msk


	)

10166 
	#CAN_F11R2_FB12_Pos
 (12U)

	)

10167 
	#CAN_F11R2_FB12_Msk
 (0x1UL << 
CAN_F11R2_FB12_Pos
√ã

	)

10168 
	#CAN_F11R2_FB12
 
CAN_F11R2_FB12_Msk


	)

10169 
	#CAN_F11R2_FB13_Pos
 (13U)

	)

10170 
	#CAN_F11R2_FB13_Msk
 (0x1UL << 
CAN_F11R2_FB13_Pos
√ã

	)

10171 
	#CAN_F11R2_FB13
 
CAN_F11R2_FB13_Msk


	)

10172 
	#CAN_F11R2_FB14_Pos
 (14U)

	)

10173 
	#CAN_F11R2_FB14_Msk
 (0x1UL << 
CAN_F11R2_FB14_Pos
√ã

	)

10174 
	#CAN_F11R2_FB14
 
CAN_F11R2_FB14_Msk


	)

10175 
	#CAN_F11R2_FB15_Pos
 (15U)

	)

10176 
	#CAN_F11R2_FB15_Msk
 (0x1UL << 
CAN_F11R2_FB15_Pos
√ã

	)

10177 
	#CAN_F11R2_FB15
 
CAN_F11R2_FB15_Msk


	)

10178 
	#CAN_F11R2_FB16_Pos
 (16U)

	)

10179 
	#CAN_F11R2_FB16_Msk
 (0x1UL << 
CAN_F11R2_FB16_Pos
√ã

	)

10180 
	#CAN_F11R2_FB16
 
CAN_F11R2_FB16_Msk


	)

10181 
	#CAN_F11R2_FB17_Pos
 (17U)

	)

10182 
	#CAN_F11R2_FB17_Msk
 (0x1UL << 
CAN_F11R2_FB17_Pos
√ã

	)

10183 
	#CAN_F11R2_FB17
 
CAN_F11R2_FB17_Msk


	)

10184 
	#CAN_F11R2_FB18_Pos
 (18U)

	)

10185 
	#CAN_F11R2_FB18_Msk
 (0x1UL << 
CAN_F11R2_FB18_Pos
√ã

	)

10186 
	#CAN_F11R2_FB18
 
CAN_F11R2_FB18_Msk


	)

10187 
	#CAN_F11R2_FB19_Pos
 (19U)

	)

10188 
	#CAN_F11R2_FB19_Msk
 (0x1UL << 
CAN_F11R2_FB19_Pos
√ã

	)

10189 
	#CAN_F11R2_FB19
 
CAN_F11R2_FB19_Msk


	)

10190 
	#CAN_F11R2_FB20_Pos
 (20U)

	)

10191 
	#CAN_F11R2_FB20_Msk
 (0x1UL << 
CAN_F11R2_FB20_Pos
√ã

	)

10192 
	#CAN_F11R2_FB20
 
CAN_F11R2_FB20_Msk


	)

10193 
	#CAN_F11R2_FB21_Pos
 (21U)

	)

10194 
	#CAN_F11R2_FB21_Msk
 (0x1UL << 
CAN_F11R2_FB21_Pos
√ã

	)

10195 
	#CAN_F11R2_FB21
 
CAN_F11R2_FB21_Msk


	)

10196 
	#CAN_F11R2_FB22_Pos
 (22U)

	)

10197 
	#CAN_F11R2_FB22_Msk
 (0x1UL << 
CAN_F11R2_FB22_Pos
√ã

	)

10198 
	#CAN_F11R2_FB22
 
CAN_F11R2_FB22_Msk


	)

10199 
	#CAN_F11R2_FB23_Pos
 (23U)

	)

10200 
	#CAN_F11R2_FB23_Msk
 (0x1UL << 
CAN_F11R2_FB23_Pos
√ã

	)

10201 
	#CAN_F11R2_FB23
 
CAN_F11R2_FB23_Msk


	)

10202 
	#CAN_F11R2_FB24_Pos
 (24U)

	)

10203 
	#CAN_F11R2_FB24_Msk
 (0x1UL << 
CAN_F11R2_FB24_Pos
√ã

	)

10204 
	#CAN_F11R2_FB24
 
CAN_F11R2_FB24_Msk


	)

10205 
	#CAN_F11R2_FB25_Pos
 (25U)

	)

10206 
	#CAN_F11R2_FB25_Msk
 (0x1UL << 
CAN_F11R2_FB25_Pos
√ã

	)

10207 
	#CAN_F11R2_FB25
 
CAN_F11R2_FB25_Msk


	)

10208 
	#CAN_F11R2_FB26_Pos
 (26U)

	)

10209 
	#CAN_F11R2_FB26_Msk
 (0x1UL << 
CAN_F11R2_FB26_Pos
√ã

	)

10210 
	#CAN_F11R2_FB26
 
CAN_F11R2_FB26_Msk


	)

10211 
	#CAN_F11R2_FB27_Pos
 (27U)

	)

10212 
	#CAN_F11R2_FB27_Msk
 (0x1UL << 
CAN_F11R2_FB27_Pos
√ã

	)

10213 
	#CAN_F11R2_FB27
 
CAN_F11R2_FB27_Msk


	)

10214 
	#CAN_F11R2_FB28_Pos
 (28U)

	)

10215 
	#CAN_F11R2_FB28_Msk
 (0x1UL << 
CAN_F11R2_FB28_Pos
√ã

	)

10216 
	#CAN_F11R2_FB28
 
CAN_F11R2_FB28_Msk


	)

10217 
	#CAN_F11R2_FB29_Pos
 (29U)

	)

10218 
	#CAN_F11R2_FB29_Msk
 (0x1UL << 
CAN_F11R2_FB29_Pos
√ã

	)

10219 
	#CAN_F11R2_FB29
 
CAN_F11R2_FB29_Msk


	)

10220 
	#CAN_F11R2_FB30_Pos
 (30U)

	)

10221 
	#CAN_F11R2_FB30_Msk
 (0x1UL << 
CAN_F11R2_FB30_Pos
√ã

	)

10222 
	#CAN_F11R2_FB30
 
CAN_F11R2_FB30_Msk


	)

10223 
	#CAN_F11R2_FB31_Pos
 (31U)

	)

10224 
	#CAN_F11R2_FB31_Msk
 (0x1UL << 
CAN_F11R2_FB31_Pos
√ã

	)

10225 
	#CAN_F11R2_FB31
 
CAN_F11R2_FB31_Msk


	)

10228 
	#CAN_F12R2_FB0_Pos
 (0U)

	)

10229 
	#CAN_F12R2_FB0_Msk
 (0x1UL << 
CAN_F12R2_FB0_Pos
√ã

	)

10230 
	#CAN_F12R2_FB0
 
CAN_F12R2_FB0_Msk


	)

10231 
	#CAN_F12R2_FB1_Pos
 (1U)

	)

10232 
	#CAN_F12R2_FB1_Msk
 (0x1UL << 
CAN_F12R2_FB1_Pos
√ã

	)

10233 
	#CAN_F12R2_FB1
 
CAN_F12R2_FB1_Msk


	)

10234 
	#CAN_F12R2_FB2_Pos
 (2U)

	)

10235 
	#CAN_F12R2_FB2_Msk
 (0x1UL << 
CAN_F12R2_FB2_Pos
√ã

	)

10236 
	#CAN_F12R2_FB2
 
CAN_F12R2_FB2_Msk


	)

10237 
	#CAN_F12R2_FB3_Pos
 (3U)

	)

10238 
	#CAN_F12R2_FB3_Msk
 (0x1UL << 
CAN_F12R2_FB3_Pos
√ã

	)

10239 
	#CAN_F12R2_FB3
 
CAN_F12R2_FB3_Msk


	)

10240 
	#CAN_F12R2_FB4_Pos
 (4U)

	)

10241 
	#CAN_F12R2_FB4_Msk
 (0x1UL << 
CAN_F12R2_FB4_Pos
√ã

	)

10242 
	#CAN_F12R2_FB4
 
CAN_F12R2_FB4_Msk


	)

10243 
	#CAN_F12R2_FB5_Pos
 (5U)

	)

10244 
	#CAN_F12R2_FB5_Msk
 (0x1UL << 
CAN_F12R2_FB5_Pos
√ã

	)

10245 
	#CAN_F12R2_FB5
 
CAN_F12R2_FB5_Msk


	)

10246 
	#CAN_F12R2_FB6_Pos
 (6U)

	)

10247 
	#CAN_F12R2_FB6_Msk
 (0x1UL << 
CAN_F12R2_FB6_Pos
√ã

	)

10248 
	#CAN_F12R2_FB6
 
CAN_F12R2_FB6_Msk


	)

10249 
	#CAN_F12R2_FB7_Pos
 (7U)

	)

10250 
	#CAN_F12R2_FB7_Msk
 (0x1UL << 
CAN_F12R2_FB7_Pos
√ã

	)

10251 
	#CAN_F12R2_FB7
 
CAN_F12R2_FB7_Msk


	)

10252 
	#CAN_F12R2_FB8_Pos
 (8U)

	)

10253 
	#CAN_F12R2_FB8_Msk
 (0x1UL << 
CAN_F12R2_FB8_Pos
√ã

	)

10254 
	#CAN_F12R2_FB8
 
CAN_F12R2_FB8_Msk


	)

10255 
	#CAN_F12R2_FB9_Pos
 (9U)

	)

10256 
	#CAN_F12R2_FB9_Msk
 (0x1UL << 
CAN_F12R2_FB9_Pos
√ã

	)

10257 
	#CAN_F12R2_FB9
 
CAN_F12R2_FB9_Msk


	)

10258 
	#CAN_F12R2_FB10_Pos
 (10U)

	)

10259 
	#CAN_F12R2_FB10_Msk
 (0x1UL << 
CAN_F12R2_FB10_Pos
√ã

	)

10260 
	#CAN_F12R2_FB10
 
CAN_F12R2_FB10_Msk


	)

10261 
	#CAN_F12R2_FB11_Pos
 (11U)

	)

10262 
	#CAN_F12R2_FB11_Msk
 (0x1UL << 
CAN_F12R2_FB11_Pos
√ã

	)

10263 
	#CAN_F12R2_FB11
 
CAN_F12R2_FB11_Msk


	)

10264 
	#CAN_F12R2_FB12_Pos
 (12U)

	)

10265 
	#CAN_F12R2_FB12_Msk
 (0x1UL << 
CAN_F12R2_FB12_Pos
√ã

	)

10266 
	#CAN_F12R2_FB12
 
CAN_F12R2_FB12_Msk


	)

10267 
	#CAN_F12R2_FB13_Pos
 (13U)

	)

10268 
	#CAN_F12R2_FB13_Msk
 (0x1UL << 
CAN_F12R2_FB13_Pos
√ã

	)

10269 
	#CAN_F12R2_FB13
 
CAN_F12R2_FB13_Msk


	)

10270 
	#CAN_F12R2_FB14_Pos
 (14U)

	)

10271 
	#CAN_F12R2_FB14_Msk
 (0x1UL << 
CAN_F12R2_FB14_Pos
√ã

	)

10272 
	#CAN_F12R2_FB14
 
CAN_F12R2_FB14_Msk


	)

10273 
	#CAN_F12R2_FB15_Pos
 (15U)

	)

10274 
	#CAN_F12R2_FB15_Msk
 (0x1UL << 
CAN_F12R2_FB15_Pos
√ã

	)

10275 
	#CAN_F12R2_FB15
 
CAN_F12R2_FB15_Msk


	)

10276 
	#CAN_F12R2_FB16_Pos
 (16U)

	)

10277 
	#CAN_F12R2_FB16_Msk
 (0x1UL << 
CAN_F12R2_FB16_Pos
√ã

	)

10278 
	#CAN_F12R2_FB16
 
CAN_F12R2_FB16_Msk


	)

10279 
	#CAN_F12R2_FB17_Pos
 (17U)

	)

10280 
	#CAN_F12R2_FB17_Msk
 (0x1UL << 
CAN_F12R2_FB17_Pos
√ã

	)

10281 
	#CAN_F12R2_FB17
 
CAN_F12R2_FB17_Msk


	)

10282 
	#CAN_F12R2_FB18_Pos
 (18U)

	)

10283 
	#CAN_F12R2_FB18_Msk
 (0x1UL << 
CAN_F12R2_FB18_Pos
√ã

	)

10284 
	#CAN_F12R2_FB18
 
CAN_F12R2_FB18_Msk


	)

10285 
	#CAN_F12R2_FB19_Pos
 (19U)

	)

10286 
	#CAN_F12R2_FB19_Msk
 (0x1UL << 
CAN_F12R2_FB19_Pos
√ã

	)

10287 
	#CAN_F12R2_FB19
 
CAN_F12R2_FB19_Msk


	)

10288 
	#CAN_F12R2_FB20_Pos
 (20U)

	)

10289 
	#CAN_F12R2_FB20_Msk
 (0x1UL << 
CAN_F12R2_FB20_Pos
√ã

	)

10290 
	#CAN_F12R2_FB20
 
CAN_F12R2_FB20_Msk


	)

10291 
	#CAN_F12R2_FB21_Pos
 (21U)

	)

10292 
	#CAN_F12R2_FB21_Msk
 (0x1UL << 
CAN_F12R2_FB21_Pos
√ã

	)

10293 
	#CAN_F12R2_FB21
 
CAN_F12R2_FB21_Msk


	)

10294 
	#CAN_F12R2_FB22_Pos
 (22U)

	)

10295 
	#CAN_F12R2_FB22_Msk
 (0x1UL << 
CAN_F12R2_FB22_Pos
√ã

	)

10296 
	#CAN_F12R2_FB22
 
CAN_F12R2_FB22_Msk


	)

10297 
	#CAN_F12R2_FB23_Pos
 (23U)

	)

10298 
	#CAN_F12R2_FB23_Msk
 (0x1UL << 
CAN_F12R2_FB23_Pos
√ã

	)

10299 
	#CAN_F12R2_FB23
 
CAN_F12R2_FB23_Msk


	)

10300 
	#CAN_F12R2_FB24_Pos
 (24U)

	)

10301 
	#CAN_F12R2_FB24_Msk
 (0x1UL << 
CAN_F12R2_FB24_Pos
√ã

	)

10302 
	#CAN_F12R2_FB24
 
CAN_F12R2_FB24_Msk


	)

10303 
	#CAN_F12R2_FB25_Pos
 (25U)

	)

10304 
	#CAN_F12R2_FB25_Msk
 (0x1UL << 
CAN_F12R2_FB25_Pos
√ã

	)

10305 
	#CAN_F12R2_FB25
 
CAN_F12R2_FB25_Msk


	)

10306 
	#CAN_F12R2_FB26_Pos
 (26U)

	)

10307 
	#CAN_F12R2_FB26_Msk
 (0x1UL << 
CAN_F12R2_FB26_Pos
√ã

	)

10308 
	#CAN_F12R2_FB26
 
CAN_F12R2_FB26_Msk


	)

10309 
	#CAN_F12R2_FB27_Pos
 (27U)

	)

10310 
	#CAN_F12R2_FB27_Msk
 (0x1UL << 
CAN_F12R2_FB27_Pos
√ã

	)

10311 
	#CAN_F12R2_FB27
 
CAN_F12R2_FB27_Msk


	)

10312 
	#CAN_F12R2_FB28_Pos
 (28U)

	)

10313 
	#CAN_F12R2_FB28_Msk
 (0x1UL << 
CAN_F12R2_FB28_Pos
√ã

	)

10314 
	#CAN_F12R2_FB28
 
CAN_F12R2_FB28_Msk


	)

10315 
	#CAN_F12R2_FB29_Pos
 (29U)

	)

10316 
	#CAN_F12R2_FB29_Msk
 (0x1UL << 
CAN_F12R2_FB29_Pos
√ã

	)

10317 
	#CAN_F12R2_FB29
 
CAN_F12R2_FB29_Msk


	)

10318 
	#CAN_F12R2_FB30_Pos
 (30U)

	)

10319 
	#CAN_F12R2_FB30_Msk
 (0x1UL << 
CAN_F12R2_FB30_Pos
√ã

	)

10320 
	#CAN_F12R2_FB30
 
CAN_F12R2_FB30_Msk


	)

10321 
	#CAN_F12R2_FB31_Pos
 (31U)

	)

10322 
	#CAN_F12R2_FB31_Msk
 (0x1UL << 
CAN_F12R2_FB31_Pos
√ã

	)

10323 
	#CAN_F12R2_FB31
 
CAN_F12R2_FB31_Msk


	)

10326 
	#CAN_F13R2_FB0_Pos
 (0U)

	)

10327 
	#CAN_F13R2_FB0_Msk
 (0x1UL << 
CAN_F13R2_FB0_Pos
√ã

	)

10328 
	#CAN_F13R2_FB0
 
CAN_F13R2_FB0_Msk


	)

10329 
	#CAN_F13R2_FB1_Pos
 (1U)

	)

10330 
	#CAN_F13R2_FB1_Msk
 (0x1UL << 
CAN_F13R2_FB1_Pos
√ã

	)

10331 
	#CAN_F13R2_FB1
 
CAN_F13R2_FB1_Msk


	)

10332 
	#CAN_F13R2_FB2_Pos
 (2U)

	)

10333 
	#CAN_F13R2_FB2_Msk
 (0x1UL << 
CAN_F13R2_FB2_Pos
√ã

	)

10334 
	#CAN_F13R2_FB2
 
CAN_F13R2_FB2_Msk


	)

10335 
	#CAN_F13R2_FB3_Pos
 (3U)

	)

10336 
	#CAN_F13R2_FB3_Msk
 (0x1UL << 
CAN_F13R2_FB3_Pos
√ã

	)

10337 
	#CAN_F13R2_FB3
 
CAN_F13R2_FB3_Msk


	)

10338 
	#CAN_F13R2_FB4_Pos
 (4U)

	)

10339 
	#CAN_F13R2_FB4_Msk
 (0x1UL << 
CAN_F13R2_FB4_Pos
√ã

	)

10340 
	#CAN_F13R2_FB4
 
CAN_F13R2_FB4_Msk


	)

10341 
	#CAN_F13R2_FB5_Pos
 (5U)

	)

10342 
	#CAN_F13R2_FB5_Msk
 (0x1UL << 
CAN_F13R2_FB5_Pos
√ã

	)

10343 
	#CAN_F13R2_FB5
 
CAN_F13R2_FB5_Msk


	)

10344 
	#CAN_F13R2_FB6_Pos
 (6U)

	)

10345 
	#CAN_F13R2_FB6_Msk
 (0x1UL << 
CAN_F13R2_FB6_Pos
√ã

	)

10346 
	#CAN_F13R2_FB6
 
CAN_F13R2_FB6_Msk


	)

10347 
	#CAN_F13R2_FB7_Pos
 (7U)

	)

10348 
	#CAN_F13R2_FB7_Msk
 (0x1UL << 
CAN_F13R2_FB7_Pos
√ã

	)

10349 
	#CAN_F13R2_FB7
 
CAN_F13R2_FB7_Msk


	)

10350 
	#CAN_F13R2_FB8_Pos
 (8U)

	)

10351 
	#CAN_F13R2_FB8_Msk
 (0x1UL << 
CAN_F13R2_FB8_Pos
√ã

	)

10352 
	#CAN_F13R2_FB8
 
CAN_F13R2_FB8_Msk


	)

10353 
	#CAN_F13R2_FB9_Pos
 (9U)

	)

10354 
	#CAN_F13R2_FB9_Msk
 (0x1UL << 
CAN_F13R2_FB9_Pos
√ã

	)

10355 
	#CAN_F13R2_FB9
 
CAN_F13R2_FB9_Msk


	)

10356 
	#CAN_F13R2_FB10_Pos
 (10U)

	)

10357 
	#CAN_F13R2_FB10_Msk
 (0x1UL << 
CAN_F13R2_FB10_Pos
√ã

	)

10358 
	#CAN_F13R2_FB10
 
CAN_F13R2_FB10_Msk


	)

10359 
	#CAN_F13R2_FB11_Pos
 (11U)

	)

10360 
	#CAN_F13R2_FB11_Msk
 (0x1UL << 
CAN_F13R2_FB11_Pos
√ã

	)

10361 
	#CAN_F13R2_FB11
 
CAN_F13R2_FB11_Msk


	)

10362 
	#CAN_F13R2_FB12_Pos
 (12U)

	)

10363 
	#CAN_F13R2_FB12_Msk
 (0x1UL << 
CAN_F13R2_FB12_Pos
√ã

	)

10364 
	#CAN_F13R2_FB12
 
CAN_F13R2_FB12_Msk


	)

10365 
	#CAN_F13R2_FB13_Pos
 (13U)

	)

10366 
	#CAN_F13R2_FB13_Msk
 (0x1UL << 
CAN_F13R2_FB13_Pos
√ã

	)

10367 
	#CAN_F13R2_FB13
 
CAN_F13R2_FB13_Msk


	)

10368 
	#CAN_F13R2_FB14_Pos
 (14U)

	)

10369 
	#CAN_F13R2_FB14_Msk
 (0x1UL << 
CAN_F13R2_FB14_Pos
√ã

	)

10370 
	#CAN_F13R2_FB14
 
CAN_F13R2_FB14_Msk


	)

10371 
	#CAN_F13R2_FB15_Pos
 (15U)

	)

10372 
	#CAN_F13R2_FB15_Msk
 (0x1UL << 
CAN_F13R2_FB15_Pos
√ã

	)

10373 
	#CAN_F13R2_FB15
 
CAN_F13R2_FB15_Msk


	)

10374 
	#CAN_F13R2_FB16_Pos
 (16U)

	)

10375 
	#CAN_F13R2_FB16_Msk
 (0x1UL << 
CAN_F13R2_FB16_Pos
√ã

	)

10376 
	#CAN_F13R2_FB16
 
CAN_F13R2_FB16_Msk


	)

10377 
	#CAN_F13R2_FB17_Pos
 (17U)

	)

10378 
	#CAN_F13R2_FB17_Msk
 (0x1UL << 
CAN_F13R2_FB17_Pos
√ã

	)

10379 
	#CAN_F13R2_FB17
 
CAN_F13R2_FB17_Msk


	)

10380 
	#CAN_F13R2_FB18_Pos
 (18U)

	)

10381 
	#CAN_F13R2_FB18_Msk
 (0x1UL << 
CAN_F13R2_FB18_Pos
√ã

	)

10382 
	#CAN_F13R2_FB18
 
CAN_F13R2_FB18_Msk


	)

10383 
	#CAN_F13R2_FB19_Pos
 (19U)

	)

10384 
	#CAN_F13R2_FB19_Msk
 (0x1UL << 
CAN_F13R2_FB19_Pos
√ã

	)

10385 
	#CAN_F13R2_FB19
 
CAN_F13R2_FB19_Msk


	)

10386 
	#CAN_F13R2_FB20_Pos
 (20U)

	)

10387 
	#CAN_F13R2_FB20_Msk
 (0x1UL << 
CAN_F13R2_FB20_Pos
√ã

	)

10388 
	#CAN_F13R2_FB20
 
CAN_F13R2_FB20_Msk


	)

10389 
	#CAN_F13R2_FB21_Pos
 (21U)

	)

10390 
	#CAN_F13R2_FB21_Msk
 (0x1UL << 
CAN_F13R2_FB21_Pos
√ã

	)

10391 
	#CAN_F13R2_FB21
 
CAN_F13R2_FB21_Msk


	)

10392 
	#CAN_F13R2_FB22_Pos
 (22U)

	)

10393 
	#CAN_F13R2_FB22_Msk
 (0x1UL << 
CAN_F13R2_FB22_Pos
√ã

	)

10394 
	#CAN_F13R2_FB22
 
CAN_F13R2_FB22_Msk


	)

10395 
	#CAN_F13R2_FB23_Pos
 (23U)

	)

10396 
	#CAN_F13R2_FB23_Msk
 (0x1UL << 
CAN_F13R2_FB23_Pos
√ã

	)

10397 
	#CAN_F13R2_FB23
 
CAN_F13R2_FB23_Msk


	)

10398 
	#CAN_F13R2_FB24_Pos
 (24U)

	)

10399 
	#CAN_F13R2_FB24_Msk
 (0x1UL << 
CAN_F13R2_FB24_Pos
√ã

	)

10400 
	#CAN_F13R2_FB24
 
CAN_F13R2_FB24_Msk


	)

10401 
	#CAN_F13R2_FB25_Pos
 (25U)

	)

10402 
	#CAN_F13R2_FB25_Msk
 (0x1UL << 
CAN_F13R2_FB25_Pos
√ã

	)

10403 
	#CAN_F13R2_FB25
 
CAN_F13R2_FB25_Msk


	)

10404 
	#CAN_F13R2_FB26_Pos
 (26U)

	)

10405 
	#CAN_F13R2_FB26_Msk
 (0x1UL << 
CAN_F13R2_FB26_Pos
√ã

	)

10406 
	#CAN_F13R2_FB26
 
CAN_F13R2_FB26_Msk


	)

10407 
	#CAN_F13R2_FB27_Pos
 (27U)

	)

10408 
	#CAN_F13R2_FB27_Msk
 (0x1UL << 
CAN_F13R2_FB27_Pos
√ã

	)

10409 
	#CAN_F13R2_FB27
 
CAN_F13R2_FB27_Msk


	)

10410 
	#CAN_F13R2_FB28_Pos
 (28U)

	)

10411 
	#CAN_F13R2_FB28_Msk
 (0x1UL << 
CAN_F13R2_FB28_Pos
√ã

	)

10412 
	#CAN_F13R2_FB28
 
CAN_F13R2_FB28_Msk


	)

10413 
	#CAN_F13R2_FB29_Pos
 (29U)

	)

10414 
	#CAN_F13R2_FB29_Msk
 (0x1UL << 
CAN_F13R2_FB29_Pos
√ã

	)

10415 
	#CAN_F13R2_FB29
 
CAN_F13R2_FB29_Msk


	)

10416 
	#CAN_F13R2_FB30_Pos
 (30U)

	)

10417 
	#CAN_F13R2_FB30_Msk
 (0x1UL << 
CAN_F13R2_FB30_Pos
√ã

	)

10418 
	#CAN_F13R2_FB30
 
CAN_F13R2_FB30_Msk


	)

10419 
	#CAN_F13R2_FB31_Pos
 (31U)

	)

10420 
	#CAN_F13R2_FB31_Msk
 (0x1UL << 
CAN_F13R2_FB31_Pos
√ã

	)

10421 
	#CAN_F13R2_FB31
 
CAN_F13R2_FB31_Msk


	)

10431 
	#SPI_I2S_SUPPORT


	)

10432 
	#SPI_CRC_ERROR_WORKAROUND_FEATURE


	)

10435 
	#SPI_CR1_CPHA_Pos
 (0U)

	)

10436 
	#SPI_CR1_CPHA_Msk
 (0x1UL << 
SPI_CR1_CPHA_Pos
√ã

	)

10437 
	#SPI_CR1_CPHA
 
SPI_CR1_CPHA_Msk


	)

10438 
	#SPI_CR1_CPOL_Pos
 (1U)

	)

10439 
	#SPI_CR1_CPOL_Msk
 (0x1UL << 
SPI_CR1_CPOL_Pos
√ã

	)

10440 
	#SPI_CR1_CPOL
 
SPI_CR1_CPOL_Msk


	)

10441 
	#SPI_CR1_MSTR_Pos
 (2U)

	)

10442 
	#SPI_CR1_MSTR_Msk
 (0x1UL << 
SPI_CR1_MSTR_Pos
√ã

	)

10443 
	#SPI_CR1_MSTR
 
SPI_CR1_MSTR_Msk


	)

10445 
	#SPI_CR1_BR_Pos
 (3U)

	)

10446 
	#SPI_CR1_BR_Msk
 (0x7UL << 
SPI_CR1_BR_Pos
√ã

	)

10447 
	#SPI_CR1_BR
 
SPI_CR1_BR_Msk


	)

10448 
	#SPI_CR1_BR_0
 (0x1UL << 
SPI_CR1_BR_Pos
√ã

	)

10449 
	#SPI_CR1_BR_1
 (0x2UL << 
SPI_CR1_BR_Pos
√ã

	)

10450 
	#SPI_CR1_BR_2
 (0x4UL << 
SPI_CR1_BR_Pos
√ã

	)

10452 
	#SPI_CR1_SPE_Pos
 (6U)

	)

10453 
	#SPI_CR1_SPE_Msk
 (0x1UL << 
SPI_CR1_SPE_Pos
√ã

	)

10454 
	#SPI_CR1_SPE
 
SPI_CR1_SPE_Msk


	)

10455 
	#SPI_CR1_LSBFIRST_Pos
 (7U)

	)

10456 
	#SPI_CR1_LSBFIRST_Msk
 (0x1UL << 
SPI_CR1_LSBFIRST_Pos
√ã

	)

10457 
	#SPI_CR1_LSBFIRST
 
SPI_CR1_LSBFIRST_Msk


	)

10458 
	#SPI_CR1_SSI_Pos
 (8U)

	)

10459 
	#SPI_CR1_SSI_Msk
 (0x1UL << 
SPI_CR1_SSI_Pos
√ã

	)

10460 
	#SPI_CR1_SSI
 
SPI_CR1_SSI_Msk


	)

10461 
	#SPI_CR1_SSM_Pos
 (9U)

	)

10462 
	#SPI_CR1_SSM_Msk
 (0x1UL << 
SPI_CR1_SSM_Pos
√ã

	)

10463 
	#SPI_CR1_SSM
 
SPI_CR1_SSM_Msk


	)

10464 
	#SPI_CR1_RXONLY_Pos
 (10U)

	)

10465 
	#SPI_CR1_RXONLY_Msk
 (0x1UL << 
SPI_CR1_RXONLY_Pos
√ã

	)

10466 
	#SPI_CR1_RXONLY
 
SPI_CR1_RXONLY_Msk


	)

10467 
	#SPI_CR1_DFF_Pos
 (11U)

	)

10468 
	#SPI_CR1_DFF_Msk
 (0x1UL << 
SPI_CR1_DFF_Pos
√ã

	)

10469 
	#SPI_CR1_DFF
 
SPI_CR1_DFF_Msk


	)

10470 
	#SPI_CR1_CRCNEXT_Pos
 (12U)

	)

10471 
	#SPI_CR1_CRCNEXT_Msk
 (0x1UL << 
SPI_CR1_CRCNEXT_Pos
√ã

	)

10472 
	#SPI_CR1_CRCNEXT
 
SPI_CR1_CRCNEXT_Msk


	)

10473 
	#SPI_CR1_CRCEN_Pos
 (13U)

	)

10474 
	#SPI_CR1_CRCEN_Msk
 (0x1UL << 
SPI_CR1_CRCEN_Pos
√ã

	)

10475 
	#SPI_CR1_CRCEN
 
SPI_CR1_CRCEN_Msk


	)

10476 
	#SPI_CR1_BIDIOE_Pos
 (14U)

	)

10477 
	#SPI_CR1_BIDIOE_Msk
 (0x1UL << 
SPI_CR1_BIDIOE_Pos
√ã

	)

10478 
	#SPI_CR1_BIDIOE
 
SPI_CR1_BIDIOE_Msk


	)

10479 
	#SPI_CR1_BIDIMODE_Pos
 (15U)

	)

10480 
	#SPI_CR1_BIDIMODE_Msk
 (0x1UL << 
SPI_CR1_BIDIMODE_Pos
√ã

	)

10481 
	#SPI_CR1_BIDIMODE
 
SPI_CR1_BIDIMODE_Msk


	)

10484 
	#SPI_CR2_RXDMAEN_Pos
 (0U)

	)

10485 
	#SPI_CR2_RXDMAEN_Msk
 (0x1UL << 
SPI_CR2_RXDMAEN_Pos
√ã

	)

10486 
	#SPI_CR2_RXDMAEN
 
SPI_CR2_RXDMAEN_Msk


	)

10487 
	#SPI_CR2_TXDMAEN_Pos
 (1U)

	)

10488 
	#SPI_CR2_TXDMAEN_Msk
 (0x1UL << 
SPI_CR2_TXDMAEN_Pos
√ã

	)

10489 
	#SPI_CR2_TXDMAEN
 
SPI_CR2_TXDMAEN_Msk


	)

10490 
	#SPI_CR2_SSOE_Pos
 (2U)

	)

10491 
	#SPI_CR2_SSOE_Msk
 (0x1UL << 
SPI_CR2_SSOE_Pos
√ã

	)

10492 
	#SPI_CR2_SSOE
 
SPI_CR2_SSOE_Msk


	)

10493 
	#SPI_CR2_ERRIE_Pos
 (5U)

	)

10494 
	#SPI_CR2_ERRIE_Msk
 (0x1UL << 
SPI_CR2_ERRIE_Pos
√ã

	)

10495 
	#SPI_CR2_ERRIE
 
SPI_CR2_ERRIE_Msk


	)

10496 
	#SPI_CR2_RXNEIE_Pos
 (6U)

	)

10497 
	#SPI_CR2_RXNEIE_Msk
 (0x1UL << 
SPI_CR2_RXNEIE_Pos
√ã

	)

10498 
	#SPI_CR2_RXNEIE
 
SPI_CR2_RXNEIE_Msk


	)

10499 
	#SPI_CR2_TXEIE_Pos
 (7U)

	)

10500 
	#SPI_CR2_TXEIE_Msk
 (0x1UL << 
SPI_CR2_TXEIE_Pos
√ã

	)

10501 
	#SPI_CR2_TXEIE
 
SPI_CR2_TXEIE_Msk


	)

10504 
	#SPI_SR_RXNE_Pos
 (0U)

	)

10505 
	#SPI_SR_RXNE_Msk
 (0x1UL << 
SPI_SR_RXNE_Pos
√ã

	)

10506 
	#SPI_SR_RXNE
 
SPI_SR_RXNE_Msk


	)

10507 
	#SPI_SR_TXE_Pos
 (1U)

	)

10508 
	#SPI_SR_TXE_Msk
 (0x1UL << 
SPI_SR_TXE_Pos
√ã

	)

10509 
	#SPI_SR_TXE
 
SPI_SR_TXE_Msk


	)

10510 
	#SPI_SR_CHSIDE_Pos
 (2U)

	)

10511 
	#SPI_SR_CHSIDE_Msk
 (0x1UL << 
SPI_SR_CHSIDE_Pos
√ã

	)

10512 
	#SPI_SR_CHSIDE
 
SPI_SR_CHSIDE_Msk


	)

10513 
	#SPI_SR_UDR_Pos
 (3U)

	)

10514 
	#SPI_SR_UDR_Msk
 (0x1UL << 
SPI_SR_UDR_Pos
√ã

	)

10515 
	#SPI_SR_UDR
 
SPI_SR_UDR_Msk


	)

10516 
	#SPI_SR_CRCERR_Pos
 (4U)

	)

10517 
	#SPI_SR_CRCERR_Msk
 (0x1UL << 
SPI_SR_CRCERR_Pos
√ã

	)

10518 
	#SPI_SR_CRCERR
 
SPI_SR_CRCERR_Msk


	)

10519 
	#SPI_SR_MODF_Pos
 (5U)

	)

10520 
	#SPI_SR_MODF_Msk
 (0x1UL << 
SPI_SR_MODF_Pos
√ã

	)

10521 
	#SPI_SR_MODF
 
SPI_SR_MODF_Msk


	)

10522 
	#SPI_SR_OVR_Pos
 (6U)

	)

10523 
	#SPI_SR_OVR_Msk
 (0x1UL << 
SPI_SR_OVR_Pos
√ã

	)

10524 
	#SPI_SR_OVR
 
SPI_SR_OVR_Msk


	)

10525 
	#SPI_SR_BSY_Pos
 (7U)

	)

10526 
	#SPI_SR_BSY_Msk
 (0x1UL << 
SPI_SR_BSY_Pos
√ã

	)

10527 
	#SPI_SR_BSY
 
SPI_SR_BSY_Msk


	)

10530 
	#SPI_DR_DR_Pos
 (0U)

	)

10531 
	#SPI_DR_DR_Msk
 (0xFFFFUL << 
SPI_DR_DR_Pos
√ã

	)

10532 
	#SPI_DR_DR
 
SPI_DR_DR_Msk


	)

10535 
	#SPI_CRCPR_CRCPOLY_Pos
 (0U)

	)

10536 
	#SPI_CRCPR_CRCPOLY_Msk
 (0xFFFFUL << 
SPI_CRCPR_CRCPOLY_Pos
√ã

	)

10537 
	#SPI_CRCPR_CRCPOLY
 
SPI_CRCPR_CRCPOLY_Msk


	)

10540 
	#SPI_RXCRCR_RXCRC_Pos
 (0U)

	)

10541 
	#SPI_RXCRCR_RXCRC_Msk
 (0xFFFFUL << 
SPI_RXCRCR_RXCRC_Pos
√ã

	)

10542 
	#SPI_RXCRCR_RXCRC
 
SPI_RXCRCR_RXCRC_Msk


	)

10545 
	#SPI_TXCRCR_TXCRC_Pos
 (0U)

	)

10546 
	#SPI_TXCRCR_TXCRC_Msk
 (0xFFFFUL << 
SPI_TXCRCR_TXCRC_Pos
√ã

	)

10547 
	#SPI_TXCRCR_TXCRC
 
SPI_TXCRCR_TXCRC_Msk


	)

10550 
	#SPI_I2SCFGR_CHLEN_Pos
 (0U)

	)

10551 
	#SPI_I2SCFGR_CHLEN_Msk
 (0x1UL << 
SPI_I2SCFGR_CHLEN_Pos
√ã

	)

10552 
	#SPI_I2SCFGR_CHLEN
 
SPI_I2SCFGR_CHLEN_Msk


	)

10554 
	#SPI_I2SCFGR_DATLEN_Pos
 (1U)

	)

10555 
	#SPI_I2SCFGR_DATLEN_Msk
 (0x3UL << 
SPI_I2SCFGR_DATLEN_Pos
√ã

	)

10556 
	#SPI_I2SCFGR_DATLEN
 
SPI_I2SCFGR_DATLEN_Msk


	)

10557 
	#SPI_I2SCFGR_DATLEN_0
 (0x1UL << 
SPI_I2SCFGR_DATLEN_Pos
√ã

	)

10558 
	#SPI_I2SCFGR_DATLEN_1
 (0x2UL << 
SPI_I2SCFGR_DATLEN_Pos
√ã

	)

10560 
	#SPI_I2SCFGR_CKPOL_Pos
 (3U)

	)

10561 
	#SPI_I2SCFGR_CKPOL_Msk
 (0x1UL << 
SPI_I2SCFGR_CKPOL_Pos
√ã

	)

10562 
	#SPI_I2SCFGR_CKPOL
 
SPI_I2SCFGR_CKPOL_Msk


	)

10564 
	#SPI_I2SCFGR_I2SSTD_Pos
 (4U)

	)

10565 
	#SPI_I2SCFGR_I2SSTD_Msk
 (0x3UL << 
SPI_I2SCFGR_I2SSTD_Pos
√ã

	)

10566 
	#SPI_I2SCFGR_I2SSTD
 
SPI_I2SCFGR_I2SSTD_Msk


	)

10567 
	#SPI_I2SCFGR_I2SSTD_0
 (0x1UL << 
SPI_I2SCFGR_I2SSTD_Pos
√ã

	)

10568 
	#SPI_I2SCFGR_I2SSTD_1
 (0x2UL << 
SPI_I2SCFGR_I2SSTD_Pos
√ã

	)

10570 
	#SPI_I2SCFGR_PCMSYNC_Pos
 (7U)

	)

10571 
	#SPI_I2SCFGR_PCMSYNC_Msk
 (0x1UL << 
SPI_I2SCFGR_PCMSYNC_Pos
√ã

	)

10572 
	#SPI_I2SCFGR_PCMSYNC
 
SPI_I2SCFGR_PCMSYNC_Msk


	)

10574 
	#SPI_I2SCFGR_I2SCFG_Pos
 (8U)

	)

10575 
	#SPI_I2SCFGR_I2SCFG_Msk
 (0x3UL << 
SPI_I2SCFGR_I2SCFG_Pos
√ã

	)

10576 
	#SPI_I2SCFGR_I2SCFG
 
SPI_I2SCFGR_I2SCFG_Msk


	)

10577 
	#SPI_I2SCFGR_I2SCFG_0
 (0x1UL << 
SPI_I2SCFGR_I2SCFG_Pos
√ã

	)

10578 
	#SPI_I2SCFGR_I2SCFG_1
 (0x2UL << 
SPI_I2SCFGR_I2SCFG_Pos
√ã

	)

10580 
	#SPI_I2SCFGR_I2SE_Pos
 (10U)

	)

10581 
	#SPI_I2SCFGR_I2SE_Msk
 (0x1UL << 
SPI_I2SCFGR_I2SE_Pos
√ã

	)

10582 
	#SPI_I2SCFGR_I2SE
 
SPI_I2SCFGR_I2SE_Msk


	)

10583 
	#SPI_I2SCFGR_I2SMOD_Pos
 (11U)

	)

10584 
	#SPI_I2SCFGR_I2SMOD_Msk
 (0x1UL << 
SPI_I2SCFGR_I2SMOD_Pos
√ã

	)

10585 
	#SPI_I2SCFGR_I2SMOD
 
SPI_I2SCFGR_I2SMOD_Msk


	)

10587 
	#SPI_I2SPR_I2SDIV_Pos
 (0U)

	)

10588 
	#SPI_I2SPR_I2SDIV_Msk
 (0xFFUL << 
SPI_I2SPR_I2SDIV_Pos
√ã

	)

10589 
	#SPI_I2SPR_I2SDIV
 
SPI_I2SPR_I2SDIV_Msk


	)

10590 
	#SPI_I2SPR_ODD_Pos
 (8U)

	)

10591 
	#SPI_I2SPR_ODD_Msk
 (0x1UL << 
SPI_I2SPR_ODD_Pos
√ã

	)

10592 
	#SPI_I2SPR_ODD
 
SPI_I2SPR_ODD_Msk


	)

10593 
	#SPI_I2SPR_MCKOE_Pos
 (9U)

	)

10594 
	#SPI_I2SPR_MCKOE_Msk
 (0x1UL << 
SPI_I2SPR_MCKOE_Pos
√ã

	)

10595 
	#SPI_I2SPR_MCKOE
 
SPI_I2SPR_MCKOE_Msk


	)

10604 
	#I2C_CR1_PE_Pos
 (0U)

	)

10605 
	#I2C_CR1_PE_Msk
 (0x1UL << 
I2C_CR1_PE_Pos
√ã

	)

10606 
	#I2C_CR1_PE
 
I2C_CR1_PE_Msk


	)

10607 
	#I2C_CR1_SMBUS_Pos
 (1U)

	)

10608 
	#I2C_CR1_SMBUS_Msk
 (0x1UL << 
I2C_CR1_SMBUS_Pos
√ã

	)

10609 
	#I2C_CR1_SMBUS
 
I2C_CR1_SMBUS_Msk


	)

10610 
	#I2C_CR1_SMBTYPE_Pos
 (3U)

	)

10611 
	#I2C_CR1_SMBTYPE_Msk
 (0x1UL << 
I2C_CR1_SMBTYPE_Pos
√ã

	)

10612 
	#I2C_CR1_SMBTYPE
 
I2C_CR1_SMBTYPE_Msk


	)

10613 
	#I2C_CR1_ENARP_Pos
 (4U)

	)

10614 
	#I2C_CR1_ENARP_Msk
 (0x1UL << 
I2C_CR1_ENARP_Pos
√ã

	)

10615 
	#I2C_CR1_ENARP
 
I2C_CR1_ENARP_Msk


	)

10616 
	#I2C_CR1_ENPEC_Pos
 (5U)

	)

10617 
	#I2C_CR1_ENPEC_Msk
 (0x1UL << 
I2C_CR1_ENPEC_Pos
√ã

	)

10618 
	#I2C_CR1_ENPEC
 
I2C_CR1_ENPEC_Msk


	)

10619 
	#I2C_CR1_ENGC_Pos
 (6U)

	)

10620 
	#I2C_CR1_ENGC_Msk
 (0x1UL << 
I2C_CR1_ENGC_Pos
√ã

	)

10621 
	#I2C_CR1_ENGC
 
I2C_CR1_ENGC_Msk


	)

10622 
	#I2C_CR1_NOSTRETCH_Pos
 (7U)

	)

10623 
	#I2C_CR1_NOSTRETCH_Msk
 (0x1UL << 
I2C_CR1_NOSTRETCH_Pos
√ã

	)

10624 
	#I2C_CR1_NOSTRETCH
 
I2C_CR1_NOSTRETCH_Msk


	)

10625 
	#I2C_CR1_START_Pos
 (8U)

	)

10626 
	#I2C_CR1_START_Msk
 (0x1UL << 
I2C_CR1_START_Pos
√ã

	)

10627 
	#I2C_CR1_START
 
I2C_CR1_START_Msk


	)

10628 
	#I2C_CR1_STOP_Pos
 (9U)

	)

10629 
	#I2C_CR1_STOP_Msk
 (0x1UL << 
I2C_CR1_STOP_Pos
√ã

	)

10630 
	#I2C_CR1_STOP
 
I2C_CR1_STOP_Msk


	)

10631 
	#I2C_CR1_ACK_Pos
 (10U)

	)

10632 
	#I2C_CR1_ACK_Msk
 (0x1UL << 
I2C_CR1_ACK_Pos
√ã

	)

10633 
	#I2C_CR1_ACK
 
I2C_CR1_ACK_Msk


	)

10634 
	#I2C_CR1_POS_Pos
 (11U)

	)

10635 
	#I2C_CR1_POS_Msk
 (0x1UL << 
I2C_CR1_POS_Pos
√ã

	)

10636 
	#I2C_CR1_POS
 
I2C_CR1_POS_Msk


	)

10637 
	#I2C_CR1_PEC_Pos
 (12U)

	)

10638 
	#I2C_CR1_PEC_Msk
 (0x1UL << 
I2C_CR1_PEC_Pos
√ã

	)

10639 
	#I2C_CR1_PEC
 
I2C_CR1_PEC_Msk


	)

10640 
	#I2C_CR1_ALERT_Pos
 (13U)

	)

10641 
	#I2C_CR1_ALERT_Msk
 (0x1UL << 
I2C_CR1_ALERT_Pos
√ã

	)

10642 
	#I2C_CR1_ALERT
 
I2C_CR1_ALERT_Msk


	)

10643 
	#I2C_CR1_SWRST_Pos
 (15U)

	)

10644 
	#I2C_CR1_SWRST_Msk
 (0x1UL << 
I2C_CR1_SWRST_Pos
√ã

	)

10645 
	#I2C_CR1_SWRST
 
I2C_CR1_SWRST_Msk


	)

10648 
	#I2C_CR2_FREQ_Pos
 (0U)

	)

10649 
	#I2C_CR2_FREQ_Msk
 (0x3FUL << 
I2C_CR2_FREQ_Pos
√ã

	)

10650 
	#I2C_CR2_FREQ
 
I2C_CR2_FREQ_Msk


	)

10651 
	#I2C_CR2_FREQ_0
 (0x01UL << 
I2C_CR2_FREQ_Pos
√ã

	)

10652 
	#I2C_CR2_FREQ_1
 (0x02UL << 
I2C_CR2_FREQ_Pos
√ã

	)

10653 
	#I2C_CR2_FREQ_2
 (0x04UL << 
I2C_CR2_FREQ_Pos
√ã

	)

10654 
	#I2C_CR2_FREQ_3
 (0x08UL << 
I2C_CR2_FREQ_Pos
√ã

	)

10655 
	#I2C_CR2_FREQ_4
 (0x10UL << 
I2C_CR2_FREQ_Pos
√ã

	)

10656 
	#I2C_CR2_FREQ_5
 (0x20UL << 
I2C_CR2_FREQ_Pos
√ã

	)

10658 
	#I2C_CR2_ITERREN_Pos
 (8U)

	)

10659 
	#I2C_CR2_ITERREN_Msk
 (0x1UL << 
I2C_CR2_ITERREN_Pos
√ã

	)

10660 
	#I2C_CR2_ITERREN
 
I2C_CR2_ITERREN_Msk


	)

10661 
	#I2C_CR2_ITEVTEN_Pos
 (9U)

	)

10662 
	#I2C_CR2_ITEVTEN_Msk
 (0x1UL << 
I2C_CR2_ITEVTEN_Pos
√ã

	)

10663 
	#I2C_CR2_ITEVTEN
 
I2C_CR2_ITEVTEN_Msk


	)

10664 
	#I2C_CR2_ITBUFEN_Pos
 (10U)

	)

10665 
	#I2C_CR2_ITBUFEN_Msk
 (0x1UL << 
I2C_CR2_ITBUFEN_Pos
√ã

	)

10666 
	#I2C_CR2_ITBUFEN
 
I2C_CR2_ITBUFEN_Msk


	)

10667 
	#I2C_CR2_DMAEN_Pos
 (11U)

	)

10668 
	#I2C_CR2_DMAEN_Msk
 (0x1UL << 
I2C_CR2_DMAEN_Pos
√ã

	)

10669 
	#I2C_CR2_DMAEN
 
I2C_CR2_DMAEN_Msk


	)

10670 
	#I2C_CR2_LAST_Pos
 (12U)

	)

10671 
	#I2C_CR2_LAST_Msk
 (0x1UL << 
I2C_CR2_LAST_Pos
√ã

	)

10672 
	#I2C_CR2_LAST
 
I2C_CR2_LAST_Msk


	)

10675 
	#I2C_OAR1_ADD1_7
 0x000000FEU

	)

10676 
	#I2C_OAR1_ADD8_9
 0x00000300U

	)

10678 
	#I2C_OAR1_ADD0_Pos
 (0U)

	)

10679 
	#I2C_OAR1_ADD0_Msk
 (0x1UL << 
I2C_OAR1_ADD0_Pos
√ã

	)

10680 
	#I2C_OAR1_ADD0
 
I2C_OAR1_ADD0_Msk


	)

10681 
	#I2C_OAR1_ADD1_Pos
 (1U)

	)

10682 
	#I2C_OAR1_ADD1_Msk
 (0x1UL << 
I2C_OAR1_ADD1_Pos
√ã

	)

10683 
	#I2C_OAR1_ADD1
 
I2C_OAR1_ADD1_Msk


	)

10684 
	#I2C_OAR1_ADD2_Pos
 (2U)

	)

10685 
	#I2C_OAR1_ADD2_Msk
 (0x1UL << 
I2C_OAR1_ADD2_Pos
√ã

	)

10686 
	#I2C_OAR1_ADD2
 
I2C_OAR1_ADD2_Msk


	)

10687 
	#I2C_OAR1_ADD3_Pos
 (3U)

	)

10688 
	#I2C_OAR1_ADD3_Msk
 (0x1UL << 
I2C_OAR1_ADD3_Pos
√ã

	)

10689 
	#I2C_OAR1_ADD3
 
I2C_OAR1_ADD3_Msk


	)

10690 
	#I2C_OAR1_ADD4_Pos
 (4U)

	)

10691 
	#I2C_OAR1_ADD4_Msk
 (0x1UL << 
I2C_OAR1_ADD4_Pos
√ã

	)

10692 
	#I2C_OAR1_ADD4
 
I2C_OAR1_ADD4_Msk


	)

10693 
	#I2C_OAR1_ADD5_Pos
 (5U)

	)

10694 
	#I2C_OAR1_ADD5_Msk
 (0x1UL << 
I2C_OAR1_ADD5_Pos
√ã

	)

10695 
	#I2C_OAR1_ADD5
 
I2C_OAR1_ADD5_Msk


	)

10696 
	#I2C_OAR1_ADD6_Pos
 (6U)

	)

10697 
	#I2C_OAR1_ADD6_Msk
 (0x1UL << 
I2C_OAR1_ADD6_Pos
√ã

	)

10698 
	#I2C_OAR1_ADD6
 
I2C_OAR1_ADD6_Msk


	)

10699 
	#I2C_OAR1_ADD7_Pos
 (7U)

	)

10700 
	#I2C_OAR1_ADD7_Msk
 (0x1UL << 
I2C_OAR1_ADD7_Pos
√ã

	)

10701 
	#I2C_OAR1_ADD7
 
I2C_OAR1_ADD7_Msk


	)

10702 
	#I2C_OAR1_ADD8_Pos
 (8U)

	)

10703 
	#I2C_OAR1_ADD8_Msk
 (0x1UL << 
I2C_OAR1_ADD8_Pos
√ã

	)

10704 
	#I2C_OAR1_ADD8
 
I2C_OAR1_ADD8_Msk


	)

10705 
	#I2C_OAR1_ADD9_Pos
 (9U)

	)

10706 
	#I2C_OAR1_ADD9_Msk
 (0x1UL << 
I2C_OAR1_ADD9_Pos
√ã

	)

10707 
	#I2C_OAR1_ADD9
 
I2C_OAR1_ADD9_Msk


	)

10709 
	#I2C_OAR1_ADDMODE_Pos
 (15U)

	)

10710 
	#I2C_OAR1_ADDMODE_Msk
 (0x1UL << 
I2C_OAR1_ADDMODE_Pos
√ã

	)

10711 
	#I2C_OAR1_ADDMODE
 
I2C_OAR1_ADDMODE_Msk


	)

10714 
	#I2C_OAR2_ENDUAL_Pos
 (0U)

	)

10715 
	#I2C_OAR2_ENDUAL_Msk
 (0x1UL << 
I2C_OAR2_ENDUAL_Pos
√ã

	)

10716 
	#I2C_OAR2_ENDUAL
 
I2C_OAR2_ENDUAL_Msk


	)

10717 
	#I2C_OAR2_ADD2_Pos
 (1U)

	)

10718 
	#I2C_OAR2_ADD2_Msk
 (0x7FUL << 
I2C_OAR2_ADD2_Pos
√ã

	)

10719 
	#I2C_OAR2_ADD2
 
I2C_OAR2_ADD2_Msk


	)

10722 
	#I2C_DR_DR_Pos
 (0U)

	)

10723 
	#I2C_DR_DR_Msk
 (0xFFUL << 
I2C_DR_DR_Pos
√ã

	)

10724 
	#I2C_DR_DR
 
I2C_DR_DR_Msk


	)

10727 
	#I2C_SR1_SB_Pos
 (0U)

	)

10728 
	#I2C_SR1_SB_Msk
 (0x1UL << 
I2C_SR1_SB_Pos
√ã

	)

10729 
	#I2C_SR1_SB
 
I2C_SR1_SB_Msk


	)

10730 
	#I2C_SR1_ADDR_Pos
 (1U)

	)

10731 
	#I2C_SR1_ADDR_Msk
 (0x1UL << 
I2C_SR1_ADDR_Pos
√ã

	)

10732 
	#I2C_SR1_ADDR
 
I2C_SR1_ADDR_Msk


	)

10733 
	#I2C_SR1_BTF_Pos
 (2U)

	)

10734 
	#I2C_SR1_BTF_Msk
 (0x1UL << 
I2C_SR1_BTF_Pos
√ã

	)

10735 
	#I2C_SR1_BTF
 
I2C_SR1_BTF_Msk


	)

10736 
	#I2C_SR1_ADD10_Pos
 (3U)

	)

10737 
	#I2C_SR1_ADD10_Msk
 (0x1UL << 
I2C_SR1_ADD10_Pos
√ã

	)

10738 
	#I2C_SR1_ADD10
 
I2C_SR1_ADD10_Msk


	)

10739 
	#I2C_SR1_STOPF_Pos
 (4U)

	)

10740 
	#I2C_SR1_STOPF_Msk
 (0x1UL << 
I2C_SR1_STOPF_Pos
√ã

	)

10741 
	#I2C_SR1_STOPF
 
I2C_SR1_STOPF_Msk


	)

10742 
	#I2C_SR1_RXNE_Pos
 (6U)

	)

10743 
	#I2C_SR1_RXNE_Msk
 (0x1UL << 
I2C_SR1_RXNE_Pos
√ã

	)

10744 
	#I2C_SR1_RXNE
 
I2C_SR1_RXNE_Msk


	)

10745 
	#I2C_SR1_TXE_Pos
 (7U)

	)

10746 
	#I2C_SR1_TXE_Msk
 (0x1UL << 
I2C_SR1_TXE_Pos
√ã

	)

10747 
	#I2C_SR1_TXE
 
I2C_SR1_TXE_Msk


	)

10748 
	#I2C_SR1_BERR_Pos
 (8U)

	)

10749 
	#I2C_SR1_BERR_Msk
 (0x1UL << 
I2C_SR1_BERR_Pos
√ã

	)

10750 
	#I2C_SR1_BERR
 
I2C_SR1_BERR_Msk


	)

10751 
	#I2C_SR1_ARLO_Pos
 (9U)

	)

10752 
	#I2C_SR1_ARLO_Msk
 (0x1UL << 
I2C_SR1_ARLO_Pos
√ã

	)

10753 
	#I2C_SR1_ARLO
 
I2C_SR1_ARLO_Msk


	)

10754 
	#I2C_SR1_AF_Pos
 (10U)

	)

10755 
	#I2C_SR1_AF_Msk
 (0x1UL << 
I2C_SR1_AF_Pos
√ã

	)

10756 
	#I2C_SR1_AF
 
I2C_SR1_AF_Msk


	)

10757 
	#I2C_SR1_OVR_Pos
 (11U)

	)

10758 
	#I2C_SR1_OVR_Msk
 (0x1UL << 
I2C_SR1_OVR_Pos
√ã

	)

10759 
	#I2C_SR1_OVR
 
I2C_SR1_OVR_Msk


	)

10760 
	#I2C_SR1_PECERR_Pos
 (12U)

	)

10761 
	#I2C_SR1_PECERR_Msk
 (0x1UL << 
I2C_SR1_PECERR_Pos
√ã

	)

10762 
	#I2C_SR1_PECERR
 
I2C_SR1_PECERR_Msk


	)

10763 
	#I2C_SR1_TIMEOUT_Pos
 (14U)

	)

10764 
	#I2C_SR1_TIMEOUT_Msk
 (0x1UL << 
I2C_SR1_TIMEOUT_Pos
√ã

	)

10765 
	#I2C_SR1_TIMEOUT
 
I2C_SR1_TIMEOUT_Msk


	)

10766 
	#I2C_SR1_SMBALERT_Pos
 (15U)

	)

10767 
	#I2C_SR1_SMBALERT_Msk
 (0x1UL << 
I2C_SR1_SMBALERT_Pos
√ã

	)

10768 
	#I2C_SR1_SMBALERT
 
I2C_SR1_SMBALERT_Msk


	)

10771 
	#I2C_SR2_MSL_Pos
 (0U)

	)

10772 
	#I2C_SR2_MSL_Msk
 (0x1UL << 
I2C_SR2_MSL_Pos
√ã

	)

10773 
	#I2C_SR2_MSL
 
I2C_SR2_MSL_Msk


	)

10774 
	#I2C_SR2_BUSY_Pos
 (1U)

	)

10775 
	#I2C_SR2_BUSY_Msk
 (0x1UL << 
I2C_SR2_BUSY_Pos
√ã

	)

10776 
	#I2C_SR2_BUSY
 
I2C_SR2_BUSY_Msk


	)

10777 
	#I2C_SR2_TRA_Pos
 (2U)

	)

10778 
	#I2C_SR2_TRA_Msk
 (0x1UL << 
I2C_SR2_TRA_Pos
√ã

	)

10779 
	#I2C_SR2_TRA
 
I2C_SR2_TRA_Msk


	)

10780 
	#I2C_SR2_GENCALL_Pos
 (4U)

	)

10781 
	#I2C_SR2_GENCALL_Msk
 (0x1UL << 
I2C_SR2_GENCALL_Pos
√ã

	)

10782 
	#I2C_SR2_GENCALL
 
I2C_SR2_GENCALL_Msk


	)

10783 
	#I2C_SR2_SMBDEFAULT_Pos
 (5U)

	)

10784 
	#I2C_SR2_SMBDEFAULT_Msk
 (0x1UL << 
I2C_SR2_SMBDEFAULT_Pos
√ã

	)

10785 
	#I2C_SR2_SMBDEFAULT
 
I2C_SR2_SMBDEFAULT_Msk


	)

10786 
	#I2C_SR2_SMBHOST_Pos
 (6U)

	)

10787 
	#I2C_SR2_SMBHOST_Msk
 (0x1UL << 
I2C_SR2_SMBHOST_Pos
√ã

	)

10788 
	#I2C_SR2_SMBHOST
 
I2C_SR2_SMBHOST_Msk


	)

10789 
	#I2C_SR2_DUALF_Pos
 (7U)

	)

10790 
	#I2C_SR2_DUALF_Msk
 (0x1UL << 
I2C_SR2_DUALF_Pos
√ã

	)

10791 
	#I2C_SR2_DUALF
 
I2C_SR2_DUALF_Msk


	)

10792 
	#I2C_SR2_PEC_Pos
 (8U)

	)

10793 
	#I2C_SR2_PEC_Msk
 (0xFFUL << 
I2C_SR2_PEC_Pos
√ã

	)

10794 
	#I2C_SR2_PEC
 
I2C_SR2_PEC_Msk


	)

10797 
	#I2C_CCR_CCR_Pos
 (0U)

	)

10798 
	#I2C_CCR_CCR_Msk
 (0xFFFUL << 
I2C_CCR_CCR_Pos
√ã

	)

10799 
	#I2C_CCR_CCR
 
I2C_CCR_CCR_Msk


	)

10800 
	#I2C_CCR_DUTY_Pos
 (14U)

	)

10801 
	#I2C_CCR_DUTY_Msk
 (0x1UL << 
I2C_CCR_DUTY_Pos
√ã

	)

10802 
	#I2C_CCR_DUTY
 
I2C_CCR_DUTY_Msk


	)

10803 
	#I2C_CCR_FS_Pos
 (15U)

	)

10804 
	#I2C_CCR_FS_Msk
 (0x1UL << 
I2C_CCR_FS_Pos
√ã

	)

10805 
	#I2C_CCR_FS
 
I2C_CCR_FS_Msk


	)

10808 
	#I2C_TRISE_TRISE_Pos
 (0U)

	)

10809 
	#I2C_TRISE_TRISE_Msk
 (0x3FUL << 
I2C_TRISE_TRISE_Pos
√ã

	)

10810 
	#I2C_TRISE_TRISE
 
I2C_TRISE_TRISE_Msk


	)

10819 
	#USART_SR_PE_Pos
 (0U)

	)

10820 
	#USART_SR_PE_Msk
 (0x1UL << 
USART_SR_PE_Pos
√ã

	)

10821 
	#USART_SR_PE
 
USART_SR_PE_Msk


	)

10822 
	#USART_SR_FE_Pos
 (1U)

	)

10823 
	#USART_SR_FE_Msk
 (0x1UL << 
USART_SR_FE_Pos
√ã

	)

10824 
	#USART_SR_FE
 
USART_SR_FE_Msk


	)

10825 
	#USART_SR_NE_Pos
 (2U)

	)

10826 
	#USART_SR_NE_Msk
 (0x1UL << 
USART_SR_NE_Pos
√ã

	)

10827 
	#USART_SR_NE
 
USART_SR_NE_Msk


	)

10828 
	#USART_SR_ORE_Pos
 (3U)

	)

10829 
	#USART_SR_ORE_Msk
 (0x1UL << 
USART_SR_ORE_Pos
√ã

	)

10830 
	#USART_SR_ORE
 
USART_SR_ORE_Msk


	)

10831 
	#USART_SR_IDLE_Pos
 (4U)

	)

10832 
	#USART_SR_IDLE_Msk
 (0x1UL << 
USART_SR_IDLE_Pos
√ã

	)

10833 
	#USART_SR_IDLE
 
USART_SR_IDLE_Msk


	)

10834 
	#USART_SR_RXNE_Pos
 (5U)

	)

10835 
	#USART_SR_RXNE_Msk
 (0x1UL << 
USART_SR_RXNE_Pos
√ã

	)

10836 
	#USART_SR_RXNE
 
USART_SR_RXNE_Msk


	)

10837 
	#USART_SR_TC_Pos
 (6U)

	)

10838 
	#USART_SR_TC_Msk
 (0x1UL << 
USART_SR_TC_Pos
√ã

	)

10839 
	#USART_SR_TC
 
USART_SR_TC_Msk


	)

10840 
	#USART_SR_TXE_Pos
 (7U)

	)

10841 
	#USART_SR_TXE_Msk
 (0x1UL << 
USART_SR_TXE_Pos
√ã

	)

10842 
	#USART_SR_TXE
 
USART_SR_TXE_Msk


	)

10843 
	#USART_SR_LBD_Pos
 (8U)

	)

10844 
	#USART_SR_LBD_Msk
 (0x1UL << 
USART_SR_LBD_Pos
√ã

	)

10845 
	#USART_SR_LBD
 
USART_SR_LBD_Msk


	)

10846 
	#USART_SR_CTS_Pos
 (9U)

	)

10847 
	#USART_SR_CTS_Msk
 (0x1UL << 
USART_SR_CTS_Pos
√ã

	)

10848 
	#USART_SR_CTS
 
USART_SR_CTS_Msk


	)

10851 
	#USART_DR_DR_Pos
 (0U)

	)

10852 
	#USART_DR_DR_Msk
 (0x1FFUL << 
USART_DR_DR_Pos
√ã

	)

10853 
	#USART_DR_DR
 
USART_DR_DR_Msk


	)

10856 
	#USART_BRR_DIV_F√∏Àòi‚ÅÑ_Pos
 (0U)

	)

10857 
	#USART_BRR_DIV_F√∏Àòi‚ÅÑ_Msk
 (0xFUL << 
USART_BRR_DIV_F√∏Àòi‚ÅÑ_Pos
√ã

	)

10858 
	#USART_BRR_DIV_F√∏Àòi‚ÅÑ
 
USART_BRR_DIV_F√∏Àòi‚ÅÑ_Msk


	)

10859 
	#USART_BRR_DIV_M‚Ñ¢tis√ü_Pos
 (4U)

	)

10860 
	#USART_BRR_DIV_M‚Ñ¢tis√ü_Msk
 (0xFFFUL << 
USART_BRR_DIV_M‚Ñ¢tis√ü_Pos
√ã

	)

10861 
	#USART_BRR_DIV_M‚Ñ¢tis√ü
 
USART_BRR_DIV_M‚Ñ¢tis√ü_Msk


	)

10864 
	#USART_CR1_SBK_Pos
 (0U)

	)

10865 
	#USART_CR1_SBK_Msk
 (0x1UL << 
USART_CR1_SBK_Pos
√ã

	)

10866 
	#USART_CR1_SBK
 
USART_CR1_SBK_Msk


	)

10867 
	#USART_CR1_RWU_Pos
 (1U)

	)

10868 
	#USART_CR1_RWU_Msk
 (0x1UL << 
USART_CR1_RWU_Pos
√ã

	)

10869 
	#USART_CR1_RWU
 
USART_CR1_RWU_Msk


	)

10870 
	#USART_CR1_RE_Pos
 (2U)

	)

10871 
	#USART_CR1_RE_Msk
 (0x1UL << 
USART_CR1_RE_Pos
√ã

	)

10872 
	#USART_CR1_RE
 
USART_CR1_RE_Msk


	)

10873 
	#USART_CR1_TE_Pos
 (3U)

	)

10874 
	#USART_CR1_TE_Msk
 (0x1UL << 
USART_CR1_TE_Pos
√ã

	)

10875 
	#USART_CR1_TE
 
USART_CR1_TE_Msk


	)

10876 
	#USART_CR1_IDLEIE_Pos
 (4U)

	)

10877 
	#USART_CR1_IDLEIE_Msk
 (0x1UL << 
USART_CR1_IDLEIE_Pos
√ã

	)

10878 
	#USART_CR1_IDLEIE
 
USART_CR1_IDLEIE_Msk


	)

10879 
	#USART_CR1_RXNEIE_Pos
 (5U)

	)

10880 
	#USART_CR1_RXNEIE_Msk
 (0x1UL << 
USART_CR1_RXNEIE_Pos
√ã

	)

10881 
	#USART_CR1_RXNEIE
 
USART_CR1_RXNEIE_Msk


	)

10882 
	#USART_CR1_TCIE_Pos
 (6U)

	)

10883 
	#USART_CR1_TCIE_Msk
 (0x1UL << 
USART_CR1_TCIE_Pos
√ã

	)

10884 
	#USART_CR1_TCIE
 
USART_CR1_TCIE_Msk


	)

10885 
	#USART_CR1_TXEIE_Pos
 (7U)

	)

10886 
	#USART_CR1_TXEIE_Msk
 (0x1UL << 
USART_CR1_TXEIE_Pos
√ã

	)

10887 
	#USART_CR1_TXEIE
 
USART_CR1_TXEIE_Msk


	)

10888 
	#USART_CR1_PEIE_Pos
 (8U)

	)

10889 
	#USART_CR1_PEIE_Msk
 (0x1UL << 
USART_CR1_PEIE_Pos
√ã

	)

10890 
	#USART_CR1_PEIE
 
USART_CR1_PEIE_Msk


	)

10891 
	#USART_CR1_PS_Pos
 (9U)

	)

10892 
	#USART_CR1_PS_Msk
 (0x1UL << 
USART_CR1_PS_Pos
√ã

	)

10893 
	#USART_CR1_PS
 
USART_CR1_PS_Msk


	)

10894 
	#USART_CR1_PCE_Pos
 (10U)

	)

10895 
	#USART_CR1_PCE_Msk
 (0x1UL << 
USART_CR1_PCE_Pos
√ã

	)

10896 
	#USART_CR1_PCE
 
USART_CR1_PCE_Msk


	)

10897 
	#USART_CR1_WAKE_Pos
 (11U)

	)

10898 
	#USART_CR1_WAKE_Msk
 (0x1UL << 
USART_CR1_WAKE_Pos
√ã

	)

10899 
	#USART_CR1_WAKE
 
USART_CR1_WAKE_Msk


	)

10900 
	#USART_CR1_M_Pos
 (12U)

	)

10901 
	#USART_CR1_M_Msk
 (0x1UL << 
USART_CR1_M_Pos
√ã

	)

10902 
	#USART_CR1_M
 
USART_CR1_M_Msk


	)

10903 
	#USART_CR1_UE_Pos
 (13U)

	)

10904 
	#USART_CR1_UE_Msk
 (0x1UL << 
USART_CR1_UE_Pos
√ã

	)

10905 
	#USART_CR1_UE
 
USART_CR1_UE_Msk


	)

10908 
	#USART_CR2_ADD_Pos
 (0U)

	)

10909 
	#USART_CR2_ADD_Msk
 (0xFUL << 
USART_CR2_ADD_Pos
√ã

	)

10910 
	#USART_CR2_ADD
 
USART_CR2_ADD_Msk


	)

10911 
	#USART_CR2_LBDL_Pos
 (5U)

	)

10912 
	#USART_CR2_LBDL_Msk
 (0x1UL << 
USART_CR2_LBDL_Pos
√ã

	)

10913 
	#USART_CR2_LBDL
 
USART_CR2_LBDL_Msk


	)

10914 
	#USART_CR2_LBDIE_Pos
 (6U)

	)

10915 
	#USART_CR2_LBDIE_Msk
 (0x1UL << 
USART_CR2_LBDIE_Pos
√ã

	)

10916 
	#USART_CR2_LBDIE
 
USART_CR2_LBDIE_Msk


	)

10917 
	#USART_CR2_LBCL_Pos
 (8U)

	)

10918 
	#USART_CR2_LBCL_Msk
 (0x1UL << 
USART_CR2_LBCL_Pos
√ã

	)

10919 
	#USART_CR2_LBCL
 
USART_CR2_LBCL_Msk


	)

10920 
	#USART_CR2_CPHA_Pos
 (9U)

	)

10921 
	#USART_CR2_CPHA_Msk
 (0x1UL << 
USART_CR2_CPHA_Pos
√ã

	)

10922 
	#USART_CR2_CPHA
 
USART_CR2_CPHA_Msk


	)

10923 
	#USART_CR2_CPOL_Pos
 (10U)

	)

10924 
	#USART_CR2_CPOL_Msk
 (0x1UL << 
USART_CR2_CPOL_Pos
√ã

	)

10925 
	#USART_CR2_CPOL
 
USART_CR2_CPOL_Msk


	)

10926 
	#USART_CR2_CLKEN_Pos
 (11U)

	)

10927 
	#USART_CR2_CLKEN_Msk
 (0x1UL << 
USART_CR2_CLKEN_Pos
√ã

	)

10928 
	#USART_CR2_CLKEN
 
USART_CR2_CLKEN_Msk


	)

10930 
	#USART_CR2_STOP_Pos
 (12U)

	)

10931 
	#USART_CR2_STOP_Msk
 (0x3UL << 
USART_CR2_STOP_Pos
√ã

	)

10932 
	#USART_CR2_STOP
 
USART_CR2_STOP_Msk


	)

10933 
	#USART_CR2_STOP_0
 (0x1UL << 
USART_CR2_STOP_Pos
√ã

	)

10934 
	#USART_CR2_STOP_1
 (0x2UL << 
USART_CR2_STOP_Pos
√ã

	)

10936 
	#USART_CR2_LINEN_Pos
 (14U)

	)

10937 
	#USART_CR2_LINEN_Msk
 (0x1UL << 
USART_CR2_LINEN_Pos
√ã

	)

10938 
	#USART_CR2_LINEN
 
USART_CR2_LINEN_Msk


	)

10941 
	#USART_CR3_EIE_Pos
 (0U)

	)

10942 
	#USART_CR3_EIE_Msk
 (0x1UL << 
USART_CR3_EIE_Pos
√ã

	)

10943 
	#USART_CR3_EIE
 
USART_CR3_EIE_Msk


	)

10944 
	#USART_CR3_IREN_Pos
 (1U)

	)

10945 
	#USART_CR3_IREN_Msk
 (0x1UL << 
USART_CR3_IREN_Pos
√ã

	)

10946 
	#USART_CR3_IREN
 
USART_CR3_IREN_Msk


	)

10947 
	#USART_CR3_IRLP_Pos
 (2U)

	)

10948 
	#USART_CR3_IRLP_Msk
 (0x1UL << 
USART_CR3_IRLP_Pos
√ã

	)

10949 
	#USART_CR3_IRLP
 
USART_CR3_IRLP_Msk


	)

10950 
	#USART_CR3_HDSEL_Pos
 (3U)

	)

10951 
	#USART_CR3_HDSEL_Msk
 (0x1UL << 
USART_CR3_HDSEL_Pos
√ã

	)

10952 
	#USART_CR3_HDSEL
 
USART_CR3_HDSEL_Msk


	)

10953 
	#USART_CR3_NACK_Pos
 (4U)

	)

10954 
	#USART_CR3_NACK_Msk
 (0x1UL << 
USART_CR3_NACK_Pos
√ã

	)

10955 
	#USART_CR3_NACK
 
USART_CR3_NACK_Msk


	)

10956 
	#USART_CR3_SCEN_Pos
 (5U)

	)

10957 
	#USART_CR3_SCEN_Msk
 (0x1UL << 
USART_CR3_SCEN_Pos
√ã

	)

10958 
	#USART_CR3_SCEN
 
USART_CR3_SCEN_Msk


	)

10959 
	#USART_CR3_DMAR_Pos
 (6U)

	)

10960 
	#USART_CR3_DMAR_Msk
 (0x1UL << 
USART_CR3_DMAR_Pos
√ã

	)

10961 
	#USART_CR3_DMAR
 
USART_CR3_DMAR_Msk


	)

10962 
	#USART_CR3_DMAT_Pos
 (7U)

	)

10963 
	#USART_CR3_DMAT_Msk
 (0x1UL << 
USART_CR3_DMAT_Pos
√ã

	)

10964 
	#USART_CR3_DMAT
 
USART_CR3_DMAT_Msk


	)

10965 
	#USART_CR3_RTSE_Pos
 (8U)

	)

10966 
	#USART_CR3_RTSE_Msk
 (0x1UL << 
USART_CR3_RTSE_Pos
√ã

	)

10967 
	#USART_CR3_RTSE
 
USART_CR3_RTSE_Msk


	)

10968 
	#USART_CR3_CTSE_Pos
 (9U)

	)

10969 
	#USART_CR3_CTSE_Msk
 (0x1UL << 
USART_CR3_CTSE_Pos
√ã

	)

10970 
	#USART_CR3_CTSE
 
USART_CR3_CTSE_Msk


	)

10971 
	#USART_CR3_CTSIE_Pos
 (10U)

	)

10972 
	#USART_CR3_CTSIE_Msk
 (0x1UL << 
USART_CR3_CTSIE_Pos
√ã

	)

10973 
	#USART_CR3_CTSIE
 
USART_CR3_CTSIE_Msk


	)

10976 
	#USART_GTPR_PSC_Pos
 (0U)

	)

10977 
	#USART_GTPR_PSC_Msk
 (0xFFUL << 
USART_GTPR_PSC_Pos
√ã

	)

10978 
	#USART_GTPR_PSC
 
USART_GTPR_PSC_Msk


	)

10979 
	#USART_GTPR_PSC_0
 (0x01UL << 
USART_GTPR_PSC_Pos
√ã

	)

10980 
	#USART_GTPR_PSC_1
 (0x02UL << 
USART_GTPR_PSC_Pos
√ã

	)

10981 
	#USART_GTPR_PSC_2
 (0x04UL << 
USART_GTPR_PSC_Pos
√ã

	)

10982 
	#USART_GTPR_PSC_3
 (0x08UL << 
USART_GTPR_PSC_Pos
√ã

	)

10983 
	#USART_GTPR_PSC_4
 (0x10UL << 
USART_GTPR_PSC_Pos
√ã

	)

10984 
	#USART_GTPR_PSC_5
 (0x20UL << 
USART_GTPR_PSC_Pos
√ã

	)

10985 
	#USART_GTPR_PSC_6
 (0x40UL << 
USART_GTPR_PSC_Pos
√ã

	)

10986 
	#USART_GTPR_PSC_7
 (0x80UL << 
USART_GTPR_PSC_Pos
√ã

	)

10988 
	#USART_GTPR_GT_Pos
 (8U)

	)

10989 
	#USART_GTPR_GT_Msk
 (0xFFUL << 
USART_GTPR_GT_Pos
√ã

	)

10990 
	#USART_GTPR_GT
 
USART_GTPR_GT_Msk


	)

10999 
	#DBGMCU_IDCODE_DEV_ID_Pos
 (0U)

	)

11000 
	#DBGMCU_IDCODE_DEV_ID_Msk
 (0xFFFUL << 
DBGMCU_IDCODE_DEV_ID_Pos
√ã

	)

11001 
	#DBGMCU_IDCODE_DEV_ID
 
DBGMCU_IDCODE_DEV_ID_Msk


	)

11003 
	#DBGMCU_IDCODE_REV_ID_Pos
 (16U)

	)

11004 
	#DBGMCU_IDCODE_REV_ID_Msk
 (0xFFFFUL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11005 
	#DBGMCU_IDCODE_REV_ID
 
DBGMCU_IDCODE_REV_ID_Msk


	)

11006 
	#DBGMCU_IDCODE_REV_ID_0
 (0x0001UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11007 
	#DBGMCU_IDCODE_REV_ID_1
 (0x0002UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11008 
	#DBGMCU_IDCODE_REV_ID_2
 (0x0004UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11009 
	#DBGMCU_IDCODE_REV_ID_3
 (0x0008UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11010 
	#DBGMCU_IDCODE_REV_ID_4
 (0x0010UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11011 
	#DBGMCU_IDCODE_REV_ID_5
 (0x0020UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11012 
	#DBGMCU_IDCODE_REV_ID_6
 (0x0040UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11013 
	#DBGMCU_IDCODE_REV_ID_7
 (0x0080UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11014 
	#DBGMCU_IDCODE_REV_ID_8
 (0x0100UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11015 
	#DBGMCU_IDCODE_REV_ID_9
 (0x0200UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11016 
	#DBGMCU_IDCODE_REV_ID_10
 (0x0400UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11017 
	#DBGMCU_IDCODE_REV_ID_11
 (0x0800UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11018 
	#DBGMCU_IDCODE_REV_ID_12
 (0x1000UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11019 
	#DBGMCU_IDCODE_REV_ID_13
 (0x2000UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11020 
	#DBGMCU_IDCODE_REV_ID_14
 (0x4000UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11021 
	#DBGMCU_IDCODE_REV_ID_15
 (0x8000UL << 
DBGMCU_IDCODE_REV_ID_Pos
√ã

	)

11024 
	#DBGMCU_CR_DBG_SLEEP_Pos
 (0U)

	)

11025 
	#DBGMCU_CR_DBG_SLEEP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_SLEEP_Pos
√ã

	)

11026 
	#DBGMCU_CR_DBG_SLEEP
 
DBGMCU_CR_DBG_SLEEP_Msk


	)

11027 
	#DBGMCU_CR_DBG_STOP_Pos
 (1U)

	)

11028 
	#DBGMCU_CR_DBG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_STOP_Pos
√ã

	)

11029 
	#DBGMCU_CR_DBG_STOP
 
DBGMCU_CR_DBG_STOP_Msk


	)

11030 
	#DBGMCU_CR_DBG_STANDBY_Pos
 (2U)

	)

11031 
	#DBGMCU_CR_DBG_STANDBY_Msk
 (0x1UL << 
DBGMCU_CR_DBG_STANDBY_Pos
√ã

	)

11032 
	#DBGMCU_CR_DBG_STANDBY
 
DBGMCU_CR_DBG_STANDBY_Msk


	)

11033 
	#DBGMCU_CR_TRACE_IOEN_Pos
 (5U)

	)

11034 
	#DBGMCU_CR_TRACE_IOEN_Msk
 (0x1UL << 
DBGMCU_CR_TRACE_IOEN_Pos
√ã

	)

11035 
	#DBGMCU_CR_TRACE_IOEN
 
DBGMCU_CR_TRACE_IOEN_Msk


	)

11037 
	#DBGMCU_CR_TRACE_MODE_Pos
 (6U)

	)

11038 
	#DBGMCU_CR_TRACE_MODE_Msk
 (0x3UL << 
DBGMCU_CR_TRACE_MODE_Pos
√ã

	)

11039 
	#DBGMCU_CR_TRACE_MODE
 
DBGMCU_CR_TRACE_MODE_Msk


	)

11040 
	#DBGMCU_CR_TRACE_MODE_0
 (0x1UL << 
DBGMCU_CR_TRACE_MODE_Pos
√ã

	)

11041 
	#DBGMCU_CR_TRACE_MODE_1
 (0x2UL << 
DBGMCU_CR_TRACE_MODE_Pos
√ã

	)

11043 
	#DBGMCU_CR_DBG_IWDG_STOP_Pos
 (8U)

	)

11044 
	#DBGMCU_CR_DBG_IWDG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_IWDG_STOP_Pos
√ã

	)

11045 
	#DBGMCU_CR_DBG_IWDG_STOP
 
DBGMCU_CR_DBG_IWDG_STOP_Msk


	)

11046 
	#DBGMCU_CR_DBG_WWDG_STOP_Pos
 (9U)

	)

11047 
	#DBGMCU_CR_DBG_WWDG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_WWDG_STOP_Pos
√ã

	)

11048 
	#DBGMCU_CR_DBG_WWDG_STOP
 
DBGMCU_CR_DBG_WWDG_STOP_Msk


	)

11049 
	#DBGMCU_CR_DBG_TIM1_STOP_Pos
 (10U)

	)

11050 
	#DBGMCU_CR_DBG_TIM1_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM1_STOP_Pos
√ã

	)

11051 
	#DBGMCU_CR_DBG_TIM1_STOP
 
DBGMCU_CR_DBG_TIM1_STOP_Msk


	)

11052 
	#DBGMCU_CR_DBG_TIM2_STOP_Pos
 (11U)

	)

11053 
	#DBGMCU_CR_DBG_TIM2_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM2_STOP_Pos
√ã

	)

11054 
	#DBGMCU_CR_DBG_TIM2_STOP
 
DBGMCU_CR_DBG_TIM2_STOP_Msk


	)

11055 
	#DBGMCU_CR_DBG_TIM3_STOP_Pos
 (12U)

	)

11056 
	#DBGMCU_CR_DBG_TIM3_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM3_STOP_Pos
√ã

	)

11057 
	#DBGMCU_CR_DBG_TIM3_STOP
 
DBGMCU_CR_DBG_TIM3_STOP_Msk


	)

11058 
	#DBGMCU_CR_DBG_TIM4_STOP_Pos
 (13U)

	)

11059 
	#DBGMCU_CR_DBG_TIM4_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM4_STOP_Pos
√ã

	)

11060 
	#DBGMCU_CR_DBG_TIM4_STOP
 
DBGMCU_CR_DBG_TIM4_STOP_Msk


	)

11061 
	#DBGMCU_CR_DBG_CAN1_STOP_Pos
 (14U)

	)

11062 
	#DBGMCU_CR_DBG_CAN1_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_CAN1_STOP_Pos
√ã

	)

11063 
	#DBGMCU_CR_DBG_CAN1_STOP
 
DBGMCU_CR_DBG_CAN1_STOP_Msk


	)

11064 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos
 (15U)

	)

11065 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk
 (0x1UL << 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos
√ã

	)

11066 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk


	)

11067 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos
 (16U)

	)

11068 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk
 (0x1UL << 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos
√ã

	)

11069 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk


	)

11070 
	#DBGMCU_CR_DBG_TIM8_STOP_Pos
 (17U)

	)

11071 
	#DBGMCU_CR_DBG_TIM8_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM8_STOP_Pos
√ã

	)

11072 
	#DBGMCU_CR_DBG_TIM8_STOP
 
DBGMCU_CR_DBG_TIM8_STOP_Msk


	)

11073 
	#DBGMCU_CR_DBG_TIM5_STOP_Pos
 (18U)

	)

11074 
	#DBGMCU_CR_DBG_TIM5_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM5_STOP_Pos
√ã

	)

11075 
	#DBGMCU_CR_DBG_TIM5_STOP
 
DBGMCU_CR_DBG_TIM5_STOP_Msk


	)

11076 
	#DBGMCU_CR_DBG_TIM6_STOP_Pos
 (19U)

	)

11077 
	#DBGMCU_CR_DBG_TIM6_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM6_STOP_Pos
√ã

	)

11078 
	#DBGMCU_CR_DBG_TIM6_STOP
 
DBGMCU_CR_DBG_TIM6_STOP_Msk


	)

11079 
	#DBGMCU_CR_DBG_TIM7_STOP_Pos
 (20U)

	)

11080 
	#DBGMCU_CR_DBG_TIM7_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM7_STOP_Pos
√ã

	)

11081 
	#DBGMCU_CR_DBG_TIM7_STOP
 
DBGMCU_CR_DBG_TIM7_STOP_Msk


	)

11089 
	#FLASH_ACR_LATENCY_Pos
 (0U)

	)

11090 
	#FLASH_ACR_LATENCY_Msk
 (0x7UL << 
FLASH_ACR_LATENCY_Pos
√ã

	)

11091 
	#FLASH_ACR_LATENCY
 
FLASH_ACR_LATENCY_Msk


	)

11092 
	#FLASH_ACR_LATENCY_0
 (0x1UL << 
FLASH_ACR_LATENCY_Pos
√ã

	)

11093 
	#FLASH_ACR_LATENCY_1
 (0x2UL << 
FLASH_ACR_LATENCY_Pos
√ã

	)

11094 
	#FLASH_ACR_LATENCY_2
 (0x4UL << 
FLASH_ACR_LATENCY_Pos
√ã

	)

11096 
	#FLASH_ACR_HLFCYA_Pos
 (3U)

	)

11097 
	#FLASH_ACR_HLFCYA_Msk
 (0x1UL << 
FLASH_ACR_HLFCYA_Pos
√ã

	)

11098 
	#FLASH_ACR_HLFCYA
 
FLASH_ACR_HLFCYA_Msk


	)

11099 
	#FLASH_ACR_PRFTBE_Pos
 (4U)

	)

11100 
	#FLASH_ACR_PRFTBE_Msk
 (0x1UL << 
FLASH_ACR_PRFTBE_Pos
√ã

	)

11101 
	#FLASH_ACR_PRFTBE
 
FLASH_ACR_PRFTBE_Msk


	)

11102 
	#FLASH_ACR_PRFTBS_Pos
 (5U)

	)

11103 
	#FLASH_ACR_PRFTBS_Msk
 (0x1UL << 
FLASH_ACR_PRFTBS_Pos
√ã

	)

11104 
	#FLASH_ACR_PRFTBS
 
FLASH_ACR_PRFTBS_Msk


	)

11107 
	#FLASH_KEYR_FKEYR_Pos
 (0U)

	)

11108 
	#FLASH_KEYR_FKEYR_Msk
 (0xFFFFFFFFUL << 
FLASH_KEYR_FKEYR_Pos
√ã

	)

11109 
	#FLASH_KEYR_FKEYR
 
FLASH_KEYR_FKEYR_Msk


	)

11111 
	#RDP_KEY_Pos
 (0U)

	)

11112 
	#RDP_KEY_Msk
 (0xA5UL << 
RDP_KEY_Pos
√ã

	)

11113 
	#RDP_KEY
 
RDP_KEY_Msk


	)

11114 
	#FLASH_KEY1_Pos
 (0U)

	)

11115 
	#FLASH_KEY1_Msk
 (0x45670123UL << 
FLASH_KEY1_Pos
√ã

	)

11116 
	#FLASH_KEY1
 
FLASH_KEY1_Msk


	)

11117 
	#FLASH_KEY2_Pos
 (0U)

	)

11118 
	#FLASH_KEY2_Msk
 (0xCDEF89ABUL << 
FLASH_KEY2_Pos
√ã

	)

11119 
	#FLASH_KEY2
 
FLASH_KEY2_Msk


	)

11122 
	#FLASH_OPTKEYR_OPTKEYR_Pos
 (0U)

	)

11123 
	#FLASH_OPTKEYR_OPTKEYR_Msk
 (0xFFFFFFFFUL << 
FLASH_OPTKEYR_OPTKEYR_Pos
√ã

	)

11124 
	#FLASH_OPTKEYR_OPTKEYR
 
FLASH_OPTKEYR_OPTKEYR_Msk


	)

11126 
	#FLASH_OPTKEY1
 
FLASH_KEY1


	)

11127 
	#FLASH_OPTKEY2
 
FLASH_KEY2


	)

11130 
	#FLASH_SR_BSY_Pos
 (0U)

	)

11131 
	#FLASH_SR_BSY_Msk
 (0x1UL << 
FLASH_SR_BSY_Pos
√ã

	)

11132 
	#FLASH_SR_BSY
 
FLASH_SR_BSY_Msk


	)

11133 
	#FLASH_SR_PGERR_Pos
 (2U)

	)

11134 
	#FLASH_SR_PGERR_Msk
 (0x1UL << 
FLASH_SR_PGERR_Pos
√ã

	)

11135 
	#FLASH_SR_PGERR
 
FLASH_SR_PGERR_Msk


	)

11136 
	#FLASH_SR_WRPRTERR_Pos
 (4U)

	)

11137 
	#FLASH_SR_WRPRTERR_Msk
 (0x1UL << 
FLASH_SR_WRPRTERR_Pos
√ã

	)

11138 
	#FLASH_SR_WRPRTERR
 
FLASH_SR_WRPRTERR_Msk


	)

11139 
	#FLASH_SR_EOP_Pos
 (5U)

	)

11140 
	#FLASH_SR_EOP_Msk
 (0x1UL << 
FLASH_SR_EOP_Pos
√ã

	)

11141 
	#FLASH_SR_EOP
 
FLASH_SR_EOP_Msk


	)

11144 
	#FLASH_CR_PG_Pos
 (0U)

	)

11145 
	#FLASH_CR_PG_Msk
 (0x1UL << 
FLASH_CR_PG_Pos
√ã

	)

11146 
	#FLASH_CR_PG
 
FLASH_CR_PG_Msk


	)

11147 
	#FLASH_CR_PER_Pos
 (1U)

	)

11148 
	#FLASH_CR_PER_Msk
 (0x1UL << 
FLASH_CR_PER_Pos
√ã

	)

11149 
	#FLASH_CR_PER
 
FLASH_CR_PER_Msk


	)

11150 
	#FLASH_CR_MER_Pos
 (2U)

	)

11151 
	#FLASH_CR_MER_Msk
 (0x1UL << 
FLASH_CR_MER_Pos
√ã

	)

11152 
	#FLASH_CR_MER
 
FLASH_CR_MER_Msk


	)

11153 
	#FLASH_CR_OPTPG_Pos
 (4U)

	)

11154 
	#FLASH_CR_OPTPG_Msk
 (0x1UL << 
FLASH_CR_OPTPG_Pos
√ã

	)

11155 
	#FLASH_CR_OPTPG
 
FLASH_CR_OPTPG_Msk


	)

11156 
	#FLASH_CR_OPTER_Pos
 (5U)

	)

11157 
	#FLASH_CR_OPTER_Msk
 (0x1UL << 
FLASH_CR_OPTER_Pos
√ã

	)

11158 
	#FLASH_CR_OPTER
 
FLASH_CR_OPTER_Msk


	)

11159 
	#FLASH_CR_STRT_Pos
 (6U)

	)

11160 
	#FLASH_CR_STRT_Msk
 (0x1UL << 
FLASH_CR_STRT_Pos
√ã

	)

11161 
	#FLASH_CR_STRT
 
FLASH_CR_STRT_Msk


	)

11162 
	#FLASH_CR_LOCK_Pos
 (7U)

	)

11163 
	#FLASH_CR_LOCK_Msk
 (0x1UL << 
FLASH_CR_LOCK_Pos
√ã

	)

11164 
	#FLASH_CR_LOCK
 
FLASH_CR_LOCK_Msk


	)

11165 
	#FLASH_CR_OPTWRE_Pos
 (9U)

	)

11166 
	#FLASH_CR_OPTWRE_Msk
 (0x1UL << 
FLASH_CR_OPTWRE_Pos
√ã

	)

11167 
	#FLASH_CR_OPTWRE
 
FLASH_CR_OPTWRE_Msk


	)

11168 
	#FLASH_CR_ERRIE_Pos
 (10U)

	)

11169 
	#FLASH_CR_ERRIE_Msk
 (0x1UL << 
FLASH_CR_ERRIE_Pos
√ã

	)

11170 
	#FLASH_CR_ERRIE
 
FLASH_CR_ERRIE_Msk


	)

11171 
	#FLASH_CR_EOPIE_Pos
 (12U)

	)

11172 
	#FLASH_CR_EOPIE_Msk
 (0x1UL << 
FLASH_CR_EOPIE_Pos
√ã

	)

11173 
	#FLASH_CR_EOPIE
 
FLASH_CR_EOPIE_Msk


	)

11176 
	#FLASH_AR_FAR_Pos
 (0U)

	)

11177 
	#FLASH_AR_FAR_Msk
 (0xFFFFFFFFUL << 
FLASH_AR_FAR_Pos
√ã

	)

11178 
	#FLASH_AR_FAR
 
FLASH_AR_FAR_Msk


	)

11181 
	#FLASH_OBR_OPTERR_Pos
 (0U)

	)

11182 
	#FLASH_OBR_OPTERR_Msk
 (0x1UL << 
FLASH_OBR_OPTERR_Pos
√ã

	)

11183 
	#FLASH_OBR_OPTERR
 
FLASH_OBR_OPTERR_Msk


	)

11184 
	#FLASH_OBR_RDPRT_Pos
 (1U)

	)

11185 
	#FLASH_OBR_RDPRT_Msk
 (0x1UL << 
FLASH_OBR_RDPRT_Pos
√ã

	)

11186 
	#FLASH_OBR_RDPRT
 
FLASH_OBR_RDPRT_Msk


	)

11188 
	#FLASH_OBR_IWDG_SW_Pos
 (2U)

	)

11189 
	#FLASH_OBR_IWDG_SW_Msk
 (0x1UL << 
FLASH_OBR_IWDG_SW_Pos
√ã

	)

11190 
	#FLASH_OBR_IWDG_SW
 
FLASH_OBR_IWDG_SW_Msk


	)

11191 
	#FLASH_OBR_nRST_STOP_Pos
 (3U)

	)

11192 
	#FLASH_OBR_nRST_STOP_Msk
 (0x1UL << 
FLASH_OBR_nRST_STOP_Pos
√ã

	)

11193 
	#FLASH_OBR_nRST_STOP
 
FLASH_OBR_nRST_STOP_Msk


	)

11194 
	#FLASH_OBR_nRST_STDBY_Pos
 (4U)

	)

11195 
	#FLASH_OBR_nRST_STDBY_Msk
 (0x1UL << 
FLASH_OBR_nRST_STDBY_Pos
√ã

	)

11196 
	#FLASH_OBR_nRST_STDBY
 
FLASH_OBR_nRST_STDBY_Msk


	)

11197 
	#FLASH_OBR_USER_Pos
 (2U)

	)

11198 
	#FLASH_OBR_USER_Msk
 (0x7UL << 
FLASH_OBR_USER_Pos
√ã

	)

11199 
	#FLASH_OBR_USER
 
FLASH_OBR_USER_Msk


	)

11200 
	#FLASH_OBR_DATA0_Pos
 (10U)

	)

11201 
	#FLASH_OBR_DATA0_Msk
 (0xFFUL << 
FLASH_OBR_DATA0_Pos
√ã

	)

11202 
	#FLASH_OBR_DATA0
 
FLASH_OBR_DATA0_Msk


	)

11203 
	#FLASH_OBR_DATA1_Pos
 (18U)

	)

11204 
	#FLASH_OBR_DATA1_Msk
 (0xFFUL << 
FLASH_OBR_DATA1_Pos
√ã

	)

11205 
	#FLASH_OBR_DATA1
 
FLASH_OBR_DATA1_Msk


	)

11208 
	#FLASH_WRPR_WRP_Pos
 (0U)

	)

11209 
	#FLASH_WRPR_WRP_Msk
 (0xFFFFFFFFUL << 
FLASH_WRPR_WRP_Pos
√ã

	)

11210 
	#FLASH_WRPR_WRP
 
FLASH_WRPR_WRP_Msk


	)

11215 
	#FLASH_RDP_RDP_Pos
 (0U)

	)

11216 
	#FLASH_RDP_RDP_Msk
 (0xFFUL << 
FLASH_RDP_RDP_Pos
√ã

	)

11217 
	#FLASH_RDP_RDP
 
FLASH_RDP_RDP_Msk


	)

11218 
	#FLASH_RDP_nRDP_Pos
 (8U)

	)

11219 
	#FLASH_RDP_nRDP_Msk
 (0xFFUL << 
FLASH_RDP_nRDP_Pos
√ã

	)

11220 
	#FLASH_RDP_nRDP
 
FLASH_RDP_nRDP_Msk


	)

11223 
	#FLASH_USER_USER_Pos
 (16U)

	)

11224 
	#FLASH_USER_USER_Msk
 (0xFFUL << 
FLASH_USER_USER_Pos
√ã

	)

11225 
	#FLASH_USER_USER
 
FLASH_USER_USER_Msk


	)

11226 
	#FLASH_USER_nUSER_Pos
 (24U)

	)

11227 
	#FLASH_USER_nUSER_Msk
 (0xFFUL << 
FLASH_USER_nUSER_Pos
√ã

	)

11228 
	#FLASH_USER_nUSER
 
FLASH_USER_nUSER_Msk


	)

11231 
	#FLASH_DATA0_DATA0_Pos
 (0U)

	)

11232 
	#FLASH_DATA0_DATA0_Msk
 (0xFFUL << 
FLASH_DATA0_DATA0_Pos
√ã

	)

11233 
	#FLASH_DATA0_DATA0
 
FLASH_DATA0_DATA0_Msk


	)

11234 
	#FLASH_DATA0_nDATA0_Pos
 (8U)

	)

11235 
	#FLASH_DATA0_nDATA0_Msk
 (0xFFUL << 
FLASH_DATA0_nDATA0_Pos
√ã

	)

11236 
	#FLASH_DATA0_nDATA0
 
FLASH_DATA0_nDATA0_Msk


	)

11239 
	#FLASH_DATA1_DATA1_Pos
 (16U)

	)

11240 
	#FLASH_DATA1_DATA1_Msk
 (0xFFUL << 
FLASH_DATA1_DATA1_Pos
√ã

	)

11241 
	#FLASH_DATA1_DATA1
 
FLASH_DATA1_DATA1_Msk


	)

11242 
	#FLASH_DATA1_nDATA1_Pos
 (24U)

	)

11243 
	#FLASH_DATA1_nDATA1_Msk
 (0xFFUL << 
FLASH_DATA1_nDATA1_Pos
√ã

	)

11244 
	#FLASH_DATA1_nDATA1
 
FLASH_DATA1_nDATA1_Msk


	)

11247 
	#FLASH_WRP0_WRP0_Pos
 (0U)

	)

11248 
	#FLASH_WRP0_WRP0_Msk
 (0xFFUL << 
FLASH_WRP0_WRP0_Pos
√ã

	)

11249 
	#FLASH_WRP0_WRP0
 
FLASH_WRP0_WRP0_Msk


	)

11250 
	#FLASH_WRP0_nWRP0_Pos
 (8U)

	)

11251 
	#FLASH_WRP0_nWRP0_Msk
 (0xFFUL << 
FLASH_WRP0_nWRP0_Pos
√ã

	)

11252 
	#FLASH_WRP0_nWRP0
 
FLASH_WRP0_nWRP0_Msk


	)

11255 
	#FLASH_WRP1_WRP1_Pos
 (16U)

	)

11256 
	#FLASH_WRP1_WRP1_Msk
 (0xFFUL << 
FLASH_WRP1_WRP1_Pos
√ã

	)

11257 
	#FLASH_WRP1_WRP1
 
FLASH_WRP1_WRP1_Msk


	)

11258 
	#FLASH_WRP1_nWRP1_Pos
 (24U)

	)

11259 
	#FLASH_WRP1_nWRP1_Msk
 (0xFFUL << 
FLASH_WRP1_nWRP1_Pos
√ã

	)

11260 
	#FLASH_WRP1_nWRP1
 
FLASH_WRP1_nWRP1_Msk


	)

11263 
	#FLASH_WRP2_WRP2_Pos
 (0U)

	)

11264 
	#FLASH_WRP2_WRP2_Msk
 (0xFFUL << 
FLASH_WRP2_WRP2_Pos
√ã

	)

11265 
	#FLASH_WRP2_WRP2
 
FLASH_WRP2_WRP2_Msk


	)

11266 
	#FLASH_WRP2_nWRP2_Pos
 (8U)

	)

11267 
	#FLASH_WRP2_nWRP2_Msk
 (0xFFUL << 
FLASH_WRP2_nWRP2_Pos
√ã

	)

11268 
	#FLASH_WRP2_nWRP2
 
FLASH_WRP2_nWRP2_Msk


	)

11271 
	#FLASH_WRP3_WRP3_Pos
 (16U)

	)

11272 
	#FLASH_WRP3_WRP3_Msk
 (0xFFUL << 
FLASH_WRP3_WRP3_Pos
√ã

	)

11273 
	#FLASH_WRP3_WRP3
 
FLASH_WRP3_WRP3_Msk


	)

11274 
	#FLASH_WRP3_nWRP3_Pos
 (24U)

	)

11275 
	#FLASH_WRP3_nWRP3_Msk
 (0xFFUL << 
FLASH_WRP3_nWRP3_Pos
√ã

	)

11276 
	#FLASH_WRP3_nWRP3
 
FLASH_WRP3_nWRP3_Msk


	)

11293 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
ADC1
) || \

11294 ((
INSTANCE
√ã=Ô£ø
ADC2
) || \

11295 ((
INSTANCE
√ã=Ô£ø
ADC3
))

	)

11297 
	#IS_ADC_MULTIMODE_MASTER_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
ADC1
)

	)

11299 
	#IS_ADC_COMMON_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
ADC12_COMMON
)

	)

11301 
	#IS_ADC_DMA_CAPABILITY_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
ADC1
) || \

11302 ((
INSTANCE
√ã=Ô£ø
ADC3
))

	)

11305 
	#IS_CAN_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
CAN1
)

	)

11308 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
CRC
)

	)

11311 
	#IS_DAC_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
DAC1
)

	)

11314 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl1
) || \

11315 ((
INSTANCE
√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl2
) || \

11316 ((
INSTANCE
√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl3
) || \

11317 ((
INSTANCE
√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl4
) || \

11318 ((
INSTANCE
√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl5
) || \

11319 ((
INSTANCE
√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl6
) || \

11320 ((
INSTANCE
√ã=Ô£ø
DMA1_Ch‚Ñ¢‚àöl7
) || \

11321 ((
INSTANCE
√ã=Ô£ø
DMA2_Ch‚Ñ¢‚àöl1
) || \

11322 ((
INSTANCE
√ã=Ô£ø
DMA2_Ch‚Ñ¢‚àöl2
) || \

11323 ((
INSTANCE
√ã=Ô£ø
DMA2_Ch‚Ñ¢‚àöl3
) || \

11324 ((
INSTANCE
√ã=Ô£ø
DMA2_Ch‚Ñ¢‚àöl4
) || \

11325 ((
INSTANCE
√ã=Ô£ø
DMA2_Ch‚Ñ¢‚àöl5
))

	)

11328 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
GPIOA
) || \

11329 ((
INSTANCE
√ã=Ô£ø
GPIOB
) || \

11330 ((
INSTANCE
√ã=Ô£ø
GPIOC
) || \

11331 ((
INSTANCE
√ã=Ô£ø
GPIOD
) || \

11332 ((
INSTANCE
√ã=Ô£ø
GPIOE
) || \

11333 ((
INSTANCE
√ã=Ô£ø
GPIOF
) || \

11334 ((
INSTANCE
√ã=Ô£ø
GPIOG
))

	)

11337 
	#IS_GPIO_AF_INSTANCE
(
INSTANCE
√ã
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

11340 
	#IS_GPIO_LOCK_INSTANCE
(
INSTANCE
√ã
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

11343 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
I2C1
) || \

11344 ((
INSTANCE
√ã=Ô£ø
I2C2
))

	)

11347 
	#IS_SMBUS_ALL_INSTANCE
 
IS_I2C_ALL_INSTANCE


	)

11350 
	#IS_I2S_ALL_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
SPI2
) || \

11351 ((
INSTANCE
√ã=Ô£ø
SPI3
))

	)

11354 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
IWDG
)

	)

11357 
	#IS_SDIO_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
SDIO
)

	)

11360 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
SPI1
) || \

11361 ((
INSTANCE
√ã=Ô£ø
SPI2
) || \

11362 ((
INSTANCE
√ã=Ô£ø
SPI3
))

	)

11366 
	#IS_TIM_INSTANCE
(
INSTANCE
)\

11367 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11368 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11369 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11370 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11371 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11372 ((
INSTANCE
√ã=Ô£ø
TIM5
) || \

11373 ((
INSTANCE
√ã=Ô£ø
TIM6
) || \

11374 ((
INSTANCE
√ã=Ô£ø
TIM7
))

	)

11376 
	#IS_TIM_ADVANCED_INSTANCE
(
INSTANCE
)\

11377 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11378 ((
INSTANCE
√ã=Ô£ø
TIM8
))

	)

11380 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
)\

11381 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11382 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11383 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11384 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11385 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11386 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11388 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
)\

11389 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11390 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11391 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11392 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11393 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11394 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11396 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
)\

11397 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11398 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11399 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11400 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11401 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11402 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11404 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
)\

11405 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11406 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11407 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11408 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11409 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11410 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11412 
	#IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
INSTANCE
)\

11413 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11414 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11415 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11416 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11417 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11418 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11420 
	#IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
INSTANCE
)\

11421 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11422 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11423 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11424 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11425 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11426 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11428 
	#IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
INSTANCE
)\

11429 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11430 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11431 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11432 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11433 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11434 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11436 
	#IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
INSTANCE
)\

11437 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11438 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11439 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11440 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11441 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11442 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11444 
	#IS_TIM_OCXREF_CLEAR_INSTANCE
(
INSTANCE
)\

11445 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11446 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11447 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11448 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11449 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11450 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11452 
	#IS_TIM_ENCODER_INTERFACE_INSTANCE
(
INSTANCE
)\

11453 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11454 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11455 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11456 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11457 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11458 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11460 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
)\

11461 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11462 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11463 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11464 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11465 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11466 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11468 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
)\

11469 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11470 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11471 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11472 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11473 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11474 ((
INSTANCE
√ã=Ô£ø
TIM5
) || \

11475 ((
INSTANCE
√ã=Ô£ø
TIM6
) || \

11476 ((
INSTANCE
√ã=Ô£ø
TIM7
))

	)

11478 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
)\

11479 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11480 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11481 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11482 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11483 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11484 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11486 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
)\

11487 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11488 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11489 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11490 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11491 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11492 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11494 
	#IS_TIM_BREAK_INSTANCE
(
INSTANCE
)\

11495 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11496 ((
INSTANCE
√ã=Ô£ø
TIM8
))

	)

11498 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

11499 ((((
INSTANCE
√ã=Ô£ø
TIM1
) && \

11500 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11501 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11502 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
) || \

11503 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_4
))) \

11505 (((
INSTANCE
√ã=Ô£ø
TIM8
) && \

11506 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11507 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11508 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
) || \

11509 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_4
))) \

11511 (((
INSTANCE
√ã=Ô£ø
TIM2
) && \

11512 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11513 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11514 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
) || \

11515 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_4
))) \

11517 (((
INSTANCE
√ã=Ô£ø
TIM3
) && \

11518 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11519 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11520 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
) || \

11521 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_4
))) \

11523 (((
INSTANCE
√ã=Ô£ø
TIM4
) && \

11524 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11525 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11526 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
) || \

11527 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_4
))) \

11529 (((
INSTANCE
√ã=Ô£ø
TIM5
) && \

11530 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11531 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11532 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
) || \

11533 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_4
))))

	)

11535 
	#IS_TIM_CCXN_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

11536 ((((
INSTANCE
√ã=Ô£ø
TIM1
) && \

11537 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11538 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11539 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
))) \

11541 (((
INSTANCE
√ã=Ô£ø
TIM8
) && \

11542 (((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_1
) || \

11543 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_2
) || \

11544 ((
CHANNEL
√ã=Ô£ø
TIM_CHANNEL_3
))))

	)

11546 
	#IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
INSTANCE
)\

11547 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11548 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11549 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11550 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11551 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11552 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11554 
	#IS_TIM_REPETITION_COUNTER_INSTANCE
(
INSTANCE
)\

11555 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11556 ((
INSTANCE
√ã=Ô£ø
TIM8
))

	)

11558 
	#IS_TIM_CLOCK_DIVISION_INSTANCE
(
INSTANCE
)\

11559 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11560 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11561 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11562 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11563 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11564 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11566 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
)\

11567 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11568 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11569 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11570 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11571 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11572 ((
INSTANCE
√ã=Ô£ø
TIM5
) || \

11573 ((
INSTANCE
√ã=Ô£ø
TIM6
) || \

11574 ((
INSTANCE
√ã=Ô£ø
TIM7
))

	)

11576 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
)\

11577 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11578 ((
INSTANCE
√ã=Ô£ø
TIM8
) || \

11579 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11580 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11581 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11582 ((
INSTANCE
√ã=Ô£ø
TIM5
))

	)

11584 
	#IS_TIM_COMMUTATION_EVENT_INSTANCE
(
INSTANCE
)\

11585 (((
INSTANCE
√ã=Ô£ø
TIM1
) || \

11586 ((
INSTANCE
√ã=Ô£ø
TIM8
))

	)

11588 
	#IS_TIM_ETR_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
TIM1
) || \

11589 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11590 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11591 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11592 ((
INSTANCE
√ã=Ô£ø
TIM5
) || \

11593 ((
INSTANCE
√ã=Ô£ø
TIM8
))

	)

11595 
	#IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
TIM1
) || \

11596 ((
INSTANCE
√ã=Ô£ø
TIM2
) || \

11597 ((
INSTANCE
√ã=Ô£ø
TIM3
) || \

11598 ((
INSTANCE
√ã=Ô£ø
TIM4
) || \

11599 ((
INSTANCE
√ã=Ô£ø
TIM5
) || \

11600 ((
INSTANCE
√ã=Ô£ø
TIM8
))

	)

11602 
	#IS_TIM_32B_COUNTER_INSTANCE
(
INSTANCE
√ã0U

	)

11608 
	#IS_USART_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11609 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11610 ((
INSTANCE
√ã=Ô£ø
USART3
))

	)

11613 
	#IS_UART_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11614 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11615 ((
INSTANCE
√ã=Ô£ø
USART3
) || \

11616 ((
INSTANCE
√ã=Ô£ø
UART4
) || \

11617 ((
INSTANCE
√ã=Ô£ø
UART5
))

	)

11620 
	#IS_UART_HALFDUPLEX_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11621 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11622 ((
INSTANCE
√ã=Ô£ø
USART3
) || \

11623 ((
INSTANCE
√ã=Ô£ø
UART4
) || \

11624 ((
INSTANCE
√ã=Ô£ø
UART5
))

	)

11627 
	#IS_UART_LIN_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11628 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11629 ((
INSTANCE
√ã=Ô£ø
USART3
) || \

11630 ((
INSTANCE
√ã=Ô£ø
UART4
) || \

11631 ((
INSTANCE
√ã=Ô£ø
UART5
))

	)

11634 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11635 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11636 ((
INSTANCE
√ã=Ô£ø
USART3
))

	)

11639 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11640 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11641 ((
INSTANCE
√ã=Ô£ø
USART3
))

	)

11644 
	#IS_IRDA_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11645 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11646 ((
INSTANCE
√ã=Ô£ø
USART3
) || \

11647 ((
INSTANCE
√ã=Ô£ø
UART4
) || \

11648 ((
INSTANCE
√ã=Ô£ø
UART5
))

	)

11651 
	#IS_UART_MULTIPROCESSOR_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11652 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11653 ((
INSTANCE
√ã=Ô£ø
USART3
) || \

11654 ((
INSTANCE
√ã=Ô£ø
UART4
) || \

11655 ((
INSTANCE
√ã=Ô£ø
UART5
))

	)

11658 
	#IS_UART_DMA_INSTANCE
(
INSTANCE
√ã(((INSTANCE√ã=Ô£ø
USART1
) || \

11659 ((
INSTANCE
√ã=Ô£ø
USART2
) || \

11660 ((
INSTANCE
√ã=Ô£ø
USART3
) || \

11661 ((
INSTANCE
√ã=Ô£ø
UART4
))

	)

11664 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
RTC
)

	)

11667 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
WWDG
)

	)

11670 
	#IS_PCD_ALL_INSTANCE
(
INSTANCE
√ã((INSTANCE√ã=Ô£ø
USB
)

	)

11674 
	#RCC_HSE_MIN
 4000000U

	)

11675 
	#RCC_HSE_MAX
 16000000U

	)

11677 
	#RCC_MAX_FREQUENCY
 72000000U

	)

11691 
	#ADC1_IRQn
 
ADC1_2_IRQn


	)

11692 
	#DMA2_Ch‚Ñ¢‚àöl4_IRQn
 
DMA2_Ch‚Ñ¢‚àöl4_5_IRQn


	)

11693 
	#TIM1_BRK_TIM9_IRQn
 
TIM1_BRK_IRQn


	)

11694 
	#TIM9_IRQn
 
TIM1_BRK_IRQn


	)

11695 
	#TIM1_BRK_TIM15_IRQn
 
TIM1_BRK_IRQn


	)

11696 
	#TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

11697 
	#TIM1_TRG_COM_TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

11698 
	#TIM1_TRG_COM_TIM17_IRQn
 
TIM1_TRG_COM_IRQn


	)

11699 
	#TIM1_UP_TIM10_IRQn
 
TIM1_UP_IRQn


	)

11700 
	#TIM1_UP_TIM16_IRQn
 
TIM1_UP_IRQn


	)

11701 
	#TIM10_IRQn
 
TIM1_UP_IRQn


	)

11702 
	#TIM6_DAC_IRQn
 
TIM6_IRQn


	)

11703 
	#TIM8_BRK_TIM12_IRQn
 
TIM8_BRK_IRQn


	)

11704 
	#TIM12_IRQn
 
TIM8_BRK_IRQn


	)

11705 
	#TIM14_IRQn
 
TIM8_TRG_COM_IRQn


	)

11706 
	#TIM8_TRG_COM_TIM14_IRQn
 
TIM8_TRG_COM_IRQn


	)

11707 
	#TIM8_UP_TIM13_IRQn
 
TIM8_UP_IRQn


	)

11708 
	#TIM13_IRQn
 
TIM8_UP_IRQn


	)

11709 
	#CEC_IRQn
 
USBWakeUp_IRQn


	)

11710 
	#OTG_FS_WKUP_IRQn
 
USBWakeUp_IRQn


	)

11711 
	#USB_HP_IRQn
 
USB_HP_CAN1_TX_IRQn


	)

11712 
	#CAN1_TX_IRQn
 
USB_HP_CAN1_TX_IRQn


	)

11713 
	#USB_LP_IRQn
 
USB_LP_CAN1_RX0_IRQn


	)

11714 
	#CAN1_RX0_IRQn
 
USB_LP_CAN1_RX0_IRQn


	)

11718 
	#ADC1_IRQH‚Ñ¢d√Är
 
ADC1_2_IRQH‚Ñ¢d√Är


	)

11719 
	#DMA2_Ch‚Ñ¢‚àöl4_IRQH‚Ñ¢d√Är
 
DMA2_Ch‚Ñ¢‚àöl4_5_IRQH‚Ñ¢d√Är


	)

11720 
	#TIM1_BRK_TIM9_IRQH‚Ñ¢d√Är
 
TIM1_BRK_IRQH‚Ñ¢d√Är


	)

11721 
	#TIM9_IRQH‚Ñ¢d√Är
 
TIM1_BRK_IRQH‚Ñ¢d√Är


	)

11722 
	#TIM1_BRK_TIM15_IRQH‚Ñ¢d√Är
 
TIM1_BRK_IRQH‚Ñ¢d√Är


	)

11723 
	#TIM11_IRQH‚Ñ¢d√Är
 
TIM1_TRG_COM_IRQH‚Ñ¢d√Är


	)

11724 
	#TIM1_TRG_COM_TIM11_IRQH‚Ñ¢d√Är
 
TIM1_TRG_COM_IRQH‚Ñ¢d√Är


	)

11725 
	#TIM1_TRG_COM_TIM17_IRQH‚Ñ¢d√Är
 
TIM1_TRG_COM_IRQH‚Ñ¢d√Är


	)

11726 
	#TIM1_UP_TIM10_IRQH‚Ñ¢d√Är
 
TIM1_UP_IRQH‚Ñ¢d√Är


	)

11727 
	#TIM1_UP_TIM16_IRQH‚Ñ¢d√Är
 
TIM1_UP_IRQH‚Ñ¢d√Är


	)

11728 
	#TIM10_IRQH‚Ñ¢d√Är
 
TIM1_UP_IRQH‚Ñ¢d√Är


	)

11729 
	#TIM6_DAC_IRQH‚Ñ¢d√Är
 
TIM6_IRQH‚Ñ¢d√Är


	)

11730 
	#TIM8_BRK_TIM12_IRQH‚Ñ¢d√Är
 
TIM8_BRK_IRQH‚Ñ¢d√Är


	)

11731 
	#TIM12_IRQH‚Ñ¢d√Är
 
TIM8_BRK_IRQH‚Ñ¢d√Är


	)

11732 
	#TIM14_IRQH‚Ñ¢d√Är
 
TIM8_TRG_COM_IRQH‚Ñ¢d√Är


	)

11733 
	#TIM8_TRG_COM_TIM14_IRQH‚Ñ¢d√Är
 
TIM8_TRG_COM_IRQH‚Ñ¢d√Är


	)

11734 
	#TIM8_UP_TIM13_IRQH‚Ñ¢d√Är
 
TIM8_UP_IRQH‚Ñ¢d√Är


	)

11735 
	#TIM13_IRQH‚Ñ¢d√Är
 
TIM8_UP_IRQH‚Ñ¢d√Är


	)

11736 
	#CEC_IRQH‚Ñ¢d√Är
 
USBWakeUp_IRQH‚Ñ¢d√Är


	)

11737 
	#OTG_FS_WKUP_IRQH‚Ñ¢d√Är
 
USBWakeUp_IRQH‚Ñ¢d√Är


	)

11738 
	#USB_HP_IRQH‚Ñ¢d√Är
 
USB_HP_CAN1_TX_IRQH‚Ñ¢d√Är


	)

11739 
	#CAN1_TX_IRQH‚Ñ¢d√Är
 
USB_HP_CAN1_TX_IRQH‚Ñ¢d√Är


	)

11740 
	#USB_LP_IRQH‚Ñ¢d√Är
 
USB_LP_CAN1_RX0_IRQH‚Ñ¢d√Är


	)

11741 
	#CAN1_RX0_IRQH‚Ñ¢d√Är
 
USB_LP_CAN1_RX0_IRQH‚Ñ¢d√Är


	)

11753 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f1xx.h

38 #i‚Äöde‚Ä°
__STM32F1XX_H


39 
	#__STM32F1XX_H


	)

41 #ifde‚Ä°
__Àùlu‚Ä¢lus


52 #i‚Ä°!
def√∂ed
 (
STM32F1
)

53 
	#STM32F1


	)

60 #i‚Ä°!
def√∂ed
 (
STM32F100xB
√ã&& !def√∂ed (
STM32F100xE
√ã&& !def√∂ed (
STM32F101x6
) && \

61 !
def√∂ed
 (
STM32F101xB
√ã&& !def√∂ed (
STM32F101xE
√ã&& !def√∂ed (
STM32F101xG
√ã&& !def√∂ed (
STM32F102x6
√ã&& !def√∂ed (
STM32F102xB
√ã&& !def√∂ed (
STM32F103x6
) && \

62 !
def√∂ed
 (
STM32F103xB
√ã&& !def√∂ed (
STM32F103xE
√ã&& !def√∂ed (
STM32F103xG
√ã&& !def√∂ed (
STM32F105xC
√ã&& !
	$def√∂ed
 (
STM32F107xC
)

83 #i‚Ä°!
	`def√∂ed
 (
USE_HAL_DRIVER
)

95 
	#__STM32F1_CMSIS_VERSION_MAIN
 (0x04√ã

	)

96 
	#__STM32F1_CMSIS_VERSION_SUB1
 (0x03√ã

	)

97 
	#__STM32F1_CMSIS_VERSION_SUB2
 (0x02√ã

	)

98 
	#__STM32F1_CMSIS_VERSION_RC
 (0x00√ã

	)

99 
	#__STM32F1_CMSIS_VERSION
 ((
__STM32F1_CMSIS_VERSION_MAIN
 << 24)\

100 |(
__STM32F1_CMSIS_VERSION_SUB1
 << 16)\

101 |(
__STM32F1_CMSIS_VERSION_SUB2
 << 8 )\

102 |(
__STM32F1_CMSIS_VERSION_RC
))

	)

112 #i‚Ä°
	`def√∂ed
(
STM32F100xB
)

113 
	~"¬∞m32f100xb.h
"

114 #√±i‚Ä°
	`def√∂ed
(
STM32F100xE
)

115 
	~"¬∞m32f100xe.h
"

116 #√±i‚Ä°
	`def√∂ed
(
STM32F101x6
)

117 
	~"¬∞m32f101x6.h
"

118 #√±i‚Ä°
	`def√∂ed
(
STM32F101xB
)

119 
	~"¬∞m32f101xb.h
"

120 #√±i‚Ä°
	`def√∂ed
(
STM32F101xE
)

121 
	~"¬∞m32f101xe.h
"

122 #√±i‚Ä°
	`def√∂ed
(
STM32F101xG
)

123 
	~"¬∞m32f101xg.h
"

124 #√±i‚Ä°
	`def√∂ed
(
STM32F102x6
)

125 
	~"¬∞m32f102x6.h
"

126 #√±i‚Ä°
	`def√∂ed
(
STM32F102xB
)

127 
	~"¬∞m32f102xb.h
"

128 #√±i‚Ä°
	`def√∂ed
(
STM32F103x6
)

129 
	~"¬∞m32f103x6.h
"

130 #√±i‚Ä°
	`def√∂ed
(
STM32F103xB
)

131 
	~"¬∞m32f103xb.h
"

132 #√±i‚Ä°
	`def√∂ed
(
STM32F103xE
)

133 
	~"¬∞m32f103xe.h
"

134 #√±i‚Ä°
	`def√∂ed
(
STM32F103xG
)

135 
	~"¬∞m32f103xg.h
"

136 #√±i‚Ä°
	`def√∂ed
(
STM32F105xC
)

137 
	~"¬∞m32f105xc.h
"

138 #√±i‚Ä°
	`def√∂ed
(
STM32F107xC
)

139 
	~"¬∞m32f107xc.h
"

153 
RESET
 = 0,

154 
SET
 = !
RESET


155 } 
	tF≈ìgS√®tus
, 
	tITS√®tus
;

159 
DISABLE
 = 0,

160 
ENABLE
 = !
DISABLE


161 } 
	tFunÀòi‚ÅÑ√ÜS√®√£
;

162 
	#IS_FUNCTIONAL_STATE
(
STATE
√ã(((STATE√ã=Ô£ø
DISABLE
√ã|| ((STATE√ã=Ô£ø
ENABLE
))

	)

166 
SUCCESS
 = 0U,

167 
ERROR
 = !
SUCCESS


168 } 
	tE¬∫‚ÄπS√®tus
;

178 
	#SET_BIT
(
REG
, 
BIT
√ã((REG√ã|Ô£ø(BIT))

	)

180 
	#CLEAR_BIT
(
REG
, 
BIT
√ã((REG√ã&Ô£ø~(BIT))

	)

182 
	#READ_BIT
(
REG
, 
BIT
√ã((REG√ã& (BIT))

	)

184 
	#CLEAR_REG
(
REG
√ã((REG√ãÔ£ø(0x0))

	)

186 
	#WRITE_REG
(
REG
, 
VAL
√ã((REG√ãÔ£ø(VAL))

	)

188 
	#READ_REG
(
REG
√ã((REG))

	)

190 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
√ã
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)√ã& (~(CLEARMASK))√ã| (SETMASK)))

	)

192 
	#POSITION_VAL
(
VAL
√ã(
	`__CLZ
(
	`__RBIT
(VAL)))

	)

199 #i‚Ä°
	`def√∂ed
 (
USE_HAL_DRIVER
)

200 
	~"¬∞m32f1xx_h√Ü.h
"

204 #ifde‚Ä°
__Àùlu‚Ä¢lus


205 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Include\system_stm32f1xx.h

31 #i‚Äöde‚Ä°
__SYSTEM_STM32F10X_H


32 
	#__SYSTEM_STM32F10X_H


	)

34 #ifde‚Ä°
__Àùlu‚Ä¢lus


51 
u√∂t32_t
 
Sy¬∞emC‚ÄπeClock
;

52 c‚ÅÑ¬∞ 
u√∂t8_t
 
AHBP¬™scTab√Ä
[16U];

53 c‚ÅÑ¬∞ 
u√∂t8_t
 
APBP¬™scTab√Ä
[8U];

79 
Sy¬∞emIn√¥
();

80 
Sy¬∞emC‚ÄπeClockUpd¬©e
();

85 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Source\Templates\system_stm32f1xx.c

59 
	~"¬∞m32f1xx.h
"

77 #i‚Ä°!
def√∂ed
 (
HSE_VALUE
)

78 
	#HSE_VALUE
 8000000U

	)

82 #i‚Ä°!
def√∂ed
 (
HSI_VALUE
)

83 
	#HSI_VALUE
 8000000U

	)

88 #i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

99 #i‚Ä°
def√∂ed
(
USER_VECT_TAB_ADDRESS
)

103 #i‚Ä°
def√∂ed
(
VECT_TAB_SRAM
)

104 
	#VECT_TAB_BASE_ADDRESS
 
SRAM_BASE


	)

106 
	#VECT_TAB_OFFSET
 0x00000000U

	)

109 
	#VECT_TAB_BASE_ADDRESS
 
FLASH_BASE


	)

111 
	#VECT_TAB_OFFSET
 0x00000000U

	)

142 
u√∂t32_t
 
	gSy¬∞emC‚ÄπeClock
 = 16000000;

143 c‚ÅÑ¬∞ 
u√∂t8_t
 
	gAHBP¬™scTab√Ä
[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

144 c‚ÅÑ¬∞ 
u√∂t8_t
 
	gAPBP¬™scTab√Ä
[8U] = {0, 0, 0, 0, 1, 2, 3, 4};

154 #i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

155 #ifde‚Ä°
DATA_IN_ExtSRAM


156 
Sy¬∞emIn√¥_ExtMemC√©
();

176 
	$Sy¬∞emIn√¥
 ()

178 #i‚Ä°
	`def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

179 #ifde‚Ä°
DATA_IN_ExtSRAM


180 
	`Sy¬∞emIn√¥_ExtMemC√©
();

185 #i‚Ä°
	`def√∂ed
(
USER_VECT_TAB_ADDRESS
)

186 
SCB
->
VTOR
 = 
VECT_TAB_BASE_ADDRESS
 | 
VECT_TAB_OFFSET
;

188 
	}
}

225 
	$Sy¬∞emC‚ÄπeClockUpd¬©e
 ()

227 
u√∂t32_t
 
tmp
 = 0U, 
‚àÇlmu≈í
 = 0U, 
‚àÇlsourÀö
 = 0U;

229 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

230 
u√∂t32_t
 
¬•ediv1sourÀö
 = 0U, 
¬•ediv1√ÅÀò‚Äπ
 = 0U, 
¬•ediv2√ÅÀò‚Äπ
 = 0U, 
‚àÇl2mu≈í
 = 0U;

233 #i‚Ä°
	`def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
)

234 
u√∂t32_t
 
¬•ediv1√ÅÀò‚Äπ
 = 0U;

238 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

240 
tmp
)

243 
Sy¬∞emC‚ÄπeClock
 = 
HSI_VALUE
;

246 
Sy¬∞emC‚ÄπeClock
 = 
HSE_VALUE
;

251 
‚àÇlmu≈í
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

252 
‚àÇlsourÀö
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

254 #i‚Ä°!
	`def√∂ed
(
STM32F105xC
√ã&& !def√∂ed(
STM32F107xC
)

255 
‚àÇlmu≈í
 = (√ñllmull >> 18U) + 2U;

257 i‚Ä°(
‚àÇlsourÀö
 == 0x00U)

260 
Sy¬∞emC‚ÄπeClock
 = (
HSI_VALUE
 >> 1U√ã* 
‚àÇlmu≈í
;

264 #i‚Ä°
	`def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
)

265 
¬•ediv1√ÅÀò‚Äπ
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1U;

267 
Sy¬∞emC‚ÄπeClock
 = (
HSE_VALUE
 / 
¬•ediv1√ÅÀò‚Äπ
√ã* 
‚àÇlmu≈í
;

270 i‚Ä°((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

272 
Sy¬∞emC‚ÄπeClock
 = (
HSE_VALUE
 >> 1U√ã* 
‚àÇlmu≈í
;

276 
Sy¬∞emC‚ÄπeClock
 = 
HSE_VALUE
 * 
‚àÇlmu≈í
;

281 
‚àÇlmu≈í
 =√ñllmull >> 18U;

283 i‚Ä°(
‚àÇlmu≈í
 != 0x0DU)

285 
‚àÇlmu≈í
 += 2U;

289 
‚àÇlmu≈í
 = 13U / 2U;

292 i‚Ä°(
‚àÇlsourÀö
 == 0x00U)

295 
Sy¬∞emC‚ÄπeClock
 = (
HSI_VALUE
 >> 1U√ã* 
‚àÇlmu≈í
;

301 
¬•ediv1sourÀö
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

302 
¬•ediv1√ÅÀò‚Äπ
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1U;

304 i‚Ä°(
¬•ediv1sourÀö
 == 0U)

307 
Sy¬∞emC‚ÄπeClock
 = (
HSE_VALUE
 / 
¬•ediv1√ÅÀò‚Äπ
√ã* 
‚àÇlmu≈í
;

313 
¬•ediv2√ÅÀò‚Äπ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4U) + 1U;

314 
‚àÇl2mu≈í
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8U) + 2U;

315 
Sy¬∞emC‚ÄπeClock
 = (((
HSE_VALUE
 / 
¬•ediv2√ÅÀò‚Äπ
√ã* 
‚àÇl2mu≈í
√ã/ 
¬•ediv1√ÅÀò‚Äπ
√ã* 
‚àÇlmu≈í
;

322 
Sy¬∞emC‚ÄπeClock
 = 
HSI_VALUE
;

328 
tmp
 = 
AHBP¬™scTab√Ä
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4U)];

330 
Sy¬∞emC‚ÄπeClock
 >>Ô£ø
tmp
;

331 
	}
}

333 #i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

340 #ifde‚Ä°
DATA_IN_ExtSRAM


350 
	$Sy¬∞emIn√¥_ExtMemC√©
()

352 
__IO
 
u√∂t32_t
 
tm¬•eg
;

357 
RCC
->
AHBENR
 = 0x00000114U;

360 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);

363 
RCC
->
APB2ENR
 = 0x000001E0U;

366 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);

368 ()(
tm¬•eg
);

376 
GPIOD
->
CRL
 = 0x44BB44BBU;

377 
GPIOD
->
CRH
 = 0xBBBBBBBBU;

379 
GPIOE
->
CRL
 = 0xB44444BBU;

380 
GPIOE
->
CRH
 = 0xBBBBBBBBU;

382 
GPIOF
->
CRL
 = 0x44BBBBBBU;

383 
GPIOF
->
CRH
 = 0xBBBB4444U;

385 
GPIOG
->
CRL
 = 0x44BBBBBBU;

386 
GPIOG
->
CRH
 = 0x444B4B44U;

391 
FSMC_B‚Ñ¢k1
->
BTCR
[4U] = 0x00001091U;

392 
FSMC_B‚Ñ¢k1
->
BTCR
[5U] = 0x00110212U;

393 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_armcc.h

25 #i‚Äöde‚Ä°
__CMSIS_ARMCC_H


26 
	#__CMSIS_ARMCC_H


	)

29 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 400677)

34 #i‚Ä°((
def√∂ed
 (
__TARGET_ARCH_6_M
 ) && (__TARGET_ARCH_6_M == 1)) || \

35 (
def√∂ed
 (
__TARGET_ARCH_6S_M
 ) && (
	g__TARGET_ARCH_6S_M
 == 1)) )

36 
	#__ARM_ARCH_6M__
 1

	)

39 #i‚Ä°(
def√∂ed
 (
__TARGET_ARCH_7_M
 ) && (__TARGET_ARCH_7_M == 1))

40 
	#__ARM_ARCH_7M__
 1

	)

43 #i‚Ä°(
def√∂ed
 (
__TARGET_ARCH_7E_M
) && (__TARGET_ARCH_7E_M == 1))

44 
	#__ARM_ARCH_7EM__
 1

	)

52 #i‚Äöde‚Ä° 
__ASM


53 
	#__ASM
 
__asm


	)

55 #i‚Äöde‚Ä° 
__INLINE


56 
	#__INLINE
 
__√∂l√∂e


	)

58 #i‚Äöde‚Ä° 
__STATIC_INLINE


59 
	#__STATIC_INLINE
 
__√∂l√∂e


	)

61 #i‚Äöde‚Ä° 
__STATIC_FORCEINLINE


62 
	#__STATIC_FORCEINLINE
 
__f‚ÄπÀö√∂l√∂e


	)

64 #i‚Äöde‚Ä° 
__NO_RETURN


65 
	#__NO_RETURN
 
	`__deÀõ‚Ä¢ec
(
n‚Äπ√´u‚à´
)

	)

67 #i‚Äöde‚Ä° 
__USED


68 
	#__USED
 
	`__¬©√•ibu√£__
((
u¬£d
))

	)

70 #i‚Äöde‚Ä° 
__WEAK


71 
	#__WEAK
 
	`__¬©√•ibu√£__
((
w√≥k
))

	)

73 #i‚Äöde‚Ä° 
__PACKED


74 
	#__PACKED
 
	`__¬©√•ibu√£__
((
‚àëcked
))

	)

76 #i‚Äöde‚Ä° 
__PACKED_STRUCT


77 
	#__PACKED_STRUCT
 
__‚àëcked
 

	)

79 #i‚Äöde‚Ä° 
__PACKED_UNION


80 
	#__PACKED_UNION
 
__‚àëcked
 

	)

82 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32


83 
	#__UNALIGNED_UINT32
(
x
√ã(*((
__‚àëcked
 
u√∂t32_t
 *)(x)))

	)

85 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_WRITE


86 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
v√Ü
√ã((*((
__‚àëcked
 
u√∂t16_t
 *)‚óäddr))√ãÔ£ø(v√Ü))

	)

88 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_READ


89 
	#__UNALIGNED_UINT16_READ
(
addr
√ã(*((c‚ÅÑ¬∞ 
__‚àëcked
 
u√∂t16_t
 *)‚óäddr)))

	)

91 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_WRITE


92 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
v√Ü
√ã((*((
__‚àëcked
 
u√∂t32_t
 *)‚óäddr))√ãÔ£ø(v√Ü))

	)

94 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_READ


95 
	#__UNALIGNED_UINT32_READ
(
addr
√ã(*((c‚ÅÑ¬∞ 
__‚àëcked
 
u√∂t32_t
 *)‚óäddr)))

	)

97 #i‚Äöde‚Ä° 
__ALIGNED


98 
	#__ALIGNED
(
x
√ã
	`__¬©√•ibu√£__
((
	`√Üig‚àöd
(x)))

	)

100 #i‚Äöde‚Ä° 
__RESTRICT


101 
	#__RESTRICT
 
__¬™¬∞riÀò


	)

130 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_CONTROL
()

132 
u√∂t32_t
 
__¬™gC‚ÅÑ√•Ô¨Å
 
	`__ASM
("control");

133 (
__¬™gC‚ÅÑ√•Ô¨Å
);

134 
	}
}

142 
__STATIC_INLINE
 
	$__¬£t_CONTROL
(
u√∂t32_t
 
c‚ÅÑ√•Ô¨Å
)

144 
u√∂t32_t
 
__¬™gC‚ÅÑ√•Ô¨Å
 
	`__ASM
("control");

145 
__¬™gC‚ÅÑ√•Ô¨Å
 = 
c‚ÅÑ√•Ô¨Å
;

146 
	}
}

154 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_IPSR
()

156 
u√∂t32_t
 
__¬™gIPSR
 
	`__ASM
("ipsr");

157 (
__¬™gIPSR
);

158 
	}
}

166 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_APSR
()

168 
u√∂t32_t
 
__¬™gAPSR
 
	`__ASM
("apsr");

169 (
__¬™gAPSR
);

170 
	}
}

178 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_xPSR
()

180 
u√∂t32_t
 
__¬™gXPSR
 
	`__ASM
("xpsr");

181 (
__¬™gXPSR
);

182 
	}
}

190 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_PSP
()

192 
u√∂t32_t
 
__¬™gProÀössS√®ckPo√∂√£r
 
	`__ASM
("psp");

193 (
__¬™gProÀössS√®ckPo√∂√£r
);

194 
	}
}

202 
__STATIC_INLINE
 
	$__¬£t_PSP
(
u√∂t32_t
 
t‚Ä∫OfProcS√®ck
)

204 
u√∂t32_t
 
__¬™gProÀössS√®ckPo√∂√£r
 
	`__ASM
("psp");

205 
__¬™gProÀössS√®ckPo√∂√£r
 = 
t‚Ä∫OfProcS√®ck
;

206 
	}
}

214 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_MSP
()

216 
u√∂t32_t
 
__¬™gMa√∂S√®ckPo√∂√£r
 
	`__ASM
("msp");

217 (
__¬™gMa√∂S√®ckPo√∂√£r
);

218 
	}
}

226 
__STATIC_INLINE
 
	$__¬£t_MSP
(
u√∂t32_t
 
t‚Ä∫OfMa√∂S√®ck
)

228 
u√∂t32_t
 
__¬™gMa√∂S√®ckPo√∂√£r
 
	`__ASM
("msp");

229 
__¬™gMa√∂S√®ckPo√∂√£r
 = 
t‚Ä∫OfMa√∂S√®ck
;

230 
	}
}

238 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_PRIMASK
()

240 
u√∂t32_t
 
__¬™gPriMask
 
	`__ASM
("primask");

241 (
__¬™gPriMask
);

242 
	}
}

250 
__STATIC_INLINE
 
	$__¬£t_PRIMASK
(
u√∂t32_t
 
¬•iMask
)

252 
u√∂t32_t
 
__¬™gPriMask
 
	`__ASM
("primask");

253 
__¬™gPriMask
 = (
¬•iMask
);

254 
	}
}

257 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

258 (
def√∂ed
 (
__ARM_ARCH_7EM__
√ã&& (
	g__ARM_ARCH_7EM__
 == 1)) )

265 
	#__√≠ab√Ä_√Åu‚Ä¶_√∫q
 
__√≠ab√Ä_fiq


	)

273 
	#__di√üb√Ä_√Åu‚Ä¶_√∫q
 
__di√üb√Ä_fiq


	)

281 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_BASEPRI
()

283 
u√∂t32_t
 
__¬™gBa¬£Pri
 
	`__ASM
("basepri");

284 (
__¬™gBa¬£Pri
);

285 
	}
}

293 
__STATIC_INLINE
 
	$__¬£t_BASEPRI
(
u√∂t32_t
 
ba¬£Pri
)

295 
u√∂t32_t
 
__¬™gBa¬£Pri
 
	`__ASM
("basepri");

296 
__¬™gBa¬£Pri
 = (
ba¬£Pri
 & 0xFFU);

297 
	}
}

306 
__STATIC_INLINE
 
	$__¬£t_BASEPRI_MAX
(
u√∂t32_t
 
ba¬£Pri
)

308 
u√∂t32_t
 
__¬™gBa¬£PriMax
 
	`__ASM
("basepri_max");

309 
__¬™gBa¬£PriMax
 = (
ba¬£Pri
 & 0xFFU);

310 
	}
}

318 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_FAULTMASK
()

320 
u√∂t32_t
 
__¬™gFau‚Ä¶Mask
 
	`__ASM
("faultmask");

321 (
__¬™gFau‚Ä¶Mask
);

322 
	}
}

330 
__STATIC_INLINE
 
	$__¬£t_FAULTMASK
(
u√∂t32_t
 
√Åu‚Ä¶Mask
)

332 
u√∂t32_t
 
__¬™gFau‚Ä¶Mask
 
	`__ASM
("faultmask");

333 
__¬™gFau‚Ä¶Mask
 = (
√Åu‚Ä¶Mask
 & (
u√∂t32_t
)1U);

334 
	}
}

337 (
def√∂ed
 (
__ARM_ARCH_7EM__
√ã&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

345 
__STATIC_INLINE
 
u√∂t32_t
 
	$__g√´_FPSCR
()

347 #i‚Ä°((
	`def√∂ed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

348 (
	`def√∂ed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

349 
u√∂t32_t
 
__¬™g√Çs¬∏
 
	`__ASM
("fpscr");

350 (
__¬™g√Çs¬∏
);

354 
	}
}

362 
__STATIC_INLINE
 
	$__¬£t_FPSCR
(
u√∂t32_t
 
√Çs¬∏
)

364 #i‚Ä°((
	`def√∂ed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

365 (
	`def√∂ed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

366 
u√∂t32_t
 
__¬™g√Çs¬∏
 
	`__ASM
("fpscr");

367 
__¬™g√Çs¬∏
 = (
√Çs¬∏
);

369 ()
√Çs¬∏
;

371 
	}
}

387 
	#__NOP
 
__n‚Ä∫


	)

394 
	#__WFI
 
__wfi


	)

402 
	#__WFE
 
__w‚Äû


	)

409 
	#__SEV
 
__¬£v


	)

418 
	#__ISB
() do {\

419 
	`__schedu√Ä_b¬®r√µr
();\

420 
	`__isb
(0xF);\

421 
	`__schedu√Ä_b¬®r√µr
();\

422 } 0U)

	)

429 
	#__DSB
() do {\

430 
	`__schedu√Ä_b¬®r√µr
();\

431 
	`__dsb
(0xF);\

432 
	`__schedu√Ä_b¬®r√µr
();\

433 } 0U)

	)

440 
	#__DMB
() do {\

441 
	`__schedu√Ä_b¬®r√µr
();\

442 
	`__dmb
(0xF);\

443 
	`__schedu√Ä_b¬®r√µr
();\

444 } 0U)

	)

453 
	#__REV
 
__¬™v


	)

462 #i‚Äöde‚Ä°
__NO_EMBEDDED_ASM


463 
__¬©√•ibu√£__
((
¬£Àòi‚ÅÑ
(".¬™v16_√£xt"))√ã
__STATIC_INLINE
 
__ASM
 
u√∂t32_t
 
	$__REV16
(
u√∂t32_t
 
v√Üue
)

465 
¬™v16
 
r0
,√ë0

466 
bx
 
√É


467 
	}
}

477 #i‚Äöde‚Ä°
__NO_EMBEDDED_ASM


478 
__¬©√•ibu√£__
((
¬£Àòi‚ÅÑ
(".¬™vsh_√£xt"))√ã
__STATIC_INLINE
 
__ASM
 
√∂t16_t
 
	$__REVSH
(
√∂t16_t
 
v√Üue
)

480 
¬™vsh
 
r0
,√ë0

481 
bx
 
√É


482 
	}
}

493 
	#__ROR
 
__r‚Äπ


	)

503 
	#__BKPT
(
v√Üue
√ã
	`__b¬™akpo√∂t
(v√Üue)

	)

512 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

513 (
def√∂ed
 (
__ARM_ARCH_7EM__
√ã&& (
	g__ARM_ARCH_7EM__
 == 1)) )

514 
	#__RBIT
 
__rb√¥


	)

516 
__¬©√•ibu√£__
((
√Üways_√∂l√∂e
)√ã
__STATIC_INLINE
 
u√∂t32_t
 
	$__RBIT
(
u√∂t32_t
 
v√Üue
)

518 
u√∂t32_t
 
¬™su‚Ä¶
;

519 
u√∂t32_t
 
s
 = (4U * 8U) - 1U;

521 
¬™su‚Ä¶
 = 
v√Üue
;

522 
v√Üue
 >>= 1U; value != 0U; value >>= 1U)

524 
¬™su‚Ä¶
 <<= 1U;

525 
¬™su‚Ä¶
 |Ô£ø
v√Üue
 & 1U;

526 
s
--;

528 
¬™su‚Ä¶
 <<Ô£ø
s
;

529  
¬™su‚Ä¶
;

530 
	}
}

540 
	#__CLZ
 
__Àõz


	)

543 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

544 (
def√∂ed
 (
__ARM_ARCH_7EM__
√ã&& (
	g__ARM_ARCH_7EM__
 == 1)) )

552 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

553 
	#__LDREXB
(
¬±r
√ã((
u√∂t8_t
 ) 
	`__ld¬™x
‚Äô√•))

	)

555 
	#__LDREXB
(
¬±r
√ã
	`_P√∏gma
("push"√ã_P√∏gma("d√ºg_su¬µ¬™s‚Ä†3731"√ã((
u√∂t8_t
 ) 
	`__ld¬™x
‚Äô√•)√ã_P√∏gma("p‚Ä∫")

	)

565 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

566 
	#__LDREXH
(
¬±r
√ã((
u√∂t16_t
√ã
	`__ld¬™x
‚Äô√•))

	)

568 
	#__LDREXH
(
¬±r
√ã
	`_P√∏gma
("push"√ã_P√∏gma("d√ºg_su¬µ¬™s‚Ä†3731"√ã((
u√∂t16_t
√ã
	`__ld¬™x
‚Äô√•)√ã_P√∏gma("p‚Ä∫")

	)

578 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

579 
	#__LDREXW
(
¬±r
√ã((
u√∂t32_t
 ) 
	`__ld¬™x
‚Äô√•))

	)

581 
	#__LDREXW
(
¬±r
√ã
	`_P√∏gma
("push"√ã_P√∏gma("d√ºg_su¬µ¬™s‚Ä†3731"√ã((
u√∂t32_t
 ) 
	`__ld¬™x
‚Äô√•)√ã_P√∏gma("p‚Ä∫")

	)

593 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

594 
	#__STREXB
(
v√Üue
, 
¬±r
√ã
	`__¬∞¬™x
(v√Üue,√ñ√•)

	)

596 
	#__STREXB
(
v√Üue
, 
¬±r
√ã
	`_P√∏gma
("push"√ã_P√∏gma("d√ºg_su¬µ¬™s‚Ä†3731"√ã
	`__¬∞¬™x
(v√Üue,√ñ√•√ã_P√∏gma("p‚Ä∫")

	)

608 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

609 
	#__STREXH
(
v√Üue
, 
¬±r
√ã
	`__¬∞¬™x
(v√Üue,√ñ√•)

	)

611 
	#__STREXH
(
v√Üue
, 
¬±r
√ã
	`_P√∏gma
("push"√ã_P√∏gma("d√ºg_su¬µ¬™s‚Ä†3731"√ã
	`__¬∞¬™x
(v√Üue,√ñ√•√ã_P√∏gma("p‚Ä∫")

	)

623 #i‚Ä°
def√∂ed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

624 
	#__STREXW
(
v√Üue
, 
¬±r
√ã
	`__¬∞¬™x
(v√Üue,√ñ√•)

	)

626 
	#__STREXW
(
v√Üue
, 
¬±r
√ã
	`_P√∏gma
("push"√ã_P√∏gma("d√ºg_su¬µ¬™s‚Ä†3731"√ã
	`__¬∞¬™x
(v√Üue,√ñ√•√ã_P√∏gma("p‚Ä∫")

	)

634 
	#__CLREX
 
__Àõ¬™x


	)

644 
	#__SSAT
 
__s√üt


	)

654 
	#__USAT
 
__u√üt


	)

664 #i‚Äöde‚Ä°
__NO_EMBEDDED_ASM


665 
__¬©√•ibu√£__
((
¬£Àòi‚ÅÑ
(".¬∫x_√£xt"))√ã
__STATIC_INLINE
 
__ASM
 
u√∂t32_t
 
	$__RRX
(
u√∂t32_t
 
v√Üue
)

667 
¬∫x
 
r0
,√ë0

668 
bx
 
√É


669 
	}
}

679 
	#__LDRBT
(
¬±r
√ã((
u√∂t8_t
 ) 
	`__ldœÄ
‚Äô√•))

	)

688 
	#__LDRHT
(
¬±r
√ã((
u√∂t16_t
√ã
	`__ldœÄ
‚Äô√•))

	)

697 
	#__LDRT
(
¬±r
√ã((
u√∂t32_t
 ) 
	`__ldœÄ
‚Äô√•))

	)

706 
	#__STRBT
(
v√Üue
, 
¬±r
√ã
	`__¬∞œÄ
(v√Üue,√ñ√•)

	)

715 
	#__STRHT
(
v√Üue
, 
¬±r
√ã
	`__¬∞œÄ
(v√Üue,√ñ√•)

	)

724 
	#__STRT
(
v√Üue
, 
¬±r
√ã
	`__¬∞œÄ
(v√Üue,√ñ√•)

	)

727 (
def√∂ed
 (
__ARM_ARCH_7EM__
√ã&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

736 
__¬©√•ibu√£__
((
√Üways_√∂l√∂e
)√ã
__STATIC_INLINE
 
√∂t32_t
 
	$__SSAT
(
√∂t32_t
 
v√Ü
, 
u√∂t32_t
 
√üt
)

738 i‚Ä°((
√üt
 >= 1U) && (sat <= 32U))

740 c‚ÅÑ¬∞ 
√∂t32_t
 
max
 = (√∂t32_t)((1U << (
√üt
 - 1U)) - 1U);

741 c‚ÅÑ¬∞ 
√∂t32_t
 
m√∂
 = -1 - 
max
 ;

742 i‚Ä°(
v√Ü
 > 
max
)

744  
max
;

746 i‚Ä°(
v√Ü
 < 
m√∂
)

748  
m√∂
;

751  
v√Ü
;

752 
	}
}

761 
__¬©√•ibu√£__
((
√Üways_√∂l√∂e
)√ã
__STATIC_INLINE
 
u√∂t32_t
 
	$__USAT
(
√∂t32_t
 
v√Ü
, 
u√∂t32_t
 
√üt
)

763 i‚Ä°(
√üt
 <= 31U)

765 c‚ÅÑ¬∞ 
u√∂t32_t
 
max
 = ((1U << 
√üt
) - 1U);

766 i‚Ä°(
v√Ü
 > (
√∂t32_t
)
max
)

768  
max
;

770 i‚Ä°(
v√Ü
 < 0)

775  (
u√∂t32_t
)
v√Ü
;

776 
	}
}

779 (
def√∂ed
 (
__ARM_ARCH_7EM__
√ã&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

790 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7EM__
) && (__ARM_ARCH_7EM__ == 1)) )

792 
	#__SADD8
 
__√üdd8


	)

793 
	#__QADD8
 
__qadd8


	)

794 
	#__SHADD8
 
__shadd8


	)

795 
	#__UADD8
 
__uadd8


	)

796 
	#__UQADD8
 
__uqadd8


	)

797 
	#__UHADD8
 
__uhadd8


	)

798 
	#__SSUB8
 
__ssub8


	)

799 
	#__QSUB8
 
__qsub8


	)

800 
	#__SHSUB8
 
__shsub8


	)

801 
	#__USUB8
 
__usub8


	)

802 
	#__UQSUB8
 
__uqsub8


	)

803 
	#__UHSUB8
 
__uhsub8


	)

804 
	#__SADD16
 
__√üdd16


	)

805 
	#__QADD16
 
__qadd16


	)

806 
	#__SHADD16
 
__shadd16


	)

807 
	#__UADD16
 
__uadd16


	)

808 
	#__UQADD16
 
__uqadd16


	)

809 
	#__UHADD16
 
__uhadd16


	)

810 
	#__SSUB16
 
__ssub16


	)

811 
	#__QSUB16
 
__qsub16


	)

812 
	#__SHSUB16
 
__shsub16


	)

813 
	#__USUB16
 
__usub16


	)

814 
	#__UQSUB16
 
__uqsub16


	)

815 
	#__UHSUB16
 
__uhsub16


	)

816 
	#__SASX
 
__√üsx


	)

817 
	#__QASX
 
__qasx


	)

818 
	#__SHASX
 
__shasx


	)

819 
	#__UASX
 
__uasx


	)

820 
	#__UQASX
 
__uqasx


	)

821 
	#__UHASX
 
__uhasx


	)

822 
	#__SSAX
 
__s√üx


	)

823 
	#__QSAX
 
__q√üx


	)

824 
	#__SHSAX
 
__sh√üx


	)

825 
	#__USAX
 
__u√üx


	)

826 
	#__UQSAX
 
__uq√üx


	)

827 
	#__UHSAX
 
__uh√üx


	)

828 
	#__USAD8
 
__u√üd8


	)

829 
	#__USADA8
 
__u√üda8


	)

830 
	#__SSAT16
 
__s√üt16


	)

831 
	#__USAT16
 
__u√üt16


	)

832 
	#__UXTB16
 
__uxtb16


	)

833 
	#__UXTAB16
 
__ux√®b16


	)

834 
	#__SXTB16
 
__sxtb16


	)

835 
	#__SXTAB16
 
__sx√®b16


	)

836 
	#__SMUAD
 
__smuad


	)

837 
	#__SMUADX
 
__smuadx


	)

838 
	#__SMLAD
 
__sm≈ìd


	)

839 
	#__SMLADX
 
__sm≈ìdx


	)

840 
	#__SMLALD
 
__sm≈ìld


	)

841 
	#__SMLALDX
 
__sm≈ìldx


	)

842 
	#__SMUSD
 
__smusd


	)

843 
	#__SMUSDX
 
__smusdx


	)

844 
	#__SMLSD
 
__smlsd


	)

845 
	#__SMLSDX
 
__smlsdx


	)

846 
	#__SMLSLD
 
__sml¬∂d


	)

847 
	#__SMLSLDX
 
__sml¬∂dx


	)

848 
	#__SEL
 
__¬£l


	)

849 
	#__QADD
 
__qadd


	)

850 
	#__QSUB
 
__qsub


	)

852 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
√ã‚Äì((((
u√∂t32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

853 ((((
u√∂t32_t
)(
ARG2
)√ã<< (
ARG3
)√ã& 0xFFFF0000UL√ã)

	)

855 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
√ã‚Äì((((
u√∂t32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

856 ((((
u√∂t32_t
)(
ARG2
)√ã>> (
ARG3
)√ã& 0x0000FFFFUL√ã)

	)

858 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
√ã‚Äì(
√∂t32_t
)((((
√∂t64_t
)(ARG1) * (ARG2)) + \

859 ((
√∂t64_t
)(
ARG3
√ã<< 32U√ã√ã>> 32U))

	)

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_armclang.h

27 #i‚Äöde‚Ä°
__CMSIS_ARMCLANG_H


28 
	#__CMSIS_ARMCLANG_H


	)

30 #¬•agm¬Æ
Àõ‚Ñ¢g
 
sy¬∞em_h√≥d√Æ


32 #i‚Äöde‚Ä°
__ARM_COMPAT_H


33 
	~<¬®m_com‚àët.h
>

37 #i‚Äöde‚Ä° 
__ASM


38 
	#__ASM
 
__asm


	)

40 #i‚Äöde‚Ä° 
__INLINE


41 
	#__INLINE
 
__√∂l√∂e


	)

43 #i‚Äöde‚Ä° 
__STATIC_INLINE


44 
	#__STATIC_INLINE
 
__√∂l√∂e


	)

46 #i‚Äöde‚Ä° 
__STATIC_FORCEINLINE


47 
	#__STATIC_FORCEINLINE
 
	`__¬©√•ibu√£__
((
√Üways_√∂l√∂e
)√ã
__√∂l√∂e


	)

49 #i‚Äöde‚Ä° 
__NO_RETURN


50 
	#__NO_RETURN
 
	`__¬©√•ibu√£__
((
__n‚Äπ√´u‚à´__
))

	)

52 #i‚Äöde‚Ä° 
__USED


53 
	#__USED
 
	`__¬©√•ibu√£__
((
u¬£d
))

	)

55 #i‚Äöde‚Ä° 
__WEAK


56 
	#__WEAK
 
	`__¬©√•ibu√£__
((
w√≥k
))

	)

58 #i‚Äöde‚Ä° 
__PACKED


59 
	#__PACKED
 
	`__¬©√•ibu√£__
((
‚àëcked
, 
	`√Üig‚àöd
(1)))

	)

61 #i‚Äöde‚Ä° 
__PACKED_STRUCT


62 
	#__PACKED_STRUCT
 
	`__¬©√•ibu√£__
((
‚àëcked
, 
	`√Üig‚àöd
(1)))

	)

64 #i‚Äöde‚Ä° 
__PACKED_UNION


65 
	#__PACKED_UNION
 
	`__¬©√•ibu√£__
((
‚àëcked
, 
	`√Üig‚àöd
(1)))

	)

67 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32


68 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
push


69 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
ign‚Äπed
 "-Wpacked"

71 
__¬©√•ibu√£__
((
‚àëcked
)√ã
	gT_UINT32
 { 
u√∂t32_t
 
	gv
; };

72 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
p‚Ä∫


73 
	#__UNALIGNED_UINT32
(
x
√ã(((
T_UINT32
 *)(x))->
v
)

	)

75 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_WRITE


76 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
push


77 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
ign‚Äπed
 "-Wpacked"

79 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
u√∂t16_t
 
	gv
; };

80 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
p‚Ä∫


81 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT16_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

83 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_READ


84 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
push


85 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
ign‚Äπed
 "-Wpacked"

87 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
u√∂t16_t
 
	gv
; };

88 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
p‚Ä∫


89 
	#__UNALIGNED_UINT16_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT16_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

91 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_WRITE


92 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
push


93 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
ign‚Äπed
 "-Wpacked"

95 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
u√∂t32_t
 
	gv
; };

96 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
p‚Ä∫


97 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT32_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

99 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_READ


100 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
push


101 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
ign‚Äπed
 "-Wpacked"

103 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
u√∂t32_t
 
	gv
; };

104 #¬•agm¬Æ
Àõ‚Ñ¢g
 
d√ºgno¬∞ic
 
p‚Ä∫


105 
	#__UNALIGNED_UINT32_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT32_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

107 #i‚Äöde‚Ä° 
__ALIGNED


108 
	#__ALIGNED
(
x
√ã
	`__¬©√•ibu√£__
((
	`√Üig‚àöd
(x)))

	)

110 #i‚Äöde‚Ä° 
__RESTRICT


111 
	#__RESTRICT
 
__¬™¬∞riÀò


	)

142 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_CONTROL
()

144 
u√∂t32_t
 
¬™su‚Ä¶
;

146 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, c‚ÅÑ√•Ô¨Å" : "√ô" (
¬™su‚Ä¶
) );

147 (
¬™su‚Ä¶
);

148 
	}
}

151 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

157 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_CONTROL_NS
()

159 
u√∂t32_t
 
¬™su‚Ä¶
;

161 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, c‚ÅÑ√•Ô¨Å_ns" : "√ô" (
¬™su‚Ä¶
) );

162 (
¬™su‚Ä¶
);

163 
	}
}

172 
__STATIC_FORCEINLINE
 
	$__¬£t_CONTROL
(
u√∂t32_t
 
c‚ÅÑ√•Ô¨Å
)

174 
__ASM
 vÔ¨Å¬©√ª√™("MSR c‚ÅÑ√•Ô¨Å, %0" : : "r" (
c‚ÅÑ√•Ô¨Å
) : "memory");

175 
	}
}

178 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

184 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_CONTROL_NS
(
u√∂t32_t
 
c‚ÅÑ√•Ô¨Å
)

186 
__ASM
 vÔ¨Å¬©√ª√™("MSR c‚ÅÑ√•Ô¨Å_ns, %0" : : "r" (
c‚ÅÑ√•Ô¨Å
) : "memory");

187 
	}
}

196 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_IPSR
()

198 
u√∂t32_t
 
¬™su‚Ä¶
;

200 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, ip¬ß" : "√ô" (
¬™su‚Ä¶
) );

201 (
¬™su‚Ä¶
);

202 
	}
}

210 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_APSR
()

212 
u√∂t32_t
 
¬™su‚Ä¶
;

214 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√°p¬ß" : "√ô" (
¬™su‚Ä¶
) );

215 (
¬™su‚Ä¶
);

216 
	}
}

224 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_xPSR
()

226 
u√∂t32_t
 
¬™su‚Ä¶
;

228 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, xp¬ß" : "√ô" (
¬™su‚Ä¶
) );

229 (
¬™su‚Ä¶
);

230 
	}
}

238 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_PSP
()

240 
u√∂t32_t
 
¬™su‚Ä¶
;

242 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√ñ‚Ä¢" : "√ô" (
¬™su‚Ä¶
) );

243 (
¬™su‚Ä¶
);

244 
	}
}

247 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

253 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_PSP_NS
()

255 
u√∂t32_t
 
¬™su‚Ä¶
;

257 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√ñ‚Ä¢_ns" : "√ô" (
¬™su‚Ä¶
) );

258 (
¬™su‚Ä¶
);

259 
	}
}

268 
__STATIC_FORCEINLINE
 
	$__¬£t_PSP
(
u√∂t32_t
 
t‚Ä∫OfProcS√®ck
)

270 
__ASM
 vÔ¨Å¬©√ª√™("MSR√ñ‚Ä¢, %0" : : "r" (
t‚Ä∫OfProcS√®ck
) : );

271 
	}
}

274 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

280 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_PSP_NS
(
u√∂t32_t
 
t‚Ä∫OfProcS√®ck
)

282 
__ASM
 vÔ¨Å¬©√ª√™("MSR√ñ‚Ä¢_ns, %0" : : "r" (
t‚Ä∫OfProcS√®ck
) : );

283 
	}
}

292 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_MSP
()

294 
u√∂t32_t
 
¬™su‚Ä¶
;

296 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, m‚Ä¢" : "√ô" (
¬™su‚Ä¶
) );

297 (
¬™su‚Ä¶
);

298 
	}
}

301 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

307 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_MSP_NS
()

309 
u√∂t32_t
 
¬™su‚Ä¶
;

311 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, m‚Ä¢_ns" : "√ô" (
¬™su‚Ä¶
) );

312 (
¬™su‚Ä¶
);

313 
	}
}

322 
__STATIC_FORCEINLINE
 
	$__¬£t_MSP
(
u√∂t32_t
 
t‚Ä∫OfMa√∂S√®ck
)

324 
__ASM
 vÔ¨Å¬©√ª√™("MSR m‚Ä¢, %0" : : "r" (
t‚Ä∫OfMa√∂S√®ck
) : );

325 
	}
}

328 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

334 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_MSP_NS
(
u√∂t32_t
 
t‚Ä∫OfMa√∂S√®ck
)

336 
__ASM
 vÔ¨Å¬©√ª√™("MSR m‚Ä¢_ns, %0" : : "r" (
t‚Ä∫OfMa√∂S√®ck
) : );

337 
	}
}

341 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

347 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_SP_NS
()

349 
u√∂t32_t
 
¬™su‚Ä¶
;

351 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, sp_ns" : "√ô" (
¬™su‚Ä¶
) );

352 (
¬™su‚Ä¶
);

353 
	}
}

361 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_SP_NS
(
u√∂t32_t
 
t‚Ä∫OfS√®ck
)

363 
__ASM
 vÔ¨Å¬©√ª√™("MSR sp_ns, %0" : : "r" (
t‚Ä∫OfS√®ck
) : );

364 
	}
}

373 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_PRIMASK
()

375 
u√∂t32_t
 
¬™su‚Ä¶
;

377 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√ñrimask" : "√ô" (
¬™su‚Ä¶
) );

378 (
¬™su‚Ä¶
);

379 
	}
}

382 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

388 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_PRIMASK_NS
()

390 
u√∂t32_t
 
¬™su‚Ä¶
;

392 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√ñrimask_ns" : "√ô" (
¬™su‚Ä¶
) );

393 (
¬™su‚Ä¶
);

394 
	}
}

403 
__STATIC_FORCEINLINE
 
	$__¬£t_PRIMASK
(
u√∂t32_t
 
¬•iMask
)

405 
__ASM
 vÔ¨Å¬©√ª√™("MSR√ñrimask, %0" : : "r" (
¬•iMask
) : "memory");

406 
	}
}

409 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

415 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_PRIMASK_NS
(
u√∂t32_t
 
¬•iMask
)

417 
__ASM
 vÔ¨Å¬©√ª√™("MSR√ñrimask_ns, %0" : : "r" (
¬•iMask
) : "memory");

418 
	}
}

422 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

423 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

424 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

430 
	#__√≠ab√Ä_√Åu‚Ä¶_√∫q
 
__√≠ab√Ä_fiq


	)

438 
	#__di√üb√Ä_√Åu‚Ä¶_√∫q
 
__di√üb√Ä_fiq


	)

446 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_BASEPRI
()

448 
u√∂t32_t
 
¬™su‚Ä¶
;

450 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, ba¬£¬•i" : "√ô" (
¬™su‚Ä¶
) );

451 (
¬™su‚Ä¶
);

452 
	}
}

455 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

461 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_BASEPRI_NS
()

463 
u√∂t32_t
 
¬™su‚Ä¶
;

465 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, ba¬£¬•i_ns" : "√ô" (
¬™su‚Ä¶
) );

466 (
¬™su‚Ä¶
);

467 
	}
}

476 
__STATIC_FORCEINLINE
 
	$__¬£t_BASEPRI
(
u√∂t32_t
 
ba¬£Pri
)

478 
__ASM
 vÔ¨Å¬©√ª√™("MSR ba¬£¬•i, %0" : : "r" (
ba¬£Pri
) : "memory");

479 
	}
}

482 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

488 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_BASEPRI_NS
(
u√∂t32_t
 
ba¬£Pri
)

490 
__ASM
 vÔ¨Å¬©√ª√™("MSR ba¬£¬•i_ns, %0" : : "r" (
ba¬£Pri
) : "memory");

491 
	}
}

501 
__STATIC_FORCEINLINE
 
	$__¬£t_BASEPRI_MAX
(
u√∂t32_t
 
ba¬£Pri
)

503 
__ASM
 vÔ¨Å¬©√ª√™("MSR ba¬£¬•i_max, %0" : : "r" (
ba¬£Pri
) : "memory");

504 
	}
}

512 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_FAULTMASK
()

514 
u√∂t32_t
 
¬™su‚Ä¶
;

516 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, fau‚Ä¶mask" : "√ô" (
¬™su‚Ä¶
) );

517 (
¬™su‚Ä¶
);

518 
	}
}

521 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

527 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_FAULTMASK_NS
()

529 
u√∂t32_t
 
¬™su‚Ä¶
;

531 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, fau‚Ä¶mask_ns" : "√ô" (
¬™su‚Ä¶
) );

532 (
¬™su‚Ä¶
);

533 
	}
}

542 
__STATIC_FORCEINLINE
 
	$__¬£t_FAULTMASK
(
u√∂t32_t
 
√Åu‚Ä¶Mask
)

544 
__ASM
 vÔ¨Å¬©√ª√™("MSR fau‚Ä¶mask, %0" : : "r" (
√Åu‚Ä¶Mask
) : "memory");

545 
	}
}

548 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

554 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_FAULTMASK_NS
(
u√∂t32_t
 
√Åu‚Ä¶Mask
)

556 
__ASM
 vÔ¨Å¬©√ª√™("MSR fau‚Ä¶mask_ns, %0" : : "r" (
√Åu‚Ä¶Mask
) : "memory");

557 
	}
}

561 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

562 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

565 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

566 (
def√∂ed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

577 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_PSPLIM
()

579 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

580 (!
	`def√∂ed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

584 
u√∂t32_t
 
¬™su‚Ä¶
;

585 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√ñ‚Ä¢lim" : "√ô" (
¬™su‚Ä¶
) );

586  
¬™su‚Ä¶
;

588 
	}
}

590 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3))

600 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_PSPLIM_NS
()

602 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

606 
u√∂t32_t
 
¬™su‚Ä¶
;

607 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0,√ñ‚Ä¢lim_ns" : "√ô" (
¬™su‚Ä¶
) );

608  
¬™su‚Ä¶
;

610 
	}
}

623 
__STATIC_FORCEINLINE
 
	$__¬£t_PSPLIM
(
u√∂t32_t
 
ProcS√®ckP√•Lim√¥
)

625 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

626 (!
	`def√∂ed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

628 ()
ProcS√®ckP√•Lim√¥
;

630 
__ASM
 vÔ¨Å¬©√ª√™("MSR√ñ‚Ä¢lim, %0" : : "r" (
ProcS√®ckP√•Lim√¥
));

632 
	}
}

635 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

645 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_PSPLIM_NS
(
u√∂t32_t
 
ProcS√®ckP√•Lim√¥
)

647 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

649 ()
ProcS√®ckP√•Lim√¥
;

651 
__ASM
 vÔ¨Å¬©√ª√™("MSR√ñ‚Ä¢lim_ns, %0\n" : : "r" (
ProcS√®ckP√•Lim√¥
));

653 
	}
}

665 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__g√´_MSPLIM
()

667 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

668 (!
	`def√∂ed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

672 
u√∂t32_t
 
¬™su‚Ä¶
;

673 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, m‚Ä¢lim" : "√ô" (
¬™su‚Ä¶
) );

674  
¬™su‚Ä¶
;

676 
	}
}

679 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

688 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__TZ_g√´_MSPLIM_NS
()

690 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

694 
u√∂t32_t
 
¬™su‚Ä¶
;

695 
__ASM
 vÔ¨Å¬©√ª√™("MRS %0, m‚Ä¢lim_ns" : "√ô" (
¬™su‚Ä¶
) );

696  
¬™su‚Ä¶
;

698 
	}
}

710 
__STATIC_FORCEINLINE
 
	$__¬£t_MSPLIM
(
u√∂t32_t
 
Ma√∂S√®ckP√•Lim√¥
)

712 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

713 (!
	`def√∂ed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

715 ()
Ma√∂S√®ckP√•Lim√¥
;

717 
__ASM
 vÔ¨Å¬©√ª√™("MSR m‚Ä¢lim, %0" : : "r" (
Ma√∂S√®ckP√•Lim√¥
));

719 
	}
}

722 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

731 
__STATIC_FORCEINLINE
 
	$__TZ_¬£t_MSPLIM_NS
(
u√∂t32_t
 
Ma√∂S√®ckP√•Lim√¥
)

733 #i‚Ä°(!(
	`def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

735 ()
Ma√∂S√®ckP√•Lim√¥
;

737 
__ASM
 vÔ¨Å¬©√ª√™("MSR m‚Ä¢lim_ns, %0" : : "r" (
Ma√∂S√®ckP√•Lim√¥
));

739 
	}
}

743 (
def√∂ed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

750 #i‚Ä°((
def√∂ed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

751 (
def√∂ed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

752 
	#__g√´_FPSCR
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_g√´_√Çs¬∏


	)

754 
	#__g√´_FPSCR
(√ã((
u√∂t32_t
)0U)

	)

762 #i‚Ä°((
def√∂ed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

763 (
def√∂ed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

764 
	#__¬£t_FPSCR
 
__bu√ªt√∂_¬®m_¬£t_√Çs¬∏


	)

766 
	#__¬£t_FPSCR
(
x
√ã(()(x))

	)

782 #i‚Ä°
def√∂ed
 (
__thumb__
√ã&& !def√∂ed (
__thumb2__
)

783 
	#__CMSIS_GCC_OUT_REG
(
r
√ã"ÀÜ" (r)

	)

784 
	#__CMSIS_GCC_USE_REG
(
r
√ã"l" (r)

	)

786 
	#__CMSIS_GCC_OUT_REG
(
r
√ã"√ô" (r)

	)

787 
	#__CMSIS_GCC_USE_REG
(
r
√ã"r" (r)

	)

794 
	#__NOP
 
__bu√ªt√∂_¬®m_n‚Ä∫


	)

800 
	#__WFI
 
__bu√ªt√∂_¬®m_wfi


	)

808 
	#__WFE
 
__bu√ªt√∂_¬®m_w‚Äû


	)

815 
	#__SEV
 
__bu√ªt√∂_¬®m_¬£v


	)

824 
	#__ISB
(√ã
	`__bu√ªt√∂_¬®m_isb
(0xF);

	)

831 
	#__DSB
(√ã
	`__bu√ªt√∂_¬®m_dsb
(0xF);

	)

839 
	#__DMB
(√ã
	`__bu√ªt√∂_¬®m_dmb
(0xF);

	)

848 
	#__REV
(
v√Üue
√ã
	`__bu√ªt√∂_bsw‚â†32
(v√Üue)

	)

857 
	#__REV16
(
v√Üue
√ã
	`__ROR
(
	`__REV
(v√Üue), 16)

	)

866 
	#__REVSH
(
v√Üue
√ã(
√∂t16_t
)
	`__bu√ªt√∂_bsw‚â†16
(v√Üue)

	)

876 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__ROR
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

878 
‚Ä∫2
 %= 32U;

879 i‚Ä°(
‚Ä∫2
 == 0U)

881  
‚Ä∫1
;

883  (
‚Ä∫1
 >> 
‚Ä∫2
) | (op1 << (32U - op2));

884 
	}
}

894 
	#__BKPT
(
v√Üue
√ã
__ASM
 vÔ¨Å¬©√ª√™("bk¬± "#v√Üue)

	)

903 
	#__RBIT
 
__bu√ªt√∂_¬®m_rb√¥


	)

911 
	#__CLZ
 (
u√∂t8_t
)
__bu√ªt√∂_Àõz


	)

914 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

915 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

916 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

917 (
def√∂ed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

924 
	#__LDREXB
 (
u√∂t8_t
)
__bu√ªt√∂_¬®m_ld¬™x


	)

933 
	#__LDREXH
 (
u√∂t16_t
)
__bu√ªt√∂_¬®m_ld¬™x


	)

942 
	#__LDREXW
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_ld¬™x


	)

953 
	#__STREXB
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_¬∞¬™x


	)

964 
	#__STREXH
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_¬∞¬™x


	)

975 
	#__STREXW
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_¬∞¬™x


	)

982 
	#__CLREX
 
__bu√ªt√∂_¬®m_Àõ¬™x


	)

985 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

986 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

987 (
def√∂ed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) ) */

990 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

991 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

992 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

1001 
	#__SSAT
 
__bu√ªt√∂_¬®m_s√üt


	)

1011 
	#__USAT
 
__bu√ªt√∂_¬®m_u√üt


	)

1021 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__RRX
(
u√∂t32_t
 
v√Üue
)

1023 
u√∂t32_t
 
¬™su‚Ä¶
;

1025 
__ASM
 vÔ¨Å¬©√ª√™("¬∫x %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
¬™su‚Ä¶
√ã: 
	`__CMSIS_GCC_USE_REG
 (
v√Üue
) );

1026 (
¬™su‚Ä¶
);

1027 
	}
}

1036 
__STATIC_FORCEINLINE
 
u√∂t8_t
 
	$__LDRBT
(vÔ¨Å¬©√ª√™
u√∂t8_t
 *
¬±r
)

1038 
u√∂t32_t
 
¬™su‚Ä¶
;

1040 
__ASM
 vÔ¨Å¬©√ª√™("ldrb√†%0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "Q" (*
¬±r
) );

1041  ((
u√∂t8_t
√ã
¬™su‚Ä¶
);

1042 
	}
}

1051 
__STATIC_FORCEINLINE
 
u√∂t16_t
 
	$__LDRHT
(vÔ¨Å¬©√ª√™
u√∂t16_t
 *
¬±r
)

1053 
u√∂t32_t
 
¬™su‚Ä¶
;

1055 
__ASM
 vÔ¨Å¬©√ª√™("ldrh√†%0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "Q" (*
¬±r
) );

1056  ((
u√∂t16_t
√ã
¬™su‚Ä¶
);

1057 
	}
}

1066 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__LDRT
(vÔ¨Å¬©√ª√™
u√∂t32_t
 *
¬±r
)

1068 
u√∂t32_t
 
¬™su‚Ä¶
;

1070 
__ASM
 vÔ¨Å¬©√ª√™("ldœÄ %0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "Q" (*
¬±r
) );

1071 (
¬™su‚Ä¶
);

1072 
	}
}

1081 
__STATIC_FORCEINLINE
 
	$__STRBT
(
u√∂t8_t
 
v√Üue
, vÔ¨Å¬©√ª√™u√∂t8_√†*
¬±r
)

1083 
__ASM
 vÔ¨Å¬©√ª√™("¬∞rb√†%1, %0" : "=Q" (*
¬±r
√ã: "r" ((
u√∂t32_t
)
v√Üue
) );

1084 
	}
}

1093 
__STATIC_FORCEINLINE
 
	$__STRHT
(
u√∂t16_t
 
v√Üue
, vÔ¨Å¬©√ª√™u√∂t16_√†*
¬±r
)

1095 
__ASM
 vÔ¨Å¬©√ª√™("¬∞rh√†%1, %0" : "=Q" (*
¬±r
√ã: "r" ((
u√∂t32_t
)
v√Üue
) );

1096 
	}
}

1105 
__STATIC_FORCEINLINE
 
	$__STRT
(
u√∂t32_t
 
v√Üue
, vÔ¨Å¬©√ª√™u√∂t32_√†*
¬±r
)

1107 
__ASM
 vÔ¨Å¬©√ª√™("¬∞œÄ %1, %0" : "=Q" (*
¬±r
√ã: "r" (
v√Üue
) );

1108 
	}
}

1111 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1112 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1121 
__STATIC_FORCEINLINE
 
√∂t32_t
 
	$__SSAT
(
√∂t32_t
 
v√Ü
, 
u√∂t32_t
 
√üt
)

1123 i‚Ä°((
√üt
 >= 1U) && (sat <= 32U))

1125 c‚ÅÑ¬∞ 
√∂t32_t
 
max
 = (√∂t32_t)((1U << (
√üt
 - 1U)) - 1U);

1126 c‚ÅÑ¬∞ 
√∂t32_t
 
m√∂
 = -1 - 
max
 ;

1127 i‚Ä°(
v√Ü
 > 
max
)

1129  
max
;

1131 i‚Ä°(
v√Ü
 < 
m√∂
)

1133  
m√∂
;

1136  
v√Ü
;

1137 
	}
}

1146 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__USAT
(
√∂t32_t
 
v√Ü
, 
u√∂t32_t
 
√üt
)

1148 i‚Ä°(
√üt
 <= 31U)

1150 c‚ÅÑ¬∞ 
u√∂t32_t
 
max
 = ((1U << 
√üt
) - 1U);

1151 i‚Ä°(
v√Ü
 > (
√∂t32_t
)
max
)

1153  
max
;

1155 i‚Ä°(
v√Ü
 < 0)

1160  (
u√∂t32_t
)
v√Ü
;

1161 
	}
}

1164 (
def√∂ed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1165 (
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1168 #i‚Ä°((
def√∂ed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1169 (
def√∂ed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1176 
__STATIC_FORCEINLINE
 
u√∂t8_t
 
	$__LDAB
(vÔ¨Å¬©√ª√™
u√∂t8_t
 *
¬±r
)

1178 
u√∂t32_t
 
¬™su‚Ä¶
;

1180 
__ASM
 vÔ¨Å¬©√ª√™("ldab %0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "Q" (*
¬±r
) );

1181  ((
u√∂t8_t
√ã
¬™su‚Ä¶
);

1182 
	}
}

1191 
__STATIC_FORCEINLINE
 
u√∂t16_t
 
	$__LDAH
(vÔ¨Å¬©√ª√™
u√∂t16_t
 *
¬±r
)

1193 
u√∂t32_t
 
¬™su‚Ä¶
;

1195 
__ASM
 vÔ¨Å¬©√ª√™("ldah %0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "Q" (*
¬±r
) );

1196  ((
u√∂t16_t
√ã
¬™su‚Ä¶
);

1197 
	}
}

1206 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__LDA
(vÔ¨Å¬©√ª√™
u√∂t32_t
 *
¬±r
)

1208 
u√∂t32_t
 
¬™su‚Ä¶
;

1210 
__ASM
 vÔ¨Å¬©√ª√™("ld¬Æ%0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "Q" (*
¬±r
) );

1211 (
¬™su‚Ä¶
);

1212 
	}
}

1221 
__STATIC_FORCEINLINE
 
	$__STLB
(
u√∂t8_t
 
v√Üue
, vÔ¨Å¬©√ª√™u√∂t8_√†*
¬±r
)

1223 
__ASM
 vÔ¨Å¬©√ª√™("¬∞lb %1, %0" : "=Q" (*
¬±r
√ã: "r" ((
u√∂t32_t
)
v√Üue
) );

1224 
	}
}

1233 
__STATIC_FORCEINLINE
 
	$__STLH
(
u√∂t16_t
 
v√Üue
, vÔ¨Å¬©√ª√™u√∂t16_√†*
¬±r
)

1235 
__ASM
 vÔ¨Å¬©√ª√™("¬∞lh %1, %0" : "=Q" (*
¬±r
√ã: "r" ((
u√∂t32_t
)
v√Üue
) );

1236 
	}
}

1245 
__STATIC_FORCEINLINE
 
	$__STL
(
u√∂t32_t
 
v√Üue
, vÔ¨Å¬©√ª√™u√∂t32_√†*
¬±r
)

1247 
__ASM
 vÔ¨Å¬©√ª√™("¬∞¬ª%1, %0" : "=Q" (*
¬±r
√ã: "r" ((
u√∂t32_t
)
v√Üue
) );

1248 
	}
}

1257 
	#__LDAEXB
 (
u√∂t8_t
)
__bu√ªt√∂_¬®m_ld¬¥x


	)

1266 
	#__LDAEXH
 (
u√∂t16_t
)
__bu√ªt√∂_¬®m_ld¬¥x


	)

1275 
	#__LDAEX
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_ld¬¥x


	)

1286 
	#__STLEXB
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_¬∞√Äx


	)

1297 
	#__STLEXH
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_¬∞√Äx


	)

1308 
	#__STLEX
 (
u√∂t32_t
)
__bu√ªt√∂_¬®m_¬∞√Äx


	)

1311 (
def√∂ed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

1322 #i‚Ä°(
def√∂ed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1))

1324 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SADD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1326 
u√∂t32_t
 
¬™su‚Ä¶
;

1328 
__ASM
 vÔ¨Å¬©√ª√™("√üdd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1329 (
¬™su‚Ä¶
);

1330 
	}
}

1332 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__QADD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1334 
u√∂t32_t
 
¬™su‚Ä¶
;

1336 
__ASM
 vÔ¨Å¬©√ª√™("qadd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1337 (
¬™su‚Ä¶
);

1338 
	}
}

1340 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SHADD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1342 
u√∂t32_t
 
¬™su‚Ä¶
;

1344 
__ASM
 vÔ¨Å¬©√ª√™("shadd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1345 (
¬™su‚Ä¶
);

1346 
	}
}

1348 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UADD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1350 
u√∂t32_t
 
¬™su‚Ä¶
;

1352 
__ASM
 vÔ¨Å¬©√ª√™("uadd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1353 (
¬™su‚Ä¶
);

1354 
	}
}

1356 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UQADD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1358 
u√∂t32_t
 
¬™su‚Ä¶
;

1360 
__ASM
 vÔ¨Å¬©√ª√™("uqadd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1361 (
¬™su‚Ä¶
);

1362 
	}
}

1364 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UHADD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1366 
u√∂t32_t
 
¬™su‚Ä¶
;

1368 
__ASM
 vÔ¨Å¬©√ª√™("uhadd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1369 (
¬™su‚Ä¶
);

1370 
	}
}

1373 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SSUB8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1375 
u√∂t32_t
 
¬™su‚Ä¶
;

1377 
__ASM
 vÔ¨Å¬©√ª√™("ssub8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1378 (
¬™su‚Ä¶
);

1379 
	}
}

1381 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__QSUB8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1383 
u√∂t32_t
 
¬™su‚Ä¶
;

1385 
__ASM
 vÔ¨Å¬©√ª√™("qsub8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1386 (
¬™su‚Ä¶
);

1387 
	}
}

1389 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SHSUB8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1391 
u√∂t32_t
 
¬™su‚Ä¶
;

1393 
__ASM
 vÔ¨Å¬©√ª√™("shsub8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1394 (
¬™su‚Ä¶
);

1395 
	}
}

1397 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__USUB8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1399 
u√∂t32_t
 
¬™su‚Ä¶
;

1401 
__ASM
 vÔ¨Å¬©√ª√™("usub8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1402 (
¬™su‚Ä¶
);

1403 
	}
}

1405 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UQSUB8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1407 
u√∂t32_t
 
¬™su‚Ä¶
;

1409 
__ASM
 vÔ¨Å¬©√ª√™("uqsub8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1410 (
¬™su‚Ä¶
);

1411 
	}
}

1413 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UHSUB8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1415 
u√∂t32_t
 
¬™su‚Ä¶
;

1417 
__ASM
 vÔ¨Å¬©√ª√™("uhsub8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1418 (
¬™su‚Ä¶
);

1419 
	}
}

1422 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SADD16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1424 
u√∂t32_t
 
¬™su‚Ä¶
;

1426 
__ASM
 vÔ¨Å¬©√ª√™("√üdd16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1427 (
¬™su‚Ä¶
);

1428 
	}
}

1430 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__QADD16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1432 
u√∂t32_t
 
¬™su‚Ä¶
;

1434 
__ASM
 vÔ¨Å¬©√ª√™("qadd16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1435 (
¬™su‚Ä¶
);

1436 
	}
}

1438 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SHADD16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1440 
u√∂t32_t
 
¬™su‚Ä¶
;

1442 
__ASM
 vÔ¨Å¬©√ª√™("shadd16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1443 (
¬™su‚Ä¶
);

1444 
	}
}

1446 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UADD16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1448 
u√∂t32_t
 
¬™su‚Ä¶
;

1450 
__ASM
 vÔ¨Å¬©√ª√™("uadd16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1451 (
¬™su‚Ä¶
);

1452 
	}
}

1454 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UQADD16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1456 
u√∂t32_t
 
¬™su‚Ä¶
;

1458 
__ASM
 vÔ¨Å¬©√ª√™("uqadd16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1459 (
¬™su‚Ä¶
);

1460 
	}
}

1462 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UHADD16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1464 
u√∂t32_t
 
¬™su‚Ä¶
;

1466 
__ASM
 vÔ¨Å¬©√ª√™("uhadd16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1467 (
¬™su‚Ä¶
);

1468 
	}
}

1470 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SSUB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1472 
u√∂t32_t
 
¬™su‚Ä¶
;

1474 
__ASM
 vÔ¨Å¬©√ª√™("ssub16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1475 (
¬™su‚Ä¶
);

1476 
	}
}

1478 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__QSUB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1480 
u√∂t32_t
 
¬™su‚Ä¶
;

1482 
__ASM
 vÔ¨Å¬©√ª√™("qsub16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1483 (
¬™su‚Ä¶
);

1484 
	}
}

1486 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SHSUB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1488 
u√∂t32_t
 
¬™su‚Ä¶
;

1490 
__ASM
 vÔ¨Å¬©√ª√™("shsub16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1491 (
¬™su‚Ä¶
);

1492 
	}
}

1494 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__USUB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1496 
u√∂t32_t
 
¬™su‚Ä¶
;

1498 
__ASM
 vÔ¨Å¬©√ª√™("usub16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1499 (
¬™su‚Ä¶
);

1500 
	}
}

1502 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UQSUB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1504 
u√∂t32_t
 
¬™su‚Ä¶
;

1506 
__ASM
 vÔ¨Å¬©√ª√™("uqsub16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1507 (
¬™su‚Ä¶
);

1508 
	}
}

1510 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UHSUB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1512 
u√∂t32_t
 
¬™su‚Ä¶
;

1514 
__ASM
 vÔ¨Å¬©√ª√™("uhsub16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1515 (
¬™su‚Ä¶
);

1516 
	}
}

1518 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SASX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1520 
u√∂t32_t
 
¬™su‚Ä¶
;

1522 
__ASM
 vÔ¨Å¬©√ª√™("√üsx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1523 (
¬™su‚Ä¶
);

1524 
	}
}

1526 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__QASX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1528 
u√∂t32_t
 
¬™su‚Ä¶
;

1530 
__ASM
 vÔ¨Å¬©√ª√™("qasx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1531 (
¬™su‚Ä¶
);

1532 
	}
}

1534 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SHASX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1536 
u√∂t32_t
 
¬™su‚Ä¶
;

1538 
__ASM
 vÔ¨Å¬©√ª√™("shasx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1539 (
¬™su‚Ä¶
);

1540 
	}
}

1542 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UASX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1544 
u√∂t32_t
 
¬™su‚Ä¶
;

1546 
__ASM
 vÔ¨Å¬©√ª√™("uasx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1547 (
¬™su‚Ä¶
);

1548 
	}
}

1550 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UQASX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1552 
u√∂t32_t
 
¬™su‚Ä¶
;

1554 
__ASM
 vÔ¨Å¬©√ª√™("uqasx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1555 (
¬™su‚Ä¶
);

1556 
	}
}

1558 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UHASX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1560 
u√∂t32_t
 
¬™su‚Ä¶
;

1562 
__ASM
 vÔ¨Å¬©√ª√™("uhasx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1563 (
¬™su‚Ä¶
);

1564 
	}
}

1566 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SSAX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1568 
u√∂t32_t
 
¬™su‚Ä¶
;

1570 
__ASM
 vÔ¨Å¬©√ª√™("s√üx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1571 (
¬™su‚Ä¶
);

1572 
	}
}

1574 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__QSAX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1576 
u√∂t32_t
 
¬™su‚Ä¶
;

1578 
__ASM
 vÔ¨Å¬©√ª√™("q√üx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1579 (
¬™su‚Ä¶
);

1580 
	}
}

1582 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SHSAX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1584 
u√∂t32_t
 
¬™su‚Ä¶
;

1586 
__ASM
 vÔ¨Å¬©√ª√™("sh√üx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1587 (
¬™su‚Ä¶
);

1588 
	}
}

1590 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__USAX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1592 
u√∂t32_t
 
¬™su‚Ä¶
;

1594 
__ASM
 vÔ¨Å¬©√ª√™("u√üx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1595 (
¬™su‚Ä¶
);

1596 
	}
}

1598 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UQSAX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1600 
u√∂t32_t
 
¬™su‚Ä¶
;

1602 
__ASM
 vÔ¨Å¬©√ª√™("uq√üx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1603 (
¬™su‚Ä¶
);

1604 
	}
}

1606 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UHSAX
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1608 
u√∂t32_t
 
¬™su‚Ä¶
;

1610 
__ASM
 vÔ¨Å¬©√ª√™("uh√üx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1611 (
¬™su‚Ä¶
);

1612 
	}
}

1614 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__USAD8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1616 
u√∂t32_t
 
¬™su‚Ä¶
;

1618 
__ASM
 vÔ¨Å¬©√ª√™("u√üd8 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1619 (
¬™su‚Ä¶
);

1620 
	}
}

1622 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__USADA8
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, u√∂t32_√†
‚Ä∫3
)

1624 
u√∂t32_t
 
¬™su‚Ä¶
;

1626 
__ASM
 vÔ¨Å¬©√ª√™("u√üda8 %0, %1, %2, %3" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
), "r" (
‚Ä∫3
) );

1627 (
¬™su‚Ä¶
);

1628 
	}
}

1630 
	#__SSAT16
(
ARG1
,
ARG2
) \

1632 
√∂t32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1633 
	`__ASM
 ("s√üt16 %0, %1, %2" : "√ô" (
__RES
√ã: "I" (
ARG2
), "r" (
__ARG1
) ); \

1634 
__RES
; \

1635 })

	)

1637 
	#__USAT16
(
ARG1
,
ARG2
) \

1639 
u√∂t32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1640 
	`__ASM
 ("u√üt16 %0, %1, %2" : "√ô" (
__RES
√ã: "I" (
ARG2
), "r" (
__ARG1
) ); \

1641 
__RES
; \

1642 })

	)

1644 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UXTB16
(
u√∂t32_t
 
‚Ä∫1
)

1646 
u√∂t32_t
 
¬™su‚Ä¶
;

1648 
__ASM
 vÔ¨Å¬©√ª√™("uxtb16 %0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
));

1649 (
¬™su‚Ä¶
);

1650 
	}
}

1652 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__UXTAB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1654 
u√∂t32_t
 
¬™su‚Ä¶
;

1656 
__ASM
 vÔ¨Å¬©√ª√™("ux√®b16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1657 (
¬™su‚Ä¶
);

1658 
	}
}

1660 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SXTB16
(
u√∂t32_t
 
‚Ä∫1
)

1662 
u√∂t32_t
 
¬™su‚Ä¶
;

1664 
__ASM
 vÔ¨Å¬©√ª√™("sxtb16 %0, %1" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
));

1665 (
¬™su‚Ä¶
);

1666 
	}
}

1668 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SXTAB16
(
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1670 
u√∂t32_t
 
¬™su‚Ä¶
;

1672 
__ASM
 vÔ¨Å¬©√ª√™("sx√®b16 %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1673 (
¬™su‚Ä¶
);

1674 
	}
}

1676 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMUAD
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1678 
u√∂t32_t
 
¬™su‚Ä¶
;

1680 
__ASM
 vÔ¨Å¬©√ª√™("smuad %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1681 (
¬™su‚Ä¶
);

1682 
	}
}

1684 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMUADX
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1686 
u√∂t32_t
 
¬™su‚Ä¶
;

1688 
__ASM
 vÔ¨Å¬©√ª√™("smuadx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1689 (
¬™su‚Ä¶
);

1690 
	}
}

1692 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMLAD
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, u√∂t32_√†
‚Ä∫3
)

1694 
u√∂t32_t
 
¬™su‚Ä¶
;

1696 
__ASM
 vÔ¨Å¬©√ª√™("sm≈ìd %0, %1, %2, %3" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
), "r" (
‚Ä∫3
) );

1697 (
¬™su‚Ä¶
);

1698 
	}
}

1700 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMLADX
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, u√∂t32_√†
‚Ä∫3
)

1702 
u√∂t32_t
 
¬™su‚Ä¶
;

1704 
__ASM
 vÔ¨Å¬©√ª√™("sm≈ìdx %0, %1, %2, %3" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
), "r" (
‚Ä∫3
) );

1705 (
¬™su‚Ä¶
);

1706 
	}
}

1708 
__STATIC_FORCEINLINE
 
u√∂t64_t
 
	$__SMLALD
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, 
u√∂t64_t
 
acc
)

1710 
	u≈í¬™g_u
{

1711 
u√∂t32_t
 
w32
[2];

1712 
u√∂t64_t
 
w64
;

1713 } 
≈ír
;

1714 
≈ír
.
w64
 = 
acc
;

1716 #i‚Äöde‚Ä°
__ARMEB__


1717 
__ASM
 vÔ¨Å¬©√ª√™("sm≈ìld %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[0]), "√ô" (≈ír.w32[1]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1719 
__ASM
 vÔ¨Å¬©√ª√™("sm≈ìld %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[1]), "√ô" (≈ír.w32[0]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1722 (
≈ír
.
w64
);

1723 
	}
}

1725 
__STATIC_FORCEINLINE
 
u√∂t64_t
 
	$__SMLALDX
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, 
u√∂t64_t
 
acc
)

1727 
	u≈í¬™g_u
{

1728 
u√∂t32_t
 
w32
[2];

1729 
u√∂t64_t
 
w64
;

1730 } 
≈ír
;

1731 
≈ír
.
w64
 = 
acc
;

1733 #i‚Äöde‚Ä°
__ARMEB__


1734 
__ASM
 vÔ¨Å¬©√ª√™("sm≈ìldx %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[0]), "√ô" (≈ír.w32[1]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1736 
__ASM
 vÔ¨Å¬©√ª√™("sm≈ìldx %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[1]), "√ô" (≈ír.w32[0]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1739 (
≈ír
.
w64
);

1740 
	}
}

1742 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMUSD
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1744 
u√∂t32_t
 
¬™su‚Ä¶
;

1746 
__ASM
 vÔ¨Å¬©√ª√™("smusd %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1747 (
¬™su‚Ä¶
);

1748 
	}
}

1750 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMUSDX
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1752 
u√∂t32_t
 
¬™su‚Ä¶
;

1754 
__ASM
 vÔ¨Å¬©√ª√™("smusdx %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1755 (
¬™su‚Ä¶
);

1756 
	}
}

1758 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMLSD
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, u√∂t32_√†
‚Ä∫3
)

1760 
u√∂t32_t
 
¬™su‚Ä¶
;

1762 
__ASM
 vÔ¨Å¬©√ª√™("smlsd %0, %1, %2, %3" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
), "r" (
‚Ä∫3
) );

1763 (
¬™su‚Ä¶
);

1764 
	}
}

1766 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SMLSDX
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, u√∂t32_√†
‚Ä∫3
)

1768 
u√∂t32_t
 
¬™su‚Ä¶
;

1770 
__ASM
 vÔ¨Å¬©√ª√™("smlsdx %0, %1, %2, %3" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
), "r" (
‚Ä∫3
) );

1771 (
¬™su‚Ä¶
);

1772 
	}
}

1774 
__STATIC_FORCEINLINE
 
u√∂t64_t
 
	$__SMLSLD
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, 
u√∂t64_t
 
acc
)

1776 
	u≈í¬™g_u
{

1777 
u√∂t32_t
 
w32
[2];

1778 
u√∂t64_t
 
w64
;

1779 } 
≈ír
;

1780 
≈ír
.
w64
 = 
acc
;

1782 #i‚Äöde‚Ä°
__ARMEB__


1783 
__ASM
 vÔ¨Å¬©√ª√™("sml¬∂d %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[0]), "√ô" (≈ír.w32[1]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1785 
__ASM
 vÔ¨Å¬©√ª√™("sml¬∂d %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[1]), "√ô" (≈ír.w32[0]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1788 (
≈ír
.
w64
);

1789 
	}
}

1791 
__STATIC_FORCEINLINE
 
u√∂t64_t
 
	$__SMLSLDX
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
, 
u√∂t64_t
 
acc
)

1793 
	u≈í¬™g_u
{

1794 
u√∂t32_t
 
w32
[2];

1795 
u√∂t64_t
 
w64
;

1796 } 
≈ír
;

1797 
≈ír
.
w64
 = 
acc
;

1799 #i‚Äöde‚Ä°
__ARMEB__


1800 
__ASM
 vÔ¨Å¬©√ª√™("sml¬∂dx %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[0]), "√ô" (≈ír.w32[1]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1802 
__ASM
 vÔ¨Å¬©√ª√™("sml¬∂dx %0, %1, %2, %3" : "√ô" (
≈ír
.
w32
[1]), "√ô" (≈ír.w32[0]): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1805 (
≈ír
.
w64
);

1806 
	}
}

1808 
__STATIC_FORCEINLINE
 
u√∂t32_t
 
	$__SEL
 (
u√∂t32_t
 
‚Ä∫1
, u√∂t32_√†
‚Ä∫2
)

1810 
u√∂t32_t
 
¬™su‚Ä¶
;

1812 
__ASM
 vÔ¨Å¬©√ª√™("¬£¬ª%0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1813 (
¬™su‚Ä¶
);

1814 
	}
}

1816 
__STATIC_FORCEINLINE
 
√∂t32_t
 
	$__QADD
‚Äì
√∂t32_t
 
‚Ä∫1
, i¬°32_√†
‚Ä∫2
)

1818 
√∂t32_t
 
¬™su‚Ä¶
;

1820 
__ASM
 vÔ¨Å¬©√ª√™("qadd %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1821 (
¬™su‚Ä¶
);

1822 
	}
}

1824 
__STATIC_FORCEINLINE
 
√∂t32_t
 
	$__QSUB
‚Äì
√∂t32_t
 
‚Ä∫1
, i¬°32_√†
‚Ä∫2
)

1826 
√∂t32_t
 
¬™su‚Ä¶
;

1828 
__ASM
 vÔ¨Å¬©√ª√™("qsub %0, %1, %2" : "√ô" (
¬™su‚Ä¶
√ã: "r" (
‚Ä∫1
), "r" (
‚Ä∫2
) );

1829 (
¬™su‚Ä¶
);

1830 
	}
}

1833 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

1835 
u√∂t32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

1836 
	`__ASM
 ("pkhb√†%0, %1, %2,√ú¬∂ %3" : "√ô" (
__RES
√ã: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1837 
__RES
; \

1838 })

	)

1840 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

1842 
u√∂t32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

1843 i‚Ä°(
ARG3
 == 0) \

1844 
	`__ASM
 ("pkhtb %0, %1, %2" : "√ô" (
__RES
√ã: "r" (
__ARG1
), "r" (
__ARG2
) ); \

1846 
	`__ASM
 ("pkhtb %0, %1, %2,√°¬ß %3" : "√ô" (
__RES
√ã: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1847 
__RES
; \

1848 })

	)

1851 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
√ã‚Äì((((
u√∂t32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

1852 ((((
u√∂t32_t
)(
ARG2
)√ã<< (
ARG3
)√ã& 0xFFFF0000UL√ã)

	)

1854 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
√ã‚Äì((((
u√∂t32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

1855 ((((
u√∂t32_t
)(
ARG2
)√ã>> (
ARG3
)√ã& 0x0000FFFFUL√ã)

	)

1857 
__STATIC_FORCEINLINE
 
√∂t32_t
 
	$__SMMLA
 (
√∂t32_t
 
‚Ä∫1
, i¬°32_√†
‚Ä∫2
, i¬°32_√†
‚Ä∫3
)

1859 
√∂t32_t
 
¬™su‚Ä¶
;

1861 
__ASM
 vÔ¨Å¬©√ª√™("smm≈ì %0, %1, %2, %3" : "√ô" (
¬™su‚Ä¶
): "r" (
‚Ä∫1
), "r" (
‚Ä∫2
), "r" (
‚Ä∫3
) );

1862 (
¬™su‚Ä¶
);

1863 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_compiler.h

25 #i‚Äöde‚Ä°
__CMSIS_COMPILER_H


26 
	#__CMSIS_COMPILER_H


	)

28 
	~<¬∞d√∂t.h
>

33 #i‚Ä°
def√∂ed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

34 
	~"cmsis_¬®mÀõ‚Ñ¢g.h
"

40 #√±i‚Ä°
def√∂ed
 ( 
__GNUC__
 )

41 
	~"cmsis_gcc.h
"

47 #√±i‚Ä°
def√∂ed
 ( 
__ICCARM__
 )

48 
	~<cmsis_icÀárm.h
>

54 #√±i‚Ä°
def√∂ed
 ( 
__TI_ARM__
 )

55 
	~<cmsis_ccs.h
>

57 #i‚Äöde‚Ä° 
__ASM


58 
	#__ASM
 
__asm


	)

60 #i‚Äöde‚Ä° 
__INLINE


61 
	#__INLINE
 
√∂l√∂e


	)

63 #i‚Äöde‚Ä° 
__STATIC_INLINE


64 
	#__STATIC_INLINE
 
√∂l√∂e


	)

66 #i‚Äöde‚Ä° 
__STATIC_FORCEINLINE


67 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

69 #i‚Äöde‚Ä° 
__NO_RETURN


70 
	#__NO_RETURN
 
	`__¬©√•ibu√£__
((
n‚Äπ√´u‚à´
))

	)

72 #i‚Äöde‚Ä° 
__USED


73 
	#__USED
 
	`__¬©√•ibu√£__
((
u¬£d
))

	)

75 #i‚Äöde‚Ä° 
__WEAK


76 
	#__WEAK
 
	`__¬©√•ibu√£__
((
w√≥k
))

	)

78 #i‚Äöde‚Ä° 
__PACKED


79 
	#__PACKED
 
	`__¬©√•ibu√£__
((
‚àëcked
))

	)

81 #i‚Äöde‚Ä° 
__PACKED_STRUCT


82 
	#__PACKED_STRUCT
 
	`__¬©√•ibu√£__
((
‚àëcked
))

	)

84 #i‚Äöde‚Ä° 
__PACKED_UNION


85 
	#__PACKED_UNION
 
	`__¬©√•ibu√£__
((
‚àëcked
))

	)

87 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32


88 
__¬©√•ibu√£__
((
‚àëcked
)√ã
	gT_UINT32
 { 
u√∂t32_t
 
	gv
; };

89 
	#__UNALIGNED_UINT32
(
x
√ã(((
T_UINT32
 *)(x))->
v
)

	)

91 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_WRITE


92 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
u√∂t16_t
 
	gv
; };

93 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT16_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

95 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_READ


96 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
u√∂t16_t
 
	gv
; };

97 
	#__UNALIGNED_UINT16_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT16_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

99 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_WRITE


100 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
u√∂t32_t
 
	gv
; };

101 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT32_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

103 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_READ


104 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
u√∂t32_t
 
	gv
; };

105 
	#__UNALIGNED_UINT32_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT32_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

107 #i‚Äöde‚Ä° 
__ALIGNED


108 
	#__ALIGNED
(
x
√ã
	`__¬©√•ibu√£__
((
	`√Üig‚àöd
(x)))

	)

110 #i‚Äöde‚Ä° 
__RESTRICT


111 #w¬®n√∂g 
No
 
comp√ª√Æ
 
‚Ä¢ecific
 
sÔ¨Åuti‚ÅÑ
 
__RESTRICT
. __RESTRICT 
is
 
ign‚Äπed
.

112 
	#__RESTRICT


	)

119 #√±i‚Ä°
def√∂ed
 ( 
__TASKING__
 )

126 #i‚Äöde‚Ä° 
__ASM


127 
	#__ASM
 
__asm


	)

129 #i‚Äöde‚Ä° 
__INLINE


130 
	#__INLINE
 
√∂l√∂e


	)

132 #i‚Äöde‚Ä° 
__STATIC_INLINE


133 
	#__STATIC_INLINE
 
√∂l√∂e


	)

135 #i‚Äöde‚Ä° 
__STATIC_FORCEINLINE


136 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

138 #i‚Äöde‚Ä° 
__NO_RETURN


139 
	#__NO_RETURN
 
	`__¬©√•ibu√£__
((
n‚Äπ√´u‚à´
))

	)

141 #i‚Äöde‚Ä° 
__USED


142 
	#__USED
 
	`__¬©√•ibu√£__
((
u¬£d
))

	)

144 #i‚Äöde‚Ä° 
__WEAK


145 
	#__WEAK
 
	`__¬©√•ibu√£__
((
w√≥k
))

	)

147 #i‚Äöde‚Ä° 
__PACKED


148 
	#__PACKED
 
__‚àëcked__


	)

150 #i‚Äöde‚Ä° 
__PACKED_STRUCT


151 
	#__PACKED_STRUCT
 
__‚àëcked__


	)

153 #i‚Äöde‚Ä° 
__PACKED_UNION


154 
	#__PACKED_UNION
 
__‚àëcked__


	)

156 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32


157 
__‚àëcked__
 
	gT_UINT32
 { 
u√∂t32_t
 
	gv
; };

158 
	#__UNALIGNED_UINT32
(
x
√ã(((
T_UINT32
 *)(x))->
v
)

	)

160 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_WRITE


161 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
u√∂t16_t
 
	gv
; };

162 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT16_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

164 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_READ


165 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
u√∂t16_t
 
	gv
; };

166 
	#__UNALIGNED_UINT16_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT16_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

168 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_WRITE


169 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
u√∂t32_t
 
	gv
; };

170 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT32_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

172 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_READ


173 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
u√∂t32_t
 
	gv
; };

174 
	#__UNALIGNED_UINT32_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT32_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

176 #i‚Äöde‚Ä° 
__ALIGNED


177 
	#__ALIGNED
(
x
√ã
	`__√Üign
(x)

	)

179 #i‚Äöde‚Ä° 
__RESTRICT


180 #w¬®n√∂g 
No
 
comp√ª√Æ
 
‚Ä¢ecific
 
sÔ¨Åuti‚ÅÑ
 
__RESTRICT
. __RESTRICT 
is
 
ign‚Äπed
.

181 
	#__RESTRICT


	)

188 #√±i‚Ä°
def√∂ed
 ( 
__CSMC__
 )

189 
	~<cmsis_csm.h
>

191 #i‚Äöde‚Ä° 
__ASM


192 
	#__ASM
 
_asm


	)

194 #i‚Äöde‚Ä° 
__INLINE


195 
	#__INLINE
 
√∂l√∂e


	)

197 #i‚Äöde‚Ä° 
__STATIC_INLINE


198 
	#__STATIC_INLINE
 
√∂l√∂e


	)

200 #i‚Äöde‚Ä° 
__STATIC_FORCEINLINE


201 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

203 #i‚Äöde‚Ä° 
__NO_RETURN


205 
	#__NO_RETURN


	)

207 #i‚Äöde‚Ä° 
__USED


208 #w¬®n√∂g 
No
 
comp√ª√Æ
 
‚Ä¢ecific
 
sÔ¨Åuti‚ÅÑ
 
__USED
. __USED 
is
 
ign‚Äπed
.

209 
	#__USED


	)

211 #i‚Äöde‚Ä° 
__WEAK


212 
	#__WEAK
 
__w√≥k


	)

214 #i‚Äöde‚Ä° 
__PACKED


215 
	#__PACKED
 @
‚àëcked


	)

217 #i‚Äöde‚Ä° 
__PACKED_STRUCT


218 
	#__PACKED_STRUCT
 @
‚àëcked
 

	)

220 #i‚Äöde‚Ä° 
__PACKED_UNION


221 
	#__PACKED_UNION
 @
‚àëcked
 

	)

223 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32


224 @
‚àëcked
 
	sT_UINT32
 { 
u√∂t32_t
 
	mv
; };

225 
	#__UNALIGNED_UINT32
(
x
√ã(((
T_UINT32
 *)(x))->
v
)

	)

227 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_WRITE


228 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
u√∂t16_t
 
	gv
; };

229 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT16_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

231 #i‚Äöde‚Ä° 
__UNALIGNED_UINT16_READ


232 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
u√∂t16_t
 
	gv
; };

233 
	#__UNALIGNED_UINT16_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT16_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

235 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_WRITE


236 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
u√∂t32_t
 
	gv
; };

237 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
v√Ü
√ã()((((
T_UINT32_WRITE
 *)(*)‚óäddr))->
v
√ãÔ£ø(v√Ü))

	)

239 #i‚Äöde‚Ä° 
__UNALIGNED_UINT32_READ


240 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
u√∂t32_t
 
	gv
; };

241 
	#__UNALIGNED_UINT32_READ
(
addr
√ã(((c‚ÅÑ¬∞ 
T_UINT32_READ
 *)(c‚ÅÑ¬∞ *)‚óäddr))->
v
)

	)

243 #i‚Äöde‚Ä° 
__ALIGNED


244 #w¬®n√∂g 
No
 
comp√ª√Æ
 
‚Ä¢ecific
 
sÔ¨Åuti‚ÅÑ
 
__ALIGNED
. __ALIGNED 
is
 
ign‚Äπed
.

245 
	#__ALIGNED
(
x
)

	)

247 #i‚Äöde‚Ä° 
__RESTRICT


248 #w¬®n√∂g 
No
 
comp√ª√Æ
 
‚Ä¢ecific
 
sÔ¨Åuti‚ÅÑ
 
__RESTRICT
. __RESTRICT 
is
 
ign‚Äπed
.

249 
	#__RESTRICT


	)

256 #√±i‚Ä° 
def√∂ed
 ( 
__CC_ARM
 )

257 
	~"cmsis_¬®mcc.h
"

262 #√Ær‚Äπ 
Unknown
 
comp√ª√Æ
.

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_version.h

25 #i‚Ä° 
def√∂ed
 ( 
__ICCARM__
 )

26 #¬•agm¬Æ
sy¬∞em_√∂Àõude


27 #√±i‚Ä°
def√∂ed
 (
__Àõ‚Ñ¢g__
)

28 #¬•agm¬Æ
Àõ‚Ñ¢g
 
sy¬∞em_h√≥d√Æ


31 #i‚Äöde‚Ä°
__CMSIS_VERSION_H


32 
	#__CMSIS_VERSION_H


	)

35 
	#__CM_CMSIS_VERSION_MAIN
 ( 5U√ã

	)

36 
	#__CM_CMSIS_VERSION_SUB
 ( 1U√ã

	)

37 
	#__CM_CMSIS_VERSION
 ((
__CM_CMSIS_VERSION_MAIN
 << 16U) | \

38 
__CM_CMSIS_VERSION_SUB
 )

	)

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\core_cm3.h

25 #i‚Ä° 
def√∂ed
 ( 
__ICCARM__
 )

26 #¬•agm¬Æ
sy¬∞em_√∂Àõude


27 #√±i‚Ä°
def√∂ed
 (
__Àõ‚Ñ¢g__
)

28 #¬•agm¬Æ
Àõ‚Ñ¢g
 
sy¬∞em_h√≥d√Æ


31 #i‚Äöde‚Ä°
__CORE_CM3_H_GENERIC


32 
	#__CORE_CM3_H_GENERIC


	)

34 
	~<¬∞d√∂t.h
>

36 #ifde‚Ä°
__Àùlu‚Ä¢lus


63 
	~"cmsis_v√Æsi‚ÅÑ.h
"

66 
	#__CM3_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
√ã

	)

67 
	#__CM3_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
√ã

	)

68 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM3_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (3U√ã

	)

76 
	#__FPU_USED
 0U

	)

78 #i‚Ä°
def√∂ed
 ( 
__CC_ARM
 )

79 #i‚Ä°
def√∂ed
 
__TARGET_FPU_VFP


83 #√±i‚Ä°
def√∂ed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‚Ä°
def√∂ed
 
__ARM_PCS_VFP


88 #√±i‚Ä°
def√∂ed
 ( 
__GNUC__
 )

89 #i‚Ä°
def√∂ed
 (
__VFP_FP__
√ã&& !def√∂ed(
__SOFTFP__
)

93 #√±i‚Ä°
def√∂ed
 ( 
__ICCARM__
 )

94 #i‚Ä°
def√∂ed
 
__ARMVFP__


98 #√±i‚Ä°
def√∂ed
 ( 
__TI_ARM__
 )

99 #i‚Ä°
def√∂ed
 
__TI_VFP_SUPPORT__


103 #√±i‚Ä°
def√∂ed
 ( 
__TASKING__
 )

104 #i‚Ä°
def√∂ed
 
__FPU_VFP__


108 #√±i‚Ä°
def√∂ed
 ( 
__CSMC__
 )

109 #i‚Ä°‚Äì
__CSMC__
 & 0x400U)

115 
	~"cmsis_comp√ª√Æ.h
"

118 #ifde‚Ä°
__Àùlu‚Ä¢lus


124 #i‚Äöde‚Ä°
__CMSIS_GENERIC


126 #i‚Äöde‚Ä°
__CORE_CM3_H_DEPENDANT


127 
	#__CORE_CM3_H_DEPENDANT


	)

129 #ifde‚Ä°
__Àùlu‚Ä¢lus


134 #i‚Ä°
def√∂ed
 
__CHECK_DEVICE_DEFINES


135 #i‚Äöde‚Ä°
__CM3_REV


136 
	#__CM3_REV
 0x0200U

	)

140 #i‚Äöde‚Ä°
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚Äöde‚Ä°
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 3U

	)

150 #i‚Äöde‚Ä°
__V√≠d‚Äπ_SysTickC‚ÅÑfig


151 
	#__V√≠d‚Äπ_SysTickC‚ÅÑfig
 0U

	)

164 #ifde‚Ä°
__Àùlu‚Ä¢lus


165 
	#__I
 vÔ¨Å¬©√ª√™

	)

167 
	#__I
 vÔ¨Å¬©√ª√™c‚ÅÑ¬∞

	)

169 
	#__O
 vÔ¨Å¬©√ª√™

	)

170 
	#__IO
 vÔ¨Å¬©√ª√™

	)

173 
	#__IM
 vÔ¨Å¬©√ª√™c‚ÅÑ¬∞

	)

174 
	#__OM
 vÔ¨Å¬©√ª√™

	)

175 
	#__IOM
 vÔ¨Å¬©√ª√™

	)

210 
u√∂t32_t
 
_¬™¬£rved0
:27;

211 
u√∂t32_t
 
Q
:1;

212 
u√∂t32_t
 
V
:1;

213 
u√∂t32_t
 
C
:1;

214 
u√∂t32_t
 
Z
:1;

215 
u√∂t32_t
 
N
:1;

216 } 
b
;

217 
u√∂t32_t
 
w
;

218 } 
	tAPSR_Ty‚â•
;

221 
	#APSR_N_Pos
 31U

	)

222 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
√ã

	)

224 
	#APSR_Z_Pos
 30U

	)

225 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
√ã

	)

227 
	#APSR_C_Pos
 29U

	)

228 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
√ã

	)

230 
	#APSR_V_Pos
 28U

	)

231 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
√ã

	)

233 
	#APSR_Q_Pos
 27U

	)

234 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
√ã

	)

244 
u√∂t32_t
 
ISR
:9;

245 
u√∂t32_t
 
_¬™¬£rved0
:23;

246 } 
b
;

247 
u√∂t32_t
 
w
;

248 } 
	tIPSR_Ty‚â•
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
u√∂t32_t
 
ISR
:9;

263 
u√∂t32_t
 
_¬™¬£rved0
:1;

264 
u√∂t32_t
 
ICI_IT_1
:6;

265 
u√∂t32_t
 
_¬™¬£rved1
:8;

266 
u√∂t32_t
 
T
:1;

267 
u√∂t32_t
 
ICI_IT_2
:2;

268 
u√∂t32_t
 
Q
:1;

269 
u√∂t32_t
 
V
:1;

270 
u√∂t32_t
 
C
:1;

271 
u√∂t32_t
 
Z
:1;

272 
u√∂t32_t
 
N
:1;

273 } 
b
;

274 
u√∂t32_t
 
w
;

275 } 
	txPSR_Ty‚â•
;

278 
	#xPSR_N_Pos
 31U

	)

279 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
√ã

	)

281 
	#xPSR_Z_Pos
 30U

	)

282 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
√ã

	)

284 
	#xPSR_C_Pos
 29U

	)

285 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
√ã

	)

287 
	#xPSR_V_Pos
 28U

	)

288 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
√ã

	)

290 
	#xPSR_Q_Pos
 27U

	)

291 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
√ã

	)

293 
	#xPSR_ICI_IT_2_Pos
 25U

	)

294 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
√ã

	)

296 
	#xPSR_T_Pos
 24U

	)

297 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
√ã

	)

299 
	#xPSR_ICI_IT_1_Pos
 10U

	)

300 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
√ã

	)

302 
	#xPSR_ISR_Pos
 0U

	)

303 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

313 
u√∂t32_t
 
nPRIV
:1;

314 
u√∂t32_t
 
SPSEL
:1;

315 
u√∂t32_t
 
_¬™¬£rved1
:30;

316 } 
b
;

317 
u√∂t32_t
 
w
;

318 } 
	tCONTROL_Ty‚â•
;

321 
	#CONTROL_SPSEL_Pos
 1U

	)

322 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
√ã

	)

324 
	#CONTROL_nPRIV_Pos
 0U

	)

325 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

342 
__IOM
 
u√∂t32_t
 
ISER
[8U];

343 
u√∂t32_t
 
RESERVED0
[24U];

344 
__IOM
 
u√∂t32_t
 
ICER
[8U];

345 
u√∂t32_t
 
RSERVED1
[24U];

346 
__IOM
 
u√∂t32_t
 
ISPR
[8U];

347 
u√∂t32_t
 
RESERVED2
[24U];

348 
__IOM
 
u√∂t32_t
 
ICPR
[8U];

349 
u√∂t32_t
 
RESERVED3
[24U];

350 
__IOM
 
u√∂t32_t
 
IABR
[8U];

351 
u√∂t32_t
 
RESERVED4
[56U];

352 
__IOM
 
u√∂t8_t
 
IP
[240U];

353 
u√∂t32_t
 
RESERVED5
[644U];

354 
__OM
 
u√∂t32_t
 
STIR
;

355 } 
	tNVIC_Ty‚â•
;

358 
	#NVIC_STIR_INTID_Pos
 0U

	)

359 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

376 
__IM
 
u√∂t32_t
 
CPUID
;

377 
__IOM
 
u√∂t32_t
 
ICSR
;

378 
__IOM
 
u√∂t32_t
 
VTOR
;

379 
__IOM
 
u√∂t32_t
 
AIRCR
;

380 
__IOM
 
u√∂t32_t
 
SCR
;

381 
__IOM
 
u√∂t32_t
 
CCR
;

382 
__IOM
 
u√∂t8_t
 
SHP
[12U];

383 
__IOM
 
u√∂t32_t
 
SHCSR
;

384 
__IOM
 
u√∂t32_t
 
CFSR
;

385 
__IOM
 
u√∂t32_t
 
HFSR
;

386 
__IOM
 
u√∂t32_t
 
DFSR
;

387 
__IOM
 
u√∂t32_t
 
MMFAR
;

388 
__IOM
 
u√∂t32_t
 
BFAR
;

389 
__IOM
 
u√∂t32_t
 
AFSR
;

390 
__IM
 
u√∂t32_t
 
PFR
[2U];

391 
__IM
 
u√∂t32_t
 
DFR
;

392 
__IM
 
u√∂t32_t
 
ADR
;

393 
__IM
 
u√∂t32_t
 
MMFR
[4U];

394 
__IM
 
u√∂t32_t
 
ISAR
[5U];

395 
u√∂t32_t
 
RESERVED0
[5U];

396 
__IOM
 
u√∂t32_t
 
CPACR
;

397 } 
	tSCB_Ty‚â•
;

400 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

401 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
√ã

	)

403 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

404 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
√ã

	)

406 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

407 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
√ã

	)

409 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

410 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
√ã

	)

412 
	#SCB_CPUID_REVISION_Pos
 0U

	)

413 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

416 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

417 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
√ã

	)

419 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

420 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
√ã

	)

422 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

423 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
√ã

	)

425 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

426 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
√ã

	)

428 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

429 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
√ã

	)

431 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

432 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
√ã

	)

434 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

435 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
√ã

	)

437 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

438 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
√ã

	)

440 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

441 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
√ã

	)

443 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

444 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

447 #i‚Ä°
def√∂ed
 (
__CM3_REV
) && (__CM3_REV < 0x0201U)

448 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

449 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
√ã

	)

451 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

452 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
√ã

	)

454 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

455 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
√ã

	)

459 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

460 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
√ã

	)

462 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

463 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
√ã

	)

465 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

466 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
√ã

	)

468 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

469 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
√ã

	)

471 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

472 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
√ã

	)

474 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

475 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
√ã

	)

477 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

478 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

481 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

482 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
√ã

	)

484 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

485 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
√ã

	)

487 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

488 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
√ã

	)

491 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

492 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
√ã

	)

494 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

495 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
√ã

	)

497 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

498 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
√ã

	)

500 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

501 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
√ã

	)

503 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

504 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
√ã

	)

506 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

507 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

510 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

511 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
√ã

	)

513 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

514 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
√ã

	)

516 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

517 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
√ã

	)

519 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

520 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
√ã

	)

522 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

523 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
√ã

	)

525 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

526 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
√ã

	)

528 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

529 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
√ã

	)

531 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

532 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
√ã

	)

534 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

535 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
√ã

	)

537 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

538 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
√ã

	)

540 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

541 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
√ã

	)

543 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

544 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
√ã

	)

546 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

547 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
√ã

	)

549 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

550 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

553 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

554 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
√ã

	)

556 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

557 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
√ã

	)

559 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

560 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

563 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7U√ã

	)

564 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
√ã

	)

566 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4U√ã

	)

567 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
√ã

	)

569 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3U√ã

	)

570 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
√ã

	)

572 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1U√ã

	)

573 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
√ã

	)

575 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0U√ã

	)

576 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

579 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7U√ã

	)

580 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
√ã

	)

582 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4U√ã

	)

583 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
√ã

	)

585 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3U√ã

	)

586 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
√ã

	)

588 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2U√ã

	)

589 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
√ã

	)

591 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1U√ã

	)

592 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
√ã

	)

594 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0U√ã

	)

595 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
√ã

	)

598 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9U√ã

	)

599 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
√ã

	)

601 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8U√ã

	)

602 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
√ã

	)

604 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3U√ã

	)

605 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
√ã

	)

607 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2U√ã

	)

608 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
√ã

	)

610 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1U√ã

	)

611 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
√ã

	)

613 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0U√ã

	)

614 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
√ã

	)

617 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

618 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
√ã

	)

620 
	#SCB_HFSR_FORCED_Pos
 30U

	)

621 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
√ã

	)

623 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

624 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
√ã

	)

627 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

628 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
√ã

	)

630 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

631 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
√ã

	)

633 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

634 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
√ã

	)

636 
	#SCB_DFSR_BKPT_Pos
 1U

	)

637 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
√ã

	)

639 
	#SCB_DFSR_HALTED_Pos
 0U

	)

640 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

657 
u√∂t32_t
 
RESERVED0
[1U];

658 
__IM
 
u√∂t32_t
 
ICTR
;

659 #i‚Ä°
def√∂ed
 (
__CM3_REV
) && (__CM3_REV >= 0x200U)

660 
__IOM
 
u√∂t32_t
 
ACTLR
;

662 
u√∂t32_t
 
RESERVED1
[1U];

664 } 
	tSCnSCB_Ty‚â•
;

667 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

668 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

672 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

673 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
√ã

	)

675 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

676 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
√ã

	)

678 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

679 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

696 
__IOM
 
u√∂t32_t
 
CTRL
;

697 
__IOM
 
u√∂t32_t
 
LOAD
;

698 
__IOM
 
u√∂t32_t
 
VAL
;

699 
__IM
 
u√∂t32_t
 
CALIB
;

700 } 
	tSysTick_Ty‚â•
;

703 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

704 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
√ã

	)

706 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

707 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
√ã

	)

709 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

710 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
√ã

	)

712 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

713 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

716 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

717 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

720 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

721 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

724 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

725 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
√ã

	)

727 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

728 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
√ã

	)

730 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

731 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

748 
__OM
 union

750 
__OM
 
u√∂t8_t
 
u8
;

751 
__OM
 
u√∂t16_t
 
u16
;

752 
__OM
 
u√∂t32_t
 
u32
;

753 } 
PORT
 [32U];

754 
u√∂t32_t
 
RESERVED0
[864U];

755 
__IOM
 
u√∂t32_t
 
TER
;

756 
u√∂t32_t
 
RESERVED1
[15U];

757 
__IOM
 
u√∂t32_t
 
TPR
;

758 
u√∂t32_t
 
RESERVED2
[15U];

759 
__IOM
 
u√∂t32_t
 
TCR
;

760 
u√∂t32_t
 
RESERVED3
[29U];

761 
__OM
 
u√∂t32_t
 
IWR
;

762 
__IM
 
u√∂t32_t
 
IRR
;

763 
__IOM
 
u√∂t32_t
 
IMCR
;

764 
u√∂t32_t
 
RESERVED4
[43U];

765 
__OM
 
u√∂t32_t
 
LAR
;

766 
__IM
 
u√∂t32_t
 
LSR
;

767 
u√∂t32_t
 
RESERVED5
[6U];

768 
__IM
 
u√∂t32_t
 
PID4
;

769 
__IM
 
u√∂t32_t
 
PID5
;

770 
__IM
 
u√∂t32_t
 
PID6
;

771 
__IM
 
u√∂t32_t
 
PID7
;

772 
__IM
 
u√∂t32_t
 
PID0
;

773 
__IM
 
u√∂t32_t
 
PID1
;

774 
__IM
 
u√∂t32_t
 
PID2
;

775 
__IM
 
u√∂t32_t
 
PID3
;

776 
__IM
 
u√∂t32_t
 
CID0
;

777 
__IM
 
u√∂t32_t
 
CID1
;

778 
__IM
 
u√∂t32_t
 
CID2
;

779 
__IM
 
u√∂t32_t
 
CID3
;

780 } 
	tITM_Ty‚â•
;

783 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

784 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

787 
	#ITM_TCR_BUSY_Pos
 23U

	)

788 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
√ã

	)

790 
	#ITM_TCR_T√∏ÀöBusID_Pos
 16U

	)

791 
	#ITM_TCR_T√∏ÀöBusID_Msk
 (0x7FUL << 
ITM_TCR_T√∏ÀöBusID_Pos
√ã

	)

793 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

794 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
√ã

	)

796 
	#ITM_TCR_TSP¬™sÀá√Ä_Pos
 8U

	)

797 
	#ITM_TCR_TSP¬™sÀá√Ä_Msk
 (3UL << 
ITM_TCR_TSP¬™sÀá√Ä_Pos
√ã

	)

799 
	#ITM_TCR_SWOENA_Pos
 4U

	)

800 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
√ã

	)

802 
	#ITM_TCR_DWTENA_Pos
 3U

	)

803 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
√ã

	)

805 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

806 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
√ã

	)

808 
	#ITM_TCR_TSENA_Pos
 1U

	)

809 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
√ã

	)

811 
	#ITM_TCR_ITMENA_Pos
 0U

	)

812 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

815 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

816 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

819 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

820 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

823 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

824 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

827 
	#ITM_LSR_By√£Acc_Pos
 2U

	)

828 
	#ITM_LSR_By√£Acc_Msk
 (1UL << 
ITM_LSR_By√£Acc_Pos
√ã

	)

830 
	#ITM_LSR_AcÀöss_Pos
 1U

	)

831 
	#ITM_LSR_AcÀöss_Msk
 (1UL << 
ITM_LSR_AcÀöss_Pos
√ã

	)

833 
	#ITM_LSR_P¬™¬£¬°_Pos
 0U

	)

834 
	#ITM_LSR_P¬™¬£¬°_Msk
 (1UL )

	)

851 
__IOM
 
u√∂t32_t
 
CTRL
;

852 
__IOM
 
u√∂t32_t
 
CYCCNT
;

853 
__IOM
 
u√∂t32_t
 
CPICNT
;

854 
__IOM
 
u√∂t32_t
 
EXCCNT
;

855 
__IOM
 
u√∂t32_t
 
SLEEPCNT
;

856 
__IOM
 
u√∂t32_t
 
LSUCNT
;

857 
__IOM
 
u√∂t32_t
 
FOLDCNT
;

858 
__IM
 
u√∂t32_t
 
PCSR
;

859 
__IOM
 
u√∂t32_t
 
COMP0
;

860 
__IOM
 
u√∂t32_t
 
MASK0
;

861 
__IOM
 
u√∂t32_t
 
FUNCTION0
;

862 
u√∂t32_t
 
RESERVED0
[1U];

863 
__IOM
 
u√∂t32_t
 
COMP1
;

864 
__IOM
 
u√∂t32_t
 
MASK1
;

865 
__IOM
 
u√∂t32_t
 
FUNCTION1
;

866 
u√∂t32_t
 
RESERVED1
[1U];

867 
__IOM
 
u√∂t32_t
 
COMP2
;

868 
__IOM
 
u√∂t32_t
 
MASK2
;

869 
__IOM
 
u√∂t32_t
 
FUNCTION2
;

870 
u√∂t32_t
 
RESERVED2
[1U];

871 
__IOM
 
u√∂t32_t
 
COMP3
;

872 
__IOM
 
u√∂t32_t
 
MASK3
;

873 
__IOM
 
u√∂t32_t
 
FUNCTION3
;

874 } 
	tDWT_Ty‚â•
;

877 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

878 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
√ã

	)

880 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

881 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
√ã

	)

883 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

884 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
√ã

	)

886 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

887 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
√ã

	)

889 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

890 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
√ã

	)

892 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

893 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
√ã

	)

895 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

896 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
√ã

	)

898 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

899 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
√ã

	)

901 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

902 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
√ã

	)

904 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

905 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
√ã

	)

907 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

908 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
√ã

	)

910 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

911 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
√ã

	)

913 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

914 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
√ã

	)

916 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

917 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
√ã

	)

919 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

920 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
√ã

	)

922 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

923 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
√ã

	)

925 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

926 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
√ã

	)

928 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

929 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

932 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

933 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

936 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

937 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

940 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

941 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

944 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

945 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

948 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

949 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

952 
	#DWT_MASK_MASK_Pos
 0U

	)

953 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

956 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

957 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
√ã

	)

959 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

960 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
√ã

	)

962 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

963 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
√ã

	)

965 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

966 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
√ã

	)

968 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

969 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
√ã

	)

971 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

972 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
√ã

	)

974 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

975 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
√ã

	)

977 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

978 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
√ã

	)

980 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

981 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

998 
__IM
 
u√∂t32_t
 
SSPSR
;

999 
__IOM
 
u√∂t32_t
 
CSPSR
;

1000 
u√∂t32_t
 
RESERVED0
[2U];

1001 
__IOM
 
u√∂t32_t
 
ACPR
;

1002 
u√∂t32_t
 
RESERVED1
[55U];

1003 
__IOM
 
u√∂t32_t
 
SPPR
;

1004 
u√∂t32_t
 
RESERVED2
[131U];

1005 
__IM
 
u√∂t32_t
 
FFSR
;

1006 
__IOM
 
u√∂t32_t
 
FFCR
;

1007 
__IM
 
u√∂t32_t
 
FSCR
;

1008 
u√∂t32_t
 
RESERVED3
[759U];

1009 
__IM
 
u√∂t32_t
 
TRIGGER
;

1010 
__IM
 
u√∂t32_t
 
FIFO0
;

1011 
__IM
 
u√∂t32_t
 
ITATBCTR2
;

1012 
u√∂t32_t
 
RESERVED4
[1U];

1013 
__IM
 
u√∂t32_t
 
ITATBCTR0
;

1014 
__IM
 
u√∂t32_t
 
FIFO1
;

1015 
__IOM
 
u√∂t32_t
 
ITCTRL
;

1016 
u√∂t32_t
 
RESERVED5
[39U];

1017 
__IOM
 
u√∂t32_t
 
CLAIMSET
;

1018 
__IOM
 
u√∂t32_t
 
CLAIMCLR
;

1019 
u√∂t32_t
 
RESERVED7
[8U];

1020 
__IM
 
u√∂t32_t
 
DEVID
;

1021 
__IM
 
u√∂t32_t
 
DEVTYPE
;

1022 } 
	tTPI_Ty‚â•
;

1025 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1026 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1029 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1030 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1033 
	#TPI_FFSR_FtN‚ÅÑSt‚Ä∫_Pos
 3U

	)

1034 
	#TPI_FFSR_FtN‚ÅÑSt‚Ä∫_Msk
 (0x1UL << 
TPI_FFSR_FtN‚ÅÑSt‚Ä∫_Pos
√ã

	)

1036 
	#TPI_FFSR_TCP¬™¬£¬°_Pos
 2U

	)

1037 
	#TPI_FFSR_TCP¬™¬£¬°_Msk
 (0x1UL << 
TPI_FFSR_TCP¬™¬£¬°_Pos
√ã

	)

1039 
	#TPI_FFSR_FtSt‚Ä∫‚â•d_Pos
 1U

	)

1040 
	#TPI_FFSR_FtSt‚Ä∫‚â•d_Msk
 (0x1UL << 
TPI_FFSR_FtSt‚Ä∫‚â•d_Pos
√ã

	)

1042 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1043 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1046 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1047 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
√ã

	)

1049 
	#TPI_FFCR_EnFC‚ÅÑt_Pos
 1U

	)

1050 
	#TPI_FFCR_EnFC‚ÅÑt_Msk
 (0x1UL << 
TPI_FFCR_EnFC‚ÅÑt_Pos
√ã

	)

1053 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1054 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1057 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1058 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
√ã

	)

1060 
	#TPI_FIFO0_ITM_by√£cou¬°_Pos
 27U

	)

1061 
	#TPI_FIFO0_ITM_by√£cou¬°_Msk
 (0x3UL << 
TPI_FIFO0_ITM_by√£cou¬°_Pos
√ã

	)

1063 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1064 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
√ã

	)

1066 
	#TPI_FIFO0_ETM_by√£cou¬°_Pos
 24U

	)

1067 
	#TPI_FIFO0_ETM_by√£cou¬°_Msk
 (0x3UL << 
TPI_FIFO0_ETM_by√£cou¬°_Pos
√ã

	)

1069 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1070 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
√ã

	)

1072 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1073 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
√ã

	)

1075 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1076 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1079 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1080 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1082 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1083 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1086 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1087 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
√ã

	)

1089 
	#TPI_FIFO1_ITM_by√£cou¬°_Pos
 27U

	)

1090 
	#TPI_FIFO1_ITM_by√£cou¬°_Msk
 (0x3UL << 
TPI_FIFO1_ITM_by√£cou¬°_Pos
√ã

	)

1092 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1093 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
√ã

	)

1095 
	#TPI_FIFO1_ETM_by√£cou¬°_Pos
 24U

	)

1096 
	#TPI_FIFO1_ETM_by√£cou¬°_Msk
 (0x3UL << 
TPI_FIFO1_ETM_by√£cou¬°_Pos
√ã

	)

1098 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1099 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
√ã

	)

1101 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1102 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
√ã

	)

1104 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1105 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1108 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1109 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1111 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1112 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1115 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1116 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1119 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1120 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
√ã

	)

1122 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1123 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
√ã

	)

1125 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1126 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
√ã

	)

1128 
	#TPI_DEVID_M√∂BufSz_Pos
 6U

	)

1129 
	#TPI_DEVID_M√∂BufSz_Msk
 (0x7UL << 
TPI_DEVID_M√∂BufSz_Pos
√ã

	)

1131 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1132 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
√ã

	)

1134 
	#TPI_DEVID_NrT√∏ÀöI‚âàut_Pos
 0U

	)

1135 
	#TPI_DEVID_NrT√∏ÀöI‚âàut_Msk
 (0x1FUL )

	)

1138 
	#TPI_DEVTYPE_SubTy‚â•_Pos
 4U

	)

1139 
	#TPI_DEVTYPE_SubTy‚â•_Msk
 (0xFUL )

	)

1141 
	#TPI_DEVTYPE_Maj‚ÄπTy‚â•_Pos
 0U

	)

1142 
	#TPI_DEVTYPE_Maj‚ÄπTy‚â•_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‚ÄπTy‚â•_Pos
√ã

	)

1147 #i‚Ä°
def√∂ed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1160 
__IM
 
u√∂t32_t
 
TYPE
;

1161 
__IOM
 
u√∂t32_t
 
CTRL
;

1162 
__IOM
 
u√∂t32_t
 
RNR
;

1163 
__IOM
 
u√∂t32_t
 
RBAR
;

1164 
__IOM
 
u√∂t32_t
 
RASR
;

1165 
__IOM
 
u√∂t32_t
 
RBAR_A1
;

1166 
__IOM
 
u√∂t32_t
 
RASR_A1
;

1167 
__IOM
 
u√∂t32_t
 
RBAR_A2
;

1168 
__IOM
 
u√∂t32_t
 
RASR_A2
;

1169 
__IOM
 
u√∂t32_t
 
RBAR_A3
;

1170 
__IOM
 
u√∂t32_t
 
RASR_A3
;

1171 } 
	tMPU_Ty‚â•
;

1173 
	#MPU_TYPE_RALIASES
 4U

	)

1176 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1177 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
√ã

	)

1179 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1180 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
√ã

	)

1182 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1183 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1186 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1187 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
√ã

	)

1189 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1190 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
√ã

	)

1192 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1193 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1196 
	#MPU_RNR_REGION_Pos
 0U

	)

1197 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1200 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1201 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
√ã

	)

1203 
	#MPU_RBAR_VALID_Pos
 4U

	)

1204 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
√ã

	)

1206 
	#MPU_RBAR_REGION_Pos
 0U

	)

1207 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1210 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1211 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
√ã

	)

1213 
	#MPU_RASR_XN_Pos
 28U

	)

1214 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
√ã

	)

1216 
	#MPU_RASR_AP_Pos
 24U

	)

1217 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
√ã

	)

1219 
	#MPU_RASR_TEX_Pos
 19U

	)

1220 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
√ã

	)

1222 
	#MPU_RASR_S_Pos
 18U

	)

1223 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
√ã

	)

1225 
	#MPU_RASR_C_Pos
 17U

	)

1226 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
√ã

	)

1228 
	#MPU_RASR_B_Pos
 16U

	)

1229 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
√ã

	)

1231 
	#MPU_RASR_SRD_Pos
 8U

	)

1232 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
√ã

	)

1234 
	#MPU_RASR_SIZE_Pos
 1U

	)

1235 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
√ã

	)

1237 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1238 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1256 
__IOM
 
u√∂t32_t
 
DHCSR
;

1257 
__OM
 
u√∂t32_t
 
DCRSR
;

1258 
__IOM
 
u√∂t32_t
 
DCRDR
;

1259 
__IOM
 
u√∂t32_t
 
DEMCR
;

1260 } 
	tC‚ÄπeDebug_Ty‚â•
;

1263 
	#C‚ÄπeDebug_DHCSR_DBGKEY_Pos
 16U

	)

1264 
	#C‚ÄπeDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‚ÄπeDebug_DHCSR_DBGKEY_Pos
√ã

	)

1266 
	#C‚ÄπeDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1267 
	#C‚ÄπeDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_S_RESET_ST_Pos
√ã

	)

1269 
	#C‚ÄπeDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1270 
	#C‚ÄπeDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_S_RETIRE_ST_Pos
√ã

	)

1272 
	#C‚ÄπeDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1273 
	#C‚ÄπeDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_S_LOCKUP_Pos
√ã

	)

1275 
	#C‚ÄπeDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1276 
	#C‚ÄπeDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_S_SLEEP_Pos
√ã

	)

1278 
	#C‚ÄπeDebug_DHCSR_S_HALT_Pos
 17U

	)

1279 
	#C‚ÄπeDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_S_HALT_Pos
√ã

	)

1281 
	#C‚ÄπeDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1282 
	#C‚ÄπeDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_S_REGRDY_Pos
√ã

	)

1284 
	#C‚ÄπeDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1285 
	#C‚ÄπeDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_C_SNAPSTALL_Pos
√ã

	)

1287 
	#C‚ÄπeDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1288 
	#C‚ÄπeDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_C_MASKINTS_Pos
√ã

	)

1290 
	#C‚ÄπeDebug_DHCSR_C_STEP_Pos
 2U

	)

1291 
	#C‚ÄπeDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_C_STEP_Pos
√ã

	)

1293 
	#C‚ÄπeDebug_DHCSR_C_HALT_Pos
 1U

	)

1294 
	#C‚ÄπeDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‚ÄπeDebug_DHCSR_C_HALT_Pos
√ã

	)

1296 
	#C‚ÄπeDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1297 
	#C‚ÄπeDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1300 
	#C‚ÄπeDebug_DCRSR_REGWnR_Pos
 16U

	)

1301 
	#C‚ÄπeDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‚ÄπeDebug_DCRSR_REGWnR_Pos
√ã

	)

1303 
	#C‚ÄπeDebug_DCRSR_REGSEL_Pos
 0U

	)

1304 
	#C‚ÄπeDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1307 
	#C‚ÄπeDebug_DEMCR_TRCENA_Pos
 24U

	)

1308 
	#C‚ÄπeDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_TRCENA_Pos
√ã

	)

1310 
	#C‚ÄπeDebug_DEMCR_MON_REQ_Pos
 19U

	)

1311 
	#C‚ÄπeDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_MON_REQ_Pos
√ã

	)

1313 
	#C‚ÄπeDebug_DEMCR_MON_STEP_Pos
 18U

	)

1314 
	#C‚ÄπeDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_MON_STEP_Pos
√ã

	)

1316 
	#C‚ÄπeDebug_DEMCR_MON_PEND_Pos
 17U

	)

1317 
	#C‚ÄπeDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_MON_PEND_Pos
√ã

	)

1319 
	#C‚ÄπeDebug_DEMCR_MON_EN_Pos
 16U

	)

1320 
	#C‚ÄπeDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_MON_EN_Pos
√ã

	)

1322 
	#C‚ÄπeDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1323 
	#C‚ÄπeDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_HARDERR_Pos
√ã

	)

1325 
	#C‚ÄπeDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1326 
	#C‚ÄπeDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_INTERR_Pos
√ã

	)

1328 
	#C‚ÄπeDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1329 
	#C‚ÄπeDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_BUSERR_Pos
√ã

	)

1331 
	#C‚ÄπeDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1332 
	#C‚ÄπeDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_STATERR_Pos
√ã

	)

1334 
	#C‚ÄπeDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1335 
	#C‚ÄπeDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_CHKERR_Pos
√ã

	)

1337 
	#C‚ÄπeDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1338 
	#C‚ÄπeDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_NOCPERR_Pos
√ã

	)

1340 
	#C‚ÄπeDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1341 
	#C‚ÄπeDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‚ÄπeDebug_DEMCR_VC_MMERR_Pos
√ã

	)

1343 
	#C‚ÄπeDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1344 
	#C‚ÄπeDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1362 
	#_VAL2FLD
(
f√µld
, 
v√Üue
√ã(((
u√∂t32_t
)(v√Üue√ã<< f√µld ## 
_Pos
√ã& f√µld ## 
_Msk
)

	)

1370 
	#_FLD2VAL
(
f√µld
, 
v√Üue
√ã(((
u√∂t32_t
)(v√Üue√ã& f√µld ## 
_Msk
√ã>> f√µld ## 
_Pos
)

	)

1383 
	#SCS_BASE
 (0xE000E000UL√ã

	)

1384 
	#ITM_BASE
 (0xE0000000UL√ã

	)

1385 
	#DWT_BASE
 (0xE0001000UL√ã

	)

1386 
	#TPI_BASE
 (0xE0040000UL√ã

	)

1387 
	#C‚ÄπeDebug_BASE
 (0xE000EDF0UL√ã

	)

1388 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010UL√ã

	)

1389 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100UL√ã

	)

1390 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00UL√ã

	)

1392 
	#SCnSCB
 ((
SCnSCB_Ty‚â•
 *√ã
SCS_BASE
 )

	)

1393 
	#SCB
 ((
SCB_Ty‚â•
 *√ã
SCB_BASE
 )

	)

1394 
	#SysTick
 ((
SysTick_Ty‚â•
 *√ã
SysTick_BASE
 )

	)

1395 
	#NVIC
 ((
NVIC_Ty‚â•
 *√ã
NVIC_BASE
 )

	)

1396 
	#ITM
 ((
ITM_Ty‚â•
 *√ã
ITM_BASE
 )

	)

1397 
	#DWT
 ((
DWT_Ty‚â•
 *√ã
DWT_BASE
 )

	)

1398 
	#TPI
 ((
TPI_Ty‚â•
 *√ã
TPI_BASE
 )

	)

1399 
	#C‚ÄπeDebug
 ((
C‚ÄπeDebug_Ty‚â•
 *√ã
C‚ÄπeDebug_BASE
√ã

	)

1401 #i‚Ä°
def√∂ed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1402 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90UL√ã

	)

1403 
	#MPU
 ((
MPU_Ty‚â•
 *√ã
MPU_BASE
 )

	)

1432 #ifde‚Ä°
CMSIS_NVIC_VIRTUAL


1433 #i‚Äöde‚Ä°
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1434 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_v√∫tu√Ü.h"

	)

1436 #√∂Àõud√™
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1438 
	#NVIC_S√´Pri‚Äπ√¥yGroup√∂g
 
__NVIC_S√´Pri‚Äπ√¥yGroup√∂g


	)

1439 
	#NVIC_G√´Pri‚Äπ√¥yGroup√∂g
 
__NVIC_G√´Pri‚Äπ√¥yGroup√∂g


	)

1440 
	#NVIC_E¬´b√ÄIRQ
 
__NVIC_E¬´b√ÄIRQ


	)

1441 
	#NVIC_G√´E¬´b√ÄIRQ
 
__NVIC_G√´E¬´b√ÄIRQ


	)

1442 
	#NVIC_Di√üb√ÄIRQ
 
__NVIC_Di√üb√ÄIRQ


	)

1443 
	#NVIC_G√´P√≠d√∂gIRQ
 
__NVIC_G√´P√≠d√∂gIRQ


	)

1444 
	#NVIC_S√´P√≠d√∂gIRQ
 
__NVIC_S√´P√≠d√∂gIRQ


	)

1445 
	#NVIC_C√Ä¬®P√≠d√∂gIRQ
 
__NVIC_C√Ä¬®P√≠d√∂gIRQ


	)

1446 
	#NVIC_G√´AÀòive
 
__NVIC_G√´AÀòive


	)

1447 
	#NVIC_S√´Pri‚Äπ√¥y
 
__NVIC_S√´Pri‚Äπ√¥y


	)

1448 
	#NVIC_G√´Pri‚Äπ√¥y
 
__NVIC_G√´Pri‚Äπ√¥y


	)

1449 
	#NVIC_Sy¬∞emRe¬£t
 
__NVIC_Sy¬∞emRe¬£t


	)

1452 #ifde‚Ä°
CMSIS_VECTAB_VIRTUAL


1453 #i‚Äöde‚Ä°
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1454 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_veÀòab_v√∫tu√Ü.h"

	)

1456 #√∂Àõud√™
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1458 
	#NVIC_S√´VeÀò‚Äπ
 
__NVIC_S√´VeÀò‚Äπ


	)

1459 
	#NVIC_G√´VeÀò‚Äπ
 
__NVIC_G√´VeÀò‚Äπ


	)

1462 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1466 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1UL√ã

	)

1467 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9UL√ã

	)

1468 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDUL√ã

	)

1480 
__STATIC_INLINE
 
__NVIC_S√´Pri‚Äπ√¥yGroup√∂g
(
u√∂t32_t
 
Pri‚Äπ√¥yGroup
)

1482 
u√∂t32_t
 
¬™g_v√Üue
;

1483 
u√∂t32_t
 
Pri‚Äπ√¥yGroupTmp
 = (
Pri‚Äπ√¥yGroup
 & (uint32_t)0x07UL);

1485 
¬™g_v√Üue
 = 
SCB
->
AIRCR
;

1486 
¬™g_v√Üue
 &Ô£ø~((
u√∂t32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1487 
¬™g_v√Üue
 = (reg_value |

1488 ((
u√∂t32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1489 (
Pri‚Äπ√¥yGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1490 
SCB
->
AIRCR
 = 
¬™g_v√Üue
;

1499 
__STATIC_INLINE
 
u√∂t32_t
 
__NVIC_G√´Pri‚Äπ√¥yGroup√∂g
()

1501  ((
u√∂t32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
√ã>> 
SCB_AIRCR_PRIGROUP_Pos
));

1511 
__STATIC_INLINE
 
__NVIC_E¬´b√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
)

1513 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1515 
NVIC
->
ISER
[(((
u√∂t32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1528 
__STATIC_INLINE
 
u√∂t32_t
 
__NVIC_G√´E¬´b√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
)

1530 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1532 ((
u√∂t32_t
)(((
NVIC
->
ISER
[(((u√∂t32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1547 
__STATIC_INLINE
 
__NVIC_Di√üb√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
)

1549 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1551 
NVIC
->
ICER
[(((
u√∂t32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1552 
__DSB
();

1553 
__ISB
();

1566 
__STATIC_INLINE
 
u√∂t32_t
 
__NVIC_G√´P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
)

1568 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1570 ((
u√∂t32_t
)(((
NVIC
->
ISPR
[(((u√∂t32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1585 
__STATIC_INLINE
 
__NVIC_S√´P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
)

1587 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1589 
NVIC
->
ISPR
[(((
u√∂t32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1600 
__STATIC_INLINE
 
__NVIC_C√Ä¬®P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
)

1602 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1604 
NVIC
->
ICPR
[(((
u√∂t32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1617 
__STATIC_INLINE
 
u√∂t32_t
 
__NVIC_G√´AÀòive
(
IRQn_Ty‚â•
 
IRQn
)

1619 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1621 ((
u√∂t32_t
)(((
NVIC
->
IABR
[(((u√∂t32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1639 
__STATIC_INLINE
 
__NVIC_S√´Pri‚Äπ√¥y
(
IRQn_Ty‚â•
 
IRQn
, 
u√∂t32_t
 
¬•i‚Äπ√¥y
)

1641 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1643 
NVIC
->
IP
[((
u√∂t32_t
)
IRQn
)] = (
u√∂t8_t
)((
¬•i‚Äπ√¥y
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1647 
SCB
->
SHP
[(((
u√∂t32_t
)
IRQn
√ã& 0xFUL)-4UL] = (
u√∂t8_t
)((
¬•i‚Äπ√¥y
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1661 
__STATIC_INLINE
 
u√∂t32_t
 
__NVIC_G√´Pri‚Äπ√¥y
(
IRQn_Ty‚â•
 
IRQn
)

1664 i‚Ä°((
√∂t32_t
)(
IRQn
) >= 0)

1666 (((
u√∂t32_t
)
NVIC
->
IP
[((u√∂t32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1670 (((
u√∂t32_t
)
SCB
->
SHP
[(((u√∂t32_t)
IRQn
√ã& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1686 
__STATIC_INLINE
 
u√∂t32_t
 
NVIC_EncodePri‚Äπ√¥y
 (u√∂t32_√†
Pri‚Äπ√¥yGroup
, u√∂t32_√†
P¬™em¬±Pri‚Äπ√¥y
, u√∂t32_√†
SubPri‚Äπ√¥y
)

1688 
u√∂t32_t
 
Pri‚Äπ√¥yGroupTmp
 = (
Pri‚Äπ√¥yGroup
 & (uint32_t)0x07UL);

1689 
u√∂t32_t
 
P¬™em¬±Pri‚Äπ√¥yB√¥s
;

1690 
u√∂t32_t
 
SubPri‚Äπ√¥yB√¥s
;

1692 
P¬™em¬±Pri‚Äπ√¥yB√¥s
 = ((7UL - 
Pri‚Äπ√¥yGroupTmp
√ã> (
u√∂t32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1693 
SubPri‚Äπ√¥yB√¥s
 = ((
Pri‚Äπ√¥yGroupTmp
 + (
u√∂t32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1696 ((
P¬™em¬±Pri‚Äπ√¥y
 & (
u√∂t32_t
)((1UL << (
P¬™em¬±Pri‚Äπ√¥yB√¥s
)√ã- 1UL)√ã<< 
SubPri‚Äπ√¥yB√¥s
) |

1697 ((
SubPri‚Äπ√¥y
 & (
u√∂t32_t
)((1UL << (
SubPri‚Äπ√¥yB√¥s
 )) - 1UL)))

1713 
__STATIC_INLINE
 
NVIC_DecodePri‚Äπ√¥y
 (
u√∂t32_t
 
Pri‚Äπ√¥y
, u√∂t32_√†
Pri‚Äπ√¥yGroup
, u√∂t32_t* c‚ÅÑ¬∞ 
pP¬™em¬±Pri‚Äπ√¥y
, u√∂t32_t* c‚ÅÑ¬∞ 
pSubPri‚Äπ√¥y
)

1715 
u√∂t32_t
 
Pri‚Äπ√¥yGroupTmp
 = (
Pri‚Äπ√¥yGroup
 & (uint32_t)0x07UL);

1716 
u√∂t32_t
 
P¬™em¬±Pri‚Äπ√¥yB√¥s
;

1717 
u√∂t32_t
 
SubPri‚Äπ√¥yB√¥s
;

1719 
P¬™em¬±Pri‚Äπ√¥yB√¥s
 = ((7UL - 
Pri‚Äπ√¥yGroupTmp
√ã> (
u√∂t32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1720 
SubPri‚Äπ√¥yB√¥s
 = ((
Pri‚Äπ√¥yGroupTmp
 + (
u√∂t32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1722 *
pP¬™em¬±Pri‚Äπ√¥y
 = (
Pri‚Äπ√¥y
 >> 
SubPri‚Äπ√¥yB√¥s
√ã& (
u√∂t32_t
)((1UL << (
P¬™em¬±Pri‚Äπ√¥yB√¥s
)) - 1UL);

1723 *
pSubPri‚Äπ√¥y
 = (
Pri‚Äπ√¥y
 ) & (
u√∂t32_t
)((1UL << (
SubPri‚Äπ√¥yB√¥s
 )) - 1UL);

1736 
__STATIC_INLINE
 
__NVIC_S√´VeÀò‚Äπ
(
IRQn_Ty‚â•
 
IRQn
, 
u√∂t32_t
 
veÀò‚Äπ
)

1738 
u√∂t32_t
 *
veÀò‚Äπs
 = (u√∂t32_√†*)
SCB
->
VTOR
;

1739 
veÀò‚Äπs
[(
√∂t32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
veÀò‚Äπ
;

1751 
__STATIC_INLINE
 
u√∂t32_t
 
__NVIC_G√´VeÀò‚Äπ
(
IRQn_Ty‚â•
 
IRQn
)

1753 
u√∂t32_t
 *
veÀò‚Äπs
 = (u√∂t32_√†*)
SCB
->
VTOR
;

1754  
veÀò‚Äπs
[(
√∂t32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1762 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy¬∞emRe¬£t
()

1764 
__DSB
();

1766 
SCB
->
AIRCR
 = (
u√∂t32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1767 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1768 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1769 
__DSB
();

1773 
__NOP
();

1781 #i‚Ä°
def√∂ed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1783 
	~"mpu_¬®mv7.h
"

1803 
__STATIC_INLINE
 
u√∂t32_t
 
SCB_G√´FPUTy‚â•
()

1821 #i‚Ä°
def√∂ed
 (
__V√≠d‚Äπ_SysTickC‚ÅÑfig
) && (__Vendor_SysTickConfig == 0U)

1834 
__STATIC_INLINE
 
u√∂t32_t
 
SysTick_C‚ÅÑfig
(u√∂t32_√†
ticks
)

1836 i‚Ä°((
ticks
 - 1UL√ã> 
SysTick_LOAD_RELOAD_Msk
)

1841 
SysTick
->
LOAD
 = (
u√∂t32_t
)(
ticks
 - 1UL);

1842 
NVIC_S√´Pri‚Äπ√¥y
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1843 
SysTick
->
VAL
 = 0UL;

1844 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1845 
SysTick_CTRL_TICKINT_Msk
 |

1846 
SysTick_CTRL_ENABLE_Msk
;

1864 vÔ¨Å¬©√ª√™
√∂t32_t
 
ITM_RxBuf‚Äûr
;

1865 
	#ITM_RXBUFFER_EMPTY
 ((
√∂t32_t
)0x5AA55AA5U√ã

	)

1876 
__STATIC_INLINE
 
u√∂t32_t
 
ITM_S√≠dCh¬®
 (u√∂t32_√†
ch
)

1878 i‚Ä°(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1879 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1881 
ITM
->
PORT
[0U].
u32
 == 0UL)

1883 
__NOP
();

1885 
	gITM
->
	gPORT
[0U].
	gu8
 = (
u√∂t8_t
)
ch
;

1887  (
	gch
);

1897 
__STATIC_INLINE
 
√∂t32_t
 
ITM_ReÀöiveCh¬®
 ()

1899 
√∂t32_t
 
	gch
 = -1;

1901 i‚Ä°(
	gITM_RxBuf‚Äûr
 !Ô£ø
ITM_RXBUFFER_EMPTY
)

1903 
ch
 = 
ITM_RxBuf‚Äûr
;

1904 
	gITM_RxBuf‚Äûr
 = 
ITM_RXBUFFER_EMPTY
;

1907  (
	gch
);

1917 
__STATIC_INLINE
 
√∂t32_t
 
ITM_CheckCh¬®
 ()

1920 i‚Ä°(
	gITM_RxBuf‚Äûr
 =Ô£ø
ITM_RXBUFFER_EMPTY
)

1935 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\mpu_armv7.h

25 #i‚Ä° 
def√∂ed
 ( 
__ICCARM__
 )

26 #¬•agm¬Æ
sy¬∞em_√∂Àõude


27 #√±i‚Ä°
def√∂ed
 (
__Àõ‚Ñ¢g__
)

28 #¬•agm¬Æ
Àõ‚Ñ¢g
 
sy¬∞em_h√≥d√Æ


31 #i‚Äöde‚Ä°
ARM_MPU_ARMV7_H


32 
	#ARM_MPU_ARMV7_H


	)

34 
	#ARM_MPU_REGION_SIZE_32B
 ((
u√∂t8_t
)0x04U)

35 
	#ARM_MPU_REGION_SIZE_64B
 ((
u√∂t8_t
)0x05U)

36 
	#ARM_MPU_REGION_SIZE_128B
 ((
u√∂t8_t
)0x06U)

37 
	#ARM_MPU_REGION_SIZE_256B
 ((
u√∂t8_t
)0x07U)

38 
	#ARM_MPU_REGION_SIZE_512B
 ((
u√∂t8_t
)0x08U)

39 
	#ARM_MPU_REGION_SIZE_1KB
 ((
u√∂t8_t
)0x09U)

40 
	#ARM_MPU_REGION_SIZE_2KB
 ((
u√∂t8_t
)0x0AU)

41 
	#ARM_MPU_REGION_SIZE_4KB
 ((
u√∂t8_t
)0x0BU)

42 
	#ARM_MPU_REGION_SIZE_8KB
 ((
u√∂t8_t
)0x0CU)

43 
	#ARM_MPU_REGION_SIZE_16KB
 ((
u√∂t8_t
)0x0DU)

44 
	#ARM_MPU_REGION_SIZE_32KB
 ((
u√∂t8_t
)0x0EU)

45 
	#ARM_MPU_REGION_SIZE_64KB
 ((
u√∂t8_t
)0x0FU)

46 
	#ARM_MPU_REGION_SIZE_128KB
 ((
u√∂t8_t
)0x10U)

47 
	#ARM_MPU_REGION_SIZE_256KB
 ((
u√∂t8_t
)0x11U)

48 
	#ARM_MPU_REGION_SIZE_512KB
 ((
u√∂t8_t
)0x12U)

49 
	#ARM_MPU_REGION_SIZE_1MB
 ((
u√∂t8_t
)0x13U)

50 
	#ARM_MPU_REGION_SIZE_2MB
 ((
u√∂t8_t
)0x14U)

51 
	#ARM_MPU_REGION_SIZE_4MB
 ((
u√∂t8_t
)0x15U)

52 
	#ARM_MPU_REGION_SIZE_8MB
 ((
u√∂t8_t
)0x16U)

53 
	#ARM_MPU_REGION_SIZE_16MB
 ((
u√∂t8_t
)0x17U)

54 
	#ARM_MPU_REGION_SIZE_32MB
 ((
u√∂t8_t
)0x18U)

55 
	#ARM_MPU_REGION_SIZE_64MB
 ((
u√∂t8_t
)0x19U)

56 
	#ARM_MPU_REGION_SIZE_128MB
 ((
u√∂t8_t
)0x1AU)

57 
	#ARM_MPU_REGION_SIZE_256MB
 ((
u√∂t8_t
)0x1BU)

58 
	#ARM_MPU_REGION_SIZE_512MB
 ((
u√∂t8_t
)0x1CU)

59 
	#ARM_MPU_REGION_SIZE_1GB
 ((
u√∂t8_t
)0x1DU)

60 
	#ARM_MPU_REGION_SIZE_2GB
 ((
u√∂t8_t
)0x1EU)

61 
	#ARM_MPU_REGION_SIZE_4GB
 ((
u√∂t8_t
)0x1FU)

62 

	)

63 
	#ARM_MPU_AP_NONE
 0U

64 
	#ARM_MPU_AP_PRIV
 1U

65 
	#ARM_MPU_AP_URO
 2U

66 
	#ARM_MPU_AP_FULL
 3U

67 
	#ARM_MPU_AP_PRO
 5U

68 
	#ARM_MPU_AP_RO
 6U

69 

	)

75 
	#ARM_MPU_RBAR
(
Regi‚ÅÑ
, 
Ba¬£Add¬™ss
) \

76 (((
Ba¬£Add¬™ss
√ã& 
MPU_RBAR_ADDR_Msk
) | \

77 ((
Regi‚ÅÑ
√ã& 
MPU_RBAR_REGION_Msk
) | \

78 (
MPU_RBAR_VALID_Msk
))

	)

88 
	#ARM_MPU_ACCESS_
(
Ty‚â•ExtF√µld
, 
IsSh¬®√≥b√Ä
, 
IsCach√≥b√Ä
, 
IsBuf‚Äû√∏b√Ä
) \

89 ((((
Ty‚â•ExtF√µld
 ) << 
MPU_RASR_TEX_Pos
√ã& 
MPU_RASR_TEX_Msk
) | \

90 (((
IsSh¬®√≥b√Ä
 ) << 
MPU_RASR_S_Pos
√ã& 
MPU_RASR_S_Msk
) | \

91 (((
IsCach√≥b√Ä
 ) << 
MPU_RASR_C_Pos
√ã& 
MPU_RASR_C_Msk
) | \

92 (((
IsBuf‚Äû√∏b√Ä
 ) << 
MPU_RASR_B_Pos
√ã& 
MPU_RASR_B_Msk
))

	)

103 
	#ARM_MPU_RASR_EX
(
Di√üb√ÄExec
, 
AcÀössP√Æmissi‚ÅÑ
, 
AcÀössA√¢ribu√£s
, 
SubRegi‚ÅÑDi√üb√Ä
, 
Size
) \

104 ((((
Di√üb√ÄExec
 ) << 
MPU_RASR_XN_Pos
√ã& 
MPU_RASR_XN_Msk
) | \

105 (((
AcÀössP√Æmissi‚ÅÑ
√ã<< 
MPU_RASR_AP_Pos
√ã& 
MPU_RASR_AP_Msk
) | \

106 (((
AcÀössA√¢ribu√£s
√ã√ã& (
MPU_RASR_TEX_Msk
 | 
MPU_RASR_S_Msk
 | 
MPU_RASR_C_Msk
 | 
MPU_RASR_B_Msk
)))

	)

120 
	#ARM_MPU_RASR
(
Di√üb√ÄExec
, 
AcÀössP√Æmissi‚ÅÑ
, 
Ty‚â•ExtF√µld
, 
IsSh¬®√≥b√Ä
, 
IsCach√≥b√Ä
, 
IsBuf‚Äû√∏b√Ä
, 
SubRegi‚ÅÑDi√üb√Ä
, 
Size
) \

121 
	`ARM_MPU_RASR_EX
(
Di√üb√ÄExec
, 
AcÀössP√Æmissi‚ÅÑ
, 
	`ARM_MPU_ACCESS_
(
Ty‚â•ExtF√µld
, 
IsSh¬®√≥b√Ä
, 
IsCach√≥b√Ä
, 
IsBuf‚Äû√∏b√Ä
), 
SubRegi‚ÅÑDi√üb√Ä
, 
Size
)

	)

130 
	#ARM_MPU_ACCESS_ORDERED
 
	`ARM_MPU_ACCESS_
(0U, 1U, 0U, 0U)

	)

141 
	#ARM_MPU_ACCESS_DEVICE
(
IsSh¬®√≥b√Ä
√ã((IsSh¬®√≥b√Ä√ã? 
	`ARM_MPU_ACCESS_
(0U, 1U, 0U, 1U√ã: ARM_MPU_ACCESS_(2U, 0U, 0U, 0U))

	)

154 
	#ARM_MPU_ACCESS_NORMAL
(
Ou√£rCp
, 
I¬¨√ÆCp
, 
IsSh¬®√≥b√Ä
√ã
	`ARM_MPU_ACCESS_
((4U | (Ou√£rCp)), IsSh¬®√≥b√Ä, ((I¬¨√ÆCp√ã& 2U), ((I¬¨√ÆCp√ã& 1U))

	)

159 
	#ARM_MPU_CACHEP_NOCACHE
 0U

	)

164 
	#ARM_MPU_CACHEP_WB_WRA
 1U

	)

169 
	#ARM_MPU_CACHEP_WT_NWA
 2U

	)

174 
	#ARM_MPU_CACHEP_WB_NWA
 3U

	)

181 
u√∂t32_t
 
	mRBAR
;

182 
u√∂t32_t
 
	mRASR
;

183 } 
	tARM_MPU_Regi‚ÅÑ_t
;

188 
__STATIC_INLINE
 
	$ARM_MPU_E¬´b√Ä
(
u√∂t32_t
 
MPU_C‚ÅÑ√•Ô¨Å
)

190 
	`__DSB
();

191 
	`__ISB
();

192 
MPU
->
CTRL
 = 
MPU_C‚ÅÑ√•Ô¨Å
 | 
MPU_CTRL_ENABLE_Msk
;

193 #ifde‚Ä°
SCB_SHCSR_MEMFAULTENA_Msk


194 
SCB
->
SHCSR
 |Ô£ø
SCB_SHCSR_MEMFAULTENA_Msk
;

196 
	}
}

200 
__STATIC_INLINE
 
	$ARM_MPU_Di√üb√Ä
()

202 
	`__DSB
();

203 
	`__ISB
();

204 #ifde‚Ä°
SCB_SHCSR_MEMFAULTENA_Msk


205 
SCB
->
SHCSR
 &Ô£ø~
SCB_SHCSR_MEMFAULTENA_Msk
;

207 
MPU
->
CTRL
 &Ô£ø~
MPU_CTRL_ENABLE_Msk
;

208 
	}
}

213 
__STATIC_INLINE
 
	$ARM_MPU_C√ÉRegi‚ÅÑ
(
u√∂t32_t
 
‚à´r
)

215 
MPU
->
RNR
 = 
‚à´r
;

216 
MPU
->
RASR
 = 0U;

217 
	}
}

223 
__STATIC_INLINE
 
	$ARM_MPU_S√´Regi‚ÅÑ
(
u√∂t32_t
 
rb¬®
, u√∂t32_√†
√∏¬ß
)

225 
MPU
->
RBAR
 = 
rb¬®
;

226 
MPU
->
RASR
 = 
√∏¬ß
;

227 
	}
}

234 
__STATIC_INLINE
 
	$ARM_MPU_S√´Regi‚ÅÑEx
(
u√∂t32_t
 
‚à´r
, u√∂t32_√†
rb¬®
, u√∂t32_√†
√∏¬ß
)

236 
MPU
->
RNR
 = 
‚à´r
;

237 
MPU
->
RBAR
 = 
rb¬®
;

238 
MPU
->
RASR
 = 
√∏¬ß
;

239 
	}
}

246 
__STATIC_INLINE
 
	$‚Äπd√ÆedCpy
(vÔ¨Å¬©√ª√™
u√∂t32_t
* 
d¬∞
, c‚ÅÑ¬∞ u√∂t32_t* 
__RESTRICT
 
¬ßc
, u√∂t32_√†
√Än
)

248 
u√∂t32_t
 
i
;

249 
i
 = 0U; i < 
√Än
; ++i)

251 
d¬∞
[
i
] = 
¬ßc
[i];

253 
	}
}

259 
__STATIC_INLINE
 
	$ARM_MPU_LÔ¨Çd
(
ARM_MPU_Regi‚ÅÑ_t
 c‚ÅÑ¬∞* 
√®b√Ä
, 
u√∂t32_t
 
Àôt
)

261 c‚ÅÑ¬∞ 
u√∂t32_t
 
rowW‚ÄπdSize
 = (
ARM_MPU_Regi‚ÅÑ_t
)/4U;

262 
Àôt
 > 
MPU_TYPE_RALIASES
) {

263 
	`‚Äπd√ÆedCpy
(&(
MPU
->
RBAR
), &(
√®b√Ä
->RBAR), 
MPU_TYPE_RALIASES
*
rowW‚ÄπdSize
);

264 
√®b√Ä
 +Ô£ø
MPU_TYPE_RALIASES
;

265 
Àôt
 -Ô£ø
MPU_TYPE_RALIASES
;

267 
	`‚Äπd√ÆedCpy
(&(
MPU
->
RBAR
), &(
√®b√Ä
->RBAR), 
Àôt
*
rowW‚ÄπdSize
);

268 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32_hal_legacy.h

22 #i‚Äöde‚Ä°
STM32_HAL_LEGACY


23 
	#STM32_HAL_LEGACY


	)

25 #ifde‚Ä°
__Àùlu‚Ä¢lus


36 
	#AES_FLAG_RDERR
 
CRYP_FLAG_RDERR


	)

37 
	#AES_FLAG_WRERR
 
CRYP_FLAG_WRERR


	)

38 
	#AES_CLEARFLAG_CCF
 
CRYP_CLEARFLAG_CCF


	)

39 
	#AES_CLEARFLAG_RDERR
 
CRYP_CLEARFLAG_RDERR


	)

40 
	#AES_CLEARFLAG_WRERR
 
CRYP_CLEARFLAG_WRERR


	)

48 
	#ADC_RESOLUTION12b
 
ADC_RESOLUTION_12B


	)

49 
	#ADC_RESOLUTION10b
 
ADC_RESOLUTION_10B


	)

50 
	#ADC_RESOLUTION8b
 
ADC_RESOLUTION_8B


	)

51 
	#ADC_RESOLUTION6b
 
ADC_RESOLUTION_6B


	)

52 
	#OVR_DATA_OVERWRITTEN
 
ADC_OVR_DATA_OVERWRITTEN


	)

53 
	#OVR_DATA_PRESERVED
 
ADC_OVR_DATA_PRESERVED


	)

54 
	#EOC_SINGLE_CONV
 
ADC_EOC_SINGLE_CONV


	)

55 
	#EOC_SEQ_CONV
 
ADC_EOC_SEQ_CONV


	)

56 
	#EOC_SINGLE_SEQ_CONV
 
ADC_EOC_SINGLE_SEQ_CONV


	)

57 
	#REGULAR_GROUP
 
ADC_REGULAR_GROUP


	)

58 
	#INJECTED_GROUP
 
ADC_INJECTED_GROUP


	)

59 
	#REGULAR_INJECTED_GROUP
 
ADC_REGULAR_INJECTED_GROUP


	)

60 
	#AWD_EVENT
 
ADC_AWD_EVENT


	)

61 
	#AWD1_EVENT
 
ADC_AWD1_EVENT


	)

62 
	#AWD2_EVENT
 
ADC_AWD2_EVENT


	)

63 
	#AWD3_EVENT
 
ADC_AWD3_EVENT


	)

64 
	#OVR_EVENT
 
ADC_OVR_EVENT


	)

65 
	#JQOVF_EVENT
 
ADC_JQOVF_EVENT


	)

66 
	#ALL_CHANNELS
 
ADC_ALL_CHANNELS


	)

67 
	#REGULAR_CHANNELS
 
ADC_REGULAR_CHANNELS


	)

68 
	#INJECTED_CHANNELS
 
ADC_INJECTED_CHANNELS


	)

69 
	#SYSCFG_FLAG_SENSOR_ADC
 
ADC_FLAG_SENSOR


	)

70 
	#SYSCFG_FLAG_VREF_ADC
 
ADC_FLAG_VREFINT


	)

71 
	#ADC_CLOCKPRESCALER_PCLK_DIV1
 
ADC_CLOCK_SYNC_PCLK_DIV1


	)

72 
	#ADC_CLOCKPRESCALER_PCLK_DIV2
 
ADC_CLOCK_SYNC_PCLK_DIV2


	)

73 
	#ADC_CLOCKPRESCALER_PCLK_DIV4
 
ADC_CLOCK_SYNC_PCLK_DIV4


	)

74 
	#ADC_CLOCKPRESCALER_PCLK_DIV6
 
ADC_CLOCK_SYNC_PCLK_DIV6


	)

75 
	#ADC_CLOCKPRESCALER_PCLK_DIV8
 
ADC_CLOCK_SYNC_PCLK_DIV8


	)

76 
	#ADC_EXTERNALTRIG0_T6_TRGO
 
ADC_EXTERNALTRIGCONV_T6_TRGO


	)

77 
	#ADC_EXTERNALTRIG1_T21_CC2
 
ADC_EXTERNALTRIGCONV_T21_CC2


	)

78 
	#ADC_EXTERNALTRIG2_T2_TRGO
 
ADC_EXTERNALTRIGCONV_T2_TRGO


	)

79 
	#ADC_EXTERNALTRIG3_T2_CC4
 
ADC_EXTERNALTRIGCONV_T2_CC4


	)

80 
	#ADC_EXTERNALTRIG4_T22_TRGO
 
ADC_EXTERNALTRIGCONV_T22_TRGO


	)

81 
	#ADC_EXTERNALTRIG7_EXT_IT11
 
ADC_EXTERNALTRIGCONV_EXT_IT11


	)

82 
	#ADC_CLOCK_ASYNC
 
ADC_CLOCK_ASYNC_DIV1


	)

83 
	#ADC_EXTERNALTRIG_EDGE_NONE
 
ADC_EXTERNALTRIGCONVEDGE_NONE


	)

84 
	#ADC_EXTERNALTRIG_EDGE_RISING
 
ADC_EXTERNALTRIGCONVEDGE_RISING


	)

85 
	#ADC_EXTERNALTRIG_EDGE_FALLING
 
ADC_EXTERNALTRIGCONVEDGE_FALLING


	)

86 
	#ADC_EXTERNALTRIG_EDGE_RISINGFALLING
 
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING


	)

87 
	#ADC_SAMPLETIME_2CYCLE_5
 
ADC_SAMPLETIME_2CYCLES_5


	)

89 
	#HAL_ADC_STATE_BUSY_REG
 
HAL_ADC_STATE_REG_BUSY


	)

90 
	#HAL_ADC_STATE_BUSY_INJ
 
HAL_ADC_STATE_INJ_BUSY


	)

91 
	#HAL_ADC_STATE_EOC_REG
 
HAL_ADC_STATE_REG_EOC


	)

92 
	#HAL_ADC_STATE_EOC_INJ
 
HAL_ADC_STATE_INJ_EOC


	)

93 
	#HAL_ADC_STATE_ERROR
 
HAL_ADC_STATE_ERROR_INTERNAL


	)

94 
	#HAL_ADC_STATE_BUSY
 
HAL_ADC_STATE_BUSY_INTERNAL


	)

95 
	#HAL_ADC_STATE_AWD
 
HAL_ADC_STATE_AWD1


	)

97 #i‚Ä°
def√∂ed
(
STM32H7
)

98 
	#ADC_CHANNEL_VBAT_DIV4
 
ADC_CHANNEL_VBAT


	)

108 
	#__HAL_CEC_GET_IT
 
__HAL_CEC_GET_FLAG


	)

117 
	#COMP_WINDOWMODE_DISABLED
 
COMP_WINDOWMODE_DISABLE


	)

118 
	#COMP_WINDOWMODE_ENABLED
 
COMP_WINDOWMODE_ENABLE


	)

119 
	#COMP_EXTI_LINE_COMP1_EVENT
 
COMP_EXTI_LINE_COMP1


	)

120 
	#COMP_EXTI_LINE_COMP2_EVENT
 
COMP_EXTI_LINE_COMP2


	)

121 
	#COMP_EXTI_LINE_COMP3_EVENT
 
COMP_EXTI_LINE_COMP3


	)

122 
	#COMP_EXTI_LINE_COMP4_EVENT
 
COMP_EXTI_LINE_COMP4


	)

123 
	#COMP_EXTI_LINE_COMP5_EVENT
 
COMP_EXTI_LINE_COMP5


	)

124 
	#COMP_EXTI_LINE_COMP6_EVENT
 
COMP_EXTI_LINE_COMP6


	)

125 
	#COMP_EXTI_LINE_COMP7_EVENT
 
COMP_EXTI_LINE_COMP7


	)

126 #i‚Ä°
def√∂ed
(
STM32L0
)

127 
	#COMP_LPTIMCONNECTION_ENABLED
 ((
u√∂t32_t
)0x00000003U√ã

	)

129 
	#COMP_OUTPUT_COMP6TIM2OCREFCLR
 
COMP_OUTPUT_COMP6_TIM2OCREFCLR


	)

130 #i‚Ä°
def√∂ed
(
STM32F373xC
√ã|| def√∂ed(
STM32F378xx
)

131 
	#COMP_OUTPUT_TIM3IC1
 
COMP_OUTPUT_COMP1_TIM3IC1


	)

132 
	#COMP_OUTPUT_TIM3OCREFCLR
 
COMP_OUTPUT_COMP1_TIM3OCREFCLR


	)

135 #i‚Ä°
def√∂ed
(
STM32L0
√ã|| def√∂ed(
STM32L4
)

136 
	#COMP_WINDOWMODE_ENABLE
 
COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON


	)

138 
	#COMP_NONINVERTINGINPUT_IO1
 
COMP_INPUT_PLUS_IO1


	)

139 
	#COMP_NONINVERTINGINPUT_IO2
 
COMP_INPUT_PLUS_IO2


	)

140 
	#COMP_NONINVERTINGINPUT_IO3
 
COMP_INPUT_PLUS_IO3


	)

141 
	#COMP_NONINVERTINGINPUT_IO4
 
COMP_INPUT_PLUS_IO4


	)

142 
	#COMP_NONINVERTINGINPUT_IO5
 
COMP_INPUT_PLUS_IO5


	)

143 
	#COMP_NONINVERTINGINPUT_IO6
 
COMP_INPUT_PLUS_IO6


	)

145 
	#COMP_INVERTINGINPUT_1_4VREFINT
 
COMP_INPUT_MINUS_1_4VREFINT


	)

146 
	#COMP_INVERTINGINPUT_1_2VREFINT
 
COMP_INPUT_MINUS_1_2VREFINT


	)

147 
	#COMP_INVERTINGINPUT_3_4VREFINT
 
COMP_INPUT_MINUS_3_4VREFINT


	)

148 
	#COMP_INVERTINGINPUT_VREFINT
 
COMP_INPUT_MINUS_VREFINT


	)

149 
	#COMP_INVERTINGINPUT_DAC1_CH1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

150 
	#COMP_INVERTINGINPUT_DAC1_CH2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

151 
	#COMP_INVERTINGINPUT_DAC1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

152 
	#COMP_INVERTINGINPUT_DAC2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

153 
	#COMP_INVERTINGINPUT_IO1
 
COMP_INPUT_MINUS_IO1


	)

154 #i‚Ä°
def√∂ed
(
STM32L0
)

158 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

159 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO2


	)

161 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_IO2


	)

162 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO3


	)

164 
	#COMP_INVERTINGINPUT_IO4
 
COMP_INPUT_MINUS_IO4


	)

165 
	#COMP_INVERTINGINPUT_IO5
 
COMP_INPUT_MINUS_IO5


	)

167 
	#COMP_OUTPUTLEVEL_LOW
 
COMP_OUTPUT_LEVEL_LOW


	)

168 
	#COMP_OUTPUTLEVEL_HIGH
 
COMP_OUTPUT_LEVEL_HIGH


	)

172 #i‚Ä°
def√∂ed
(
COMP_CSR_LOCK
)

173 
	#COMP_FLAG_LOCK
 
COMP_CSR_LOCK


	)

174 #√±i‚Ä°
def√∂ed
(
COMP_CSR_COMP1LOCK
)

175 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMP1LOCK


	)

176 #√±i‚Ä°
def√∂ed
(
COMP_CSR_COMPxLOCK
)

177 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMPxLOCK


	)

180 #i‚Ä°
def√∂ed
(
STM32L4
)

181 
	#COMP_BLANKINGSRCE_TIM1OC5
 
COMP_BLANKINGSRC_TIM1_OC5_COMP1


	)

182 
	#COMP_BLANKINGSRCE_TIM2OC3
 
COMP_BLANKINGSRC_TIM2_OC3_COMP1


	)

183 
	#COMP_BLANKINGSRCE_TIM3OC3
 
COMP_BLANKINGSRC_TIM3_OC3_COMP1


	)

184 
	#COMP_BLANKINGSRCE_TIM3OC4
 
COMP_BLANKINGSRC_TIM3_OC4_COMP2


	)

185 
	#COMP_BLANKINGSRCE_TIM8OC5
 
COMP_BLANKINGSRC_TIM8_OC5_COMP2


	)

186 
	#COMP_BLANKINGSRCE_TIM15OC1
 
COMP_BLANKINGSRC_TIM15_OC1_COMP2


	)

187 
	#COMP_BLANKINGSRCE_NONE
 
COMP_BLANKINGSRC_NONE


	)

190 #i‚Ä°
def√∂ed
(
STM32L0
)

191 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

192 
	#COMP_MODE_LOWSPEED
 
COMP_POWERMODE_ULTRALOWPOWER


	)

194 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_HIGHSPEED


	)

195 
	#COMP_MODE_MEDIUMSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

196 
	#COMP_MODE_LOWPOWER
 
COMP_POWERMODE_LOWPOWER


	)

197 
	#COMP_MODE_ULTRALOWPOWER
 
COMP_POWERMODE_ULTRALOWPOWER


	)

208 
	#__HAL_CORTEX_SYSTICKCLK_CONFIG
 
HAL_SYSTICK_CLKSourÀöC‚ÅÑfig


	)

217 
	#CRC_OUTPUTDATA_INVERSION_DISABLED
 
CRC_OUTPUTDATA_INVERSION_DISABLE


	)

218 
	#CRC_OUTPUTDATA_INVERSION_ENABLED
 
CRC_OUTPUTDATA_INVERSION_ENABLE


	)

228 
	#DAC1_CHANNEL_1
 
DAC_CHANNEL_1


	)

229 
	#DAC1_CHANNEL_2
 
DAC_CHANNEL_2


	)

230 
	#DAC2_CHANNEL_1
 
DAC_CHANNEL_1


	)

231 
	#DAC_WAVE_NONE
 0x00000000U

	)

232 
	#DAC_WAVE_NOISE
 
DAC_CR_WAVE1_0


	)

233 
	#DAC_WAVE_TRIANGLE
 
DAC_CR_WAVE1_1


	)

234 
	#DAC_WAVEGENERATION_NONE
 
DAC_WAVE_NONE


	)

235 
	#DAC_WAVEGENERATION_NOISE
 
DAC_WAVE_NOISE


	)

236 
	#DAC_WAVEGENERATION_TRIANGLE
 
DAC_WAVE_TRIANGLE


	)

238 #i‚Ä°
def√∂ed
(
STM32G4
√ã|| def√∂ed(
STM32H7
)

239 
	#DAC_CHIPCONNECT_DISABLE
 
DAC_CHIPCONNECT_EXTERNAL


	)

240 
	#DAC_CHIPCONNECT_ENABLE
 
DAC_CHIPCONNECT_INTERNAL


	)

243 #i‚Ä°
def√∂ed
(
STM32L1
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32G0
√ã|| def√∂ed(
STM32L5
√ã|| def√∂ed(
STM32H7
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32G4
)

244 
	#HAL_DAC_MSP_INIT_CB_ID
 
HAL_DAC_MSPINIT_CB_ID


	)

245 
	#HAL_DAC_MSP_DEINIT_CB_ID
 
HAL_DAC_MSPDEINIT_CB_ID


	)

255 
	#HAL_REMAPDMA_ADC_DMA_CH2
 
DMA_REMAP_ADC_DMA_CH2


	)

256 
	#HAL_REMAPDMA_USART1_TX_DMA_CH4
 
DMA_REMAP_USART1_TX_DMA_CH4


	)

257 
	#HAL_REMAPDMA_USART1_RX_DMA_CH5
 
DMA_REMAP_USART1_RX_DMA_CH5


	)

258 
	#HAL_REMAPDMA_TIM16_DMA_CH4
 
DMA_REMAP_TIM16_DMA_CH4


	)

259 
	#HAL_REMAPDMA_TIM17_DMA_CH2
 
DMA_REMAP_TIM17_DMA_CH2


	)

260 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

261 
	#HAL_REMAPDMA_TIM16_DMA_CH6
 
DMA_REMAP_TIM16_DMA_CH6


	)

262 
	#HAL_REMAPDMA_TIM17_DMA_CH7
 
DMA_REMAP_TIM17_DMA_CH7


	)

263 
	#HAL_REMAPDMA_SPI2_DMA_CH67
 
DMA_REMAP_SPI2_DMA_CH67


	)

264 
	#HAL_REMAPDMA_USART2_DMA_CH67
 
DMA_REMAP_USART2_DMA_CH67


	)

265 
	#HAL_REMAPDMA_I2C1_DMA_CH76
 
DMA_REMAP_I2C1_DMA_CH76


	)

266 
	#HAL_REMAPDMA_TIM1_DMA_CH6
 
DMA_REMAP_TIM1_DMA_CH6


	)

267 
	#HAL_REMAPDMA_TIM2_DMA_CH7
 
DMA_REMAP_TIM2_DMA_CH7


	)

268 
	#HAL_REMAPDMA_TIM3_DMA_CH6
 
DMA_REMAP_TIM3_DMA_CH6


	)

270 
	#IS_HAL_REMAPDMA
 
IS_DMA_REMAP


	)

271 
	#__HAL_REMAPDMA_CHANNEL_ENABLE
 
__HAL_DMA_REMAP_CHANNEL_ENABLE


	)

272 
	#__HAL_REMAPDMA_CHANNEL_DISABLE
 
__HAL_DMA_REMAP_CHANNEL_DISABLE


	)

274 #i‚Ä°
def√∂ed
(
STM32L4
)

276 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

277 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI1
 
HAL_DMAMUX1_REQ_GEN_EXTI1


	)

278 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI2
 
HAL_DMAMUX1_REQ_GEN_EXTI2


	)

279 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI3
 
HAL_DMAMUX1_REQ_GEN_EXTI3


	)

280 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI4
 
HAL_DMAMUX1_REQ_GEN_EXTI4


	)

281 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI5
 
HAL_DMAMUX1_REQ_GEN_EXTI5


	)

282 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI6
 
HAL_DMAMUX1_REQ_GEN_EXTI6


	)

283 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI7
 
HAL_DMAMUX1_REQ_GEN_EXTI7


	)

284 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI8
 
HAL_DMAMUX1_REQ_GEN_EXTI8


	)

285 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI9
 
HAL_DMAMUX1_REQ_GEN_EXTI9


	)

286 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI10
 
HAL_DMAMUX1_REQ_GEN_EXTI10


	)

287 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI11
 
HAL_DMAMUX1_REQ_GEN_EXTI11


	)

288 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI12
 
HAL_DMAMUX1_REQ_GEN_EXTI12


	)

289 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI13
 
HAL_DMAMUX1_REQ_GEN_EXTI13


	)

290 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI14
 
HAL_DMAMUX1_REQ_GEN_EXTI14


	)

291 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI15
 
HAL_DMAMUX1_REQ_GEN_EXTI15


	)

292 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

293 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

294 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

295 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH3_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH3_EVT


	)

296 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

297 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

298 
	#HAL_DMAMUX1_REQUEST_GEN_DSI_TE
 
HAL_DMAMUX1_REQ_GEN_DSI_TE


	)

299 
	#HAL_DMAMUX1_REQUEST_GEN_DSI_EOT
 
HAL_DMAMUX1_REQ_GEN_DSI_EOT


	)

300 
	#HAL_DMAMUX1_REQUEST_GEN_DMA2D_EOT
 
HAL_DMAMUX1_REQ_GEN_DMA2D_EOT


	)

301 
	#HAL_DMAMUX1_REQUEST_GEN_LTDC_IT
 
HAL_DMAMUX1_REQ_GEN_LTDC_IT


	)

303 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

304 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

305 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

306 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

308 #i‚Ä°
def√∂ed
(
STM32L4R5xx
√ã|| def√∂ed(
STM32L4R9xx
√ã|| def√∂ed(STM32L4R9xx√ã|| def√∂ed(
STM32L4S5xx
√ã|| def√∂ed(
STM32L4S7xx
√ã|| def√∂ed(
STM32L4S9xx
)

309 
	#DMA_REQUEST_DCMI_PSSI
 
DMA_REQUEST_DCMI


	)

314 #i‚Ä°
def√∂ed
(
STM32G0
)

315 
	#DMA_REQUEST_DAC1_CHANNEL1
 
DMA_REQUEST_DAC1_CH1


	)

316 
	#DMA_REQUEST_DAC1_CHANNEL2
 
DMA_REQUEST_DAC1_CH2


	)

317 
	#DMA_REQUEST_TIM16_TRIG_COM
 
DMA_REQUEST_TIM16_COM


	)

318 
	#DMA_REQUEST_TIM17_TRIG_COM
 
DMA_REQUEST_TIM17_COM


	)

320 
	#LL_DMAMUX_REQ_TIM16_TRIG_COM
 
LL_DMAMUX_REQ_TIM16_COM


	)

321 
	#LL_DMAMUX_REQ_TIM17_TRIG_COM
 
LL_DMAMUX_REQ_TIM17_COM


	)

324 #i‚Ä°
def√∂ed
(
STM32H7
)

326 
	#DMA_REQUEST_DAC1
 
DMA_REQUEST_DAC1_CH1


	)

327 
	#DMA_REQUEST_DAC2
 
DMA_REQUEST_DAC1_CH2


	)

329 
	#BDMA_REQUEST_LP_UART1_RX
 
BDMA_REQUEST_LPUART1_RX


	)

330 
	#BDMA_REQUEST_LP_UART1_TX
 
BDMA_REQUEST_LPUART1_TX


	)

332 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

333 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

334 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

335 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

336 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

337 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM3_OUT


	)

338 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

339 
	#HAL_DMAMUX1_REQUEST_GEN_TIM12_TRGO
 
HAL_DMAMUX1_REQ_GEN_TIM12_TRGO


	)

341 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH0_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH0_EVT


	)

342 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH1_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH1_EVT


	)

343 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH2_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH2_EVT


	)

344 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH3_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH3_EVT


	)

345 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH4_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH4_EVT


	)

346 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH5_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH5_EVT


	)

347 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH6_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH6_EVT


	)

348 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_WKUP


	)

349 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_WKUP


	)

350 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_WKUP


	)

351 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_OUT


	)

352 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_WKUP


	)

353 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_OUT


	)

354 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM4_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM4_WKUP


	)

355 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM5_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM5_WKUP


	)

356 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_WKUP
 
HAL_DMAMUX2_REQ_GEN_I2C4_WKUP


	)

357 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_WKUP
 
HAL_DMAMUX2_REQ_GEN_SPI6_WKUP


	)

358 
	#HAL_DMAMUX2_REQUEST_GEN_COMP1_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP1_OUT


	)

359 
	#HAL_DMAMUX2_REQUEST_GEN_COMP2_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP2_OUT


	)

360 
	#HAL_DMAMUX2_REQUEST_GEN_RTC_WKUP
 
HAL_DMAMUX2_REQ_GEN_RTC_WKUP


	)

361 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI0
 
HAL_DMAMUX2_REQ_GEN_EXTI0


	)

362 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI2
 
HAL_DMAMUX2_REQ_GEN_EXTI2


	)

363 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_IT_EVT
 
HAL_DMAMUX2_REQ_GEN_I2C4_IT_EVT


	)

364 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_IT
 
HAL_DMAMUX2_REQ_GEN_SPI6_IT


	)

365 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_IT


	)

366 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_IT


	)

367 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_IT
 
HAL_DMAMUX2_REQ_GEN_ADC3_IT


	)

368 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_AWD1_OUT
 
HAL_DMAMUX2_REQ_GEN_ADC3_AWD1_OUT


	)

369 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH0_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH0_IT


	)

370 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH1_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH1_IT


	)

372 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

373 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

374 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

375 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

377 
	#DFSDM_FILTER_EXT_TRIG_LPTIM1
 
DFSDM_FILTER_EXT_TRIG_LPTIM1_OUT


	)

378 
	#DFSDM_FILTER_EXT_TRIG_LPTIM2
 
DFSDM_FILTER_EXT_TRIG_LPTIM2_OUT


	)

379 
	#DFSDM_FILTER_EXT_TRIG_LPTIM3
 
DFSDM_FILTER_EXT_TRIG_LPTIM3_OUT


	)

381 
	#DAC_TRIGGER_LP1_OUT
 
DAC_TRIGGER_LPTIM1_OUT


	)

382 
	#DAC_TRIGGER_LP2_OUT
 
DAC_TRIGGER_LPTIM2_OUT


	)

394 
	#TYPEPROGRAM_BYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

395 
	#TYPEPROGRAM_HALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

396 
	#TYPEPROGRAM_WORD
 
FLASH_TYPEPROGRAM_WORD


	)

397 
	#TYPEPROGRAM_DOUBLEWORD
 
FLASH_TYPEPROGRAM_DOUBLEWORD


	)

398 
	#TYPEERASE_SECTORS
 
FLASH_TYPEERASE_SECTORS


	)

399 
	#TYPEERASE_PAGES
 
FLASH_TYPEERASE_PAGES


	)

400 
	#TYPEERASE_PAGEERASE
 
FLASH_TYPEERASE_PAGES


	)

401 
	#TYPEERASE_MASSERASE
 
FLASH_TYPEERASE_MASSERASE


	)

402 
	#WRPSTATE_DISABLE
 
OB_WRPSTATE_DISABLE


	)

403 
	#WRPSTATE_ENABLE
 
OB_WRPSTATE_ENABLE


	)

404 
	#HAL_FLASH_TIMEOUT_VALUE
 
FLASH_TIMEOUT_VALUE


	)

405 
	#OBEX_PCROP
 
OPTIONBYTE_PCROP


	)

406 
	#OBEX_BOOTCONFIG
 
OPTIONBYTE_BOOTCONFIG


	)

407 
	#PCROPSTATE_DISABLE
 
OB_PCROP_STATE_DISABLE


	)

408 
	#PCROPSTATE_ENABLE
 
OB_PCROP_STATE_ENABLE


	)

409 
	#TYPEERASEDATA_BYTE
 
FLASH_TYPEERASEDATA_BYTE


	)

410 
	#TYPEERASEDATA_HALFWORD
 
FLASH_TYPEERASEDATA_HALFWORD


	)

411 
	#TYPEERASEDATA_WORD
 
FLASH_TYPEERASEDATA_WORD


	)

412 
	#TYPEPROGRAMDATA_BYTE
 
FLASH_TYPEPROGRAMDATA_BYTE


	)

413 
	#TYPEPROGRAMDATA_HALFWORD
 
FLASH_TYPEPROGRAMDATA_HALFWORD


	)

414 
	#TYPEPROGRAMDATA_WORD
 
FLASH_TYPEPROGRAMDATA_WORD


	)

415 
	#TYPEPROGRAMDATA_FASTBYTE
 
FLASH_TYPEPROGRAMDATA_FASTBYTE


	)

416 
	#TYPEPROGRAMDATA_FASTHALFWORD
 
FLASH_TYPEPROGRAMDATA_FASTHALFWORD


	)

417 
	#TYPEPROGRAMDATA_FASTWORD
 
FLASH_TYPEPROGRAMDATA_FASTWORD


	)

418 
	#PAGESIZE
 
FLASH_PAGE_SIZE


	)

419 
	#TYPEPROGRAM_FASTBYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

420 
	#TYPEPROGRAM_FASTHALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

421 
	#TYPEPROGRAM_FASTWORD
 
FLASH_TYPEPROGRAM_WORD


	)

422 
	#VOLTAGE_RANGE_1
 
FLASH_VOLTAGE_RANGE_1


	)

423 
	#VOLTAGE_RANGE_2
 
FLASH_VOLTAGE_RANGE_2


	)

424 
	#VOLTAGE_RANGE_3
 
FLASH_VOLTAGE_RANGE_3


	)

425 
	#VOLTAGE_RANGE_4
 
FLASH_VOLTAGE_RANGE_4


	)

426 
	#TYPEPROGRAM_FAST
 
FLASH_TYPEPROGRAM_FAST


	)

427 
	#TYPEPROGRAM_FAST_AND_LAST
 
FLASH_TYPEPROGRAM_FAST_AND_LAST


	)

428 
	#WRPAREA_BANK1_AREAA
 
OB_WRPAREA_BANK1_AREAA


	)

429 
	#WRPAREA_BANK1_AREAB
 
OB_WRPAREA_BANK1_AREAB


	)

430 
	#WRPAREA_BANK2_AREAA
 
OB_WRPAREA_BANK2_AREAA


	)

431 
	#WRPAREA_BANK2_AREAB
 
OB_WRPAREA_BANK2_AREAB


	)

432 
	#IWDG_STDBY_FREEZE
 
OB_IWDG_STDBY_FREEZE


	)

433 
	#IWDG_STDBY_ACTIVE
 
OB_IWDG_STDBY_RUN


	)

434 
	#IWDG_STOP_FREEZE
 
OB_IWDG_STOP_FREEZE


	)

435 
	#IWDG_STOP_ACTIVE
 
OB_IWDG_STOP_RUN


	)

436 
	#FLASH_ERROR_NONE
 
HAL_FLASH_ERROR_NONE


	)

437 
	#FLASH_ERROR_RD
 
HAL_FLASH_ERROR_RD


	)

438 
	#FLASH_ERROR_PG
 
HAL_FLASH_ERROR_PROG


	)

439 
	#FLASH_ERROR_PGP
 
HAL_FLASH_ERROR_PGS


	)

440 
	#FLASH_ERROR_WRP
 
HAL_FLASH_ERROR_WRP


	)

441 
	#FLASH_ERROR_OPTV
 
HAL_FLASH_ERROR_OPTV


	)

442 
	#FLASH_ERROR_OPTVUSR
 
HAL_FLASH_ERROR_OPTVUSR


	)

443 
	#FLASH_ERROR_PROG
 
HAL_FLASH_ERROR_PROG


	)

444 
	#FLASH_ERROR_OP
 
HAL_FLASH_ERROR_OPERATION


	)

445 
	#FLASH_ERROR_PGA
 
HAL_FLASH_ERROR_PGA


	)

446 
	#FLASH_ERROR_SIZE
 
HAL_FLASH_ERROR_SIZE


	)

447 
	#FLASH_ERROR_SIZ
 
HAL_FLASH_ERROR_SIZE


	)

448 
	#FLASH_ERROR_PGS
 
HAL_FLASH_ERROR_PGS


	)

449 
	#FLASH_ERROR_MIS
 
HAL_FLASH_ERROR_MIS


	)

450 
	#FLASH_ERROR_FAST
 
HAL_FLASH_ERROR_FAST


	)

451 
	#FLASH_ERROR_FWWERR
 
HAL_FLASH_ERROR_FWWERR


	)

452 
	#FLASH_ERROR_NOTZERO
 
HAL_FLASH_ERROR_NOTZERO


	)

453 
	#FLASH_ERROR_OPERATION
 
HAL_FLASH_ERROR_OPERATION


	)

454 
	#FLASH_ERROR_ERS
 
HAL_FLASH_ERROR_ERS


	)

455 
	#OB_WDG_SW
 
OB_IWDG_SW


	)

456 
	#OB_WDG_HW
 
OB_IWDG_HW


	)

457 
	#OB_SDADC12_VDD_MONITOR_SET
 
OB_SDACD_VDD_MONITOR_SET


	)

458 
	#OB_SDADC12_VDD_MONITOR_RESET
 
OB_SDACD_VDD_MONITOR_RESET


	)

459 
	#OB_RAM_PARITY_CHECK_SET
 
OB_SRAM_PARITY_SET


	)

460 
	#OB_RAM_PARITY_CHECK_RESET
 
OB_SRAM_PARITY_RESET


	)

461 
	#IS_OB_SDADC12_VDD_MONITOR
 
IS_OB_SDACD_VDD_MONITOR


	)

462 
	#OB_RDP_LEVEL0
 
OB_RDP_LEVEL_0


	)

463 
	#OB_RDP_LEVEL1
 
OB_RDP_LEVEL_1


	)

464 
	#OB_RDP_LEVEL2
 
OB_RDP_LEVEL_2


	)

465 #i‚Ä°
def√∂ed
(
STM32G0
)

466 
	#OB_BOOT_LOCK_DISABLE
 
OB_BOOT_ENTRY_FORCED_NONE


	)

467 
	#OB_BOOT_LOCK_ENABLE
 
OB_BOOT_ENTRY_FORCED_FLASH


	)

469 
	#OB_BOOT_ENTRY_FORCED_NONE
 
OB_BOOT_LOCK_DISABLE


	)

470 
	#OB_BOOT_ENTRY_FORCED_FLASH
 
OB_BOOT_LOCK_ENABLE


	)

472 #i‚Ä°
def√∂ed
(
STM32H7
)

473 
	#FLASH_FLAG_SNECCE_BANK1RR
 
FLASH_FLAG_SNECCERR_BANK1


	)

474 
	#FLASH_FLAG_DBECCE_BANK1RR
 
FLASH_FLAG_DBECCERR_BANK1


	)

475 
	#FLASH_FLAG_STRBER_BANK1R
 
FLASH_FLAG_STRBERR_BANK1


	)

476 
	#FLASH_FLAG_SNECCE_BANK2RR
 
FLASH_FLAG_SNECCERR_BANK2


	)

477 
	#FLASH_FLAG_DBECCE_BANK2RR
 
FLASH_FLAG_DBECCERR_BANK2


	)

478 
	#FLASH_FLAG_STRBER_BANK2R
 
FLASH_FLAG_STRBERR_BANK2


	)

479 
	#FLASH_FLAG_WDW
 
FLASH_FLAG_WBNE


	)

480 
	#OB_WRP_SECTOR_A≈í
 
OB_WRP_SECTOR_ALL


	)

491 #i‚Ä°
def√∂ed
(
STM32H7
)

492 
	#__HAL_RCC_JPEG_CLK_ENABLE
 
__HAL_RCC_JPGDECEN_CLK_ENABLE


	)

493 
	#__HAL_RCC_JPEG_CLK_DISABLE
 
__HAL_RCC_JPGDECEN_CLK_DISABLE


	)

494 
	#__HAL_RCC_JPEG_FORCE_RESET
 
__HAL_RCC_JPGDECRST_FORCE_RESET


	)

495 
	#__HAL_RCC_JPEG_RELEASE_RESET
 
__HAL_RCC_JPGDECRST_RELEASE_RESET


	)

496 
	#__HAL_RCC_JPEG_CLK_SLEEP_ENABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_ENABLE


	)

497 
	#__HAL_RCC_JPEG_CLK_SLEEP_DISABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_DISABLE


	)

508 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA9
 
I2C_FASTMODEPLUS_PA9


	)

509 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA10
 
I2C_FASTMODEPLUS_PA10


	)

510 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB6
 
I2C_FASTMODEPLUS_PB6


	)

511 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB7
 
I2C_FASTMODEPLUS_PB7


	)

512 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB8
 
I2C_FASTMODEPLUS_PB8


	)

513 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB9
 
I2C_FASTMODEPLUS_PB9


	)

514 
	#HAL_SYSCFG_FASTMODEPLUS_I2C1
 
I2C_FASTMODEPLUS_I2C1


	)

515 
	#HAL_SYSCFG_FASTMODEPLUS_I2C2
 
I2C_FASTMODEPLUS_I2C2


	)

516 
	#HAL_SYSCFG_FASTMODEPLUS_I2C3
 
I2C_FASTMODEPLUS_I2C3


	)

517 #i‚Ä°
def√∂ed
(
STM32G4
)

519 
	#HAL_SYSCFG_E¬´b√ÄIOA¬´logSw√¥chBoo¬∞√Æ
 
HAL_SYSCFG_E¬´b√ÄIOSw√¥chBoo¬∞√Æ


	)

520 
	#HAL_SYSCFG_Di√üb√ÄIOA¬´logSw√¥chBoo¬∞√Æ
 
HAL_SYSCFG_Di√üb√ÄIOSw√¥chBoo¬∞√Æ


	)

521 
	#HAL_SYSCFG_E¬´b√ÄIOA¬´logSw√¥chVDD
 
HAL_SYSCFG_E¬´b√ÄIOSw√¥chVDD


	)

522 
	#HAL_SYSCFG_Di√üb√ÄIOA¬´logSw√¥chVDD
 
HAL_SYSCFG_Di√üb√ÄIOSw√¥chVDD


	)

532 #i‚Ä°
def√∂ed
(
STM32L4
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32H7
√ã|| def√∂ed(
STM32G4
)

533 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 
FMC_NAND_WAIT_FEATURE_DISABLE


	)

534 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 
FMC_NAND_WAIT_FEATURE_ENABLE


	)

535 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 
FMC_NAND_MEM_BUS_WIDTH_8


	)

536 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 
FMC_NAND_MEM_BUS_WIDTH_16


	)

537 #√±i‚Ä°
def√∂ed
(
STM32F1
√ã|| def√∂ed(
STM32F2
√ã|| def√∂ed(
STM32F3
√ã|| def√∂ed(
STM32F4
)

538 
	#FMC_NAND_WAIT_FEATURE_DISABLE
 
FMC_NAND_PCC_WAIT_FEATURE_DISABLE


	)

539 
	#FMC_NAND_WAIT_FEATURE_ENABLE
 
FMC_NAND_PCC_WAIT_FEATURE_ENABLE


	)

540 
	#FMC_NAND_MEM_BUS_WIDTH_8
 
FMC_NAND_PCC_MEM_BUS_WIDTH_8


	)

541 
	#FMC_NAND_MEM_BUS_WIDTH_16
 
FMC_NAND_PCC_MEM_BUS_WIDTH_16


	)

551 
	#FSMC_NORSRAM_TYPEDEF
 
FSMC_NORSRAM_Ty‚â•Def


	)

552 
	#FSMC_NORSRAM_EXTENDED_TYPEDEF
 
FSMC_NORSRAM_EXTENDED_Ty‚â•Def


	)

560 
	#GET_GPIO_SOURCE
 
GPIO_GET_INDEX


	)

561 
	#GET_GPIO_INDEX
 
GPIO_GET_INDEX


	)

563 #i‚Ä°
def√∂ed
(
STM32F4
)

564 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDIO


	)

565 
	#GPIO_AF12_SDMMC1
 
GPIO_AF12_SDIO


	)

568 #i‚Ä°
def√∂ed
(
STM32F7
)

569 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

570 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

573 #i‚Ä°
def√∂ed
(
STM32L4
)

574 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

575 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

578 #i‚Ä°
def√∂ed
(
STM32H7
)

579 
	#GPIO_AF7_SDIO1
 
GPIO_AF7_SDMMC1


	)

580 
	#GPIO_AF8_SDIO1
 
GPIO_AF8_SDMMC1


	)

581 
	#GPIO_AF12_SDIO1
 
GPIO_AF12_SDMMC1


	)

582 
	#GPIO_AF9_SDIO2
 
GPIO_AF9_SDMMC2


	)

583 
	#GPIO_AF10_SDIO2
 
GPIO_AF10_SDMMC2


	)

584 
	#GPIO_AF11_SDIO2
 
GPIO_AF11_SDMMC2


	)

586 #i‚Ä°
def√∂ed
 (
STM32H743xx
√ã|| def√∂ed (
STM32H753xx
√ã|| def√∂ed (
STM32H750xx
√ã|| def√∂ed (
STM32H742xx
) || \

587 
def√∂ed
 (
STM32H745xx
√ã|| def√∂ed (
STM32H755xx
√ã|| def√∂ed (
STM32H747xx
√ã|| def√∂ed (
STM32H757xx
)

588 
	#GPIO_AF10_OTG2_HS
 
GPIO_AF10_OTG2_FS


	)

589 
	#GPIO_AF10_OTG1_FS
 
GPIO_AF10_OTG1_HS


	)

590 
	#GPIO_AF12_OTG2_FS
 
GPIO_AF12_OTG1_FS


	)

594 
	#GPIO_AF0_LPTIM
 
GPIO_AF0_LPTIM1


	)

595 
	#GPIO_AF1_LPTIM
 
GPIO_AF1_LPTIM1


	)

596 
	#GPIO_AF2_LPTIM
 
GPIO_AF2_LPTIM1


	)

598 #i‚Ä°
def√∂ed
(
STM32L0
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32F2
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32G4
√ã|| def√∂ed(
STM32H7
)

599 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

600 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

601 
	#GPIO_SPEED_FAST
 
GPIO_SPEED_FREQ_HIGH


	)

602 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

605 #i‚Ä°
def√∂ed
(
STM32L1
)

606 
	#GPIO_SPEED_VERY_LOW
 
GPIO_SPEED_FREQ_LOW


	)

607 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_MEDIUM


	)

608 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_HIGH


	)

609 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

612 #i‚Ä°
def√∂ed
(
STM32F0
√ã|| def√∂ed(
STM32F3
√ã|| def√∂ed(
STM32F1
)

613 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

614 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

615 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_HIGH


	)

618 
	#GPIO_AF6_DFSDM
 
GPIO_AF6_DFSDM1


	)

626 
	#HRTIM_TIMDELAYEDPROTECTION_DISABLED
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED


	)

627 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6


	)

628 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6


	)

629 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6


	)

630 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6


	)

631 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7


	)

632 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7


	)

633 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7


	)

634 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7


	)

636 
	#__HAL_HRTIM_S√´Cou¬°√Æ
 
__HAL_HRTIM_SETCOUNTER


	)

637 
	#__HAL_HRTIM_G√´Cou¬°√Æ
 
__HAL_HRTIM_GETCOUNTER


	)

638 
	#__HAL_HRTIM_S√´P√Æiod
 
__HAL_HRTIM_SETPERIOD


	)

639 
	#__HAL_HRTIM_G√´P√Æiod
 
__HAL_HRTIM_GETPERIOD


	)

640 
	#__HAL_HRTIM_S√´ClockP¬™sÀá√Är
 
__HAL_HRTIM_SETCLOCKPRESCALER


	)

641 
	#__HAL_HRTIM_G√´ClockP¬™sÀá√Är
 
__HAL_HRTIM_GETCLOCKPRESCALER


	)

642 
	#__HAL_HRTIM_S√´Com‚àë¬™
 
__HAL_HRTIM_SETCOMPARE


	)

643 
	#__HAL_HRTIM_G√´Com‚àë¬™
 
__HAL_HRTIM_GETCOMPARE


	)

645 #i‚Ä°
def√∂ed
(
STM32G4
)

646 
	#HAL_HRTIM_Ex√£‚à´√ÜEv√≠tCou¬°√ÆC‚ÅÑfig
 
HAL_HRTIM_ExtEv√≠tCou¬°√ÆC‚ÅÑfig


	)

647 
	#HAL_HRTIM_Ex√£‚à´√ÜEv√≠tCou¬°√ÆE¬´b√Ä
 
HAL_HRTIM_ExtEv√≠tCou¬°√ÆE¬´b√Ä


	)

648 
	#HAL_HRTIM_Ex√£‚à´√ÜEv√≠tCou¬°√ÆDi√üb√Ä
 
HAL_HRTIM_ExtEv√≠tCou¬°√ÆDi√üb√Ä


	)

649 
	#HAL_HRTIM_Ex√£‚à´√ÜEv√≠tCou¬°√ÆRe¬£t
 
HAL_HRTIM_ExtEv√≠tCou¬°√ÆRe¬£t


	)

650 
	#HRTIM_TIMEEVENT_A
 
HRTIM_EVENTCOUNTER_A


	)

651 
	#HRTIM_TIMEEVENT_B
 
HRTIM_EVENTCOUNTER_B


	)

652 
	#HRTIM_TIMEEVENTRESETMODE_UNCONDITIONAL
 
HRTIM_EVENTCOUNTER_RSTMODE_UNCONDITIONAL


	)

653 
	#HRTIM_TIMEEVENTRESETMODE_CONDITIONAL
 
HRTIM_EVENTCOUNTER_RSTMODE_CONDITIONAL


	)

656 #i‚Ä°
def√∂ed
(
STM32H7
)

657 
	#HRTIM_OUTPUTSET_TIMAEV1_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

658 
	#HRTIM_OUTPUTSET_TIMAEV2_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

659 
	#HRTIM_OUTPUTSET_TIMAEV3_TIMCCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

660 
	#HRTIM_OUTPUTSET_TIMAEV4_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

661 
	#HRTIM_OUTPUTSET_TIMAEV5_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_5


	)

662 
	#HRTIM_OUTPUTSET_TIMAEV6_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_6


	)

663 
	#HRTIM_OUTPUTSET_TIMAEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

664 
	#HRTIM_OUTPUTSET_TIMAEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

665 
	#HRTIM_OUTPUTSET_TIMAEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

666 
	#HRTIM_OUTPUTSET_TIMBEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

667 
	#HRTIM_OUTPUTSET_TIMBEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

668 
	#HRTIM_OUTPUTSET_TIMBEV3_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_3


	)

669 
	#HRTIM_OUTPUTSET_TIMBEV4_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

670 
	#HRTIM_OUTPUTSET_TIMBEV5_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_5


	)

671 
	#HRTIM_OUTPUTSET_TIMBEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

672 
	#HRTIM_OUTPUTSET_TIMBEV7_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_7


	)

673 
	#HRTIM_OUTPUTSET_TIMBEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

674 
	#HRTIM_OUTPUTSET_TIMBEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

675 
	#HRTIM_OUTPUTSET_TIMCEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

676 
	#HRTIM_OUTPUTSET_TIMCEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

677 
	#HRTIM_OUTPUTSET_TIMCEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

678 
	#HRTIM_OUTPUTSET_TIMCEV4_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

679 
	#HRTIM_OUTPUTSET_TIMCEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

680 
	#HRTIM_OUTPUTSET_TIMCEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

681 
	#HRTIM_OUTPUTSET_TIMCEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

682 
	#HRTIM_OUTPUTSET_TIMCEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

683 
	#HRTIM_OUTPUTSET_TIMCEV9_TIMFCMP2
 
HRTIM_OUTPUTSET_TIMEV_9


	)

684 
	#HRTIM_OUTPUTSET_TIMDEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

685 
	#HRTIM_OUTPUTSET_TIMDEV2_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_2


	)

686 
	#HRTIM_OUTPUTSET_TIMDEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

687 
	#HRTIM_OUTPUTSET_TIMDEV4_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

688 
	#HRTIM_OUTPUTSET_TIMDEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

689 
	#HRTIM_OUTPUTSET_TIMDEV6_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

690 
	#HRTIM_OUTPUTSET_TIMDEV7_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

691 
	#HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1
 
HRTIM_OUTPUTSET_TIMEV_8


	)

692 
	#HRTIM_OUTPUTSET_TIMDEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

693 
	#HRTIM_OUTPUTSET_TIMEEV1_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_1


	)

694 
	#HRTIM_OUTPUTSET_TIMEEV2_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_2


	)

695 
	#HRTIM_OUTPUTSET_TIMEEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

696 
	#HRTIM_OUTPUTSET_TIMEEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

697 
	#HRTIM_OUTPUTSET_TIMEEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

698 
	#HRTIM_OUTPUTSET_TIMEEV6_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

699 
	#HRTIM_OUTPUTSET_TIMEEV7_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_7


	)

700 
	#HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_8


	)

701 
	#HRTIM_OUTPUTSET_TIMEEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

702 
	#HRTIM_OUTPUTSET_TIMFEV1_TIMACMP3
 
HRTIM_OUTPUTSET_TIMEV_1


	)

703 
	#HRTIM_OUTPUTSET_TIMFEV2_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_2


	)

704 
	#HRTIM_OUTPUTSET_TIMFEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

705 
	#HRTIM_OUTPUTSET_TIMFEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

706 
	#HRTIM_OUTPUTSET_TIMFEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

707 
	#HRTIM_OUTPUTSET_TIMFEV6_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_6


	)

708 
	#HRTIM_OUTPUTSET_TIMFEV7_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

709 
	#HRTIM_OUTPUTSET_TIMFEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

710 
	#HRTIM_OUTPUTSET_TIMFEV9_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

712 
	#HRTIM_OUTPUTRESET_TIMAEV1_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

713 
	#HRTIM_OUTPUTRESET_TIMAEV2_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

714 
	#HRTIM_OUTPUTRESET_TIMAEV3_TIMCCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

715 
	#HRTIM_OUTPUTRESET_TIMAEV4_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

716 
	#HRTIM_OUTPUTRESET_TIMAEV5_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_5


	)

717 
	#HRTIM_OUTPUTRESET_TIMAEV6_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_6


	)

718 
	#HRTIM_OUTPUTRESET_TIMAEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

719 
	#HRTIM_OUTPUTRESET_TIMAEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

720 
	#HRTIM_OUTPUTRESET_TIMAEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

721 
	#HRTIM_OUTPUTRESET_TIMBEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

722 
	#HRTIM_OUTPUTRESET_TIMBEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

723 
	#HRTIM_OUTPUTRESET_TIMBEV3_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_3


	)

724 
	#HRTIM_OUTPUTRESET_TIMBEV4_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

725 
	#HRTIM_OUTPUTRESET_TIMBEV5_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_5


	)

726 
	#HRTIM_OUTPUTRESET_TIMBEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

727 
	#HRTIM_OUTPUTRESET_TIMBEV7_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_7


	)

728 
	#HRTIM_OUTPUTRESET_TIMBEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

729 
	#HRTIM_OUTPUTRESET_TIMBEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

730 
	#HRTIM_OUTPUTRESET_TIMCEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

731 
	#HRTIM_OUTPUTRESET_TIMCEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

732 
	#HRTIM_OUTPUTRESET_TIMCEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

733 
	#HRTIM_OUTPUTRESET_TIMCEV4_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

734 
	#HRTIM_OUTPUTRESET_TIMCEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

735 
	#HRTIM_OUTPUTRESET_TIMCEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

736 
	#HRTIM_OUTPUTRESET_TIMCEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

737 
	#HRTIM_OUTPUTRESET_TIMCEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

738 
	#HRTIM_OUTPUTRESET_TIMCEV9_TIMFCMP2
 
HRTIM_OUTPUTSET_TIMEV_9


	)

739 
	#HRTIM_OUTPUTRESET_TIMDEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

740 
	#HRTIM_OUTPUTRESET_TIMDEV2_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_2


	)

741 
	#HRTIM_OUTPUTRESET_TIMDEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

742 
	#HRTIM_OUTPUTRESET_TIMDEV4_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

743 
	#HRTIM_OUTPUTRESET_TIMDEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

744 
	#HRTIM_OUTPUTRESET_TIMDEV6_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

745 
	#HRTIM_OUTPUTRESET_TIMDEV7_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

746 
	#HRTIM_OUTPUTRESET_TIMDEV8_TIMFCMP1
 
HRTIM_OUTPUTSET_TIMEV_8


	)

747 
	#HRTIM_OUTPUTRESET_TIMDEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

748 
	#HRTIM_OUTPUTRESET_TIMEEV1_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_1


	)

749 
	#HRTIM_OUTPUTRESET_TIMEEV2_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_2


	)

750 
	#HRTIM_OUTPUTRESET_TIMEEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

751 
	#HRTIM_OUTPUTRESET_TIMEEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

752 
	#HRTIM_OUTPUTRESET_TIMEEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

753 
	#HRTIM_OUTPUTRESET_TIMEEV6_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

754 
	#HRTIM_OUTPUTRESET_TIMEEV7_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_7


	)

755 
	#HRTIM_OUTPUTRESET_TIMEEV8_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_8


	)

756 
	#HRTIM_OUTPUTRESET_TIMEEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

757 
	#HRTIM_OUTPUTRESET_TIMFEV1_TIMACMP3
 
HRTIM_OUTPUTSET_TIMEV_1


	)

758 
	#HRTIM_OUTPUTRESET_TIMFEV2_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_2


	)

759 
	#HRTIM_OUTPUTRESET_TIMFEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

760 
	#HRTIM_OUTPUTRESET_TIMFEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

761 
	#HRTIM_OUTPUTRESET_TIMFEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

762 
	#HRTIM_OUTPUTRESET_TIMFEV6_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_6


	)

763 
	#HRTIM_OUTPUTRESET_TIMFEV7_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

764 
	#HRTIM_OUTPUTRESET_TIMFEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

765 
	#HRTIM_OUTPUTRESET_TIMFEV9_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

768 #i‚Ä°
def√∂ed
(
STM32F3
)

771 
	#HRTIM_EVENTSRC_1
 (0x00000000U)

	)

772 
	#HRTIM_EVENTSRC_2
 (
HRTIM_EECR1_EE1SRC_0
)

	)

773 
	#HRTIM_EVENTSRC_3
 (
HRTIM_EECR1_EE1SRC_1
)

	)

774 
	#HRTIM_EVENTSRC_4
 (
HRTIM_EECR1_EE1SRC_1
 | 
HRTIM_EECR1_EE1SRC_0
)

	)

779 
	#HRTIM_OUTPUTSET_TIMEV_1
 (
HRTIM_SET1R_TIMEVNT1
)

	)

780 
	#HRTIM_OUTPUTSET_TIMEV_2
 (
HRTIM_SET1R_TIMEVNT2
)

	)

781 
	#HRTIM_OUTPUTSET_TIMEV_3
 (
HRTIM_SET1R_TIMEVNT3
)

	)

782 
	#HRTIM_OUTPUTSET_TIMEV_4
 (
HRTIM_SET1R_TIMEVNT4
)

	)

783 
	#HRTIM_OUTPUTSET_TIMEV_5
 (
HRTIM_SET1R_TIMEVNT5
)

	)

784 
	#HRTIM_OUTPUTSET_TIMEV_6
 (
HRTIM_SET1R_TIMEVNT6
)

	)

785 
	#HRTIM_OUTPUTSET_TIMEV_7
 (
HRTIM_SET1R_TIMEVNT7
)

	)

786 
	#HRTIM_OUTPUTSET_TIMEV_8
 (
HRTIM_SET1R_TIMEVNT8
)

	)

787 
	#HRTIM_OUTPUTSET_TIMEV_9
 (
HRTIM_SET1R_TIMEVNT9
)

	)

789 
	#HRTIM_OUTPUTRESET_TIMEV_1
 (
HRTIM_RST1R_TIMEVNT1
)

	)

790 
	#HRTIM_OUTPUTRESET_TIMEV_2
 (
HRTIM_RST1R_TIMEVNT2
)

	)

791 
	#HRTIM_OUTPUTRESET_TIMEV_3
 (
HRTIM_RST1R_TIMEVNT3
)

	)

792 
	#HRTIM_OUTPUTRESET_TIMEV_4
 (
HRTIM_RST1R_TIMEVNT4
)

	)

793 
	#HRTIM_OUTPUTRESET_TIMEV_5
 (
HRTIM_RST1R_TIMEVNT5
)

	)

794 
	#HRTIM_OUTPUTRESET_TIMEV_6
 (
HRTIM_RST1R_TIMEVNT6
)

	)

795 
	#HRTIM_OUTPUTRESET_TIMEV_7
 (
HRTIM_RST1R_TIMEVNT7
)

	)

796 
	#HRTIM_OUTPUTRESET_TIMEV_8
 (
HRTIM_RST1R_TIMEVNT8
)

	)

797 
	#HRTIM_OUTPUTRESET_TIMEV_9
 (
HRTIM_RST1R_TIMEVNT9
)

	)

802 
	#HRTIM_TIMEVENTFILTER_NONE
 (0x00000000U)

	)

803 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP1
 (
HRTIM_EEFR1_EE1FLTR_0
)

	)

804 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP2
 (
HRTIM_EEFR1_EE1FLTR_1
)

	)

805 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP3
 (
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

806 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP4
 (
HRTIM_EEFR1_EE1FLTR_2
)

	)

807 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR1
 (
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

808 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR2
 (
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
)

	)

809 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR3
 (
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

810 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR4
 (
HRTIM_EEFR1_EE1FLTR_3
)

	)

811 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR5
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

812 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR6
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_1
)

	)

813 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR7
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

814 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR8
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
)

	)

815 
	#HRTIM_TIMEVENTFILTER_WINDOWINGCMP2
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

816 
	#HRTIM_TIMEVENTFILTER_WINDOWINGCMP3
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
)

	)

817 
	#HRTIM_TIMEVENTFILTER_WINDOWINGTIM
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

821 
	#HRTIM_CALIBRATIONRATE_7300
 0x00000000U

	)

822 
	#HRTIM_CALIBRATIONRATE_910
 (
HRTIM_DLLCR_CALRTE_0
)

	)

823 
	#HRTIM_CALIBRATIONRATE_114
 (
HRTIM_DLLCR_CALRTE_1
)

	)

824 
	#HRTIM_CALIBRATIONRATE_14
 (
HRTIM_DLLCR_CALRTE_1
 | 
HRTIM_DLLCR_CALRTE_0
)

	)

834 
	#I2C_DUALADDRESS_DISABLED
 
I2C_DUALADDRESS_DISABLE


	)

835 
	#I2C_DUALADDRESS_ENABLED
 
I2C_DUALADDRESS_ENABLE


	)

836 
	#I2C_GENERALCALL_DISABLED
 
I2C_GENERALCALL_DISABLE


	)

837 
	#I2C_GENERALCALL_ENABLED
 
I2C_GENERALCALL_ENABLE


	)

838 
	#I2C_NOSTRETCH_DISABLED
 
I2C_NOSTRETCH_DISABLE


	)

839 
	#I2C_NOSTRETCH_ENABLED
 
I2C_NOSTRETCH_ENABLE


	)

840 
	#I2C_ANALOGFILTER_ENABLED
 
I2C_ANALOGFILTER_ENABLE


	)

841 
	#I2C_ANALOGFILTER_DISABLED
 
I2C_ANALOGFILTER_DISABLE


	)

842 #i‚Ä°
def√∂ed
(
STM32F0
√ã|| def√∂ed(
STM32F1
√ã|| def√∂ed(
STM32F3
√ã|| def√∂ed(
STM32G0
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32L1
√ã|| def√∂ed(
STM32F7
)

843 
	#HAL_I2C_STATE_MEM_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

844 
	#HAL_I2C_STATE_MEM_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

845 
	#HAL_I2C_STATE_MASTER_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

846 
	#HAL_I2C_STATE_MASTER_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

847 
	#HAL_I2C_STATE_SLAVE_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

848 
	#HAL_I2C_STATE_SLAVE_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

857 
	#IRDA_ONE_BIT_SAMPLE_DISABLED
 
IRDA_ONE_BIT_SAMPLE_DISABLE


	)

858 
	#IRDA_ONE_BIT_SAMPLE_ENABLED
 
IRDA_ONE_BIT_SAMPLE_ENABLE


	)

867 
	#KR_KEY_RELOAD
 
IWDG_KEY_RELOAD


	)

868 
	#KR_KEY_ENABLE
 
IWDG_KEY_ENABLE


	)

869 
	#KR_KEY_EWA
 
IWDG_KEY_WRITE_ACCESS_ENABLE


	)

870 
	#KR_KEY_DWA
 
IWDG_KEY_WRITE_ACCESS_DISABLE


	)

879 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION


	)

880 
	#LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS


	)

881 
	#LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS


	)

882 
	#LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS


	)

884 
	#LPTIM_CLOCKPOLARITY_RISINGEDGE
 
LPTIM_CLOCKPOLARITY_RISING


	)

885 
	#LPTIM_CLOCKPOLARITY_FALLINGEDGE
 
LPTIM_CLOCKPOLARITY_FALLING


	)

886 
	#LPTIM_CLOCKPOLARITY_BOTHEDGES
 
LPTIM_CLOCKPOLARITY_RISING_FALLING


	)

888 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION


	)

889 
	#LPTIM_TRIGSAMPLETIME_2TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

890 
	#LPTIM_TRIGSAMPLETIME_4TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

891 
	#LPTIM_TRIGSAMPLETIME_8TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

895 
	#LPTIM_TRIGSAMPLETIME_2TRANSITION
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

896 
	#LPTIM_TRIGSAMPLETIME_4TRANSITION
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

897 
	#LPTIM_TRIGSAMPLETIME_8TRANSITION
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

906 
	#HAL_NAND_R√≥d_Page
 
HAL_NAND_R√≥d_Page_8b


	)

907 
	#HAL_NAND_Wr√¥e_Page
 
HAL_NAND_Wr√¥e_Page_8b


	)

908 
	#HAL_NAND_R√≥d_S‚àë¬™A¬™a
 
HAL_NAND_R√≥d_S‚àë¬™A¬™a_8b


	)

909 
	#HAL_NAND_Wr√¥e_S‚àë¬™A¬™a
 
HAL_NAND_Wr√¥e_S‚àë¬™A¬™a_8b


	)

911 
	#NAND_Add¬™ssTy‚â•def
 
NAND_Add¬™ssTy‚â•Def


	)

913 
	#__ARRAY_ADDRESS
 
ARRAY_ADDRESS


	)

914 
	#__ADDR_1¬∞_CYCLE
 
ADDR_1ST_CYCLE


	)

915 
	#__ADDR_2nd_CYCLE
 
ADDR_2ND_CYCLE


	)

916 
	#__ADDR_3rd_CYCLE
 
ADDR_3RD_CYCLE


	)

917 
	#__ADDR_4th_CYCLE
 
ADDR_4TH_CYCLE


	)

925 
	#NOR_S√®tusTy‚â•def
 
HAL_NOR_S√®tusTy‚â•Def


	)

926 
	#NOR_SUCCESS
 
HAL_NOR_STATUS_SUCCESS


	)

927 
	#NOR_ONGOING
 
HAL_NOR_STATUS_ONGOING


	)

928 
	#NOR_ERROR
 
HAL_NOR_STATUS_ERROR


	)

929 
	#NOR_TIMEOUT
 
HAL_NOR_STATUS_TIMEOUT


	)

931 
	#__NOR_WRITE
 
NOR_WRITE


	)

932 
	#__NOR_ADDR_SHIFT
 
NOR_ADDR_SHIFT


	)

941 
	#OPAMP_NONINVERTINGINPUT_VP0
 
OPAMP_NONINVERTINGINPUT_IO0


	)

942 
	#OPAMP_NONINVERTINGINPUT_VP1
 
OPAMP_NONINVERTINGINPUT_IO1


	)

943 
	#OPAMP_NONINVERTINGINPUT_VP2
 
OPAMP_NONINVERTINGINPUT_IO2


	)

944 
	#OPAMP_NONINVERTINGINPUT_VP3
 
OPAMP_NONINVERTINGINPUT_IO3


	)

946 
	#OPAMP_SEC_NONINVERTINGINPUT_VP0
 
OPAMP_SEC_NONINVERTINGINPUT_IO0


	)

947 
	#OPAMP_SEC_NONINVERTINGINPUT_VP1
 
OPAMP_SEC_NONINVERTINGINPUT_IO1


	)

948 
	#OPAMP_SEC_NONINVERTINGINPUT_VP2
 
OPAMP_SEC_NONINVERTINGINPUT_IO2


	)

949 
	#OPAMP_SEC_NONINVERTINGINPUT_VP3
 
OPAMP_SEC_NONINVERTINGINPUT_IO3


	)

951 
	#OPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

952 
	#OPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

954 
	#IOPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

955 
	#IOPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

957 
	#OPAMP_SEC_INVERTINGINPUT_VM0
 
OPAMP_SEC_INVERTINGINPUT_IO0


	)

958 
	#OPAMP_SEC_INVERTINGINPUT_VM1
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

960 
	#OPAMP_INVERTINGINPUT_VINM
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

962 
	#OPAMP_PGACONNECT_NO
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_NO


	)

963 
	#OPAMP_PGACONNECT_VM0
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0


	)

964 
	#OPAMP_PGACONNECT_VM1
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1


	)

966 #i‚Ä°
def√∂ed
(
STM32L1
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32L5
√ã|| def√∂ed(
STM32H7
√ã|| def√∂ed(
STM32G4
)

967 
	#HAL_OPAMP_MSP_INIT_CB_ID
 
HAL_OPAMP_MSPINIT_CB_ID


	)

968 
	#HAL_OPAMP_MSP_DEINIT_CB_ID
 
HAL_OPAMP_MSPDEINIT_CB_ID


	)

979 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

981 #i‚Ä°
def√∂ed
(
STM32H7
)

982 
	#I2S_IT_TXE
 
I2S_IT_TXP


	)

983 
	#I2S_IT_RXNE
 
I2S_IT_RXP


	)

985 
	#I2S_FLAG_TXE
 
I2S_FLAG_TXP


	)

986 
	#I2S_FLAG_RXNE
 
I2S_FLAG_RXP


	)

989 #i‚Ä°
def√∂ed
(
STM32F7
)

990 
	#I2S_CLOCK_SYSCLK
 
I2S_CLOCK_PLL


	)

1001 
	#CF_DATA
 
ATA_DATA


	)

1002 
	#CF_SECTOR_COUNT
 
ATA_SECTOR_COUNT


	)

1003 
	#CF_SECTOR_NUMBER
 
ATA_SECTOR_NUMBER


	)

1004 
	#CF_CYLINDER_LOW
 
ATA_CYLINDER_LOW


	)

1005 
	#CF_CYLINDER_HIGH
 
ATA_CYLINDER_HIGH


	)

1006 
	#CF_CARD_HEAD
 
ATA_CARD_HEAD


	)

1007 
	#CF_STATUS_CMD
 
ATA_STATUS_CMD


	)

1008 
	#CF_STATUS_CMD_ALTERNATE
 
ATA_STATUS_CMD_ALTERNATE


	)

1009 
	#CF_COMMON_DATA_AREA
 
ATA_COMMON_DATA_AREA


	)

1012 
	#CF_READ_SECTOR_CMD
 
ATA_READ_SECTOR_CMD


	)

1013 
	#CF_WRITE_SECTOR_CMD
 
ATA_WRITE_SECTOR_CMD


	)

1014 
	#CF_ERASE_SECTOR_CMD
 
ATA_ERASE_SECTOR_CMD


	)

1015 
	#CF_IDENTIFY_CMD
 
ATA_IDENTIFY_CMD


	)

1017 
	#PCCARD_S√®tusTy‚â•def
 
HAL_PCCARD_S√®tusTy‚â•Def


	)

1018 
	#PCCARD_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

1019 
	#PCCARD_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

1020 
	#PCCARD_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

1021 
	#PCCARD_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

1030 
	#FORMAT_BIN
 
RTC_FORMAT_BIN


	)

1031 
	#FORMAT_BCD
 
RTC_FORMAT_BCD


	)

1033 
	#RTC_ALARMSUBSECONDMASK_N‚ÅÑe
 
RTC_ALARMSUBSECONDMASK_NONE


	)

1034 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

1035 
	#RTC_TAMPERMASK_FLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

1036 
	#RTC_TAMPERMASK_FLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

1038 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

1039 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

1040 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

1041 
	#RTC_TAMPER1_2_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

1042 
	#RTC_TAMPER1_2_3_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

1044 
	#RTC_TIMESTAMPPIN_PC13
 
RTC_TIMESTAMPPIN_DEFAULT


	)

1045 
	#RTC_TIMESTAMPPIN_PA0
 
RTC_TIMESTAMPPIN_POS1


	)

1046 
	#RTC_TIMESTAMPPIN_PI8
 
RTC_TIMESTAMPPIN_POS1


	)

1047 
	#RTC_TIMESTAMPPIN_PC1
 
RTC_TIMESTAMPPIN_POS2


	)

1049 
	#RTC_OUTPUT_REMAP_PC13
 
RTC_OUTPUT_REMAP_NONE


	)

1050 
	#RTC_OUTPUT_REMAP_PB14
 
RTC_OUTPUT_REMAP_POS1


	)

1051 
	#RTC_OUTPUT_REMAP_PB2
 
RTC_OUTPUT_REMAP_POS1


	)

1053 
	#RTC_TAMPERPIN_PC13
 
RTC_TAMPERPIN_DEFAULT


	)

1054 
	#RTC_TAMPERPIN_PA0
 
RTC_TAMPERPIN_POS1


	)

1055 
	#RTC_TAMPERPIN_PI8
 
RTC_TAMPERPIN_POS1


	)

1057 #i‚Ä°
def√∂ed
(
STM32H7
)

1058 
	#RTC_TAMPCR_TAMPXE
 
RTC_TAMPER_X


	)

1059 
	#RTC_TAMPCR_TAMPXIE
 
RTC_TAMPER_X_INTERRUPT


	)

1061 
	#RTC_TAMPER1_INTERRUPT
 
RTC_IT_TAMP1


	)

1062 
	#RTC_TAMPER2_INTERRUPT
 
RTC_IT_TAMP2


	)

1063 
	#RTC_TAMPER3_INTERRUPT
 
RTC_IT_TAMP3


	)

1064 
	#RTC_ALL_TAMPER_INTERRUPT
 
RTC_IT_TAMPALL


	)

1075 
	#SMARTCARD_NACK_ENABLED
 
SMARTCARD_NACK_ENABLE


	)

1076 
	#SMARTCARD_NACK_DISABLED
 
SMARTCARD_NACK_DISABLE


	)

1078 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLED
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

1079 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLED
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

1080 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLE
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

1081 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLE
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

1083 
	#SMARTCARD_TIMEOUT_DISABLED
 
SMARTCARD_TIMEOUT_DISABLE


	)

1084 
	#SMARTCARD_TIMEOUT_ENABLED
 
SMARTCARD_TIMEOUT_ENABLE


	)

1086 
	#SMARTCARD_LASTBIT_DISABLED
 
SMARTCARD_LASTBIT_DISABLE


	)

1087 
	#SMARTCARD_LASTBIT_ENABLED
 
SMARTCARD_LASTBIT_ENABLE


	)

1096 
	#SMBUS_DUALADDRESS_DISABLED
 
SMBUS_DUALADDRESS_DISABLE


	)

1097 
	#SMBUS_DUALADDRESS_ENABLED
 
SMBUS_DUALADDRESS_ENABLE


	)

1098 
	#SMBUS_GENERALCALL_DISABLED
 
SMBUS_GENERALCALL_DISABLE


	)

1099 
	#SMBUS_GENERALCALL_ENABLED
 
SMBUS_GENERALCALL_ENABLE


	)

1100 
	#SMBUS_NOSTRETCH_DISABLED
 
SMBUS_NOSTRETCH_DISABLE


	)

1101 
	#SMBUS_NOSTRETCH_ENABLED
 
SMBUS_NOSTRETCH_ENABLE


	)

1102 
	#SMBUS_ANALOGFILTER_ENABLED
 
SMBUS_ANALOGFILTER_ENABLE


	)

1103 
	#SMBUS_ANALOGFILTER_DISABLED
 
SMBUS_ANALOGFILTER_DISABLE


	)

1104 
	#SMBUS_PEC_DISABLED
 
SMBUS_PEC_DISABLE


	)

1105 
	#SMBUS_PEC_ENABLED
 
SMBUS_PEC_ENABLE


	)

1106 
	#HAL_SMBUS_STATE_SLAVE_LISTEN
 
HAL_SMBUS_STATE_LISTEN


	)

1114 
	#SPI_TIMODE_DISABLED
 
SPI_TIMODE_DISABLE


	)

1115 
	#SPI_TIMODE_ENABLED
 
SPI_TIMODE_ENABLE


	)

1117 
	#SPI_CRCCALCULATION_DISABLED
 
SPI_CRCCALCULATION_DISABLE


	)

1118 
	#SPI_CRCCALCULATION_ENABLED
 
SPI_CRCCALCULATION_ENABLE


	)

1120 
	#SPI_NSS_PULSE_DISABLED
 
SPI_NSS_PULSE_DISABLE


	)

1121 
	#SPI_NSS_PULSE_ENABLED
 
SPI_NSS_PULSE_ENABLE


	)

1123 #i‚Ä°
def√∂ed
(
STM32H7
)

1125 
	#SPI_FLAG_TXE
 
SPI_FLAG_TXP


	)

1126 
	#SPI_FLAG_RXNE
 
SPI_FLAG_RXP


	)

1128 
	#SPI_IT_TXE
 
SPI_IT_TXP


	)

1129 
	#SPI_IT_RXNE
 
SPI_IT_RXP


	)

1131 
	#SPI_FRLVL_EMPTY
 
SPI_RX_FIFO_0PACKET


	)

1132 
	#SPI_FRLVL_QUARTER_FULL
 
SPI_RX_FIFO_1PACKET


	)

1133 
	#SPI_FRLVL_HALF_FULL
 
SPI_RX_FIFO_2PACKET


	)

1134 
	#SPI_FRLVL_FULL
 
SPI_RX_FIFO_3PACKET


	)

1145 
	#CCER_CCxE_MASK
 
TIM_CCER_CCxE_MASK


	)

1146 
	#CCER_CCxNE_MASK
 
TIM_CCER_CCxNE_MASK


	)

1148 
	#TIM_DMABa¬£_CR1
 
TIM_DMABASE_CR1


	)

1149 
	#TIM_DMABa¬£_CR2
 
TIM_DMABASE_CR2


	)

1150 
	#TIM_DMABa¬£_SMCR
 
TIM_DMABASE_SMCR


	)

1151 
	#TIM_DMABa¬£_DIER
 
TIM_DMABASE_DIER


	)

1152 
	#TIM_DMABa¬£_SR
 
TIM_DMABASE_SR


	)

1153 
	#TIM_DMABa¬£_EGR
 
TIM_DMABASE_EGR


	)

1154 
	#TIM_DMABa¬£_CCMR1
 
TIM_DMABASE_CCMR1


	)

1155 
	#TIM_DMABa¬£_CCMR2
 
TIM_DMABASE_CCMR2


	)

1156 
	#TIM_DMABa¬£_CCER
 
TIM_DMABASE_CCER


	)

1157 
	#TIM_DMABa¬£_CNT
 
TIM_DMABASE_CNT


	)

1158 
	#TIM_DMABa¬£_PSC
 
TIM_DMABASE_PSC


	)

1159 
	#TIM_DMABa¬£_ARR
 
TIM_DMABASE_ARR


	)

1160 
	#TIM_DMABa¬£_RCR
 
TIM_DMABASE_RCR


	)

1161 
	#TIM_DMABa¬£_CCR1
 
TIM_DMABASE_CCR1


	)

1162 
	#TIM_DMABa¬£_CCR2
 
TIM_DMABASE_CCR2


	)

1163 
	#TIM_DMABa¬£_CCR3
 
TIM_DMABASE_CCR3


	)

1164 
	#TIM_DMABa¬£_CCR4
 
TIM_DMABASE_CCR4


	)

1165 
	#TIM_DMABa¬£_BDTR
 
TIM_DMABASE_BDTR


	)

1166 
	#TIM_DMABa¬£_DCR
 
TIM_DMABASE_DCR


	)

1167 
	#TIM_DMABa¬£_DMAR
 
TIM_DMABASE_DMAR


	)

1168 
	#TIM_DMABa¬£_OR1
 
TIM_DMABASE_OR1


	)

1169 
	#TIM_DMABa¬£_CCMR3
 
TIM_DMABASE_CCMR3


	)

1170 
	#TIM_DMABa¬£_CCR5
 
TIM_DMABASE_CCR5


	)

1171 
	#TIM_DMABa¬£_CCR6
 
TIM_DMABASE_CCR6


	)

1172 
	#TIM_DMABa¬£_OR2
 
TIM_DMABASE_OR2


	)

1173 
	#TIM_DMABa¬£_OR3
 
TIM_DMABASE_OR3


	)

1174 
	#TIM_DMABa¬£_OR
 
TIM_DMABASE_OR


	)

1176 
	#TIM_Ev√≠tSourÀö_Upd¬©e
 
TIM_EVENTSOURCE_UPDATE


	)

1177 
	#TIM_Ev√≠tSourÀö_CC1
 
TIM_EVENTSOURCE_CC1


	)

1178 
	#TIM_Ev√≠tSourÀö_CC2
 
TIM_EVENTSOURCE_CC2


	)

1179 
	#TIM_Ev√≠tSourÀö_CC3
 
TIM_EVENTSOURCE_CC3


	)

1180 
	#TIM_Ev√≠tSourÀö_CC4
 
TIM_EVENTSOURCE_CC4


	)

1181 
	#TIM_Ev√≠tSourÀö_COM
 
TIM_EVENTSOURCE_COM


	)

1182 
	#TIM_Ev√≠tSourÀö_Trigg√Æ
 
TIM_EVENTSOURCE_TRIGGER


	)

1183 
	#TIM_Ev√≠tSourÀö_B¬™ak
 
TIM_EVENTSOURCE_BREAK


	)

1184 
	#TIM_Ev√≠tSourÀö_B¬™ak2
 
TIM_EVENTSOURCE_BREAK2


	)

1186 
	#TIM_DMABur¬∞L√≠gth_1T√∏ns‚Äûr
 
TIM_DMABURSTLENGTH_1TRANSFER


	)

1187 
	#TIM_DMABur¬∞L√≠gth_2T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_2TRANSFERS


	)

1188 
	#TIM_DMABur¬∞L√≠gth_3T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_3TRANSFERS


	)

1189 
	#TIM_DMABur¬∞L√≠gth_4T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_4TRANSFERS


	)

1190 
	#TIM_DMABur¬∞L√≠gth_5T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_5TRANSFERS


	)

1191 
	#TIM_DMABur¬∞L√≠gth_6T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_6TRANSFERS


	)

1192 
	#TIM_DMABur¬∞L√≠gth_7T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_7TRANSFERS


	)

1193 
	#TIM_DMABur¬∞L√≠gth_8T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_8TRANSFERS


	)

1194 
	#TIM_DMABur¬∞L√≠gth_9T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_9TRANSFERS


	)

1195 
	#TIM_DMABur¬∞L√≠gth_10T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_10TRANSFERS


	)

1196 
	#TIM_DMABur¬∞L√≠gth_11T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_11TRANSFERS


	)

1197 
	#TIM_DMABur¬∞L√≠gth_12T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_12TRANSFERS


	)

1198 
	#TIM_DMABur¬∞L√≠gth_13T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_13TRANSFERS


	)

1199 
	#TIM_DMABur¬∞L√≠gth_14T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_14TRANSFERS


	)

1200 
	#TIM_DMABur¬∞L√≠gth_15T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_15TRANSFERS


	)

1201 
	#TIM_DMABur¬∞L√≠gth_16T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_16TRANSFERS


	)

1202 
	#TIM_DMABur¬∞L√≠gth_17T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_17TRANSFERS


	)

1203 
	#TIM_DMABur¬∞L√≠gth_18T√∏ns‚Äûrs
 
TIM_DMABURSTLENGTH_18TRANSFERS


	)

1205 #i‚Ä°
def√∂ed
(
STM32L0
)

1206 
	#TIM22_TI1_GPIO1
 
TIM22_TI1_GPIO


	)

1207 
	#TIM22_TI1_GPIO2
 
TIM22_TI1_GPIO


	)

1210 #i‚Ä°
def√∂ed
(
STM32F3
)

1211 
	#IS_TIM_HALL_INTERFACE_INSTANCE
 
IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE


	)

1214 #i‚Ä°
def√∂ed
(
STM32H7
)

1215 
	#TIM_TIM1_ETR_COMP1_OUT
 
TIM_TIM1_ETR_COMP1


	)

1216 
	#TIM_TIM1_ETR_COMP2_OUT
 
TIM_TIM1_ETR_COMP2


	)

1217 
	#TIM_TIM8_ETR_COMP1_OUT
 
TIM_TIM8_ETR_COMP1


	)

1218 
	#TIM_TIM8_ETR_COMP2_OUT
 
TIM_TIM8_ETR_COMP2


	)

1219 
	#TIM_TIM2_ETR_COMP1_OUT
 
TIM_TIM2_ETR_COMP1


	)

1220 
	#TIM_TIM2_ETR_COMP2_OUT
 
TIM_TIM2_ETR_COMP2


	)

1221 
	#TIM_TIM3_ETR_COMP1_OUT
 
TIM_TIM3_ETR_COMP1


	)

1222 
	#TIM_TIM1_TI1_COMP1_OUT
 
TIM_TIM1_TI1_COMP1


	)

1223 
	#TIM_TIM8_TI1_COMP2_OUT
 
TIM_TIM8_TI1_COMP2


	)

1224 
	#TIM_TIM2_TI4_COMP1_OUT
 
TIM_TIM2_TI4_COMP1


	)

1225 
	#TIM_TIM2_TI4_COMP2_OUT
 
TIM_TIM2_TI4_COMP2


	)

1226 
	#TIM_TIM2_TI4_COMP1COMP2_OUT
 
TIM_TIM2_TI4_COMP1_COMP2


	)

1227 
	#TIM_TIM3_TI1_COMP1_OUT
 
TIM_TIM3_TI1_COMP1


	)

1228 
	#TIM_TIM3_TI1_COMP2_OUT
 
TIM_TIM3_TI1_COMP2


	)

1229 
	#TIM_TIM3_TI1_COMP1COMP2_OUT
 
TIM_TIM3_TI1_COMP1_COMP2


	)

1239 
	#TSC_SYNC_POL_FALL
 
TSC_SYNC_POLARITY_FALLING


	)

1240 
	#TSC_SYNC_POL_RISE_HIGH
 
TSC_SYNC_POLARITY_RISING


	)

1248 
	#UART_ONEBIT_SAMPLING_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

1249 
	#UART_ONEBIT_SAMPLING_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

1250 
	#UART_ONE_BIT_SAMPLE_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

1251 
	#UART_ONE_BIT_SAMPLE_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

1253 
	#__HAL_UART_ONEBIT_ENABLE
 
__HAL_UART_ONE_BIT_SAMPLE_ENABLE


	)

1254 
	#__HAL_UART_ONEBIT_DISABLE
 
__HAL_UART_ONE_BIT_SAMPLE_DISABLE


	)

1256 
	#__DIV_SAMPLING16
 
UART_DIV_SAMPLING16


	)

1257 
	#__DIVMANT_SAMPLING16
 
UART_DIVMANT_SAMPLING16


	)

1258 
	#__DIVFRAQ_SAMPLING16
 
UART_DIVFRAQ_SAMPLING16


	)

1259 
	#__UART_BRR_SAMPLING16
 
UART_BRR_SAMPLING16


	)

1261 
	#__DIV_SAMPLING8
 
UART_DIV_SAMPLING8


	)

1262 
	#__DIVMANT_SAMPLING8
 
UART_DIVMANT_SAMPLING8


	)

1263 
	#__DIVFRAQ_SAMPLING8
 
UART_DIVFRAQ_SAMPLING8


	)

1264 
	#__UART_BRR_SAMPLING8
 
UART_BRR_SAMPLING8


	)

1266 
	#__DIV_LPUART
 
UART_DIV_LPUART


	)

1268 
	#UART_WAKEUPMETHODE_IDLELINE
 
UART_WAKEUPMETHOD_IDLELINE


	)

1269 
	#UART_WAKEUPMETHODE_ADDRESSMARK
 
UART_WAKEUPMETHOD_ADDRESSMARK


	)

1280 
	#USART_CLOCK_DISABLED
 
USART_CLOCK_DISABLE


	)

1281 
	#USART_CLOCK_ENABLED
 
USART_CLOCK_ENABLE


	)

1283 
	#USARTNACK_ENABLED
 
USART_NACK_ENABLE


	)

1284 
	#USARTNACK_DISABLED
 
USART_NACK_DISABLE


	)

1292 
	#CFR_BASE
 
WWDG_CFR_BASE


	)

1301 
	#CAN_F√ª√£rFIFO0
 
CAN_FILTER_FIFO0


	)

1302 
	#CAN_F√ª√£rFIFO1
 
CAN_FILTER_FIFO1


	)

1303 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

1304 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

1305 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

1306 
	#INAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

1307 
	#SLAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

1308 
	#CAN_TXSTATUS_FAILED
 ((
u√∂t8_t
)0x00U)

	)

1309 
	#CAN_TXSTATUS_OK
 ((
u√∂t8_t
)0x01U)

	)

1310 
	#CAN_TXSTATUS_PENDING
 ((
u√∂t8_t
)0x02U)

	)

1320 
	#VLAN_TAG
 
ETH_VLAN_TAG


	)

1321 
	#MIN_ETH_PAYLOAD
 
ETH_MIN_ETH_PAYLOAD


	)

1322 
	#MAX_ETH_PAYLOAD
 
ETH_MAX_ETH_PAYLOAD


	)

1323 
	#JUMBO_FRAME_PAYLOAD
 
ETH_JUMBO_FRAME_PAYLOAD


	)

1324 
	#MACMIIAR_CR_MASK
 
ETH_MACMIIAR_CR_MASK


	)

1325 
	#MACCR_CLEAR_MASK
 
ETH_MACCR_CLEAR_MASK


	)

1326 
	#MACFCR_CLEAR_MASK
 
ETH_MACFCR_CLEAR_MASK


	)

1327 
	#DMAOMR_CLEAR_MASK
 
ETH_DMAOMR_CLEAR_MASK


	)

1329 
	#ETH_MMCCR
 0x00000100U

	)

1330 
	#ETH_MMCRIR
 0x00000104U

	)

1331 
	#ETH_MMCTIR
 0x00000108U

	)

1332 
	#ETH_MMCRIMR
 0x0000010CU

	)

1333 
	#ETH_MMCTIMR
 0x00000110U

	)

1334 
	#ETH_MMCTGFSCCR
 0x0000014CU

	)

1335 
	#ETH_MMCTGFMSCCR
 0x00000150U

	)

1336 
	#ETH_MMCTGFCR
 0x00000168U

	)

1337 
	#ETH_MMCRFCECR
 0x00000194U

	)

1338 
	#ETH_MMCRFAECR
 0x00000198U

	)

1339 
	#ETH_MMCRGUFCR
 0x000001C4U

	)

1341 
	#ETH_MAC_TXFIFO_FULL
 0x02000000U

	)

1342 
	#ETH_MAC_TXFIFONOT_EMPTY
 0x01000000U

	)

1343 
	#ETH_MAC_TXFIFO_WRITE_ACTIVE
 0x00400000U

	)

1344 
	#ETH_MAC_TXFIFO_IDLE
 0x00000000U

	)

1345 
	#ETH_MAC_TXFIFO_READ
 0x00100000U

	)

1346 
	#ETH_MAC_TXFIFO_WAITING
 0x00200000U

	)

1347 
	#ETH_MAC_TXFIFO_WRITING
 0x00300000U

	)

1348 
	#ETH_MAC_TRANSMISSION_PAUSE
 0x00080000U

	)

1349 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE
 0x00000000U

	)

1350 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING
 0x00020000U

	)

1351 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF
 0x00040000U

	)

1352 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING
 0x00060000U

	)

1353 
	#ETH_MAC_MII_TRANSMIT_ACTIVE
 0x00010000U

	)

1354 
	#ETH_MAC_RXFIFO_EMPTY
 0x00000000U

	)

1355 
	#ETH_MAC_RXFIFO_BELOW_THRESHOLD
 0x00000100U

	)

1356 
	#ETH_MAC_RXFIFO_ABOVE_THRESHOLD
 0x00000200U

	)

1357 
	#ETH_MAC_RXFIFO_FULL
 0x00000300U

	)

1358 #i‚Ä°
def√∂ed
(
STM32F1
)

1360 
	#ETH_MAC_READCONTROLLER_IDLE
 0x00000000U

	)

1361 
	#ETH_MAC_READCONTROLLER_READING_DATA
 0x00000020U

	)

1362 
	#ETH_MAC_READCONTROLLER_READING_STATUS
 0x00000040U

	)

1364 
	#ETH_MAC_READCONTROLLER_FLUSHING
 0x00000060U

	)

1365 
	#ETH_MAC_RXFIFO_WRITE_ACTIVE
 0x00000010U

	)

1366 
	#ETH_MAC_SMALL_FIFO_NOTACTIVE
 0x00000000U

	)

1367 
	#ETH_MAC_SMALL_FIFO_READ_ACTIVE
 0x00000002U

	)

1368 
	#ETH_MAC_SMALL_FIFO_WRITE_ACTIVE
 0x00000004U

	)

1369 
	#ETH_MAC_SMALL_FIFO_RW_ACTIVE
 0x00000006U

	)

1370 
	#ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE
 0x00000001U

	)

1379 
	#HAL_DCMI_ERROR_OVF
 
HAL_DCMI_ERROR_OVR


	)

1380 
	#DCMI_IT_OVF
 
DCMI_IT_OVR


	)

1381 
	#DCMI_FLAG_OVFRI
 
DCMI_FLAG_OVRRI


	)

1382 
	#DCMI_FLAG_OVFMI
 
DCMI_FLAG_OVRMI


	)

1384 
	#HAL_DCMI_C‚ÅÑfigCROP
 
HAL_DCMI_C‚ÅÑfigCr‚Ä∫


	)

1385 
	#HAL_DCMI_E¬´b√ÄCROP
 
HAL_DCMI_E¬´b√ÄCr‚Ä∫


	)

1386 
	#HAL_DCMI_Di√üb√ÄCROP
 
HAL_DCMI_Di√üb√ÄCr‚Ä∫


	)

1392 #i‚Ä°
def√∂ed
(
STM32L4
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32F427xx
√ã|| def√∂ed(
STM32F437xx
) \

1393 || 
def√∂ed
(
STM32F429xx
√ã|| def√∂ed(
STM32F439xx
√ã|| def√∂ed(
STM32F469xx
√ã|| def√∂ed(
STM32F479xx
) \

1394 || 
def√∂ed
(
STM32H7
)

1398 
	#DMA2D_ARGB8888
 
DMA2D_OUTPUT_ARGB8888


	)

1399 
	#DMA2D_RGB888
 
DMA2D_OUTPUT_RGB888


	)

1400 
	#DMA2D_RGB565
 
DMA2D_OUTPUT_RGB565


	)

1401 
	#DMA2D_ARGB1555
 
DMA2D_OUTPUT_ARGB1555


	)

1402 
	#DMA2D_ARGB4444
 
DMA2D_OUTPUT_ARGB4444


	)

1404 
	#CM_ARGB8888
 
DMA2D_INPUT_ARGB8888


	)

1405 
	#CM_RGB888
 
DMA2D_INPUT_RGB888


	)

1406 
	#CM_RGB565
 
DMA2D_INPUT_RGB565


	)

1407 
	#CM_ARGB1555
 
DMA2D_INPUT_ARGB1555


	)

1408 
	#CM_ARGB4444
 
DMA2D_INPUT_ARGB4444


	)

1409 
	#CM_L8
 
DMA2D_INPUT_L8


	)

1410 
	#CM_AL44
 
DMA2D_INPUT_AL44


	)

1411 
	#CM_AL88
 
DMA2D_INPUT_AL88


	)

1412 
	#CM_L4
 
DMA2D_INPUT_L4


	)

1413 
	#CM_A8
 
DMA2D_INPUT_A8


	)

1414 
	#CM_A4
 
DMA2D_INPUT_A4


	)

1433 
	#HAL_CRYP_Compu√®ti‚ÅÑC‚àÇtC√Ülback
 
HAL_CRYPEx_Compu√®ti‚ÅÑC‚àÇtC√Ülback


	)

1441 
	#HAL_HASH_STATETy‚â•Def
 
HAL_HASH_S√®√£Ty‚â•Def


	)

1442 
	#HAL_HASHPha¬£Ty‚â•Def
 
HAL_HASH_Pha¬£Ty‚â•Def


	)

1443 
	#HAL_HMAC_MD5_F√∂ish
 
HAL_HASH_MD5_F√∂ish


	)

1444 
	#HAL_HMAC_SHA1_F√∂ish
 
HAL_HASH_SHA1_F√∂ish


	)

1445 
	#HAL_HMAC_SHA224_F√∂ish
 
HAL_HASH_SHA224_F√∂ish


	)

1446 
	#HAL_HMAC_SHA256_F√∂ish
 
HAL_HASH_SHA256_F√∂ish


	)

1450 
	#HASH_AlgoS√±eÀòi‚ÅÑ_SHA1
 
HASH_ALGOSELECTION_SHA1


	)

1451 
	#HASH_AlgoS√±eÀòi‚ÅÑ_SHA224
 
HASH_ALGOSELECTION_SHA224


	)

1452 
	#HASH_AlgoS√±eÀòi‚ÅÑ_SHA256
 
HASH_ALGOSELECTION_SHA256


	)

1453 
	#HASH_AlgoS√±eÀòi‚ÅÑ_MD5
 
HASH_ALGOSELECTION_MD5


	)

1455 
	#HASH_AlgoMode_HASH
 
HASH_ALGOMODE_HASH


	)

1456 
	#HASH_AlgoMode_HMAC
 
HASH_ALGOMODE_HMAC


	)

1458 
	#HASH_HMACKeyTy‚â•_Sh‚ÄπtKey
 
HASH_HMAC_KEYTYPE_SHORTKEY


	)

1459 
	#HASH_HMACKeyTy‚â•_L‚ÅÑgKey
 
HASH_HMAC_KEYTYPE_LONGKEY


	)

1461 #i‚Ä°
def√∂ed
(
STM32L4
√ã|| def√∂ed(
STM32L5
√ã|| def√∂ed(
STM32F2
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32H7
)

1463 
	#HAL_HASH_MD5_Accumu≈ì√£
 
HAL_HASH_MD5_Accm‚Ä¶


	)

1464 
	#HAL_HASH_MD5_Accumu≈ì√£_End
 
HAL_HASH_MD5_Accm‚Ä¶_End


	)

1465 
	#HAL_HASH_MD5_Accumu≈ì√£_IT
 
HAL_HASH_MD5_Accm‚Ä¶_IT


	)

1466 
	#HAL_HASH_MD5_Accumu≈ì√£_End_IT
 
HAL_HASH_MD5_Accm‚Ä¶_End_IT


	)

1468 
	#HAL_HASH_SHA1_Accumu≈ì√£
 
HAL_HASH_SHA1_Accm‚Ä¶


	)

1469 
	#HAL_HASH_SHA1_Accumu≈ì√£_End
 
HAL_HASH_SHA1_Accm‚Ä¶_End


	)

1470 
	#HAL_HASH_SHA1_Accumu≈ì√£_IT
 
HAL_HASH_SHA1_Accm‚Ä¶_IT


	)

1471 
	#HAL_HASH_SHA1_Accumu≈ì√£_End_IT
 
HAL_HASH_SHA1_Accm‚Ä¶_End_IT


	)

1473 
	#HAL_HASHEx_SHA224_Accumu≈ì√£
 
HAL_HASHEx_SHA224_Accm‚Ä¶


	)

1474 
	#HAL_HASHEx_SHA224_Accumu≈ì√£_End
 
HAL_HASHEx_SHA224_Accm‚Ä¶_End


	)

1475 
	#HAL_HASHEx_SHA224_Accumu≈ì√£_IT
 
HAL_HASHEx_SHA224_Accm‚Ä¶_IT


	)

1476 
	#HAL_HASHEx_SHA224_Accumu≈ì√£_End_IT
 
HAL_HASHEx_SHA224_Accm‚Ä¶_End_IT


	)

1478 
	#HAL_HASHEx_SHA256_Accumu≈ì√£
 
HAL_HASHEx_SHA256_Accm‚Ä¶


	)

1479 
	#HAL_HASHEx_SHA256_Accumu≈ì√£_End
 
HAL_HASHEx_SHA256_Accm‚Ä¶_End


	)

1480 
	#HAL_HASHEx_SHA256_Accumu≈ì√£_IT
 
HAL_HASHEx_SHA256_Accm‚Ä¶_IT


	)

1481 
	#HAL_HASHEx_SHA256_Accumu≈ì√£_End_IT
 
HAL_HASHEx_SHA256_Accm‚Ä¶_End_IT


	)

1491 
	#HAL_E¬´b√ÄDBGS√Ä√ØMode
 
HAL_DBGMCU_E¬´b√ÄDBGS√Ä√ØMode


	)

1492 
	#HAL_Di√üb√ÄDBGS√Ä√ØMode
 
HAL_DBGMCU_Di√üb√ÄDBGS√Ä√ØMode


	)

1493 
	#HAL_E¬´b√ÄDBGSt‚Ä∫Mode
 
HAL_DBGMCU_E¬´b√ÄDBGSt‚Ä∫Mode


	)

1494 
	#HAL_Di√üb√ÄDBGSt‚Ä∫Mode
 
HAL_DBGMCU_Di√üb√ÄDBGSt‚Ä∫Mode


	)

1495 
	#HAL_E¬´b√ÄDBGS√®ndbyMode
 
HAL_DBGMCU_E¬´b√ÄDBGS√®ndbyMode


	)

1496 
	#HAL_Di√üb√ÄDBGS√®ndbyMode
 
HAL_DBGMCU_Di√üb√ÄDBGS√®ndbyMode


	)

1497 
	#HAL_DBG_LowPow√ÆC‚ÅÑfig
(
P√Æ√πh
, 
cmd
√ã(((cmd)==
ENABLE
)? 
	`HAL_DBGMCU_DBG_E¬´b√ÄLowPow√ÆC‚ÅÑfig
(P√Æ√πh√ã: 
	`HAL_DBGMCU_DBG_Di√üb√ÄLowPow√ÆC‚ÅÑfig
(P√Æ√πh))

	)

1498 
	#HAL_VREFINT_Ou√ßutS√±eÀò
 
HAL_SYSCFG_VREFINT_Ou√ßutS√±eÀò


	)

1499 
	#HAL_Lock_Cmd
(
cmd
√ã(((cmd)==
ENABLE
√ã? 
	`HAL_SYSCFG_E¬´b√Ä_Lock_VREFINT
(√ã: 
	`HAL_SYSCFG_Di√üb√Ä_Lock_VREFINT
())

	)

1500 #i‚Ä°
def√∂ed
(
STM32L0
)

1502 
	#HAL_VREFINT_Cmd
(
cmd
√ã(((cmd)==
ENABLE
)? 
	`HAL_SYSCFG_E¬´b√ÄVREFINT
(√ã: 
	`HAL_SYSCFG_Di√üb√ÄVREFINT
())

	)

1504 
	#HAL_ADC_E¬´b√ÄBuf‚Äûr_Cmd
(
cmd
√ã(((cmd)==
ENABLE
√ã? 
	`HAL_ADCEx_E¬´b√ÄVREFINT
(√ã: 
	`HAL_ADCEx_Di√üb√ÄVREFINT
())

	)

1505 
	#HAL_ADC_E¬´b√ÄBuf‚ÄûrS√≠s‚Äπ_Cmd
(
cmd
√ã(((cmd)==
ENABLE
√ã? 
	`HAL_ADCEx_E¬´b√ÄVREFINTTempS√≠s‚Äπ
(√ã: 
	`HAL_ADCEx_Di√üb√ÄVREFINTTempS√≠s‚Äπ
())

	)

1506 #i‚Ä°
def√∂ed
(
STM32H7A3xx
√ã|| def√∂ed(
STM32H7B3xx
√ã|| def√∂ed(
STM32H7B0xx
√ã|| def√∂ed(
STM32H7A3xxQ
√ã|| def√∂ed(
STM32H7B3xxQ
√ã|| def√∂ed(
STM32H7B0xxQ
)

1507 
	#HAL_E¬´b√ÄSRDoma√∂DBGSt‚Ä∫Mode
 
HAL_E¬´b√ÄDoma√∂3DBGSt‚Ä∫Mode


	)

1508 
	#HAL_Di√üb√ÄSRDoma√∂DBGSt‚Ä∫Mode
 
HAL_Di√üb√ÄDoma√∂3DBGSt‚Ä∫Mode


	)

1509 
	#HAL_E¬´b√ÄSRDoma√∂DBGS√®ndbyMode
 
HAL_E¬´b√ÄDoma√∂3DBGS√®ndbyMode


	)

1510 
	#HAL_Di√üb√ÄSRDoma√∂DBGS√®ndbyMode
 
HAL_Di√üb√ÄDoma√∂3DBGS√®ndbyMode


	)

1520 
	#FLASH_H√ÜfPageProg√∏m
 
HAL_FLASHEx_H√ÜfPageProg√∏m


	)

1521 
	#FLASH_E¬´b√ÄRunPow√ÆDown
 
HAL_FLASHEx_E¬´b√ÄRunPow√ÆDown


	)

1522 
	#FLASH_Di√üb√ÄRunPow√ÆDown
 
HAL_FLASHEx_Di√üb√ÄRunPow√ÆDown


	)

1523 
	#HAL_DATA_EEPROMEx_U‚àÜock
 
HAL_FLASHEx_DATAEEPROM_U‚àÜock


	)

1524 
	#HAL_DATA_EEPROMEx_Lock
 
HAL_FLASHEx_DATAEEPROM_Lock


	)

1525 
	#HAL_DATA_EEPROMEx_E√∏¬£
 
HAL_FLASHEx_DATAEEPROM_E√∏¬£


	)

1526 
	#HAL_DATA_EEPROMEx_Prog√∏m
 
HAL_FLASHEx_DATAEEPROM_Prog√∏m


	)

1535 
	#HAL_I2CEx_A¬´logF√ª√£r_C‚ÅÑfig
 
HAL_I2CEx_C‚ÅÑfigA¬´logF√ª√£r


	)

1536 
	#HAL_I2CEx_Dig√¥√ÜF√ª√£r_C‚ÅÑfig
 
HAL_I2CEx_C‚ÅÑfigDig√¥√ÜF√ª√£r


	)

1537 
	#HAL_FMPI2CEx_A¬´logF√ª√£r_C‚ÅÑfig
 
HAL_FMPI2CEx_C‚ÅÑfigA¬´logF√ª√£r


	)

1538 
	#HAL_FMPI2CEx_Dig√¥√ÜF√ª√£r_C‚ÅÑfig
 
HAL_FMPI2CEx_C‚ÅÑfigDig√¥√ÜF√ª√£r


	)

1540 
	#HAL_I2CFa¬∞ModePlusC‚ÅÑfig
(
SYSCFG_I2CFa¬∞ModePlus
, 
cmd
√ã(((cmd)==
ENABLE
)? 
	`HAL_I2CEx_E¬´b√ÄFa¬∞ModePlus
(SYSCFG_I2CFa¬∞ModePlus): 
	`HAL_I2CEx_Di√üb√ÄFa¬∞ModePlus
(SYSCFG_I2CFa¬∞ModePlus))

	)

1542 #i‚Ä°
def√∂ed
(
STM32H7
√ã|| def√∂ed(
STM32WB
√ã|| def√∂ed(
STM32G0
√ã|| def√∂ed(
STM32F0
√ã|| def√∂ed(
STM32F1
√ã|| def√∂ed(
STM32F2
√ã|| def√∂ed(
STM32F3
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32L0
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32L5
√ã|| def√∂ed(
STM32G4
√ã|| def√∂ed(
STM32L1
)

1543 
	#HAL_I2C_Ma¬∞√Æ_Sequ√≠t√ºl_T√∏nsm√¥_IT
 
HAL_I2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_IT


	)

1544 
	#HAL_I2C_Ma¬∞√Æ_Sequ√≠t√ºl_ReÀöive_IT
 
HAL_I2C_Ma¬∞√Æ_Seq_ReÀöive_IT


	)

1545 
	#HAL_I2C_S≈ìve_Sequ√≠t√ºl_T√∏nsm√¥_IT
 
HAL_I2C_S≈ìve_Seq_T√∏nsm√¥_IT


	)

1546 
	#HAL_I2C_S≈ìve_Sequ√≠t√ºl_ReÀöive_IT
 
HAL_I2C_S≈ìve_Seq_ReÀöive_IT


	)

1548 #i‚Ä°
def√∂ed
(
STM32H7
√ã|| def√∂ed(
STM32WB
√ã|| def√∂ed(
STM32G0
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32L0
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32L5
√ã|| def√∂ed(
STM32G4
)|| def√∂ed(
STM32L1
)

1549 
	#HAL_I2C_Ma¬∞√Æ_Sequ√≠t√ºl_T√∏nsm√¥_DMA
 
HAL_I2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_DMA


	)

1550 
	#HAL_I2C_Ma¬∞√Æ_Sequ√≠t√ºl_ReÀöive_DMA
 
HAL_I2C_Ma¬∞√Æ_Seq_ReÀöive_DMA


	)

1551 
	#HAL_I2C_S≈ìve_Sequ√≠t√ºl_T√∏nsm√¥_DMA
 
HAL_I2C_S≈ìve_Seq_T√∏nsm√¥_DMA


	)

1552 
	#HAL_I2C_S≈ìve_Sequ√≠t√ºl_ReÀöive_DMA
 
HAL_I2C_S≈ìve_Seq_ReÀöive_DMA


	)

1555 #i‚Ä°
def√∂ed
(
STM32F4
)

1556 
	#HAL_FMPI2C_Ma¬∞√Æ_Sequ√≠t√ºl_T√∏nsm√¥_IT
 
HAL_FMPI2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_IT


	)

1557 
	#HAL_FMPI2C_Ma¬∞√Æ_Sequ√≠t√ºl_ReÀöive_IT
 
HAL_FMPI2C_Ma¬∞√Æ_Seq_ReÀöive_IT


	)

1558 
	#HAL_FMPI2C_S≈ìve_Sequ√≠t√ºl_T√∏nsm√¥_IT
 
HAL_FMPI2C_S≈ìve_Seq_T√∏nsm√¥_IT


	)

1559 
	#HAL_FMPI2C_S≈ìve_Sequ√≠t√ºl_ReÀöive_IT
 
HAL_FMPI2C_S≈ìve_Seq_ReÀöive_IT


	)

1560 
	#HAL_FMPI2C_Ma¬∞√Æ_Sequ√≠t√ºl_T√∏nsm√¥_DMA
 
HAL_FMPI2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_DMA


	)

1561 
	#HAL_FMPI2C_Ma¬∞√Æ_Sequ√≠t√ºl_ReÀöive_DMA
 
HAL_FMPI2C_Ma¬∞√Æ_Seq_ReÀöive_DMA


	)

1562 
	#HAL_FMPI2C_S≈ìve_Sequ√≠t√ºl_T√∏nsm√¥_DMA
 
HAL_FMPI2C_S≈ìve_Seq_T√∏nsm√¥_DMA


	)

1563 
	#HAL_FMPI2C_S≈ìve_Sequ√≠t√ºl_ReÀöive_DMA
 
HAL_FMPI2C_S≈ìve_Seq_ReÀöive_DMA


	)

1573 #i‚Ä°
def√∂ed
(
STM32G0
)

1574 
	#HAL_PWR_C‚ÅÑfigPVD
 
HAL_PWREx_C‚ÅÑfigPVD


	)

1575 
	#HAL_PWR_E¬´b√ÄPVD
 
HAL_PWREx_E¬´b√ÄPVD


	)

1576 
	#HAL_PWR_Di√üb√ÄPVD
 
HAL_PWREx_Di√üb√ÄPVD


	)

1577 
	#HAL_PWR_PVD_IRQH‚Ñ¢d√Är
 
HAL_PWREx_PVD_IRQH‚Ñ¢d√Är


	)

1579 
	#HAL_PWR_PVDC‚ÅÑfig
 
HAL_PWR_C‚ÅÑfigPVD


	)

1580 
	#HAL_PWR_Di√üb√ÄBkUpReg
 
HAL_PWREx_Di√üb√ÄBkUpReg


	)

1581 
	#HAL_PWR_Di√üb√ÄF≈ìshPow√ÆDown
 
HAL_PWREx_Di√üb√ÄF≈ìshPow√ÆDown


	)

1582 
	#HAL_PWR_Di√üb√ÄVddio2M‚ÅÑ√¥‚Äπ
 
HAL_PWREx_Di√üb√ÄVddio2M‚ÅÑ√¥‚Äπ


	)

1583 
	#HAL_PWR_E¬´b√ÄBkUpReg
 
HAL_PWREx_E¬´b√ÄBkUpReg


	)

1584 
	#HAL_PWR_E¬´b√ÄF≈ìshPow√ÆDown
 
HAL_PWREx_E¬´b√ÄF≈ìshPow√ÆDown


	)

1585 
	#HAL_PWR_E¬´b√ÄVddio2M‚ÅÑ√¥‚Äπ
 
HAL_PWREx_E¬´b√ÄVddio2M‚ÅÑ√¥‚Äπ


	)

1586 
	#HAL_PWR_PVD_PVM_IRQH‚Ñ¢d√Är
 
HAL_PWREx_PVD_PVM_IRQH‚Ñ¢d√Är


	)

1587 
	#HAL_PWR_PVDLev√±C‚ÅÑfig
 
HAL_PWR_C‚ÅÑfigPVD


	)

1588 
	#HAL_PWR_Vddio2M‚ÅÑ√¥‚Äπ_IRQH‚Ñ¢d√Är
 
HAL_PWREx_Vddio2M‚ÅÑ√¥‚Äπ_IRQH‚Ñ¢d√Är


	)

1589 
	#HAL_PWR_Vddio2M‚ÅÑ√¥‚ÄπC√Ülback
 
HAL_PWREx_Vddio2M‚ÅÑ√¥‚ÄπC√Ülback


	)

1590 
	#HAL_PWREx_AÀòiv¬©eOv√ÆDrive
 
HAL_PWREx_E¬´b√ÄOv√ÆDrive


	)

1591 
	#HAL_PWREx_D√≥Àòiv¬©eOv√ÆDrive
 
HAL_PWREx_Di√üb√ÄOv√ÆDrive


	)

1592 
	#HAL_PWREx_Di√üb√ÄSDADCA¬´log
 
HAL_PWREx_Di√üb√ÄSDADC


	)

1593 
	#HAL_PWREx_E¬´b√ÄSDADCA¬´log
 
HAL_PWREx_E¬´b√ÄSDADC


	)

1594 
	#HAL_PWREx_PVMC‚ÅÑfig
 
HAL_PWREx_C‚ÅÑfigPVM


	)

1596 
	#PWR_MODE_NORMAL
 
PWR_PVD_MODE_NORMAL


	)

1597 
	#PWR_MODE_IT_RISING
 
PWR_PVD_MODE_IT_RISING


	)

1598 
	#PWR_MODE_IT_FALLING
 
PWR_PVD_MODE_IT_FALLING


	)

1599 
	#PWR_MODE_IT_RISING_FALLING
 
PWR_PVD_MODE_IT_RISING_FALLING


	)

1600 
	#PWR_MODE_EVENT_RISING
 
PWR_PVD_MODE_EVENT_RISING


	)

1601 
	#PWR_MODE_EVENT_FALLING
 
PWR_PVD_MODE_EVENT_FALLING


	)

1602 
	#PWR_MODE_EVENT_RISING_FALLING
 
PWR_PVD_MODE_EVENT_RISING_FALLING


	)

1604 
	#CR_OFFSET_BB
 
PWR_CR_OFFSET_BB


	)

1605 
	#CSR_OFFSET_BB
 
PWR_CSR_OFFSET_BB


	)

1606 
	#PMODE_BIT_NUMBER
 
VOS_BIT_NUMBER


	)

1607 
	#CR_PMODE_BB
 
CR_VOS_BB


	)

1609 
	#DBP_B√¥Numb√Æ
 
DBP_BIT_NUMBER


	)

1610 
	#PVDE_B√¥Numb√Æ
 
PVDE_BIT_NUMBER


	)

1611 
	#PMODE_B√¥Numb√Æ
 
PMODE_BIT_NUMBER


	)

1612 
	#EWUP_B√¥Numb√Æ
 
EWUP_BIT_NUMBER


	)

1613 
	#FPDS_B√¥Numb√Æ
 
FPDS_BIT_NUMBER


	)

1614 
	#ODEN_B√¥Numb√Æ
 
ODEN_BIT_NUMBER


	)

1615 
	#ODSWEN_B√¥Numb√Æ
 
ODSWEN_BIT_NUMBER


	)

1616 
	#MRLVDS_B√¥Numb√Æ
 
MRLVDS_BIT_NUMBER


	)

1617 
	#LPLVDS_B√¥Numb√Æ
 
LPLVDS_BIT_NUMBER


	)

1618 
	#BRE_B√¥Numb√Æ
 
BRE_BIT_NUMBER


	)

1620 
	#PWR_MODE_EVT
 
PWR_PVD_MODE_NORMAL


	)

1629 
	#HAL_SMBUS_S≈ìve_Li¬∞√≠_IT
 
HAL_SMBUS_E¬´b√ÄLi¬∞√≠_IT


	)

1630 
	#HAL_SMBUS_S≈ìveAddrC√Ülback
 
HAL_SMBUS_AddrC√Ülback


	)

1631 
	#HAL_SMBUS_S≈ìveLi¬∞√≠C‚àÇtC√Ülback
 
HAL_SMBUS_Li¬∞√≠C‚àÇtC√Ülback


	)

1639 
	#HAL_SPI_FlushRxFifo
 
HAL_SPIEx_FlushRxFifo


	)

1647 
	#HAL_TIM_DMAD√±ayPul¬£C‚àÇt
 
TIM_DMAD√±ayPul¬£C‚àÇt


	)

1648 
	#HAL_TIM_DMAE¬∫‚Äπ
 
TIM_DMAE¬∫‚Äπ


	)

1649 
	#HAL_TIM_DMAC‚â†tu¬™C‚àÇt
 
TIM_DMAC‚â†tu¬™C‚àÇt


	)

1650 
	#HAL_TIMEx_DMACommu√®ti‚ÅÑC‚àÇt
 
TIMEx_DMACommu√®ti‚ÅÑC‚àÇt


	)

1651 #i‚Ä°
def√∂ed
(
STM32H7
√ã|| def√∂ed(
STM32G0
√ã|| def√∂ed(
STM32F0
√ã|| def√∂ed(
STM32F1
√ã|| def√∂ed(
STM32F2
√ã|| def√∂ed(
STM32F3
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32F7
√ã|| def√∂ed(
STM32L0
√ã|| def√∂ed(
STM32L4
)

1652 
	#HAL_TIM_S≈ìveC‚ÅÑfigSynchr‚ÅÑiz¬©i‚ÅÑ
 
HAL_TIM_S≈ìveC‚ÅÑfigSynchro


	)

1653 
	#HAL_TIM_S≈ìveC‚ÅÑfigSynchr‚ÅÑiz¬©i‚ÅÑ_IT
 
HAL_TIM_S≈ìveC‚ÅÑfigSynchro_IT


	)

1654 
	#HAL_TIMEx_Commu√®ti‚ÅÑC√Ülback
 
HAL_TIMEx_CommutC√Ülback


	)

1655 
	#HAL_TIMEx_C‚ÅÑfigCommu√®ti‚ÅÑEv√≠t
 
HAL_TIMEx_C‚ÅÑfigCommutEv√≠t


	)

1656 
	#HAL_TIMEx_C‚ÅÑfigCommu√®ti‚ÅÑEv√≠t_IT
 
HAL_TIMEx_C‚ÅÑfigCommutEv√≠t_IT


	)

1657 
	#HAL_TIMEx_C‚ÅÑfigCommu√®ti‚ÅÑEv√≠t_DMA
 
HAL_TIMEx_C‚ÅÑfigCommutEv√≠t_DMA


	)

1666 
	#HAL_UART_WakeupC√Ülback
 
HAL_UARTEx_WakeupC√Ülback


	)

1674 
	#HAL_LTDC_L√∂eEv√≠C√Ülback
 
HAL_LTDC_L√∂eEv√≠tC√Ülback


	)

1675 
	#HAL_LTDC_R√±aod
 
HAL_LTDC_R√±Ô¨Çd


	)

1676 
	#HAL_LTDC_S√•uÀòIn√¥FromVideoC‚ÅÑfig
 
HAL_LTDCEx_S√•uÀòIn√¥FromVideoC‚ÅÑfig


	)

1677 
	#HAL_LTDC_S√•uÀòIn√¥FromAd‚â†√£dComm‚Ñ¢dC‚ÅÑfig
 
HAL_LTDCEx_S√•uÀòIn√¥FromAd‚â†√£dComm‚Ñ¢dC‚ÅÑfig


	)

1696 
	#AES_IT_CC
 
CRYP_IT_CC


	)

1697 
	#AES_IT_ERR
 
CRYP_IT_ERR


	)

1698 
	#AES_FLAG_CCF
 
CRYP_FLAG_CCF


	)

1706 
	#__HAL_GET_BOOT_MODE
 
__HAL_SYSCFG_GET_BOOT_MODE


	)

1707 
	#__HAL_REMAPMEMORY_FLASH
 
__HAL_SYSCFG_REMAPMEMORY_FLASH


	)

1708 
	#__HAL_REMAPMEMORY_SYSTEMFLASH
 
__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH


	)

1709 
	#__HAL_REMAPMEMORY_SRAM
 
__HAL_SYSCFG_REMAPMEMORY_SRAM


	)

1710 
	#__HAL_REMAPMEMORY_FMC
 
__HAL_SYSCFG_REMAPMEMORY_FMC


	)

1711 
	#__HAL_REMAPMEMORY_FMC_SDRAM
 
__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM


	)

1712 
	#__HAL_REMAPMEMORY_FSMC
 
__HAL_SYSCFG_REMAPMEMORY_FSMC


	)

1713 
	#__HAL_REMAPMEMORY_QUADSPI
 
__HAL_SYSCFG_REMAPMEMORY_QUADSPI


	)

1714 
	#__HAL_FMC_BANK
 
__HAL_SYSCFG_FMC_BANK


	)

1715 
	#__HAL_GET_FLAG
 
__HAL_SYSCFG_GET_FLAG


	)

1716 
	#__HAL_CLEAR_FLAG
 
__HAL_SYSCFG_CLEAR_FLAG


	)

1717 
	#__HAL_VREFINT_OUT_ENABLE
 
__HAL_SYSCFG_VREFINT_OUT_ENABLE


	)

1718 
	#__HAL_VREFINT_OUT_DISABLE
 
__HAL_SYSCFG_VREFINT_OUT_DISABLE


	)

1719 
	#__HAL_SYSCFG_SRAM2_WRP_ENABLE
 
__HAL_SYSCFG_SRAM2_WRP_0_31_ENABLE


	)

1721 
	#SYSCFG_FLAG_VREF_READY
 
SYSCFG_FLAG_VREFINT_READY


	)

1722 
	#SYSCFG_FLAG_RC48
 
RCC_FLAG_HSI48


	)

1723 
	#IS_SYSCFG_FASTMODEPLUS_CONFIG
 
IS_I2C_FASTMODEPLUS


	)

1724 
	#UFB_MODE_B√¥Numb√Æ
 
UFB_MODE_BIT_NUMBER


	)

1725 
	#CMP_PD_B√¥Numb√Æ
 
CMP_PD_BIT_NUMBER


	)

1735 
	#__ADC_ENABLE
 
__HAL_ADC_ENABLE


	)

1736 
	#__ADC_DISABLE
 
__HAL_ADC_DISABLE


	)

1737 
	#__HAL_ADC_ENABLING_CONDITIONS
 
ADC_ENABLING_CONDITIONS


	)

1738 
	#__HAL_ADC_DISABLING_CONDITIONS
 
ADC_DISABLING_CONDITIONS


	)

1739 
	#__HAL_ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1740 
	#__ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1741 
	#__HAL_ADC_IS_SOFTWARE_START_REGULAR
 
ADC_IS_SOFTWARE_START_REGULAR


	)

1742 
	#__HAL_ADC_IS_SOFTWARE_START_INJECTED
 
ADC_IS_SOFTWARE_START_INJECTED


	)

1743 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
 
ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED


	)

1744 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR
 
ADC_IS_CONVERSION_ONGOING_REGULAR


	)

1745 
	#__HAL_ADC_IS_CONVERSION_ONGOING_INJECTED
 
ADC_IS_CONVERSION_ONGOING_INJECTED


	)

1746 
	#__HAL_ADC_IS_CONVERSION_ONGOING
 
ADC_IS_CONVERSION_ONGOING


	)

1747 
	#__HAL_ADC_CLEAR_ERRORCODE
 
ADC_CLEAR_ERRORCODE


	)

1749 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1750 
	#__HAL_ADC_JSQR_RK
 
ADC_JSQR_RK


	)

1751 
	#__HAL_ADC_CFGR_AWD1CH
 
ADC_CFGR_AWD1CH_SHIFT


	)

1752 
	#__HAL_ADC_CFGR_AWD23CR
 
ADC_CFGR_AWD23CR


	)

1753 
	#__HAL_ADC_CFGR_INJECT_AUTO_CONVERSION
 
ADC_CFGR_INJECT_AUTO_CONVERSION


	)

1754 
	#__HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE
 
ADC_CFGR_INJECT_CONTEXT_QUEUE


	)

1755 
	#__HAL_ADC_CFGR_INJECT_DISCCONTINUOUS
 
ADC_CFGR_INJECT_DISCCONTINUOUS


	)

1756 
	#__HAL_ADC_CFGR_REG_DISCCONTINUOUS
 
ADC_CFGR_REG_DISCCONTINUOUS


	)

1757 
	#__HAL_ADC_CFGR_DISCONTINUOUS_NUM
 
ADC_CFGR_DISCONTINUOUS_NUM


	)

1758 
	#__HAL_ADC_CFGR_AUTOWAIT
 
ADC_CFGR_AUTOWAIT


	)

1759 
	#__HAL_ADC_CFGR_CONTINUOUS
 
ADC_CFGR_CONTINUOUS


	)

1760 
	#__HAL_ADC_CFGR_OVERRUN
 
ADC_CFGR_OVERRUN


	)

1761 
	#__HAL_ADC_CFGR_DMACONTREQ
 
ADC_CFGR_DMACONTREQ


	)

1762 
	#__HAL_ADC_CFGR_EXTSEL
 
ADC_CFGR_EXTSEL_SET


	)

1763 
	#__HAL_ADC_JSQR_JEXTSEL
 
ADC_JSQR_JEXTSEL_SET


	)

1764 
	#__HAL_ADC_OFR_CHANNEL
 
ADC_OFR_CHANNEL


	)

1765 
	#__HAL_ADC_DIFSEL_CHANNEL
 
ADC_DIFSEL_CHANNEL


	)

1766 
	#__HAL_ADC_CALFACT_DIFF_SET
 
ADC_CALFACT_DIFF_SET


	)

1767 
	#__HAL_ADC_CALFACT_DIFF_GET
 
ADC_CALFACT_DIFF_GET


	)

1768 
	#__HAL_ADC_TRX_HIGHTHRESHOLD
 
ADC_TRX_HIGHTHRESHOLD


	)

1770 
	#__HAL_ADC_OFFSET_SHIFT_RESOLUTION
 
ADC_OFFSET_SHIFT_RESOLUTION


	)

1771 
	#__HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD1THRESHOLD_SHIFT_RESOLUTION


	)

1772 
	#__HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD23THRESHOLD_SHIFT_RESOLUTION


	)

1773 
	#__HAL_ADC_COMMON_REGISTER
 
ADC_COMMON_REGISTER


	)

1774 
	#__HAL_ADC_COMMON_CCR_MULTI
 
ADC_COMMON_CCR_MULTI


	)

1775 
	#__HAL_ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1776 
	#__ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1777 
	#__HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER
 
ADC_NONMULTIMODE_OR_MULTIMODEMASTER


	)

1778 
	#__HAL_ADC_COMMON_ADC_OTHER
 
ADC_COMMON_ADC_OTHER


	)

1779 
	#__HAL_ADC_MULTI_SLAVE
 
ADC_MULTI_SLAVE


	)

1781 
	#__HAL_ADC_SQR1_L
 
ADC_SQR1_L_SHIFT


	)

1782 
	#__HAL_ADC_JSQR_JL
 
ADC_JSQR_JL_SHIFT


	)

1783 
	#__HAL_ADC_JSQR_RK_JL
 
ADC_JSQR_RK_JL


	)

1784 
	#__HAL_ADC_CR1_DISCONTINUOUS_NUM
 
ADC_CR1_DISCONTINUOUS_NUM


	)

1785 
	#__HAL_ADC_CR1_SCAN
 
ADC_CR1_SCAN_SET


	)

1786 
	#__HAL_ADC_CONVCYCLES_MAX_RANGE
 
ADC_CONVCYCLES_MAX_RANGE


	)

1787 
	#__HAL_ADC_CLOCK_PRESCALER_RANGE
 
ADC_CLOCK_PRESCALER_RANGE


	)

1788 
	#__HAL_ADC_GET_CLOCK_PRESCALER
 
ADC_GET_CLOCK_PRESCALER


	)

1790 
	#__HAL_ADC_SQR1
 
ADC_SQR1


	)

1791 
	#__HAL_ADC_SMPR1
 
ADC_SMPR1


	)

1792 
	#__HAL_ADC_SMPR2
 
ADC_SMPR2


	)

1793 
	#__HAL_ADC_SQR3_RK
 
ADC_SQR3_RK


	)

1794 
	#__HAL_ADC_SQR2_RK
 
ADC_SQR2_RK


	)

1795 
	#__HAL_ADC_SQR1_RK
 
ADC_SQR1_RK


	)

1796 
	#__HAL_ADC_CR2_CONTINUOUS
 
ADC_CR2_CONTINUOUS


	)

1797 
	#__HAL_ADC_CR1_DISCONTINUOUS
 
ADC_CR1_DISCONTINUOUS


	)

1798 
	#__HAL_ADC_CR1_SCANCONV
 
ADC_CR1_SCANCONV


	)

1799 
	#__HAL_ADC_CR2_EOCS√±eÀòi‚ÅÑ
 
ADC_CR2_EOCS√±eÀòi‚ÅÑ


	)

1800 
	#__HAL_ADC_CR2_DMAC‚ÅÑtReq
 
ADC_CR2_DMAC‚ÅÑtReq


	)

1801 
	#__HAL_ADC_JSQR
 
ADC_JSQR


	)

1803 
	#__HAL_ADC_CHSELR_CHANNEL
 
ADC_CHSELR_CHANNEL


	)

1804 
	#__HAL_ADC_CFGR1_REG_DISCCONTINUOUS
 
ADC_CFGR1_REG_DISCCONTINUOUS


	)

1805 
	#__HAL_ADC_CFGR1_AUTOOFF
 
ADC_CFGR1_AUTOOFF


	)

1806 
	#__HAL_ADC_CFGR1_AUTOWAIT
 
ADC_CFGR1_AUTOWAIT


	)

1807 
	#__HAL_ADC_CFGR1_CONTINUOUS
 
ADC_CFGR1_CONTINUOUS


	)

1808 
	#__HAL_ADC_CFGR1_OVERRUN
 
ADC_CFGR1_OVERRUN


	)

1809 
	#__HAL_ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR


	)

1810 
	#__HAL_ADC_CFGR1_DMACONTREQ
 
ADC_CFGR1_DMACONTREQ


	)

1819 
	#__HAL_DHR12R1_ALIGNEMENT
 
DAC_DHR12R1_ALIGNMENT


	)

1820 
	#__HAL_DHR12R2_ALIGNEMENT
 
DAC_DHR12R2_ALIGNMENT


	)

1821 
	#__HAL_DHR12RD_ALIGNEMENT
 
DAC_DHR12RD_ALIGNMENT


	)

1822 
	#IS_DAC_GENERATE_WAVE
 
IS_DAC_WAVE


	)

1831 
	#__HAL_FREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM1


	)

1832 
	#__HAL_UNFREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM1


	)

1833 
	#__HAL_FREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM2


	)

1834 
	#__HAL_UNFREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM2


	)

1835 
	#__HAL_FREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM3


	)

1836 
	#__HAL_UNFREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM3


	)

1837 
	#__HAL_FREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM4


	)

1838 
	#__HAL_UNFREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM4


	)

1839 
	#__HAL_FREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM5


	)

1840 
	#__HAL_UNFREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM5


	)

1841 
	#__HAL_FREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM6


	)

1842 
	#__HAL_UNFREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM6


	)

1843 
	#__HAL_FREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM7


	)

1844 
	#__HAL_UNFREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM7


	)

1845 
	#__HAL_FREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM8


	)

1846 
	#__HAL_UNFREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM8


	)

1848 
	#__HAL_FREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM9


	)

1849 
	#__HAL_UNFREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM9


	)

1850 
	#__HAL_FREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM10


	)

1851 
	#__HAL_UNFREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM10


	)

1852 
	#__HAL_FREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM11


	)

1853 
	#__HAL_UNFREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM11


	)

1854 
	#__HAL_FREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM12


	)

1855 
	#__HAL_UNFREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM12


	)

1856 
	#__HAL_FREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM13


	)

1857 
	#__HAL_UNFREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM13


	)

1858 
	#__HAL_FREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM14


	)

1859 
	#__HAL_UNFREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM14


	)

1860 
	#__HAL_FREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN2


	)

1861 
	#__HAL_UNFREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN2


	)

1864 
	#__HAL_FREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM15


	)

1865 
	#__HAL_UNFREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM15


	)

1866 
	#__HAL_FREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM16


	)

1867 
	#__HAL_UNFREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM16


	)

1868 
	#__HAL_FREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM17


	)

1869 
	#__HAL_UNFREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM17


	)

1870 
	#__HAL_FREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_FREEZE_RTC


	)

1871 
	#__HAL_UNFREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_RTC


	)

1872 #i‚Ä°
def√∂ed
(
STM32H7
)

1873 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG1


	)

1874 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UnF¬™eze_WWDG1


	)

1875 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG1


	)

1876 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UnF¬™eze_IWDG1


	)

1878 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG


	)

1879 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_WWDG


	)

1880 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG


	)

1881 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_IWDG


	)

1883 
	#__HAL_FREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT


	)

1884 
	#__HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT


	)

1885 
	#__HAL_FREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT


	)

1886 
	#__HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT


	)

1887 
	#__HAL_FREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT


	)

1888 
	#__HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT


	)

1889 
	#__HAL_FREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN1


	)

1890 
	#__HAL_UNFREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN1


	)

1891 
	#__HAL_FREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM1


	)

1892 
	#__HAL_UNFREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM1


	)

1893 
	#__HAL_FREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM2


	)

1894 
	#__HAL_UNFREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM2


	)

1903 #i‚Ä°
def√∂ed
(
STM32F3
)

1904 
	#COMP_START
 
__HAL_COMP_ENABLE


	)

1905 
	#COMP_STOP
 
__HAL_COMP_DISABLE


	)

1906 
	#COMP_LOCK
 
__HAL_COMP_LOCK


	)

1908 #i‚Ä°
def√∂ed
(
STM32F301x8
√ã|| def√∂ed(
STM32F302x8
√ã|| def√∂ed(
STM32F318xx
√ã|| def√∂ed(
STM32F303x8
√ã|| def√∂ed(
STM32F334x8
√ã|| def√∂ed(
STM32F328xx
)

1909 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1910 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1911 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

1912 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1913 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1914 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

1915 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1916 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1917 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

1918 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1919 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1920 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

1921 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1922 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1923 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

1924 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1925 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1926 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

1927 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1928 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1929 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

1930 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1931 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1932 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

1934 #i‚Ä°
def√∂ed
(
STM32F302xE
√ã|| def√∂ed(
STM32F302xC
)

1935 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1936 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1937 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1938 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

1939 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1940 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1941 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1942 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

1943 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1944 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1945 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1946 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

1947 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1948 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1949 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1950 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

1951 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1952 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1953 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1954 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

1955 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1956 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1957 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1958 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

1959 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1960 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1961 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1962 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

1963 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1964 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1965 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1966 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

1968 #i‚Ä°
def√∂ed
(
STM32F303xE
√ã|| def√∂ed(
STM32F398xx
√ã|| def√∂ed(
STM32F303xC
√ã|| def√∂ed(
STM32F358xx
)

1969 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1970 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1971 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE
() : \

1972 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1973 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE
() : \

1974 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
() : \

1975 
	`__HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE
())

	)

1976 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1977 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1978 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE
() : \

1979 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1980 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE
() : \

1981 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
() : \

1982 
	`__HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE
())

	)

1983 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1984 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1985 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE
() : \

1986 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1987 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE
() : \

1988 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
() : \

1989 
	`__HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE
())

	)

1990 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1991 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1992 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE
() : \

1993 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1994 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE
() : \

1995 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
() : \

1996 
	`__HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE
())

	)

1997 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1998 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1999 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_IT
() : \

2000 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

2001 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_IT
() : \

2002 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
() : \

2003 
	`__HAL_COMP_COMP7_EXTI_ENABLE_IT
())

	)

2004 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2005 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

2006 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_IT
() : \

2007 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

2008 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_IT
() : \

2009 ((
__EXTILINE__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
() : \

2010 
	`__HAL_COMP_COMP7_EXTI_DISABLE_IT
())

	)

2011 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2012 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

2013 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_GET_FLAG
() : \

2014 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

2015 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_GET_FLAG
() : \

2016 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
() : \

2017 
	`__HAL_COMP_COMP7_EXTI_GET_FLAG
())

	)

2018 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2019 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP2
√ã? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

2020 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP3
√ã? 
	`__HAL_COMP_COMP3_EXTI_CLEAR_FLAG
() : \

2021 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP4
√ã? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

2022 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP5
√ã? 
	`__HAL_COMP_COMP5_EXTI_CLEAR_FLAG
() : \

2023 ((
__FLAG__
√ã=Ô£ø
COMP_EXTI_LINE_COMP6
√ã? 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
() : \

2024 
	`__HAL_COMP_COMP7_EXTI_CLEAR_FLAG
())

	)

2026 #i‚Ä°
def√∂ed
(
STM32F373xC
√ã||def√∂ed(
STM32F378xx
)

2027 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2028 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

2029 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2030 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

2031 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2032 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

2033 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2034 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

2035 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2036 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

2037 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2038 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

2039 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2040 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

2041 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2042 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

2045 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2046 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

2047 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2048 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

2049 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2050 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

2051 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2052 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

2053 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2054 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

2055 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
√ã(((__EXTILINE__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2056 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

2057 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2058 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

2059 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
COMP_EXTI_LINE_COMP1
√ã? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2060 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

2063 
	#__HAL_COMP_GET_EXTI_LINE
 
COMP_GET_EXTI_LINE


	)

2065 #i‚Ä°
def√∂ed
(
STM32L0
√ã|| def√∂ed(
STM32L4
)

2070 
	#__HAL_COMP_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(
	`__HAL_COMP_IS_LOCKED
(__HANDLE__))

	)

2076 #i‚Ä°
def√∂ed
(
STM32L0
√ã|| def√∂ed(
STM32L4
)

2080 
	#HAL_COMP_S√®œÄ_IT
 
HAL_COMP_S√®œÄ


	)

2081 
	#HAL_COMP_St‚Ä∫_IT
 
HAL_COMP_St‚Ä∫


	)

2091 
	#IS_DAC_WAVE
(
WAVE
√ã(((WAVE√ã=Ô£ø
DAC_WAVE_NONE
) || \

2092 ((
WAVE
√ã=Ô£ø
DAC_WAVE_NOISE
)|| \

2093 ((
WAVE
√ã=Ô£ø
DAC_WAVE_TRIANGLE
))

	)

2103 
	#IS_WRPAREA
 
IS_OB_WRPAREA


	)

2104 
	#IS_TYPEPROGRAM
 
IS_FLASH_TYPEPROGRAM


	)

2105 
	#IS_TYPEPROGRAMFLASH
 
IS_FLASH_TYPEPROGRAM


	)

2106 
	#IS_TYPEERASE
 
IS_FLASH_TYPEERASE


	)

2107 
	#IS_NBSECTORS
 
IS_FLASH_NBSECTORS


	)

2108 
	#IS_OB_WDG_SOURCE
 
IS_OB_IWDG_SOURCE


	)

2118 
	#__HAL_I2C_RESET_CR2
 
I2C_RESET_CR2


	)

2119 
	#__HAL_I2C_GENERATE_START
 
I2C_GENERATE_START


	)

2120 #i‚Ä°
def√∂ed
(
STM32F1
)

2121 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQRANGE


	)

2123 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQ_RANGE


	)

2125 
	#__HAL_I2C_RISE_TIME
 
I2C_RISE_TIME


	)

2126 
	#__HAL_I2C_SPEED_STANDARD
 
I2C_SPEED_STANDARD


	)

2127 
	#__HAL_I2C_SPEED_FAST
 
I2C_SPEED_FAST


	)

2128 
	#__HAL_I2C_SPEED
 
I2C_SPEED


	)

2129 
	#__HAL_I2C_7BIT_ADD_WRITE
 
I2C_7BIT_ADD_WRITE


	)

2130 
	#__HAL_I2C_7BIT_ADD_READ
 
I2C_7BIT_ADD_READ


	)

2131 
	#__HAL_I2C_10BIT_ADDRESS
 
I2C_10BIT_ADDRESS


	)

2132 
	#__HAL_I2C_10BIT_HEADER_WRITE
 
I2C_10BIT_HEADER_WRITE


	)

2133 
	#__HAL_I2C_10BIT_HEADER_READ
 
I2C_10BIT_HEADER_READ


	)

2134 
	#__HAL_I2C_MEM_ADD_MSB
 
I2C_MEM_ADD_MSB


	)

2135 
	#__HAL_I2C_MEM_ADD_LSB
 
I2C_MEM_ADD_LSB


	)

2136 
	#__HAL_I2C_FREQRANGE
 
I2C_FREQRANGE


	)

2145 
	#IS_I2S_INSTANCE
 
IS_I2S_ALL_INSTANCE


	)

2146 
	#IS_I2S_INSTANCE_EXT
 
IS_I2S_ALL_INSTANCE_EXT


	)

2148 #i‚Ä°
def√∂ed
(
STM32H7
)

2149 
	#__HAL_I2S_CLEAR_FREFLAG
 
__HAL_I2S_CLEAR_TIFREFLAG


	)

2160 
	#__IRDA_DISABLE
 
__HAL_IRDA_DISABLE


	)

2161 
	#__IRDA_ENABLE
 
__HAL_IRDA_ENABLE


	)

2163 
	#__HAL_IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

2164 
	#__HAL_IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

2165 
	#__IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

2166 
	#__IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

2168 
	#IS_IRDA_ONEBIT_SAMPLE
 
IS_IRDA_ONE_BIT_SAMPLE


	)

2179 
	#__HAL_IWDG_ENABLE_WRITE_ACCESS
 
IWDG_ENABLE_WRITE_ACCESS


	)

2180 
	#__HAL_IWDG_DISABLE_WRITE_ACCESS
 
IWDG_DISABLE_WRITE_ACCESS


	)

2190 
	#__HAL_LPTIM_ENABLE_INTERRUPT
 
__HAL_LPTIM_ENABLE_IT


	)

2191 
	#__HAL_LPTIM_DISABLE_INTERRUPT
 
__HAL_LPTIM_DISABLE_IT


	)

2192 
	#__HAL_LPTIM_GET_ITSTATUS
 
__HAL_LPTIM_GET_IT_SOURCE


	)

2202 
	#__OPAMP_CSR_OPAXPD
 
OPAMP_CSR_OPAXPD


	)

2203 
	#__OPAMP_CSR_S3SELX
 
OPAMP_CSR_S3SELX


	)

2204 
	#__OPAMP_CSR_S4SELX
 
OPAMP_CSR_S4SELX


	)

2205 
	#__OPAMP_CSR_S5SELX
 
OPAMP_CSR_S5SELX


	)

2206 
	#__OPAMP_CSR_S6SELX
 
OPAMP_CSR_S6SELX


	)

2207 
	#__OPAMP_CSR_OPAXCAL_L
 
OPAMP_CSR_OPAXCAL_L


	)

2208 
	#__OPAMP_CSR_OPAXCAL_H
 
OPAMP_CSR_OPAXCAL_H


	)

2209 
	#__OPAMP_CSR_OPAXLPM
 
OPAMP_CSR_OPAXLPM


	)

2210 
	#__OPAMP_CSR_ALL_SWITCHES
 
OPAMP_CSR_ALL_SWITCHES


	)

2211 
	#__OPAMP_CSR_ANAWSELX
 
OPAMP_CSR_ANAWSELX


	)

2212 
	#__OPAMP_CSR_OPAXCALOUT
 
OPAMP_CSR_OPAXCALOUT


	)

2213 
	#__OPAMP_OFFSET_TRIM_BITSPOSITION
 
OPAMP_OFFSET_TRIM_BITSPOSITION


	)

2214 
	#__OPAMP_OFFSET_TRIM_SET
 
OPAMP_OFFSET_TRIM_SET


	)

2224 
	#__HAL_PVD_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

2225 
	#__HAL_PVD_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

2226 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

2227 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2228 
	#__HAL_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

2229 
	#__HAL_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2230 
	#__HAL_PVM_EVENT_DISABLE
 
__HAL_PWR_PVM_EVENT_DISABLE


	)

2231 
	#__HAL_PVM_EVENT_ENABLE
 
__HAL_PWR_PVM_EVENT_ENABLE


	)

2232 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE


	)

2233 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE


	)

2234 
	#__HAL_PVM_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE


	)

2235 
	#__HAL_PVM_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE


	)

2236 
	#__HAL_PWR_INTERNALWAKEUP_DISABLE
 
HAL_PWREx_Di√üb√ÄI¬°√Æ¬´lWakeUpL√∂e


	)

2237 
	#__HAL_PWR_INTERNALWAKEUP_ENABLE
 
HAL_PWREx_E¬´b√ÄI¬°√Æ¬´lWakeUpL√∂e


	)

2238 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE
 
HAL_PWREx_Di√üb√ÄPu≈íUpPu≈íDownC‚ÅÑfig


	)

2239 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE
 
HAL_PWREx_E¬´b√ÄPu≈íUpPu≈íDownC‚ÅÑfig


	)

2240 
	#__HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER
(√ãd√ø{ 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(); } 0)

	)

2241 
	#__HAL_PWR_PVD_EXTI_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

2242 
	#__HAL_PWR_PVD_EXTI_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

2243 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

2244 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2245 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

2246 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2247 
	#__HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2248 
	#__HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2249 
	#__HAL_PWR_PVM_DISABLE
(√ãd√ø{ 
	`HAL_PWREx_Di√üb√ÄPVM1
();
	`HAL_PWREx_Di√üb√ÄPVM2
();
	`HAL_PWREx_Di√üb√ÄPVM3
();
	`HAL_PWREx_Di√üb√ÄPVM4
(); } 0)

	)

2250 
	#__HAL_PWR_PVM_ENABLE
(√ãd√ø{ 
	`HAL_PWREx_E¬´b√ÄPVM1
();
	`HAL_PWREx_E¬´b√ÄPVM2
();
	`HAL_PWREx_E¬´b√ÄPVM3
();
	`HAL_PWREx_E¬´b√ÄPVM4
(); } 0)

	)

2251 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE
 
HAL_PWREx_Di√üb√ÄSRAM2C‚ÅÑ√£¬°R√´√≠ti‚ÅÑ


	)

2252 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE
 
HAL_PWREx_E¬´b√ÄSRAM2C‚ÅÑ√£¬°R√´√≠ti‚ÅÑ


	)

2253 
	#__HAL_PWR_VDDIO2_DISABLE
 
HAL_PWREx_Di√üb√ÄVddIO2


	)

2254 
	#__HAL_PWR_VDDIO2_ENABLE
 
HAL_PWREx_E¬´b√ÄVddIO2


	)

2255 
	#__HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE


	)

2256 
	#__HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE


	)

2257 
	#__HAL_PWR_VDDUSB_DISABLE
 
HAL_PWREx_Di√üb√ÄVddUSB


	)

2258 
	#__HAL_PWR_VDDUSB_ENABLE
 
HAL_PWREx_E¬´b√ÄVddUSB


	)

2260 #i‚Ä°
def√∂ed
 (
STM32F4
)

2261 
	#__HAL_PVD_EXTI_ENABLE_IT
(
PWR_EXTI_LINE_PVD
√ã
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
()

	)

2262 
	#__HAL_PVD_EXTI_DISABLE_IT
(
PWR_EXTI_LINE_PVD
√ã
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
()

	)

2263 
	#__HAL_PVD_EXTI_GET_FLAG
(
PWR_EXTI_LINE_PVD
√ã
	`__HAL_PWR_PVD_EXTI_GET_FLAG
()

	)

2264 
	#__HAL_PVD_EXTI_CLEAR_FLAG
(
PWR_EXTI_LINE_PVD
√ã
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
()

	)

2265 
	#__HAL_PVD_EXTI_GENERATE_SWIT
(
PWR_EXTI_LINE_PVD
√ã
	`__HAL_PWR_PVD_EXTI_GENERATE_SWIT
()

	)

2267 
	#__HAL_PVD_EXTI_CLEAR_FLAG
 
__HAL_PWR_PVD_EXTI_CLEAR_FLAG


	)

2268 
	#__HAL_PVD_EXTI_DISABLE_IT
 
__HAL_PWR_PVD_EXTI_DISABLE_IT


	)

2269 
	#__HAL_PVD_EXTI_ENABLE_IT
 
__HAL_PWR_PVD_EXTI_ENABLE_IT


	)

2270 
	#__HAL_PVD_EXTI_GENERATE_SWIT
 
__HAL_PWR_PVD_EXTI_GENERATE_SWIT


	)

2271 
	#__HAL_PVD_EXTI_GET_FLAG
 
__HAL_PWR_PVD_EXTI_GET_FLAG


	)

2282 
	#RCC_St‚Ä∫WakeUpClock_MSI
 
RCC_STOP_WAKEUPCLOCK_MSI


	)

2283 
	#RCC_St‚Ä∫WakeUpClock_HSI
 
RCC_STOP_WAKEUPCLOCK_HSI


	)

2285 
	#HAL_RCC_CCSC√Ülback
 
HAL_RCC_CSSC√Ülback


	)

2286 
	#HAL_RC48_E¬´b√ÄBuf‚Äûr_Cmd
(
cmd
√ã(((cmd)==
ENABLE
√ã? 
	`HAL_RCCEx_E¬´b√ÄHSI48_VREFINT
(√ã: 
	`HAL_RCCEx_Di√üb√ÄHSI48_VREFINT
())

	)

2288 
	#__ADC_CLK_DISABLE
 
__HAL_RCC_ADC_CLK_DISABLE


	)

2289 
	#__ADC_CLK_ENABLE
 
__HAL_RCC_ADC_CLK_ENABLE


	)

2290 
	#__ADC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC_CLK_SLEEP_DISABLE


	)

2291 
	#__ADC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC_CLK_SLEEP_ENABLE


	)

2292 
	#__ADC_FORCE_RESET
 
__HAL_RCC_ADC_FORCE_RESET


	)

2293 
	#__ADC_RELEASE_RESET
 
__HAL_RCC_ADC_RELEASE_RESET


	)

2294 
	#__ADC1_CLK_DISABLE
 
__HAL_RCC_ADC1_CLK_DISABLE


	)

2295 
	#__ADC1_CLK_ENABLE
 
__HAL_RCC_ADC1_CLK_ENABLE


	)

2296 
	#__ADC1_FORCE_RESET
 
__HAL_RCC_ADC1_FORCE_RESET


	)

2297 
	#__ADC1_RELEASE_RESET
 
__HAL_RCC_ADC1_RELEASE_RESET


	)

2298 
	#__ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_ENABLE


	)

2299 
	#__ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_DISABLE


	)

2300 
	#__ADC2_CLK_DISABLE
 
__HAL_RCC_ADC2_CLK_DISABLE


	)

2301 
	#__ADC2_CLK_ENABLE
 
__HAL_RCC_ADC2_CLK_ENABLE


	)

2302 
	#__ADC2_FORCE_RESET
 
__HAL_RCC_ADC2_FORCE_RESET


	)

2303 
	#__ADC2_RELEASE_RESET
 
__HAL_RCC_ADC2_RELEASE_RESET


	)

2304 
	#__ADC3_CLK_DISABLE
 
__HAL_RCC_ADC3_CLK_DISABLE


	)

2305 
	#__ADC3_CLK_ENABLE
 
__HAL_RCC_ADC3_CLK_ENABLE


	)

2306 
	#__ADC3_FORCE_RESET
 
__HAL_RCC_ADC3_FORCE_RESET


	)

2307 
	#__ADC3_RELEASE_RESET
 
__HAL_RCC_ADC3_RELEASE_RESET


	)

2308 
	#__AES_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

2309 
	#__AES_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

2310 
	#__AES_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

2311 
	#__AES_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

2312 
	#__AES_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

2313 
	#__AES_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

2314 
	#__CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_ENABLE


	)

2315 
	#__CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_DISABLE


	)

2316 
	#__CRYP_CLK_ENABLE
 
__HAL_RCC_CRYP_CLK_ENABLE


	)

2317 
	#__CRYP_CLK_DISABLE
 
__HAL_RCC_CRYP_CLK_DISABLE


	)

2318 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

2319 
	#__CRYP_RELEASE_RESET
 
__HAL_RCC_CRYP_RELEASE_RESET


	)

2320 
	#__AFIO_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

2321 
	#__AFIO_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

2322 
	#__AFIO_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

2323 
	#__AFIO_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

2324 
	#__AHB_FORCE_RESET
 
__HAL_RCC_AHB_FORCE_RESET


	)

2325 
	#__AHB_RELEASE_RESET
 
__HAL_RCC_AHB_RELEASE_RESET


	)

2326 
	#__AHB1_FORCE_RESET
 
__HAL_RCC_AHB1_FORCE_RESET


	)

2327 
	#__AHB1_RELEASE_RESET
 
__HAL_RCC_AHB1_RELEASE_RESET


	)

2328 
	#__AHB2_FORCE_RESET
 
__HAL_RCC_AHB2_FORCE_RESET


	)

2329 
	#__AHB2_RELEASE_RESET
 
__HAL_RCC_AHB2_RELEASE_RESET


	)

2330 
	#__AHB3_FORCE_RESET
 
__HAL_RCC_AHB3_FORCE_RESET


	)

2331 
	#__AHB3_RELEASE_RESET
 
__HAL_RCC_AHB3_RELEASE_RESET


	)

2332 
	#__APB1_FORCE_RESET
 
__HAL_RCC_APB1_FORCE_RESET


	)

2333 
	#__APB1_RELEASE_RESET
 
__HAL_RCC_APB1_RELEASE_RESET


	)

2334 
	#__APB2_FORCE_RESET
 
__HAL_RCC_APB2_FORCE_RESET


	)

2335 
	#__APB2_RELEASE_RESET
 
__HAL_RCC_APB2_RELEASE_RESET


	)

2336 
	#__BKP_CLK_DISABLE
 
__HAL_RCC_BKP_CLK_DISABLE


	)

2337 
	#__BKP_CLK_ENABLE
 
__HAL_RCC_BKP_CLK_ENABLE


	)

2338 
	#__BKP_FORCE_RESET
 
__HAL_RCC_BKP_FORCE_RESET


	)

2339 
	#__BKP_RELEASE_RESET
 
__HAL_RCC_BKP_RELEASE_RESET


	)

2340 
	#__CAN1_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

2341 
	#__CAN1_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

2342 
	#__CAN1_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_DISABLE


	)

2343 
	#__CAN1_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_ENABLE


	)

2344 
	#__CAN1_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

2345 
	#__CAN1_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

2346 
	#__CAN_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

2347 
	#__CAN_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

2348 
	#__CAN_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

2349 
	#__CAN_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

2350 
	#__CAN2_CLK_DISABLE
 
__HAL_RCC_CAN2_CLK_DISABLE


	)

2351 
	#__CAN2_CLK_ENABLE
 
__HAL_RCC_CAN2_CLK_ENABLE


	)

2352 
	#__CAN2_FORCE_RESET
 
__HAL_RCC_CAN2_FORCE_RESET


	)

2353 
	#__CAN2_RELEASE_RESET
 
__HAL_RCC_CAN2_RELEASE_RESET


	)

2354 
	#__CEC_CLK_DISABLE
 
__HAL_RCC_CEC_CLK_DISABLE


	)

2355 
	#__CEC_CLK_ENABLE
 
__HAL_RCC_CEC_CLK_ENABLE


	)

2356 
	#__COMP_CLK_DISABLE
 
__HAL_RCC_COMP_CLK_DISABLE


	)

2357 
	#__COMP_CLK_ENABLE
 
__HAL_RCC_COMP_CLK_ENABLE


	)

2358 
	#__COMP_FORCE_RESET
 
__HAL_RCC_COMP_FORCE_RESET


	)

2359 
	#__COMP_RELEASE_RESET
 
__HAL_RCC_COMP_RELEASE_RESET


	)

2360 
	#__COMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_COMP_CLK_SLEEP_ENABLE


	)

2361 
	#__COMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_COMP_CLK_SLEEP_DISABLE


	)

2362 
	#__CEC_FORCE_RESET
 
__HAL_RCC_CEC_FORCE_RESET


	)

2363 
	#__CEC_RELEASE_RESET
 
__HAL_RCC_CEC_RELEASE_RESET


	)

2364 
	#__CRC_CLK_DISABLE
 
__HAL_RCC_CRC_CLK_DISABLE


	)

2365 
	#__CRC_CLK_ENABLE
 
__HAL_RCC_CRC_CLK_ENABLE


	)

2366 
	#__CRC_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRC_CLK_SLEEP_DISABLE


	)

2367 
	#__CRC_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRC_CLK_SLEEP_ENABLE


	)

2368 
	#__CRC_FORCE_RESET
 
__HAL_RCC_CRC_FORCE_RESET


	)

2369 
	#__CRC_RELEASE_RESET
 
__HAL_RCC_CRC_RELEASE_RESET


	)

2370 
	#__DAC_CLK_DISABLE
 
__HAL_RCC_DAC_CLK_DISABLE


	)

2371 
	#__DAC_CLK_ENABLE
 
__HAL_RCC_DAC_CLK_ENABLE


	)

2372 
	#__DAC_FORCE_RESET
 
__HAL_RCC_DAC_FORCE_RESET


	)

2373 
	#__DAC_RELEASE_RESET
 
__HAL_RCC_DAC_RELEASE_RESET


	)

2374 
	#__DAC1_CLK_DISABLE
 
__HAL_RCC_DAC1_CLK_DISABLE


	)

2375 
	#__DAC1_CLK_ENABLE
 
__HAL_RCC_DAC1_CLK_ENABLE


	)

2376 
	#__DAC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_DISABLE


	)

2377 
	#__DAC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_ENABLE


	)

2378 
	#__DAC1_FORCE_RESET
 
__HAL_RCC_DAC1_FORCE_RESET


	)

2379 
	#__DAC1_RELEASE_RESET
 
__HAL_RCC_DAC1_RELEASE_RESET


	)

2380 
	#__DBGMCU_CLK_ENABLE
 
__HAL_RCC_DBGMCU_CLK_ENABLE


	)

2381 
	#__DBGMCU_CLK_DISABLE
 
__HAL_RCC_DBGMCU_CLK_DISABLE


	)

2382 
	#__DBGMCU_FORCE_RESET
 
__HAL_RCC_DBGMCU_FORCE_RESET


	)

2383 
	#__DBGMCU_RELEASE_RESET
 
__HAL_RCC_DBGMCU_RELEASE_RESET


	)

2384 
	#__DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM_CLK_DISABLE


	)

2385 
	#__DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM_CLK_ENABLE


	)

2386 
	#__DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE


	)

2387 
	#__DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE


	)

2388 
	#__DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM_FORCE_RESET


	)

2389 
	#__DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM_RELEASE_RESET


	)

2390 
	#__DMA1_CLK_DISABLE
 
__HAL_RCC_DMA1_CLK_DISABLE


	)

2391 
	#__DMA1_CLK_ENABLE
 
__HAL_RCC_DMA1_CLK_ENABLE


	)

2392 
	#__DMA1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_DISABLE


	)

2393 
	#__DMA1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_ENABLE


	)

2394 
	#__DMA1_FORCE_RESET
 
__HAL_RCC_DMA1_FORCE_RESET


	)

2395 
	#__DMA1_RELEASE_RESET
 
__HAL_RCC_DMA1_RELEASE_RESET


	)

2396 
	#__DMA2_CLK_DISABLE
 
__HAL_RCC_DMA2_CLK_DISABLE


	)

2397 
	#__DMA2_CLK_ENABLE
 
__HAL_RCC_DMA2_CLK_ENABLE


	)

2398 
	#__DMA2_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_DISABLE


	)

2399 
	#__DMA2_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_ENABLE


	)

2400 
	#__DMA2_FORCE_RESET
 
__HAL_RCC_DMA2_FORCE_RESET


	)

2401 
	#__DMA2_RELEASE_RESET
 
__HAL_RCC_DMA2_RELEASE_RESET


	)

2402 
	#__ETHMAC_CLK_DISABLE
 
__HAL_RCC_ETHMAC_CLK_DISABLE


	)

2403 
	#__ETHMAC_CLK_ENABLE
 
__HAL_RCC_ETHMAC_CLK_ENABLE


	)

2404 
	#__ETHMAC_FORCE_RESET
 
__HAL_RCC_ETHMAC_FORCE_RESET


	)

2405 
	#__ETHMAC_RELEASE_RESET
 
__HAL_RCC_ETHMAC_RELEASE_RESET


	)

2406 
	#__ETHMACRX_CLK_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_DISABLE


	)

2407 
	#__ETHMACRX_CLK_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_ENABLE


	)

2408 
	#__ETHMACTX_CLK_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_DISABLE


	)

2409 
	#__ETHMACTX_CLK_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_ENABLE


	)

2410 
	#__FIREWALL_CLK_DISABLE
 
__HAL_RCC_FIREWALL_CLK_DISABLE


	)

2411 
	#__FIREWALL_CLK_ENABLE
 
__HAL_RCC_FIREWALL_CLK_ENABLE


	)

2412 
	#__FLASH_CLK_DISABLE
 
__HAL_RCC_FLASH_CLK_DISABLE


	)

2413 
	#__FLASH_CLK_ENABLE
 
__HAL_RCC_FLASH_CLK_ENABLE


	)

2414 
	#__FLASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_DISABLE


	)

2415 
	#__FLASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_ENABLE


	)

2416 
	#__FLASH_FORCE_RESET
 
__HAL_RCC_FLASH_FORCE_RESET


	)

2417 
	#__FLASH_RELEASE_RESET
 
__HAL_RCC_FLASH_RELEASE_RESET


	)

2418 
	#__FLITF_CLK_DISABLE
 
__HAL_RCC_FLITF_CLK_DISABLE


	)

2419 
	#__FLITF_CLK_ENABLE
 
__HAL_RCC_FLITF_CLK_ENABLE


	)

2420 
	#__FLITF_FORCE_RESET
 
__HAL_RCC_FLITF_FORCE_RESET


	)

2421 
	#__FLITF_RELEASE_RESET
 
__HAL_RCC_FLITF_RELEASE_RESET


	)

2422 
	#__FLITF_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_ENABLE


	)

2423 
	#__FLITF_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_DISABLE


	)

2424 
	#__FMC_CLK_DISABLE
 
__HAL_RCC_FMC_CLK_DISABLE


	)

2425 
	#__FMC_CLK_ENABLE
 
__HAL_RCC_FMC_CLK_ENABLE


	)

2426 
	#__FMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FMC_CLK_SLEEP_DISABLE


	)

2427 
	#__FMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FMC_CLK_SLEEP_ENABLE


	)

2428 
	#__FMC_FORCE_RESET
 
__HAL_RCC_FMC_FORCE_RESET


	)

2429 
	#__FMC_RELEASE_RESET
 
__HAL_RCC_FMC_RELEASE_RESET


	)

2430 
	#__FSMC_CLK_DISABLE
 
__HAL_RCC_FSMC_CLK_DISABLE


	)

2431 
	#__FSMC_CLK_ENABLE
 
__HAL_RCC_FSMC_CLK_ENABLE


	)

2432 
	#__GPIOA_CLK_DISABLE
 
__HAL_RCC_GPIOA_CLK_DISABLE


	)

2433 
	#__GPIOA_CLK_ENABLE
 
__HAL_RCC_GPIOA_CLK_ENABLE


	)

2434 
	#__GPIOA_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE


	)

2435 
	#__GPIOA_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE


	)

2436 
	#__GPIOA_FORCE_RESET
 
__HAL_RCC_GPIOA_FORCE_RESET


	)

2437 
	#__GPIOA_RELEASE_RESET
 
__HAL_RCC_GPIOA_RELEASE_RESET


	)

2438 
	#__GPIOB_CLK_DISABLE
 
__HAL_RCC_GPIOB_CLK_DISABLE


	)

2439 
	#__GPIOB_CLK_ENABLE
 
__HAL_RCC_GPIOB_CLK_ENABLE


	)

2440 
	#__GPIOB_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE


	)

2441 
	#__GPIOB_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE


	)

2442 
	#__GPIOB_FORCE_RESET
 
__HAL_RCC_GPIOB_FORCE_RESET


	)

2443 
	#__GPIOB_RELEASE_RESET
 
__HAL_RCC_GPIOB_RELEASE_RESET


	)

2444 
	#__GPIOC_CLK_DISABLE
 
__HAL_RCC_GPIOC_CLK_DISABLE


	)

2445 
	#__GPIOC_CLK_ENABLE
 
__HAL_RCC_GPIOC_CLK_ENABLE


	)

2446 
	#__GPIOC_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE


	)

2447 
	#__GPIOC_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE


	)

2448 
	#__GPIOC_FORCE_RESET
 
__HAL_RCC_GPIOC_FORCE_RESET


	)

2449 
	#__GPIOC_RELEASE_RESET
 
__HAL_RCC_GPIOC_RELEASE_RESET


	)

2450 
	#__GPIOD_CLK_DISABLE
 
__HAL_RCC_GPIOD_CLK_DISABLE


	)

2451 
	#__GPIOD_CLK_ENABLE
 
__HAL_RCC_GPIOD_CLK_ENABLE


	)

2452 
	#__GPIOD_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE


	)

2453 
	#__GPIOD_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE


	)

2454 
	#__GPIOD_FORCE_RESET
 
__HAL_RCC_GPIOD_FORCE_RESET


	)

2455 
	#__GPIOD_RELEASE_RESET
 
__HAL_RCC_GPIOD_RELEASE_RESET


	)

2456 
	#__GPIOE_CLK_DISABLE
 
__HAL_RCC_GPIOE_CLK_DISABLE


	)

2457 
	#__GPIOE_CLK_ENABLE
 
__HAL_RCC_GPIOE_CLK_ENABLE


	)

2458 
	#__GPIOE_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE


	)

2459 
	#__GPIOE_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE


	)

2460 
	#__GPIOE_FORCE_RESET
 
__HAL_RCC_GPIOE_FORCE_RESET


	)

2461 
	#__GPIOE_RELEASE_RESET
 
__HAL_RCC_GPIOE_RELEASE_RESET


	)

2462 
	#__GPIOF_CLK_DISABLE
 
__HAL_RCC_GPIOF_CLK_DISABLE


	)

2463 
	#__GPIOF_CLK_ENABLE
 
__HAL_RCC_GPIOF_CLK_ENABLE


	)

2464 
	#__GPIOF_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE


	)

2465 
	#__GPIOF_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE


	)

2466 
	#__GPIOF_FORCE_RESET
 
__HAL_RCC_GPIOF_FORCE_RESET


	)

2467 
	#__GPIOF_RELEASE_RESET
 
__HAL_RCC_GPIOF_RELEASE_RESET


	)

2468 
	#__GPIOG_CLK_DISABLE
 
__HAL_RCC_GPIOG_CLK_DISABLE


	)

2469 
	#__GPIOG_CLK_ENABLE
 
__HAL_RCC_GPIOG_CLK_ENABLE


	)

2470 
	#__GPIOG_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE


	)

2471 
	#__GPIOG_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE


	)

2472 
	#__GPIOG_FORCE_RESET
 
__HAL_RCC_GPIOG_FORCE_RESET


	)

2473 
	#__GPIOG_RELEASE_RESET
 
__HAL_RCC_GPIOG_RELEASE_RESET


	)

2474 
	#__GPIOH_CLK_DISABLE
 
__HAL_RCC_GPIOH_CLK_DISABLE


	)

2475 
	#__GPIOH_CLK_ENABLE
 
__HAL_RCC_GPIOH_CLK_ENABLE


	)

2476 
	#__GPIOH_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE


	)

2477 
	#__GPIOH_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE


	)

2478 
	#__GPIOH_FORCE_RESET
 
__HAL_RCC_GPIOH_FORCE_RESET


	)

2479 
	#__GPIOH_RELEASE_RESET
 
__HAL_RCC_GPIOH_RELEASE_RESET


	)

2480 
	#__I2C1_CLK_DISABLE
 
__HAL_RCC_I2C1_CLK_DISABLE


	)

2481 
	#__I2C1_CLK_ENABLE
 
__HAL_RCC_I2C1_CLK_ENABLE


	)

2482 
	#__I2C1_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_DISABLE


	)

2483 
	#__I2C1_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_ENABLE


	)

2484 
	#__I2C1_FORCE_RESET
 
__HAL_RCC_I2C1_FORCE_RESET


	)

2485 
	#__I2C1_RELEASE_RESET
 
__HAL_RCC_I2C1_RELEASE_RESET


	)

2486 
	#__I2C2_CLK_DISABLE
 
__HAL_RCC_I2C2_CLK_DISABLE


	)

2487 
	#__I2C2_CLK_ENABLE
 
__HAL_RCC_I2C2_CLK_ENABLE


	)

2488 
	#__I2C2_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_DISABLE


	)

2489 
	#__I2C2_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_ENABLE


	)

2490 
	#__I2C2_FORCE_RESET
 
__HAL_RCC_I2C2_FORCE_RESET


	)

2491 
	#__I2C2_RELEASE_RESET
 
__HAL_RCC_I2C2_RELEASE_RESET


	)

2492 
	#__I2C3_CLK_DISABLE
 
__HAL_RCC_I2C3_CLK_DISABLE


	)

2493 
	#__I2C3_CLK_ENABLE
 
__HAL_RCC_I2C3_CLK_ENABLE


	)

2494 
	#__I2C3_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_DISABLE


	)

2495 
	#__I2C3_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_ENABLE


	)

2496 
	#__I2C3_FORCE_RESET
 
__HAL_RCC_I2C3_FORCE_RESET


	)

2497 
	#__I2C3_RELEASE_RESET
 
__HAL_RCC_I2C3_RELEASE_RESET


	)

2498 
	#__LCD_CLK_DISABLE
 
__HAL_RCC_LCD_CLK_DISABLE


	)

2499 
	#__LCD_CLK_ENABLE
 
__HAL_RCC_LCD_CLK_ENABLE


	)

2500 
	#__LCD_CLK_SLEEP_DISABLE
 
__HAL_RCC_LCD_CLK_SLEEP_DISABLE


	)

2501 
	#__LCD_CLK_SLEEP_ENABLE
 
__HAL_RCC_LCD_CLK_SLEEP_ENABLE


	)

2502 
	#__LCD_FORCE_RESET
 
__HAL_RCC_LCD_FORCE_RESET


	)

2503 
	#__LCD_RELEASE_RESET
 
__HAL_RCC_LCD_RELEASE_RESET


	)

2504 
	#__LPTIM1_CLK_DISABLE
 
__HAL_RCC_LPTIM1_CLK_DISABLE


	)

2505 
	#__LPTIM1_CLK_ENABLE
 
__HAL_RCC_LPTIM1_CLK_ENABLE


	)

2506 
	#__LPTIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE


	)

2507 
	#__LPTIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE


	)

2508 
	#__LPTIM1_FORCE_RESET
 
__HAL_RCC_LPTIM1_FORCE_RESET


	)

2509 
	#__LPTIM1_RELEASE_RESET
 
__HAL_RCC_LPTIM1_RELEASE_RESET


	)

2510 
	#__LPTIM2_CLK_DISABLE
 
__HAL_RCC_LPTIM2_CLK_DISABLE


	)

2511 
	#__LPTIM2_CLK_ENABLE
 
__HAL_RCC_LPTIM2_CLK_ENABLE


	)

2512 
	#__LPTIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE


	)

2513 
	#__LPTIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE


	)

2514 
	#__LPTIM2_FORCE_RESET
 
__HAL_RCC_LPTIM2_FORCE_RESET


	)

2515 
	#__LPTIM2_RELEASE_RESET
 
__HAL_RCC_LPTIM2_RELEASE_RESET


	)

2516 
	#__LPUART1_CLK_DISABLE
 
__HAL_RCC_LPUART1_CLK_DISABLE


	)

2517 
	#__LPUART1_CLK_ENABLE
 
__HAL_RCC_LPUART1_CLK_ENABLE


	)

2518 
	#__LPUART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE


	)

2519 
	#__LPUART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE


	)

2520 
	#__LPUART1_FORCE_RESET
 
__HAL_RCC_LPUART1_FORCE_RESET


	)

2521 
	#__LPUART1_RELEASE_RESET
 
__HAL_RCC_LPUART1_RELEASE_RESET


	)

2522 
	#__OPAMP_CLK_DISABLE
 
__HAL_RCC_OPAMP_CLK_DISABLE


	)

2523 
	#__OPAMP_CLK_ENABLE
 
__HAL_RCC_OPAMP_CLK_ENABLE


	)

2524 
	#__OPAMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE


	)

2525 
	#__OPAMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE


	)

2526 
	#__OPAMP_FORCE_RESET
 
__HAL_RCC_OPAMP_FORCE_RESET


	)

2527 
	#__OPAMP_RELEASE_RESET
 
__HAL_RCC_OPAMP_RELEASE_RESET


	)

2528 
	#__OTGFS_CLK_DISABLE
 
__HAL_RCC_OTGFS_CLK_DISABLE


	)

2529 
	#__OTGFS_CLK_ENABLE
 
__HAL_RCC_OTGFS_CLK_ENABLE


	)

2530 
	#__OTGFS_CLK_SLEEP_DISABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE


	)

2531 
	#__OTGFS_CLK_SLEEP_ENABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE


	)

2532 
	#__OTGFS_FORCE_RESET
 
__HAL_RCC_OTGFS_FORCE_RESET


	)

2533 
	#__OTGFS_RELEASE_RESET
 
__HAL_RCC_OTGFS_RELEASE_RESET


	)

2534 
	#__PWR_CLK_DISABLE
 
__HAL_RCC_PWR_CLK_DISABLE


	)

2535 
	#__PWR_CLK_ENABLE
 
__HAL_RCC_PWR_CLK_ENABLE


	)

2536 
	#__PWR_CLK_SLEEP_DISABLE
 
__HAL_RCC_PWR_CLK_SLEEP_DISABLE


	)

2537 
	#__PWR_CLK_SLEEP_ENABLE
 
__HAL_RCC_PWR_CLK_SLEEP_ENABLE


	)

2538 
	#__PWR_FORCE_RESET
 
__HAL_RCC_PWR_FORCE_RESET


	)

2539 
	#__PWR_RELEASE_RESET
 
__HAL_RCC_PWR_RELEASE_RESET


	)

2540 
	#__QSPI_CLK_DISABLE
 
__HAL_RCC_QSPI_CLK_DISABLE


	)

2541 
	#__QSPI_CLK_ENABLE
 
__HAL_RCC_QSPI_CLK_ENABLE


	)

2542 
	#__QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_DISABLE


	)

2543 
	#__QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_ENABLE


	)

2544 
	#__QSPI_FORCE_RESET
 
__HAL_RCC_QSPI_FORCE_RESET


	)

2545 
	#__QSPI_RELEASE_RESET
 
__HAL_RCC_QSPI_RELEASE_RESET


	)

2547 #i‚Ä°
def√∂ed
(
STM32WB
)

2548 
	#__HAL_RCC_QSPI_CLK_DISABLE
 
__HAL_RCC_QUADSPI_CLK_DISABLE


	)

2549 
	#__HAL_RCC_QSPI_CLK_ENABLE
 
__HAL_RCC_QUADSPI_CLK_ENABLE


	)

2550 
	#__HAL_RCC_QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QUADSPI_CLK_SLEEP_DISABLE


	)

2551 
	#__HAL_RCC_QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QUADSPI_CLK_SLEEP_ENABLE


	)

2552 
	#__HAL_RCC_QSPI_FORCE_RESET
 
__HAL_RCC_QUADSPI_FORCE_RESET


	)

2553 
	#__HAL_RCC_QSPI_RELEASE_RESET
 
__HAL_RCC_QUADSPI_RELEASE_RESET


	)

2554 
	#__HAL_RCC_QSPI_IS_CLK_ENABLED
 
__HAL_RCC_QUADSPI_IS_CLK_ENABLED


	)

2555 
	#__HAL_RCC_QSPI_IS_CLK_DISABLED
 
__HAL_RCC_QUADSPI_IS_CLK_DISABLED


	)

2556 
	#__HAL_RCC_QSPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_QUADSPI_IS_CLK_SLEEP_ENABLED


	)

2557 
	#__HAL_RCC_QSPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_QUADSPI_IS_CLK_SLEEP_DISABLED


	)

2558 
	#QSPI_IRQH‚Ñ¢d√Är
 
QUADSPI_IRQH‚Ñ¢d√Är


	)

2561 
	#__RNG_CLK_DISABLE
 
__HAL_RCC_RNG_CLK_DISABLE


	)

2562 
	#__RNG_CLK_ENABLE
 
__HAL_RCC_RNG_CLK_ENABLE


	)

2563 
	#__RNG_CLK_SLEEP_DISABLE
 
__HAL_RCC_RNG_CLK_SLEEP_DISABLE


	)

2564 
	#__RNG_CLK_SLEEP_ENABLE
 
__HAL_RCC_RNG_CLK_SLEEP_ENABLE


	)

2565 
	#__RNG_FORCE_RESET
 
__HAL_RCC_RNG_FORCE_RESET


	)

2566 
	#__RNG_RELEASE_RESET
 
__HAL_RCC_RNG_RELEASE_RESET


	)

2567 
	#__SAI1_CLK_DISABLE
 
__HAL_RCC_SAI1_CLK_DISABLE


	)

2568 
	#__SAI1_CLK_ENABLE
 
__HAL_RCC_SAI1_CLK_ENABLE


	)

2569 
	#__SAI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_DISABLE


	)

2570 
	#__SAI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_ENABLE


	)

2571 
	#__SAI1_FORCE_RESET
 
__HAL_RCC_SAI1_FORCE_RESET


	)

2572 
	#__SAI1_RELEASE_RESET
 
__HAL_RCC_SAI1_RELEASE_RESET


	)

2573 
	#__SAI2_CLK_DISABLE
 
__HAL_RCC_SAI2_CLK_DISABLE


	)

2574 
	#__SAI2_CLK_ENABLE
 
__HAL_RCC_SAI2_CLK_ENABLE


	)

2575 
	#__SAI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_DISABLE


	)

2576 
	#__SAI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_ENABLE


	)

2577 
	#__SAI2_FORCE_RESET
 
__HAL_RCC_SAI2_FORCE_RESET


	)

2578 
	#__SAI2_RELEASE_RESET
 
__HAL_RCC_SAI2_RELEASE_RESET


	)

2579 
	#__SDIO_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

2580 
	#__SDIO_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2581 
	#__SDMMC_CLK_DISABLE
 
__HAL_RCC_SDMMC_CLK_DISABLE


	)

2582 
	#__SDMMC_CLK_ENABLE
 
__HAL_RCC_SDMMC_CLK_ENABLE


	)

2583 
	#__SDMMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE


	)

2584 
	#__SDMMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE


	)

2585 
	#__SDMMC_FORCE_RESET
 
__HAL_RCC_SDMMC_FORCE_RESET


	)

2586 
	#__SDMMC_RELEASE_RESET
 
__HAL_RCC_SDMMC_RELEASE_RESET


	)

2587 
	#__SPI1_CLK_DISABLE
 
__HAL_RCC_SPI1_CLK_DISABLE


	)

2588 
	#__SPI1_CLK_ENABLE
 
__HAL_RCC_SPI1_CLK_ENABLE


	)

2589 
	#__SPI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_DISABLE


	)

2590 
	#__SPI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_ENABLE


	)

2591 
	#__SPI1_FORCE_RESET
 
__HAL_RCC_SPI1_FORCE_RESET


	)

2592 
	#__SPI1_RELEASE_RESET
 
__HAL_RCC_SPI1_RELEASE_RESET


	)

2593 
	#__SPI2_CLK_DISABLE
 
__HAL_RCC_SPI2_CLK_DISABLE


	)

2594 
	#__SPI2_CLK_ENABLE
 
__HAL_RCC_SPI2_CLK_ENABLE


	)

2595 
	#__SPI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_DISABLE


	)

2596 
	#__SPI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_ENABLE


	)

2597 
	#__SPI2_FORCE_RESET
 
__HAL_RCC_SPI2_FORCE_RESET


	)

2598 
	#__SPI2_RELEASE_RESET
 
__HAL_RCC_SPI2_RELEASE_RESET


	)

2599 
	#__SPI3_CLK_DISABLE
 
__HAL_RCC_SPI3_CLK_DISABLE


	)

2600 
	#__SPI3_CLK_ENABLE
 
__HAL_RCC_SPI3_CLK_ENABLE


	)

2601 
	#__SPI3_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_DISABLE


	)

2602 
	#__SPI3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_ENABLE


	)

2603 
	#__SPI3_FORCE_RESET
 
__HAL_RCC_SPI3_FORCE_RESET


	)

2604 
	#__SPI3_RELEASE_RESET
 
__HAL_RCC_SPI3_RELEASE_RESET


	)

2605 
	#__SRAM_CLK_DISABLE
 
__HAL_RCC_SRAM_CLK_DISABLE


	)

2606 
	#__SRAM_CLK_ENABLE
 
__HAL_RCC_SRAM_CLK_ENABLE


	)

2607 
	#__SRAM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE


	)

2608 
	#__SRAM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE


	)

2609 
	#__SRAM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE


	)

2610 
	#__SRAM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE


	)

2611 
	#__SWPMI1_CLK_DISABLE
 
__HAL_RCC_SWPMI1_CLK_DISABLE


	)

2612 
	#__SWPMI1_CLK_ENABLE
 
__HAL_RCC_SWPMI1_CLK_ENABLE


	)

2613 
	#__SWPMI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE


	)

2614 
	#__SWPMI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE


	)

2615 
	#__SWPMI1_FORCE_RESET
 
__HAL_RCC_SWPMI1_FORCE_RESET


	)

2616 
	#__SWPMI1_RELEASE_RESET
 
__HAL_RCC_SWPMI1_RELEASE_RESET


	)

2617 
	#__SYSCFG_CLK_DISABLE
 
__HAL_RCC_SYSCFG_CLK_DISABLE


	)

2618 
	#__SYSCFG_CLK_ENABLE
 
__HAL_RCC_SYSCFG_CLK_ENABLE


	)

2619 
	#__SYSCFG_CLK_SLEEP_DISABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE


	)

2620 
	#__SYSCFG_CLK_SLEEP_ENABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE


	)

2621 
	#__SYSCFG_FORCE_RESET
 
__HAL_RCC_SYSCFG_FORCE_RESET


	)

2622 
	#__SYSCFG_RELEASE_RESET
 
__HAL_RCC_SYSCFG_RELEASE_RESET


	)

2623 
	#__TIM1_CLK_DISABLE
 
__HAL_RCC_TIM1_CLK_DISABLE


	)

2624 
	#__TIM1_CLK_ENABLE
 
__HAL_RCC_TIM1_CLK_ENABLE


	)

2625 
	#__TIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_DISABLE


	)

2626 
	#__TIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_ENABLE


	)

2627 
	#__TIM1_FORCE_RESET
 
__HAL_RCC_TIM1_FORCE_RESET


	)

2628 
	#__TIM1_RELEASE_RESET
 
__HAL_RCC_TIM1_RELEASE_RESET


	)

2629 
	#__TIM10_CLK_DISABLE
 
__HAL_RCC_TIM10_CLK_DISABLE


	)

2630 
	#__TIM10_CLK_ENABLE
 
__HAL_RCC_TIM10_CLK_ENABLE


	)

2631 
	#__TIM10_FORCE_RESET
 
__HAL_RCC_TIM10_FORCE_RESET


	)

2632 
	#__TIM10_RELEASE_RESET
 
__HAL_RCC_TIM10_RELEASE_RESET


	)

2633 
	#__TIM11_CLK_DISABLE
 
__HAL_RCC_TIM11_CLK_DISABLE


	)

2634 
	#__TIM11_CLK_ENABLE
 
__HAL_RCC_TIM11_CLK_ENABLE


	)

2635 
	#__TIM11_FORCE_RESET
 
__HAL_RCC_TIM11_FORCE_RESET


	)

2636 
	#__TIM11_RELEASE_RESET
 
__HAL_RCC_TIM11_RELEASE_RESET


	)

2637 
	#__TIM12_CLK_DISABLE
 
__HAL_RCC_TIM12_CLK_DISABLE


	)

2638 
	#__TIM12_CLK_ENABLE
 
__HAL_RCC_TIM12_CLK_ENABLE


	)

2639 
	#__TIM12_FORCE_RESET
 
__HAL_RCC_TIM12_FORCE_RESET


	)

2640 
	#__TIM12_RELEASE_RESET
 
__HAL_RCC_TIM12_RELEASE_RESET


	)

2641 
	#__TIM13_CLK_DISABLE
 
__HAL_RCC_TIM13_CLK_DISABLE


	)

2642 
	#__TIM13_CLK_ENABLE
 
__HAL_RCC_TIM13_CLK_ENABLE


	)

2643 
	#__TIM13_FORCE_RESET
 
__HAL_RCC_TIM13_FORCE_RESET


	)

2644 
	#__TIM13_RELEASE_RESET
 
__HAL_RCC_TIM13_RELEASE_RESET


	)

2645 
	#__TIM14_CLK_DISABLE
 
__HAL_RCC_TIM14_CLK_DISABLE


	)

2646 
	#__TIM14_CLK_ENABLE
 
__HAL_RCC_TIM14_CLK_ENABLE


	)

2647 
	#__TIM14_FORCE_RESET
 
__HAL_RCC_TIM14_FORCE_RESET


	)

2648 
	#__TIM14_RELEASE_RESET
 
__HAL_RCC_TIM14_RELEASE_RESET


	)

2649 
	#__TIM15_CLK_DISABLE
 
__HAL_RCC_TIM15_CLK_DISABLE


	)

2650 
	#__TIM15_CLK_ENABLE
 
__HAL_RCC_TIM15_CLK_ENABLE


	)

2651 
	#__TIM15_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_DISABLE


	)

2652 
	#__TIM15_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_ENABLE


	)

2653 
	#__TIM15_FORCE_RESET
 
__HAL_RCC_TIM15_FORCE_RESET


	)

2654 
	#__TIM15_RELEASE_RESET
 
__HAL_RCC_TIM15_RELEASE_RESET


	)

2655 
	#__TIM16_CLK_DISABLE
 
__HAL_RCC_TIM16_CLK_DISABLE


	)

2656 
	#__TIM16_CLK_ENABLE
 
__HAL_RCC_TIM16_CLK_ENABLE


	)

2657 
	#__TIM16_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_DISABLE


	)

2658 
	#__TIM16_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_ENABLE


	)

2659 
	#__TIM16_FORCE_RESET
 
__HAL_RCC_TIM16_FORCE_RESET


	)

2660 
	#__TIM16_RELEASE_RESET
 
__HAL_RCC_TIM16_RELEASE_RESET


	)

2661 
	#__TIM17_CLK_DISABLE
 
__HAL_RCC_TIM17_CLK_DISABLE


	)

2662 
	#__TIM17_CLK_ENABLE
 
__HAL_RCC_TIM17_CLK_ENABLE


	)

2663 
	#__TIM17_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_DISABLE


	)

2664 
	#__TIM17_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_ENABLE


	)

2665 
	#__TIM17_FORCE_RESET
 
__HAL_RCC_TIM17_FORCE_RESET


	)

2666 
	#__TIM17_RELEASE_RESET
 
__HAL_RCC_TIM17_RELEASE_RESET


	)

2667 
	#__TIM2_CLK_DISABLE
 
__HAL_RCC_TIM2_CLK_DISABLE


	)

2668 
	#__TIM2_CLK_ENABLE
 
__HAL_RCC_TIM2_CLK_ENABLE


	)

2669 
	#__TIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_DISABLE


	)

2670 
	#__TIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_ENABLE


	)

2671 
	#__TIM2_FORCE_RESET
 
__HAL_RCC_TIM2_FORCE_RESET


	)

2672 
	#__TIM2_RELEASE_RESET
 
__HAL_RCC_TIM2_RELEASE_RESET


	)

2673 
	#__TIM3_CLK_DISABLE
 
__HAL_RCC_TIM3_CLK_DISABLE


	)

2674 
	#__TIM3_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

2675 
	#__TIM3_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_DISABLE


	)

2676 
	#__TIM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_ENABLE


	)

2677 
	#__TIM3_FORCE_RESET
 
__HAL_RCC_TIM3_FORCE_RESET


	)

2678 
	#__TIM3_RELEASE_RESET
 
__HAL_RCC_TIM3_RELEASE_RESET


	)

2679 
	#__TIM4_CLK_DISABLE
 
__HAL_RCC_TIM4_CLK_DISABLE


	)

2680 
	#__TIM4_CLK_ENABLE
 
__HAL_RCC_TIM4_CLK_ENABLE


	)

2681 
	#__TIM4_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_DISABLE


	)

2682 
	#__TIM4_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_ENABLE


	)

2683 
	#__TIM4_FORCE_RESET
 
__HAL_RCC_TIM4_FORCE_RESET


	)

2684 
	#__TIM4_RELEASE_RESET
 
__HAL_RCC_TIM4_RELEASE_RESET


	)

2685 
	#__TIM5_CLK_DISABLE
 
__HAL_RCC_TIM5_CLK_DISABLE


	)

2686 
	#__TIM5_CLK_ENABLE
 
__HAL_RCC_TIM5_CLK_ENABLE


	)

2687 
	#__TIM5_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_DISABLE


	)

2688 
	#__TIM5_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_ENABLE


	)

2689 
	#__TIM5_FORCE_RESET
 
__HAL_RCC_TIM5_FORCE_RESET


	)

2690 
	#__TIM5_RELEASE_RESET
 
__HAL_RCC_TIM5_RELEASE_RESET


	)

2691 
	#__TIM6_CLK_DISABLE
 
__HAL_RCC_TIM6_CLK_DISABLE


	)

2692 
	#__TIM6_CLK_ENABLE
 
__HAL_RCC_TIM6_CLK_ENABLE


	)

2693 
	#__TIM6_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_DISABLE


	)

2694 
	#__TIM6_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_ENABLE


	)

2695 
	#__TIM6_FORCE_RESET
 
__HAL_RCC_TIM6_FORCE_RESET


	)

2696 
	#__TIM6_RELEASE_RESET
 
__HAL_RCC_TIM6_RELEASE_RESET


	)

2697 
	#__TIM7_CLK_DISABLE
 
__HAL_RCC_TIM7_CLK_DISABLE


	)

2698 
	#__TIM7_CLK_ENABLE
 
__HAL_RCC_TIM7_CLK_ENABLE


	)

2699 
	#__TIM7_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_DISABLE


	)

2700 
	#__TIM7_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_ENABLE


	)

2701 
	#__TIM7_FORCE_RESET
 
__HAL_RCC_TIM7_FORCE_RESET


	)

2702 
	#__TIM7_RELEASE_RESET
 
__HAL_RCC_TIM7_RELEASE_RESET


	)

2703 
	#__TIM8_CLK_DISABLE
 
__HAL_RCC_TIM8_CLK_DISABLE


	)

2704 
	#__TIM8_CLK_ENABLE
 
__HAL_RCC_TIM8_CLK_ENABLE


	)

2705 
	#__TIM8_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_DISABLE


	)

2706 
	#__TIM8_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_ENABLE


	)

2707 
	#__TIM8_FORCE_RESET
 
__HAL_RCC_TIM8_FORCE_RESET


	)

2708 
	#__TIM8_RELEASE_RESET
 
__HAL_RCC_TIM8_RELEASE_RESET


	)

2709 
	#__TIM9_CLK_DISABLE
 
__HAL_RCC_TIM9_CLK_DISABLE


	)

2710 
	#__TIM9_CLK_ENABLE
 
__HAL_RCC_TIM9_CLK_ENABLE


	)

2711 
	#__TIM9_FORCE_RESET
 
__HAL_RCC_TIM9_FORCE_RESET


	)

2712 
	#__TIM9_RELEASE_RESET
 
__HAL_RCC_TIM9_RELEASE_RESET


	)

2713 
	#__TSC_CLK_DISABLE
 
__HAL_RCC_TSC_CLK_DISABLE


	)

2714 
	#__TSC_CLK_ENABLE
 
__HAL_RCC_TSC_CLK_ENABLE


	)

2715 
	#__TSC_CLK_SLEEP_DISABLE
 
__HAL_RCC_TSC_CLK_SLEEP_DISABLE


	)

2716 
	#__TSC_CLK_SLEEP_ENABLE
 
__HAL_RCC_TSC_CLK_SLEEP_ENABLE


	)

2717 
	#__TSC_FORCE_RESET
 
__HAL_RCC_TSC_FORCE_RESET


	)

2718 
	#__TSC_RELEASE_RESET
 
__HAL_RCC_TSC_RELEASE_RESET


	)

2719 
	#__UART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2720 
	#__UART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2721 
	#__UART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2722 
	#__UART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2723 
	#__UART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2724 
	#__UART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2725 
	#__UART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2726 
	#__UART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2727 
	#__UART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2728 
	#__UART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2729 
	#__UART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2730 
	#__UART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2731 
	#__USART1_CLK_DISABLE
 
__HAL_RCC_USART1_CLK_DISABLE


	)

2732 
	#__USART1_CLK_ENABLE
 
__HAL_RCC_USART1_CLK_ENABLE


	)

2733 
	#__USART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART1_CLK_SLEEP_DISABLE


	)

2734 
	#__USART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART1_CLK_SLEEP_ENABLE


	)

2735 
	#__USART1_FORCE_RESET
 
__HAL_RCC_USART1_FORCE_RESET


	)

2736 
	#__USART1_RELEASE_RESET
 
__HAL_RCC_USART1_RELEASE_RESET


	)

2737 
	#__USART2_CLK_DISABLE
 
__HAL_RCC_USART2_CLK_DISABLE


	)

2738 
	#__USART2_CLK_ENABLE
 
__HAL_RCC_USART2_CLK_ENABLE


	)

2739 
	#__USART2_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART2_CLK_SLEEP_DISABLE


	)

2740 
	#__USART2_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART2_CLK_SLEEP_ENABLE


	)

2741 
	#__USART2_FORCE_RESET
 
__HAL_RCC_USART2_FORCE_RESET


	)

2742 
	#__USART2_RELEASE_RESET
 
__HAL_RCC_USART2_RELEASE_RESET


	)

2743 
	#__USART3_CLK_DISABLE
 
__HAL_RCC_USART3_CLK_DISABLE


	)

2744 
	#__USART3_CLK_ENABLE
 
__HAL_RCC_USART3_CLK_ENABLE


	)

2745 
	#__USART3_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART3_CLK_SLEEP_DISABLE


	)

2746 
	#__USART3_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART3_CLK_SLEEP_ENABLE


	)

2747 
	#__USART3_FORCE_RESET
 
__HAL_RCC_USART3_FORCE_RESET


	)

2748 
	#__USART3_RELEASE_RESET
 
__HAL_RCC_USART3_RELEASE_RESET


	)

2749 
	#__USART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2750 
	#__USART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2751 
	#__USART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2752 
	#__USART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2753 
	#__USART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2754 
	#__USART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2755 
	#__USART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2756 
	#__USART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2757 
	#__USART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2758 
	#__USART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2759 
	#__USART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2760 
	#__USART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2761 
	#__USART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2762 
	#__USART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2763 
	#__USART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2764 
	#__USART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2765 
	#__USART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2766 
	#__USART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2767 
	#__USART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2768 
	#__USART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2769 
	#__USB_CLK_DISABLE
 
__HAL_RCC_USB_CLK_DISABLE


	)

2770 
	#__USB_CLK_ENABLE
 
__HAL_RCC_USB_CLK_ENABLE


	)

2771 
	#__USB_FORCE_RESET
 
__HAL_RCC_USB_FORCE_RESET


	)

2772 
	#__USB_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_CLK_SLEEP_ENABLE


	)

2773 
	#__USB_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_CLK_SLEEP_DISABLE


	)

2774 
	#__USB_OTG_FS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_DISABLE


	)

2775 
	#__USB_OTG_FS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_ENABLE


	)

2776 
	#__USB_RELEASE_RESET
 
__HAL_RCC_USB_RELEASE_RESET


	)

2778 #i‚Ä°
def√∂ed
(
STM32H7
)

2779 
	#__HAL_RCC_WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG1_CLK_DISABLE


	)

2780 
	#__HAL_RCC_WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG1_CLK_ENABLE


	)

2781 
	#__HAL_RCC_WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG1_CLK_SLEEP_DISABLE


	)

2782 
	#__HAL_RCC_WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG1_CLK_SLEEP_ENABLE


	)

2784 
	#__HAL_RCC_WWDG_FORCE_RESET
 (()0U√ã

	)

2785 
	#__HAL_RCC_WWDG_RELEASE_RESET
 (()0U√ã

	)

2788 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG1_IS_CLK_ENABLED


	)

2789 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG1_IS_CLK_DISABLED


	)

2792 
	#__WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG_CLK_DISABLE


	)

2793 
	#__WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG_CLK_ENABLE


	)

2794 
	#__WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_DISABLE


	)

2795 
	#__WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_ENABLE


	)

2796 
	#__WWDG_FORCE_RESET
 
__HAL_RCC_WWDG_FORCE_RESET


	)

2797 
	#__WWDG_RELEASE_RESET
 
__HAL_RCC_WWDG_RELEASE_RESET


	)

2799 
	#__TIM21_CLK_ENABLE
 
__HAL_RCC_TIM21_CLK_ENABLE


	)

2800 
	#__TIM21_CLK_DISABLE
 
__HAL_RCC_TIM21_CLK_DISABLE


	)

2801 
	#__TIM21_FORCE_RESET
 
__HAL_RCC_TIM21_FORCE_RESET


	)

2802 
	#__TIM21_RELEASE_RESET
 
__HAL_RCC_TIM21_RELEASE_RESET


	)

2803 
	#__TIM21_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_ENABLE


	)

2804 
	#__TIM21_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_DISABLE


	)

2805 
	#__TIM22_CLK_ENABLE
 
__HAL_RCC_TIM22_CLK_ENABLE


	)

2806 
	#__TIM22_CLK_DISABLE
 
__HAL_RCC_TIM22_CLK_DISABLE


	)

2807 
	#__TIM22_FORCE_RESET
 
__HAL_RCC_TIM22_FORCE_RESET


	)

2808 
	#__TIM22_RELEASE_RESET
 
__HAL_RCC_TIM22_RELEASE_RESET


	)

2809 
	#__TIM22_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_ENABLE


	)

2810 
	#__TIM22_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_DISABLE


	)

2811 
	#__CRS_CLK_DISABLE
 
__HAL_RCC_CRS_CLK_DISABLE


	)

2812 
	#__CRS_CLK_ENABLE
 
__HAL_RCC_CRS_CLK_ENABLE


	)

2813 
	#__CRS_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRS_CLK_SLEEP_DISABLE


	)

2814 
	#__CRS_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRS_CLK_SLEEP_ENABLE


	)

2815 
	#__CRS_FORCE_RESET
 
__HAL_RCC_CRS_FORCE_RESET


	)

2816 
	#__CRS_RELEASE_RESET
 
__HAL_RCC_CRS_RELEASE_RESET


	)

2817 
	#__RCC_BACKUPRESET_FORCE
 
__HAL_RCC_BACKUPRESET_FORCE


	)

2818 
	#__RCC_BACKUPRESET_RELEASE
 
__HAL_RCC_BACKUPRESET_RELEASE


	)

2820 
	#__USB_OTG_FS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2821 
	#__USB_OTG_FS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2822 
	#__USB_OTG_FS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE


	)

2823 
	#__USB_OTG_FS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE


	)

2824 
	#__USB_OTG_HS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_DISABLE


	)

2825 
	#__USB_OTG_HS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_ENABLE


	)

2826 
	#__USB_OTG_HS_ULPI_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE


	)

2827 
	#__USB_OTG_HS_ULPI_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE


	)

2828 
	#__TIM9_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_ENABLE


	)

2829 
	#__TIM9_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_DISABLE


	)

2830 
	#__TIM10_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_ENABLE


	)

2831 
	#__TIM10_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_DISABLE


	)

2832 
	#__TIM11_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_ENABLE


	)

2833 
	#__TIM11_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_DISABLE


	)

2834 
	#__ETHMACPTP_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE


	)

2835 
	#__ETHMACPTP_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE


	)

2836 
	#__ETHMACPTP_CLK_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_ENABLE


	)

2837 
	#__ETHMACPTP_CLK_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_DISABLE


	)

2838 
	#__HASH_CLK_ENABLE
 
__HAL_RCC_HASH_CLK_ENABLE


	)

2839 
	#__HASH_FORCE_RESET
 
__HAL_RCC_HASH_FORCE_RESET


	)

2840 
	#__HASH_RELEASE_RESET
 
__HAL_RCC_HASH_RELEASE_RESET


	)

2841 
	#__HASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_HASH_CLK_SLEEP_ENABLE


	)

2842 
	#__HASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_HASH_CLK_SLEEP_DISABLE


	)

2843 
	#__HASH_CLK_DISABLE
 
__HAL_RCC_HASH_CLK_DISABLE


	)

2844 
	#__SPI5_CLK_ENABLE
 
__HAL_RCC_SPI5_CLK_ENABLE


	)

2845 
	#__SPI5_CLK_DISABLE
 
__HAL_RCC_SPI5_CLK_DISABLE


	)

2846 
	#__SPI5_FORCE_RESET
 
__HAL_RCC_SPI5_FORCE_RESET


	)

2847 
	#__SPI5_RELEASE_RESET
 
__HAL_RCC_SPI5_RELEASE_RESET


	)

2848 
	#__SPI5_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_ENABLE


	)

2849 
	#__SPI5_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_DISABLE


	)

2850 
	#__SPI6_CLK_ENABLE
 
__HAL_RCC_SPI6_CLK_ENABLE


	)

2851 
	#__SPI6_CLK_DISABLE
 
__HAL_RCC_SPI6_CLK_DISABLE


	)

2852 
	#__SPI6_FORCE_RESET
 
__HAL_RCC_SPI6_FORCE_RESET


	)

2853 
	#__SPI6_RELEASE_RESET
 
__HAL_RCC_SPI6_RELEASE_RESET


	)

2854 
	#__SPI6_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_ENABLE


	)

2855 
	#__SPI6_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_DISABLE


	)

2856 
	#__LTDC_CLK_ENABLE
 
__HAL_RCC_LTDC_CLK_ENABLE


	)

2857 
	#__LTDC_CLK_DISABLE
 
__HAL_RCC_LTDC_CLK_DISABLE


	)

2858 
	#__LTDC_FORCE_RESET
 
__HAL_RCC_LTDC_FORCE_RESET


	)

2859 
	#__LTDC_RELEASE_RESET
 
__HAL_RCC_LTDC_RELEASE_RESET


	)

2860 
	#__LTDC_CLK_SLEEP_ENABLE
 
__HAL_RCC_LTDC_CLK_SLEEP_ENABLE


	)

2861 
	#__ETHMAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE


	)

2862 
	#__ETHMAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE


	)

2863 
	#__ETHMACTX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE


	)

2864 
	#__ETHMACTX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE


	)

2865 
	#__ETHMACRX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE


	)

2866 
	#__ETHMACRX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE


	)

2867 
	#__TIM12_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_ENABLE


	)

2868 
	#__TIM12_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_DISABLE


	)

2869 
	#__TIM13_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_ENABLE


	)

2870 
	#__TIM13_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_DISABLE


	)

2871 
	#__TIM14_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_ENABLE


	)

2872 
	#__TIM14_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_DISABLE


	)

2873 
	#__BKPSRAM_CLK_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_ENABLE


	)

2874 
	#__BKPSRAM_CLK_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_DISABLE


	)

2875 
	#__BKPSRAM_CLK_SLEEP_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE


	)

2876 
	#__BKPSRAM_CLK_SLEEP_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE


	)

2877 
	#__CCMDATARAMEN_CLK_ENABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_ENABLE


	)

2878 
	#__CCMDATARAMEN_CLK_DISABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_DISABLE


	)

2879 
	#__USART6_CLK_ENABLE
 
__HAL_RCC_USART6_CLK_ENABLE


	)

2880 
	#__USART6_CLK_DISABLE
 
__HAL_RCC_USART6_CLK_DISABLE


	)

2881 
	#__USART6_FORCE_RESET
 
__HAL_RCC_USART6_FORCE_RESET


	)

2882 
	#__USART6_RELEASE_RESET
 
__HAL_RCC_USART6_RELEASE_RESET


	)

2883 
	#__USART6_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART6_CLK_SLEEP_ENABLE


	)

2884 
	#__USART6_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART6_CLK_SLEEP_DISABLE


	)

2885 
	#__SPI4_CLK_ENABLE
 
__HAL_RCC_SPI4_CLK_ENABLE


	)

2886 
	#__SPI4_CLK_DISABLE
 
__HAL_RCC_SPI4_CLK_DISABLE


	)

2887 
	#__SPI4_FORCE_RESET
 
__HAL_RCC_SPI4_FORCE_RESET


	)

2888 
	#__SPI4_RELEASE_RESET
 
__HAL_RCC_SPI4_RELEASE_RESET


	)

2889 
	#__SPI4_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_ENABLE


	)

2890 
	#__SPI4_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_DISABLE


	)

2891 
	#__GPIOI_CLK_ENABLE
 
__HAL_RCC_GPIOI_CLK_ENABLE


	)

2892 
	#__GPIOI_CLK_DISABLE
 
__HAL_RCC_GPIOI_CLK_DISABLE


	)

2893 
	#__GPIOI_FORCE_RESET
 
__HAL_RCC_GPIOI_FORCE_RESET


	)

2894 
	#__GPIOI_RELEASE_RESET
 
__HAL_RCC_GPIOI_RELEASE_RESET


	)

2895 
	#__GPIOI_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE


	)

2896 
	#__GPIOI_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE


	)

2897 
	#__GPIOJ_CLK_ENABLE
 
__HAL_RCC_GPIOJ_CLK_ENABLE


	)

2898 
	#__GPIOJ_CLK_DISABLE
 
__HAL_RCC_GPIOJ_CLK_DISABLE


	)

2899 
	#__GPIOJ_FORCE_RESET
 
__HAL_RCC_GPIOJ_FORCE_RESET


	)

2900 
	#__GPIOJ_RELEASE_RESET
 
__HAL_RCC_GPIOJ_RELEASE_RESET


	)

2901 
	#__GPIOJ_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE


	)

2902 
	#__GPIOJ_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE


	)

2903 
	#__GPIOK_CLK_ENABLE
 
__HAL_RCC_GPIOK_CLK_ENABLE


	)

2904 
	#__GPIOK_CLK_DISABLE
 
__HAL_RCC_GPIOK_CLK_DISABLE


	)

2905 
	#__GPIOK_RELEASE_RESET
 
__HAL_RCC_GPIOK_RELEASE_RESET


	)

2906 
	#__GPIOK_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE


	)

2907 
	#__GPIOK_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE


	)

2908 
	#__ETH_CLK_ENABLE
 
__HAL_RCC_ETH_CLK_ENABLE


	)

2909 
	#__ETH_CLK_DISABLE
 
__HAL_RCC_ETH_CLK_DISABLE


	)

2910 
	#__DCMI_CLK_ENABLE
 
__HAL_RCC_DCMI_CLK_ENABLE


	)

2911 
	#__DCMI_CLK_DISABLE
 
__HAL_RCC_DCMI_CLK_DISABLE


	)

2912 
	#__DCMI_FORCE_RESET
 
__HAL_RCC_DCMI_FORCE_RESET


	)

2913 
	#__DCMI_RELEASE_RESET
 
__HAL_RCC_DCMI_RELEASE_RESET


	)

2914 
	#__DCMI_CLK_SLEEP_ENABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_ENABLE


	)

2915 
	#__DCMI_CLK_SLEEP_DISABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_DISABLE


	)

2916 
	#__UART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2917 
	#__UART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2918 
	#__UART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2919 
	#__UART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2920 
	#__UART7_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART7_CLK_SLEEP_ENABLE


	)

2921 
	#__UART7_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART7_CLK_SLEEP_DISABLE


	)

2922 
	#__UART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2923 
	#__UART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2924 
	#__UART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2925 
	#__UART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2926 
	#__UART8_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART8_CLK_SLEEP_ENABLE


	)

2927 
	#__UART8_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART8_CLK_SLEEP_DISABLE


	)

2928 
	#__OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2929 
	#__OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2930 
	#__OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2931 
	#__OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2932 
	#__OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2933 
	#__OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2934 
	#__HAL_RCC_OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2935 
	#__HAL_RCC_OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2936 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED


	)

2937 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED


	)

2938 
	#__HAL_RCC_OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2939 
	#__HAL_RCC_OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2940 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2941 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2942 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED


	)

2943 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED


	)

2944 
	#__SRAM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE


	)

2945 
	#__CAN2_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_ENABLE


	)

2946 
	#__CAN2_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_DISABLE


	)

2947 
	#__DAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC_CLK_SLEEP_ENABLE


	)

2948 
	#__DAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC_CLK_SLEEP_DISABLE


	)

2949 
	#__ADC2_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_ENABLE


	)

2950 
	#__ADC2_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_DISABLE


	)

2951 
	#__ADC3_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_ENABLE


	)

2952 
	#__ADC3_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_DISABLE


	)

2953 
	#__FSMC_FORCE_RESET
 
__HAL_RCC_FSMC_FORCE_RESET


	)

2954 
	#__FSMC_RELEASE_RESET
 
__HAL_RCC_FSMC_RELEASE_RESET


	)

2955 
	#__FSMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_ENABLE


	)

2956 
	#__FSMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_DISABLE


	)

2957 
	#__SDIO_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2958 
	#__SDIO_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2959 
	#__SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2960 
	#__SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2961 
	#__DMA2D_CLK_ENABLE
 
__HAL_RCC_DMA2D_CLK_ENABLE


	)

2962 
	#__DMA2D_CLK_DISABLE
 
__HAL_RCC_DMA2D_CLK_DISABLE


	)

2963 
	#__DMA2D_FORCE_RESET
 
__HAL_RCC_DMA2D_FORCE_RESET


	)

2964 
	#__DMA2D_RELEASE_RESET
 
__HAL_RCC_DMA2D_RELEASE_RESET


	)

2965 
	#__DMA2D_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE


	)

2966 
	#__DMA2D_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE


	)

2969 
	#__HAL_RCC_OTGFS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2970 
	#__HAL_RCC_OTGFS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2972 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2973 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2974 
	#__ADC34_CLK_ENABLE
 
__HAL_RCC_ADC34_CLK_ENABLE


	)

2975 
	#__ADC34_CLK_DISABLE
 
__HAL_RCC_ADC34_CLK_DISABLE


	)

2976 
	#__DAC2_CLK_ENABLE
 
__HAL_RCC_DAC2_CLK_ENABLE


	)

2977 
	#__DAC2_CLK_DISABLE
 
__HAL_RCC_DAC2_CLK_DISABLE


	)

2978 
	#__TIM18_CLK_ENABLE
 
__HAL_RCC_TIM18_CLK_ENABLE


	)

2979 
	#__TIM18_CLK_DISABLE
 
__HAL_RCC_TIM18_CLK_DISABLE


	)

2980 
	#__TIM19_CLK_ENABLE
 
__HAL_RCC_TIM19_CLK_ENABLE


	)

2981 
	#__TIM19_CLK_DISABLE
 
__HAL_RCC_TIM19_CLK_DISABLE


	)

2982 
	#__TIM20_CLK_ENABLE
 
__HAL_RCC_TIM20_CLK_ENABLE


	)

2983 
	#__TIM20_CLK_DISABLE
 
__HAL_RCC_TIM20_CLK_DISABLE


	)

2984 
	#__HRTIM1_CLK_ENABLE
 
__HAL_RCC_HRTIM1_CLK_ENABLE


	)

2985 
	#__HRTIM1_CLK_DISABLE
 
__HAL_RCC_HRTIM1_CLK_DISABLE


	)

2986 
	#__SDADC1_CLK_ENABLE
 
__HAL_RCC_SDADC1_CLK_ENABLE


	)

2987 
	#__SDADC2_CLK_ENABLE
 
__HAL_RCC_SDADC2_CLK_ENABLE


	)

2988 
	#__SDADC3_CLK_ENABLE
 
__HAL_RCC_SDADC3_CLK_ENABLE


	)

2989 
	#__SDADC1_CLK_DISABLE
 
__HAL_RCC_SDADC1_CLK_DISABLE


	)

2990 
	#__SDADC2_CLK_DISABLE
 
__HAL_RCC_SDADC2_CLK_DISABLE


	)

2991 
	#__SDADC3_CLK_DISABLE
 
__HAL_RCC_SDADC3_CLK_DISABLE


	)

2993 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2994 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2995 
	#__ADC34_FORCE_RESET
 
__HAL_RCC_ADC34_FORCE_RESET


	)

2996 
	#__ADC34_RELEASE_RESET
 
__HAL_RCC_ADC34_RELEASE_RESET


	)

2997 
	#__DAC2_FORCE_RESET
 
__HAL_RCC_DAC2_FORCE_RESET


	)

2998 
	#__DAC2_RELEASE_RESET
 
__HAL_RCC_DAC2_RELEASE_RESET


	)

2999 
	#__TIM18_FORCE_RESET
 
__HAL_RCC_TIM18_FORCE_RESET


	)

3000 
	#__TIM18_RELEASE_RESET
 
__HAL_RCC_TIM18_RELEASE_RESET


	)

3001 
	#__TIM19_FORCE_RESET
 
__HAL_RCC_TIM19_FORCE_RESET


	)

3002 
	#__TIM19_RELEASE_RESET
 
__HAL_RCC_TIM19_RELEASE_RESET


	)

3003 
	#__TIM20_FORCE_RESET
 
__HAL_RCC_TIM20_FORCE_RESET


	)

3004 
	#__TIM20_RELEASE_RESET
 
__HAL_RCC_TIM20_RELEASE_RESET


	)

3005 
	#__HRTIM1_FORCE_RESET
 
__HAL_RCC_HRTIM1_FORCE_RESET


	)

3006 
	#__HRTIM1_RELEASE_RESET
 
__HAL_RCC_HRTIM1_RELEASE_RESET


	)

3007 
	#__SDADC1_FORCE_RESET
 
__HAL_RCC_SDADC1_FORCE_RESET


	)

3008 
	#__SDADC2_FORCE_RESET
 
__HAL_RCC_SDADC2_FORCE_RESET


	)

3009 
	#__SDADC3_FORCE_RESET
 
__HAL_RCC_SDADC3_FORCE_RESET


	)

3010 
	#__SDADC1_RELEASE_RESET
 
__HAL_RCC_SDADC1_RELEASE_RESET


	)

3011 
	#__SDADC2_RELEASE_RESET
 
__HAL_RCC_SDADC2_RELEASE_RESET


	)

3012 
	#__SDADC3_RELEASE_RESET
 
__HAL_RCC_SDADC3_RELEASE_RESET


	)

3014 
	#__ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC1_IS_CLK_ENABLED


	)

3015 
	#__ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC1_IS_CLK_DISABLED


	)

3016 
	#__ADC12_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

3017 
	#__ADC12_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

3018 
	#__ADC34_IS_CLK_ENABLED
 
__HAL_RCC_ADC34_IS_CLK_ENABLED


	)

3019 
	#__ADC34_IS_CLK_DISABLED
 
__HAL_RCC_ADC34_IS_CLK_DISABLED


	)

3020 
	#__CEC_IS_CLK_ENABLED
 
__HAL_RCC_CEC_IS_CLK_ENABLED


	)

3021 
	#__CEC_IS_CLK_DISABLED
 
__HAL_RCC_CEC_IS_CLK_DISABLED


	)

3022 
	#__CRC_IS_CLK_ENABLED
 
__HAL_RCC_CRC_IS_CLK_ENABLED


	)

3023 
	#__CRC_IS_CLK_DISABLED
 
__HAL_RCC_CRC_IS_CLK_DISABLED


	)

3024 
	#__DAC1_IS_CLK_ENABLED
 
__HAL_RCC_DAC1_IS_CLK_ENABLED


	)

3025 
	#__DAC1_IS_CLK_DISABLED
 
__HAL_RCC_DAC1_IS_CLK_DISABLED


	)

3026 
	#__DAC2_IS_CLK_ENABLED
 
__HAL_RCC_DAC2_IS_CLK_ENABLED


	)

3027 
	#__DAC2_IS_CLK_DISABLED
 
__HAL_RCC_DAC2_IS_CLK_DISABLED


	)

3028 
	#__DMA1_IS_CLK_ENABLED
 
__HAL_RCC_DMA1_IS_CLK_ENABLED


	)

3029 
	#__DMA1_IS_CLK_DISABLED
 
__HAL_RCC_DMA1_IS_CLK_DISABLED


	)

3030 
	#__DMA2_IS_CLK_ENABLED
 
__HAL_RCC_DMA2_IS_CLK_ENABLED


	)

3031 
	#__DMA2_IS_CLK_DISABLED
 
__HAL_RCC_DMA2_IS_CLK_DISABLED


	)

3032 
	#__FLITF_IS_CLK_ENABLED
 
__HAL_RCC_FLITF_IS_CLK_ENABLED


	)

3033 
	#__FLITF_IS_CLK_DISABLED
 
__HAL_RCC_FLITF_IS_CLK_DISABLED


	)

3034 
	#__FMC_IS_CLK_ENABLED
 
__HAL_RCC_FMC_IS_CLK_ENABLED


	)

3035 
	#__FMC_IS_CLK_DISABLED
 
__HAL_RCC_FMC_IS_CLK_DISABLED


	)

3036 
	#__GPIOA_IS_CLK_ENABLED
 
__HAL_RCC_GPIOA_IS_CLK_ENABLED


	)

3037 
	#__GPIOA_IS_CLK_DISABLED
 
__HAL_RCC_GPIOA_IS_CLK_DISABLED


	)

3038 
	#__GPIOB_IS_CLK_ENABLED
 
__HAL_RCC_GPIOB_IS_CLK_ENABLED


	)

3039 
	#__GPIOB_IS_CLK_DISABLED
 
__HAL_RCC_GPIOB_IS_CLK_DISABLED


	)

3040 
	#__GPIOC_IS_CLK_ENABLED
 
__HAL_RCC_GPIOC_IS_CLK_ENABLED


	)

3041 
	#__GPIOC_IS_CLK_DISABLED
 
__HAL_RCC_GPIOC_IS_CLK_DISABLED


	)

3042 
	#__GPIOD_IS_CLK_ENABLED
 
__HAL_RCC_GPIOD_IS_CLK_ENABLED


	)

3043 
	#__GPIOD_IS_CLK_DISABLED
 
__HAL_RCC_GPIOD_IS_CLK_DISABLED


	)

3044 
	#__GPIOE_IS_CLK_ENABLED
 
__HAL_RCC_GPIOE_IS_CLK_ENABLED


	)

3045 
	#__GPIOE_IS_CLK_DISABLED
 
__HAL_RCC_GPIOE_IS_CLK_DISABLED


	)

3046 
	#__GPIOF_IS_CLK_ENABLED
 
__HAL_RCC_GPIOF_IS_CLK_ENABLED


	)

3047 
	#__GPIOF_IS_CLK_DISABLED
 
__HAL_RCC_GPIOF_IS_CLK_DISABLED


	)

3048 
	#__GPIOG_IS_CLK_ENABLED
 
__HAL_RCC_GPIOG_IS_CLK_ENABLED


	)

3049 
	#__GPIOG_IS_CLK_DISABLED
 
__HAL_RCC_GPIOG_IS_CLK_DISABLED


	)

3050 
	#__GPIOH_IS_CLK_ENABLED
 
__HAL_RCC_GPIOH_IS_CLK_ENABLED


	)

3051 
	#__GPIOH_IS_CLK_DISABLED
 
__HAL_RCC_GPIOH_IS_CLK_DISABLED


	)

3052 
	#__HRTIM1_IS_CLK_ENABLED
 
__HAL_RCC_HRTIM1_IS_CLK_ENABLED


	)

3053 
	#__HRTIM1_IS_CLK_DISABLED
 
__HAL_RCC_HRTIM1_IS_CLK_DISABLED


	)

3054 
	#__I2C1_IS_CLK_ENABLED
 
__HAL_RCC_I2C1_IS_CLK_ENABLED


	)

3055 
	#__I2C1_IS_CLK_DISABLED
 
__HAL_RCC_I2C1_IS_CLK_DISABLED


	)

3056 
	#__I2C2_IS_CLK_ENABLED
 
__HAL_RCC_I2C2_IS_CLK_ENABLED


	)

3057 
	#__I2C2_IS_CLK_DISABLED
 
__HAL_RCC_I2C2_IS_CLK_DISABLED


	)

3058 
	#__I2C3_IS_CLK_ENABLED
 
__HAL_RCC_I2C3_IS_CLK_ENABLED


	)

3059 
	#__I2C3_IS_CLK_DISABLED
 
__HAL_RCC_I2C3_IS_CLK_DISABLED


	)

3060 
	#__PWR_IS_CLK_ENABLED
 
__HAL_RCC_PWR_IS_CLK_ENABLED


	)

3061 
	#__PWR_IS_CLK_DISABLED
 
__HAL_RCC_PWR_IS_CLK_DISABLED


	)

3062 
	#__SYSCFG_IS_CLK_ENABLED
 
__HAL_RCC_SYSCFG_IS_CLK_ENABLED


	)

3063 
	#__SYSCFG_IS_CLK_DISABLED
 
__HAL_RCC_SYSCFG_IS_CLK_DISABLED


	)

3064 
	#__SPI1_IS_CLK_ENABLED
 
__HAL_RCC_SPI1_IS_CLK_ENABLED


	)

3065 
	#__SPI1_IS_CLK_DISABLED
 
__HAL_RCC_SPI1_IS_CLK_DISABLED


	)

3066 
	#__SPI2_IS_CLK_ENABLED
 
__HAL_RCC_SPI2_IS_CLK_ENABLED


	)

3067 
	#__SPI2_IS_CLK_DISABLED
 
__HAL_RCC_SPI2_IS_CLK_DISABLED


	)

3068 
	#__SPI3_IS_CLK_ENABLED
 
__HAL_RCC_SPI3_IS_CLK_ENABLED


	)

3069 
	#__SPI3_IS_CLK_DISABLED
 
__HAL_RCC_SPI3_IS_CLK_DISABLED


	)

3070 
	#__SPI4_IS_CLK_ENABLED
 
__HAL_RCC_SPI4_IS_CLK_ENABLED


	)

3071 
	#__SPI4_IS_CLK_DISABLED
 
__HAL_RCC_SPI4_IS_CLK_DISABLED


	)

3072 
	#__SDADC1_IS_CLK_ENABLED
 
__HAL_RCC_SDADC1_IS_CLK_ENABLED


	)

3073 
	#__SDADC1_IS_CLK_DISABLED
 
__HAL_RCC_SDADC1_IS_CLK_DISABLED


	)

3074 
	#__SDADC2_IS_CLK_ENABLED
 
__HAL_RCC_SDADC2_IS_CLK_ENABLED


	)

3075 
	#__SDADC2_IS_CLK_DISABLED
 
__HAL_RCC_SDADC2_IS_CLK_DISABLED


	)

3076 
	#__SDADC3_IS_CLK_ENABLED
 
__HAL_RCC_SDADC3_IS_CLK_ENABLED


	)

3077 
	#__SDADC3_IS_CLK_DISABLED
 
__HAL_RCC_SDADC3_IS_CLK_DISABLED


	)

3078 
	#__SRAM_IS_CLK_ENABLED
 
__HAL_RCC_SRAM_IS_CLK_ENABLED


	)

3079 
	#__SRAM_IS_CLK_DISABLED
 
__HAL_RCC_SRAM_IS_CLK_DISABLED


	)

3080 
	#__TIM1_IS_CLK_ENABLED
 
__HAL_RCC_TIM1_IS_CLK_ENABLED


	)

3081 
	#__TIM1_IS_CLK_DISABLED
 
__HAL_RCC_TIM1_IS_CLK_DISABLED


	)

3082 
	#__TIM2_IS_CLK_ENABLED
 
__HAL_RCC_TIM2_IS_CLK_ENABLED


	)

3083 
	#__TIM2_IS_CLK_DISABLED
 
__HAL_RCC_TIM2_IS_CLK_DISABLED


	)

3084 
	#__TIM3_IS_CLK_ENABLED
 
__HAL_RCC_TIM3_IS_CLK_ENABLED


	)

3085 
	#__TIM3_IS_CLK_DISABLED
 
__HAL_RCC_TIM3_IS_CLK_DISABLED


	)

3086 
	#__TIM4_IS_CLK_ENABLED
 
__HAL_RCC_TIM4_IS_CLK_ENABLED


	)

3087 
	#__TIM4_IS_CLK_DISABLED
 
__HAL_RCC_TIM4_IS_CLK_DISABLED


	)

3088 
	#__TIM5_IS_CLK_ENABLED
 
__HAL_RCC_TIM5_IS_CLK_ENABLED


	)

3089 
	#__TIM5_IS_CLK_DISABLED
 
__HAL_RCC_TIM5_IS_CLK_DISABLED


	)

3090 
	#__TIM6_IS_CLK_ENABLED
 
__HAL_RCC_TIM6_IS_CLK_ENABLED


	)

3091 
	#__TIM6_IS_CLK_DISABLED
 
__HAL_RCC_TIM6_IS_CLK_DISABLED


	)

3092 
	#__TIM7_IS_CLK_ENABLED
 
__HAL_RCC_TIM7_IS_CLK_ENABLED


	)

3093 
	#__TIM7_IS_CLK_DISABLED
 
__HAL_RCC_TIM7_IS_CLK_DISABLED


	)

3094 
	#__TIM8_IS_CLK_ENABLED
 
__HAL_RCC_TIM8_IS_CLK_ENABLED


	)

3095 
	#__TIM8_IS_CLK_DISABLED
 
__HAL_RCC_TIM8_IS_CLK_DISABLED


	)

3096 
	#__TIM12_IS_CLK_ENABLED
 
__HAL_RCC_TIM12_IS_CLK_ENABLED


	)

3097 
	#__TIM12_IS_CLK_DISABLED
 
__HAL_RCC_TIM12_IS_CLK_DISABLED


	)

3098 
	#__TIM13_IS_CLK_ENABLED
 
__HAL_RCC_TIM13_IS_CLK_ENABLED


	)

3099 
	#__TIM13_IS_CLK_DISABLED
 
__HAL_RCC_TIM13_IS_CLK_DISABLED


	)

3100 
	#__TIM14_IS_CLK_ENABLED
 
__HAL_RCC_TIM14_IS_CLK_ENABLED


	)

3101 
	#__TIM14_IS_CLK_DISABLED
 
__HAL_RCC_TIM14_IS_CLK_DISABLED


	)

3102 
	#__TIM15_IS_CLK_ENABLED
 
__HAL_RCC_TIM15_IS_CLK_ENABLED


	)

3103 
	#__TIM15_IS_CLK_DISABLED
 
__HAL_RCC_TIM15_IS_CLK_DISABLED


	)

3104 
	#__TIM16_IS_CLK_ENABLED
 
__HAL_RCC_TIM16_IS_CLK_ENABLED


	)

3105 
	#__TIM16_IS_CLK_DISABLED
 
__HAL_RCC_TIM16_IS_CLK_DISABLED


	)

3106 
	#__TIM17_IS_CLK_ENABLED
 
__HAL_RCC_TIM17_IS_CLK_ENABLED


	)

3107 
	#__TIM17_IS_CLK_DISABLED
 
__HAL_RCC_TIM17_IS_CLK_DISABLED


	)

3108 
	#__TIM18_IS_CLK_ENABLED
 
__HAL_RCC_TIM18_IS_CLK_ENABLED


	)

3109 
	#__TIM18_IS_CLK_DISABLED
 
__HAL_RCC_TIM18_IS_CLK_DISABLED


	)

3110 
	#__TIM19_IS_CLK_ENABLED
 
__HAL_RCC_TIM19_IS_CLK_ENABLED


	)

3111 
	#__TIM19_IS_CLK_DISABLED
 
__HAL_RCC_TIM19_IS_CLK_DISABLED


	)

3112 
	#__TIM20_IS_CLK_ENABLED
 
__HAL_RCC_TIM20_IS_CLK_ENABLED


	)

3113 
	#__TIM20_IS_CLK_DISABLED
 
__HAL_RCC_TIM20_IS_CLK_DISABLED


	)

3114 
	#__TSC_IS_CLK_ENABLED
 
__HAL_RCC_TSC_IS_CLK_ENABLED


	)

3115 
	#__TSC_IS_CLK_DISABLED
 
__HAL_RCC_TSC_IS_CLK_DISABLED


	)

3116 
	#__UART4_IS_CLK_ENABLED
 
__HAL_RCC_UART4_IS_CLK_ENABLED


	)

3117 
	#__UART4_IS_CLK_DISABLED
 
__HAL_RCC_UART4_IS_CLK_DISABLED


	)

3118 
	#__UART5_IS_CLK_ENABLED
 
__HAL_RCC_UART5_IS_CLK_ENABLED


	)

3119 
	#__UART5_IS_CLK_DISABLED
 
__HAL_RCC_UART5_IS_CLK_DISABLED


	)

3120 
	#__USART1_IS_CLK_ENABLED
 
__HAL_RCC_USART1_IS_CLK_ENABLED


	)

3121 
	#__USART1_IS_CLK_DISABLED
 
__HAL_RCC_USART1_IS_CLK_DISABLED


	)

3122 
	#__USART2_IS_CLK_ENABLED
 
__HAL_RCC_USART2_IS_CLK_ENABLED


	)

3123 
	#__USART2_IS_CLK_DISABLED
 
__HAL_RCC_USART2_IS_CLK_DISABLED


	)

3124 
	#__USART3_IS_CLK_ENABLED
 
__HAL_RCC_USART3_IS_CLK_ENABLED


	)

3125 
	#__USART3_IS_CLK_DISABLED
 
__HAL_RCC_USART3_IS_CLK_DISABLED


	)

3126 
	#__USB_IS_CLK_ENABLED
 
__HAL_RCC_USB_IS_CLK_ENABLED


	)

3127 
	#__USB_IS_CLK_DISABLED
 
__HAL_RCC_USB_IS_CLK_DISABLED


	)

3128 
	#__WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG_IS_CLK_ENABLED


	)

3129 
	#__WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG_IS_CLK_DISABLED


	)

3131 #i‚Ä°
def√∂ed
(
STM32L1
)

3132 
	#__HAL_RCC_CRYP_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

3133 
	#__HAL_RCC_CRYP_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

3134 
	#__HAL_RCC_CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

3135 
	#__HAL_RCC_CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

3136 
	#__HAL_RCC_CRYP_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

3137 
	#__HAL_RCC_CRYP_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

3140 #i‚Ä°
def√∂ed
(
STM32F4
)

3141 
	#__HAL_RCC_SDMMC1_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

3142 
	#__HAL_RCC_SDMMC1_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

3143 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

3144 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

3145 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

3146 
	#__HAL_RCC_SDMMC1_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

3147 
	#__HAL_RCC_SDMMC1_IS_CLK_ENABLED
 
__HAL_RCC_SDIO_IS_CLK_ENABLED


	)

3148 
	#__HAL_RCC_SDMMC1_IS_CLK_DISABLED
 
__HAL_RCC_SDIO_IS_CLK_DISABLED


	)

3149 
	#Sdmmc1ClockS√±eÀòi‚ÅÑ
 
SdioClockS√±eÀòi‚ÅÑ


	)

3150 
	#RCC_PERIPHCLK_SDMMC1
 
RCC_PERIPHCLK_SDIO


	)

3151 
	#RCC_SDMMC1CLKSOURCE_CLK48
 
RCC_SDIOCLKSOURCE_CK48


	)

3152 
	#RCC_SDMMC1CLKSOURCE_SYSCLK
 
RCC_SDIOCLKSOURCE_SYSCLK


	)

3153 
	#__HAL_RCC_SDMMC1_CONFIG
 
__HAL_RCC_SDIO_CONFIG


	)

3154 
	#__HAL_RCC_GET_SDMMC1_SOURCE
 
__HAL_RCC_GET_SDIO_SOURCE


	)

3157 #i‚Ä°
def√∂ed
(
STM32F7
√ã|| def√∂ed(
STM32L4
)

3158 
	#__HAL_RCC_SDIO_FORCE_RESET
 
__HAL_RCC_SDMMC1_FORCE_RESET


	)

3159 
	#__HAL_RCC_SDIO_RELEASE_RESET
 
__HAL_RCC_SDMMC1_RELEASE_RESET


	)

3160 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE


	)

3161 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE


	)

3162 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

3163 
	#__HAL_RCC_SDIO_CLK_DISABLE
 
__HAL_RCC_SDMMC1_CLK_DISABLE


	)

3164 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
 
__HAL_RCC_SDMMC1_IS_CLK_ENABLED


	)

3165 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
 
__HAL_RCC_SDMMC1_IS_CLK_DISABLED


	)

3166 
	#SdioClockS√±eÀòi‚ÅÑ
 
Sdmmc1ClockS√±eÀòi‚ÅÑ


	)

3167 
	#RCC_PERIPHCLK_SDIO
 
RCC_PERIPHCLK_SDMMC1


	)

3168 
	#__HAL_RCC_SDIO_CONFIG
 
__HAL_RCC_SDMMC1_CONFIG


	)

3169 
	#__HAL_RCC_GET_SDIO_SOURCE
 
__HAL_RCC_GET_SDMMC1_SOURCE


	)

3172 #i‚Ä°
def√∂ed
(
STM32F7
)

3173 
	#RCC_SDIOCLKSOURCE_CLK48
 
RCC_SDMMC1CLKSOURCE_CLK48


	)

3174 
	#RCC_SDIOCLKSOURCE_SYSCLK
 
RCC_SDMMC1CLKSOURCE_SYSCLK


	)

3177 #i‚Ä°
def√∂ed
(
STM32H7
)

3178 
	#__HAL_RCC_USB_OTG_HS_CLK_ENABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_CLK_ENABLE
()

	)

3179 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_ENABLE
()

	)

3180 
	#__HAL_RCC_USB_OTG_HS_CLK_DISABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_CLK_DISABLE
()

	)

3181 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_DISABLE
()

	)

3182 
	#__HAL_RCC_USB_OTG_HS_FORCE_RESET
(√ã
	`__HAL_RCC_USB1_OTG_HS_FORCE_RESET
()

	)

3183 
	#__HAL_RCC_USB_OTG_HS_RELEASE_RESET
(√ã
	`__HAL_RCC_USB1_OTG_HS_RELEASE_RESET
()

	)

3184 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_CLK_SLEEP_ENABLE
()

	)

3185 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_SLEEP_ENABLE
()

	)

3186 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_CLK_SLEEP_DISABLE
()

	)

3187 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
(√ã
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_SLEEP_DISABLE
()

	)

3189 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_CLK_ENABLE
()

	)

3190 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_ENABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_ENABLE
()

	)

3191 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_CLK_DISABLE
()

	)

3192 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_DISABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_DISABLE
()

	)

3193 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(√ã
	`__HAL_RCC_USB2_OTG_FS_FORCE_RESET
()

	)

3194 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(√ã
	`__HAL_RCC_USB2_OTG_FS_RELEASE_RESET
()

	)

3195 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_CLK_SLEEP_ENABLE
()

	)

3196 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_SLEEP_ENABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_SLEEP_ENABLE
()

	)

3197 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_CLK_SLEEP_DISABLE
()

	)

3198 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_SLEEP_DISABLE
(√ã
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_SLEEP_DISABLE
()

	)

3201 
	#__HAL_RCC_I2SCLK
 
__HAL_RCC_I2S_CONFIG


	)

3202 
	#__HAL_RCC_I2SCLK_CONFIG
 
__HAL_RCC_I2S_CONFIG


	)

3204 
	#__RCC_PLLSRC
 
RCC_GET_PLL_OSCSOURCE


	)

3206 
	#IS_RCC_MSIRANGE
 
IS_RCC_MSI_CLOCK_RANGE


	)

3207 
	#IS_RCC_RTCCLK_SOURCE
 
IS_RCC_RTCCLKSOURCE


	)

3208 
	#IS_RCC_SYSCLK_DIV
 
IS_RCC_HCLK


	)

3209 
	#IS_RCC_HCLK_DIV
 
IS_RCC_PCLK


	)

3210 
	#IS_RCC_PERIPHCLK
 
IS_RCC_PERIPHCLOCK


	)

3212 
	#RCC_IT_HSI14
 
RCC_IT_HSI14RDY


	)

3214 
	#RCC_IT_CSSLSE
 
RCC_IT_LSECSS


	)

3215 
	#RCC_IT_CSSHSE
 
RCC_IT_CSS


	)

3217 
	#RCC_PLLMUL_3
 
RCC_PLL_MUL3


	)

3218 
	#RCC_PLLMUL_4
 
RCC_PLL_MUL4


	)

3219 
	#RCC_PLLMUL_6
 
RCC_PLL_MUL6


	)

3220 
	#RCC_PLLMUL_8
 
RCC_PLL_MUL8


	)

3221 
	#RCC_PLLMUL_12
 
RCC_PLL_MUL12


	)

3222 
	#RCC_PLLMUL_16
 
RCC_PLL_MUL16


	)

3223 
	#RCC_PLLMUL_24
 
RCC_PLL_MUL24


	)

3224 
	#RCC_PLLMUL_32
 
RCC_PLL_MUL32


	)

3225 
	#RCC_PLLMUL_48
 
RCC_PLL_MUL48


	)

3227 
	#RCC_PLLDIV_2
 
RCC_PLL_DIV2


	)

3228 
	#RCC_PLLDIV_3
 
RCC_PLL_DIV3


	)

3229 
	#RCC_PLLDIV_4
 
RCC_PLL_DIV4


	)

3231 
	#IS_RCC_MCOSOURCE
 
IS_RCC_MCO1SOURCE


	)

3232 
	#__HAL_RCC_MCO_CONFIG
 
__HAL_RCC_MCO1_CONFIG


	)

3233 
	#RCC_MCO_NODIV
 
RCC_MCODIV_1


	)

3234 
	#RCC_MCO_DIV1
 
RCC_MCODIV_1


	)

3235 
	#RCC_MCO_DIV2
 
RCC_MCODIV_2


	)

3236 
	#RCC_MCO_DIV4
 
RCC_MCODIV_4


	)

3237 
	#RCC_MCO_DIV8
 
RCC_MCODIV_8


	)

3238 
	#RCC_MCO_DIV16
 
RCC_MCODIV_16


	)

3239 
	#RCC_MCO_DIV32
 
RCC_MCODIV_32


	)

3240 
	#RCC_MCO_DIV64
 
RCC_MCODIV_64


	)

3241 
	#RCC_MCO_DIV128
 
RCC_MCODIV_128


	)

3242 
	#RCC_MCOSOURCE_NONE
 
RCC_MCO1SOURCE_NOCLOCK


	)

3243 
	#RCC_MCOSOURCE_LSI
 
RCC_MCO1SOURCE_LSI


	)

3244 
	#RCC_MCOSOURCE_LSE
 
RCC_MCO1SOURCE_LSE


	)

3245 
	#RCC_MCOSOURCE_SYSCLK
 
RCC_MCO1SOURCE_SYSCLK


	)

3246 
	#RCC_MCOSOURCE_HSI
 
RCC_MCO1SOURCE_HSI


	)

3247 
	#RCC_MCOSOURCE_HSI14
 
RCC_MCO1SOURCE_HSI14


	)

3248 
	#RCC_MCOSOURCE_HSI48
 
RCC_MCO1SOURCE_HSI48


	)

3249 
	#RCC_MCOSOURCE_HSE
 
RCC_MCO1SOURCE_HSE


	)

3250 
	#RCC_MCOSOURCE_PLLCLK_DIV1
 
RCC_MCO1SOURCE_PLLCLK


	)

3251 
	#RCC_MCOSOURCE_PLLCLK_NODIV
 
RCC_MCO1SOURCE_PLLCLK


	)

3252 
	#RCC_MCOSOURCE_PLLCLK_DIV2
 
RCC_MCO1SOURCE_PLLCLK_DIV2


	)

3254 #i‚Ä°
def√∂ed
(
STM32L4
√ã|| def√∂ed(
STM32WB
√ã|| def√∂ed(
STM32G0
√ã|| def√∂ed(
STM32G4
√ã|| def√∂ed(
STM32L5
)

3255 
	#RCC_RTCCLKSOURCE_NO_CLK
 
RCC_RTCCLKSOURCE_NONE


	)

3257 
	#RCC_RTCCLKSOURCE_NONE
 
RCC_RTCCLKSOURCE_NO_CLK


	)

3260 
	#RCC_USBCLK_PLLSAI1
 
RCC_USBCLKSOURCE_PLLSAI1


	)

3261 
	#RCC_USBCLK_PLL
 
RCC_USBCLKSOURCE_PLL


	)

3262 
	#RCC_USBCLK_MSI
 
RCC_USBCLKSOURCE_MSI


	)

3263 
	#RCC_USBCLKSOURCE_PLLCLK
 
RCC_USBCLKSOURCE_PLL


	)

3264 
	#RCC_USBPLLCLK_DIV1
 
RCC_USBCLKSOURCE_PLL


	)

3265 
	#RCC_USBPLLCLK_DIV1_5
 
RCC_USBCLKSOURCE_PLL_DIV1_5


	)

3266 
	#RCC_USBPLLCLK_DIV2
 
RCC_USBCLKSOURCE_PLL_DIV2


	)

3267 
	#RCC_USBPLLCLK_DIV3
 
RCC_USBCLKSOURCE_PLL_DIV3


	)

3269 
	#HSION_B√¥Numb√Æ
 
RCC_HSION_BIT_NUMBER


	)

3270 
	#HSION_BITNUMBER
 
RCC_HSION_BIT_NUMBER


	)

3271 
	#HSEON_B√¥Numb√Æ
 
RCC_HSEON_BIT_NUMBER


	)

3272 
	#HSEON_BITNUMBER
 
RCC_HSEON_BIT_NUMBER


	)

3273 
	#MSION_BITNUMBER
 
RCC_MSION_BIT_NUMBER


	)

3274 
	#CSSON_B√¥Numb√Æ
 
RCC_CSSON_BIT_NUMBER


	)

3275 
	#CSSON_BITNUMBER
 
RCC_CSSON_BIT_NUMBER


	)

3276 
	#PLLON_B√¥Numb√Æ
 
RCC_PLLON_BIT_NUMBER


	)

3277 
	#PLLON_BITNUMBER
 
RCC_PLLON_BIT_NUMBER


	)

3278 
	#PLLI2SON_B√¥Numb√Æ
 
RCC_PLLI2SON_BIT_NUMBER


	)

3279 
	#I2SSRC_B√¥Numb√Æ
 
RCC_I2SSRC_BIT_NUMBER


	)

3280 
	#RTCEN_B√¥Numb√Æ
 
RCC_RTCEN_BIT_NUMBER


	)

3281 
	#RTCEN_BITNUMBER
 
RCC_RTCEN_BIT_NUMBER


	)

3282 
	#BDRST_B√¥Numb√Æ
 
RCC_BDRST_BIT_NUMBER


	)

3283 
	#BDRST_BITNUMBER
 
RCC_BDRST_BIT_NUMBER


	)

3284 
	#RTCRST_BITNUMBER
 
RCC_RTCRST_BIT_NUMBER


	)

3285 
	#LSION_B√¥Numb√Æ
 
RCC_LSION_BIT_NUMBER


	)

3286 
	#LSION_BITNUMBER
 
RCC_LSION_BIT_NUMBER


	)

3287 
	#LSEON_B√¥Numb√Æ
 
RCC_LSEON_BIT_NUMBER


	)

3288 
	#LSEON_BITNUMBER
 
RCC_LSEON_BIT_NUMBER


	)

3289 
	#LSEBYP_BITNUMBER
 
RCC_LSEBYP_BIT_NUMBER


	)

3290 
	#PLLSAION_B√¥Numb√Æ
 
RCC_PLLSAION_BIT_NUMBER


	)

3291 
	#TIMPRE_B√¥Numb√Æ
 
RCC_TIMPRE_BIT_NUMBER


	)

3292 
	#RMVF_B√¥Numb√Æ
 
RCC_RMVF_BIT_NUMBER


	)

3293 
	#RMVF_BITNUMBER
 
RCC_RMVF_BIT_NUMBER


	)

3294 
	#RCC_CR2_HSI14TRIM_B√¥Numb√Æ
 
RCC_HSI14TRIM_BIT_NUMBER


	)

3295 
	#CR_BYTE2_ADDRESS
 
RCC_CR_BYTE2_ADDRESS


	)

3296 
	#CIR_BYTE1_ADDRESS
 
RCC_CIR_BYTE1_ADDRESS


	)

3297 
	#CIR_BYTE2_ADDRESS
 
RCC_CIR_BYTE2_ADDRESS


	)

3298 
	#BDCR_BYTE0_ADDRESS
 
RCC_BDCR_BYTE0_ADDRESS


	)

3299 
	#DBP_TIMEOUT_VALUE
 
RCC_DBP_TIMEOUT_VALUE


	)

3300 
	#LSE_TIMEOUT_VALUE
 
RCC_LSE_TIMEOUT_VALUE


	)

3302 
	#CR_HSION_BB
 
RCC_CR_HSION_BB


	)

3303 
	#CR_CSSON_BB
 
RCC_CR_CSSON_BB


	)

3304 
	#CR_PLLON_BB
 
RCC_CR_PLLON_BB


	)

3305 
	#CR_PLLI2SON_BB
 
RCC_CR_PLLI2SON_BB


	)

3306 
	#CR_MSION_BB
 
RCC_CR_MSION_BB


	)

3307 
	#CSR_LSION_BB
 
RCC_CSR_LSION_BB


	)

3308 
	#CSR_LSEON_BB
 
RCC_CSR_LSEON_BB


	)

3309 
	#CSR_LSEBYP_BB
 
RCC_CSR_LSEBYP_BB


	)

3310 
	#CSR_RTCEN_BB
 
RCC_CSR_RTCEN_BB


	)

3311 
	#CSR_RTCRST_BB
 
RCC_CSR_RTCRST_BB


	)

3312 
	#CFGR_I2SSRC_BB
 
RCC_CFGR_I2SSRC_BB


	)

3313 
	#BDCR_RTCEN_BB
 
RCC_BDCR_RTCEN_BB


	)

3314 
	#BDCR_BDRST_BB
 
RCC_BDCR_BDRST_BB


	)

3315 
	#CR_HSEON_BB
 
RCC_CR_HSEON_BB


	)

3316 
	#CSR_RMVF_BB
 
RCC_CSR_RMVF_BB


	)

3317 
	#CR_PLLSAION_BB
 
RCC_CR_PLLSAION_BB


	)

3318 
	#DCKCFGR_TIMPRE_BB
 
RCC_DCKCFGR_TIMPRE_BB


	)

3320 
	#__HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE


	)

3321 
	#__HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE


	)

3322 
	#__HAL_RCC_CRS_ENABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE


	)

3323 
	#__HAL_RCC_CRS_DISABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE


	)

3324 
	#__HAL_RCC_CRS_CALCULATE_RELOADVALUE
 
__HAL_RCC_CRS_RELOADVALUE_CALCULATE


	)

3326 
	#__HAL_RCC_GET_IT_SOURCE
 
__HAL_RCC_GET_IT


	)

3328 
	#RCC_CRS_SYNCWARM
 
RCC_CRS_SYNCWARN


	)

3329 
	#RCC_CRS_TRIMOV
 
RCC_CRS_TRIMOVF


	)

3331 
	#RCC_PERIPHCLK_CK48
 
RCC_PERIPHCLK_CLK48


	)

3332 
	#RCC_CK48CLKSOURCE_PLLQ
 
RCC_CLK48CLKSOURCE_PLLQ


	)

3333 
	#RCC_CK48CLKSOURCE_PLLSAIP
 
RCC_CLK48CLKSOURCE_PLLSAIP


	)

3334 
	#RCC_CK48CLKSOURCE_PLLI2SQ
 
RCC_CLK48CLKSOURCE_PLLI2SQ


	)

3335 
	#IS_RCC_CK48CLKSOURCE
 
IS_RCC_CLK48CLKSOURCE


	)

3336 
	#RCC_SDIOCLKSOURCE_CK48
 
RCC_SDIOCLKSOURCE_CLK48


	)

3338 
	#__HAL_RCC_DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM1_CLK_ENABLE


	)

3339 
	#__HAL_RCC_DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM1_CLK_DISABLE


	)

3340 
	#__HAL_RCC_DFSDM_IS_CLK_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_ENABLED


	)

3341 
	#__HAL_RCC_DFSDM_IS_CLK_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_DISABLED


	)

3342 
	#__HAL_RCC_DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM1_FORCE_RESET


	)

3343 
	#__HAL_RCC_DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM1_RELEASE_RESET


	)

3344 
	#__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_ENABLE


	)

3345 
	#__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_DISABLE


	)

3346 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_ENABLED


	)

3347 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_DISABLED


	)

3348 
	#DfsdmClockS√±eÀòi‚ÅÑ
 
Dfsdm1ClockS√±eÀòi‚ÅÑ


	)

3349 
	#RCC_PERIPHCLK_DFSDM
 
RCC_PERIPHCLK_DFSDM1


	)

3350 
	#RCC_DFSDMCLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3351 
	#RCC_DFSDMCLKSOURCE_SYSCLK
 
RCC_DFSDM1CLKSOURCE_SYSCLK


	)

3352 
	#__HAL_RCC_DFSDM_CONFIG
 
__HAL_RCC_DFSDM1_CONFIG


	)

3353 
	#__HAL_RCC_GET_DFSDM_SOURCE
 
__HAL_RCC_GET_DFSDM1_SOURCE


	)

3354 
	#RCC_DFSDM1CLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3355 
	#RCC_SWPMI1CLKSOURCE_PCLK
 
RCC_SWPMI1CLKSOURCE_PCLK1


	)

3356 
	#RCC_LPTIM1CLKSOURCE_PCLK
 
RCC_LPTIM1CLKSOURCE_PCLK1


	)

3357 
	#RCC_LPTIM2CLKSOURCE_PCLK
 
RCC_LPTIM2CLKSOURCE_PCLK1


	)

3359 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1
 
RCC_DFSDM1AUDIOCLKSOURCE_I2S1


	)

3360 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2
 
RCC_DFSDM1AUDIOCLKSOURCE_I2S2


	)

3361 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1
 
RCC_DFSDM2AUDIOCLKSOURCE_I2S1


	)

3362 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2
 
RCC_DFSDM2AUDIOCLKSOURCE_I2S2


	)

3363 
	#RCC_DFSDM1CLKSOURCE_APB2
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3364 
	#RCC_DFSDM2CLKSOURCE_APB2
 
RCC_DFSDM2CLKSOURCE_PCLK2


	)

3365 
	#RCC_FMPI2C1CLKSOURCE_APB
 
RCC_FMPI2C1CLKSOURCE_PCLK1


	)

3374 
	#HAL_RNG_R√≥dyC√Ülback
(
__HANDLE__
√ã
	`HAL_RNG_R√≥dyD¬©aC√Ülback
((__HANDLE__), 
u√∂t32_t
 
√∏ndom32b√¥
)

	)

3383 #i‚Ä°
def√∂ed
 (
STM32G0
√ã|| def√∂ed (
STM32L5
√ã|| def√∂ed (
STM32L412xx
√ã|| def√∂ed (
STM32L422xx
√ã|| def√∂ed (
STM32L4P5xx
√ã|| def√∂ed (
STM32L4Q5xx
√ã|| def√∂ed (
STM32G4
)

3385 
	#__HAL_RTC_CLEAR_FLAG
 
__HAL_RTC_EXTI_CLEAR_FLAG


	)

3387 
	#__HAL_RTC_DISABLE_IT
 
__HAL_RTC_EXTI_DISABLE_IT


	)

3388 
	#__HAL_RTC_ENABLE_IT
 
__HAL_RTC_EXTI_ENABLE_IT


	)

3390 #i‚Ä°
def√∂ed
 (
STM32F1
)

3391 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
√ã
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
()

	)

3393 
	#__HAL_RTC_EXTI_ENABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
√ã
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
()

	)

3395 
	#__HAL_RTC_EXTI_DISABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
√ã
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
()

	)

3397 
	#__HAL_RTC_EXTI_GET_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
√ã
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
()

	)

3399 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
RTC_EXTI_LINE_ALARM_EVENT
√ã
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
()

	)

3401 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
√ã(((__EXTI_LINE__√ã=Ô£ø
RTC_EXTI_LINE_ALARM_EVENT
√ã? 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
() : \

3402 (((
__EXTI_LINE__
√ã=Ô£ø
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
√ã? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
() : \

3403 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
()))

	)

3404 
	#__HAL_RTC_EXTI_ENABLE_IT
(
__EXTI_LINE__
√ã(((__EXTI_LINE__√ã=Ô£ø
RTC_EXTI_LINE_ALARM_EVENT
√ã? 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
() : \

3405 (((
__EXTI_LINE__
√ã=Ô£ø
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
√ã? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
() : \

3406 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
()))

	)

3407 
	#__HAL_RTC_EXTI_DISABLE_IT
(
__EXTI_LINE__
√ã(((__EXTI_LINE__√ã=Ô£ø
RTC_EXTI_LINE_ALARM_EVENT
√ã? 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
() : \

3408 (((
__EXTI_LINE__
√ã=Ô£ø
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
√ã? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
() : \

3409 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
()))

	)

3410 
	#__HAL_RTC_EXTI_GET_FLAG
(
__EXTI_LINE__
√ã(((__EXTI_LINE__√ã=Ô£ø
RTC_EXTI_LINE_ALARM_EVENT
√ã? 
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
() : \

3411 (((
__EXTI_LINE__
√ã=Ô£ø
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
√ã? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
() : \

3412 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
()))

	)

3413 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
√ã(((__EXTI_LINE__√ã=Ô£ø
RTC_EXTI_LINE_ALARM_EVENT
√ã? 
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
() : \

3414 (((
__EXTI_LINE__
√ã=Ô£ø
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
√ã? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
() : \

3415 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
()))

	)

3418 
	#IS_ALARM
 
IS_RTC_ALARM


	)

3419 
	#IS_ALARM_MASK
 
IS_RTC_ALARM_MASK


	)

3420 
	#IS_TAMPER
 
IS_RTC_TAMPER


	)

3421 
	#IS_TAMPER_ERASE_MODE
 
IS_RTC_TAMPER_ERASE_MODE


	)

3422 
	#IS_TAMPER_FILTER
 
IS_RTC_TAMPER_FILTER


	)

3423 
	#IS_TAMPER_INTERRUPT
 
IS_RTC_TAMPER_INTERRUPT


	)

3424 
	#IS_TAMPER_MASKFLAG_STATE
 
IS_RTC_TAMPER_MASKFLAG_STATE


	)

3425 
	#IS_TAMPER_PRECHARGE_DURATION
 
IS_RTC_TAMPER_PRECHARGE_DURATION


	)

3426 
	#IS_TAMPER_PULLUP_STATE
 
IS_RTC_TAMPER_PULLUP_STATE


	)

3427 
	#IS_TAMPER_SAMPLING_FREQ
 
IS_RTC_TAMPER_SAMPLING_FREQ


	)

3428 
	#IS_TAMPER_TIMESTAMPONTAMPER_DETECTION
 
IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION


	)

3429 
	#IS_TAMPER_TRIGGER
 
IS_RTC_TAMPER_TRIGGER


	)

3430 
	#IS_WAKEUP_CLOCK
 
IS_RTC_WAKEUP_CLOCK


	)

3431 
	#IS_WAKEUP_COUNTER
 
IS_RTC_WAKEUP_COUNTER


	)

3433 
	#__RTC_WRITEPROTECTION_ENABLE
 
__HAL_RTC_WRITEPROTECTION_ENABLE


	)

3434 
	#__RTC_WRITEPROTECTION_DISABLE
 
__HAL_RTC_WRITEPROTECTION_DISABLE


	)

3444 
	#SD_OCR_CID_CSD_OVERWRIETE
 
SD_OCR_CID_CSD_OVERWRITE


	)

3445 
	#SD_CMD_SD_APP_STAUS
 
SD_CMD_SD_APP_STATUS


	)

3447 #i‚Ä°
def√∂ed
(
STM32F4
√ã|| def√∂ed(
STM32F2
)

3448 
	#SD_SDMMC_DISABLED
 
SD_SDIO_DISABLED


	)

3449 
	#SD_SDMMC_FUNCTION_BUSY
 
SD_SDIO_FUNCTION_BUSY


	)

3450 
	#SD_SDMMC_FUNCTION_FAILED
 
SD_SDIO_FUNCTION_FAILED


	)

3451 
	#SD_SDMMC_UNKNOWN_FUNCTION
 
SD_SDIO_UNKNOWN_FUNCTION


	)

3452 
	#SD_CMD_SDMMC_SEN_OP_COND
 
SD_CMD_SDIO_SEN_OP_COND


	)

3453 
	#SD_CMD_SDMMC_RW_DIRECT
 
SD_CMD_SDIO_RW_DIRECT


	)

3454 
	#SD_CMD_SDMMC_RW_EXTENDED
 
SD_CMD_SDIO_RW_EXTENDED


	)

3455 
	#__HAL_SD_SDMMC_ENABLE
 
__HAL_SD_SDIO_ENABLE


	)

3456 
	#__HAL_SD_SDMMC_DISABLE
 
__HAL_SD_SDIO_DISABLE


	)

3457 
	#__HAL_SD_SDMMC_DMA_ENABLE
 
__HAL_SD_SDIO_DMA_ENABLE


	)

3458 
	#__HAL_SD_SDMMC_DMA_DISABLE
 
__HAL_SD_SDIO_DMA_DISABL


	)

3459 
	#__HAL_SD_SDMMC_ENABLE_IT
 
__HAL_SD_SDIO_ENABLE_IT


	)

3460 
	#__HAL_SD_SDMMC_DISABLE_IT
 
__HAL_SD_SDIO_DISABLE_IT


	)

3461 
	#__HAL_SD_SDMMC_GET_FLAG
 
__HAL_SD_SDIO_GET_FLAG


	)

3462 
	#__HAL_SD_SDMMC_CLEAR_FLAG
 
__HAL_SD_SDIO_CLEAR_FLAG


	)

3463 
	#__HAL_SD_SDMMC_GET_IT
 
__HAL_SD_SDIO_GET_IT


	)

3464 
	#__HAL_SD_SDMMC_CLEAR_IT
 
__HAL_SD_SDIO_CLEAR_IT


	)

3465 
	#SDMMC_STATIC_FLAGS
 
SDIO_STATIC_FLAGS


	)

3466 
	#SDMMC_CMD0TIMEOUT
 
SDIO_CMD0TIMEOUT


	)

3467 
	#SD_SDMMC_SEND_IF_COND
 
SD_SDIO_SEND_IF_COND


	)

3469 
	#SDMMC1_IRQn
 
SDIO_IRQn


	)

3470 
	#SDMMC1_IRQH‚Ñ¢d√Är
 
SDIO_IRQH‚Ñ¢d√Är


	)

3473 #i‚Ä°
def√∂ed
(
STM32F7
√ã|| def√∂ed(
STM32L4
)

3474 
	#SD_SDIO_DISABLED
 
SD_SDMMC_DISABLED


	)

3475 
	#SD_SDIO_FUNCTION_BUSY
 
SD_SDMMC_FUNCTION_BUSY


	)

3476 
	#SD_SDIO_FUNCTION_FAILED
 
SD_SDMMC_FUNCTION_FAILED


	)

3477 
	#SD_SDIO_UNKNOWN_FUNCTION
 
SD_SDMMC_UNKNOWN_FUNCTION


	)

3478 
	#SD_CMD_SDIO_SEN_OP_COND
 
SD_CMD_SDMMC_SEN_OP_COND


	)

3479 
	#SD_CMD_SDIO_RW_DIRECT
 
SD_CMD_SDMMC_RW_DIRECT


	)

3480 
	#SD_CMD_SDIO_RW_EXTENDED
 
SD_CMD_SDMMC_RW_EXTENDED


	)

3481 
	#__HAL_SD_SDIO_ENABLE
 
__HAL_SD_SDMMC_ENABLE


	)

3482 
	#__HAL_SD_SDIO_DISABLE
 
__HAL_SD_SDMMC_DISABLE


	)

3483 
	#__HAL_SD_SDIO_DMA_ENABLE
 
__HAL_SD_SDMMC_DMA_ENABLE


	)

3484 
	#__HAL_SD_SDIO_DMA_DISABL
 
__HAL_SD_SDMMC_DMA_DISABLE


	)

3485 
	#__HAL_SD_SDIO_ENABLE_IT
 
__HAL_SD_SDMMC_ENABLE_IT


	)

3486 
	#__HAL_SD_SDIO_DISABLE_IT
 
__HAL_SD_SDMMC_DISABLE_IT


	)

3487 
	#__HAL_SD_SDIO_GET_FLAG
 
__HAL_SD_SDMMC_GET_FLAG


	)

3488 
	#__HAL_SD_SDIO_CLEAR_FLAG
 
__HAL_SD_SDMMC_CLEAR_FLAG


	)

3489 
	#__HAL_SD_SDIO_GET_IT
 
__HAL_SD_SDMMC_GET_IT


	)

3490 
	#__HAL_SD_SDIO_CLEAR_IT
 
__HAL_SD_SDMMC_CLEAR_IT


	)

3491 
	#SDIO_STATIC_FLAGS
 
SDMMC_STATIC_FLAGS


	)

3492 
	#SDIO_CMD0TIMEOUT
 
SDMMC_CMD0TIMEOUT


	)

3493 
	#SD_SDIO_SEND_IF_COND
 
SD_SDMMC_SEND_IF_COND


	)

3495 
	#SDIO_IRQn
 
SDMMC1_IRQn


	)

3496 
	#SDIO_IRQH‚Ñ¢d√Är
 
SDMMC1_IRQH‚Ñ¢d√Är


	)

3499 #i‚Ä°
def√∂ed
(
STM32F7
√ã|| def√∂ed(
STM32F4
√ã|| def√∂ed(
STM32F2
√ã|| def√∂ed(
STM32L4
√ã|| def√∂ed(
STM32H7
)

3500 
	#HAL_SD_C¬®dCIDTy‚â•def
 
HAL_SD_C¬®dCIDTy‚â•Def


	)

3501 
	#HAL_SD_C¬®dCSDTy‚â•def
 
HAL_SD_C¬®dCSDTy‚â•Def


	)

3502 
	#HAL_SD_C¬®dS√®tusTy‚â•def
 
HAL_SD_C¬®dS√®tusTy‚â•Def


	)

3503 
	#HAL_SD_C¬®dS√®√£Ty‚â•def
 
HAL_SD_C¬®dS√®√£Ty‚â•Def


	)

3506 #i‚Ä°
def√∂ed
(
STM32H7
√ã|| def√∂ed(
STM32L5
)

3507 
	#HAL_MMCEx_R√≥d_DMADoub√ÄBuf‚Äûr0C‚àÇtC√Ülback
 
HAL_MMCEx_R√≥d_DMADoub√ÄBuf0C‚àÇtC√Ülback


	)

3508 
	#HAL_MMCEx_R√≥d_DMADoub√ÄBuf‚Äûr1C‚àÇtC√Ülback
 
HAL_MMCEx_R√≥d_DMADoub√ÄBuf1C‚àÇtC√Ülback


	)

3509 
	#HAL_MMCEx_Wr√¥e_DMADoub√ÄBuf‚Äûr0C‚àÇtC√Ülback
 
HAL_MMCEx_Wr√¥e_DMADoub√ÄBuf0C‚àÇtC√Ülback


	)

3510 
	#HAL_MMCEx_Wr√¥e_DMADoub√ÄBuf‚Äûr1C‚àÇtC√Ülback
 
HAL_MMCEx_Wr√¥e_DMADoub√ÄBuf1C‚àÇtC√Ülback


	)

3511 
	#HAL_SDEx_R√≥d_DMADoub√ÄBuf‚Äûr0C‚àÇtC√Ülback
 
HAL_SDEx_R√≥d_DMADoub√ÄBuf0C‚àÇtC√Ülback


	)

3512 
	#HAL_SDEx_R√≥d_DMADoub√ÄBuf‚Äûr1C‚àÇtC√Ülback
 
HAL_SDEx_R√≥d_DMADoub√ÄBuf1C‚àÇtC√Ülback


	)

3513 
	#HAL_SDEx_Wr√¥e_DMADoub√ÄBuf‚Äûr0C‚àÇtC√Ülback
 
HAL_SDEx_Wr√¥e_DMADoub√ÄBuf0C‚àÇtC√Ülback


	)

3514 
	#HAL_SDEx_Wr√¥e_DMADoub√ÄBuf‚Äûr1C‚àÇtC√Ülback
 
HAL_SDEx_Wr√¥e_DMADoub√ÄBuf1C‚àÇtC√Ülback


	)

3515 
	#HAL_SD_DriveT√∏nsciv√Æ_1_8V_C√Ülback
 
HAL_SD_DriveT√∏nsÀöiv√Æ_1_8V_C√Ülback


	)

3525 
	#__SMARTCARD_ENABLE_IT
 
__HAL_SMARTCARD_ENABLE_IT


	)

3526 
	#__SMARTCARD_DISABLE_IT
 
__HAL_SMARTCARD_DISABLE_IT


	)

3527 
	#__SMARTCARD_ENABLE
 
__HAL_SMARTCARD_ENABLE


	)

3528 
	#__SMARTCARD_DISABLE
 
__HAL_SMARTCARD_DISABLE


	)

3529 
	#__SMARTCARD_DMA_REQUEST_ENABLE
 
__HAL_SMARTCARD_DMA_REQUEST_ENABLE


	)

3530 
	#__SMARTCARD_DMA_REQUEST_DISABLE
 
__HAL_SMARTCARD_DMA_REQUEST_DISABLE


	)

3532 
	#__HAL_SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

3533 
	#__SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

3535 
	#IS_SMARTCARD_ONEBIT_SAMPLING
 
IS_SMARTCARD_ONE_BIT_SAMPLE


	)

3544 
	#__HAL_SMBUS_RESET_CR1
 
SMBUS_RESET_CR1


	)

3545 
	#__HAL_SMBUS_RESET_CR2
 
SMBUS_RESET_CR2


	)

3546 
	#__HAL_SMBUS_GENERATE_START
 
SMBUS_GENERATE_START


	)

3547 
	#__HAL_SMBUS_GET_ADDR_MATCH
 
SMBUS_GET_ADDR_MATCH


	)

3548 
	#__HAL_SMBUS_GET_DIR
 
SMBUS_GET_DIR


	)

3549 
	#__HAL_SMBUS_GET_STOP_MODE
 
SMBUS_GET_STOP_MODE


	)

3550 
	#__HAL_SMBUS_GET_PEC_MODE
 
SMBUS_GET_PEC_MODE


	)

3551 
	#__HAL_SMBUS_GET_ALERT_ENABLED
 
SMBUS_GET_ALERT_ENABLED


	)

3560 
	#__HAL_SPI_1LINE_TX
 
SPI_1LINE_TX


	)

3561 
	#__HAL_SPI_1LINE_RX
 
SPI_1LINE_RX


	)

3562 
	#__HAL_SPI_RESET_CRC
 
SPI_RESET_CRC


	)

3572 
	#__HAL_UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

3573 
	#__HAL_UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

3574 
	#__UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

3575 
	#__UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

3577 
	#IS_UART_WAKEUPMETHODE
 
IS_UART_WAKEUPMETHOD


	)

3579 
	#IS_UART_ONEBIT_SAMPLE
 
IS_UART_ONE_BIT_SAMPLE


	)

3580 
	#IS_UART_ONEBIT_SAMPLING
 
IS_UART_ONE_BIT_SAMPLE


	)

3591 
	#__USART_ENABLE_IT
 
__HAL_USART_ENABLE_IT


	)

3592 
	#__USART_DISABLE_IT
 
__HAL_USART_DISABLE_IT


	)

3593 
	#__USART_ENABLE
 
__HAL_USART_ENABLE


	)

3594 
	#__USART_DISABLE
 
__HAL_USART_DISABLE


	)

3596 
	#__HAL_USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

3597 
	#__USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

3606 
	#USB_EXTI_LINE_WAKEUP
 
USB_WAKEUP_EXTI_LINE


	)

3608 
	#USB_FS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE


	)

3609 
	#USB_FS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE


	)

3610 
	#USB_FS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

3611 
	#USB_FS_EXTI_LINE_WAKEUP
 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

3613 
	#USB_HS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE


	)

3614 
	#USB_HS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE


	)

3615 
	#USB_HS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

3616 
	#USB_HS_EXTI_LINE_WAKEUP
 
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

3618 
	#__HAL_USB_EXTI_ENABLE_IT
 
__HAL_USB_WAKEUP_EXTI_ENABLE_IT


	)

3619 
	#__HAL_USB_EXTI_DISABLE_IT
 
__HAL_USB_WAKEUP_EXTI_DISABLE_IT


	)

3620 
	#__HAL_USB_EXTI_GET_FLAG
 
__HAL_USB_WAKEUP_EXTI_GET_FLAG


	)

3621 
	#__HAL_USB_EXTI_CLEAR_FLAG
 
__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG


	)

3622 
	#__HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3623 
	#__HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3624 
	#__HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3626 
	#__HAL_USB_FS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT


	)

3627 
	#__HAL_USB_FS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT


	)

3628 
	#__HAL_USB_FS_EXTI_GET_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG


	)

3629 
	#__HAL_USB_FS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG


	)

3630 
	#__HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3631 
	#__HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3632 
	#__HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3633 
	#__HAL_USB_FS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT


	)

3635 
	#__HAL_USB_HS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT


	)

3636 
	#__HAL_USB_HS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT


	)

3637 
	#__HAL_USB_HS_EXTI_GET_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG


	)

3638 
	#__HAL_USB_HS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG


	)

3639 
	#__HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3640 
	#__HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3641 
	#__HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3642 
	#__HAL_USB_HS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT


	)

3644 
	#HAL_PCD_AÀòiveRem≈∏eWakeup
 
HAL_PCD_AÀòiv¬©eRem≈∏eWakeup


	)

3645 
	#HAL_PCD_DeAÀòiveRem≈∏eWakeup
 
HAL_PCD_DeAÀòiv¬©eRem≈∏eWakeup


	)

3647 
	#HAL_PCD_S√´TxFiFo
 
HAL_PCDEx_S√´TxFiFo


	)

3648 
	#HAL_PCD_S√´RxFiFo
 
HAL_PCDEx_S√´RxFiFo


	)

3656 
	#__HAL_TIM_S√´ICP¬™sÀá√ÄrV√Üue
 
TIM_SET_ICPRESCALERVALUE


	)

3657 
	#__HAL_TIM_Re¬£tICP¬™sÀá√ÄrV√Üue
 
TIM_RESET_ICPRESCALERVALUE


	)

3659 
	#TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

3660 
	#TIM_GET_CLEAR_IT
 
__HAL_TIM_CLEAR_IT


	)

3662 
	#__HAL_TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

3664 
	#__HAL_TIM_DIRECTION_STATUS
 
__HAL_TIM_IS_TIM_COUNTING_DOWN


	)

3665 
	#__HAL_TIM_PRESCALER
 
__HAL_TIM_SET_PRESCALER


	)

3666 
	#__HAL_TIM_S√´Cou¬°√Æ
 
__HAL_TIM_SET_COUNTER


	)

3667 
	#__HAL_TIM_G√´Cou¬°√Æ
 
__HAL_TIM_GET_COUNTER


	)

3668 
	#__HAL_TIM_S√´Aut‚Äπ√±Ô¨Çd
 
__HAL_TIM_SET_AUTORELOAD


	)

3669 
	#__HAL_TIM_G√´Aut‚Äπ√±Ô¨Çd
 
__HAL_TIM_GET_AUTORELOAD


	)

3670 
	#__HAL_TIM_S√´ClockDivisi‚ÅÑ
 
__HAL_TIM_SET_CLOCKDIVISION


	)

3671 
	#__HAL_TIM_G√´ClockDivisi‚ÅÑ
 
__HAL_TIM_GET_CLOCKDIVISION


	)

3672 
	#__HAL_TIM_S√´ICP¬™sÀá√Är
 
__HAL_TIM_SET_ICPRESCALER


	)

3673 
	#__HAL_TIM_G√´ICP¬™sÀá√Är
 
__HAL_TIM_GET_ICPRESCALER


	)

3674 
	#__HAL_TIM_S√´Com‚àë¬™
 
__HAL_TIM_SET_COMPARE


	)

3675 
	#__HAL_TIM_G√´Com‚àë¬™
 
__HAL_TIM_GET_COMPARE


	)

3677 
	#TIM_BREAKINPUTSOURCE_DFSDM
 
TIM_BREAKINPUTSOURCE_DFSDM1


	)

3686 
	#__HAL_ETH_EXTI_ENABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_IT


	)

3687 
	#__HAL_ETH_EXTI_DISABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_DISABLE_IT


	)

3688 
	#__HAL_ETH_EXTI_GET_FLAG
 
__HAL_ETH_WAKEUP_EXTI_GET_FLAG


	)

3689 
	#__HAL_ETH_EXTI_CLEAR_FLAG
 
__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG


	)

3690 
	#__HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER


	)

3691 
	#__HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER


	)

3692 
	#__HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER


	)

3694 
	#ETH_PROMISCIOUSMODE_ENABLE
 
ETH_PROMISCUOUS_MODE_ENABLE


	)

3695 
	#ETH_PROMISCIOUSMODE_DISABLE
 
ETH_PROMISCUOUS_MODE_DISABLE


	)

3696 
	#IS_ETH_PROMISCIOUS_MODE
 
IS_ETH_PROMISCUOUS_MODE


	)

3704 
	#__HAL_LTDC_LAYER
 
LTDC_LAYER


	)

3705 
	#__HAL_LTDC_RELOAD_CONFIG
 
__HAL_LTDC_RELOAD_IMMEDIATE_CONFIG


	)

3713 
	#SAI_OUTPUTDRIVE_DISABLED
 
SAI_OUTPUTDRIVE_DISABLE


	)

3714 
	#SAI_OUTPUTDRIVE_ENABLED
 
SAI_OUTPUTDRIVE_ENABLE


	)

3715 
	#SAI_MASTERDIVIDER_ENABLED
 
SAI_MASTERDIVIDER_ENABLE


	)

3716 
	#SAI_MASTERDIVIDER_DISABLED
 
SAI_MASTERDIVIDER_DISABLE


	)

3717 
	#SAI_STREOMODE
 
SAI_STEREOMODE


	)

3718 
	#SAI_FIFOS√®tus_Em¬±y
 
SAI_FIFOSTATUS_EMPTY


	)

3719 
	#SAI_FIFOS√®tus_Less1Qu¬®√£rFu≈í
 
SAI_FIFOSTATUS_LESS1QUARTERFULL


	)

3720 
	#SAI_FIFOS√®tus_1Qu¬®√£rFu≈í
 
SAI_FIFOSTATUS_1QUARTERFULL


	)

3721 
	#SAI_FIFOS√®tus_H√ÜfFu≈í
 
SAI_FIFOSTATUS_HALFFULL


	)

3722 
	#SAI_FIFOS√®tus_3Qu¬®√£rsFu≈í
 
SAI_FIFOSTATUS_3QUARTERFULL


	)

3723 
	#SAI_FIFOS√®tus_Fu≈í
 
SAI_FIFOSTATUS_FULL


	)

3724 
	#IS_SAI_BLOCK_MONO_STREO_MODE
 
IS_SAI_BLOCK_MONO_STEREO_MODE


	)

3725 
	#SAI_SYNCHRONOUS_EXT
 
SAI_SYNCHRONOUS_EXT_SAI1


	)

3726 
	#SAI_SYNCEXT_IN_ENABLE
 
SAI_SYNCEXT_OUTBLOCKA_ENABLE


	)

3734 #i‚Ä°
def√∂ed
(
STM32H7
)

3735 
	#HAL_SPDIFRX_ReÀöiveC‚ÅÑ√•Ô¨ÅFlow
 
HAL_SPDIFRX_ReÀöiveC√•lFlow


	)

3736 
	#HAL_SPDIFRX_ReÀöiveC‚ÅÑ√•Ô¨ÅFlow_IT
 
HAL_SPDIFRX_ReÀöiveC√•lFlow_IT


	)

3737 
	#HAL_SPDIFRX_ReÀöiveC‚ÅÑ√•Ô¨ÅFlow_DMA
 
HAL_SPDIFRX_ReÀöiveC√•lFlow_DMA


	)

3746 #i‚Ä°
def√∂ed
 (
STM32H7
√ã|| def√∂ed (
STM32G4
√ã|| def√∂ed (
STM32F3
)

3747 
	#HAL_HRTIM_Wavef‚ÄπmCou¬°√ÆS√®œÄ_IT
 
HAL_HRTIM_Wavef‚ÄπmCou¬°S√®œÄ_IT


	)

3748 
	#HAL_HRTIM_Wavef‚ÄπmCou¬°√ÆS√®œÄ_DMA
 
HAL_HRTIM_Wavef‚ÄπmCou¬°S√®œÄ_DMA


	)

3749 
	#HAL_HRTIM_Wavef‚ÄπmCou¬°√ÆS√®œÄ
 
HAL_HRTIM_Wavef‚ÄπmCou¬°S√®œÄ


	)

3750 
	#HAL_HRTIM_Wavef‚ÄπmCou¬°√ÆSt‚Ä∫_IT
 
HAL_HRTIM_Wavef‚ÄπmCou¬°St‚Ä∫_IT


	)

3751 
	#HAL_HRTIM_Wavef‚ÄπmCou¬°√ÆSt‚Ä∫_DMA
 
HAL_HRTIM_Wavef‚ÄπmCou¬°St‚Ä∫_DMA


	)

3752 
	#HAL_HRTIM_Wavef‚ÄπmCou¬°√ÆSt‚Ä∫
 
HAL_HRTIM_Wavef‚ÄπmCou¬°St‚Ä∫


	)

3761 #i‚Ä°
def√∂ed
 (
STM32L4
√ã|| def√∂ed (
STM32F4
√ã|| def√∂ed (
STM32F7
√ã|| def√∂ed(
STM32H7
)

3762 
	#HAL_QPSI_TIMEOUT_DEFAULT_VALUE
 
HAL_QSPI_TIMEOUT_DEFAULT_VALUE


	)

3776 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32f1xx_hal_can_ex_legacy.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_CAN_EX_LEGACY_H


22 
	#__STM32F1xx_HAL_CAN_EX_LEGACY_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
) || \

29 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| 
	$def√∂ed
(
STM32F107xC
)

32 
	~"¬∞m32f1xx_h√Ü_def.h
"

53 
u√∂t32_t
 
F√ª√£rIdHigh
;

57 
u√∂t32_t
 
F√ª√£rIdLow
;

61 
u√∂t32_t
 
F√ª√£rMaskIdHigh
;

66 
u√∂t32_t
 
F√ª√£rMaskIdLow
;

71 
u√∂t32_t
 
F√ª√£rFIFOAssignm√≠t
;

73 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

74 
u√∂t32_t
 
F√ª√£rNumb√Æ
;

77 
u√∂t32_t
 
F√ª√£rNumb√Æ
;

80 
u√∂t32_t
 
F√ª√£rMode
;

83 
u√∂t32_t
 
F√ª√£rSÀá√Ä
;

86 
u√∂t32_t
 
F√ª√£rAÀòiv¬©i‚ÅÑ
;

89 
u√∂t32_t
 
B‚Ñ¢kNumb√Æ
;

92 }
	tCAN_F√ª√£rC‚ÅÑfTy‚â•Def
;

101 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

102 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
√ã((NUMBER√ã<Ô£ø27U)

	)

104 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
√ã((NUMBER√ã<Ô£ø13U)

	)

122 #ifde‚Ä°
__Àùlu‚Ä¢lus


123 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32f1xx_hal_can_legacy.h

37 #i‚Äöde‚Ä°
__STM32F1xx_HAL_CAN_LEGACY_H


38 
	#__STM32F1xx_HAL_CAN_LEGACY_H


	)

40 #ifde‚Ä°
__Àùlu‚Ä¢lus


44 #i‚Ä°
def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
) || \

45 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| 
	$def√∂ed
(
STM32F107xC
)

48 
	~"¬∞m32f1xx_h√Ü_def.h
"

68 
HAL_CAN_STATE_RESET
 = 0x00U,

69 
HAL_CAN_STATE_READY
 = 0x01U,

70 
HAL_CAN_STATE_BUSY
 = 0x02U,

71 
HAL_CAN_STATE_BUSY_TX
 = 0x12U,

72 
HAL_CAN_STATE_BUSY_RX0
 = 0x22U,

73 
HAL_CAN_STATE_BUSY_RX1
 = 0x32U,

74 
HAL_CAN_STATE_BUSY_TX_RX0
 = 0x42U,

75 
HAL_CAN_STATE_BUSY_TX_RX1
 = 0x52U,

76 
HAL_CAN_STATE_BUSY_RX0_RX1
 = 0x62U,

77 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
 = 0x72U,

78 
HAL_CAN_STATE_TIMEOUT
 = 0x03U,

79 
HAL_CAN_STATE_ERROR
 = 0x04U

81 }
	tHAL_CAN_S√®√£Ty‚â•Def
;

88 
u√∂t32_t
 
P¬™sÀá√Är
;

91 
u√∂t32_t
 
Mode
;

94 
u√∂t32_t
 
SJW
;

99 
u√∂t32_t
 
BS1
;

102 
u√∂t32_t
 
BS2
;

105 
u√∂t32_t
 
TTCM
;

108 
u√∂t32_t
 
ABOM
;

111 
u√∂t32_t
 
AWUM
;

114 
u√∂t32_t
 
NART
;

117 
u√∂t32_t
 
RFLM
;

120 
u√∂t32_t
 
TXFP
;

122 }
	tCAN_In√¥Ty‚â•Def
;

129 
u√∂t32_t
 
StdId
;

132 
u√∂t32_t
 
ExtId
;

135 
u√∂t32_t
 
IDE
;

138 
u√∂t32_t
 
RTR
;

141 
u√∂t32_t
 
DLC
;

144 
u√∂t8_t
 
D¬©a
[8];

147 }
	tC‚Ñ¢TxMsgTy‚â•Def
;

154 
u√∂t32_t
 
StdId
;

157 
u√∂t32_t
 
ExtId
;

160 
u√∂t32_t
 
IDE
;

163 
u√∂t32_t
 
RTR
;

166 
u√∂t32_t
 
DLC
;

169 
u√∂t8_t
 
D¬©a
[8];

172 
u√∂t32_t
 
FMI
;

175 
u√∂t32_t
 
FIFONumb√Æ
;

178 }
	tC‚Ñ¢RxMsgTy‚â•Def
;

185 
CAN_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

187 
CAN_In√¥Ty‚â•Def
 
In√¥
;

189 
C‚Ñ¢TxMsgTy‚â•Def
* 
pTxMsg
;

191 
C‚Ñ¢RxMsgTy‚â•Def
* 
pRxMsg
;

193 
C‚Ñ¢RxMsgTy‚â•Def
* 
pRx1Msg
;

195 
__IO
 
HAL_CAN_S√®√£Ty‚â•Def
 
S√®√£
;

197 
HAL_LockTy‚â•Def
 
Lock
;

199 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

201 }
	tCAN_H‚Ñ¢d√ÄTy‚â•Def
;

215 
	#HAL_CAN_ERROR_NONE
 0x00000000U

	)

216 
	#HAL_CAN_ERROR_EWG
 0x00000001U

	)

217 
	#HAL_CAN_ERROR_EPV
 0x00000002U

	)

218 
	#HAL_CAN_ERROR_BOF
 0x00000004U

	)

219 
	#HAL_CAN_ERROR_STF
 0x00000008U

	)

220 
	#HAL_CAN_ERROR_FOR
 0x00000010U

	)

221 
	#HAL_CAN_ERROR_ACK
 0x00000020U

	)

222 
	#HAL_CAN_ERROR_BR
 0x00000040U

	)

223 
	#HAL_CAN_ERROR_BD
 0x00000080U

	)

224 
	#HAL_CAN_ERROR_CRC
 0x00000100U

	)

225 
	#HAL_CAN_ERROR_FOV0
 0x00000200U

	)

226 
	#HAL_CAN_ERROR_FOV1
 0x00000400U

	)

227 
	#HAL_CAN_ERROR_TXFAIL
 0x00000800U

	)

235 
	#CAN_INITSTATUS_FAILED
 0x00000000U

	)

236 
	#CAN_INITSTATUS_SUCCESS
 0x00000001U

	)

244 
	#CAN_MODE_NORMAL
 0x00000000U

	)

245 
	#CAN_MODE_LOOPBACK
 ((
u√∂t32_t
)
CAN_BTR_LBKM
√ã

	)

246 
	#CAN_MODE_SILENT
 ((
u√∂t32_t
)
CAN_BTR_SILM
√ã

	)

247 
	#CAN_MODE_SILENT_LOOPBACK
 ((
u√∂t32_t
)(
CAN_BTR_LBKM
 | 
CAN_BTR_SILM
)√ã

	)

255 
	#CAN_SJW_1TQ
 0x00000000U

	)

256 
	#CAN_SJW_2TQ
 ((
u√∂t32_t
)
CAN_BTR_SJW_0
√ã

	)

257 
	#CAN_SJW_3TQ
 ((
u√∂t32_t
)
CAN_BTR_SJW_1
√ã

	)

258 
	#CAN_SJW_4TQ
 ((
u√∂t32_t
)
CAN_BTR_SJW
√ã

	)

266 
	#CAN_BS1_1TQ
 0x00000000U

	)

267 
	#CAN_BS1_2TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_0
√ã

	)

268 
	#CAN_BS1_3TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_1
√ã

	)

269 
	#CAN_BS1_4TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)√ã

	)

270 
	#CAN_BS1_5TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_2
√ã

	)

271 
	#CAN_BS1_6TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_0
)√ã

	)

272 
	#CAN_BS1_7TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
)√ã

	)

273 
	#CAN_BS1_8TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)√ã

	)

274 
	#CAN_BS1_9TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_3
√ã

	)

275 
	#CAN_BS1_10TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_0
)√ã

	)

276 
	#CAN_BS1_11TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_1
)√ã

	)

277 
	#CAN_BS1_12TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)√ã

	)

278 
	#CAN_BS1_13TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
)√ã

	)

279 
	#CAN_BS1_14TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_0
)√ã

	)

280 
	#CAN_BS1_15TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
)√ã

	)

281 
	#CAN_BS1_16TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1
√ã

	)

289 
	#CAN_BS2_1TQ
 0x00000000U

	)

290 
	#CAN_BS2_2TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2_0
√ã

	)

291 
	#CAN_BS2_3TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2_1
√ã

	)

292 
	#CAN_BS2_4TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS2_1
 | 
CAN_BTR_TS2_0
)√ã

	)

293 
	#CAN_BS2_5TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2_2
√ã

	)

294 
	#CAN_BS2_6TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS2_2
 | 
CAN_BTR_TS2_0
)√ã

	)

295 
	#CAN_BS2_7TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS2_2
 | 
CAN_BTR_TS2_1
)√ã

	)

296 
	#CAN_BS2_8TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2
√ã

	)

304 
	#CAN_FILTERMODE_IDMASK
 ((
u√∂t8_t
)0x00√ã

	)

305 
	#CAN_FILTERMODE_IDLIST
 ((
u√∂t8_t
)0x01√ã

	)

313 
	#CAN_FILTERSCALE_16BIT
 ((
u√∂t8_t
)0x00√ã

	)

314 
	#CAN_FILTERSCALE_32BIT
 ((
u√∂t8_t
)0x01√ã

	)

322 
	#CAN_FILTER_FIFO0
 ((
u√∂t8_t
)0x00√ã

	)

323 
	#CAN_FILTER_FIFO1
 ((
u√∂t8_t
)0x01√ã

	)

331 
	#CAN_ID_STD
 0x00000000U

	)

332 
	#CAN_ID_EXT
 0x00000004U

	)

340 
	#CAN_RTR_DATA
 0x00000000U

	)

341 
	#CAN_RTR_REMOTE
 0x00000002U

	)

349 
	#CAN_TXSTATUS_NOMAILBOX
 ((
u√∂t8_t
)0x04√ã

	)

357 
	#CAN_FIFO0
 ((
u√∂t8_t
)0x00√ã

	)

358 
	#CAN_FIFO1
 ((
u√∂t8_t
)0x01√ã

	)

372 
	#CAN_FLAG_RQCP0
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_RQCP0_BIT_POSITION
)√ã

	)

373 
	#CAN_FLAG_RQCP1
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_RQCP1_BIT_POSITION
)√ã

	)

374 
	#CAN_FLAG_RQCP2
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_RQCP2_BIT_POSITION
)√ã

	)

375 
	#CAN_FLAG_TXOK0
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_TXOK0_BIT_POSITION
)√ã

	)

376 
	#CAN_FLAG_TXOK1
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_TXOK1_BIT_POSITION
)√ã

	)

377 
	#CAN_FLAG_TXOK2
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_TXOK2_BIT_POSITION
)√ã

	)

378 
	#CAN_FLAG_TME0
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_TME0_BIT_POSITION
)√ã

	)

379 
	#CAN_FLAG_TME1
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_TME1_BIT_POSITION
)√ã

	)

380 
	#CAN_FLAG_TME2
 ((
u√∂t32_t
)((
TSR_REGISTER_INDEX
 << 8U√ã| 
CAN_TSR_TME2_BIT_POSITION
)√ã

	)

383 
	#CAN_FLAG_FF0
 ((
u√∂t32_t
)((
RF0R_REGISTER_INDEX
 << 8U√ã| 
CAN_RF0R_FF0_BIT_POSITION
)√ã

	)

384 
	#CAN_FLAG_FOV0
 ((
u√∂t32_t
)((
RF0R_REGISTER_INDEX
 << 8U√ã| 
CAN_RF0R_FOV0_BIT_POSITION
)√ã

	)

386 
	#CAN_FLAG_FF1
 ((
u√∂t32_t
)((
RF1R_REGISTER_INDEX
 << 8U√ã| 
CAN_RF1R_FF1_BIT_POSITION
)√ã

	)

387 
	#CAN_FLAG_FOV1
 ((
u√∂t32_t
)((
RF1R_REGISTER_INDEX
 << 8U√ã| 
CAN_RF1R_FOV1_BIT_POSITION
)√ã

	)

390 
	#CAN_FLAG_WKU
 ((
u√∂t32_t
)((
MSR_REGISTER_INDEX
 << 8U√ã| 
CAN_MSR_WKU_BIT_POSITION
)√ã

	)

391 
	#CAN_FLAG_SLAK
 ((
u√∂t32_t
)((
MSR_REGISTER_INDEX
 << 8U√ã| 
CAN_MSR_SLAK_BIT_POSITION
)√ã

	)

392 
	#CAN_FLAG_SLAKI
 ((
u√∂t32_t
)((
MSR_REGISTER_INDEX
 << 8U√ã| 
CAN_MSR_SLAKI_BIT_POSITION
)√ã

	)

398 
	#CAN_FLAG_EWG
 ((
u√∂t32_t
)((
ESR_REGISTER_INDEX
 << 8U√ã| 
CAN_ESR_EWG_BIT_POSITION
)√ã

	)

399 
	#CAN_FLAG_EPV
 ((
u√∂t32_t
)((
ESR_REGISTER_INDEX
 << 8U√ã| 
CAN_ESR_EPV_BIT_POSITION
)√ã

	)

400 
	#CAN_FLAG_BOF
 ((
u√∂t32_t
)((
ESR_REGISTER_INDEX
 << 8U√ã| 
CAN_ESR_BOF_BIT_POSITION
)√ã

	)

409 
	#CAN_IT_TME
 ((
u√∂t32_t
)
CAN_IER_TMEIE
√ã

	)

412 
	#CAN_IT_FMP0
 ((
u√∂t32_t
)
CAN_IER_FMPIE0
√ã

	)

413 
	#CAN_IT_FF0
 ((
u√∂t32_t
)
CAN_IER_FFIE0
√ã

	)

414 
	#CAN_IT_FOV0
 ((
u√∂t32_t
)
CAN_IER_FOVIE0
√ã

	)

415 
	#CAN_IT_FMP1
 ((
u√∂t32_t
)
CAN_IER_FMPIE1
√ã

	)

416 
	#CAN_IT_FF1
 ((
u√∂t32_t
)
CAN_IER_FFIE1
√ã

	)

417 
	#CAN_IT_FOV1
 ((
u√∂t32_t
)
CAN_IER_FOVIE1
√ã

	)

420 
	#CAN_IT_WKU
 ((
u√∂t32_t
)
CAN_IER_WKUIE
√ã

	)

421 
	#CAN_IT_SLK
 ((
u√∂t32_t
)
CAN_IER_SLKIE
√ã

	)

424 
	#CAN_IT_EWG
 ((
u√∂t32_t
)
CAN_IER_EWGIE
√ã

	)

425 
	#CAN_IT_EPV
 ((
u√∂t32_t
)
CAN_IER_EPVIE
√ã

	)

426 
	#CAN_IT_BOF
 ((
u√∂t32_t
)
CAN_IER_BOFIE
√ã

	)

427 
	#CAN_IT_LEC
 ((
u√∂t32_t
)
CAN_IER_LECIE
√ã

	)

428 
	#CAN_IT_ERR
 ((
u√∂t32_t
)
CAN_IER_ERRIE
√ã

	)

442 
	#TSR_REGISTER_INDEX
 0x5U

	)

443 
	#RF0R_REGISTER_INDEX
 0x2U

	)

444 
	#RF1R_REGISTER_INDEX
 0x4U

	)

445 
	#MSR_REGISTER_INDEX
 0x1U

	)

446 
	#ESR_REGISTER_INDEX
 0x3U

	)

450 
	#CAN_TSR_RQCP0_BIT_POSITION
 0x00000000U

	)

451 
	#CAN_TSR_RQCP1_BIT_POSITION
 0x00000008U

	)

452 
	#CAN_TSR_RQCP2_BIT_POSITION
 0x00000010U

	)

453 
	#CAN_TSR_TXOK0_BIT_POSITION
 0x00000001U

	)

454 
	#CAN_TSR_TXOK1_BIT_POSITION
 0x00000009U

	)

455 
	#CAN_TSR_TXOK2_BIT_POSITION
 0x00000011U

	)

456 
	#CAN_TSR_TME0_BIT_POSITION
 0x0000001AU

	)

457 
	#CAN_TSR_TME1_BIT_POSITION
 0x0000001BU

	)

458 
	#CAN_TSR_TME2_BIT_POSITION
 0x0000001CU

	)

461 
	#CAN_RF0R_FF0_BIT_POSITION
 0x00000003U

	)

462 
	#CAN_RF0R_FOV0_BIT_POSITION
 0x00000004U

	)

464 
	#CAN_RF1R_FF1_BIT_POSITION
 0x00000003U

	)

465 
	#CAN_RF1R_FOV1_BIT_POSITION
 0x00000004U

	)

468 
	#CAN_MSR_WKU_BIT_POSITION
 0x00000003U

	)

469 
	#CAN_MSR_SLAK_BIT_POSITION
 0x00000001U

	)

470 
	#CAN_MSR_SLAKI_BIT_POSITION
 0x00000004U

	)

473 
	#CAN_ESR_EWG_BIT_POSITION
 0x00000000U

	)

474 
	#CAN_ESR_EPV_BIT_POSITION
 0x00000001U

	)

475 
	#CAN_ESR_BOF_BIT_POSITION
 0x00000002U

	)

478 
	#CAN_FLAG_MASK
 0x000000FFU

	)

481 
	#CAN_TXMAILBOX_0
 ((
u√∂t8_t
)0x00)

	)

482 
	#CAN_TXMAILBOX_1
 ((
u√∂t8_t
)0x01)

	)

483 
	#CAN_TXMAILBOX_2
 ((
u√∂t8_t
)0x02)

	)

497 
	#__HAL_CAN_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_CAN_STATE_RESET
)

	)

520 
	#__HAL_CAN_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IER
√ã|Ô£ø(__INTERRUPT__))

	)

543 
	#__HAL_CAN_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IER
√ã&Ô£ø~(__INTERRUPT__))

	)

551 
	#__HAL_CAN_MSG_PENDING
(
__HANDLE__
, 
__FIFONUMBER__
√ã(((__FIFONUMBER__√ã=Ô£ø
CAN_FIFO0
)? \

552 ((
u√∂t8_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF0R
 & 0x03U)√ã: ((u√∂t8_t)((__HANDLE__)->In¬∞‚Ñ¢Àö->
RF1R
 & 0x03U)))

	)

581 
	#__HAL_CAN_GET_FLAG
(
__HANDLE__
, 
__FLAG__
) \

582 ((((
__FLAG__
√ã>> 8U√ã=Ô£ø5U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

583 (((
__FLAG__
√ã>> 8U√ã=Ô£ø2U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF0R
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

584 (((
__FLAG__
√ã>> 8U√ã=Ô£ø4U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF1R
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

585 (((
__FLAG__
√ã>> 8U√ã=Ô£ø1U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
MSR
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

586 ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
ESR
√ã& (1U << ((
__FLAG__
√ã& 
CAN_FLAG_MASK
))√ã=Ô£ø(1U << ((__FLAG__√ã& CAN_FLAG_MASK))))

	)

611 
	#__HAL_CAN_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

612 ((((
__FLAG__
√ã>> 8U√ã=Ô£ø
TSR_REGISTER_INDEX
√ã? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): \

613 (((
__FLAG__
√ã>> 8U√ã=Ô£ø
RF0R_REGISTER_INDEX
)? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF0R
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): \

614 (((
__FLAG__
√ã>> 8U√ã=Ô£ø
RF1R_REGISTER_INDEX
)? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF1R
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): \

615 (((
__FLAG__
√ã>> 8U√ã=Ô£ø
MSR_REGISTER_INDEX
√ã? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
MSR
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): 0U)

	)

637 
	#__HAL_CAN_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IER
 & (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__)√ã? 
SET
 : 
RESET
)

	)

645 
	#__HAL_CAN_TRANSMIT_STATUS
(
__HANDLE__
, 
__TRANSMITMAILBOX__
)\

646 (((
__TRANSMITMAILBOX__
√ã=Ô£ø
CAN_TXMAILBOX_0
)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ã& (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
)) == (CAN_TSR_RQCP0 | CAN_TSR_TME0)) :\

647 ((
__TRANSMITMAILBOX__
√ã=Ô£ø
CAN_TXMAILBOX_1
)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ã& (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
)) == (CAN_TSR_RQCP1 | CAN_TSR_TME1)) :\

648 ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ã& (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
)√ã=Ô£ø(CAN_TSR_RQCP2 | CAN_TSR_TME2)))

	)

656 
	#__HAL_CAN_FIFO_RELEASE
(
__HANDLE__
, 
__FIFONUMBER__
√ã(((__FIFONUMBER__√ã=Ô£ø
CAN_FIFO0
)? \

657 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF0R
 = 
CAN_RF0R_RFOM0
√ã: ((__HANDLE__)->In¬∞‚Ñ¢Àö->
RF1R
 = 
CAN_RF1R_RFOM1
))

	)

665 
	#__HAL_CAN_CANCEL_TRANSMIT
(
__HANDLE__
, 
__TRANSMITMAILBOX__
)\

666 (((
__TRANSMITMAILBOX__
√ã=Ô£ø
CAN_TXMAILBOX_0
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
 = 
CAN_TSR_ABRQ0
) :\

667 ((
__TRANSMITMAILBOX__
√ã=Ô£ø
CAN_TXMAILBOX_1
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
 = 
CAN_TSR_ABRQ1
) :\

668 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
 = 
CAN_TSR_ABRQ2
))

	)

679 
	#__HAL_CAN_DBG_FREEZE
(
__HANDLE__
, 
__NEWSTATE__
√ã(((__NEWSTATE__√ã=Ô£ø
ENABLE
)? \

680 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
MCR
 |Ô£ø
CAN_MCR_DBF
√ã: ((__HANDLE__)->In¬∞‚Ñ¢Àö->MCR &Ô£ø~CAN_MCR_DBF))

	)

687 
	~"¬∞m32f1xx_h√Ü_Àán_ex_√Ägacy.h
"

699 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

700 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_C‚ÅÑfigF√ª√£r
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
CAN_F√ª√£rC‚ÅÑfTy‚â•Def
* 
sF√ª√£rC‚ÅÑfig
);

701 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

702 
	`HAL_CAN_M‚Ä¢In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

703 
	`HAL_CAN_M‚Ä¢DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

713 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_T√∏nsm√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
Timeout
);

714 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_T√∏nsm√¥_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

715 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_ReÀöive
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t8_t
 
FIFONumb√Æ
, 
u√∂t32_t
 
Timeout
);

716 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_ReÀöive_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t8_t
 
FIFONumb√Æ
);

717 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_S√Ä√Ø
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

718 
HAL_S√®tusTy‚â•Def
 
	`HAL_CAN_WakeUp
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

719 
	`HAL_CAN_IRQH‚Ñ¢d√Är
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

720 
	`HAL_CAN_TxC‚àÇtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

721 
	`HAL_CAN_RxC‚àÇtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

722 
	`HAL_CAN_E¬∫‚ÄπC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

732 
u√∂t32_t
 
	`HAL_CAN_G√´E¬∫‚Äπ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

733 
HAL_CAN_S√®√£Ty‚â•Def
 
	`HAL_CAN_G√´S√®√£
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

747 
	#IS_CAN_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
CAN_MODE_NORMAL
) || \

748 ((
MODE
√ã=Ô£ø
CAN_MODE_LOOPBACK
)|| \

749 ((
MODE
√ã=Ô£ø
CAN_MODE_SILENT
) || \

750 ((
MODE
√ã=Ô£ø
CAN_MODE_SILENT_LOOPBACK
))

	)

751 
	#IS_CAN_SJW
(
SJW
√ã(((SJW√ã=Ô£ø
CAN_SJW_1TQ
√ã|| ((SJW√ã=Ô£ø
CAN_SJW_2TQ
)|| \

752 ((
SJW
√ã=Ô£ø
CAN_SJW_3TQ
√ã|| ((SJW√ã=Ô£ø
CAN_SJW_4TQ
))

	)

753 
	#IS_CAN_BS1
(
BS1
√ã((BS1√ã<Ô£ø
CAN_BS1_16TQ
)

	)

754 
	#IS_CAN_BS2
(
BS2
√ã((BS2√ã<Ô£ø
CAN_BS2_8TQ
)

	)

755 
	#IS_CAN_PRESCALER
(
PRESCALER
√ã(((PRESCALER√ã>Ô£ø1U√ã&& ((PRESCALER√ã<Ô£ø1024U))

	)

757 
	#IS_CAN_FILTER_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
CAN_FILTERMODE_IDMASK
) || \

758 ((
MODE
√ã=Ô£ø
CAN_FILTERMODE_IDLIST
))

	)

759 
	#IS_CAN_FILTER_SCALE
(
SCALE
√ã(((SCALE√ã=Ô£ø
CAN_FILTERSCALE_16BIT
) || \

760 ((
SCALE
√ã=Ô£ø
CAN_FILTERSCALE_32BIT
))

	)

761 
	#IS_CAN_FILTER_FIFO
(
FIFO
√ã(((FIFO√ã=Ô£ø
CAN_FILTER_FIFO0
) || \

762 ((
FIFO
√ã=Ô£ø
CAN_FILTER_FIFO1
))

	)

763 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
√ã((BANKNUMBER√ã<Ô£ø28U)

	)

765 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
√ã((TRANSMITMAILBOX√ã<Ô£ø((
u√∂t8_t
)0x02))

	)

766 
	#IS_CAN_STDID
(
STDID
√ã((STDID√ã<Ô£ø0x00007FFU)

	)

767 
	#IS_CAN_EXTID
(
EXTID
√ã((EXTID√ã<Ô£ø0x1FFFFFFFU)

	)

768 
	#IS_CAN_DLC
(
DLC
√ã((DLC√ã<Ô£ø((
u√∂t8_t
)0x08))

	)

770 
	#IS_CAN_IDTYPE
(
IDTYPE
√ã(((IDTYPE√ã=Ô£ø
CAN_ID_STD
) || \

771 ((
IDTYPE
√ã=Ô£ø
CAN_ID_EXT
))

	)

772 
	#IS_CAN_RTR
(
RTR
√ã(((RTR√ã=Ô£ø
CAN_RTR_DATA
√ã|| ((RTR√ã=Ô£ø
CAN_RTR_REMOTE
))

	)

773 
	#IS_CAN_FIFO
(
FIFO
√ã(((FIFO√ã=Ô£ø
CAN_FIFO0
√ã|| ((FIFO√ã=Ô£ø
CAN_FIFO1
))

	)

789 #ifde‚Ä°
__Àùlu‚Ä¢lus


790 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32_assert_template.h

23 #i‚Äöde‚Ä°
__STM32_ASSERT_H


24 
	#__STM32_ASSERT_H


	)

26 #ifde‚Ä°
__Àùlu‚Ä¢lus


34 #ifde‚Ä° 
USE_FULL_ASSERT


43 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(‚Äùx¬•√ã? ()0U : 
	`as¬£œÄ_√Å√ªed
((
u√∂t8_t
 *)
__FILE__
, 
__LINE__
))

	)

45 
as¬£œÄ_√Å√ªed
(
u√∂t8_t
* 
f√ªe
, 
u√∂t32_t
 
l√∂e
);

47 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

50 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal.h

22 #i‚Äöde‚Ä°
__STM32F1xx_HAL_H


23 
	#__STM32F1xx_HAL_H


	)

25 #ifde‚Ä°
__Àùlu‚Ä¢lus


30 
	~"¬∞m32f1xx_h√Ü_c‚ÅÑf.h
"

51 
HAL_TICK_FREQ_10HZ
 = 100U,

52 
HAL_TICK_FREQ_100HZ
 = 10U,

53 
HAL_TICK_FREQ_1KHZ
 = 1U,

54 
HAL_TICK_FREQ_DEFAULT
 = 
HAL_TICK_FREQ_1KHZ


55 } 
	tHAL_TickF¬™qTy‚â•Def
;

60 
__IO
 
u√∂t32_t
 
uwTick
;

61 
u√∂t32_t
 
uwTickPrio
;

62 
HAL_TickF¬™qTy‚â•Def
 
uwTickF¬™q
;

88 
	#__HAL_DBGMCU_FREEZE_TIM2
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

89 
	#__HAL_DBGMCU_UNFREEZE_TIM2
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

94 
	#__HAL_DBGMCU_FREEZE_TIM3
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

95 
	#__HAL_DBGMCU_UNFREEZE_TIM3
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

97 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM4_STOP
)

101 
	#__HAL_DBGMCU_FREEZE_TIM4
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

102 
	#__HAL_DBGMCU_UNFREEZE_TIM4
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

105 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM5_STOP
)

109 
	#__HAL_DBGMCU_FREEZE_TIM5
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

110 
	#__HAL_DBGMCU_UNFREEZE_TIM5
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

113 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM6_STOP
)

117 
	#__HAL_DBGMCU_FREEZE_TIM6
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

118 
	#__HAL_DBGMCU_UNFREEZE_TIM6
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

121 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM7_STOP
)

125 
	#__HAL_DBGMCU_FREEZE_TIM7
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

126 
	#__HAL_DBGMCU_UNFREEZE_TIM7
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

129 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM12_STOP
)

133 
	#__HAL_DBGMCU_FREEZE_TIM12
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

134 
	#__HAL_DBGMCU_UNFREEZE_TIM12
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

137 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM13_STOP
)

141 
	#__HAL_DBGMCU_FREEZE_TIM13
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

142 
	#__HAL_DBGMCU_UNFREEZE_TIM13
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

145 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM14_STOP
)

149 
	#__HAL_DBGMCU_FREEZE_TIM14
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

150 
	#__HAL_DBGMCU_UNFREEZE_TIM14
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

156 
	#__HAL_DBGMCU_FREEZE_WWDG
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

157 
	#__HAL_DBGMCU_UNFREEZE_WWDG
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

162 
	#__HAL_DBGMCU_FREEZE_IWDG
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

163 
	#__HAL_DBGMCU_UNFREEZE_IWDG
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

168 
	#__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

169 
	#__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

171 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

175 
	#__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

176 
	#__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

179 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_CAN1_STOP
)

183 
	#__HAL_DBGMCU_FREEZE_CAN1
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

184 
	#__HAL_DBGMCU_UNFREEZE_CAN1
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

187 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_CAN2_STOP
)

191 
	#__HAL_DBGMCU_FREEZE_CAN2
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

192 
	#__HAL_DBGMCU_UNFREEZE_CAN2
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

196 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM1_STOP
)

200 
	#__HAL_DBGMCU_FREEZE_TIM1
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

201 
	#__HAL_DBGMCU_UNFREEZE_TIM1
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

204 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM8_STOP
)

208 
	#__HAL_DBGMCU_FREEZE_TIM8
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

209 
	#__HAL_DBGMCU_UNFREEZE_TIM8
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

212 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM9_STOP
)

216 
	#__HAL_DBGMCU_FREEZE_TIM9
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

217 
	#__HAL_DBGMCU_UNFREEZE_TIM9
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

220 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM10_STOP
)

224 
	#__HAL_DBGMCU_FREEZE_TIM10
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

225 
	#__HAL_DBGMCU_UNFREEZE_TIM10
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

228 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM11_STOP
)

232 
	#__HAL_DBGMCU_FREEZE_TIM11
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

233 
	#__HAL_DBGMCU_UNFREEZE_TIM11
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

237 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM15_STOP
)

241 
	#__HAL_DBGMCU_FREEZE_TIM15
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

242 
	#__HAL_DBGMCU_UNFREEZE_TIM15
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

245 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM16_STOP
)

249 
	#__HAL_DBGMCU_FREEZE_TIM16
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

250 
	#__HAL_DBGMCU_UNFREEZE_TIM16
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

253 #i‚Ä°
def√∂ed
 (
DBGMCU_CR_DBG_TIM17_STOP
)

257 
	#__HAL_DBGMCU_FREEZE_TIM17
(√ã
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

258 
	#__HAL_DBGMCU_UNFREEZE_TIM17
(√ã
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

268 
	#IS_TICKFREQ
(
FREQ
√ã(((FREQ√ã=Ô£ø
HAL_TICK_FREQ_10HZ
) || \

269 ((
FREQ
√ã=Ô£ø
HAL_TICK_FREQ_100HZ
) || \

270 ((
FREQ
√ã=Ô£ø
HAL_TICK_FREQ_1KHZ
))

	)

283 
HAL_S√®tusTy‚â•Def
 
HAL_In√¥
();

284 
HAL_S√®tusTy‚â•Def
 
HAL_DeIn√¥
();

285 
HAL_M‚Ä¢In√¥
();

286 
HAL_M‚Ä¢DeIn√¥
();

287 
HAL_S√®tusTy‚â•Def
 
HAL_In√¥Tick
(
u√∂t32_t
 
TickPri‚Äπ√¥y
);

296 
HAL_IncTick
();

297 
HAL_D√±ay
(
u√∂t32_t
 
D√±ay
);

298 
u√∂t32_t
 
HAL_G√´Tick
();

299 
u√∂t32_t
 
HAL_G√´TickPrio
();

300 
HAL_S√®tusTy‚â•Def
 
HAL_S√´TickF¬™q
(
HAL_TickF¬™qTy‚â•Def
 
F¬™q
);

301 
HAL_TickF¬™qTy‚â•Def
 
HAL_G√´TickF¬™q
();

302 
HAL_Su‚Ä¢√≠dTick
();

303 
HAL_ResumeTick
();

304 
u√∂t32_t
 
HAL_G√´H√ÜV√Æsi‚ÅÑ
();

305 
u√∂t32_t
 
HAL_G√´REVID
();

306 
u√∂t32_t
 
HAL_G√´DEVID
();

307 
u√∂t32_t
 
HAL_G√´UIDw0
();

308 
u√∂t32_t
 
HAL_G√´UIDw1
();

309 
u√∂t32_t
 
HAL_G√´UIDw2
();

310 
HAL_DBGMCU_E¬´b√ÄDBGS√Ä√ØMode
();

311 
HAL_DBGMCU_Di√üb√ÄDBGS√Ä√ØMode
();

312 
HAL_DBGMCU_E¬´b√ÄDBGSt‚Ä∫Mode
();

313 
HAL_DBGMCU_Di√üb√ÄDBGSt‚Ä∫Mode
();

314 
HAL_DBGMCU_E¬´b√ÄDBGS√®ndbyMode
();

315 
HAL_DBGMCU_Di√üb√ÄDBGS√®ndbyMode
();

352 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_adc.h

22 #i‚Äöde‚Ä°
__STM32F1xx_HAL_ADC_H


23 
	#__STM32F1xx_HAL_ADC_H


	)

25 #ifde‚Ä°
__Àùlu‚Ä¢lus


30 
	~"¬∞m32f1xx_h√Ü_def.h
"

54 
u√∂t32_t
 
D¬©aAlign
;

57 
u√∂t32_t
 
SÀánC‚ÅÑvMode
;

68 
FunÀòi‚ÅÑ√ÜS√®√£
 
C‚ÅÑt√∂uousC‚ÅÑvMode
;

71 
u√∂t32_t
 
NbrOfC‚ÅÑv√Æsi‚ÅÑ
;

74 
FunÀòi‚ÅÑ√ÜS√®√£
 
Disc‚ÅÑt√∂uousC‚ÅÑvMode
;

78 
u√∂t32_t
 
NbrOfDiscC‚ÅÑv√Æsi‚ÅÑ
;

81 
u√∂t32_t
 
Ex√£‚à´√ÜTrigC‚ÅÑv
;

85 }
	tADC_In√¥Ty‚â•Def
;

94 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
;

101 
u√∂t32_t
 
R‚Ñ¢k
;

104 
u√∂t32_t
 
Sam‚àÇ√∂gTime
;

113 }
	tADC_Ch‚Ñ¢‚àölC‚ÅÑfTy‚â•Def
;

122 
u√∂t32_t
 
W¬©chdogMode
;

124 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
;

127 
FunÀòi‚ÅÑ√ÜS√®√£
 
ITMode
;

129 
u√∂t32_t
 
HighTh¬™shÔ¨Åd
;

131 
u√∂t32_t
 
LowTh¬™shÔ¨Åd
;

133 
u√∂t32_t
 
W¬©chdogNumb√Æ
;

134 }
	tADC_A¬´logWDGC‚ÅÑfTy‚â•Def
;

140 
	#HAL_ADC_STATE_RESET
 0x00000000U

	)

141 
	#HAL_ADC_STATE_READY
 0x00000001U

	)

142 
	#HAL_ADC_STATE_BUSY_INTERNAL
 0x00000002U

	)

143 
	#HAL_ADC_STATE_TIMEOUT
 0x00000004U

	)

146 
	#HAL_ADC_STATE_ERROR_INTERNAL
 0x00000010U

	)

147 
	#HAL_ADC_STATE_ERROR_CONFIG
 0x00000020U

	)

148 
	#HAL_ADC_STATE_ERROR_DMA
 0x00000040U

	)

151 
	#HAL_ADC_STATE_REG_BUSY
 0x00000100U

	)

153 
	#HAL_ADC_STATE_REG_EOC
 0x00000200U

	)

154 
	#HAL_ADC_STATE_REG_OVR
 0x00000400U

	)

155 
	#HAL_ADC_STATE_REG_EOSMP
 0x00000800U

	)

158 
	#HAL_ADC_STATE_INJ_BUSY
 0x00001000U

	)

160 
	#HAL_ADC_STATE_INJ_EOC
 0x00002000U

	)

161 
	#HAL_ADC_STATE_INJ_JQOVF
 0x00004000U

	)

164 
	#HAL_ADC_STATE_AWD1
 0x00010000U

	)

165 
	#HAL_ADC_STATE_AWD2
 0x00020000U

	)

166 
	#HAL_ADC_STATE_AWD3
 0x00040000U

	)

169 
	#HAL_ADC_STATE_MULTIMODE_SLAVE
 0x00100000U

	)

175 
	s__ADC_H‚Ñ¢d√ÄTy‚â•Def


177 
ADC_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

179 
ADC_In√¥Ty‚â•Def
 
In√¥
;

181 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
DMA_H‚Ñ¢d√Ä
;

183 
HAL_LockTy‚â•Def
 
Lock
;

185 
__IO
 
u√∂t32_t
 
S√®√£
;

187 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

189 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

190 (* 
C‚ÅÑvC‚àÇtC√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

191 (* 
C‚ÅÑvH√ÜfC‚àÇtC√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

192 (* 
Lev√±OutOfW√∂dowC√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

193 (* 
E¬∫‚ÄπC√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

194 (* 
InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

195 (* 
M‚Ä¢In√¥C√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

196 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

198 }
	tADC_H‚Ñ¢d√ÄTy‚â•Def
;

201 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

207 
HAL_ADC_CONVERSION_COMPLETE_CB_ID
 = 0x00U,

208 
HAL_ADC_CONVERSION_HALF_CB_ID
 = 0x01U,

209 
HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID
 = 0x02U,

210 
HAL_ADC_ERROR_CB_ID
 = 0x03U,

211 
HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID
 = 0x04U,

212 
HAL_ADC_MSPINIT_CB_ID
 = 0x09U,

213 
HAL_ADC_MSPDEINIT_CB_ID
 = 0x0AU

214 } 
	tHAL_ADC_C√ÜlbackIDTy‚â•Def
;

219 (*
pADC_C√ÜlbackTy‚â•Def
)(
	tADC_H‚Ñ¢d√ÄTy‚â•Def
 *
	thadc
);

238 
	#HAL_ADC_ERROR_NONE
 0x00U

	)

239 
	#HAL_ADC_ERROR_INTERNAL
 0x01U

	)

241 
	#HAL_ADC_ERROR_OVR
 0x02U

	)

242 
	#HAL_ADC_ERROR_DMA
 0x04U

	)

244 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

245 
	#HAL_ADC_ERROR_INVALID_CALLBACK
 (0x10U√ã

	)

255 
	#ADC_DATAALIGN_RIGHT
 0x00000000U

	)

256 
	#ADC_DATAALIGN_LEFT
 ((
u√∂t32_t
)
ADC_CR2_ALIGN
)

	)

267 
	#ADC_SCAN_DISABLE
 0x00000000U

	)

268 
	#ADC_SCAN_ENABLE
 ((
u√∂t32_t
)
ADC_CR1_SCAN
)

	)

276 
	#ADC_EXTERNALTRIGCONVEDGE_NONE
 0x00000000U

	)

277 
	#ADC_EXTERNALTRIGCONVEDGE_RISING
 ((
u√∂t32_t
)
ADC_CR2_EXTTRIG
)

	)

287 
	#ADC_CHANNEL_0
 0x00000000U

	)

288 
	#ADC_CHANNEL_1
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_0
))

	)

289 
	#ADC_CHANNEL_2
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_1
 ))

	)

290 
	#ADC_CHANNEL_3
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_1
 | 
ADC_SQR3_SQ1_0
))

	)

291 
	#ADC_CHANNEL_4
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_2
 ))

	)

292 
	#ADC_CHANNEL_5
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_0
))

	)

293 
	#ADC_CHANNEL_6
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_1
 ))

	)

294 
	#ADC_CHANNEL_7
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_1
 | 
ADC_SQR3_SQ1_0
))

	)

295 
	#ADC_CHANNEL_8
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 ))

	)

296 
	#ADC_CHANNEL_9
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_0
))

	)

297 
	#ADC_CHANNEL_10
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_1
 ))

	)

298 
	#ADC_CHANNEL_11
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_1
 | 
ADC_SQR3_SQ1_0
))

	)

299 
	#ADC_CHANNEL_12
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_2
 ))

	)

300 
	#ADC_CHANNEL_13
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_0
))

	)

301 
	#ADC_CHANNEL_14
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_1
 ))

	)

302 
	#ADC_CHANNEL_15
 ((
u√∂t32_t
)‚Äì
ADC_SQR3_SQ1_3
 | 
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_1
 | 
ADC_SQR3_SQ1_0
))

	)

303 
	#ADC_CHANNEL_16
 ((
u√∂t32_t
)(
ADC_SQR3_SQ1_4
 ))

	)

304 
	#ADC_CHANNEL_17
 ((
u√∂t32_t
)(
ADC_SQR3_SQ1_4
 | 
ADC_SQR3_SQ1_0
))

	)

306 
	#ADC_CHANNEL_TEMPSENSOR
 
ADC_CHANNEL_16


	)

307 
	#ADC_CHANNEL_VREFINT
 
ADC_CHANNEL_17


	)

315 
	#ADC_SAMPLETIME_1CYCLE_5
 0x00000000U

	)

316 
	#ADC_SAMPLETIME_7CYCLES_5
 ((
u√∂t32_t
)‚Äì
ADC_SMPR2_SMP0_0
)√ã

	)

317 
	#ADC_SAMPLETIME_13CYCLES_5
 ((
u√∂t32_t
)‚Äì
ADC_SMPR2_SMP0_1
 )√ã

	)

318 
	#ADC_SAMPLETIME_28CYCLES_5
 ((
u√∂t32_t
)‚Äì
ADC_SMPR2_SMP0_1
 | 
ADC_SMPR2_SMP0_0
)√ã

	)

319 
	#ADC_SAMPLETIME_41CYCLES_5
 ((
u√∂t32_t
)(
ADC_SMPR2_SMP0_2
 )√ã

	)

320 
	#ADC_SAMPLETIME_55CYCLES_5
 ((
u√∂t32_t
)(
ADC_SMPR2_SMP0_2
 | 
ADC_SMPR2_SMP0_0
)√ã

	)

321 
	#ADC_SAMPLETIME_71CYCLES_5
 ((
u√∂t32_t
)(
ADC_SMPR2_SMP0_2
 | 
ADC_SMPR2_SMP0_1
 )√ã

	)

322 
	#ADC_SAMPLETIME_239CYCLES_5
 ((
u√∂t32_t
)(
ADC_SMPR2_SMP0_2
 | 
ADC_SMPR2_SMP0_1
 | 
ADC_SMPR2_SMP0_0
)√ã

	)

330 
	#ADC_REGULAR_RANK_1
 0x00000001U

	)

331 
	#ADC_REGULAR_RANK_2
 0x00000002U

	)

332 
	#ADC_REGULAR_RANK_3
 0x00000003U

	)

333 
	#ADC_REGULAR_RANK_4
 0x00000004U

	)

334 
	#ADC_REGULAR_RANK_5
 0x00000005U

	)

335 
	#ADC_REGULAR_RANK_6
 0x00000006U

	)

336 
	#ADC_REGULAR_RANK_7
 0x00000007U

	)

337 
	#ADC_REGULAR_RANK_8
 0x00000008U

	)

338 
	#ADC_REGULAR_RANK_9
 0x00000009U

	)

339 
	#ADC_REGULAR_RANK_10
 0x0000000AU

	)

340 
	#ADC_REGULAR_RANK_11
 0x0000000BU

	)

341 
	#ADC_REGULAR_RANK_12
 0x0000000CU

	)

342 
	#ADC_REGULAR_RANK_13
 0x0000000DU

	)

343 
	#ADC_REGULAR_RANK_14
 0x0000000EU

	)

344 
	#ADC_REGULAR_RANK_15
 0x0000000FU

	)

345 
	#ADC_REGULAR_RANK_16
 0x00000010U

	)

353 
	#ADC_ANALOGWATCHDOG_NONE
 0x00000000U

	)

354 
	#ADC_ANALOGWATCHDOG_SINGLE_REG
 ((
u√∂t32_t
)(
ADC_CR1_AWDSGL
 | 
ADC_CR1_AWDEN
))

	)

355 
	#ADC_ANALOGWATCHDOG_SINGLE_INJEC
 ((
u√∂t32_t
)(
ADC_CR1_AWDSGL
 | 
ADC_CR1_JAWDEN
))

	)

356 
	#ADC_ANALOGWATCHDOG_SINGLE_REGINJEC
 ((
u√∂t32_t
)(
ADC_CR1_AWDSGL
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
))

	)

357 
	#ADC_ANALOGWATCHDOG_ALL_REG
 ((
u√∂t32_t
)
ADC_CR1_AWDEN
)

	)

358 
	#ADC_ANALOGWATCHDOG_ALL_INJEC
 ((
u√∂t32_t
)
ADC_CR1_JAWDEN
)

	)

359 
	#ADC_ANALOGWATCHDOG_ALL_REGINJEC
 ((
u√∂t32_t
)(
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
))

	)

367 
	#ADC_REGULAR_GROUP
 ((
u√∂t32_t
)(
ADC_FLAG_EOC
))

	)

368 
	#ADC_INJECTED_GROUP
 ((
u√∂t32_t
)(
ADC_FLAG_JEOC
))

	)

369 
	#ADC_REGULAR_INJECTED_GROUP
 ((
u√∂t32_t
)(
ADC_FLAG_EOC
 | 
ADC_FLAG_JEOC
))

	)

377 
	#ADC_AWD_EVENT
 ((
u√∂t32_t
)
ADC_FLAG_AWD
√ã

	)

379 
	#ADC_AWD1_EVENT
 
ADC_AWD_EVENT


	)

387 
	#ADC_IT_EOC
 
ADC_CR1_EOCIE


	)

388 
	#ADC_IT_JEOC
 
ADC_CR1_JEOCIE


	)

389 
	#ADC_IT_AWD
 
ADC_CR1_AWDIE


	)

397 
	#ADC_FLAG_STRT
 
ADC_SR_STRT


	)

398 
	#ADC_FLAG_JSTRT
 
ADC_SR_JSTRT


	)

399 
	#ADC_FLAG_EOC
 
ADC_SR_EOC


	)

400 
	#ADC_FLAG_JEOC
 
ADC_SR_JEOC


	)

401 
	#ADC_FLAG_AWD
 
ADC_SR_AWD


	)

423 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_1CYCLE5
 14U

	)

424 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_7CYCLES5
 20U

	)

425 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_13CYCLES5
 26U

	)

426 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_28CYCLES5
 41U

	)

427 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_41CYCLES5
 54U

	)

428 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_55CYCLES5
 68U

	)

429 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_71CYCLES5
 84U

	)

430 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_239CYCLES5
 252U

	)

438 
	#ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT2
 \

439 (
ADC_SMPR2_SMP9_2
 | 
ADC_SMPR2_SMP8_2
 | 
ADC_SMPR2_SMP7_2
 | 
ADC_SMPR2_SMP6_2
 | \

440 
ADC_SMPR2_SMP5_2
 | 
ADC_SMPR2_SMP4_2
 | 
ADC_SMPR2_SMP3_2
 | 
ADC_SMPR2_SMP2_2
 | \

441 
ADC_SMPR2_SMP1_2
 | 
ADC_SMPR2_SMP0_2
)

	)

442 
	#ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT2
 \

443 (
ADC_SMPR1_SMP17_2
 | 
ADC_SMPR1_SMP16_2
 | 
ADC_SMPR1_SMP15_2
 | 
ADC_SMPR1_SMP14_2
 | \

444 
ADC_SMPR1_SMP13_2
 | 
ADC_SMPR1_SMP12_2
 | 
ADC_SMPR1_SMP11_2
 | 
ADC_SMPR1_SMP10_2
 )

	)

446 
	#ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
 \

447 (
ADC_SMPR2_SMP9_1
 | 
ADC_SMPR2_SMP8_1
 | 
ADC_SMPR2_SMP7_1
 | 
ADC_SMPR2_SMP6_1
 | \

448 
ADC_SMPR2_SMP5_1
 | 
ADC_SMPR2_SMP4_1
 | 
ADC_SMPR2_SMP3_1
 | 
ADC_SMPR2_SMP2_1
 | \

449 
ADC_SMPR2_SMP1_1
 | 
ADC_SMPR2_SMP0_1
)

	)

450 
	#ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
 \

451 (
ADC_SMPR1_SMP17_1
 | 
ADC_SMPR1_SMP16_1
 | 
ADC_SMPR1_SMP15_1
 | 
ADC_SMPR1_SMP14_1
 | \

452 
ADC_SMPR1_SMP13_1
 | 
ADC_SMPR1_SMP12_1
 | 
ADC_SMPR1_SMP11_1
 | 
ADC_SMPR1_SMP10_1
 )

	)

454 
	#ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT0
 \

455 (
ADC_SMPR2_SMP9_0
 | 
ADC_SMPR2_SMP8_0
 | 
ADC_SMPR2_SMP7_0
 | 
ADC_SMPR2_SMP6_0
 | \

456 
ADC_SMPR2_SMP5_0
 | 
ADC_SMPR2_SMP4_0
 | 
ADC_SMPR2_SMP3_0
 | 
ADC_SMPR2_SMP2_0
 | \

457 
ADC_SMPR2_SMP1_0
 | 
ADC_SMPR2_SMP0_0
)

	)

458 
	#ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
 \

459 (
ADC_SMPR1_SMP17_0
 | 
ADC_SMPR1_SMP16_0
 | 
ADC_SMPR1_SMP15_0
 | 
ADC_SMPR1_SMP14_0
 | \

460 
ADC_SMPR1_SMP13_0
 | 
ADC_SMPR1_SMP12_0
 | 
ADC_SMPR1_SMP11_0
 | 
ADC_SMPR1_SMP10_0
 )

	)

462 
	#ADC_SAMPLETIME_1CYCLE5_SMPR2ALLCHANNELS
 0x00000000U

	)

463 
	#ADC_SAMPLETIME_7CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT0
)

	)

464 
	#ADC_SAMPLETIME_13CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
)

	)

465 
	#ADC_SAMPLETIME_28CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT0
)

	)

466 
	#ADC_SAMPLETIME_41CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT2
)

	)

467 
	#ADC_SAMPLETIME_55CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT2
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT0
)

	)

468 
	#ADC_SAMPLETIME_71CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT2
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
)

	)

469 
	#ADC_SAMPLETIME_239CYCLES5_SMPR2ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT2
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT0
)

	)

471 
	#ADC_SAMPLETIME_1CYCLE5_SMPR1ALLCHANNELS
 0x00000000U

	)

472 
	#ADC_SAMPLETIME_7CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
)

	)

473 
	#ADC_SAMPLETIME_13CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
)

	)

474 
	#ADC_SAMPLETIME_28CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
)

	)

475 
	#ADC_SAMPLETIME_41CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT2
)

	)

476 
	#ADC_SAMPLETIME_55CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT2
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
)

	)

477 
	#ADC_SAMPLETIME_71CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT2
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
)

	)

478 
	#ADC_SAMPLETIME_239CYCLES5_SMPR1ALLCHANNELS
 (
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT2
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
 | 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
)

	)

484 
	#ADC_FLAG_POSTCONV_ALL
 (
ADC_FLAG_EOC
 | 
ADC_FLAG_JEOC
 | 
ADC_FLAG_AWD
 )

	)

508 
	#__HAL_ADC_ENABLE
(
__HANDLE__
) \

509 (
	`SET_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_ADON
)))

	)

516 
	#__HAL_ADC_DISABLE
(
__HANDLE__
) \

517 (
	`CLEAR_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_ADON
)))

	)

528 
	#__HAL_ADC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
) \

529 (
	`SET_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
, (
__INTERRUPT__
)))

	)

540 
	#__HAL_ADC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
) \

541 (
	`CLEAR_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
, (
__INTERRUPT__
)))

	)

552 
	#__HAL_ADC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
) \

553 (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
 & (
__INTERRUPT__
)√ã=Ô£ø(__INTERRUPT__))

	)

566 
	#__HAL_ADC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
) \

567 ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
√ã& (
__FLAG__
)√ã=Ô£ø(__FLAG__))

	)

580 
	#__HAL_ADC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

581 (
	`WRITE_REG
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
, ~(
__FLAG__
)))

	)

587 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

588 
	#__HAL_ADC_RESET_HANDLE_STATE
(
__HANDLE__
) \

590 (
__HANDLE__
)->
S√®√£
 = 
HAL_ADC_STATE_RESET
; \

591 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

592 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

593 } 0)

	)

595 
	#__HAL_ADC_RESET_HANDLE_STATE
(
__HANDLE__
) \

596 ((
__HANDLE__
)->
S√®√£
 = 
HAL_ADC_STATE_RESET
)

	)

616 
	#ADC_IS_ENABLE
(
__HANDLE__
) \

617 ((‚Äì((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 & 
ADC_CR2_ADON
) == ADC_CR2_ADON ) \

618 √ã? 
SET
 : 
RESET
)

	)

626 
	#ADC_IS_SOFTWARE_START_REGULAR
(
__HANDLE__
) \

627 (
	`READ_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_EXTSEL
√ã=Ô£ø
ADC_SOFTWARE_START
)

	)

635 
	#ADC_IS_SOFTWARE_START_INJECTED
(
__HANDLE__
) \

636 (
	`READ_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_JEXTSEL
√ã=Ô£ø
ADC_INJECTED_SOFTWARE_START
)

	)

645 
	#ADC_STATE_CLR_SET
 
MODIFY_REG


	)

652 
	#ADC_CLEAR_ERRORCODE
(
__HANDLE__
) \

653 ((
__HANDLE__
)->
E¬∫‚ÄπCode
 = 
HAL_ADC_ERROR_NONE
)

	)

660 
	#ADC_SQR1_L_SHIFT
(
_NbrOfC‚ÅÑv√Æsi‚ÅÑ_
) \

661 (((
_NbrOfC‚ÅÑv√Æsi‚ÅÑ_
√ã- (
u√∂t8_t
)1√ã<< 
ADC_SQR1_L_Pos
)

	)

669 
	#ADC_SMPR1
(
_SAMPLETIME_
, 
_CHANNELNB_
) \

670 ((
_SAMPLETIME_
√ã<< (
ADC_SMPR1_SMP11_Pos
 * ((
_CHANNELNB_
√ã- 10)))

	)

678 
	#ADC_SMPR2
(
_SAMPLETIME_
, 
_CHANNELNB_
) \

679 ((
_SAMPLETIME_
√ã<< (
ADC_SMPR2_SMP1_Pos
 * (
_CHANNELNB_
)))

	)

687 
	#ADC_SQR3_RK
(
_CHANNELNB_
, 
_RANKNB_
) \

688 ((
_CHANNELNB_
√ã<< (
ADC_SQR3_SQ2_Pos
 * ((
_RANKNB_
√ã- 1)))

	)

696 
	#ADC_SQR2_RK
(
_CHANNELNB_
, 
_RANKNB_
) \

697 ((
_CHANNELNB_
√ã<< (
ADC_SQR2_SQ8_Pos
 * ((
_RANKNB_
√ã- 7)))

	)

705 
	#ADC_SQR1_RK
(
_CHANNELNB_
, 
_RANKNB_
) \

706 ((
_CHANNELNB_
√ã<< (
ADC_SQR1_SQ14_Pos
 * ((
_RANKNB_
√ã- 13)))

	)

713 
	#ADC_JSQR_JL_SHIFT
(
_JSQR_JL_
) \

714 (((
_JSQR_JL_
√ã-1√ã<< 
ADC_JSQR_JL_Pos
)

	)

726 
	#ADC_JSQR_RK_JL
(
_CHANNELNB_
, 
_RANKNB_
, 
_JSQR_JL_
) \

727 ((
_CHANNELNB_
√ã<< (
ADC_JSQR_JSQ2_Pos
 * ((4 - ((
_JSQR_JL_
√ã- (
_RANKNB_
))√ã- 1)))

	)

734 
	#ADC_CR2_CONTINUOUS
(
_CONTINUOUS_MODE_
) \

735 ((
_CONTINUOUS_MODE_
√ã<< 
ADC_CR2_CONT_Pos
)

	)

742 
	#ADC_CR1_DISCONTINUOUS_NUM
(
_NBR_DISCONTINUOUS_CONV_
) \

743 (((
_NBR_DISCONTINUOUS_CONV_
√ã- 1√ã<< 
ADC_CR1_DISCNUM_Pos
)

	)

752 
	#ADC_CR1_SCAN_SET
(
_SCAN_MODE_
) \

753 (‚Äì((
_SCAN_MODE_
√ã=Ô£ø
ADC_SCAN_ENABLE
√ã|| ((_SCAN_MODE_√ã=Ô£ø
ENABLE
) \

754 )? (
ADC_SCAN_ENABLE
√ã: (
ADC_SCAN_DISABLE
) \

755 )

	)

769 
	#ADC_CONVCYCLES_MAX_RANGE
(
__HANDLE__
) \

770 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR2
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT2
√ã=Ô£ø
RESET
) && \

771 (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR1
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT2
√ã=Ô£ø
RESET
) ) ? \

773 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR2
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
√ã=Ô£ø
RESET
) && \

774 (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR1
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
√ã=Ô£ø
RESET
) ) ? \

775 
ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_7CYCLES5
 : 
ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_28CYCLES5
) \

777 ((((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR2
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR2BIT1
√ã=Ô£ø
RESET
) && \

778 (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR1
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT1
√ã=Ô£ø
RESET
)) || \

779 ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR2
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
√ã=Ô£ø
RESET
) && \

780 (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SMPR1
 & 
ADC_SAMPLETIME_ALLCHANNELS_SMPR1BIT0
√ã=Ô£ø
RESET
))) ? \

781 
ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_71CYCLES5
 : 
ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_239CYCLES5
) \

782 )

	)

784 
	#IS_ADC_DATA_ALIGN
(
ALIGN
√ã(((ALIGN√ã=Ô£ø
ADC_DATAALIGN_RIGHT
) || \

785 ((
ALIGN
√ã=Ô£ø
ADC_DATAALIGN_LEFT
√ã)

	)

787 
	#IS_ADC_SCAN_MODE
(
SCAN_MODE
√ã(((SCAN_MODE√ã=Ô£ø
ADC_SCAN_DISABLE
) || \

788 ((
SCAN_MODE
√ã=Ô£ø
ADC_SCAN_ENABLE
√ã)

	)

790 
	#IS_ADC_EXTTRIG_EDGE
(
EDGE
√ã(((EDGE√ã=Ô£ø
ADC_EXTERNALTRIGCONVEDGE_NONE
) || \

791 ((
EDGE
√ã=Ô£ø
ADC_EXTERNALTRIGCONVEDGE_RISING
√ã)

	)

793 
	#IS_ADC_CHANNEL
(
CHANNEL
√ã(((CHANNEL√ã=Ô£ø
ADC_CHANNEL_0
) || \

794 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_1
) || \

795 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_2
) || \

796 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_3
) || \

797 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_4
) || \

798 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_5
) || \

799 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_6
) || \

800 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_7
) || \

801 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_8
) || \

802 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_9
) || \

803 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_10
) || \

804 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_11
) || \

805 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_12
) || \

806 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_13
) || \

807 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_14
) || \

808 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_15
) || \

809 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_16
) || \

810 ((
CHANNEL
√ã=Ô£ø
ADC_CHANNEL_17
√ã)

	)

812 
	#IS_ADC_SAMPLE_TIME
(
TIME
√ã(((TIME√ã=Ô£ø
ADC_SAMPLETIME_1CYCLE_5
) || \

813 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_7CYCLES_5
) || \

814 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_13CYCLES_5
) || \

815 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_28CYCLES_5
) || \

816 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_41CYCLES_5
) || \

817 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_55CYCLES_5
) || \

818 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_71CYCLES_5
) || \

819 ((
TIME
√ã=Ô£ø
ADC_SAMPLETIME_239CYCLES_5
√ã)

	)

821 
	#IS_ADC_REGULAR_RANK
(
CHANNEL
√ã(((CHANNEL√ã=Ô£ø
ADC_REGULAR_RANK_1
 ) || \

822 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_2
 ) || \

823 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_3
 ) || \

824 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_4
 ) || \

825 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_5
 ) || \

826 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_6
 ) || \

827 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_7
 ) || \

828 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_8
 ) || \

829 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_9
 ) || \

830 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_10
) || \

831 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_11
) || \

832 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_12
) || \

833 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_13
) || \

834 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_14
) || \

835 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_15
) || \

836 ((
CHANNEL
√ã=Ô£ø
ADC_REGULAR_RANK_16
√ã)

	)

838 
	#IS_ADC_ANALOG_WATCHDOG_MODE
(
WATCHDOG
√ã(((WATCHDOG√ã=Ô£ø
ADC_ANALOGWATCHDOG_NONE
) || \

839 ((
WATCHDOG
√ã=Ô£ø
ADC_ANALOGWATCHDOG_SINGLE_REG
) || \

840 ((
WATCHDOG
√ã=Ô£ø
ADC_ANALOGWATCHDOG_SINGLE_INJEC
) || \

841 ((
WATCHDOG
√ã=Ô£ø
ADC_ANALOGWATCHDOG_SINGLE_REGINJEC
) || \

842 ((
WATCHDOG
√ã=Ô£ø
ADC_ANALOGWATCHDOG_ALL_REG
) || \

843 ((
WATCHDOG
√ã=Ô£ø
ADC_ANALOGWATCHDOG_ALL_INJEC
) || \

844 ((
WATCHDOG
√ã=Ô£ø
ADC_ANALOGWATCHDOG_ALL_REGINJEC
√ã)

	)

846 
	#IS_ADC_CONVERSION_GROUP
(
CONVERSION
√ã(((CONVERSION√ã=Ô£ø
ADC_REGULAR_GROUP
) || \

847 ((
CONVERSION
√ã=Ô£ø
ADC_INJECTED_GROUP
) || \

848 ((
CONVERSION
√ã=Ô£ø
ADC_REGULAR_INJECTED_GROUP
√ã)

	)

850 
	#IS_ADC_EVENT_TYPE
(
EVENT
√ã((EVENT√ã=Ô£ø
ADC_AWD_EVENT
)

	)

857 
	#IS_ADC_RANGE
(
ADC_VALUE
√ã((ADC_VALUE√ã<Ô£ø0x0FFFU)

	)

865 
	#IS_ADC_REGULAR_NB_CONV
(
LENGTH
√ã(((LENGTH√ã>Ô£ø1U√ã&& ((LENGTH√ã<Ô£ø16U))

	)

873 
	#IS_ADC_REGULAR_DISCONT_NUMBER
(
NUMBER
√ã(((NUMBER√ã>Ô£ø1U√ã&& ((NUMBER√ã<Ô£ø8U))

	)

883 
	~"¬∞m32f1xx_h√Ü_adc_ex.h
"

896 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_In√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

897 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_DeIn√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

898 
HAL_ADC_M‚Ä¢In√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

899 
HAL_ADC_M‚Ä¢DeIn√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

901 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

903 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_Regi¬∞√ÆC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
, 
HAL_ADC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pADC_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

904 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_UnRegi¬∞√ÆC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
, 
HAL_ADC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

919 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_S√®œÄ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

920 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_St‚Ä∫
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

921 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_PÔ¨ÅlF‚ÄπC‚ÅÑv√Æsi‚ÅÑ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
Timeout
);

922 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_PÔ¨ÅlF‚ÄπEv√≠t
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
Ev√≠tTy‚â•
, u√∂t32_√†
Timeout
);

925 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_S√®œÄ_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

926 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_St‚Ä∫_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

929 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_S√®œÄ_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
* 
pD¬©a
, u√∂t32_√†
L√≠gth
);

930 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_St‚Ä∫_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

933 
u√∂t32_t
 
HAL_ADC_G√´V√Üue
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

936 
HAL_ADC_IRQH‚Ñ¢d√Är
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

937 
HAL_ADC_C‚ÅÑvC‚àÇtC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

938 
HAL_ADC_C‚ÅÑvH√ÜfC‚àÇtC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

939 
HAL_ADC_Lev√±OutOfW√∂dowC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

940 
HAL_ADC_E¬∫‚ÄπC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

950 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
ADC_Ch‚Ñ¢‚àölC‚ÅÑfTy‚â•Def
* 
sC‚ÅÑfig
);

951 
HAL_S√®tusTy‚â•Def
 
HAL_ADC_A¬´logWDGC‚ÅÑfig
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
ADC_A¬´logWDGC‚ÅÑfTy‚â•Def
* 
A¬´logWDGC‚ÅÑfig
);

961 
u√∂t32_t
 
HAL_ADC_G√´S√®√£
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

962 
u√∂t32_t
 
HAL_ADC_G√´E¬∫‚Äπ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

977 
HAL_S√®tusTy‚â•Def
 
ADC_E¬´b√Ä
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

978 
HAL_S√®tusTy‚â•Def
 
ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

979 
ADC_S√®b√ªiz¬©i‚ÅÑTime
(
u√∂t32_t
 
D√±ayUs
);

980 
ADC_DMAC‚ÅÑvC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

981 
ADC_DMAH√ÜfC‚ÅÑvC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

982 
ADC_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

996 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_adc_ex.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_ADC_EX_H


22 
	#__STM32F1xx_HAL_ADC_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

57 
u√∂t32_t
 
InjeÀòedCh‚Ñ¢‚àöl
;

64 
u√∂t32_t
 
InjeÀòedR‚Ñ¢k
;

67 
u√∂t32_t
 
InjeÀòedSam‚àÇ√∂gTime
;

76 
u√∂t32_t
 
InjeÀòedOff¬£t
;

80 
u√∂t32_t
 
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
;

85 
FunÀòi‚ÅÑ√ÜS√®√£
 
InjeÀòedDisc‚ÅÑt√∂uousC‚ÅÑvMode
;

92 
FunÀòi‚ÅÑ√ÜS√®√£
 
AutoInjeÀòedC‚ÅÑv
;

100 
u√∂t32_t
 
Ex√£‚à´√ÜTrigInjecC‚ÅÑv
;

108 }
	tADC_InjeÀòi‚ÅÑC‚ÅÑfTy‚â•Def
;

110 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

118 
u√∂t32_t
 
Mode
;

129 }
	tADC_Mu‚Ä¶iModeTy‚â•Def
;

146 
	#ADC_INJECTED_RANK_1
 0x00000001U

	)

147 
	#ADC_INJECTED_RANK_2
 0x00000002U

	)

148 
	#ADC_INJECTED_RANK_3
 0x00000003U

	)

149 
	#ADC_INJECTED_RANK_4
 0x00000004U

	)

157 
	#ADC_EXTERNALTRIGINJECCONV_EDGE_NONE
 0x00000000U

	)

158 
	#ADC_EXTERNALTRIGINJECCONV_EDGE_RISING
 ((
u√∂t32_t
)
ADC_CR2_JEXTTRIG
)

	)

170 
	#ADC_EXTERNALTRIGCONV_T1_CC1
 
ADC1_2_EXTERNALTRIG_T1_CC1


	)

171 
	#ADC_EXTERNALTRIGCONV_T1_CC2
 
ADC1_2_EXTERNALTRIG_T1_CC2


	)

172 
	#ADC_EXTERNALTRIGCONV_T2_CC2
 
ADC1_2_EXTERNALTRIG_T2_CC2


	)

173 
	#ADC_EXTERNALTRIGCONV_T3_TRGO
 
ADC1_2_EXTERNALTRIG_T3_TRGO


	)

174 
	#ADC_EXTERNALTRIGCONV_T4_CC4
 
ADC1_2_EXTERNALTRIG_T4_CC4


	)

175 
	#ADC_EXTERNALTRIGCONV_EXT_IT11
 
ADC1_2_EXTERNALTRIG_EXT_IT11


	)

177 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

179 
	#ADC_EXTERNALTRIGCONV_T2_CC3
 
ADC3_EXTERNALTRIG_T2_CC3


	)

180 
	#ADC_EXTERNALTRIGCONV_T3_CC1
 
ADC3_EXTERNALTRIG_T3_CC1


	)

181 
	#ADC_EXTERNALTRIGCONV_T5_CC1
 
ADC3_EXTERNALTRIG_T5_CC1


	)

182 
	#ADC_EXTERNALTRIGCONV_T5_CC3
 
ADC3_EXTERNALTRIG_T5_CC3


	)

183 
	#ADC_EXTERNALTRIGCONV_T8_CC1
 
ADC3_EXTERNALTRIG_T8_CC1


	)

187 
	#ADC_EXTERNALTRIGCONV_T1_CC3
 
ADC1_2_3_EXTERNALTRIG_T1_CC3


	)

189 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

200 
	#ADC_EXTERNALTRIGCONV_T8_TRGO
 
ADC1_2_EXTERNALTRIG_T8_TRGO


	)

203 
	#ADC_SOFTWARE_START
 
ADC1_2_3_SWSTART


	)

215 
	#ADC_EXTERNALTRIGINJECCONV_T2_TRGO
 
ADC1_2_EXTERNALTRIGINJEC_T2_TRGO


	)

216 
	#ADC_EXTERNALTRIGINJECCONV_T2_CC1
 
ADC1_2_EXTERNALTRIGINJEC_T2_CC1


	)

217 
	#ADC_EXTERNALTRIGINJECCONV_T3_CC4
 
ADC1_2_EXTERNALTRIGINJEC_T3_CC4


	)

218 
	#ADC_EXTERNALTRIGINJECCONV_T4_TRGO
 
ADC1_2_EXTERNALTRIGINJEC_T4_TRGO


	)

219 
	#ADC_EXTERNALTRIGINJECCONV_EXT_IT15
 
ADC1_2_EXTERNALTRIGINJEC_EXT_IT15


	)

221 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

223 
	#ADC_EXTERNALTRIGINJECCONV_T4_CC3
 
ADC3_EXTERNALTRIGINJEC_T4_CC3


	)

224 
	#ADC_EXTERNALTRIGINJECCONV_T8_CC2
 
ADC3_EXTERNALTRIGINJEC_T8_CC2


	)

225 
	#ADC_EXTERNALTRIGINJECCONV_T5_TRGO
 
ADC3_EXTERNALTRIGINJEC_T5_TRGO


	)

226 
	#ADC_EXTERNALTRIGINJECCONV_T5_CC4
 
ADC3_EXTERNALTRIGINJEC_T5_CC4


	)

230 
	#ADC_EXTERNALTRIGINJECCONV_T1_CC4
 
ADC1_2_3_EXTERNALTRIGINJEC_T1_CC4


	)

231 
	#ADC_EXTERNALTRIGINJECCONV_T1_TRGO
 
ADC1_2_3_EXTERNALTRIGINJEC_T1_TRGO


	)

233 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

244 
	#ADC_EXTERNALTRIGINJECCONV_T8_CC4
 
ADC1_2_EXTERNALTRIGINJEC_T8_CC4


	)

247 
	#ADC_INJECTED_SOFTWARE_START
 
ADC1_2_3_JSWSTART


	)

252 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

256 
	#ADC_MODE_INDEPENDENT
 0x00000000U

	)

257 
	#ADC_DUALMODE_REGSIMULT_INJECSIMULT
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_0
)√ã

	)

258 
	#ADC_DUALMODE_REGSIMULT_ALTERTRIG
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_1
 )√ã

	)

259 
	#ADC_DUALMODE_INJECSIMULT_INTERLFAST
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_1
 | 
ADC_CR1_DUALMOD_0
)√ã

	)

260 
	#ADC_DUALMODE_INJECSIMULT_INTERLSLOW
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_2
 )√ã

	)

261 
	#ADC_DUALMODE_INJECSIMULT
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_2
 | 
ADC_CR1_DUALMOD_0
)√ã

	)

262 
	#ADC_DUALMODE_REGSIMULT
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_2
 | 
ADC_CR1_DUALMOD_1
 )√ã

	)

263 
	#ADC_DUALMODE_INTERLFAST
 ((
u√∂t32_t
)‚Äì
ADC_CR1_DUALMOD_2
 | 
ADC_CR1_DUALMOD_1
 | 
ADC_CR1_DUALMOD_0
)√ã

	)

264 
	#ADC_DUALMODE_INTERLSLOW
 ((
u√∂t32_t
)(
ADC_CR1_DUALMOD_3
 )√ã

	)

265 
	#ADC_DUALMODE_ALTERTRIG
 ((
u√∂t32_t
)(
ADC_CR1_DUALMOD_3
 | 
ADC_CR1_DUALMOD_0
)√ã

	)

290 
	#ADC1_2_EXTERNALTRIG_T1_CC1
 0x00000000U

	)

291 
	#ADC1_2_EXTERNALTRIG_T1_CC2
 ((
u√∂t32_t
)‚Äì
ADC_CR2_EXTSEL_0
))

	)

292 
	#ADC1_2_EXTERNALTRIG_T2_CC2
 ((
u√∂t32_t
)‚Äì
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
))

	)

293 
	#ADC1_2_EXTERNALTRIG_T3_TRGO
 ((
u√∂t32_t
)(
ADC_CR2_EXTSEL_2
 ))

	)

294 
	#ADC1_2_EXTERNALTRIG_T4_CC4
 ((
u√∂t32_t
)(
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_0
))

	)

295 
	#ADC1_2_EXTERNALTRIG_EXT_IT11
 ((
u√∂t32_t
)(
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
 ))

	)

296 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

299 
	#ADC1_2_EXTERNALTRIG_T8_TRGO
 
ADC1_2_EXTERNALTRIG_EXT_IT11


	)

302 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

304 
	#ADC3_EXTERNALTRIG_T3_CC1
 
ADC1_2_EXTERNALTRIG_T1_CC1


	)

305 
	#ADC3_EXTERNALTRIG_T2_CC3
 
ADC1_2_EXTERNALTRIG_T1_CC2


	)

306 
	#ADC3_EXTERNALTRIG_T8_CC1
 
ADC1_2_EXTERNALTRIG_T2_CC2


	)

307 
	#ADC3_EXTERNALTRIG_T8_TRGO
 
ADC1_2_EXTERNALTRIG_T3_TRGO


	)

308 
	#ADC3_EXTERNALTRIG_T5_CC1
 
ADC1_2_EXTERNALTRIG_T4_CC4


	)

309 
	#ADC3_EXTERNALTRIG_T5_CC3
 
ADC1_2_EXTERNALTRIG_EXT_IT11


	)

313 
	#ADC1_2_3_EXTERNALTRIG_T1_CC3
 ((
u√∂t32_t
)‚Äì
ADC_CR2_EXTSEL_1
 ))

	)

314 
	#ADC1_2_3_SWSTART
 ((
u√∂t32_t
)(
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
))

	)

327 
	#ADC1_2_EXTERNALTRIGINJEC_T2_TRGO
 ((
u√∂t32_t
)‚Äì
ADC_CR2_JEXTSEL_1
 ))

	)

328 
	#ADC1_2_EXTERNALTRIGINJEC_T2_CC1
 ((
u√∂t32_t
)‚Äì
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
))

	)

329 
	#ADC1_2_EXTERNALTRIGINJEC_T3_CC4
 ((
u√∂t32_t
)(
ADC_CR2_JEXTSEL_2
 ))

	)

330 
	#ADC1_2_EXTERNALTRIGINJEC_T4_TRGO
 ((
u√∂t32_t
)(
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_0
))

	)

331 
	#ADC1_2_EXTERNALTRIGINJEC_EXT_IT15
 ((
u√∂t32_t
)(
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
 ))

	)

332 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

335 
	#ADC1_2_EXTERNALTRIGINJEC_T8_CC4
 
ADC1_2_EXTERNALTRIGINJEC_EXT_IT15


	)

338 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

340 
	#ADC3_EXTERNALTRIGINJEC_T4_CC3
 
ADC1_2_EXTERNALTRIGINJEC_T2_TRGO


	)

341 
	#ADC3_EXTERNALTRIGINJEC_T8_CC2
 
ADC1_2_EXTERNALTRIGINJEC_T2_CC1


	)

342 
	#ADC3_EXTERNALTRIGINJEC_T8_CC4
 
ADC1_2_EXTERNALTRIGINJEC_T3_CC4


	)

343 
	#ADC3_EXTERNALTRIGINJEC_T5_TRGO
 
ADC1_2_EXTERNALTRIGINJEC_T4_TRGO


	)

344 
	#ADC3_EXTERNALTRIGINJEC_T5_CC4
 
ADC1_2_EXTERNALTRIGINJEC_EXT_IT15


	)

348 
	#ADC1_2_3_EXTERNALTRIGINJEC_T1_TRGO
 0x00000000U

	)

349 
	#ADC1_2_3_EXTERNALTRIGINJEC_T1_CC4
 ((
u√∂t32_t
)‚Äì
ADC_CR2_JEXTSEL_0
))

	)

350 
	#ADC1_2_3_JSWSTART
 ((
u√∂t32_t
)(
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
))

	)

381 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

382 
	#ADC_CFGR_EXTSEL
(
__HANDLE__
, 
__EXT_TRIG_CONV__
) \

383 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
ADC3
) \

385 ‚Äì‚Äì(
__EXT_TRIG_CONV__
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T8_TRGO
 \

387 (
ADC3_EXTERNALTRIG_T8_TRGO
) \

389 (
__EXT_TRIG_CONV__
) \

392 (
__EXT_TRIG_CONV__
) \

393 )

	)

395 
	#ADC_CFGR_EXTSEL
(
__HANDLE__
, 
__EXT_TRIG_CONV__
) \

396 (
__EXT_TRIG_CONV__
)

	)

409 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

410 
	#ADC_CFGR_JEXTSEL
(
__HANDLE__
, 
__EXT_TRIG_INJECTCONV__
) \

411 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
ADC3
) \

413 ‚Äì‚Äì(
__EXT_TRIG_INJECTCONV__
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T8_CC4
 \

415 (
ADC3_EXTERNALTRIGINJEC_T8_CC4
) \

417 (
__EXT_TRIG_INJECTCONV__
) \

420 (
__EXT_TRIG_INJECTCONV__
) \

421 )

	)

423 
	#ADC_CFGR_JEXTSEL
(
__HANDLE__
, 
__EXT_TRIG_INJECTCONV__
) \

424 (
__EXT_TRIG_INJECTCONV__
)

	)

433 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

434 
	#ADC_MULTIMODE_IS_ENABLE
(
__HANDLE__
) \

435 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
ADC1
√ã|| (((__HANDLE__)->In¬∞‚Ñ¢Àö√ã=Ô£ø
ADC2
) \

437 (
ADC1
->
CR1
 & 
ADC_CR1_DUALMOD
) \

439 (
RESET
) \

440 )

	)

442 
	#ADC_MULTIMODE_IS_ENABLE
(
__HANDLE__
) \

443 (
RESET
)

	)

451 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

452 
	#ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
__HANDLE__
) \

453 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
ADC2
) \

455 ((
ADC1
->
CR1
 & 
ADC_CR1_DUALMOD
√ã=Ô£ø
RESET
) \

457 (!
RESET
) \

458 )

	)

460 
	#ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
__HANDLE__
) \

461 (!
RESET
)

	)

469 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

470 
	#ADC_MULTIMODE_AUTO_INJECTED
(
__HANDLE__
) \

471 (‚Äì(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
ADC1
√ã|| (((__HANDLE__)->In¬∞‚Ñ¢Àö√ã=Ô£ø
ADC2
) \

473 (
ADC1
->
CR1
 & 
ADC_CR1_JAUTO
) \

475 (
RESET
) \

476 )

	)

478 
	#ADC_MULTIMODE_AUTO_INJECTED
(
__HANDLE__
) \

479 (
RESET
)

	)

482 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

489 
	#ADC_COMMON_ADC_OTHER
(
__HANDLE__
, 
__HANDLE_OTHER_ADC__
) \

490 ((
__HANDLE_OTHER_ADC__
)->
In¬∞‚Ñ¢Àö
 = 
ADC2
)

	)

500 
	#ADC_MULTI_SLAVE
(
__HANDLE_MASTER__
, 
__HANDLE_SLAVE__
) \

501 ((
__HANDLE_SLAVE__
)->
In¬∞‚Ñ¢Àö
 = 
ADC2
)

	)

505 
	#IS_ADC_INJECTED_RANK
(
CHANNEL
√ã(((CHANNEL√ã=Ô£ø
ADC_INJECTED_RANK_1
) || \

506 ((
CHANNEL
√ã=Ô£ø
ADC_INJECTED_RANK_2
) || \

507 ((
CHANNEL
√ã=Ô£ø
ADC_INJECTED_RANK_3
) || \

508 ((
CHANNEL
√ã=Ô£ø
ADC_INJECTED_RANK_4
))

	)

510 
	#IS_ADC_EXTTRIGINJEC_EDGE
(
EDGE
√ã(((EDGE√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_EDGE_NONE
) || \

511 ((
EDGE
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_EDGE_RISING
))

	)

516 
	#IS_ADC_INJECTED_NB_CONV
(
LENGTH
√ã(((LENGTH√ã>Ô£ø1U√ã&& ((LENGTH√ã<Ô£ø4U))

	)

521 #i‚Ä°
def√∂ed
 (
STM32F100xB
√ã|| def√∂ed (
STM32F100xE
√ã|| def√∂ed (
STM32F101x6
√ã|| def√∂ed (
STM32F101xB
√ã|| def√∂ed (
STM32F102x6
√ã|| def√∂ed (
STM32F102xB
√ã|| def√∂ed (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

522 
	#IS_ADC_EXTTRIG
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC1
) || \

523 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC2
) || \

524 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T2_CC2
) || \

525 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T3_TRGO
) || \

526 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T4_CC4
) || \

527 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_EXT_IT11
) || \

528 ((
REGTRIG
√ã=Ô£ø
ADC_SOFTWARE_START
))

	)

530 #i‚Ä°
def√∂ed
 (
STM32F101xE
)

531 
	#IS_ADC_EXTTRIG
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC1
) || \

532 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC2
) || \

533 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T2_CC2
) || \

534 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T3_TRGO
) || \

535 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T4_CC4
) || \

536 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_EXT_IT11
) || \

537 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T8_TRGO
) || \

538 ((
REGTRIG
√ã=Ô£ø
ADC_SOFTWARE_START
))

	)

540 #i‚Ä°
def√∂ed
 (
STM32F101xG
)

541 
	#IS_ADC_EXTTRIG
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC1
) || \

542 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC2
) || \

543 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T2_CC2
) || \

544 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T3_TRGO
) || \

545 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T4_CC4
) || \

546 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_EXT_IT11
) || \

547 ((
REGTRIG
√ã=Ô£ø
ADC_SOFTWARE_START
))

	)

549 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

550 
	#IS_ADC_EXTTRIG
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC1
) || \

551 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC2
) || \

552 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T2_CC2
) || \

553 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T3_TRGO
) || \

554 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T4_CC4
) || \

555 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_EXT_IT11
) || \

556 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T3_CC1
) || \

557 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T2_CC3
) || \

558 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T8_CC1
) || \

559 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T5_CC1
) || \

560 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T5_CC3
) || \

561 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T1_CC3
) || \

562 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGCONV_T8_TRGO
) || \

563 ((
REGTRIG
√ã=Ô£ø
ADC_SOFTWARE_START
))

	)

566 #i‚Ä°
def√∂ed
 (
STM32F100xB
√ã|| def√∂ed (
STM32F100xE
√ã|| def√∂ed (
STM32F101x6
√ã|| def√∂ed (
STM32F101xB
√ã|| def√∂ed (
STM32F102x6
√ã|| def√∂ed (
STM32F102xB
√ã|| def√∂ed (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

567 
	#IS_ADC_EXTTRIGINJEC
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_TRGO
) || \

568 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_CC1
) || \

569 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T3_CC4
) || \

570 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T4_TRGO
) || \

571 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_EXT_IT15
) || \

572 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_CC4
) || \

573 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_TRGO
) || \

574 ((
REGTRIG
√ã=Ô£ø
ADC_INJECTED_SOFTWARE_START
))

	)

576 #i‚Ä°
def√∂ed
 (
STM32F101xE
)

577 
	#IS_ADC_EXTTRIGINJEC
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_TRGO
) || \

578 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_CC1
) || \

579 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T3_CC4
) || \

580 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T4_TRGO
) || \

581 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_EXT_IT15
) || \

582 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_CC4
) || \

583 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_TRGO
) || \

584 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T8_CC4
) || \

585 ((
REGTRIG
√ã=Ô£ø
ADC_INJECTED_SOFTWARE_START
))

	)

587 #i‚Ä°
def√∂ed
 (
STM32F101xG
)

588 
	#IS_ADC_EXTTRIGINJEC
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_TRGO
) || \

589 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_CC1
) || \

590 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T3_CC4
) || \

591 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T4_TRGO
) || \

592 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_EXT_IT15
) || \

593 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_CC4
) || \

594 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_TRGO
) || \

595 ((
REGTRIG
√ã=Ô£ø
ADC_INJECTED_SOFTWARE_START
))

	)

597 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

598 
	#IS_ADC_EXTTRIGINJEC
(
REGTRIG
√ã(((REGTRIG√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_TRGO
) || \

599 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T2_CC1
) || \

600 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T3_CC4
) || \

601 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T4_TRGO
) || \

602 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T5_CC4
) || \

603 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_EXT_IT15
) || \

604 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T4_CC3
) || \

605 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T8_CC2
) || \

606 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T5_TRGO
) || \

607 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T5_CC4
) || \

608 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_CC4
) || \

609 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T1_TRGO
) || \

610 ((
REGTRIG
√ã=Ô£ø
ADC_EXTERNALTRIGINJECCONV_T8_CC4
) || \

611 ((
REGTRIG
√ã=Ô£ø
ADC_INJECTED_SOFTWARE_START
))

	)

614 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

615 
	#IS_ADC_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
ADC_MODE_INDEPENDENT
) || \

616 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_REGSIMULT_INJECSIMULT
) || \

617 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_REGSIMULT_ALTERTRIG
) || \

618 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_INJECSIMULT_INTERLFAST
) || \

619 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_INJECSIMULT_INTERLSLOW
) || \

620 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_INJECSIMULT
) || \

621 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_REGSIMULT
) || \

622 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_INTERLFAST
) || \

623 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_INTERLSLOW
) || \

624 ((
MODE
√ã=Ô£ø
ADC_DUALMODE_ALTERTRIG
√ã)

	)

647 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_C√Üib√∏ti‚ÅÑ_S√®œÄ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

650 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_InjeÀòedS√®œÄ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

651 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_InjeÀòedSt‚Ä∫
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

652 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_InjeÀòedPÔ¨ÅlF‚ÄπC‚ÅÑv√Æsi‚ÅÑ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
Timeout
);

655 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_InjeÀòedS√®œÄ_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

656 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_InjeÀòedSt‚Ä∫_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

658 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

660 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_Mu‚Ä¶iModeS√®œÄ_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
, 
u√∂t32_t
 *
pD¬©a
, u√∂t32_√†
L√≠gth
);

661 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_Mu‚Ä¶iModeSt‚Ä∫_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

665 
u√∂t32_t
 
HAL_ADCEx_InjeÀòedG√´V√Üue
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, u√∂t32_√†
InjeÀòedR‚Ñ¢k
);

666 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

667 
u√∂t32_t
 
HAL_ADCEx_Mu‚Ä¶iModeG√´V√Üue
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
);

671 
HAL_ADCEx_InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
);

681 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_InjeÀòedC‚ÅÑfigCh‚Ñ¢‚àöl
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
,
ADC_InjeÀòi‚ÅÑC‚ÅÑfTy‚â•Def
* 
sC‚ÅÑfigInjeÀòed
);

682 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

683 
HAL_S√®tusTy‚â•Def
 
HAL_ADCEx_Mu‚Ä¶iModeC‚ÅÑfigCh‚Ñ¢‚àöl
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
, 
ADC_Mu‚Ä¶iModeTy‚â•Def
 *
mu‚Ä¶imode
);

703 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_can.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_CAN_H


22 
	#STM32F1xx_HAL_CAN_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

35 #i‚Ä°
def√∂ed
 (
CAN1
)

49 
HAL_CAN_STATE_RESET
 = 0x00U,

50 
HAL_CAN_STATE_READY
 = 0x01U,

51 
HAL_CAN_STATE_LISTENING
 = 0x02U,

52 
HAL_CAN_STATE_SLEEP_PENDING
 = 0x03U,

53 
HAL_CAN_STATE_SLEEP_ACTIVE
 = 0x04U,

54 
HAL_CAN_STATE_ERROR
 = 0x05U

56 } 
	tHAL_CAN_S√®√£Ty‚â•Def
;

63 
u√∂t32_t
 
P¬™sÀá√Är
;

66 
u√∂t32_t
 
Mode
;

69 
u√∂t32_t
 
SyncJumpWidth
;

73 
u√∂t32_t
 
TimeSeg1
;

76 
u√∂t32_t
 
TimeSeg2
;

79 
FunÀòi‚ÅÑ√ÜS√®√£
 
TimeTrigg√ÆedMode
;

82 
FunÀòi‚ÅÑ√ÜS√®√£
 
AutoBusOff
;

85 
FunÀòi‚ÅÑ√ÜS√®√£
 
AutoWakeUp
;

88 
FunÀòi‚ÅÑ√ÜS√®√£
 
AutoR√´√∏nsmissi‚ÅÑ
;

91 
FunÀòi‚ÅÑ√ÜS√®√£
 
ReÀöiveFifoLocked
;

94 
FunÀòi‚ÅÑ√ÜS√®√£
 
T√∏nsm√¥FifoPri‚Äπ√¥y
;

97 } 
	tCAN_In√¥Ty‚â•Def
;

104 
u√∂t32_t
 
F√ª√£rIdHigh
;

108 
u√∂t32_t
 
F√ª√£rIdLow
;

112 
u√∂t32_t
 
F√ª√£rMaskIdHigh
;

117 
u√∂t32_t
 
F√ª√£rMaskIdLow
;

122 
u√∂t32_t
 
F√ª√£rFIFOAssignm√≠t
;

125 
u√∂t32_t
 
F√ª√£rB‚Ñ¢k
;

131 
u√∂t32_t
 
F√ª√£rMode
;

134 
u√∂t32_t
 
F√ª√£rSÀá√Ä
;

137 
u√∂t32_t
 
F√ª√£rAÀòiv¬©i‚ÅÑ
;

140 
u√∂t32_t
 
S≈ìveS√®œÄF√ª√£rB‚Ñ¢k
;

147 } 
	tCAN_F√ª√£rTy‚â•Def
;

154 
u√∂t32_t
 
StdId
;

157 
u√∂t32_t
 
ExtId
;

160 
u√∂t32_t
 
IDE
;

163 
u√∂t32_t
 
RTR
;

166 
u√∂t32_t
 
DLC
;

169 
FunÀòi‚ÅÑ√ÜS√®√£
 
T√∏nsm√¥Glob√ÜTime
;

175 } 
	tCAN_TxH√≥d√ÆTy‚â•Def
;

182 
u√∂t32_t
 
StdId
;

185 
u√∂t32_t
 
ExtId
;

188 
u√∂t32_t
 
IDE
;

191 
u√∂t32_t
 
RTR
;

194 
u√∂t32_t
 
DLC
;

197 
u√∂t32_t
 
Time¬∞amp
;

201 
u√∂t32_t
 
F√ª√£rM¬©chIndex
;

204 } 
	tCAN_RxH√≥d√ÆTy‚â•Def
;

209 
	s__CAN_H‚Ñ¢d√ÄTy‚â•Def


211 
CAN_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

213 
CAN_In√¥Ty‚â•Def
 
In√¥
;

215 
__IO
 
HAL_CAN_S√®√£Ty‚â•Def
 
S√®√£
;

217 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

220 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

221 (* 
TxMa√ªbox0Com‚àÇ√´eC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

222 (* 
TxMa√ªbox1Com‚àÇ√´eC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

223 (* 
TxMa√ªbox2Com‚àÇ√´eC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

224 (* 
TxMa√ªbox0Ab‚ÄπtC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

225 (* 
TxMa√ªbox1Ab‚ÄπtC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

226 (* 
TxMa√ªbox2Ab‚ÄπtC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

227 (* 
RxFifo0MsgP√≠d√∂gC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

228 (* 
RxFifo0Fu≈íC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

229 (* 
RxFifo1MsgP√≠d√∂gC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

230 (* 
RxFifo1Fu≈íC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

231 (* 
S√Ä√ØC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

232 (* 
WakeUpFromRxMsgC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

233 (* 
E¬∫‚ÄπC√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

235 (* 
M‚Ä¢In√¥C√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

236 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

239 } 
	tCAN_H‚Ñ¢d√ÄTy‚â•Def
;

241 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

247 
HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID
 = 0x00U,

248 
HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID
 = 0x01U,

249 
HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID
 = 0x02U,

250 
HAL_CAN_TX_MAILBOX0_ABORT_CB_ID
 = 0x03U,

251 
HAL_CAN_TX_MAILBOX1_ABORT_CB_ID
 = 0x04U,

252 
HAL_CAN_TX_MAILBOX2_ABORT_CB_ID
 = 0x05U,

253 
HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID
 = 0x06U,

254 
HAL_CAN_RX_FIFO0_FULL_CB_ID
 = 0x07U,

255 
HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID
 = 0x08U,

256 
HAL_CAN_RX_FIFO1_FULL_CB_ID
 = 0x09U,

257 
HAL_CAN_SLEEP_CB_ID
 = 0x0AU,

258 
HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID
 = 0x0BU,

259 
HAL_CAN_ERROR_CB_ID
 = 0x0CU,

261 
HAL_CAN_MSPINIT_CB_ID
 = 0x0DU,

262 
HAL_CAN_MSPDEINIT_CB_ID
 = 0x0EU,

264 } 
	tHAL_CAN_C√ÜlbackIDTy‚â•Def
;

269 (*
pCAN_C√ÜlbackTy‚â•Def
)(
	tCAN_H‚Ñ¢d√ÄTy‚â•Def
 *
	thÀán
);

285 
	#HAL_CAN_ERROR_NONE
 (0x00000000U√ã

	)

286 
	#HAL_CAN_ERROR_EWG
 (0x00000001U√ã

	)

287 
	#HAL_CAN_ERROR_EPV
 (0x00000002U√ã

	)

288 
	#HAL_CAN_ERROR_BOF
 (0x00000004U√ã

	)

289 
	#HAL_CAN_ERROR_STF
 (0x00000008U√ã

	)

290 
	#HAL_CAN_ERROR_FOR
 (0x00000010U√ã

	)

291 
	#HAL_CAN_ERROR_ACK
 (0x00000020U√ã

	)

292 
	#HAL_CAN_ERROR_BR
 (0x00000040U√ã

	)

293 
	#HAL_CAN_ERROR_BD
 (0x00000080U√ã

	)

294 
	#HAL_CAN_ERROR_CRC
 (0x00000100U√ã

	)

295 
	#HAL_CAN_ERROR_RX_FOV0
 (0x00000200U√ã

	)

296 
	#HAL_CAN_ERROR_RX_FOV1
 (0x00000400U√ã

	)

297 
	#HAL_CAN_ERROR_TX_ALST0
 (0x00000800U√ã

	)

298 
	#HAL_CAN_ERROR_TX_TERR0
 (0x00001000U√ã

	)

299 
	#HAL_CAN_ERROR_TX_ALST1
 (0x00002000U√ã

	)

300 
	#HAL_CAN_ERROR_TX_TERR1
 (0x00004000U√ã

	)

301 
	#HAL_CAN_ERROR_TX_ALST2
 (0x00008000U√ã

	)

302 
	#HAL_CAN_ERROR_TX_TERR2
 (0x00010000U√ã

	)

303 
	#HAL_CAN_ERROR_TIMEOUT
 (0x00020000U√ã

	)

304 
	#HAL_CAN_ERROR_NOT_INITIALIZED
 (0x00040000U√ã

	)

305 
	#HAL_CAN_ERROR_NOT_READY
 (0x00080000U√ã

	)

306 
	#HAL_CAN_ERROR_NOT_STARTED
 (0x00100000U√ã

	)

307 
	#HAL_CAN_ERROR_PARAM
 (0x00200000U√ã

	)

309 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

310 
	#HAL_CAN_ERROR_INVALID_CALLBACK
 (0x00400000U√ã

	)

312 
	#HAL_CAN_ERROR_INTERNAL
 (0x00800000U√ã

	)

321 
	#CAN_INITSTATUS_FAILED
 (0x00000000U√ã

	)

322 
	#CAN_INITSTATUS_SUCCESS
 (0x00000001U√ã

	)

330 
	#CAN_MODE_NORMAL
 (0x00000000U√ã

	)

331 
	#CAN_MODE_LOOPBACK
 ((
u√∂t32_t
)
CAN_BTR_LBKM
√ã

	)

332 
	#CAN_MODE_SILENT
 ((
u√∂t32_t
)
CAN_BTR_SILM
√ã

	)

333 
	#CAN_MODE_SILENT_LOOPBACK
 ((
u√∂t32_t
)(
CAN_BTR_LBKM
 | 
CAN_BTR_SILM
)√ã

	)

342 
	#CAN_SJW_1TQ
 (0x00000000U√ã

	)

343 
	#CAN_SJW_2TQ
 ((
u√∂t32_t
)
CAN_BTR_SJW_0
√ã

	)

344 
	#CAN_SJW_3TQ
 ((
u√∂t32_t
)
CAN_BTR_SJW_1
√ã

	)

345 
	#CAN_SJW_4TQ
 ((
u√∂t32_t
)
CAN_BTR_SJW
√ã

	)

353 
	#CAN_BS1_1TQ
 (0x00000000U√ã

	)

354 
	#CAN_BS1_2TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_0
√ã

	)

355 
	#CAN_BS1_3TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_1
√ã

	)

356 
	#CAN_BS1_4TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)√ã

	)

357 
	#CAN_BS1_5TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_2
√ã

	)

358 
	#CAN_BS1_6TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_0
)√ã

	)

359 
	#CAN_BS1_7TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
)√ã

	)

360 
	#CAN_BS1_8TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)√ã

	)

361 
	#CAN_BS1_9TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1_3
√ã

	)

362 
	#CAN_BS1_10TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_0
)√ã

	)

363 
	#CAN_BS1_11TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_1
)√ã

	)

364 
	#CAN_BS1_12TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)√ã

	)

365 
	#CAN_BS1_13TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
)√ã

	)

366 
	#CAN_BS1_14TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_0
)√ã

	)

367 
	#CAN_BS1_15TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
)√ã

	)

368 
	#CAN_BS1_16TQ
 ((
u√∂t32_t
)
CAN_BTR_TS1
√ã

	)

376 
	#CAN_BS2_1TQ
 (0x00000000U√ã

	)

377 
	#CAN_BS2_2TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2_0
√ã

	)

378 
	#CAN_BS2_3TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2_1
√ã

	)

379 
	#CAN_BS2_4TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS2_1
 | 
CAN_BTR_TS2_0
)√ã

	)

380 
	#CAN_BS2_5TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2_2
√ã

	)

381 
	#CAN_BS2_6TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS2_2
 | 
CAN_BTR_TS2_0
)√ã

	)

382 
	#CAN_BS2_7TQ
 ((
u√∂t32_t
)(
CAN_BTR_TS2_2
 | 
CAN_BTR_TS2_1
)√ã

	)

383 
	#CAN_BS2_8TQ
 ((
u√∂t32_t
)
CAN_BTR_TS2
√ã

	)

391 
	#CAN_FILTERMODE_IDMASK
 (0x00000000U√ã

	)

392 
	#CAN_FILTERMODE_IDLIST
 (0x00000001U√ã

	)

400 
	#CAN_FILTERSCALE_16BIT
 (0x00000000U√ã

	)

401 
	#CAN_FILTERSCALE_32BIT
 (0x00000001U√ã

	)

409 
	#CAN_FILTER_DISABLE
 (0x00000000U√ã

	)

410 
	#CAN_FILTER_ENABLE
 (0x00000001U√ã

	)

418 
	#CAN_FILTER_FIFO0
 (0x00000000U√ã

	)

419 
	#CAN_FILTER_FIFO1
 (0x00000001U√ã

	)

427 
	#CAN_ID_STD
 (0x00000000U√ã

	)

428 
	#CAN_ID_EXT
 (0x00000004U√ã

	)

436 
	#CAN_RTR_DATA
 (0x00000000U√ã

	)

437 
	#CAN_RTR_REMOTE
 (0x00000002U√ã

	)

445 
	#CAN_RX_FIFO0
 (0x00000000U√ã

	)

446 
	#CAN_RX_FIFO1
 (0x00000001U√ã

	)

454 
	#CAN_TX_MAILBOX0
 (0x00000001U√ã

	)

455 
	#CAN_TX_MAILBOX1
 (0x00000002U√ã

	)

456 
	#CAN_TX_MAILBOX2
 (0x00000004U√ã

	)

465 
	#CAN_FLAG_RQCP0
 (0x00000500U√ã

	)

466 
	#CAN_FLAG_TXOK0
 (0x00000501U√ã

	)

467 
	#CAN_FLAG_ALST0
 (0x00000502U√ã

	)

468 
	#CAN_FLAG_TERR0
 (0x00000503U√ã

	)

469 
	#CAN_FLAG_RQCP1
 (0x00000508U√ã

	)

470 
	#CAN_FLAG_TXOK1
 (0x00000509U√ã

	)

471 
	#CAN_FLAG_ALST1
 (0x0000050AU√ã

	)

472 
	#CAN_FLAG_TERR1
 (0x0000050BU√ã

	)

473 
	#CAN_FLAG_RQCP2
 (0x00000510U√ã

	)

474 
	#CAN_FLAG_TXOK2
 (0x00000511U√ã

	)

475 
	#CAN_FLAG_ALST2
 (0x00000512U√ã

	)

476 
	#CAN_FLAG_TERR2
 (0x00000513U√ã

	)

477 
	#CAN_FLAG_TME0
 (0x0000051AU√ã

	)

478 
	#CAN_FLAG_TME1
 (0x0000051BU√ã

	)

479 
	#CAN_FLAG_TME2
 (0x0000051CU√ã

	)

480 
	#CAN_FLAG_LOW0
 (0x0000051DU√ã

	)

481 
	#CAN_FLAG_LOW1
 (0x0000051EU√ã

	)

482 
	#CAN_FLAG_LOW2
 (0x0000051FU√ã

	)

485 
	#CAN_FLAG_FF0
 (0x00000203U√ã

	)

486 
	#CAN_FLAG_FOV0
 (0x00000204U√ã

	)

487 
	#CAN_FLAG_FF1
 (0x00000403U√ã

	)

488 
	#CAN_FLAG_FOV1
 (0x00000404U√ã

	)

491 
	#CAN_FLAG_INAK
 (0x00000100U√ã

	)

492 
	#CAN_FLAG_SLAK
 (0x00000101U√ã

	)

493 
	#CAN_FLAG_ERRI
 (0x00000102U√ã

	)

494 
	#CAN_FLAG_WKU
 (0x00000103U√ã

	)

495 
	#CAN_FLAG_SLAKI
 (0x00000104U√ã

	)

498 
	#CAN_FLAG_EWG
 (0x00000300U√ã

	)

499 
	#CAN_FLAG_EPV
 (0x00000301U√ã

	)

500 
	#CAN_FLAG_BOF
 (0x00000302U√ã

	)

510 
	#CAN_IT_TX_MAILBOX_EMPTY
 ((
u√∂t32_t
)
CAN_IER_TMEIE
√ã

	)

513 
	#CAN_IT_RX_FIFO0_MSG_PENDING
 ((
u√∂t32_t
)
CAN_IER_FMPIE0
√ã

	)

514 
	#CAN_IT_RX_FIFO0_FULL
 ((
u√∂t32_t
)
CAN_IER_FFIE0
√ã

	)

515 
	#CAN_IT_RX_FIFO0_OVERRUN
 ((
u√∂t32_t
)
CAN_IER_FOVIE0
√ã

	)

516 
	#CAN_IT_RX_FIFO1_MSG_PENDING
 ((
u√∂t32_t
)
CAN_IER_FMPIE1
√ã

	)

517 
	#CAN_IT_RX_FIFO1_FULL
 ((
u√∂t32_t
)
CAN_IER_FFIE1
√ã

	)

518 
	#CAN_IT_RX_FIFO1_OVERRUN
 ((
u√∂t32_t
)
CAN_IER_FOVIE1
√ã

	)

521 
	#CAN_IT_WAKEUP
 ((
u√∂t32_t
)
CAN_IER_WKUIE
√ã

	)

522 
	#CAN_IT_SLEEP_ACK
 ((
u√∂t32_t
)
CAN_IER_SLKIE
√ã

	)

525 
	#CAN_IT_ERROR_WARNING
 ((
u√∂t32_t
)
CAN_IER_EWGIE
√ã

	)

526 
	#CAN_IT_ERROR_PASSIVE
 ((
u√∂t32_t
)
CAN_IER_EPVIE
√ã

	)

527 
	#CAN_IT_BUSOFF
 ((
u√∂t32_t
)
CAN_IER_BOFIE
√ã

	)

528 
	#CAN_IT_LAST_ERROR_CODE
 ((
u√∂t32_t
)
CAN_IER_LECIE
√ã

	)

529 
	#CAN_IT_ERROR
 ((
u√∂t32_t
)
CAN_IER_ERRIE
√ã

	)

547 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

548 
	#__HAL_CAN_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

549 (
__HANDLE__
)->
S√®√£
 = 
HAL_CAN_STATE_RESET
; \

550 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

551 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

552 } 0)

	)

554 
	#__HAL_CAN_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_CAN_STATE_RESET
)

	)

564 
	#__HAL_CAN_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IER
√ã|Ô£ø(__INTERRUPT__))

	)

573 
	#__HAL_CAN_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IER
√ã&Ô£ø~(__INTERRUPT__))

	)

581 
	#__HAL_CAN_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IER
√ã& (__INTERRUPT__))

	)

589 
	#__HAL_CAN_GET_FLAG
(
__HANDLE__
, 
__FLAG__
) \

590 ((((
__FLAG__
√ã>> 8U√ã=Ô£ø5U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

591 (((
__FLAG__
√ã>> 8U√ã=Ô£ø2U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF0R
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

592 (((
__FLAG__
√ã>> 8U√ã=Ô£ø4U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF1R
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

593 (((
__FLAG__
√ã>> 8U√ã=Ô£ø1U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
MSR
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))) == (1U << ((__FLAG__) & CAN_FLAG_MASK))): \

594 (((
__FLAG__
√ã>> 8U√ã=Ô£ø3U)? ((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
ESR
√ã& (1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))√ã=Ô£ø(1U << ((__FLAG__√ã& CAN_FLAG_MASK))): 0U)

	)

620 
	#__HAL_CAN_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

621 ((((
__FLAG__
√ã>> 8U√ã=Ô£ø5U)? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
TSR
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): \

622 (((
__FLAG__
√ã>> 8U√ã=Ô£ø2U)? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF0R
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): \

623 (((
__FLAG__
√ã>> 8U√ã=Ô£ø4U)? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
RF1R
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): \

624 (((
__FLAG__
√ã>> 8U√ã=Ô£ø1U)? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
MSR
√ãÔ£ø(1U << ((__FLAG__√ã& 
CAN_FLAG_MASK
))): 0U)

	)

641 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

642 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

643 
HAL_CAN_M‚Ä¢In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

644 
HAL_CAN_M‚Ä¢DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

646 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

648 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_Regi¬∞√ÆC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
HAL_CAN_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, (* 
pC√Ülback
)(CAN_H‚Ñ¢d√ÄTy‚â•De‚Ä°*
_hÀán
));

649 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_UnRegi¬∞√ÆC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
HAL_CAN_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

662 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_C‚ÅÑfigF√ª√£r
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
CAN_F√ª√£rTy‚â•Def
 *
sF√ª√£rC‚ÅÑfig
);

674 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_S√®œÄ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

675 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_St‚Ä∫
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

676 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_Reque¬∞S√Ä√Ø
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

677 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_WakeUp
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

678 
u√∂t32_t
 
HAL_CAN_IsS√Ä√ØAÀòive
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

679 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_AddTxMes√üge
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
CAN_TxH√≥d√ÆTy‚â•Def
 *
pH√≥d√Æ
, 
u√∂t8_t
 
aD¬©a
[], 
u√∂t32_t
 *
pTxMa√ªbox
);

680 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_Ab‚ÄπtTxReque¬∞
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
TxMa√ªboxes
);

681 
u√∂t32_t
 
HAL_CAN_G√´TxMa√ªboxesF¬™eLev√±
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

682 
u√∂t32_t
 
HAL_CAN_IsTxMes√ügeP√≠d√∂g
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, u√∂t32_√†
TxMa√ªboxes
);

683 
u√∂t32_t
 
HAL_CAN_G√´TxTime¬∞amp
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, u√∂t32_√†
TxMa√ªbox
);

684 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_G√´RxMes√üge
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
RxFifo
, 
CAN_RxH√≥d√ÆTy‚â•Def
 *
pH√≥d√Æ
, 
u√∂t8_t
 
aD¬©a
[]);

685 
u√∂t32_t
 
HAL_CAN_G√´RxFifoF√ªlLev√±
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, u√∂t32_√†
RxFifo
);

696 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_AÀòiv¬©eN≈∏ifiÀáti‚ÅÑ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
AÀòiveITs
);

697 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_D√≥Àòiv¬©eN≈∏ifiÀáti‚ÅÑ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
I¬´ÀòiveITs
);

698 
HAL_CAN_IRQH‚Ñ¢d√Är
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

710 
HAL_CAN_TxMa√ªbox0Com‚àÇ√´eC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

711 
HAL_CAN_TxMa√ªbox1Com‚àÇ√´eC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

712 
HAL_CAN_TxMa√ªbox2Com‚àÇ√´eC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

713 
HAL_CAN_TxMa√ªbox0Ab‚ÄπtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

714 
HAL_CAN_TxMa√ªbox1Ab‚ÄπtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

715 
HAL_CAN_TxMa√ªbox2Ab‚ÄπtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

716 
HAL_CAN_RxFifo0MsgP√≠d√∂gC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

717 
HAL_CAN_RxFifo0Fu≈íC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

718 
HAL_CAN_RxFifo1MsgP√≠d√∂gC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

719 
HAL_CAN_RxFifo1Fu≈íC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

720 
HAL_CAN_S√Ä√ØC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

721 
HAL_CAN_WakeUpFromRxMsgC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

722 
HAL_CAN_E¬∫‚ÄπC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

733 
HAL_CAN_S√®√£Ty‚â•Def
 
HAL_CAN_G√´S√®√£
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

734 
u√∂t32_t
 
HAL_CAN_G√´E¬∫‚Äπ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

735 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_Re¬£tE¬∫‚Äπ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
);

767 
	#CAN_FLAG_MASK
 (0x000000FFU)

	)

777 
	#IS_CAN_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
CAN_MODE_NORMAL
) || \

778 ((
MODE
√ã=Ô£ø
CAN_MODE_LOOPBACK
)|| \

779 ((
MODE
√ã=Ô£ø
CAN_MODE_SILENT
) || \

780 ((
MODE
√ã=Ô£ø
CAN_MODE_SILENT_LOOPBACK
))

	)

781 
	#IS_CAN_SJW
(
SJW
√ã(((SJW√ã=Ô£ø
CAN_SJW_1TQ
√ã|| ((SJW√ã=Ô£ø
CAN_SJW_2TQ
) || \

782 ((
SJW
√ã=Ô£ø
CAN_SJW_3TQ
√ã|| ((SJW√ã=Ô£ø
CAN_SJW_4TQ
))

	)

783 
	#IS_CAN_BS1
(
BS1
√ã(((BS1√ã=Ô£ø
CAN_BS1_1TQ
√ã|| ((BS1√ã=Ô£ø
CAN_BS1_2TQ
) || \

784 ((
BS1
√ã=Ô£ø
CAN_BS1_3TQ
√ã|| ((BS1√ã=Ô£ø
CAN_BS1_4TQ
) || \

785 ((
BS1
√ã=Ô£ø
CAN_BS1_5TQ
√ã|| ((BS1√ã=Ô£ø
CAN_BS1_6TQ
) || \

786 ((
BS1
√ã=Ô£ø
CAN_BS1_7TQ
√ã|| ((BS1√ã=Ô£ø
CAN_BS1_8TQ
) || \

787 ((
BS1
√ã=Ô£ø
CAN_BS1_9TQ
√ã|| ((BS1√ã=Ô£ø
CAN_BS1_10TQ
)|| \

788 ((
BS1
√ã=Ô£ø
CAN_BS1_11TQ
)|| ((BS1√ã=Ô£ø
CAN_BS1_12TQ
)|| \

789 ((
BS1
√ã=Ô£ø
CAN_BS1_13TQ
)|| ((BS1√ã=Ô£ø
CAN_BS1_14TQ
)|| \

790 ((
BS1
√ã=Ô£ø
CAN_BS1_15TQ
)|| ((BS1√ã=Ô£ø
CAN_BS1_16TQ
))

	)

791 
	#IS_CAN_BS2
(
BS2
√ã(((BS2√ã=Ô£ø
CAN_BS2_1TQ
√ã|| ((BS2√ã=Ô£ø
CAN_BS2_2TQ
) || \

792 ((
BS2
√ã=Ô£ø
CAN_BS2_3TQ
√ã|| ((BS2√ã=Ô£ø
CAN_BS2_4TQ
) || \

793 ((
BS2
√ã=Ô£ø
CAN_BS2_5TQ
√ã|| ((BS2√ã=Ô£ø
CAN_BS2_6TQ
) || \

794 ((
BS2
√ã=Ô£ø
CAN_BS2_7TQ
√ã|| ((BS2√ã=Ô£ø
CAN_BS2_8TQ
))

	)

795 
	#IS_CAN_PRESCALER
(
PRESCALER
√ã(((PRESCALER√ã>Ô£ø1U√ã&& ((PRESCALER√ã<Ô£ø1024U))

	)

796 
	#IS_CAN_FILTER_ID_HALFWORD
(
HALFWORD
√ã((HALFWORD√ã<Ô£ø0xFFFFU)

	)

797 #i‚Ä° 
def√∂ed
(
CAN2
)

798 
	#IS_CAN_FILTER_BANK_DUAL
(
BANK
√ã((BANK√ã<Ô£ø27U)

	)

800 
	#IS_CAN_FILTER_BANK_SINGLE
(
BANK
√ã((BANK√ã<Ô£ø13U)

	)

801 
	#IS_CAN_FILTER_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
CAN_FILTERMODE_IDMASK
) || \

802 ((
MODE
√ã=Ô£ø
CAN_FILTERMODE_IDLIST
))

	)

803 
	#IS_CAN_FILTER_SCALE
(
SCALE
√ã(((SCALE√ã=Ô£ø
CAN_FILTERSCALE_16BIT
) || \

804 ((
SCALE
√ã=Ô£ø
CAN_FILTERSCALE_32BIT
))

	)

805 
	#IS_CAN_FILTER_ACTIVATION
(
ACTIVATION
√ã(((ACTIVATION√ã=Ô£ø
CAN_FILTER_DISABLE
) || \

806 ((
ACTIVATION
√ã=Ô£ø
CAN_FILTER_ENABLE
))

	)

807 
	#IS_CAN_FILTER_FIFO
(
FIFO
√ã(((FIFO√ã=Ô£ø
CAN_FILTER_FIFO0
) || \

808 ((
FIFO
√ã=Ô£ø
CAN_FILTER_FIFO1
))

	)

809 
	#IS_CAN_TX_MAILBOX
(
TRANSMITMAILBOX
√ã(((TRANSMITMAILBOX√ã=Ô£ø
CAN_TX_MAILBOX0
 ) || \

810 ((
TRANSMITMAILBOX
√ã=Ô£ø
CAN_TX_MAILBOX1
 ) || \

811 ((
TRANSMITMAILBOX
√ã=Ô£ø
CAN_TX_MAILBOX2
 ))

	)

812 
	#IS_CAN_TX_MAILBOX_LIST
(
TRANSMITMAILBOX
√ã((TRANSMITMAILBOX√ã<Ô£ø(
CAN_TX_MAILBOX0
 | 
CAN_TX_MAILBOX1
 | 
CAN_TX_MAILBOX2
))

	)

813 
	#IS_CAN_STDID
(
STDID
√ã((STDID√ã<Ô£ø0x7FFU)

	)

814 
	#IS_CAN_EXTID
(
EXTID
√ã((EXTID√ã<Ô£ø0x1FFFFFFFU)

	)

815 
	#IS_CAN_DLC
(
DLC
√ã((DLC√ã<Ô£ø8U)

	)

816 
	#IS_CAN_IDTYPE
(
IDTYPE
√ã(((IDTYPE√ã=Ô£ø
CAN_ID_STD
) || \

817 ((
IDTYPE
√ã=Ô£ø
CAN_ID_EXT
))

	)

818 
	#IS_CAN_RTR
(
RTR
√ã(((RTR√ã=Ô£ø
CAN_RTR_DATA
√ã|| ((RTR√ã=Ô£ø
CAN_RTR_REMOTE
))

	)

819 
	#IS_CAN_RX_FIFO
(
FIFO
√ã(((FIFO√ã=Ô£ø
CAN_RX_FIFO0
√ã|| ((FIFO√ã=Ô£ø
CAN_RX_FIFO1
))

	)

820 
	#IS_CAN_IT
(
IT
√ã((IT√ã<Ô£ø(
CAN_IT_TX_MAILBOX_EMPTY
 | 
CAN_IT_RX_FIFO0_MSG_PENDING
 | \

821 
CAN_IT_RX_FIFO0_FULL
 | 
CAN_IT_RX_FIFO0_OVERRUN
 | \

822 
CAN_IT_RX_FIFO1_MSG_PENDING
 | 
CAN_IT_RX_FIFO1_FULL
 | \

823 
CAN_IT_RX_FIFO1_OVERRUN
 | 
CAN_IT_WAKEUP
 | \

824 
CAN_IT_SLEEP_ACK
 | 
CAN_IT_ERROR_WARNING
 | \

825 
CAN_IT_ERROR_PASSIVE
 | 
CAN_IT_BUSOFF
 | \

826 
CAN_IT_LAST_ERROR_CODE
 | 
CAN_IT_ERROR
))

	)

843 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cec.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_CEC_H


22 
	#__STM32F1xx_HAL_CEC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

31 #i‚Ä°
def√∂ed
 (
CEC
)

50 
u√∂t32_t
 
Tim√∂gE¬∫‚ÄπF¬™e
;

52 
u√∂t32_t
 
P√ÆiodE¬∫‚ÄπF¬™e
;

54 
u√∂t16_t
 
OwnAdd¬™ss
;

56 
u√∂t8_t
 *
RxBuf‚Äûr
;

57 }
	tCEC_In√¥Ty‚â•Def
;

100 
HAL_CEC_STATE_RESET
 = 0x00U,

102 
HAL_CEC_STATE_READY
 = 0x20U,

104 
HAL_CEC_STATE_BUSY
 = 0x24U,

106 
HAL_CEC_STATE_BUSY_RX
 = 0x22U,

108 
HAL_CEC_STATE_BUSY_TX
 = 0x21U,

110 
HAL_CEC_STATE_BUSY_RX_TX
 = 0x23U,

112 
HAL_CEC_STATE_ERROR
 = 0x60U

113 }
	tHAL_CEC_S√®√£Ty‚â•Def
;

118 
	s__CEC_H‚Ñ¢d√ÄTy‚â•Def


120 
CEC_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

122 
CEC_In√¥Ty‚â•Def
 
In√¥
;

124 
u√∂t8_t
 *
pTxBuffP√•
;

126 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

128 
u√∂t16_t
 
RxX‚ÄûrSize
;

130 
HAL_LockTy‚â•Def
 
Lock
;

132 
HAL_CEC_S√®√£Ty‚â•Def
 
gS√®√£
;

136 
HAL_CEC_S√®√£Ty‚â•Def
 
RxS√®√£
;

139 
u√∂t32_t
 
E¬∫‚ÄπCode
;

142 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

143 (* 
TxC‚àÇtC√Ülback
√ã‚Äì
__CEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
hÀöc
);

144 (* 
RxC‚àÇtC√Ülback
√ã‚Äì
__CEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
hÀöc
, 
u√∂t32_t
 
RxF√∏meSize
);

145 (* 
E¬∫‚ÄπC√Ülback
√ã‚Äì
__CEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
hÀöc
);

147 (* 
M‚Ä¢In√¥C√Ülback
√ã‚Äì
__CEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
hÀöc
);

148 (* 
M‚Ä¢DeIn√¥C√Ülback
√ã‚Äì
__CEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
hÀöc
);

151 }
	tCEC_H‚Ñ¢d√ÄTy‚â•Def
;

153 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

159 
HAL_CEC_TX_CPLT_CB_ID
 = 0x00U,

160 
HAL_CEC_RX_CPLT_CB_ID
 = 0x01U,

161 
HAL_CEC_ERROR_CB_ID
 = 0x02U,

162 
HAL_CEC_MSPINIT_CB_ID
 = 0x03U,

163 
HAL_CEC_MSPDEINIT_CB_ID
 = 0x04U

164 }
	tHAL_CEC_C√ÜlbackIDTy‚â•Def
;

169 (*
pCEC_C√ÜlbackTy‚â•Def
)(
	tCEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
	thÀöc
);

170 (*
pCEC_RxC√ÜlbackTy‚â•Def
)(
	tCEC_H‚Ñ¢d√ÄTy‚â•Def
 * 
	thÀöc
, 
	tu√∂t32_t
 
	tRxF√∏meSize
);

184 
	#HAL_CEC_ERROR_NONE
 0x00000000U

	)

185 
	#HAL_CEC_ERROR_BTE
 
CEC_ESR_BTE


	)

186 
	#HAL_CEC_ERROR_BPE
 
CEC_ESR_BPE


	)

187 
	#HAL_CEC_ERROR_RBTFE
 
CEC_ESR_RBTFE


	)

188 
	#HAL_CEC_ERROR_SBE
 
CEC_ESR_SBE


	)

189 
	#HAL_CEC_ERROR_ACKE
 
CEC_ESR_ACKE


	)

190 
	#HAL_CEC_ERROR_LINE
 
CEC_ESR_LINE


	)

191 
	#HAL_CEC_ERROR_TBTFE
 
CEC_ESR_TBTFE


	)

192 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

193 
	#HAL_CEC_ERROR_INVALID_CALLBACK
 ((
u√∂t32_t
)0x00000080U√ã

	)

202 
	#CEC_BIT_TIMING_ERROR_MODE_STANDARD
 0x00000000U

	)

203 
	#CEC_BIT_TIMING_ERROR_MODE_ERRORFREE
 
CEC_CFGR_BTEM


	)

211 
	#CEC_BIT_PERIOD_ERROR_MODE_STANDARD
 0x00000000U

	)

212 
	#CEC_BIT_PERIOD_ERROR_MODE_FLEXIBLE
 
CEC_CFGR_BPEM


	)

220 
	#CEC_INITIATOR_LSB_POS
 4U

	)

228 
	#CEC_OWN_ADDRESS_NONE
 
CEC_OWN_ADDRESS_0


	)

229 
	#CEC_OWN_ADDRESS_0
 ((
u√∂t16_t
)0x0000U√ã

	)

230 
	#CEC_OWN_ADDRESS_1
 ((
u√∂t16_t
)0x0001U√ã

	)

231 
	#CEC_OWN_ADDRESS_2
 ((
u√∂t16_t
)0x0002U√ã

	)

232 
	#CEC_OWN_ADDRESS_3
 ((
u√∂t16_t
)0x0003U√ã

	)

233 
	#CEC_OWN_ADDRESS_4
 ((
u√∂t16_t
)0x0004U√ã

	)

234 
	#CEC_OWN_ADDRESS_5
 ((
u√∂t16_t
)0x0005U√ã

	)

235 
	#CEC_OWN_ADDRESS_6
 ((
u√∂t16_t
)0x0006U√ã

	)

236 
	#CEC_OWN_ADDRESS_7
 ((
u√∂t16_t
)0x0007U√ã

	)

237 
	#CEC_OWN_ADDRESS_8
 ((
u√∂t16_t
)0x0008U√ã

	)

238 
	#CEC_OWN_ADDRESS_9
 ((
u√∂t16_t
)0x0009U√ã

	)

239 
	#CEC_OWN_ADDRESS_10
 ((
u√∂t16_t
)0x000AU√ã

	)

240 
	#CEC_OWN_ADDRESS_11
 ((
u√∂t16_t
)0x000BU√ã

	)

241 
	#CEC_OWN_ADDRESS_12
 ((
u√∂t16_t
)0x000CU√ã

	)

242 
	#CEC_OWN_ADDRESS_13
 ((
u√∂t16_t
)0x000DU√ã

	)

243 
	#CEC_OWN_ADDRESS_14
 ((
u√∂t16_t
)0x000EU√ã

	)

244 
	#CEC_OWN_ADDRESS_15
 ((
u√∂t16_t
)0x000FU√ã

	)

252 
	#CEC_IT_IE
 
CEC_CFGR_IE


	)

260 
	#CEC_FLAG_TSOM
 
CEC_CSR_TSOM


	)

261 
	#CEC_FLAG_TEOM
 
CEC_CSR_TEOM


	)

262 
	#CEC_FLAG_TERR
 
CEC_CSR_TERR


	)

263 
	#CEC_FLAG_TBTRF
 
CEC_CSR_TBTRF


	)

264 
	#CEC_FLAG_RSOM
 
CEC_CSR_RSOM


	)

265 
	#CEC_FLAG_REOM
 
CEC_CSR_REOM


	)

266 
	#CEC_FLAG_RERR
 
CEC_CSR_RERR


	)

267 
	#CEC_FLAG_RBTF
 
CEC_CSR_RBTF


	)

285 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

286 
	#__HAL_CEC_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

287 (
__HANDLE__
)->
gS√®√£
 = 
HAL_CEC_STATE_RESET
; \

288 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_CEC_STATE_RESET
; \

289 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

290 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

291 } 0)

	)

293 
	#__HAL_CEC_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

294 (
__HANDLE__
)->
gS√®√£
 = 
HAL_CEC_STATE_RESET
; \

295 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_CEC_STATE_RESET
; \

296 } 0)

	)

308 
	#__HAL_CEC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã
	`READ_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CSR
,(__FLAG__))

	)

320 
	#__HAL_CEC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

322 
u√∂t32_t
 
tmp
 = 0x0U; \

323 
tmp
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CSR
 & 0x00000002U; \

324 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CSR
 &Ô£ø(
u√∂t32_t
)(((~(u√∂t32_t)(
__FLAG__
)√ã& 0xFFFFFFFCU√ã| 
tmp
);\

325 } 0U)

	)

334 
	#__HAL_CEC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFGR
, (__INTERRUPT__))

	)

343 
	#__HAL_CEC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFGR
, (__INTERRUPT__))

	)

352 
	#__HAL_CEC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`READ_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFGR
, (__INTERRUPT__))

	)

358 
	#__HAL_CEC_ENABLE
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFGR
, 
CEC_CFGR_PE
)

	)

364 
	#__HAL_CEC_DISABLE
(
__HANDLE__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFGR
, 
CEC_CFGR_PE
)

	)

370 
	#__HAL_CEC_FIRST_BYTE_TX_SET
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_CSR_TSOM
)

	)

376 
	#__HAL_CEC_LAST_BYTE_TX_SET
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_CSR_TEOM
)

	)

382 
	#__HAL_CEC_GET_TRANSMISSION_START_FLAG
(
__HANDLE__
√ã
	`READ_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_CSR_TSOM
)

	)

388 
	#__HAL_CEC_GET_TRANSMISSION_END_FLAG
(
__HANDLE__
√ã
	`READ_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_CSR_TEOM
)

	)

394 
	#__HAL_CEC_CLEAR_OAR
(
__HANDLE__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
OAR
, 
CEC_OAR_OA
)

	)

401 
	#__HAL_CEC_SET_OAR
(
__HANDLE__
,
__ADDRESS__
√ã
	`MODIFY_REG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
OAR
, 
CEC_OAR_OA
, (__ADDRESS__));

	)

417 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_In√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

418 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_DeIn√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

419 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_S√´DeviÀöAdd¬™ss
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t16_t
 
CEC_OwnAdd¬™ss
);

420 
HAL_CEC_M‚Ä¢In√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

421 
HAL_CEC_M‚Ä¢DeIn√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

422 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

423 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_Regi¬∞√ÆC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
HAL_CEC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pCEC_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

424 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_UnRegi¬∞√ÆC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
HAL_CEC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

426 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_Regi¬∞√ÆRxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
pCEC_RxC√ÜlbackTy‚â•Def
 
pC√Ülback
);

427 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_UnRegi¬∞√ÆRxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

438 
HAL_S√®tusTy‚â•Def
 
HAL_CEC_T√∏nsm√¥_IT
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t8_t
 
In√¥√ºt‚ÄπAdd¬™ss
,u√∂t8_√†
De¬∞√∂¬©i‚ÅÑAdd¬™ss
, u√∂t8_√†*
pD¬©a
, 
u√∂t32_t
 
Size
);

439 
u√∂t32_t
 
HAL_CEC_G√´La¬∞ReÀöivedF√∏meSize
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

440 
HAL_CEC_Ch‚Ñ¢geRxBuf‚Äûr
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t8_t
* 
Rxbuf‚Äûr
);

441 
HAL_CEC_IRQH‚Ñ¢d√Är
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

442 
HAL_CEC_TxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

443 
HAL_CEC_RxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t32_t
 
RxF√∏meSize
);

444 
HAL_CEC_E¬∫‚ÄπC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

454 
HAL_CEC_S√®√£Ty‚â•Def
 
HAL_CEC_G√´S√®√£
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

455 
u√∂t32_t
 
HAL_CEC_G√´E¬∫‚Äπ
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

495 
	#IS_CEC_BIT_TIMING_ERROR_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
CEC_BIT_TIMING_ERROR_MODE_STANDARD
) || \

496 ((
MODE
√ã=Ô£ø
CEC_BIT_TIMING_ERROR_MODE_ERRORFREE
))

	)

498 
	#IS_CEC_BIT_PERIOD_ERROR_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
CEC_BIT_PERIOD_ERROR_MODE_STANDARD
) || \

499 ((
MODE
√ã=Ô£ø
CEC_BIT_PERIOD_ERROR_MODE_FLEXIBLE
))

	)

508 
	#IS_CEC_MSGSIZE
(
__SIZE__
√ã((__SIZE__√ã<Ô£ø0x10U)

	)

513 
	#IS_CEC_OWN_ADDRESS
(
__ADDRESS__
√ã((__ADDRESS__√ã<Ô£ø0x0000000FU)

	)

520 
	#IS_CEC_ADDRESS
(
__ADDRESS__
√ã((__ADDRESS__√ã<Ô£ø0x0000000FU)

	)

546 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_conf_template.h

23 #i‚Äöde‚Ä°
__STM32F1xx_HAL_CONF_H


24 
	#__STM32F1xx_HAL_CONF_H


	)

26 #ifde‚Ä°
__Àùlu‚Ä¢lus


37 
	#HAL_MODULE_ENABLED


	)

38 
	#HAL_ADC_MODULE_ENABLED


	)

39 
	#HAL_CAN_MODULE_ENABLED


	)

41 
	#HAL_CEC_MODULE_ENABLED


	)

42 
	#HAL_CORTEX_MODULE_ENABLED


	)

43 
	#HAL_CRC_MODULE_ENABLED


	)

44 
	#HAL_DAC_MODULE_ENABLED


	)

45 
	#HAL_DMA_MODULE_ENABLED


	)

46 
	#HAL_ETH_MODULE_ENABLED


	)

47 
	#HAL_EXTI_MODULE_ENABLED


	)

48 
	#HAL_FLASH_MODULE_ENABLED


	)

49 
	#HAL_GPIO_MODULE_ENABLED


	)

50 
	#HAL_HCD_MODULE_ENABLED


	)

51 
	#HAL_I2C_MODULE_ENABLED


	)

52 
	#HAL_I2S_MODULE_ENABLED


	)

53 
	#HAL_IRDA_MODULE_ENABLED


	)

54 
	#HAL_IWDG_MODULE_ENABLED


	)

55 
	#HAL_NAND_MODULE_ENABLED


	)

56 
	#HAL_NOR_MODULE_ENABLED


	)

57 
	#HAL_PCCARD_MODULE_ENABLED


	)

58 
	#HAL_PCD_MODULE_ENABLED


	)

59 
	#HAL_PWR_MODULE_ENABLED


	)

60 
	#HAL_RCC_MODULE_ENABLED


	)

61 
	#HAL_RTC_MODULE_ENABLED


	)

62 
	#HAL_SD_MODULE_ENABLED


	)

63 
	#HAL_SMARTCARD_MODULE_ENABLED


	)

64 
	#HAL_SPI_MODULE_ENABLED


	)

65 
	#HAL_SRAM_MODULE_ENABLED


	)

66 
	#HAL_TIM_MODULE_ENABLED


	)

67 
	#HAL_UART_MODULE_ENABLED


	)

68 
	#HAL_USART_MODULE_ENABLED


	)

69 
	#HAL_WWDG_MODULE_ENABLED


	)

70 
	#HAL_MMC_MODULE_ENABLED


	)

78 #i‚Ä°!
def√∂ed
 (
HSE_VALUE
)

79 #i‚Ä°
def√∂ed
(
USE_STM3210C_EVAL
)

80 
	#HSE_VALUE
 25000000U

	)

82 
	#HSE_VALUE
 8000000U

	)

86 #i‚Ä°!
def√∂ed
 (
HSE_STARTUP_TIMEOUT
)

87 
	#HSE_STARTUP_TIMEOUT
 100U

	)

95 #i‚Ä°!
def√∂ed
 (
HSI_VALUE
)

96 
	#HSI_VALUE
 8000000U

	)

102 #i‚Ä°!
def√∂ed
 (
LSI_VALUE
)

103 
	#LSI_VALUE
 40000U

	)

105 
The
 
¬™√Ü
 
v√Üue
 
may
 
v¬®y
 
d√Ø√≠d√∂g
 
‚ÅÑ
 
the
 
v¬®√ºti‚ÅÑs


106 
√∂
 
vÔ¨Å√®ge
 
‚Ñ¢d
 
√£m‚â•√∏tu¬™
. */

111 #i‚Ä°!
def√∂ed
 (
LSE_VALUE
)

112 
	#LSE_VALUE
 32768U

	)

115 #i‚Ä°!
def√∂ed
 (
LSE_STARTUP_TIMEOUT
)

116 
	#LSE_STARTUP_TIMEOUT
 5000U

	)

126 
	#VDD_VALUE
 3300U

	)

127 
	#TICK_INT_PRIORITY
 0x0FU

	)

128 
	#USE_RTOS
 0U

	)

129 
	#PREFETCH_ENABLE
 1U

	)

131 
	#USE_HAL_ADC_REGISTER_CALLBACKS
 0U

	)

132 
	#USE_HAL_CAN_REGISTER_CALLBACKS
 0U

	)

133 
	#USE_HAL_CEC_REGISTER_CALLBACKS
 0U

	)

134 
	#USE_HAL_DAC_REGISTER_CALLBACKS
 0U

	)

135 
	#USE_HAL_ETH_REGISTER_CALLBACKS
 0U

	)

136 
	#USE_HAL_HCD_REGISTER_CALLBACKS
 0U

	)

137 
	#USE_HAL_I2C_REGISTER_CALLBACKS
 0U

	)

138 
	#USE_HAL_I2S_REGISTER_CALLBACKS
 0U

	)

139 
	#USE_HAL_MMC_REGISTER_CALLBACKS
 0U

	)

140 
	#USE_HAL_NAND_REGISTER_CALLBACKS
 0U

	)

141 
	#USE_HAL_NOR_REGISTER_CALLBACKS
 0U

	)

142 
	#USE_HAL_PCCARD_REGISTER_CALLBACKS
 0U

	)

143 
	#USE_HAL_PCD_REGISTER_CALLBACKS
 0U

	)

144 
	#USE_HAL_RTC_REGISTER_CALLBACKS
 0U

	)

145 
	#USE_HAL_SD_REGISTER_CALLBACKS
 0U

	)

146 
	#USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 0U

	)

147 
	#USE_HAL_IRDA_REGISTER_CALLBACKS
 0U

	)

148 
	#USE_HAL_SRAM_REGISTER_CALLBACKS
 0U

	)

149 
	#USE_HAL_SPI_REGISTER_CALLBACKS
 0U

	)

150 
	#USE_HAL_TIM_REGISTER_CALLBACKS
 0U

	)

151 
	#USE_HAL_UART_REGISTER_CALLBACKS
 0U

	)

152 
	#USE_HAL_USART_REGISTER_CALLBACKS
 0U

	)

153 
	#USE_HAL_WWDG_REGISTER_CALLBACKS
 0U

	)

167 
	#MAC_ADDR0
 2U

	)

168 
	#MAC_ADDR1
 0U

	)

169 
	#MAC_ADDR2
 0U

	)

170 
	#MAC_ADDR3
 0U

	)

171 
	#MAC_ADDR4
 0U

	)

172 
	#MAC_ADDR5
 0U

	)

175 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

176 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

177 
	#ETH_RXBUFNB
 8U

	)

178 
	#ETH_TXBUFNB
 4U

	)

183 
	#DP83848_PHY_ADDRESS
 0x01U

	)

185 
	#PHY_RESET_DELAY
 0x000000FFU

	)

187 
	#PHY_CONFIG_DELAY
 0x00000FFFU

	)

189 
	#PHY_READ_TO
 0x0000FFFFU

	)

190 
	#PHY_WRITE_TO
 0x0000FFFFU

	)

194 
	#PHY_BCR
 ((
u√∂t16_t
)0x0000√ã

	)

195 
	#PHY_BSR
 ((
u√∂t16_t
)0x0001√ã

	)

197 
	#PHY_RESET
 ((
u√∂t16_t
)0x8000√ã

	)

198 
	#PHY_LOOPBACK
 ((
u√∂t16_t
)0x4000√ã

	)

199 
	#PHY_FULLDUPLEX_100M
 ((
u√∂t16_t
)0x2100√ã

	)

200 
	#PHY_HALFDUPLEX_100M
 ((
u√∂t16_t
)0x2000√ã

	)

201 
	#PHY_FULLDUPLEX_10M
 ((
u√∂t16_t
)0x0100√ã

	)

202 
	#PHY_HALFDUPLEX_10M
 ((
u√∂t16_t
)0x0000√ã

	)

203 
	#PHY_AUTONEGOTIATION
 ((
u√∂t16_t
)0x1000√ã

	)

204 
	#PHY_RESTART_AUTONEGOTIATION
 ((
u√∂t16_t
)0x0200√ã

	)

205 
	#PHY_POWERDOWN
 ((
u√∂t16_t
)0x0800√ã

	)

206 
	#PHY_ISOLATE
 ((
u√∂t16_t
)0x0400√ã

	)

208 
	#PHY_AUTONEGO_COMPLETE
 ((
u√∂t16_t
)0x0020√ã

	)

209 
	#PHY_LINKED_STATUS
 ((
u√∂t16_t
)0x0004√ã

	)

210 
	#PHY_JABBER_DETECTION
 ((
u√∂t16_t
)0x0002√ã

	)

214 
	#PHY_SR
 ((
u√∂t16_t
)0x0010√ã

	)

215 
	#PHY_MICR
 ((
u√∂t16_t
)0x0011√ã

	)

216 
	#PHY_MISR
 ((
u√∂t16_t
)0x0012√ã

	)

218 
	#PHY_LINK_STATUS
 ((
u√∂t16_t
)0x0001√ã

	)

219 
	#PHY_SPEED_STATUS
 ((
u√∂t16_t
)0x0002√ã

	)

220 
	#PHY_DUPLEX_STATUS
 ((
u√∂t16_t
)0x0004√ã

	)

222 
	#PHY_MICR_INT_EN
 ((
u√∂t16_t
)0x0002√ã

	)

223 
	#PHY_MICR_INT_OE
 ((
u√∂t16_t
)0x0001√ã

	)

225 
	#PHY_MISR_LINK_INT_EN
 ((
u√∂t16_t
)0x0020√ã

	)

226 
	#PHY_LINK_INTERRUPT
 ((
u√∂t16_t
)0x2000√ã

	)

235 
	#USE_SPI_CRC
 1U

	)

242 #ifde‚Ä°
HAL_RCC_MODULE_ENABLED


243 
	~"¬∞m32f1xx_h√Ü_rcc.h
"

246 #ifde‚Ä°
HAL_GPIO_MODULE_ENABLED


247 
	~"¬∞m32f1xx_h√Ü_gpio.h
"

250 #ifde‚Ä°
HAL_EXTI_MODULE_ENABLED


251 
	~"¬∞m32f1xx_h√Ü_exti.h
"

254 #ifde‚Ä°
HAL_DMA_MODULE_ENABLED


255 
	~"¬∞m32f1xx_h√Ü_dma.h
"

258 #ifde‚Ä°
HAL_ETH_MODULE_ENABLED


259 
	~"¬∞m32f1xx_h√Ü_√´h.h
"

262 #ifde‚Ä°
HAL_CAN_MODULE_ENABLED


263 
	~"¬∞m32f1xx_h√Ü_Àán.h
"

266 #ifde‚Ä°
HAL_CAN_LEGACY_MODULE_ENABLED


267 
	~"Legacy/¬∞m32f1xx_h√Ü_Àán_√Ägacy.h
"

270 #ifde‚Ä°
HAL_CEC_MODULE_ENABLED


271 
	~"¬∞m32f1xx_h√Ü_Àöc.h
"

274 #ifde‚Ä°
HAL_CORTEX_MODULE_ENABLED


275 
	~"¬∞m32f1xx_h√Ü_c‚Äπ√£x.h
"

278 #ifde‚Ä°
HAL_ADC_MODULE_ENABLED


279 
	~"¬∞m32f1xx_h√Ü_adc.h
"

282 #ifde‚Ä°
HAL_CRC_MODULE_ENABLED


283 
	~"¬∞m32f1xx_h√Ü_¬∏c.h
"

286 #ifde‚Ä°
HAL_DAC_MODULE_ENABLED


287 
	~"¬∞m32f1xx_h√Ü_dac.h
"

290 #ifde‚Ä°
HAL_FLASH_MODULE_ENABLED


291 
	~"¬∞m32f1xx_h√Ü_√äash.h
"

294 #ifde‚Ä°
HAL_SRAM_MODULE_ENABLED


295 
	~"¬∞m32f1xx_h√Ü_¬ßam.h
"

298 #ifde‚Ä°
HAL_NOR_MODULE_ENABLED


299 
	~"¬∞m32f1xx_h√Ü_n‚Äπ.h
"

302 #ifde‚Ä°
HAL_I2C_MODULE_ENABLED


303 
	~"¬∞m32f1xx_h√Ü_i2c.h
"

306 #ifde‚Ä°
HAL_I2S_MODULE_ENABLED


307 
	~"¬∞m32f1xx_h√Ü_i2s.h
"

310 #ifde‚Ä°
HAL_IWDG_MODULE_ENABLED


311 
	~"¬∞m32f1xx_h√Ü_iwdg.h
"

314 #ifde‚Ä°
HAL_PWR_MODULE_ENABLED


315 
	~"¬∞m32f1xx_h√Ü_pwr.h
"

318 #ifde‚Ä°
HAL_RTC_MODULE_ENABLED


319 
	~"¬∞m32f1xx_h√Ü_œÄc.h
"

322 #ifde‚Ä°
HAL_PCCARD_MODULE_ENABLED


323 
	~"¬∞m32f1xx_h√Ü_pcÀárd.h
"

326 #ifde‚Ä°
HAL_SD_MODULE_ENABLED


327 
	~"¬∞m32f1xx_h√Ü_sd.h
"

330 #ifde‚Ä°
HAL_NAND_MODULE_ENABLED


331 
	~"¬∞m32f1xx_h√Ü_¬´nd.h
"

334 #ifde‚Ä°
HAL_SPI_MODULE_ENABLED


335 
	~"¬∞m32f1xx_h√Ü_‚Ä¢i.h
"

338 #ifde‚Ä°
HAL_TIM_MODULE_ENABLED


339 
	~"¬∞m32f1xx_h√Ü_tim.h
"

342 #ifde‚Ä°
HAL_UART_MODULE_ENABLED


343 
	~"¬∞m32f1xx_h√Ü_u¬®t.h
"

346 #ifde‚Ä°
HAL_USART_MODULE_ENABLED


347 
	~"¬∞m32f1xx_h√Ü_u√üœÄ.h
"

350 #ifde‚Ä°
HAL_IRDA_MODULE_ENABLED


351 
	~"¬∞m32f1xx_h√Ü_√∫da.h
"

354 #ifde‚Ä°
HAL_SMARTCARD_MODULE_ENABLED


355 
	~"¬∞m32f1xx_h√Ü_sm¬®tÀárd.h
"

358 #ifde‚Ä°
HAL_WWDG_MODULE_ENABLED


359 
	~"¬∞m32f1xx_h√Ü_wwdg.h
"

362 #ifde‚Ä°
HAL_PCD_MODULE_ENABLED


363 
	~"¬∞m32f1xx_h√Ü_pcd.h
"

366 #ifde‚Ä°
HAL_HCD_MODULE_ENABLED


367 
	~"¬∞m32f1xx_h√Ü_hcd.h
"

370 #ifde‚Ä°
HAL_MMC_MODULE_ENABLED


371 
	~"¬∞m32f1xx_h√Ü_mmc.h
"

375 #ifde‚Ä° 
USE_FULL_ASSERT


384 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(‚Äùx¬•√ã? ()0U : 
	`as¬£œÄ_√Å√ªed
((
u√∂t8_t
 *)
__FILE__
, 
__LINE__
))

	)

386 
as¬£œÄ_√Å√ªed
(
u√∂t8_t
* 
f√ªe
, 
u√∂t32_t
 
l√∂e
);

388 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

392 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_CORTEX_H


22 
	#__STM32F1xx_HAL_CORTEX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

43 #i‚Ä°(
__MPU_PRESENT
 == 1U)

50 
u√∂t8_t
 
E¬´b√Ä
;

52 
u√∂t8_t
 
Numb√Æ
;

54 
u√∂t32_t
 
Ba¬£Add¬™ss
;

55 
u√∂t8_t
 
Size
;

57 
u√∂t8_t
 
SubRegi‚ÅÑDi√üb√Ä
;

59 
u√∂t8_t
 
Ty‚â•ExtF√µld
;

61 
u√∂t8_t
 
AcÀössP√Æmissi‚ÅÑ
;

63 
u√∂t8_t
 
Di√üb√ÄExec
;

65 
u√∂t8_t
 
IsSh¬®√≥b√Ä
;

67 
u√∂t8_t
 
IsCach√≥b√Ä
;

69 
u√∂t8_t
 
IsBuf‚Äû√∏b√Ä
;

71 }
	tMPU_Regi‚ÅÑ_In√¥Ty‚â•Def
;

90 
	#NVIC_PRIORITYGROUP_0
 0x00000007U

	)

92 
	#NVIC_PRIORITYGROUP_1
 0x00000006U

	)

94 
	#NVIC_PRIORITYGROUP_2
 0x00000005U

	)

96 
	#NVIC_PRIORITYGROUP_3
 0x00000004U

	)

98 
	#NVIC_PRIORITYGROUP_4
 0x00000003U

	)

107 
	#SYSTICK_CLKSOURCE_HCLK_DIV8
 0x00000000U

	)

108 
	#SYSTICK_CLKSOURCE_HCLK
 0x00000004U

	)

114 #i‚Ä°(
__MPU_PRESENT
 == 1)

118 
	#MPU_HFNMI_PRIVDEF_NONE
 0x00000000U

	)

119 
	#MPU_HARDFAULT_NMI
 
MPU_CTRL_HFNMIENA_Msk


	)

120 
	#MPU_PRIVILEGED_DEFAULT
 
MPU_CTRL_PRIVDEFENA_Msk


	)

121 
	#MPU_HFNMI_PRIVDEF
 (
MPU_CTRL_HFNMIENA_Msk
 | 
MPU_CTRL_PRIVDEFENA_Msk
)

	)

130 
	#MPU_REGION_ENABLE
 ((
u√∂t8_t
)0x01)

	)

131 
	#MPU_REGION_DISABLE
 ((
u√∂t8_t
)0x00)

	)

139 
	#MPU_INSTRUCTION_ACCESS_ENABLE
 ((
u√∂t8_t
)0x00)

	)

140 
	#MPU_INSTRUCTION_ACCESS_DISABLE
 ((
u√∂t8_t
)0x01)

	)

148 
	#MPU_ACCESS_SHAREABLE
 ((
u√∂t8_t
)0x01)

	)

149 
	#MPU_ACCESS_NOT_SHAREABLE
 ((
u√∂t8_t
)0x00)

	)

157 
	#MPU_ACCESS_CACHEABLE
 ((
u√∂t8_t
)0x01)

	)

158 
	#MPU_ACCESS_NOT_CACHEABLE
 ((
u√∂t8_t
)0x00)

	)

166 
	#MPU_ACCESS_BUFFERABLE
 ((
u√∂t8_t
)0x01)

	)

167 
	#MPU_ACCESS_NOT_BUFFERABLE
 ((
u√∂t8_t
)0x00)

	)

175 
	#MPU_TEX_LEVEL0
 ((
u√∂t8_t
)0x00)

	)

176 
	#MPU_TEX_LEVEL1
 ((
u√∂t8_t
)0x01)

	)

177 
	#MPU_TEX_LEVEL2
 ((
u√∂t8_t
)0x02)

	)

185 
	#MPU_REGION_SIZE_32B
 ((
u√∂t8_t
)0x04)

	)

186 
	#MPU_REGION_SIZE_64B
 ((
u√∂t8_t
)0x05)

	)

187 
	#MPU_REGION_SIZE_128B
 ((
u√∂t8_t
)0x06)

	)

188 
	#MPU_REGION_SIZE_256B
 ((
u√∂t8_t
)0x07)

	)

189 
	#MPU_REGION_SIZE_512B
 ((
u√∂t8_t
)0x08)

	)

190 
	#MPU_REGION_SIZE_1KB
 ((
u√∂t8_t
)0x09)

	)

191 
	#MPU_REGION_SIZE_2KB
 ((
u√∂t8_t
)0x0A)

	)

192 
	#MPU_REGION_SIZE_4KB
 ((
u√∂t8_t
)0x0B)

	)

193 
	#MPU_REGION_SIZE_8KB
 ((
u√∂t8_t
)0x0C)

	)

194 
	#MPU_REGION_SIZE_16KB
 ((
u√∂t8_t
)0x0D)

	)

195 
	#MPU_REGION_SIZE_32KB
 ((
u√∂t8_t
)0x0E)

	)

196 
	#MPU_REGION_SIZE_64KB
 ((
u√∂t8_t
)0x0F)

	)

197 
	#MPU_REGION_SIZE_128KB
 ((
u√∂t8_t
)0x10)

	)

198 
	#MPU_REGION_SIZE_256KB
 ((
u√∂t8_t
)0x11)

	)

199 
	#MPU_REGION_SIZE_512KB
 ((
u√∂t8_t
)0x12)

	)

200 
	#MPU_REGION_SIZE_1MB
 ((
u√∂t8_t
)0x13)

	)

201 
	#MPU_REGION_SIZE_2MB
 ((
u√∂t8_t
)0x14)

	)

202 
	#MPU_REGION_SIZE_4MB
 ((
u√∂t8_t
)0x15)

	)

203 
	#MPU_REGION_SIZE_8MB
 ((
u√∂t8_t
)0x16)

	)

204 
	#MPU_REGION_SIZE_16MB
 ((
u√∂t8_t
)0x17)

	)

205 
	#MPU_REGION_SIZE_32MB
 ((
u√∂t8_t
)0x18)

	)

206 
	#MPU_REGION_SIZE_64MB
 ((
u√∂t8_t
)0x19)

	)

207 
	#MPU_REGION_SIZE_128MB
 ((
u√∂t8_t
)0x1A)

	)

208 
	#MPU_REGION_SIZE_256MB
 ((
u√∂t8_t
)0x1B)

	)

209 
	#MPU_REGION_SIZE_512MB
 ((
u√∂t8_t
)0x1C)

	)

210 
	#MPU_REGION_SIZE_1GB
 ((
u√∂t8_t
)0x1D)

	)

211 
	#MPU_REGION_SIZE_2GB
 ((
u√∂t8_t
)0x1E)

	)

212 
	#MPU_REGION_SIZE_4GB
 ((
u√∂t8_t
)0x1F)

	)

220 
	#MPU_REGION_NO_ACCESS
 ((
u√∂t8_t
)0x00)

	)

221 
	#MPU_REGION_PRIV_RW
 ((
u√∂t8_t
)0x01)

	)

222 
	#MPU_REGION_PRIV_RW_URO
 ((
u√∂t8_t
)0x02)

	)

223 
	#MPU_REGION_FULL_ACCESS
 ((
u√∂t8_t
)0x03)

	)

224 
	#MPU_REGION_PRIV_RO
 ((
u√∂t8_t
)0x05)

	)

225 
	#MPU_REGION_PRIV_RO_URO
 ((
u√∂t8_t
)0x06)

	)

233 
	#MPU_REGION_NUMBER0
 ((
u√∂t8_t
)0x00)

	)

234 
	#MPU_REGION_NUMBER1
 ((
u√∂t8_t
)0x01)

	)

235 
	#MPU_REGION_NUMBER2
 ((
u√∂t8_t
)0x02)

	)

236 
	#MPU_REGION_NUMBER3
 ((
u√∂t8_t
)0x03)

	)

237 
	#MPU_REGION_NUMBER4
 ((
u√∂t8_t
)0x04)

	)

238 
	#MPU_REGION_NUMBER5
 ((
u√∂t8_t
)0x05)

	)

239 
	#MPU_REGION_NUMBER6
 ((
u√∂t8_t
)0x06)

	)

240 
	#MPU_REGION_NUMBER7
 ((
u√∂t8_t
)0x07)

	)

262 
HAL_NVIC_S√´Pri‚Äπ√¥yGroup√∂g
(
u√∂t32_t
 
Pri‚Äπ√¥yGroup
);

263 
HAL_NVIC_S√´Pri‚Äπ√¥y
(
IRQn_Ty‚â•
 
IRQn
, 
u√∂t32_t
 
P¬™em¬±Pri‚Äπ√¥y
, u√∂t32_√†
SubPri‚Äπ√¥y
);

264 
HAL_NVIC_E¬´b√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
);

265 
HAL_NVIC_Di√üb√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
);

266 
HAL_NVIC_Sy¬∞emRe¬£t
();

267 
u√∂t32_t
 
HAL_SYSTICK_C‚ÅÑfig
(u√∂t32_√†
TicksNumb
);

276 
u√∂t32_t
 
HAL_NVIC_G√´Pri‚Äπ√¥yGroup√∂g
();

277 
HAL_NVIC_G√´Pri‚Äπ√¥y
(
IRQn_Ty‚â•
 
IRQn
, 
u√∂t32_t
 
Pri‚Äπ√¥yGroup
, u√∂t32_t* 
pP¬™em¬±Pri‚Äπ√¥y
, u√∂t32_t* 
pSubPri‚Äπ√¥y
);

278 
u√∂t32_t
 
HAL_NVIC_G√´P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
);

279 
HAL_NVIC_S√´P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
);

280 
HAL_NVIC_C√Ä¬®P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
);

281 
u√∂t32_t
 
HAL_NVIC_G√´AÀòive
(
IRQn_Ty‚â•
 
IRQn
);

282 
HAL_SYSTICK_CLKSourÀöC‚ÅÑfig
(
u√∂t32_t
 
CLKSourÀö
);

283 
HAL_SYSTICK_IRQH‚Ñ¢d√Är
();

284 
HAL_SYSTICK_C√Ülback
();

286 #i‚Ä°(
__MPU_PRESENT
 == 1U)

287 
HAL_MPU_E¬´b√Ä
(
u√∂t32_t
 
MPU_C‚ÅÑ√•Ô¨Å
);

288 
HAL_MPU_Di√üb√Ä
();

289 
HAL_MPU_C‚ÅÑfigRegi‚ÅÑ
(
MPU_Regi‚ÅÑ_In√¥Ty‚â•Def
 *
MPU_In√¥
);

306 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
√ã(((GROUP√ã=Ô£ø
NVIC_PRIORITYGROUP_0
) || \

307 ((
GROUP
√ã=Ô£ø
NVIC_PRIORITYGROUP_1
) || \

308 ((
GROUP
√ã=Ô£ø
NVIC_PRIORITYGROUP_2
) || \

309 ((
GROUP
√ã=Ô£ø
NVIC_PRIORITYGROUP_3
) || \

310 ((
GROUP
√ã=Ô£ø
NVIC_PRIORITYGROUP_4
))

	)

312 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
√ã((PRIORITY√ã< 0x10U)

	)

314 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
√ã((PRIORITY√ã< 0x10U)

	)

316 
	#IS_NVIC_DEVICE_IRQ
(
IRQ
√ã((IRQ√ã>Ô£ø(
IRQn_Ty‚â•
)0x00U)

	)

318 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
√ã(((SOURCE√ã=Ô£ø
SYSTICK_CLKSOURCE_HCLK
) || \

319 ((
SOURCE
√ã=Ô£ø
SYSTICK_CLKSOURCE_HCLK_DIV8
))

	)

321 #i‚Ä°(
__MPU_PRESENT
 == 1U)

322 
	#IS_MPU_REGION_ENABLE
(
STATE
√ã(((STATE√ã=Ô£ø
MPU_REGION_ENABLE
) || \

323 ((
STATE
√ã=Ô£ø
MPU_REGION_DISABLE
))

	)

325 
	#IS_MPU_INSTRUCTION_ACCESS
(
STATE
√ã(((STATE√ã=Ô£ø
MPU_INSTRUCTION_ACCESS_ENABLE
) || \

326 ((
STATE
√ã=Ô£ø
MPU_INSTRUCTION_ACCESS_DISABLE
))

	)

328 
	#IS_MPU_ACCESS_SHAREABLE
(
STATE
√ã(((STATE√ã=Ô£ø
MPU_ACCESS_SHAREABLE
) || \

329 ((
STATE
√ã=Ô£ø
MPU_ACCESS_NOT_SHAREABLE
))

	)

331 
	#IS_MPU_ACCESS_CACHEABLE
(
STATE
√ã(((STATE√ã=Ô£ø
MPU_ACCESS_CACHEABLE
) || \

332 ((
STATE
√ã=Ô£ø
MPU_ACCESS_NOT_CACHEABLE
))

	)

334 
	#IS_MPU_ACCESS_BUFFERABLE
(
STATE
√ã(((STATE√ã=Ô£ø
MPU_ACCESS_BUFFERABLE
) || \

335 ((
STATE
√ã=Ô£ø
MPU_ACCESS_NOT_BUFFERABLE
))

	)

337 
	#IS_MPU_TEX_LEVEL
(
TYPE
√ã(((TYPE√ã=Ô£ø
MPU_TEX_LEVEL0
) || \

338 ((
TYPE
√ã=Ô£ø
MPU_TEX_LEVEL1
) || \

339 ((
TYPE
√ã=Ô£ø
MPU_TEX_LEVEL2
))

	)

341 
	#IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
TYPE
√ã(((TYPE√ã=Ô£ø
MPU_REGION_NO_ACCESS
) || \

342 ((
TYPE
√ã=Ô£ø
MPU_REGION_PRIV_RW
) || \

343 ((
TYPE
√ã=Ô£ø
MPU_REGION_PRIV_RW_URO
) || \

344 ((
TYPE
√ã=Ô£ø
MPU_REGION_FULL_ACCESS
) || \

345 ((
TYPE
√ã=Ô£ø
MPU_REGION_PRIV_RO
) || \

346 ((
TYPE
√ã=Ô£ø
MPU_REGION_PRIV_RO_URO
))

	)

348 
	#IS_MPU_REGION_NUMBER
(
NUMBER
√ã(((NUMBER√ã=Ô£ø
MPU_REGION_NUMBER0
) || \

349 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER1
) || \

350 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER2
) || \

351 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER3
) || \

352 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER4
) || \

353 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER5
) || \

354 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER6
) || \

355 ((
NUMBER
√ã=Ô£ø
MPU_REGION_NUMBER7
))

	)

357 
	#IS_MPU_REGION_SIZE
(
SIZE
√ã(((SIZE√ã=Ô£ø
MPU_REGION_SIZE_32B
) || \

358 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_64B
) || \

359 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_128B
) || \

360 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_256B
) || \

361 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_512B
) || \

362 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_1KB
) || \

363 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_2KB
) || \

364 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_4KB
) || \

365 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_8KB
) || \

366 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_16KB
) || \

367 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_32KB
) || \

368 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_64KB
) || \

369 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_128KB
) || \

370 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_256KB
) || \

371 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_512KB
) || \

372 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_1MB
) || \

373 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_2MB
) || \

374 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_4MB
) || \

375 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_8MB
) || \

376 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_16MB
) || \

377 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_32MB
) || \

378 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_64MB
) || \

379 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_128MB
) || \

380 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_256MB
) || \

381 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_512MB
) || \

382 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_1GB
) || \

383 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_2GB
) || \

384 ((
SIZE
√ã=Ô£ø
MPU_REGION_SIZE_4GB
))

	)

386 
	#IS_MPU_SUB_REGION_DISABLE
(
SUBREGION
√ã((SUBREGION√ã< (
u√∂t16_t
)0x00FF)

	)

403 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_crc.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_CRC_H


22 
	#STM32F1xx_HAL_CRC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
HAL_CRC_STATE_RESET
 = 0x00U,

50 
HAL_CRC_STATE_READY
 = 0x01U,

51 
HAL_CRC_STATE_BUSY
 = 0x02U,

52 
HAL_CRC_STATE_TIMEOUT
 = 0x03U,

53 
HAL_CRC_STATE_ERROR
 = 0x04U

54 } 
	tHAL_CRC_S√®√£Ty‚â•Def
;

62 
CRC_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

64 
HAL_LockTy‚â•Def
 
Lock
;

66 
__IO
 
HAL_CRC_S√®√£Ty‚â•Def
 
S√®√£
;

68 } 
	tCRC_H‚Ñ¢d√ÄTy‚â•Def
;

91 
	#__HAL_CRC_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_CRC_STATE_RESET
)

	)

98 
	#__HAL_CRC_DR_RESET
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR
 |Ô£ø
CRC_CR_RESET
)

	)

107 
	#__HAL_CRC_SET_IDR
(
__HANDLE__
, 
__VALUE__
√ã(
	`WRITE_REG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IDR
, (__VALUE__)))

	)

115 
	#__HAL_CRC_GET_IDR
(
__HANDLE__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
IDR
√ã& 
CRC_IDR_IDR
)

	)

139 
HAL_S√®tusTy‚â•Def
 
HAL_CRC_In√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
);

140 
HAL_S√®tusTy‚â•Def
 
HAL_CRC_DeIn√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
);

141 
HAL_CRC_M‚Ä¢In√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
);

142 
HAL_CRC_M‚Ä¢DeIn√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
);

151 
u√∂t32_t
 
HAL_CRC_Accumu≈ì√£
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
, u√∂t32_√†
pBuf‚Äûr
[], u√∂t32_√†
Buf‚ÄûrL√≠gth
);

152 
u√∂t32_t
 
HAL_CRC_C√Ücu≈ì√£
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
, u√∂t32_√†
pBuf‚Äûr
[], u√∂t32_√†
Buf‚ÄûrL√≠gth
);

161 
HAL_CRC_S√®√£Ty‚â•Def
 
HAL_CRC_G√´S√®√£
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
);

178 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dac.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_DAC_H


22 
	#STM32F1xx_HAL_DAC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


33 
	~"¬∞m32f1xx_h√Ü_def.h
"

35 #i‚Ä°
def√∂ed
(
DAC
)

52 
HAL_DAC_STATE_RESET
 = 0x00U,

53 
HAL_DAC_STATE_READY
 = 0x01U,

54 
HAL_DAC_STATE_BUSY
 = 0x02U,

55 
HAL_DAC_STATE_TIMEOUT
 = 0x03U,

56 
HAL_DAC_STATE_ERROR
 = 0x04U

58 } 
	tHAL_DAC_S√®√£Ty‚â•Def
;

63 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

64 
__DAC_H‚Ñ¢d√ÄTy‚â•Def


69 
DAC_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

71 
__IO
 
HAL_DAC_S√®√£Ty‚â•Def
 
S√®√£
;

73 
HAL_LockTy‚â•Def
 
Lock
;

75 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
DMA_H‚Ñ¢d√Ä1
;

77 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
DMA_H‚Ñ¢d√Ä2
;

79 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

81 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

82 (* 
C‚ÅÑvC‚àÇtC√ÜlbackCh1
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

83 (* 
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

84 (* 
E¬∫‚ÄπC√ÜlbackCh1
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

85 (* 
DMAUnd√ÆrunC√ÜlbackCh1
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

86 (* 
C‚ÅÑvC‚àÇtC√ÜlbackCh2
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

87 (* 
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

88 (* 
E¬∫‚ÄπC√ÜlbackCh2
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

89 (* 
DMAUnd√ÆrunC√ÜlbackCh2
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

91 (* 
M‚Ä¢In√¥C√Ülback
√ã(
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

92 (* 
M‚Ä¢DeIn√¥C√Ülback
 ) (
__DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

95 } 
	tDAC_H‚Ñ¢d√ÄTy‚â•Def
;

103 
u√∂t32_t
 
DAC_Trigg√Æ
;

106 
u√∂t32_t
 
DAC_Ou√ßutBuf‚Äûr
;

109 } 
	tDAC_Ch‚Ñ¢‚àölC‚ÅÑfTy‚â•Def
;

111 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

117 
HAL_DAC_CH1_COMPLETE_CB_ID
 = 0x00U,

118 
HAL_DAC_CH1_HALF_COMPLETE_CB_ID
 = 0x01U,

119 
HAL_DAC_CH1_ERROR_ID
 = 0x02U,

120 
HAL_DAC_CH1_UNDERRUN_CB_ID
 = 0x03U,

121 
HAL_DAC_CH2_COMPLETE_CB_ID
 = 0x04U,

122 
HAL_DAC_CH2_HALF_COMPLETE_CB_ID
 = 0x05U,

123 
HAL_DAC_CH2_ERROR_ID
 = 0x06U,

124 
HAL_DAC_CH2_UNDERRUN_CB_ID
 = 0x07U,

125 
HAL_DAC_MSPINIT_CB_ID
 = 0x08U,

126 
HAL_DAC_MSPDEINIT_CB_ID
 = 0x09U,

127 
HAL_DAC_ALL_CB_ID
 = 0x0AU

128 } 
	tHAL_DAC_C√ÜlbackIDTy‚â•Def
;

133 (*
pDAC_C√ÜlbackTy‚â•Def
)(
	tDAC_H‚Ñ¢d√ÄTy‚â•Def
 *
	thdac
);

149 
	#HAL_DAC_ERROR_NONE
 0x00U

	)

150 
	#HAL_DAC_ERROR_DMAUNDERRUNCH1
 0x01U

	)

151 
	#HAL_DAC_ERROR_DMAUNDERRUNCH2
 0x02U

	)

152 
	#HAL_DAC_ERROR_DMA
 0x04U

	)

153 
	#HAL_DAC_ERROR_TIMEOUT
 0x08U

	)

154 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

155 
	#HAL_DAC_ERROR_INVALID_CALLBACK
 0x10U

	)

165 
	#DAC_OUTPUTBUFFER_ENABLE
 0x00000000U

	)

166 
	#DAC_OUTPUTBUFFER_DISABLE
 (
DAC_CR_BOFF1
)

	)

175 
	#DAC_CHANNEL_1
 0x00000000U

	)

176 
	#DAC_CHANNEL_2
 0x00000010U

	)

184 
	#DAC_ALIGN_12B_R
 0x00000000U

	)

185 
	#DAC_ALIGN_12B_L
 0x00000004U

	)

186 
	#DAC_ALIGN_8B_R
 0x00000008U

	)

195 
	#DAC_FLAG_DMAUDR1
 (
DAC_SR_DMAUDR1
)

	)

196 
	#DAC_FLAG_DMAUDR2
 (
DAC_SR_DMAUDR2
)

	)

205 
	#DAC_IT_DMAUDR1
 (
DAC_SR_DMAUDR1
)

	)

206 
	#DAC_IT_DMAUDR2
 (
DAC_SR_DMAUDR2
)

	)

226 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

227 
	#__HAL_DAC_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

228 (
__HANDLE__
)->
S√®√£
 = 
HAL_DAC_STATE_RESET
; \

229 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

230 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

231 } 0)

	)

233 
	#__HAL_DAC_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_DAC_STATE_RESET
)

	)

241 
	#__HAL_DAC_ENABLE
(
__HANDLE__
, 
__DAC_Ch‚Ñ¢‚àöl__
) \

242 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR
 |Ô£ø(
DAC_CR_EN1
 << ((
__DAC_Ch‚Ñ¢‚àöl__
√ã& 0x10UL)))

	)

249 
	#__HAL_DAC_DISABLE
(
__HANDLE__
, 
__DAC_Ch‚Ñ¢‚àöl__
) \

250 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR
 &Ô£ø~(
DAC_CR_EN1
 << ((
__DAC_Ch‚Ñ¢‚àöl__
√ã& 0x10UL)))

	)

256 
	#DAC_DHR12R1_ALIGNMENT
(
__ALIGNMENT__
√ã(0x00000008U + (__ALIGNMENT__))

	)

262 
	#DAC_DHR12R2_ALIGNMENT
(
__ALIGNMENT__
√ã(0x00000014U + (__ALIGNMENT__))

	)

268 
	#DAC_DHR12RD_ALIGNMENT
(
__ALIGNMENT__
√ã(0x00000020U + (__ALIGNMENT__))

	)

278 
	#__HAL_DAC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR
√ã|Ô£ø(__INTERRUPT__))

	)

288 
	#__HAL_DAC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR
√ã&Ô£ø~(__INTERRUPT__))

	)

298 
	#__HAL_DAC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR
 & (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__))

	)

308 
	#__HAL_DAC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
√ã& (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

318 
	#__HAL_DAC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
√ãÔ£ø(__FLAG__))

	)

329 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
√ã(((STATE√ã=Ô£ø
DAC_OUTPUTBUFFER_ENABLE
) || \

330 ((
STATE
√ã=Ô£ø
DAC_OUTPUTBUFFER_DISABLE
))

	)

332 
	#IS_DAC_CHANNEL
(
CHANNEL
√ã(((CHANNEL√ã=Ô£ø
DAC_CHANNEL_1
) || \

333 ((
CHANNEL
√ã=Ô£ø
DAC_CHANNEL_2
))

	)

335 
	#IS_DAC_ALIGN
(
ALIGN
√ã(((ALIGN√ã=Ô£ø
DAC_ALIGN_12B_R
) || \

336 ((
ALIGN
√ã=Ô£ø
DAC_ALIGN_12B_L
) || \

337 ((
ALIGN
√ã=Ô£ø
DAC_ALIGN_8B_R
))

	)

339 
	#IS_DAC_DATA
(
DATA
√ã((DATA√ã<Ô£ø0xFFF0U)

	)

346 
	~"¬∞m32f1xx_h√Ü_dac_ex.h
"

358 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_In√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

359 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_DeIn√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

360 
HAL_DAC_M‚Ä¢In√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

361 
HAL_DAC_M‚Ä¢DeIn√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

371 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_S√®œÄ
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

372 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_St‚Ä∫
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

373 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_S√®œÄ_DMA
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, u√∂t32_√†
L√≠gth
,

374 
u√∂t32_t
 
Alignm√≠t
);

375 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_St‚Ä∫_DMA
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

377 
HAL_DAC_IRQH‚Ñ¢d√Är
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

379 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_S√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Alignm√≠t
, u√∂t32_√†
D¬©a
);

381 
HAL_DAC_C‚ÅÑvC‚àÇtC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

382 
HAL_DAC_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

383 
HAL_DAC_E¬∫‚ÄπC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

384 
HAL_DAC_DMAUnd√ÆrunC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

386 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

388 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_Regi¬∞√ÆC√Ülback
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
HAL_DAC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

389 
pDAC_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

390 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_UnRegi¬∞√ÆC√Ülback
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
HAL_DAC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

401 
u√∂t32_t
 
HAL_DAC_G√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, u√∂t32_√†
Ch‚Ñ¢‚àöl
);

403 
HAL_S√®tusTy‚â•Def
 
HAL_DAC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
DAC_Ch‚Ñ¢‚àölC‚ÅÑfTy‚â•Def
 *
sC‚ÅÑfig
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

412 
HAL_DAC_S√®√£Ty‚â•Def
 
HAL_DAC_G√´S√®√£
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

413 
u√∂t32_t
 
HAL_DAC_G√´E¬∫‚Äπ
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

426 
DAC_DMAC‚ÅÑvC‚àÇtCh1
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

427 
DAC_DMAE¬∫‚ÄπCh1
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

428 
DAC_DMAH√ÜfC‚ÅÑvC‚àÇtCh1
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

443 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dac_ex.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_DAC_EX_H


22 
	#STM32F1xx_HAL_DAC_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


33 
	~"¬∞m32f1xx_h√Ü_def.h
"

35 #i‚Ä°
def√∂ed
(
DAC
)

56 
	#DAC_LFSRUNMASK_BIT0
 0x00000000U

	)

57 
	#DAC_LFSRUNMASK_BITS1_0
 ( 
DAC_CR_MAMP1_0
√ã

	)

58 
	#DAC_LFSRUNMASK_BITS2_0
 ( 
DAC_CR_MAMP1_1
 )

	)

59 
	#DAC_LFSRUNMASK_BITS3_0
 ( 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

60 
	#DAC_LFSRUNMASK_BITS4_0
 ( 
DAC_CR_MAMP1_2
 )

	)

61 
	#DAC_LFSRUNMASK_BITS5_0
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
√ã

	)

62 
	#DAC_LFSRUNMASK_BITS6_0
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 )

	)

63 
	#DAC_LFSRUNMASK_BITS7_0
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

64 
	#DAC_LFSRUNMASK_BITS8_0
 (
DAC_CR_MAMP1_3
 )

	)

65 
	#DAC_LFSRUNMASK_BITS9_0
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
√ã

	)

66 
	#DAC_LFSRUNMASK_BITS10_0
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 )

	)

67 
	#DAC_LFSRUNMASK_BITS11_0
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

68 
	#DAC_TRIANGLEAMPLITUDE_1
 0x00000000U

	)

69 
	#DAC_TRIANGLEAMPLITUDE_3
 ( 
DAC_CR_MAMP1_0
√ã

	)

70 
	#DAC_TRIANGLEAMPLITUDE_7
 ( 
DAC_CR_MAMP1_1
 )

	)

71 
	#DAC_TRIANGLEAMPLITUDE_15
 ( 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

72 
	#DAC_TRIANGLEAMPLITUDE_31
 ( 
DAC_CR_MAMP1_2
 )

	)

73 
	#DAC_TRIANGLEAMPLITUDE_63
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
√ã

	)

74 
	#DAC_TRIANGLEAMPLITUDE_127
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 )

	)

75 
	#DAC_TRIANGLEAMPLITUDE_255
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

76 
	#DAC_TRIANGLEAMPLITUDE_511
 (
DAC_CR_MAMP1_3
 )

	)

77 
	#DAC_TRIANGLEAMPLITUDE_1023
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
√ã

	)

78 
	#DAC_TRIANGLEAMPLITUDE_2047
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 )

	)

79 
	#DAC_TRIANGLEAMPLITUDE_4095
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

88 
	#DAC_TRIGGER_NONE
 0x00000000U

	)

90 
	#DAC_TRIGGER_T6_TRGO
 ((
u√∂t32_t
√ã
DAC_CR_TEN1
√ã

	)

91 
	#DAC_TRIGGER_T7_TRGO
 ((
u√∂t32_t
)‚Äì
DAC_CR_TSEL1_1
 | 
DAC_CR_TEN1
)√ã

	)

92 
	#DAC_TRIGGER_T2_TRGO
 ((
u√∂t32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TEN1
)√ã

	)

93 
	#DAC_TRIGGER_T4_TRGO
 ((
u√∂t32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)√ã

	)

94 
	#DAC_TRIGGER_EXT_IT9
 ((
u√∂t32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_1
 | 
DAC_CR_TEN1
)√ã

	)

95 
	#DAC_TRIGGER_SOFTWARE
 ((
u√∂t32_t
)(
DAC_CR_TSEL1
 | 
DAC_CR_TEN1
)√ã

	)

97 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F101xG
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

99 
	#DAC_TRIGGER_T8_TRGO
 ((
u√∂t32_t
√ã
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
√ã

	)

102 #i‚Ä°
def√∂ed
 (
STM32F100xB
√ã|| def√∂ed (
STM32F100xE
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

104 
	#DAC_TRIGGER_T3_TRGO
 ((
u√∂t32_t
√ã
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
√ã

	)

115 #i‚Ä°
def√∂ed
 (
STM32F100xB
)

116 
	#DAC_TRIGGER_T15_TRGO
 ((
u√∂t32_t
)‚Äì
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)√ã

	)

119 
	#DAC_TRIGGER_T5_TRGO
 ((
u√∂t32_t
)‚Äì
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)√ã

	)

121 #i‚Ä°
def√∂ed
 (
STM32F100xE
)

128 
	#DAC_TRIGGER_T15_TRGO
 
DAC_TRIGGER_T5_TRGO


	)

149 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F101xG
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

150 
	#IS_DAC_TRIGGER
(
TRIGGER
√ã(((TRIGGER√ã=Ô£ø
DAC_TRIGGER_NONE
) || \

151 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T6_TRGO
) || \

152 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T8_TRGO
) || \

153 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T7_TRGO
) || \

154 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T5_TRGO
) || \

155 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T2_TRGO
) || \

156 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T4_TRGO
) || \

157 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_EXT_IT9
) || \

158 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_SOFTWARE
))

	)

160 #i‚Ä°
def√∂ed
 (
STM32F100xE
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

161 
	#IS_DAC_TRIGGER
(
TRIGGER
√ã(((TRIGGER√ã=Ô£ø
DAC_TRIGGER_NONE
) || \

162 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T6_TRGO
) || \

163 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T3_TRGO
) || \

164 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T7_TRGO
) || \

165 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T5_TRGO
) || \

166 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T2_TRGO
) || \

167 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T4_TRGO
) || \

168 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_EXT_IT9
) || \

169 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_SOFTWARE
))

	)

171 #i‚Ä°
def√∂ed
 (
STM32F100xB
)

172 
	#IS_DAC_TRIGGER
(
TRIGGER
√ã(((TRIGGER√ã=Ô£ø
DAC_TRIGGER_NONE
) || \

173 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T6_TRGO
) || \

174 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T3_TRGO
) || \

175 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T7_TRGO
) || \

176 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T15_TRGO
) || \

177 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T2_TRGO
) || \

178 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_T4_TRGO
) || \

179 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_EXT_IT9
) || \

180 ((
TRIGGER
√ã=Ô£ø
DAC_TRIGGER_SOFTWARE
))

	)

183 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
√ã(((VALUE√ã=Ô£ø
DAC_LFSRUNMASK_BIT0
) || \

184 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS1_0
) || \

185 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS2_0
) || \

186 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS3_0
) || \

187 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS4_0
) || \

188 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS5_0
) || \

189 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS6_0
) || \

190 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS7_0
) || \

191 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS8_0
) || \

192 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS9_0
) || \

193 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS10_0
) || \

194 ((
VALUE
√ã=Ô£ø
DAC_LFSRUNMASK_BITS11_0
) || \

195 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_1
) || \

196 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_3
) || \

197 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_7
) || \

198 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_15
) || \

199 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_31
) || \

200 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_63
) || \

201 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_127
) || \

202 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_255
) || \

203 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_511
) || \

204 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_1023
) || \

205 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_2047
) || \

206 ((
VALUE
√ã=Ô£ø
DAC_TRIANGLEAMPLITUDE_4095
))

	)

223 
HAL_S√®tusTy‚â•Def
 
HAL_DACEx_Tr√ºng√ÄWaveG√≠√Æ¬©e
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Am‚àÇ√¥ude
);

224 
HAL_S√®tusTy‚â•Def
 
HAL_DACEx_Noi¬£WaveG√≠√Æ¬©e
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Am‚àÇ√¥ude
);

226 
HAL_S√®tusTy‚â•Def
 
HAL_DACEx_Du√ÜS√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Alignm√≠t
, u√∂t32_√†
D¬©a1
, u√∂t32_√†
D¬©a2
);

227 
u√∂t32_t
 
HAL_DACEx_Du√ÜG√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

229 
HAL_DACEx_C‚ÅÑvC‚àÇtC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

230 
HAL_DACEx_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

231 
HAL_DACEx_E¬∫‚ÄπC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

232 
HAL_DACEx_DMAUnd√ÆrunC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
);

249 
DAC_DMAC‚ÅÑvC‚àÇtCh2
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

250 
DAC_DMAE¬∫‚ÄπCh2
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

251 
DAC_DMAH√ÜfC‚ÅÑvC‚àÇtCh2
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

271 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h

22 #i‚Äöde‚Ä°
__STM32F1xx_HAL_DEF


23 
	#__STM32F1xx_HAL_DEF


	)

25 #ifde‚Ä°
__Àùlu‚Ä¢lus


30 
	~"¬∞m32f1xx.h
"

31 
	~"Legacy/¬∞m32_h√Ü_√Ägacy.h
"

32 
	~<¬∞ddef.h
>

41 
HAL_OK
 = 0x00U,

42 
HAL_ERROR
 = 0x01U,

43 
HAL_BUSY
 = 0x02U,

44 
HAL_TIMEOUT
 = 0x03U

45 } 
	tHAL_S√®tusTy‚â•Def
;

52 
HAL_UNLOCKED
 = 0x00U,

53 
HAL_LOCKED
 = 0x01U

54 } 
	tHAL_LockTy‚â•Def
;

57 
	#HAL_MAX_DELAY
 0xFFFFFFFFU

	)

59 
	#HAL_IS_BIT_SET
(
REG
, 
BIT
√ã(((REG√ã& (BIT)√ã!Ô£ø0U)

	)

60 
	#HAL_IS_BIT_CLR
(
REG
, 
BIT
√ã(((REG√ã& (BIT)√ã=Ô£ø0U)

	)

62 
	#__HAL_LINKDMA
(
__HANDLE__
, 
__PPP_DMA_FIELD__
, 
__DMA_HANDLE__
) \

64 (
__HANDLE__
)->
__PPP_DMA_FIELD__
 = &(
__DMA_HANDLE__
); \

65 (
__DMA_HANDLE__
).
P¬®√≠t
 = (
__HANDLE__
); \

66 } 0U)

	)

68 
	#UNUSED
(
X
√ã()X

	)

85 
	#__HAL_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 0U)

	)

87 #i‚Ä°(
USE_RTOS
 == 1U)

91 
	#__HAL_LOCK
(
__HANDLE__
) \

93 if((
__HANDLE__
)->
Lock
 =Ô£ø
HAL_LOCKED
) \

95  
HAL_BUSY
; \

99 (
__HANDLE__
)->
Lock
 = 
HAL_LOCKED
; \

101 }0U)

	)

103 
	#__HAL_UNLOCK
(
__HANDLE__
) \

105 (
__HANDLE__
)->
Lock
 = 
HAL_UNLOCKED
; \

106 }0U)

	)

109 #i‚Ä°
def√∂ed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

110 #i‚Äöde‚Ä°
__w√≥k


111 
	#__w√≥k
 
	`__¬©√•ibu√£__
((
w√≥k
))

	)

113 #i‚Äöde‚Ä°
__‚àëcked


114 
	#__‚àëcked
 
	`__¬©√•ibu√£__
((
‚àëcked
))

	)

116 #√±i‚Ä°
def√∂ed
 ( 
__GNUC__
 ) && !def√∂ed (
__CC_ARM
)

117 #i‚Äöde‚Ä°
__w√≥k


118 
	#__w√≥k
 
	`__¬©√•ibu√£__
((
w√≥k
))

	)

120 #i‚Äöde‚Ä°
__‚àëcked


121 
	#__‚àëcked
 
	`__¬©√•ibu√£__
((
__‚àëcked__
))

	)

127 #i‚Ä°
def√∂ed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

128 #i‚Äöde‚Ä°
__ALIGN_BEGIN


129 
	#__ALIGN_BEGIN


	)

131 #i‚Äöde‚Ä°
__ALIGN_END


132 
	#__ALIGN_END
 
	`__¬©√•ibu√£__
 ((
	`√Üig‚àöd
 (4)))

	)

134 #√±i‚Ä°
def√∂ed
 ( 
__GNUC__
 ) && !def√∂ed (
__CC_ARM
)

135 #i‚Äöde‚Ä°
__ALIGN_END


136 
	#__ALIGN_END
 
	`__¬©√•ibu√£__
 ((
	`√Üig‚àöd
 (4)))

	)

138 #i‚Äöde‚Ä°
__ALIGN_BEGIN


139 
	#__ALIGN_BEGIN


	)

142 #i‚Äöde‚Ä°
__ALIGN_END


143 
	#__ALIGN_END


	)

145 #i‚Äöde‚Ä°
__ALIGN_BEGIN


146 #i‚Ä°
def√∂ed
 (
__CC_ARM
)

147 
	#__ALIGN_BEGIN
 
	`__√Üign
(4)

	)

148 #√±i‚Ä°
def√∂ed
 (
__ICCARM__
)

149 
	#__ALIGN_BEGIN


	)

158 #i‚Ä°
def√∂ed
 ( 
__CC_ARM
 ) || (def√∂ed (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050))

168 
	#__RAM_FUNC


	)

170 #√±i‚Ä°
def√∂ed
 ( 
__ICCARM__
 )

175 
	#__RAM_FUNC
 
__√∏mfunc


	)

177 #√±i‚Ä°
def√∂ed
 ( 
__GNUC__
 )

183 
	#__RAM_FUNC
 
	`__¬©√•ibu√£__
((
	`¬£Àòi‚ÅÑ
(".RamFunc")))

	)

190 #i‚Ä°
def√∂ed
 ( 
__CC_ARM
 ) || (def√∂ed (
__ARMCC_VERSION
√ã&& (__ARMCC_VERSION >Ô£ø6010050)√ã|| def√∂ed ( 
__GNUC__
 )

194 
	#__NOINLINE
 
	`__¬©√•ibu√£__
 ( (
no√∂l√∂e
√ã)

	)

196 #√±i‚Ä°
def√∂ed
 ( 
__ICCARM__
 )

200 
	#__NOINLINE
 
	`_P√∏gma
("‚Ä∫timiz√™Ô£øno_√∂l√∂e")

	)

204 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_DMA_H


22 
	#__STM32F1xx_HAL_DMA_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

50 
u√∂t32_t
 
D√∫eÀòi‚ÅÑ
;

54 
u√∂t32_t
 
P√Æ√πhInc
;

57 
u√∂t32_t
 
MemInc
;

60 
u√∂t32_t
 
P√Æ√πhD¬©aAlignm√≠t
;

63 
u√∂t32_t
 
MemD¬©aAlignm√≠t
;

66 
u√∂t32_t
 
Mode
;

71 
u√∂t32_t
 
Pri‚Äπ√¥y
;

73 } 
	tDMA_In√¥Ty‚â•Def
;

80 
HAL_DMA_STATE_RESET
 = 0x00U,

81 
HAL_DMA_STATE_READY
 = 0x01U,

82 
HAL_DMA_STATE_BUSY
 = 0x02U,

83 
HAL_DMA_STATE_TIMEOUT
 = 0x03U

84 }
	tHAL_DMA_S√®√£Ty‚â•Def
;

91 
HAL_DMA_FULL_TRANSFER
 = 0x00U,

92 
HAL_DMA_HALF_TRANSFER
 = 0x01U

93 }
	tHAL_DMA_Lev√±Com‚àÇ√´eTy‚â•Def
;

100 
HAL_DMA_XFER_CPLT_CB_ID
 = 0x00U,

101 
HAL_DMA_XFER_HALFCPLT_CB_ID
 = 0x01U,

102 
HAL_DMA_XFER_ERROR_CB_ID
 = 0x02U,

103 
HAL_DMA_XFER_ABORT_CB_ID
 = 0x03U,

104 
HAL_DMA_XFER_ALL_CB_ID
 = 0x04U

106 }
	tHAL_DMA_C√ÜlbackIDTy‚â•Def
;

111 
	s__DMA_H‚Ñ¢d√ÄTy‚â•Def


113 
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

115 
DMA_In√¥Ty‚â•Def
 
In√¥
;

117 
HAL_LockTy‚â•Def
 
Lock
;

119 
HAL_DMA_S√®√£Ty‚â•Def
 
S√®√£
;

121 *
P¬®√≠t
;

123 (* 
X‚ÄûrC‚àÇtC√Ülback
)‚Äì
__DMA_H‚Ñ¢d√ÄTy‚â•Def
 * 
hdma
);

125 (* 
X‚ÄûrH√ÜfC‚àÇtC√Ülback
)‚Äì
__DMA_H‚Ñ¢d√ÄTy‚â•Def
 * 
hdma
);

127 (* 
X‚ÄûrE¬∫‚ÄπC√Ülback
)‚Äì
__DMA_H‚Ñ¢d√ÄTy‚â•Def
 * 
hdma
);

129 (* 
X‚ÄûrAb‚ÄπtC√Ülback
)‚Äì
__DMA_H‚Ñ¢d√ÄTy‚â•Def
 * 
hdma
);

131 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

133 
DMA_Ty‚â•Def
 *
DmaBa¬£Add¬™ss
;

135 
u√∂t32_t
 
Ch‚Ñ¢‚àölIndex
;

137 } 
	tDMA_H‚Ñ¢d√ÄTy‚â•Def
;

151 
	#HAL_DMA_ERROR_NONE
 0x00000000U

	)

152 
	#HAL_DMA_ERROR_TE
 0x00000001U

	)

153 
	#HAL_DMA_ERROR_NO_XFER
 0x00000004U

	)

154 
	#HAL_DMA_ERROR_TIMEOUT
 0x00000020U

	)

155 
	#HAL_DMA_ERROR_NOT_SUPPORTED
 0x00000100U

	)

163 
	#DMA_PERIPH_TO_MEMORY
 0x00000000U

	)

164 
	#DMA_MEMORY_TO_PERIPH
 ((
u√∂t32_t
)
DMA_CCR_DIR
√ã

	)

165 
	#DMA_MEMORY_TO_MEMORY
 ((
u√∂t32_t
)
DMA_CCR_MEM2MEM
√ã

	)

174 
	#DMA_PINC_ENABLE
 ((
u√∂t32_t
)
DMA_CCR_PINC
√ã

	)

175 
	#DMA_PINC_DISABLE
 0x00000000U

	)

183 
	#DMA_MINC_ENABLE
 ((
u√∂t32_t
)
DMA_CCR_MINC
√ã

	)

184 
	#DMA_MINC_DISABLE
 0x00000000U

	)

192 
	#DMA_PDATAALIGN_BYTE
 0x00000000U

	)

193 
	#DMA_PDATAALIGN_HALFWORD
 ((
u√∂t32_t
)
DMA_CCR_PSIZE_0
√ã

	)

194 
	#DMA_PDATAALIGN_WORD
 ((
u√∂t32_t
)
DMA_CCR_PSIZE_1
√ã

	)

202 
	#DMA_MDATAALIGN_BYTE
 0x00000000U

	)

203 
	#DMA_MDATAALIGN_HALFWORD
 ((
u√∂t32_t
)
DMA_CCR_MSIZE_0
√ã

	)

204 
	#DMA_MDATAALIGN_WORD
 ((
u√∂t32_t
)
DMA_CCR_MSIZE_1
√ã

	)

212 
	#DMA_NORMAL
 0x00000000U

	)

213 
	#DMA_CIRCULAR
 ((
u√∂t32_t
)
DMA_CCR_CIRC
√ã

	)

221 
	#DMA_PRIORITY_LOW
 0x00000000U

	)

222 
	#DMA_PRIORITY_MEDIUM
 ((
u√∂t32_t
)
DMA_CCR_PL_0
√ã

	)

223 
	#DMA_PRIORITY_HIGH
 ((
u√∂t32_t
)
DMA_CCR_PL_1
√ã

	)

224 
	#DMA_PRIORITY_VERY_HIGH
 ((
u√∂t32_t
)
DMA_CCR_PL
√ã

	)

233 
	#DMA_IT_TC
 ((
u√∂t32_t
)
DMA_CCR_TCIE
)

	)

234 
	#DMA_IT_HT
 ((
u√∂t32_t
)
DMA_CCR_HTIE
)

	)

235 
	#DMA_IT_TE
 ((
u√∂t32_t
)
DMA_CCR_TEIE
)

	)

243 
	#DMA_FLAG_GL1
 0x00000001U

	)

244 
	#DMA_FLAG_TC1
 0x00000002U

	)

245 
	#DMA_FLAG_HT1
 0x00000004U

	)

246 
	#DMA_FLAG_TE1
 0x00000008U

	)

247 
	#DMA_FLAG_GL2
 0x00000010U

	)

248 
	#DMA_FLAG_TC2
 0x00000020U

	)

249 
	#DMA_FLAG_HT2
 0x00000040U

	)

250 
	#DMA_FLAG_TE2
 0x00000080U

	)

251 
	#DMA_FLAG_GL3
 0x00000100U

	)

252 
	#DMA_FLAG_TC3
 0x00000200U

	)

253 
	#DMA_FLAG_HT3
 0x00000400U

	)

254 
	#DMA_FLAG_TE3
 0x00000800U

	)

255 
	#DMA_FLAG_GL4
 0x00001000U

	)

256 
	#DMA_FLAG_TC4
 0x00002000U

	)

257 
	#DMA_FLAG_HT4
 0x00004000U

	)

258 
	#DMA_FLAG_TE4
 0x00008000U

	)

259 
	#DMA_FLAG_GL5
 0x00010000U

	)

260 
	#DMA_FLAG_TC5
 0x00020000U

	)

261 
	#DMA_FLAG_HT5
 0x00040000U

	)

262 
	#DMA_FLAG_TE5
 0x00080000U

	)

263 
	#DMA_FLAG_GL6
 0x00100000U

	)

264 
	#DMA_FLAG_TC6
 0x00200000U

	)

265 
	#DMA_FLAG_HT6
 0x00400000U

	)

266 
	#DMA_FLAG_TE6
 0x00800000U

	)

267 
	#DMA_FLAG_GL7
 0x01000000U

	)

268 
	#DMA_FLAG_TC7
 0x02000000U

	)

269 
	#DMA_FLAG_HT7
 0x04000000U

	)

270 
	#DMA_FLAG_TE7
 0x08000000U

	)

289 
	#__HAL_DMA_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_DMA_STATE_RESET
)

	)

296 
	#__HAL_DMA_ENABLE
(
__HANDLE__
√ã(
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CCR
, 
DMA_CCR_EN
))

	)

303 
	#__HAL_DMA_DISABLE
(
__HANDLE__
√ã(
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CCR
, 
DMA_CCR_EN
))

	)

318 
	#__HAL_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CCR
, (__INTERRUPT__)))

	)

330 
	#__HAL_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CCR
 , (__INTERRUPT__)))

	)

342 
	#__HAL_DMA_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CCR
 & (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__)√ã? 
SET
 : 
RESET
)

	)

349 
	#__HAL_DMA_GET_COUNTER
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CNDTR
)

	)

356 
	~"¬∞m32f1xx_h√Ü_dma_ex.h
"

367 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_In√¥
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

368 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_DeIn√¥
 (
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

377 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_S√®œÄ
 (
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
SrcAdd¬™ss
, u√∂t32_√†
D¬∞Add¬™ss
, u√∂t32_√†
D¬©aL√≠gth
);

378 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_S√®œÄ_IT
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
SrcAdd¬™ss
, u√∂t32_√†
D¬∞Add¬™ss
, u√∂t32_√†
D¬©aL√≠gth
);

379 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_Ab‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

380 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_Ab‚Äπt_IT
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

381 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_PÔ¨ÅlF‚ÄπT√∏ns‚Äûr
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
Com‚àÇ√´eLev√±
, u√∂t32_√†
Timeout
);

382 
HAL_DMA_IRQH‚Ñ¢d√Är
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

383 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_Regi¬∞√ÆC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
HAL_DMA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, (* 
pC√Ülback
)‚ÄìDMA_H‚Ñ¢d√ÄTy‚â•De‚Ä°* 
_hdma
));

384 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_UnRegi¬∞√ÆC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
HAL_DMA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

394 
HAL_DMA_S√®√£Ty‚â•Def
 
HAL_DMA_G√´S√®√£
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

395 
u√∂t32_t
 
HAL_DMA_G√´E¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

409 
	#IS_DMA_DIRECTION
(
DIRECTION
√ã(((DIRECTION√ã=Ô£ø
DMA_PERIPH_TO_MEMORY
 ) || \

410 ((
DIRECTION
√ã=Ô£ø
DMA_MEMORY_TO_PERIPH
) || \

411 ((
DIRECTION
√ã=Ô£ø
DMA_MEMORY_TO_MEMORY
))

	)

413 
	#IS_DMA_BUFFER_SIZE
(
SIZE
√ã(((SIZE√ã>Ô£ø0x1U√ã&& ((SIZE√ã< 0x10000U))

	)

415 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
√ã(((STATE√ã=Ô£ø
DMA_PINC_ENABLE
) || \

416 ((
STATE
√ã=Ô£ø
DMA_PINC_DISABLE
))

	)

418 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
√ã(((STATE√ã=Ô£ø
DMA_MINC_ENABLE
) || \

419 ((
STATE
√ã=Ô£ø
DMA_MINC_DISABLE
))

	)

421 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
√ã(((SIZE√ã=Ô£ø
DMA_PDATAALIGN_BYTE
) || \

422 ((
SIZE
√ã=Ô£ø
DMA_PDATAALIGN_HALFWORD
) || \

423 ((
SIZE
√ã=Ô£ø
DMA_PDATAALIGN_WORD
))

	)

425 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
√ã(((SIZE√ã=Ô£ø
DMA_MDATAALIGN_BYTE
) || \

426 ((
SIZE
√ã=Ô£ø
DMA_MDATAALIGN_HALFWORD
) || \

427 ((
SIZE
√ã=Ô£ø
DMA_MDATAALIGN_WORD
 ))

	)

429 
	#IS_DMA_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
DMA_NORMAL
 ) || \

430 ((
MODE
√ã=Ô£ø
DMA_CIRCULAR
))

	)

432 
	#IS_DMA_PRIORITY
(
PRIORITY
√ã(((PRIORITY√ã=Ô£ø
DMA_PRIORITY_LOW
 ) || \

433 ((
PRIORITY
√ã=Ô£ø
DMA_PRIORITY_MEDIUM
) || \

434 ((
PRIORITY
√ã=Ô£ø
DMA_PRIORITY_HIGH
) || \

435 ((
PRIORITY
√ã=Ô£ø
DMA_PRIORITY_VERY_HIGH
))

	)

451 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma_ex.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_DMA_EX_H


22 
	#__STM32F1xx_HAL_DMA_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

46 #i‚Ä°
def√∂ed
 (
STM32F100xE
√ã|| def√∂ed (
STM32F101xE
√ã|| def√∂ed (
STM32F101xG
√ã|| def√∂ed (
STM32F103xE
) || \

47 
def√∂ed
 (
STM32F103xG
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

57 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

58 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_TC1
 :\

59 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_TC2
 :\

60 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_TC3
 :\

61 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_TC4
 :\

62 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_TC5
 :\

63 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_TC6
 :\

64 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
))? 
DMA_FLAG_TC7
 :\

65 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_TC1
 :\

66 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_TC2
 :\

67 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_TC3
 :\

68 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_TC4
 :\

69 
DMA_FLAG_TC5
)

	)

76 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

77 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_HT1
 :\

78 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_HT2
 :\

79 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_HT3
 :\

80 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_HT4
 :\

81 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_HT5
 :\

82 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_HT6
 :\

83 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
))? 
DMA_FLAG_HT7
 :\

84 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_HT1
 :\

85 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_HT2
 :\

86 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_HT3
 :\

87 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_HT4
 :\

88 
DMA_FLAG_HT5
)

	)

95 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

96 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_TE1
 :\

97 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_TE2
 :\

98 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_TE3
 :\

99 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_TE4
 :\

100 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_TE5
 :\

101 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_TE6
 :\

102 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
))? 
DMA_FLAG_TE7
 :\

103 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_TE1
 :\

104 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_TE2
 :\

105 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_TE3
 :\

106 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_TE4
 :\

107 
DMA_FLAG_TE5
)

	)

114 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

115 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_GL1
 :\

116 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_GL2
 :\

117 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_GL3
 :\

118 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_GL4
 :\

119 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_GL5
 :\

120 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_GL6
 :\

121 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
))? 
DMA_FLAG_GL7
 :\

122 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_GL1
 :\

123 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_GL2
 :\

124 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_GL3
 :\

125 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_GL4
 :\

126 
DMA_FLAG_GL5
)

	)

139 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
)\

140 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã> (u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
)? (
DMA2
->
ISR
 & (
__FLAG__
)) :\

141 (
DMA1
->
ISR
 & (
__FLAG__
)))

	)

154 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

155 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã> (u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
)? (
DMA2
->
IFCR
 = (
__FLAG__
)) :\

156 (
DMA1
->
IFCR
 = (
__FLAG__
)))

	)

172 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

173 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_TC1
 :\

174 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_TC2
 :\

175 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_TC3
 :\

176 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_TC4
 :\

177 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_TC5
 :\

178 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_TC6
 :\

179 
DMA_FLAG_TC7
)

	)

186 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

187 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_HT1
 :\

188 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_HT2
 :\

189 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_HT3
 :\

190 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_HT4
 :\

191 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_HT5
 :\

192 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_HT6
 :\

193 
DMA_FLAG_HT7
)

	)

200 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

201 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_TE1
 :\

202 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_TE2
 :\

203 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_TE3
 :\

204 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_TE4
 :\

205 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_TE5
 :\

206 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_TE6
 :\

207 
DMA_FLAG_TE7
)

	)

214 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

215 (((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
))? 
DMA_FLAG_GL1
 :\

216 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
))? 
DMA_FLAG_GL2
 :\

217 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
))? 
DMA_FLAG_GL3
 :\

218 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
))? 
DMA_FLAG_GL4
 :\

219 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
))? 
DMA_FLAG_GL5
 :\

220 ((
u√∂t32_t
)((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
))? 
DMA_FLAG_GL6
 :\

221 
DMA_FLAG_GL7
)

	)

236 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(
DMA1
->
ISR
 & (__FLAG__))

	)

250 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(
DMA1
->
IFCR
 = (__FLAG__))

	)

270 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_eth.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_ETH_H


22 
	#__STM32F1xx_HAL_ETH_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

31 #i‚Ä°
def√∂ed
 (
ETH
)

44 
	#IS_ETH_PHY_ADDRESS
(
ADDRESS
√ã((ADDRESS√ã<Ô£ø0x20U)

	)

45 
	#IS_ETH_AUTONEGOTIATION
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_AUTONEGOTIATION_ENABLE
) || \

46 ((
CMD
√ã=Ô£ø
ETH_AUTONEGOTIATION_DISABLE
))

	)

47 
	#IS_ETH_SPEED
(
SPEED
√ã(((SPEED√ã=Ô£ø
ETH_SPEED_10M
) || \

48 ((
SPEED
√ã=Ô£ø
ETH_SPEED_100M
))

	)

49 
	#IS_ETH_DUPLEX_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
ETH_MODE_FULLDUPLEX
) || \

50 ((
MODE
√ã=Ô£ø
ETH_MODE_HALFDUPLEX
))

	)

51 
	#IS_ETH_RX_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
ETH_RXPOLLING_MODE
) || \

52 ((
MODE
√ã=Ô£ø
ETH_RXINTERRUPT_MODE
))

	)

53 
	#IS_ETH_CHECKSUM_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
ETH_CHECKSUM_BY_HARDWARE
) || \

54 ((
MODE
√ã=Ô£ø
ETH_CHECKSUM_BY_SOFTWARE
))

	)

55 
	#IS_ETH_MEDIA_INTERFACE
(
MODE
√ã(((MODE√ã=Ô£ø
ETH_MEDIA_INTERFACE_MII
) || \

56 ((
MODE
√ã=Ô£ø
ETH_MEDIA_INTERFACE_RMII
))

	)

57 
	#IS_ETH_WATCHDOG
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_WATCHDOG_ENABLE
) || \

58 ((
CMD
√ã=Ô£ø
ETH_WATCHDOG_DISABLE
))

	)

59 
	#IS_ETH_JABBER
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_JABBER_ENABLE
) || \

60 ((
CMD
√ã=Ô£ø
ETH_JABBER_DISABLE
))

	)

61 
	#IS_ETH_INTER_FRAME_GAP
(
GAP
√ã(((GAP√ã=Ô£ø
ETH_INTERFRAMEGAP_96BIT
) || \

62 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_88BIT
) || \

63 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_80BIT
) || \

64 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_72BIT
) || \

65 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_64BIT
) || \

66 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_56BIT
) || \

67 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_48BIT
) || \

68 ((
GAP
√ã=Ô£ø
ETH_INTERFRAMEGAP_40BIT
))

	)

69 
	#IS_ETH_CARRIER_SENSE
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_CARRIERSENCE_ENABLE
) || \

70 ((
CMD
√ã=Ô£ø
ETH_CARRIERSENCE_DISABLE
))

	)

71 
	#IS_ETH_RECEIVE_OWN
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_RECEIVEOWN_ENABLE
) || \

72 ((
CMD
√ã=Ô£ø
ETH_RECEIVEOWN_DISABLE
))

	)

73 
	#IS_ETH_LOOPBACK_MODE
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_LOOPBACKMODE_ENABLE
) || \

74 ((
CMD
√ã=Ô£ø
ETH_LOOPBACKMODE_DISABLE
))

	)

75 
	#IS_ETH_CHECKSUM_OFFLOAD
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_CHECKSUMOFFLAOD_ENABLE
) || \

76 ((
CMD
√ã=Ô£ø
ETH_CHECKSUMOFFLAOD_DISABLE
))

	)

77 
	#IS_ETH_RETRY_TRANSMISSION
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_RETRYTRANSMISSION_ENABLE
) || \

78 ((
CMD
√ã=Ô£ø
ETH_RETRYTRANSMISSION_DISABLE
))

	)

79 
	#IS_ETH_AUTOMATIC_PADCRC_STRIP
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_AUTOMATICPADCRCSTRIP_ENABLE
) || \

80 ((
CMD
√ã=Ô£ø
ETH_AUTOMATICPADCRCSTRIP_DISABLE
))

	)

81 
	#IS_ETH_BACKOFF_LIMIT
(
LIMIT
√ã(((LIMIT√ã=Ô£ø
ETH_BACKOFFLIMIT_10
) || \

82 ((
LIMIT
√ã=Ô£ø
ETH_BACKOFFLIMIT_8
) || \

83 ((
LIMIT
√ã=Ô£ø
ETH_BACKOFFLIMIT_4
) || \

84 ((
LIMIT
√ã=Ô£ø
ETH_BACKOFFLIMIT_1
))

	)

85 
	#IS_ETH_DEFERRAL_CHECK
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_DEFFERRALCHECK_ENABLE
) || \

86 ((
CMD
√ã=Ô£ø
ETH_DEFFERRALCHECK_DISABLE
))

	)

87 
	#IS_ETH_RECEIVE_ALL
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_RECEIVEALL_ENABLE
) || \

88 ((
CMD
√ã=Ô£ø
ETH_RECEIVEA≈í_DISABLE
))

	)

89 
	#IS_ETH_SOURCE_ADDR_FILTER
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_SOURCEADDRFILTER_NORMAL_ENABLE
) || \

90 ((
CMD
√ã=Ô£ø
ETH_SOURCEADDRFILTER_INVERSE_ENABLE
) || \

91 ((
CMD
√ã=Ô£ø
ETH_SOURCEADDRFILTER_DISABLE
))

	)

92 
	#IS_ETH_CONTROL_FRAMES
(
PASS
√ã(((PASS√ã=Ô£ø
ETH_PASSCONTROLFRAMES_BLOCKALL
) || \

93 ((
PASS
√ã=Ô£ø
ETH_PASSCONTROLFRAMES_FORWARDALL
) || \

94 ((
PASS
√ã=Ô£ø
ETH_PASSCONTROLFRAMES_FORWARDPASSEDADDRFILTER
))

	)

95 
	#IS_ETH_BROADCAST_FRAMES_RECEPTION
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_BROADCASTFRAMESRECEPTION_ENABLE
) || \

96 ((
CMD
√ã=Ô£ø
ETH_BROADCASTFRAMESRECEPTION_DISABLE
))

	)

97 
	#IS_ETH_DESTINATION_ADDR_FILTER
(
FILTER
√ã(((FILTER√ã=Ô£ø
ETH_DESTINATIONADDRFILTER_NORMAL
) || \

98 ((
FILTER
√ã=Ô£ø
ETH_DESTINATIONADDRFILTER_INVERSE
))

	)

99 
	#IS_ETH_PROMISCUOUS_MODE
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_PROMISCUOUS_MODE_ENABLE
) || \

100 ((
CMD
√ã=Ô£ø
ETH_PROMISCUOUS_MODE_DISABLE
))

	)

101 
	#IS_ETH_MULTICAST_FRAMES_FILTER
(
FILTER
√ã(((FILTER√ã=Ô£ø
ETH_MULTICASTFRAMESFILTER_PERFECTHASHTABLE
) || \

102 ((
FILTER
√ã=Ô£ø
ETH_MULTICASTFRAMESFILTER_HASHTABLE
) || \

103 ((
FILTER
√ã=Ô£ø
ETH_MULTICASTFRAMESFILTER_PERFECT
) || \

104 ((
FILTER
√ã=Ô£ø
ETH_MULTICASTFRAMESFILTER_NONE
))

	)

105 
	#IS_ETH_UNICAST_FRAMES_FILTER
(
FILTER
√ã(((FILTER√ã=Ô£ø
ETH_UNICASTFRAMESFILTER_PERFECTHASHTABLE
) || \

106 ((
FILTER
√ã=Ô£ø
ETH_UNICASTFRAMESFILTER_HASHTABLE
) || \

107 ((
FILTER
√ã=Ô£ø
ETH_UNICASTFRAMESFILTER_PERFECT
))

	)

108 
	#IS_ETH_PAUSE_TIME
(
TIME
√ã((TIME√ã<Ô£ø0xFFFFU)

	)

109 
	#IS_ETH_ZEROQUANTA_PAUSE
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_ZEROQUANTAPAUSE_ENABLE
) || \

110 ((
CMD
√ã=Ô£ø
ETH_ZEROQUANTAPAUSE_DISABLE
))

	)

111 
	#IS_ETH_PAUSE_LOW_THRESHOLD
(
THRESHOLD
√ã(((THRESHOLD√ã=Ô£ø
ETH_PAUSELOWTHRESHOLD_MINUS4
) || \

112 ((
THRESHOLD
√ã=Ô£ø
ETH_PAUSELOWTHRESHOLD_MINUS28
) || \

113 ((
THRESHOLD
√ã=Ô£ø
ETH_PAUSELOWTHRESHOLD_MINUS144
) || \

114 ((
THRESHOLD
√ã=Ô£ø
ETH_PAUSELOWTHRESHOLD_MINUS256
))

	)

115 
	#IS_ETH_UNICAST_PAUSE_FRAME_DETECT
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_UNICASTPAUSEFRAMEDETECT_ENABLE
) || \

116 ((
CMD
√ã=Ô£ø
ETH_UNICASTPAUSEFRAMEDETECT_DISABLE
))

	)

117 
	#IS_ETH_RECEIVE_FLOWCONTROL
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_RECEIVEFLOWCONTROL_ENABLE
) || \

118 ((
CMD
√ã=Ô£ø
ETH_RECEIVEFLOWCONTROL_DISABLE
))

	)

119 
	#IS_ETH_TRANSMIT_FLOWCONTROL
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_TRANSMITFLOWCONTROL_ENABLE
) || \

120 ((
CMD
√ã=Ô£ø
ETH_TRANSMITFLOWCONTROL_DISABLE
))

	)

121 
	#IS_ETH_VLAN_TAG_COMPARISON
(
COMPARISON
√ã(((COMPARISON√ã=Ô£ø
ETH_VLANTAGCOMPARISON_12BIT
) || \

122 ((
COMPARISON
√ã=Ô£ø
ETH_VLANTAGCOMPARISON_16BIT
))

	)

123 
	#IS_ETH_VLAN_TAG_IDENTIFIER
(
IDENTIFIER
√ã((IDENTIFIER√ã<Ô£ø0xFFFFU)

	)

124 
	#IS_ETH_MAC_ADDRESS0123
(
ADDRESS
√ã(((ADDRESS√ã=Ô£ø
ETH_MAC_ADDRESS0
) || \

125 ((
ADDRESS
√ã=Ô£ø
ETH_MAC_ADDRESS1
) || \

126 ((
ADDRESS
√ã=Ô£ø
ETH_MAC_ADDRESS2
) || \

127 ((
ADDRESS
√ã=Ô£ø
ETH_MAC_ADDRESS3
))

	)

128 
	#IS_ETH_MAC_ADDRESS123
(
ADDRESS
√ã(((ADDRESS√ã=Ô£ø
ETH_MAC_ADDRESS1
) || \

129 ((
ADDRESS
√ã=Ô£ø
ETH_MAC_ADDRESS2
) || \

130 ((
ADDRESS
√ã=Ô£ø
ETH_MAC_ADDRESS3
))

	)

131 
	#IS_ETH_MAC_ADDRESS_FILTER
(
FILTER
√ã(((FILTER√ã=Ô£ø
ETH_MAC_ADDRESSFILTER_SA
) || \

132 ((
FILTER
√ã=Ô£ø
ETH_MAC_ADDRESSFILTER_DA
))

	)

133 
	#IS_ETH_MAC_ADDRESS_MASK
(
MASK
√ã(((MASK√ã=Ô£ø
ETH_MAC_ADDRESSMASK_BYTE6
) || \

134 ((
MASK
√ã=Ô£ø
ETH_MAC_ADDRESSMASK_BYTE5
) || \

135 ((
MASK
√ã=Ô£ø
ETH_MAC_ADDRESSMASK_BYTE4
) || \

136 ((
MASK
√ã=Ô£ø
ETH_MAC_ADDRESSMASK_BYTE3
) || \

137 ((
MASK
√ã=Ô£ø
ETH_MAC_ADDRESSMASK_BYTE2
) || \

138 ((
MASK
√ã=Ô£ø
ETH_MAC_ADDRESSMASK_BYTE1
))

	)

139 
	#IS_ETH_DROP_TCPIP_CHECKSUM_FRAME
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE
) || \

140 ((
CMD
√ã=Ô£ø
ETH_DROPTCPIPCHECKSUMERRORFRAME_DISABLE
))

	)

141 
	#IS_ETH_RECEIVE_STORE_FORWARD
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_RECEIVESTOREFORWARD_ENABLE
) || \

142 ((
CMD
√ã=Ô£ø
ETH_RECEIVESTOREFORWARD_DISABLE
))

	)

143 
	#IS_ETH_FLUSH_RECEIVE_FRAME
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_FLUSHRECEIVEDFRAME_ENABLE
) || \

144 ((
CMD
√ã=Ô£ø
ETH_FLUSHRECEIVEDFRAME_DISABLE
))

	)

145 
	#IS_ETH_TRANSMIT_STORE_FORWARD
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_TRANSMITSTOREFORWARD_ENABLE
) || \

146 ((
CMD
√ã=Ô£ø
ETH_TRANSMITSTOREFORWARD_DISABLE
))

	)

147 
	#IS_ETH_TRANSMIT_THRESHOLD_CONTROL
(
THRESHOLD
√ã(((THRESHOLD√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_64BYTES
) || \

148 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_128BYTES
) || \

149 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_192BYTES
) || \

150 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_256BYTES
) || \

151 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_40BYTES
) || \

152 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_32BYTES
) || \

153 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_24BYTES
) || \

154 ((
THRESHOLD
√ã=Ô£ø
ETH_TRANSMITTHRESHOLDCONTROL_16BYTES
))

	)

155 
	#IS_ETH_FORWARD_ERROR_FRAMES
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_FORWARDERRORFRAMES_ENABLE
) || \

156 ((
CMD
√ã=Ô£ø
ETH_FORWARDERRORFRAMES_DISABLE
))

	)

157 
	#IS_ETH_FORWARD_UNDERSIZED_GOOD_FRAMES
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_FORWARDUNDERSIZEDGOODFRAMES_ENABLE
) || \

158 ((
CMD
√ã=Ô£ø
ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE
))

	)

159 
	#IS_ETH_RECEIVE_THRESHOLD_CONTROL
(
THRESHOLD
√ã(((THRESHOLD√ã=Ô£ø
ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES
) || \

160 ((
THRESHOLD
√ã=Ô£ø
ETH_RECEIVEDTHRESHOLDCONTROL_32BYTES
) || \

161 ((
THRESHOLD
√ã=Ô£ø
ETH_RECEIVEDTHRESHOLDCONTROL_96BYTES
) || \

162 ((
THRESHOLD
√ã=Ô£ø
ETH_RECEIVEDTHRESHOLDCONTROL_128BYTES
))

	)

163 
	#IS_ETH_SECOND_FRAME_OPERATE
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_SECONDFRAMEOPERARTE_ENABLE
) || \

164 ((
CMD
√ã=Ô£ø
ETH_SECONDFRAMEOPERARTE_DISABLE
))

	)

165 
	#IS_ETH_ADDRESS_ALIGNED_BEATS
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_ADDRESSALIGNEDBEATS_ENABLE
) || \

166 ((
CMD
√ã=Ô£ø
ETH_ADDRESSALIGNEDBEATS_DISABLE
))

	)

167 
	#IS_ETH_FIXED_BURST
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_FIXEDBURST_ENABLE
) || \

168 ((
CMD
√ã=Ô£ø
ETH_FIXEDBURST_DISABLE
))

	)

169 
	#IS_ETH_RXDMA_BURST_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
ETH_RXDMABURSTLENGTH_1BEAT
) || \

170 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_2BEAT
) || \

171 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4BEAT
) || \

172 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_8BEAT
) || \

173 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_16BEAT
) || \

174 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_32BEAT
) || \

175 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4XPBL_4BEAT
) || \

176 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4XPBL_8BEAT
) || \

177 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4XPBL_16BEAT
) || \

178 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4XPBL_32BEAT
) || \

179 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4XPBL_64BEAT
) || \

180 ((
LENGTH
√ã=Ô£ø
ETH_RXDMABURSTLENGTH_4XPBL_128BEAT
))

	)

181 
	#IS_ETH_TXDMA_BURST_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
ETH_TXDMABURSTLENGTH_1BEAT
) || \

182 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_2BEAT
) || \

183 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4BEAT
) || \

184 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_8BEAT
) || \

185 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_16BEAT
) || \

186 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_32BEAT
) || \

187 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4XPBL_4BEAT
) || \

188 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4XPBL_8BEAT
) || \

189 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4XPBL_16BEAT
) || \

190 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4XPBL_32BEAT
) || \

191 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4XPBL_64BEAT
) || \

192 ((
LENGTH
√ã=Ô£ø
ETH_TXDMABURSTLENGTH_4XPBL_128BEAT
))

	)

193 
	#IS_ETH_DMA_DESC_SKIP_LENGTH
(
LENGTH
√ã((LENGTH√ã<Ô£ø0x1FU)

	)

194 
	#IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX
(
RATIO
√ã(((RATIO√ã=Ô£ø
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1
) || \

195 ((
RATIO
√ã=Ô£ø
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_2_1
) || \

196 ((
RATIO
√ã=Ô£ø
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_3_1
) || \

197 ((
RATIO
√ã=Ô£ø
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1
) || \

198 ((
RATIO
√ã=Ô£ø
ETH_DMAARBITRATION_RXPRIORTX
))

	)

199 
	#IS_ETH_DMATXDESC_GET_FLAG
(
FLAG
√ã(((FLAG√ã=Ô£ø
ETH_DMATXDESC_OWN
) || \

200 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_IC
) || \

201 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_LS
) || \

202 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_FS
) || \

203 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_DC
) || \

204 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_DP
) || \

205 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_TTSE
) || \

206 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_TER
) || \

207 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_TCH
) || \

208 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_TTSS
) || \

209 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_IHE
) || \

210 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_ES
) || \

211 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_JT
) || \

212 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_FF
) || \

213 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_PCE
) || \

214 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_LCA
) || \

215 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_NC
) || \

216 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_LCO
) || \

217 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_EC
) || \

218 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_VF
) || \

219 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_CC
) || \

220 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_ED
) || \

221 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_UF
) || \

222 ((
FLAG
√ã=Ô£ø
ETH_DMATXDESC_DB
))

	)

223 
	#IS_ETH_DMA_TXDESC_SEGMENT
(
SEGMENT
√ã(((SEGMENT√ã=Ô£ø
ETH_DMATXDESC_LASTSEGMENTS
) || \

224 ((
SEGMENT
√ã=Ô£ø
ETH_DMATXDESC_FIRSTSEGMENT
))

	)

225 
	#IS_ETH_DMA_TXDESC_CHECKSUM
(
CHECKSUM
√ã(((CHECKSUM√ã=Ô£ø
ETH_DMATXDESC_CHECKSUMBYPASS
) || \

226 ((
CHECKSUM
√ã=Ô£ø
ETH_DMATXDESC_CHECKSUMIPV4HEADER
) || \

227 ((
CHECKSUM
√ã=Ô£ø
ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT
) || \

228 ((
CHECKSUM
√ã=Ô£ø
ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL
))

	)

229 
	#IS_ETH_DMATXDESC_BUFFER_SIZE
(
SIZE
√ã((SIZE√ã<Ô£ø0x1FFFU)

	)

230 
	#IS_ETH_DMARXDESC_GET_FLAG
(
FLAG
√ã(((FLAG√ã=Ô£ø
ETH_DMARXDESC_OWN
) || \

231 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_AFM
) || \

232 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_ES
) || \

233 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_DE
) || \

234 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_SAF
) || \

235 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_LE
) || \

236 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_OE
) || \

237 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_VLAN
) || \

238 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_FS
) || \

239 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_LS
) || \

240 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_IPV4HCE
) || \

241 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_LC
) || \

242 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_FT
) || \

243 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_RWT
) || \

244 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_RE
) || \

245 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_DBE
) || \

246 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_CE
) || \

247 ((
FLAG
√ã=Ô£ø
ETH_DMARXDESC_MAMPCE
))

	)

248 
	#IS_ETH_DMA_RXDESC_BUFFER
(
BUFFER
√ã(((BUFFER√ã=Ô£ø
ETH_DMARXDESC_BUFFER1
) || \

249 ((
BUFFER
√ã=Ô£ø
ETH_DMARXDESC_BUFFER2
))

	)

250 
	#IS_ETH_PMT_GET_FLAG
(
FLAG
√ã(((FLAG√ã=Ô£ø
ETH_PMT_FLAG_WUFR
) || \

251 ((
FLAG
√ã=Ô£ø
ETH_PMT_FLAG_MPR
))

	)

252 
	#IS_ETH_DMA_FLAG
(
FLAG
√ã((((FLAG√ã& 0xC7FE1800U√ã=Ô£ø0x00U√ã&& ((FLAG√ã!Ô£ø0x00U))

	)

253 
	#IS_ETH_DMA_GET_FLAG
(
FLAG
√ã(((FLAG√ã=Ô£ø
ETH_DMA_FLAG_TST
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_PMT
) || \

254 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_MMC
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_DATATRANSFERERROR
) || \

255 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_READWRITEERROR
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_ACCESSERROR
) || \

256 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_NIS
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_AIS
) || \

257 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_ER
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_FBE
) || \

258 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_ET
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_RWT
) || \

259 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_RPS
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_RBU
) || \

260 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_R
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_TU
) || \

261 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_RO
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_TJT
) || \

262 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_TBU
√ã|| ((FLAG√ã=Ô£ø
ETH_DMA_FLAG_TPS
) || \

263 ((
FLAG
√ã=Ô£ø
ETH_DMA_FLAG_T
))

	)

264 
	#IS_ETH_MAC_IT
(
IT
√ã((((IT√ã& 0xFFFFFDF1U√ã=Ô£ø0x00U√ã&& ((IT√ã!Ô£ø0x00U))

	)

265 
	#IS_ETH_MAC_GET_IT
(
IT
√ã(((IT√ã=Ô£ø
ETH_MAC_IT_TST
√ã|| ((IT√ã=Ô£ø
ETH_MAC_IT_MMCT
) || \

266 ((
IT
√ã=Ô£ø
ETH_MAC_IT_MMCR
√ã|| ((IT√ã=Ô£ø
ETH_MAC_IT_MMC
) || \

267 ((
IT
√ã=Ô£ø
ETH_MAC_IT_PMT
))

	)

268 
	#IS_ETH_MAC_GET_FLAG
(
FLAG
√ã(((FLAG√ã=Ô£ø
ETH_MAC_FLAG_TST
√ã|| ((FLAG√ã=Ô£ø
ETH_MAC_FLAG_MMCT
) || \

269 ((
FLAG
√ã=Ô£ø
ETH_MAC_FLAG_MMCR
√ã|| ((FLAG√ã=Ô£ø
ETH_MAC_FLAG_MMC
) || \

270 ((
FLAG
√ã=Ô£ø
ETH_MAC_FLAG_PMT
))

	)

271 
	#IS_ETH_DMA_IT
(
IT
√ã((((IT√ã& 0xC7FE1800U√ã=Ô£ø0x00U√ã&& ((IT√ã!Ô£ø0x00U))

	)

272 
	#IS_ETH_DMA_GET_IT
(
IT
√ã(((IT√ã=Ô£ø
ETH_DMA_IT_TST
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_PMT
) || \

273 ((
IT
√ã=Ô£ø
ETH_DMA_IT_MMC
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_NIS
) || \

274 ((
IT
√ã=Ô£ø
ETH_DMA_IT_AIS
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_ER
) || \

275 ((
IT
√ã=Ô£ø
ETH_DMA_IT_FBE
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_ET
) || \

276 ((
IT
√ã=Ô£ø
ETH_DMA_IT_RWT
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_RPS
) || \

277 ((
IT
√ã=Ô£ø
ETH_DMA_IT_RBU
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_R
) || \

278 ((
IT
√ã=Ô£ø
ETH_DMA_IT_TU
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_RO
) || \

279 ((
IT
√ã=Ô£ø
ETH_DMA_IT_TJT
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_TBU
) || \

280 ((
IT
√ã=Ô£ø
ETH_DMA_IT_TPS
√ã|| ((IT√ã=Ô£ø
ETH_DMA_IT_T
))

	)

281 
	#IS_ETH_DMA_GET_OVERFLOW
(
OVERFLOW
√ã(((OVERFLOW√ã=Ô£ø
ETH_DMA_OVERFLOW_RXFIFOCOUNTER
) || \

282 ((
OVERFLOW
√ã=Ô£ø
ETH_DMA_OVERFLOW_MISSEDFRAMECOUNTER
))

	)

283 
	#IS_ETH_MMC_IT
(
IT
) (((((IT) & 0xFFDF3FFFU) == 0x00U) || (((IT) & 0xEFFDFF9FU) == 0x00U)) && \

284 ((
IT
√ã!Ô£ø0x00U))

	)

285 
	#IS_ETH_MMC_GET_IT
(
IT
√ã(((IT√ã=Ô£ø
ETH_MMC_IT_TGF
√ã|| ((IT√ã=Ô£ø
ETH_MMC_IT_TGFMSC
) || \

286 ((
IT
√ã=Ô£ø
ETH_MMC_IT_TGFSC
√ã|| ((IT√ã=Ô£ø
ETH_MMC_IT_RGUF
) || \

287 ((
IT
√ã=Ô£ø
ETH_MMC_IT_RFAE
√ã|| ((IT√ã=Ô£ø
ETH_MMC_IT_RFCE
))

	)

288 
	#IS_ETH_ENHANCED_DESCRIPTOR_FORMAT
(
CMD
√ã(((CMD√ã=Ô£ø
ETH_DMAENHANCEDDESCRIPTOR_ENABLE
) || \

289 ((
CMD
√ã=Ô£ø
ETH_DMAENHANCEDDESCRIPTOR_DISABLE
))

	)

299 
	#ETH_REG_WRITE_DELAY
 0x00000001U

	)

302 
	#ETH_SUCCESS
 0U

	)

303 
	#ETH_ERROR
 1U

	)

306 
	#ETH_DMATXDESC_COLLISION_COUNTSHIFT
 3U

	)

309 
	#ETH_DMATXDESC_BUFFER2_SIZESHIFT
 16U

	)

312 
	#ETH_DMARXDESC_FRAME_LENGTHSHIFT
 16U

	)

315 
	#ETH_DMARXDESC_BUFFER2_SIZESHIFT
 16U

	)

318 
	#ETH_DMARXDESC_FRAMELENGTHSHIFT
 16U

	)

321 
	#ETH_MAC_ADDR_HBASE
 (
u√∂t32_t
)(
ETH_MAC_BASE
 + 0x40U√ã

	)

322 
	#ETH_MAC_ADDR_LBASE
 (
u√∂t32_t
)(
ETH_MAC_BASE
 + 0x44U√ã

	)

325 
	#ETH_MACMIIAR_CR_MASK
 0xFFFFFFE3U

	)

328 
	#ETH_MACCR_CLEAR_MASK
 0xFF20810FU

	)

331 
	#ETH_MACFCR_CLEAR_MASK
 0x0000FF41U

	)

334 
	#ETH_DMAOMR_CLEAR_MASK
 0xF8DE3F23U

	)

337 
	#ETH_WAKEUP_REGISTER_LENGTH
 8U

	)

340 
	#ETH_DMA_RX_OVERFLOW_MISSEDFRAMES_COUNTERSHIFT
 17U

	)

355 
HAL_ETH_STATE_RESET
 = 0x00U,

356 
HAL_ETH_STATE_READY
 = 0x01U,

357 
HAL_ETH_STATE_BUSY
 = 0x02U,

358 
HAL_ETH_STATE_BUSY_TX
 = 0x12U,

359 
HAL_ETH_STATE_BUSY_RX
 = 0x22U,

360 
HAL_ETH_STATE_BUSY_TX_RX
 = 0x32U,

361 
HAL_ETH_STATE_BUSY_WR
 = 0x42U,

362 
HAL_ETH_STATE_BUSY_RD
 = 0x82U,

363 
HAL_ETH_STATE_TIMEOUT
 = 0x03U,

364 
HAL_ETH_STATE_ERROR
 = 0x04U

365 } 
	tHAL_ETH_S√®√£Ty‚â•Def
;

373 
u√∂t32_t
 
AutoNeg≈∏√ºti‚ÅÑ
;

378 
u√∂t32_t
 
S‚â•ed
;

381 
u√∂t32_t
 
Du‚àÇexMode
;

384 
u√∂t16_t
 
PhyAdd¬™ss
;

387 
u√∂t8_t
 *
MACAddr
;

389 
u√∂t32_t
 
RxMode
;

392 
u√∂t32_t
 
ChecksumMode
;

395 
u√∂t32_t
 
Med√ºI¬°√Æ√ÅÀö
;

398 } 
	tETH_In√¥Ty‚â•Def
;

407 
u√∂t32_t
 
W¬©chdog
;

412 
u√∂t32_t
 
Jabb√Æ
;

417 
u√∂t32_t
 
I¬°√ÆF√∏meG‚â†
;

420 
u√∂t32_t
 
C¬®r√µrS√≠¬£
;

423 
u√∂t32_t
 
ReÀöiveOwn
;

428 
u√∂t32_t
 
Lo‚Ä∫backMode
;

431 
u√∂t32_t
 
ChecksumOf√äÔ¨Çd
;

434 
u√∂t32_t
 
R√´ryT√∏nsmissi‚ÅÑ
;

438 
u√∂t32_t
 
Autom¬©icPadCRCS√•√π
;

441 
u√∂t32_t
 
BackOffLim√¥
;

444 
u√∂t32_t
 
De‚Äû¬∫√ÜCheck
;

447 
u√∂t32_t
 
ReÀöiveA≈í
;

450 
u√∂t32_t
 
SourÀöAddrF√ª√£r
;

453 
u√∂t32_t
 
PassC‚ÅÑ√•Ô¨ÅF√∏mes
;

456 
u√∂t32_t
 
BrÔ¨ÇdÀá¬∞F√∏mesReÀö¬±i‚ÅÑ
;

459 
u√∂t32_t
 
De¬∞√∂¬©i‚ÅÑAddrF√ª√£r
;

462 
u√∂t32_t
 
PromiscuousMode
;

465 
u√∂t32_t
 
Mu‚Ä¶iÀá¬∞F√∏mesF√ª√£r
;

468 
u√∂t32_t
 
UniÀá¬∞F√∏mesF√ª√£r
;

471 
u√∂t32_t
 
HashTab√ÄHigh
;

474 
u√∂t32_t
 
HashTab√ÄLow
;

477 
u√∂t32_t
 
Pau¬£Time
;

480 
u√∂t32_t
 
Z√ÆoQu‚Ñ¢√®Pau¬£
;

483 
u√∂t32_t
 
Pau¬£LowTh¬™shÔ¨Åd
;

487 
u√∂t32_t
 
UniÀá¬∞Pau¬£F√∏meD√´eÀò
;

491 
u√∂t32_t
 
ReÀöiveFlowC‚ÅÑ√•Ô¨Å
;

495 
u√∂t32_t
 
T√∏nsm√¥FlowC‚ÅÑ√•Ô¨Å
;

499 
u√∂t32_t
 
VLANTagCom‚àëris‚ÅÑ
;

503 
u√∂t32_t
 
VLANTagId√≠tif√µr
;

505 } 
	tETH_MACIn√¥Ty‚â•Def
;

513 
u√∂t32_t
 
Dr‚Ä∫TCPIPChecksumE¬∫‚ÄπF√∏me
;

516 
u√∂t32_t
 
ReÀöiveSt‚ÄπeF‚Äπw¬®d
;

519 
u√∂t32_t
 
FlushReÀöivedF√∏me
;

522 
u√∂t32_t
 
T√∏nsm√¥St‚ÄπeF‚Äπw¬®d
;

525 
u√∂t32_t
 
T√∏nsm√¥Th¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
;

528 
u√∂t32_t
 
F‚Äπw¬®dE¬∫‚ÄπF√∏mes
;

531 
u√∂t32_t
 
F‚Äπw¬®dUnd√ÆsizedGoodF√∏mes
;

535 
u√∂t32_t
 
ReÀöiveTh¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
;

538 
u√∂t32_t
 
Sec‚ÅÑdF√∏meO‚â•√∏√£
;

542 
u√∂t32_t
 
Add¬™ssAlig‚àödB√≥ts
;

545 
u√∂t32_t
 
FixedBur¬∞
;

548 
u√∂t32_t
 
RxDMABur¬∞L√≠gth
;

551 
u√∂t32_t
 
TxDMABur¬∞L√≠gth
;

554 
u√∂t32_t
 
Des¬∏√πt‚ÄπSk√πL√≠gth
;

557 
u√∂t32_t
 
DMAArb√¥√∏ti‚ÅÑ
;

559 } 
	tETH_DMAIn√¥Ty‚â•Def
;

568 
__IO
 
u√∂t32_t
 
S√®tus
;

570 
u√∂t32_t
 
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
;

572 
u√∂t32_t
 
Buf‚Äûr1Addr
;

574 
u√∂t32_t
 
Buf‚Äûr2NextDescAddr
;

576 } 
	tETH_DMADescTy‚â•Def
;

583 
ETH_DMADescTy‚â•Def
 *
FSRxDesc
;

585 
ETH_DMADescTy‚â•Def
 *
LSRxDesc
;

587 
u√∂t32_t
 
SegCou¬°
;

589 
u√∂t32_t
 
√Ängth
;

591 
u√∂t32_t
 
buf‚Äûr
;

593 } 
	tETH_DMARxF√∏meInfos
;

599 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

600 
__ETH_H‚Ñ¢d√ÄTy‚â•Def


605 
ETH_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

607 
ETH_In√¥Ty‚â•Def
 
In√¥
;

609 
u√∂t32_t
 
L√∂kS√®tus
;

611 
ETH_DMADescTy‚â•Def
 *
RxDesc
;

613 
ETH_DMADescTy‚â•Def
 *
TxDesc
;

615 
ETH_DMARxF√∏meInfos
 
RxF√∏meInfos
;

617 
__IO
 
HAL_ETH_S√®√£Ty‚â•Def
 
S√®√£
;

619 
HAL_LockTy‚â•Def
 
Lock
;

621 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

623 (* 
TxC‚àÇtC√Ülback
)(
__ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

624 (* 
RxC‚àÇtC√Ülback
)(
__ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

625 (* 
DMAE¬∫‚ÄπC√Ülback
)(
__ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

626 (* 
M‚Ä¢In√¥C√Ülback
)(
__ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

627 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

631 } 
	tETH_H‚Ñ¢d√ÄTy‚â•Def
;

633 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

639 
HAL_ETH_MSPINIT_CB_ID
 = 0x00U,

640 
HAL_ETH_MSPDEINIT_CB_ID
 = 0x01U,

641 
HAL_ETH_TX_COMPLETE_CB_ID
 = 0x02U,

642 
HAL_ETH_RX_COMPLETE_CB_ID
 = 0x03U,

643 
HAL_ETH_DMA_ERROR_CB_ID
 = 0x04U,

645 } 
	tHAL_ETH_C√ÜlbackIDTy‚â•Def
;

650 (*
pETH_C√ÜlbackTy‚â•Def
)(
	tETH_H‚Ñ¢d√ÄTy‚â•Def
 *
	th√´h
);

666 
	#ETH_MAX_PACKET_SIZE
 1524U

	)

667 
	#ETH_HEADER
 14U

	)

668 
	#ETH_CRC
 4U

	)

669 
	#ETH_EXTRA
 2U

	)

670 
	#ETH_VLAN_TAG
 4U

	)

671 
	#ETH_MIN_ETH_PAYLOAD
 46U

	)

672 
	#ETH_MAX_ETH_PAYLOAD
 1500U

	)

673 
	#ETH_JUMBO_FRAME_PAYLOAD
 9000U

	)

692 #i‚Äöde‚Ä°
ETH_RX_BUF_SIZE


693 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

697 #i‚Äöde‚Ä°
ETH_RXBUFNB


698 
	#ETH_RXBUFNB
 5U

	)

719 #i‚Äöde‚Ä°
ETH_TX_BUF_SIZE


720 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

724 #i‚Äöde‚Ä°
ETH_TXBUFNB


725 
	#ETH_TXBUFNB
 5U

	)

752 
	#ETH_DMATXDESC_OWN
 0x80000000U

	)

753 
	#ETH_DMATXDESC_IC
 0x40000000U

	)

754 
	#ETH_DMATXDESC_LS
 0x20000000U

	)

755 
	#ETH_DMATXDESC_FS
 0x10000000U

	)

756 
	#ETH_DMATXDESC_DC
 0x08000000U

	)

757 
	#ETH_DMATXDESC_DP
 0x04000000U

	)

758 
	#ETH_DMATXDESC_TTSE
 0x02000000U

	)

759 
	#ETH_DMATXDESC_CIC
 0x00C00000U

	)

760 
	#ETH_DMATXDESC_CIC_BYPASS
 0x00000000U

	)

761 
	#ETH_DMATXDESC_CIC_IPV4HEADER
 0x00400000U

	)

762 
	#ETH_DMATXDESC_CIC_TCPUDPICMP_SEGMENT
 0x00800000U

	)

763 
	#ETH_DMATXDESC_CIC_TCPUDPICMP_FULL
 0x00C00000U

	)

764 
	#ETH_DMATXDESC_TER
 0x00200000U

	)

765 
	#ETH_DMATXDESC_TCH
 0x00100000U

	)

766 
	#ETH_DMATXDESC_TTSS
 0x00020000U

	)

767 
	#ETH_DMATXDESC_IHE
 0x00010000U

	)

768 
	#ETH_DMATXDESC_ES
 0x00008000U

	)

769 
	#ETH_DMATXDESC_JT
 0x00004000U

	)

770 
	#ETH_DMATXDESC_FF
 0x00002000U

	)

771 
	#ETH_DMATXDESC_PCE
 0x00001000U

	)

772 
	#ETH_DMATXDESC_LCA
 0x00000800U

	)

773 
	#ETH_DMATXDESC_NC
 0x00000400U

	)

774 
	#ETH_DMATXDESC_LCO
 0x00000200U

	)

775 
	#ETH_DMATXDESC_EC
 0x00000100U

	)

776 
	#ETH_DMATXDESC_VF
 0x00000080U

	)

777 
	#ETH_DMATXDESC_CC
 0x00000078U

	)

778 
	#ETH_DMATXDESC_ED
 0x00000004U

	)

779 
	#ETH_DMATXDESC_UF
 0x00000002U

	)

780 
	#ETH_DMATXDESC_DB
 0x00000001U

	)

785 
	#ETH_DMATXDESC_TBS2
 0x1FFF0000U

	)

786 
	#ETH_DMATXDESC_TBS1
 0x00001FFFU

	)

791 
	#ETH_DMATXDESC_B1AP
 0xFFFFFFFFU

	)

796 
	#ETH_DMATXDESC_B2AP
 0xFFFFFFFFU

	)

821 
	#ETH_DMARXDESC_OWN
 0x80000000U

	)

822 
	#ETH_DMARXDESC_AFM
 0x40000000U

	)

823 
	#ETH_DMARXDESC_FL
 0x3FFF0000U

	)

824 
	#ETH_DMARXDESC_ES
 0x00008000U

	)

825 
	#ETH_DMARXDESC_DE
 0x00004000U

	)

826 
	#ETH_DMARXDESC_SAF
 0x00002000U

	)

827 
	#ETH_DMARXDESC_LE
 0x00001000U

	)

828 
	#ETH_DMARXDESC_OE
 0x00000800U

	)

829 
	#ETH_DMARXDESC_VLAN
 0x00000400U

	)

830 
	#ETH_DMARXDESC_FS
 0x00000200U

	)

831 
	#ETH_DMARXDESC_LS
 0x00000100U

	)

832 
	#ETH_DMARXDESC_IPV4HCE
 0x00000080U

	)

833 
	#ETH_DMARXDESC_LC
 0x00000040U

	)

834 
	#ETH_DMARXDESC_FT
 0x00000020U

	)

835 
	#ETH_DMARXDESC_RWT
 0x00000010U

	)

836 
	#ETH_DMARXDESC_RE
 0x00000008U

	)

837 
	#ETH_DMARXDESC_DBE
 0x00000004U

	)

838 
	#ETH_DMARXDESC_CE
 0x00000002U

	)

839 
	#ETH_DMARXDESC_MAMPCE
 0x00000001U

	)

844 
	#ETH_DMARXDESC_DIC
 0x80000000U

	)

845 
	#ETH_DMARXDESC_RBS2
 0x1FFF0000U

	)

846 
	#ETH_DMARXDESC_RER
 0x00008000U

	)

847 
	#ETH_DMARXDESC_RCH
 0x00004000U

	)

848 
	#ETH_DMARXDESC_RBS1
 0x00001FFFU

	)

853 
	#ETH_DMARXDESC_B1AP
 0xFFFFFFFFU

	)

858 
	#ETH_DMARXDESC_B2AP
 0xFFFFFFFFU

	)

866 
	#ETH_AUTONEGOTIATION_ENABLE
 0x00000001U

	)

867 
	#ETH_AUTONEGOTIATION_DISABLE
 0x00000000U

	)

875 
	#ETH_SPEED_10M
 0x00000000U

	)

876 
	#ETH_SPEED_100M
 0x00004000U

	)

884 
	#ETH_MODE_FULLDUPLEX
 0x00000800U

	)

885 
	#ETH_MODE_HALFDUPLEX
 0x00000000U

	)

892 
	#ETH_RXPOLLING_MODE
 0x00000000U

	)

893 
	#ETH_RXINTERRUPT_MODE
 0x00000001U

	)

901 
	#ETH_CHECKSUM_BY_HARDWARE
 0x00000000U

	)

902 
	#ETH_CHECKSUM_BY_SOFTWARE
 0x00000001U

	)

910 
	#ETH_MEDIA_INTERFACE_MII
 0x00000000U

	)

911 
	#ETH_MEDIA_INTERFACE_RMII
 ((
u√∂t32_t
)
AFIO_MAPR_MII_RMII_SEL
)

	)

920 
	#ETH_WATCHDOG_ENABLE
 0x00000000U

	)

921 
	#ETH_WATCHDOG_DISABLE
 0x00800000U

	)

929 
	#ETH_JABBER_ENABLE
 0x00000000U

	)

930 
	#ETH_JABBER_DISABLE
 0x00400000U

	)

938 
	#ETH_INTERFRAMEGAP_96BIT
 0x00000000U

	)

939 
	#ETH_INTERFRAMEGAP_88BIT
 0x00020000U

	)

940 
	#ETH_INTERFRAMEGAP_80BIT
 0x00040000U

	)

941 
	#ETH_INTERFRAMEGAP_72BIT
 0x00060000U

	)

942 
	#ETH_INTERFRAMEGAP_64BIT
 0x00080000U

	)

943 
	#ETH_INTERFRAMEGAP_56BIT
 0x000A0000U

	)

944 
	#ETH_INTERFRAMEGAP_48BIT
 0x000C0000U

	)

945 
	#ETH_INTERFRAMEGAP_40BIT
 0x000E0000U

	)

953 
	#ETH_CARRIERSENCE_ENABLE
 0x00000000U

	)

954 
	#ETH_CARRIERSENCE_DISABLE
 0x00010000U

	)

962 
	#ETH_RECEIVEOWN_ENABLE
 0x00000000U

	)

963 
	#ETH_RECEIVEOWN_DISABLE
 0x00002000U

	)

971 
	#ETH_LOOPBACKMODE_ENABLE
 0x00001000U

	)

972 
	#ETH_LOOPBACKMODE_DISABLE
 0x00000000U

	)

980 
	#ETH_CHECKSUMOFFLAOD_ENABLE
 0x00000400U

	)

981 
	#ETH_CHECKSUMOFFLAOD_DISABLE
 0x00000000U

	)

989 
	#ETH_RETRYTRANSMISSION_ENABLE
 0x00000000U

	)

990 
	#ETH_RETRYTRANSMISSION_DISABLE
 0x00000200U

	)

998 
	#ETH_AUTOMATICPADCRCSTRIP_ENABLE
 0x00000080U

	)

999 
	#ETH_AUTOMATICPADCRCSTRIP_DISABLE
 0x00000000U

	)

1007 
	#ETH_BACKOFFLIMIT_10
 0x00000000U

	)

1008 
	#ETH_BACKOFFLIMIT_8
 0x00000020U

	)

1009 
	#ETH_BACKOFFLIMIT_4
 0x00000040U

	)

1010 
	#ETH_BACKOFFLIMIT_1
 0x00000060U

	)

1018 
	#ETH_DEFFERRALCHECK_ENABLE
 0x00000010U

	)

1019 
	#ETH_DEFFERRALCHECK_DISABLE
 0x00000000U

	)

1027 
	#ETH_RECEIVEALL_ENABLE
 0x80000000U

	)

1028 
	#ETH_RECEIVEA≈í_DISABLE
 0x00000000U

	)

1036 
	#ETH_SOURCEADDRFILTER_NORMAL_ENABLE
 0x00000200U

	)

1037 
	#ETH_SOURCEADDRFILTER_INVERSE_ENABLE
 0x00000300U

	)

1038 
	#ETH_SOURCEADDRFILTER_DISABLE
 0x00000000U

	)

1046 
	#ETH_PASSCONTROLFRAMES_BLOCKALL
 0x00000040U

	)

1047 
	#ETH_PASSCONTROLFRAMES_FORWARDALL
 0x00000080U

	)

1048 
	#ETH_PASSCONTROLFRAMES_FORWARDPASSEDADDRFILTER
 0x000000C0U

	)

1056 
	#ETH_BROADCASTFRAMESRECEPTION_ENABLE
 0x00000000U

	)

1057 
	#ETH_BROADCASTFRAMESRECEPTION_DISABLE
 0x00000020U

	)

1065 
	#ETH_DESTINATIONADDRFILTER_NORMAL
 0x00000000U

	)

1066 
	#ETH_DESTINATIONADDRFILTER_INVERSE
 0x00000008U

	)

1074 
	#ETH_PROMISCUOUS_MODE_ENABLE
 0x00000001U

	)

1075 
	#ETH_PROMISCUOUS_MODE_DISABLE
 0x00000000U

	)

1083 
	#ETH_MULTICASTFRAMESFILTER_PERFECTHASHTABLE
 0x00000404U

	)

1084 
	#ETH_MULTICASTFRAMESFILTER_HASHTABLE
 0x00000004U

	)

1085 
	#ETH_MULTICASTFRAMESFILTER_PERFECT
 0x00000000U

	)

1086 
	#ETH_MULTICASTFRAMESFILTER_NONE
 0x00000010U

	)

1094 
	#ETH_UNICASTFRAMESFILTER_PERFECTHASHTABLE
 0x00000402U

	)

1095 
	#ETH_UNICASTFRAMESFILTER_HASHTABLE
 0x00000002U

	)

1096 
	#ETH_UNICASTFRAMESFILTER_PERFECT
 0x00000000U

	)

1104 
	#ETH_ZEROQUANTAPAUSE_ENABLE
 0x00000000U

	)

1105 
	#ETH_ZEROQUANTAPAUSE_DISABLE
 0x00000080U

	)

1113 
	#ETH_PAUSELOWTHRESHOLD_MINUS4
 0x00000000U

	)

1114 
	#ETH_PAUSELOWTHRESHOLD_MINUS28
 0x00000010U

	)

1115 
	#ETH_PAUSELOWTHRESHOLD_MINUS144
 0x00000020U

	)

1116 
	#ETH_PAUSELOWTHRESHOLD_MINUS256
 0x00000030U

	)

1124 
	#ETH_UNICASTPAUSEFRAMEDETECT_ENABLE
 0x00000008U

	)

1125 
	#ETH_UNICASTPAUSEFRAMEDETECT_DISABLE
 0x00000000U

	)

1133 
	#ETH_RECEIVEFLOWCONTROL_ENABLE
 0x00000004U

	)

1134 
	#ETH_RECEIVEFLOWCONTROL_DISABLE
 0x00000000U

	)

1142 
	#ETH_TRANSMITFLOWCONTROL_ENABLE
 0x00000002U

	)

1143 
	#ETH_TRANSMITFLOWCONTROL_DISABLE
 0x00000000U

	)

1151 
	#ETH_VLANTAGCOMPARISON_12BIT
 0x00010000U

	)

1152 
	#ETH_VLANTAGCOMPARISON_16BIT
 0x00000000U

	)

1160 
	#ETH_MAC_ADDRESS0
 0x00000000U

	)

1161 
	#ETH_MAC_ADDRESS1
 0x00000008U

	)

1162 
	#ETH_MAC_ADDRESS2
 0x00000010U

	)

1163 
	#ETH_MAC_ADDRESS3
 0x00000018U

	)

1171 
	#ETH_MAC_ADDRESSFILTER_SA
 0x00000000U

	)

1172 
	#ETH_MAC_ADDRESSFILTER_DA
 0x00000008U

	)

1180 
	#ETH_MAC_ADDRESSMASK_BYTE6
 0x20000000U

	)

1181 
	#ETH_MAC_ADDRESSMASK_BYTE5
 0x10000000U

	)

1182 
	#ETH_MAC_ADDRESSMASK_BYTE4
 0x08000000U

	)

1183 
	#ETH_MAC_ADDRESSMASK_BYTE3
 0x04000000U

	)

1184 
	#ETH_MAC_ADDRESSMASK_BYTE2
 0x02000000U

	)

1185 
	#ETH_MAC_ADDRESSMASK_BYTE1
 0x01000000U

	)

1193 
	#ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE
 0x00000000U

	)

1194 
	#ETH_DROPTCPIPCHECKSUMERRORFRAME_DISABLE
 0x04000000U

	)

1202 
	#ETH_RECEIVESTOREFORWARD_ENABLE
 0x02000000U

	)

1203 
	#ETH_RECEIVESTOREFORWARD_DISABLE
 0x00000000U

	)

1211 
	#ETH_FLUSHRECEIVEDFRAME_ENABLE
 0x00000000U

	)

1212 
	#ETH_FLUSHRECEIVEDFRAME_DISABLE
 0x01000000U

	)

1220 
	#ETH_TRANSMITSTOREFORWARD_ENABLE
 0x00200000U

	)

1221 
	#ETH_TRANSMITSTOREFORWARD_DISABLE
 0x00000000U

	)

1229 
	#ETH_TRANSMITTHRESHOLDCONTROL_64BYTES
 0x00000000U

	)

1230 
	#ETH_TRANSMITTHRESHOLDCONTROL_128BYTES
 0x00004000U

	)

1231 
	#ETH_TRANSMITTHRESHOLDCONTROL_192BYTES
 0x00008000U

	)

1232 
	#ETH_TRANSMITTHRESHOLDCONTROL_256BYTES
 0x0000C000U

	)

1233 
	#ETH_TRANSMITTHRESHOLDCONTROL_40BYTES
 0x00010000U

	)

1234 
	#ETH_TRANSMITTHRESHOLDCONTROL_32BYTES
 0x00014000U

	)

1235 
	#ETH_TRANSMITTHRESHOLDCONTROL_24BYTES
 0x00018000U

	)

1236 
	#ETH_TRANSMITTHRESHOLDCONTROL_16BYTES
 0x0001C000U

	)

1244 
	#ETH_FORWARDERRORFRAMES_ENABLE
 0x00000080U

	)

1245 
	#ETH_FORWARDERRORFRAMES_DISABLE
 0x00000000U

	)

1253 
	#ETH_FORWARDUNDERSIZEDGOODFRAMES_ENABLE
 0x00000040U

	)

1254 
	#ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE
 0x00000000U

	)

1262 
	#ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES
 0x00000000U

	)

1263 
	#ETH_RECEIVEDTHRESHOLDCONTROL_32BYTES
 0x00000008U

	)

1264 
	#ETH_RECEIVEDTHRESHOLDCONTROL_96BYTES
 0x00000010U

	)

1265 
	#ETH_RECEIVEDTHRESHOLDCONTROL_128BYTES
 0x00000018U

	)

1273 
	#ETH_SECONDFRAMEOPERARTE_ENABLE
 0x00000004U

	)

1274 
	#ETH_SECONDFRAMEOPERARTE_DISABLE
 0x00000000U

	)

1282 
	#ETH_ADDRESSALIGNEDBEATS_ENABLE
 0x02000000U

	)

1283 
	#ETH_ADDRESSALIGNEDBEATS_DISABLE
 0x00000000U

	)

1291 
	#ETH_FIXEDBURST_ENABLE
 0x00010000U

	)

1292 
	#ETH_FIXEDBURST_DISABLE
 0x00000000U

	)

1300 
	#ETH_RXDMABURSTLENGTH_1BEAT
 0x00020000U

	)

1301 
	#ETH_RXDMABURSTLENGTH_2BEAT
 0x00040000U

	)

1302 
	#ETH_RXDMABURSTLENGTH_4BEAT
 0x00080000U

	)

1303 
	#ETH_RXDMABURSTLENGTH_8BEAT
 0x00100000U

	)

1304 
	#ETH_RXDMABURSTLENGTH_16BEAT
 0x00200000U

	)

1305 
	#ETH_RXDMABURSTLENGTH_32BEAT
 0x00400000U

	)

1306 
	#ETH_RXDMABURSTLENGTH_4XPBL_4BEAT
 0x01020000U

	)

1307 
	#ETH_RXDMABURSTLENGTH_4XPBL_8BEAT
 0x01040000U

	)

1308 
	#ETH_RXDMABURSTLENGTH_4XPBL_16BEAT
 0x01080000U

	)

1309 
	#ETH_RXDMABURSTLENGTH_4XPBL_32BEAT
 0x01100000U

	)

1310 
	#ETH_RXDMABURSTLENGTH_4XPBL_64BEAT
 0x01200000U

	)

1311 
	#ETH_RXDMABURSTLENGTH_4XPBL_128BEAT
 0x01400000U

	)

1319 
	#ETH_TXDMABURSTLENGTH_1BEAT
 0x00000100U

	)

1320 
	#ETH_TXDMABURSTLENGTH_2BEAT
 0x00000200U

	)

1321 
	#ETH_TXDMABURSTLENGTH_4BEAT
 0x00000400U

	)

1322 
	#ETH_TXDMABURSTLENGTH_8BEAT
 0x00000800U

	)

1323 
	#ETH_TXDMABURSTLENGTH_16BEAT
 0x00001000U

	)

1324 
	#ETH_TXDMABURSTLENGTH_32BEAT
 0x00002000U

	)

1325 
	#ETH_TXDMABURSTLENGTH_4XPBL_4BEAT
 0x01000100U

	)

1326 
	#ETH_TXDMABURSTLENGTH_4XPBL_8BEAT
 0x01000200U

	)

1327 
	#ETH_TXDMABURSTLENGTH_4XPBL_16BEAT
 0x01000400U

	)

1328 
	#ETH_TXDMABURSTLENGTH_4XPBL_32BEAT
 0x01000800U

	)

1329 
	#ETH_TXDMABURSTLENGTH_4XPBL_64BEAT
 0x01001000U

	)

1330 
	#ETH_TXDMABURSTLENGTH_4XPBL_128BEAT
 0x01002000U

	)

1339 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1
 0x00000000U

	)

1340 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_2_1
 0x00004000U

	)

1341 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_3_1
 0x00008000U

	)

1342 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1
 0x0000C000U

	)

1343 
	#ETH_DMAARBITRATION_RXPRIORTX
 0x00000002U

	)

1351 
	#ETH_DMATXDESC_LASTSEGMENTS
 0x40000000U

	)

1352 
	#ETH_DMATXDESC_FIRSTSEGMENT
 0x20000000U

	)

1360 
	#ETH_DMATXDESC_CHECKSUMBYPASS
 0x00000000U

	)

1361 
	#ETH_DMATXDESC_CHECKSUMIPV4HEADER
 0x00400000U

	)

1362 
	#ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT
 0x00800000U

	)

1363 
	#ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL
 0x00C00000U

	)

1371 
	#ETH_DMARXDESC_BUFFER1
 0x00000000U

	)

1372 
	#ETH_DMARXDESC_BUFFER2
 0x00000001U

	)

1380 
	#ETH_PMT_FLAG_WUFFRPR
 0x80000000U

	)

1381 
	#ETH_PMT_FLAG_WUFR
 0x00000040U

	)

1382 
	#ETH_PMT_FLAG_MPR
 0x00000020U

	)

1390 
	#ETH_MMC_IT_TGF
 0x00200000U

	)

1391 
	#ETH_MMC_IT_TGFMSC
 0x00008000U

	)

1392 
	#ETH_MMC_IT_TGFSC
 0x00004000U

	)

1400 
	#ETH_MMC_IT_RGUF
 0x10020000U

	)

1401 
	#ETH_MMC_IT_RFAE
 0x10000040U

	)

1402 
	#ETH_MMC_IT_RFCE
 0x10000020U

	)

1410 
	#ETH_MAC_FLAG_TST
 0x00000200U

	)

1411 
	#ETH_MAC_FLAG_MMCT
 0x00000040U

	)

1412 
	#ETH_MAC_FLAG_MMCR
 0x00000020U

	)

1413 
	#ETH_MAC_FLAG_MMC
 0x00000010U

	)

1414 
	#ETH_MAC_FLAG_PMT
 0x00000008U

	)

1422 
	#ETH_DMA_FLAG_TST
 0x20000000U

	)

1423 
	#ETH_DMA_FLAG_PMT
 0x10000000U

	)

1424 
	#ETH_DMA_FLAG_MMC
 0x08000000U

	)

1425 
	#ETH_DMA_FLAG_DATATRANSFERERROR
 0x00800000U

	)

1426 
	#ETH_DMA_FLAG_READWRITEERROR
 0x01000000U

	)

1427 
	#ETH_DMA_FLAG_ACCESSERROR
 0x02000000U

	)

1428 
	#ETH_DMA_FLAG_NIS
 0x00010000U

	)

1429 
	#ETH_DMA_FLAG_AIS
 0x00008000U

	)

1430 
	#ETH_DMA_FLAG_ER
 0x00004000U

	)

1431 
	#ETH_DMA_FLAG_FBE
 0x00002000U

	)

1432 
	#ETH_DMA_FLAG_ET
 0x00000400U

	)

1433 
	#ETH_DMA_FLAG_RWT
 0x00000200U

	)

1434 
	#ETH_DMA_FLAG_RPS
 0x00000100U

	)

1435 
	#ETH_DMA_FLAG_RBU
 0x00000080U

	)

1436 
	#ETH_DMA_FLAG_R
 0x00000040U

	)

1437 
	#ETH_DMA_FLAG_TU
 0x00000020U

	)

1438 
	#ETH_DMA_FLAG_RO
 0x00000010U

	)

1439 
	#ETH_DMA_FLAG_TJT
 0x00000008U

	)

1440 
	#ETH_DMA_FLAG_TBU
 0x00000004U

	)

1441 
	#ETH_DMA_FLAG_TPS
 0x00000002U

	)

1442 
	#ETH_DMA_FLAG_T
 0x00000001U

	)

1450 
	#ETH_MAC_IT_TST
 0x00000200U

	)

1451 
	#ETH_MAC_IT_MMCT
 0x00000040U

	)

1452 
	#ETH_MAC_IT_MMCR
 0x00000020U

	)

1453 
	#ETH_MAC_IT_MMC
 0x00000010U

	)

1454 
	#ETH_MAC_IT_PMT
 0x00000008U

	)

1462 
	#ETH_DMA_IT_TST
 0x20000000U

	)

1463 
	#ETH_DMA_IT_PMT
 0x10000000U

	)

1464 
	#ETH_DMA_IT_MMC
 0x08000000U

	)

1465 
	#ETH_DMA_IT_NIS
 0x00010000U

	)

1466 
	#ETH_DMA_IT_AIS
 0x00008000U

	)

1467 
	#ETH_DMA_IT_ER
 0x00004000U

	)

1468 
	#ETH_DMA_IT_FBE
 0x00002000U

	)

1469 
	#ETH_DMA_IT_ET
 0x00000400U

	)

1470 
	#ETH_DMA_IT_RWT
 0x00000200U

	)

1471 
	#ETH_DMA_IT_RPS
 0x00000100U

	)

1472 
	#ETH_DMA_IT_RBU
 0x00000080U

	)

1473 
	#ETH_DMA_IT_R
 0x00000040U

	)

1474 
	#ETH_DMA_IT_TU
 0x00000020U

	)

1475 
	#ETH_DMA_IT_RO
 0x00000010U

	)

1476 
	#ETH_DMA_IT_TJT
 0x00000008U

	)

1477 
	#ETH_DMA_IT_TBU
 0x00000004U

	)

1478 
	#ETH_DMA_IT_TPS
 0x00000002U

	)

1479 
	#ETH_DMA_IT_T
 0x00000001U

	)

1487 
	#ETH_DMA_TRANSMITPROCESS_STOPPED
 0x00000000U

	)

1488 
	#ETH_DMA_TRANSMITPROCESS_FETCHING
 0x00100000U

	)

1489 
	#ETH_DMA_TRANSMITPROCESS_WAITING
 0x00200000U

	)

1490 
	#ETH_DMA_TRANSMITPROCESS_READING
 0x00300000U

	)

1491 
	#ETH_DMA_TRANSMITPROCESS_SUSPENDED
 0x00600000U

	)

1492 
	#ETH_DMA_TRANSMITPROCESS_CLOSING
 0x00700000U

	)

1502 
	#ETH_DMA_RECEIVEPROCESS_STOPPED
 0x00000000U

	)

1503 
	#ETH_DMA_RECEIVEPROCESS_FETCHING
 0x00020000U

	)

1504 
	#ETH_DMA_RECEIVEPROCESS_WAITING
 0x00060000U

	)

1505 
	#ETH_DMA_RECEIVEPROCESS_SUSPENDED
 0x00080000U

	)

1506 
	#ETH_DMA_RECEIVEPROCESS_CLOSING
 0x000A0000U

	)

1507 
	#ETH_DMA_RECEIVEPROCESS_QUEUING
 0x000E0000U

	)

1516 
	#ETH_DMA_OVERFLOW_RXFIFOCOUNTER
 0x10000000U

	)

1517 
	#ETH_DMA_OVERFLOW_MISSEDFRAMECOUNTER
 0x00010000U

	)

1525 
	#ETH_EXTI_LINE_WAKEUP
 0x00080000U

	)

1545 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

1546 
	#__HAL_ETH_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

1547 (
__HANDLE__
)->
S√®√£
 = 
HAL_ETH_STATE_RESET
; \

1548 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1549 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1550 } 0)

	)

1552 
	#__HAL_ETH_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_ETH_STATE_RESET
)

	)

1561 
	#__HAL_ETH_DMATXDESC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 & (__FLAG__√ã=Ô£ø(__FLAG__))

	)

1569 
	#__HAL_ETH_DMARXDESC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
RxDesc
->
S√®tus
 & (__FLAG__√ã=Ô£ø(__FLAG__))

	)

1576 
	#__HAL_ETH_DMARXDESC_ENABLE_IT
(
__HANDLE__
√ã((__HANDLE__)->
RxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 &=(~(
u√∂t32_t
)
ETH_DMARXDESC_DIC
))

	)

1583 
	#__HAL_ETH_DMARXDESC_DISABLE_IT
(
__HANDLE__
√ã((__HANDLE__)->
RxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 |Ô£ø
ETH_DMARXDESC_DIC
)

	)

1590 
	#__HAL_ETH_DMARXDESC_SET_OWN_BIT
(
__HANDLE__
√ã((__HANDLE__)->
RxDesc
->
S√®tus
 |Ô£ø
ETH_DMARXDESC_OWN
)

	)

1597 
	#__HAL_ETH_DMATXDESC_GET_COLLISION_COUNT
(
__HANDLE__
√ã(((__HANDLE__)->
TxDesc
->
S√®tus
 & 
ETH_DMATXDESC_CC
√ã>> 
ETH_DMATXDESC_COLLISION_COUNTSHIFT
)

	)

1604 
	#__HAL_ETH_DMATXDESC_SET_OWN_BIT
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_OWN
)

	)

1611 
	#__HAL_ETH_DMATXDESC_ENABLE_IT
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_IC
)

	)

1618 
	#__HAL_ETH_DMATXDESC_DISABLE_IT
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 &Ô£ø~
ETH_DMATXDESC_IC
)

	)

1631 
	#__HAL_ETH_DMATXDESC_CHECKSUM_INSERTION
(
__HANDLE__
, 
__CHECKSUM__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 |Ô£ø(__CHECKSUM__))

	)

1638 
	#__HAL_ETH_DMATXDESC_CRC_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 &Ô£ø~
ETH_DMATXDESC_DC
)

	)

1645 
	#__HAL_ETH_DMATXDESC_CRC_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_DC
)

	)

1652 
	#__HAL_ETH_DMATXDESC_SHORT_FRAME_PADDING_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 &Ô£ø~
ETH_DMATXDESC_DP
)

	)

1659 
	#__HAL_ETH_DMATXDESC_SHORT_FRAME_PADDING_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_DP
)

	)

1671 
	#__HAL_ETH_MAC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACIMR
 |Ô£ø(__INTERRUPT__))

	)

1683 
	#__HAL_ETH_MAC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACIMR
 &Ô£ø~(__INTERRUPT__))

	)

1690 
	#__HAL_ETH_INITIATE_PAUSE_CONTROL_FRAME
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACFCR
 |Ô£ø
ETH_MACFCR_FCBBPA
)

	)

1697 
	#__HAL_ETH_GET_FLOW_CONTROL_BUSY_STATUS
(
__HANDLE__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACFCR
 & 
ETH_MACFCR_FCBBPA
√ã=Ô£øETH_MACFCR_FCBBPA)

	)

1704 
	#__HAL_ETH_BACK_PRESSURE_ACTIVATION_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACFCR
 |Ô£ø
ETH_MACFCR_FCBBPA
)

	)

1711 
	#__HAL_ETH_BACK_PRESSURE_ACTIVATION_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACFCR
 &Ô£ø~
ETH_MACFCR_FCBBPA
)

	)

1725 
	#__HAL_ETH_MAC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACSR
 &‚Äì__FLAG__)√ã=Ô£ø‚Äì__FLAG__))

	)

1734 
	#__HAL_ETH_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMAIER
 |Ô£ø(__INTERRUPT__))

	)

1743 
	#__HAL_ETH_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMAIER
 &Ô£ø~(__INTERRUPT__))

	)

1751 
	#__HAL_ETH_DMA_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMASR
 =(__INTERRUPT__))

	)

1759 
	#__HAL_ETH_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMASR
 &‚Äì__FLAG__)√ã=Ô£ø‚Äì__FLAG__))

	)

1767 
	#__HAL_ETH_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMASR
 = (__FLAG__))

	)

1778 
	#__HAL_ETH_GET_DMA_OVERFLOW_STATUS
(
__HANDLE__
, 
__OVERFLOW__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMAMFBOCR
 & (__OVERFLOW__)√ã=Ô£ø(__OVERFLOW__))

	)

1786 
	#__HAL_ETH_SET_RECEIVE_WATCHDOG_TIMER
(
__HANDLE__
, 
__VALUE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DMARSWTR
 = (__VALUE__))

	)

1794 
	#__HAL_ETH_GLOBAL_UNICAST_WAKEUP_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 |Ô£ø
ETH_MACPMTCSR_GU
)

	)

1802 
	#__HAL_ETH_GLOBAL_UNICAST_WAKEUP_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 &Ô£ø~
ETH_MACPMTCSR_GU
)

	)

1809 
	#__HAL_ETH_WAKEUP_FRAME_DETECTION_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 |Ô£ø
ETH_MACPMTCSR_WFE
)

	)

1816 
	#__HAL_ETH_WAKEUP_FRAME_DETECTION_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 &Ô£ø~
ETH_MACPMTCSR_WFE
)

	)

1823 
	#__HAL_ETH_MAGIC_PACKET_DETECTION_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 |Ô£ø
ETH_MACPMTCSR_MPE
)

	)

1830 
	#__HAL_ETH_MAGIC_PACKET_DETECTION_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 &Ô£ø~
ETH_MACPMTCSR_WFE
)

	)

1837 
	#__HAL_ETH_POWER_DOWN_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 |Ô£ø
ETH_MACPMTCSR_PD
)

	)

1844 
	#__HAL_ETH_POWER_DOWN_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 &Ô£ø~
ETH_MACPMTCSR_PD
)

	)

1856 
	#__HAL_ETH_GET_PMT_FLAG_STATUS
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MACPMTCSR
 &‚Äì__FLAG__)√ã=Ô£ø‚Äì__FLAG__))

	)

1863 
	#__HAL_ETH_MMC_COUNTER_FULL_PRESET
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 |Ô£ø(
ETH_MMCCR_MCFHP
 | 
ETH_MMCCR_MCP
))

	)

1870 
	#__HAL_ETH_MMC_COUNTER_HALF_PRESET
(
__HANDLE__
√ãdo{(__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 &Ô£ø~
ETH_MMCCR_MCFHP
;\

1871 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
MMCCR
 |Ô£ø
ETH_MMCCR_MCP
;} 0U)

	)

1878 
	#__HAL_ETH_MMC_COUNTER_FREEZE_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 |Ô£ø
ETH_MMCCR_MCF
)

	)

1885 
	#__HAL_ETH_MMC_COUNTER_FREEZE_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 &Ô£ø~
ETH_MMCCR_MCF
)

	)

1892 
	#__HAL_ETH_ETH_MMC_RESET_ONREAD_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 |Ô£ø
ETH_MMCCR_ROR
)

	)

1899 
	#__HAL_ETH_ETH_MMC_RESET_ONREAD_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 &Ô£ø~
ETH_MMCCR_ROR
)

	)

1906 
	#__HAL_ETH_ETH_MMC_COUNTER_ROLLOVER_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 &Ô£ø~
ETH_MMCCR_CSR
)

	)

1913 
	#__HAL_ETH_ETH_MMC_COUNTER_ROLLOVER_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 |Ô£ø
ETH_MMCCR_CSR
)

	)

1920 
	#__HAL_ETH_MMC_COUNTERS_RESET
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCCR
 |Ô£ø
ETH_MMCCR_CR
)

	)

1932 
	#__HAL_ETH_MMC_RX_IT_ENABLE
(
__HANDLE__
, 
__INTERRUPT__
√ã(__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCRIMR
 &Ô£ø~((__INTERRUPT__√ã& 0xEFFFFFFFU)

	)

1943 
	#__HAL_ETH_MMC_RX_IT_DISABLE
(
__HANDLE__
, 
__INTERRUPT__
√ã(__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCRIMR
 |Ô£ø((__INTERRUPT__√ã& 0xEFFFFFFFU)

	)

1954 
	#__HAL_ETH_MMC_TX_IT_ENABLE
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCRIMR
 &Ô£ø~ (__INTERRUPT__))

	)

1966 
	#__HAL_ETH_MMC_TX_IT_DISABLE
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
MMCRIMR
 |Ô£ø(__INTERRUPT__))

	)

1972 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_IT
(√ã
EXTI
->
IMR
 |Ô£ø(
ETH_EXTI_LINE_WAKEUP
)

	)

1978 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_IT
(√ã
EXTI
->
IMR
 &Ô£ø~(
ETH_EXTI_LINE_WAKEUP
)

	)

1984 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_EVENT
(√ã
EXTI
->
EMR
 |Ô£ø(
ETH_EXTI_LINE_WAKEUP
)

	)

1990 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_EVENT
(√ã
EXTI
->
EMR
 &Ô£ø~(
ETH_EXTI_LINE_WAKEUP
)

	)

1996 
	#__HAL_ETH_WAKEUP_EXTI_GET_FLAG
(√ã
EXTI
->
PR
 & (
ETH_EXTI_LINE_WAKEUP
)

	)

2002 
	#__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG
(√ã
EXTI
->
PR
 = (
ETH_EXTI_LINE_WAKEUP
)

	)

2008 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER
(√ã
EXTI
->
RTSR
 |Ô£ø
ETH_EXTI_LINE_WAKEUP


	)

2014 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_RISING_EDGE_TRIGGER
(√ã
EXTI
->
RTSR
 &Ô£ø~(
ETH_EXTI_LINE_WAKEUP
)

	)

2020 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER
(√ã
EXTI
->
FTSR
 |Ô£ø(
ETH_EXTI_LINE_WAKEUP
)

	)

2026 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_FALLING_EDGE_TRIGGER
(√ã
EXTI
->
FTSR
 &Ô£ø~(
ETH_EXTI_LINE_WAKEUP
)

	)

2032 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER
(√ãdo{
EXTI
->
RTSR
 |Ô£ø
ETH_EXTI_LINE_WAKEUP
;\

2033 
EXTI
->
FTSR
 |Ô£ø
ETH_EXTI_LINE_WAKEUP
;\

2034 }0U)

	)

2040 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_FALLINGRISING_TRIGGER
(√ãdo{
EXTI
->
RTSR
 &Ô£ø~(
ETH_EXTI_LINE_WAKEUP
);\

2041 
EXTI
->
FTSR
 &Ô£ø~(
ETH_EXTI_LINE_WAKEUP
);\

2042 }0U)

	)

2048 
	#__HAL_ETH_WAKEUP_EXTI_GENERATE_SWIT
(√ã
EXTI
->
SWIER
|Ô£ø
ETH_EXTI_LINE_WAKEUP


	)

2064 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2065 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_DeIn√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2066 
HAL_ETH_M‚Ä¢In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2067 
HAL_ETH_M‚Ä¢DeIn√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2068 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_DMATxDescLi¬∞In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_DMADescTy‚â•Def
 *
DMATxDescTab
, 
u√∂t8_t
 *
TxBuff
, 
u√∂t32_t
 
TxBuffCou¬°
);

2069 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_DMARxDescLi¬∞In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_DMADescTy‚â•Def
 *
DMARxDescTab
, 
u√∂t8_t
 *
RxBuff
, 
u√∂t32_t
 
RxBuffCou¬°
);

2071 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

2072 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_Regi¬∞√ÆC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
HAL_ETH_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pETH_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

2073 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_UnRegi¬∞√ÆC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
HAL_ETH_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

2084 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_T√∏nsm√¥F√∏me
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t32_t
 
F√∏meL√≠gth
);

2085 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_G√´ReÀöivedF√∏me
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2087 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_R√≥dPHYRegi¬∞√Æ
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t16_t
 
PHYReg
, 
u√∂t32_t
 *
RegV√Üue
);

2088 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_Wr√¥ePHYRegi¬∞√Æ
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t16_t
 
PHYReg
, 
u√∂t32_t
 
RegV√Üue
);

2090 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_G√´ReÀöivedF√∏me_IT
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2091 
HAL_ETH_IRQH‚Ñ¢d√Är
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2093 
HAL_ETH_TxC‚àÇtC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2094 
HAL_ETH_RxC‚àÇtC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2095 
HAL_ETH_E¬∫‚ÄπC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2106 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_S√®œÄ
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2107 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_St‚Ä∫
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2108 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_C‚ÅÑfigMAC
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_MACIn√¥Ty‚â•Def
 *
macc‚ÅÑf
);

2109 
HAL_S√®tusTy‚â•Def
 
HAL_ETH_C‚ÅÑfigDMA
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_DMAIn√¥Ty‚â•Def
 *
dmac‚ÅÑf
);

2119 
HAL_ETH_S√®√£Ty‚â•Def
 
HAL_ETH_G√´S√®√£
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

2138 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_exti.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_EXTI_H


22 
	#STM32F1xx_HAL_EXTI_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

51 
HAL_EXTI_COMMON_CB_ID
 = 0x00U

52 } 
	tEXTI_C√ÜlbackIDTy‚â•Def
;

59 
u√∂t32_t
 
L√∂e
;

60 (* 
P√≠d√∂gC√Ülback
)();

61 } 
	tEXTI_H‚Ñ¢d√ÄTy‚â•Def
;

68 
u√∂t32_t
 
L√∂e
;

70 
u√∂t32_t
 
Mode
;

72 
u√∂t32_t
 
Trigg√Æ
;

74 
u√∂t32_t
 
GPIOS√±
;

77 } 
	tEXTI_C‚ÅÑfigTy‚â•Def
;

91 
	#EXTI_LINE_0
 (
EXTI_GPIO
 | 0x00u√ã

	)

92 
	#EXTI_LINE_1
 (
EXTI_GPIO
 | 0x01u√ã

	)

93 
	#EXTI_LINE_2
 (
EXTI_GPIO
 | 0x02u√ã

	)

94 
	#EXTI_LINE_3
 (
EXTI_GPIO
 | 0x03u√ã

	)

95 
	#EXTI_LINE_4
 (
EXTI_GPIO
 | 0x04u√ã

	)

96 
	#EXTI_LINE_5
 (
EXTI_GPIO
 | 0x05u√ã

	)

97 
	#EXTI_LINE_6
 (
EXTI_GPIO
 | 0x06u√ã

	)

98 
	#EXTI_LINE_7
 (
EXTI_GPIO
 | 0x07u√ã

	)

99 
	#EXTI_LINE_8
 (
EXTI_GPIO
 | 0x08u√ã

	)

100 
	#EXTI_LINE_9
 (
EXTI_GPIO
 | 0x09u√ã

	)

101 
	#EXTI_LINE_10
 (
EXTI_GPIO
 | 0x0Au√ã

	)

102 
	#EXTI_LINE_11
 (
EXTI_GPIO
 | 0x0Bu√ã

	)

103 
	#EXTI_LINE_12
 (
EXTI_GPIO
 | 0x0Cu√ã

	)

104 
	#EXTI_LINE_13
 (
EXTI_GPIO
 | 0x0Du√ã

	)

105 
	#EXTI_LINE_14
 (
EXTI_GPIO
 | 0x0Eu√ã

	)

106 
	#EXTI_LINE_15
 (
EXTI_GPIO
 | 0x0Fu√ã

	)

107 
	#EXTI_LINE_16
 (
EXTI_CONFIG
 | 0x10u√ã

	)

108 
	#EXTI_LINE_17
 (
EXTI_CONFIG
 | 0x11u√ã

	)

109 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM18
)

110 
	#EXTI_LINE_18
 (
EXTI_CONFIG
 | 0x12u√ã

	)

112 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM19
)

113 
	#EXTI_LINE_19
 (
EXTI_CONFIG
 | 0x13u√ã

	)

123 
	#EXTI_MODE_NONE
 0x00000000u

	)

124 
	#EXTI_MODE_INTERRUPT
 0x00000001u

	)

125 
	#EXTI_MODE_EVENT
 0x00000002u

	)

133 
	#EXTI_TRIGGER_NONE
 0x00000000u

	)

134 
	#EXTI_TRIGGER_RISING
 0x00000001u

	)

135 
	#EXTI_TRIGGER_FALLING
 0x00000002u

	)

136 
	#EXTI_TRIGGER_RISING_FALLING
 (
EXTI_TRIGGER_RISING
 | 
EXTI_TRIGGER_FALLING
)

	)

145 
	#EXTI_GPIOA
 0x00000000u

	)

146 
	#EXTI_GPIOB
 0x00000001u

	)

147 
	#EXTI_GPIOC
 0x00000002u

	)

148 
	#EXTI_GPIOD
 0x00000003u

	)

149 #i‚Ä°
def√∂ed
 (
GPIOE
)

150 
	#EXTI_GPIOE
 0x00000004u

	)

152 #i‚Ä°
def√∂ed
 (
GPIOF
)

153 
	#EXTI_GPIOF
 0x00000005u

	)

155 #i‚Ä°
def√∂ed
 (
GPIOG
)

156 
	#EXTI_GPIOG
 0x00000006u

	)

182 
	#EXTI_PROPERTY_SHIFT
 24u

	)

183 
	#EXTI_CONFIG
 (0x02uL << 
EXTI_PROPERTY_SHIFT
)

	)

184 
	#EXTI_GPIO
 ((0x04uL << 
EXTI_PROPERTY_SHIFT
√ã| 
EXTI_CONFIG
)

	)

185 
	#EXTI_PROPERTY_MASK
 (
EXTI_CONFIG
 | 
EXTI_GPIO
)

	)

190 
	#EXTI_PIN_MASK
 0x0000001Fu

	)

195 
	#EXTI_MODE_MASK
 (
EXTI_MODE_EVENT
 | 
EXTI_MODE_INTERRUPT
)

	)

200 
	#EXTI_TRIGGER_MASK
 (
EXTI_TRIGGER_RISING
 | 
EXTI_TRIGGER_FALLING
)

	)

205 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM19
)

206 
	#EXTI_LINE_NB
 20UL

	)

207 #√±i‚Ä°
def√∂ed
(
EXTI_IMR_IM18
)

208 
	#EXTI_LINE_NB
 19UL

	)

210 
	#EXTI_LINE_NB
 18UL

	)

220 
	#IS_EXTI_LINE
(
__LINE__
√ã((((__LINE__√ã& ~(
EXTI_PROPERTY_MASK
 | 
EXTI_PIN_MASK
)) == 0x00u) && \

221 ((((
__LINE__
√ã& 
EXTI_PROPERTY_MASK
√ã=Ô£ø
EXTI_CONFIG
) || \

222 (((
__LINE__
√ã& 
EXTI_PROPERTY_MASK
√ã=Ô£ø
EXTI_GPIO
)) && \

223 (((
__LINE__
√ã& 
EXTI_PIN_MASK
√ã< 
EXTI_LINE_NB
))

	)

225 
	#IS_EXTI_MODE
(
__LINE__
√ã((((__LINE__√ã& 
EXTI_MODE_MASK
) != 0x00u) && \

226 (((
__LINE__
√ã& ~
EXTI_MODE_MASK
√ã=Ô£ø0x00u))

	)

228 
	#IS_EXTI_TRIGGER
(
__LINE__
√ã(((__LINE__√ã& ~
EXTI_TRIGGER_MASK
√ã=Ô£ø0x00u)

	)

230 
	#IS_EXTI_PENDING_EDGE
(
__LINE__
√ã((__LINE__√ã=Ô£ø
EXTI_TRIGGER_RISING_FALLING
)

	)

232 
	#IS_EXTI_CONFIG_LINE
(
__LINE__
√ã(((__LINE__√ã& 
EXTI_CONFIG
√ã!Ô£ø0x00u)

	)

234 #i‚Ä°
def√∂ed
 (
GPIOG
)

235 
	#IS_EXTI_GPIO_PORT
(
__PORT__
√ã(((__PORT__√ã=Ô£ø
EXTI_GPIOA
) || \

236 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOB
) || \

237 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOC
) || \

238 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOD
) || \

239 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOE
) || \

240 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOF
) || \

241 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOG
))

	)

242 #√±i‚Ä°
def√∂ed
 (
GPIOF
)

243 
	#IS_EXTI_GPIO_PORT
(
__PORT__
√ã(((__PORT__√ã=Ô£ø
EXTI_GPIOA
) || \

244 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOB
) || \

245 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOC
) || \

246 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOD
) || \

247 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOE
) || \

248 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOF
))

	)

249 #√±i‚Ä°
def√∂ed
 (
GPIOE
)

250 
	#IS_EXTI_GPIO_PORT
(
__PORT__
√ã(((__PORT__√ã=Ô£ø
EXTI_GPIOA
) || \

251 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOB
) || \

252 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOC
) || \

253 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOD
) || \

254 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOE
))

	)

256 
	#IS_EXTI_GPIO_PORT
(
__PORT__
√ã(((__PORT__√ã=Ô£ø
EXTI_GPIOA
) || \

257 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOB
) || \

258 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOC
) || \

259 ((
__PORT__
√ã=Ô£ø
EXTI_GPIOD
))

	)

262 
	#IS_EXTI_GPIO_PIN
(
__PIN__
√ã((__PIN__√ã< 16u)

	)

279 
HAL_S√®tusTy‚â•Def
 
HAL_EXTI_S√´C‚ÅÑfigL√∂e
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
EXTI_C‚ÅÑfigTy‚â•Def
 *
pExtiC‚ÅÑfig
);

280 
HAL_S√®tusTy‚â•Def
 
HAL_EXTI_G√´C‚ÅÑfigL√∂e
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
EXTI_C‚ÅÑfigTy‚â•Def
 *
pExtiC‚ÅÑfig
);

281 
HAL_S√®tusTy‚â•Def
 
HAL_EXTI_C√Ä¬®C‚ÅÑfigL√∂e
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
);

282 
HAL_S√®tusTy‚â•Def
 
HAL_EXTI_Regi¬∞√ÆC√Ülback
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
EXTI_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, (*
pP√≠d√∂gCb‚Äö
)());

283 
HAL_S√®tusTy‚â•Def
 
HAL_EXTI_G√´H‚Ñ¢d√Ä
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
u√∂t32_t
 
ExtiL√∂e
);

293 
HAL_EXTI_IRQH‚Ñ¢d√Är
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
);

294 
u√∂t32_t
 
HAL_EXTI_G√´P√≠d√∂g
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, u√∂t32_√†
Edge
);

295 
HAL_EXTI_C√Ä¬®P√≠d√∂g
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
u√∂t32_t
 
Edge
);

296 
HAL_EXTI_G√≠√Æ¬©eSWI
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
);

314 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_FLASH_H


22 
	#__STM32F1xx_HAL_FLASH_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

42 
	#FLASH_TIMEOUT_VALUE
 50000U

	)

51 
	#IS_FLASH_TYPEPROGRAM
(
VALUE
√ã(((VALUE√ã=Ô£ø
FLASH_TYPEPROGRAM_HALFWORD
) || \

52 ((
VALUE
√ã=Ô£ø
FLASH_TYPEPROGRAM_WORD
) || \

53 ((
VALUE
√ã=Ô£ø
FLASH_TYPEPROGRAM_DOUBLEWORD
))

	)

55 #i‚Ä° 
def√∂ed
(
FLASH_ACR_LATENCY
)

56 
	#IS_FLASH_LATENCY
(
__LATENCY__
√ã(((__LATENCY__√ã=Ô£ø
FLASH_LATENCY_0
) || \

57 ((
__LATENCY__
√ã=Ô£ø
FLASH_LATENCY_1
) || \

58 ((
__LATENCY__
√ã=Ô£ø
FLASH_LATENCY_2
))

	)

61 
	#IS_FLASH_LATENCY
(
__LATENCY__
√ã((__LATENCY__√ã=Ô£ø
FLASH_LATENCY_0
)

	)

77 
FLASH_PROC_NONE
 = 0U,

78 
FLASH_PROC_PAGEERASE
 = 1U,

79 
FLASH_PROC_MASSERASE
 = 2U,

80 
FLASH_PROC_PROGRAMHALFWORD
 = 3U,

81 
FLASH_PROC_PROGRAMWORD
 = 4U,

82 
FLASH_PROC_PROGRAMDOUBLEWORD
 = 5U

83 } 
	tFLASH_ProÀödu¬™Ty‚â•Def
;

90 
__IO
 
FLASH_ProÀödu¬™Ty‚â•Def
 
ProÀödu¬™OnGo√∂g
;

92 
__IO
 
u√∂t32_t
 
D¬©aRema√∂√∂g
;

94 
__IO
 
u√∂t32_t
 
Add¬™ss
;

96 
__IO
 
u√∂t64_t
 
D¬©a
;

98 
HAL_LockTy‚â•Def
 
Lock
;

100 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

102 } 
	tFLASH_ProÀössTy‚â•Def
;

117 
	#HAL_FLASH_ERROR_NONE
 0x00U

	)

118 
	#HAL_FLASH_ERROR_PROG
 0x01U

	)

119 
	#HAL_FLASH_ERROR_WRP
 0x02U

	)

120 
	#HAL_FLASH_ERROR_OPTV
 0x04U

	)

129 
	#FLASH_TYPEPROGRAM_HALFWORD
 0x01U

	)

130 
	#FLASH_TYPEPROGRAM_WORD
 0x02U

	)

131 
	#FLASH_TYPEPROGRAM_DOUBLEWORD
 0x03U

	)

137 #i‚Ä° 
def√∂ed
(
FLASH_ACR_LATENCY
)

141 
	#FLASH_LATENCY_0
 0x00000000U

	)

142 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_0


	)

143 
	#FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_1


	)

153 
	#FLASH_LATENCY_0
 0x00000000U

	)

182 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_ENABLE
(√ã(
FLASH
->
ACR
 |Ô£ø
FLASH_ACR_HLFCYA
)

	)

190 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_DISABLE
(√ã(
FLASH
->
ACR
 &Ô£ø(~
FLASH_ACR_HLFCYA
))

	)

196 #i‚Ä°
def√∂ed
(
FLASH_ACR_LATENCY
)

208 
	#__HAL_FLASH_SET_LATENCY
(
__LATENCY__
√ã(
FLASH
->
ACR
 = (FLASH->ACR&(~
FLASH_ACR_LATENCY
)√ã| (__LATENCY__))

	)

216 
	#__HAL_FLASH_GET_LATENCY
(√ã(
	`READ_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_LATENCY
))

	)

231 
	#__HAL_FLASH_PREFETCH_BUFFER_ENABLE
(√ã(
FLASH
->
ACR
 |Ô£ø
FLASH_ACR_PRFTBE
)

	)

237 
	#__HAL_FLASH_PREFETCH_BUFFER_DISABLE
(√ã(
FLASH
->
ACR
 &Ô£ø(~
FLASH_ACR_PRFTBE
))

	)

248 
	~"¬∞m32f1xx_h√Ü_√äash_ex.h
"

259 
HAL_S√®tusTy‚â•Def
 
HAL_FLASH_Prog√∏m
(
u√∂t32_t
 
Ty‚â•Prog√∏m
, u√∂t32_√†
Add¬™ss
, 
u√∂t64_t
 
D¬©a
);

260 
HAL_S√®tusTy‚â•Def
 
HAL_FLASH_Prog√∏m_IT
(
u√∂t32_t
 
Ty‚â•Prog√∏m
, u√∂t32_√†
Add¬™ss
, 
u√∂t64_t
 
D¬©a
);

263 
HAL_FLASH_IRQH‚Ñ¢d√Är
();

265 
HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
u√∂t32_t
 
R√´u‚à´V√Üue
);

266 
HAL_FLASH_O‚â•√∏ti‚ÅÑE¬∫‚ÄπC√Ülback
(
u√∂t32_t
 
R√´u‚à´V√Üue
);

276 
HAL_S√®tusTy‚â•Def
 
HAL_FLASH_U‚àÜock
();

277 
HAL_S√®tusTy‚â•Def
 
HAL_FLASH_Lock
();

278 
HAL_S√®tusTy‚â•Def
 
HAL_FLASH_OB_U‚àÜock
();

279 
HAL_S√®tusTy‚â•Def
 
HAL_FLASH_OB_Lock
();

280 
HAL_FLASH_OB_Launch
();

290 
u√∂t32_t
 
HAL_FLASH_G√´E¬∫‚Äπ
();

304 
HAL_S√®tusTy‚â•Def
 
FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
(
u√∂t32_t
 
Timeout
);

305 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

306 
HAL_S√®tusTy‚â•Def
 
FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
(
u√∂t32_t
 
Timeout
);

321 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash_ex.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_FLASH_EX_H


22 
	#__STM32F1xx_HAL_FLASH_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

43 
	#FLASH_SIZE_DATA_REGISTER
 0x1FFFF7E0U

	)

44 
	#OBR_REG_INDEX
 1U

	)

45 
	#SR_FLAG_MASK
 ((
u√∂t32_t
)(
FLASH_SR_BSY
 | 
FLASH_SR_PGERR
 | 
FLASH_SR_WRPRTERR
 | 
FLASH_SR_EOP
))

	)

55 
	#IS_FLASH_TYPEERASE
(
VALUE
√ã(((VALUE√ã=Ô£ø
FLASH_TYPEERASE_PAGES
√ã|| ((VALUE√ã=Ô£ø
FLASH_TYPEERASE_MASSERASE
))

	)

57 
	#IS_OPTIONBYTE
(
VALUE
√ã(((VALUE√ã<Ô£ø(
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
 | 
OPTIONBYTE_DATA
)))

	)

59 
	#IS_WRPSTATE
(
VALUE
√ã(((VALUE√ã=Ô£ø
OB_WRPSTATE_DISABLE
√ã|| ((VALUE√ã=Ô£ø
OB_WRPSTATE_ENABLE
))

	)

61 
	#IS_OB_RDP_LEVEL
(
LEVEL
√ã(((LEVEL√ã=Ô£ø
OB_RDP_LEVEL_0
√ã|| ((LEVEL√ã=Ô£ø
OB_RDP_LEVEL_1
))

	)

63 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã=Ô£ø
OB_DATA_ADDRESS_DATA0
√ã|| ((ADDRESS√ã=Ô£ø
OB_DATA_ADDRESS_DATA1
))

	)

65 
	#IS_OB_IWDG_SOURCE
(
SOURCE
√ã(((SOURCE√ã=Ô£ø
OB_IWDG_SW
√ã|| ((SOURCE√ã=Ô£ø
OB_IWDG_HW
))

	)

67 
	#IS_OB_STOP_SOURCE
(
SOURCE
√ã(((SOURCE√ã=Ô£ø
OB_STOP_NO_RST
√ã|| ((SOURCE√ã=Ô£ø
OB_STOP_RST
))

	)

69 
	#IS_OB_STDBY_SOURCE
(
SOURCE
√ã(((SOURCE√ã=Ô£ø
OB_STDBY_NO_RST
√ã|| ((SOURCE√ã=Ô£ø
OB_STDBY_RST
))

	)

71 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

72 
	#IS_OB_BOOT1
(
BOOT1
√ã(((BOOT1√ã=Ô£ø
OB_BOOT1_RESET
√ã|| ((BOOT1√ã=Ô£ø
OB_BOOT1_SET
))

	)

76 #i‚Ä°(
def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F102x6
√ã|| def√∂ed(
STM32F103x6
))

77 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
√ã(((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x20U√ã? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)- 1 <= 0x08007FFFU) : \

78 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)- 1 <Ô£ø0x08003FFFU))

	)

82 #i‚Ä°(
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103xB
))

83 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
√ã(((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x80U√ã? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFFU) : \

84 (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x40U√ã? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0800FFFFU) : \

85 (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x20U√ã? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x08007FFFU) : \

86 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <Ô£ø0x08003FFFU))))

	)

90 #i‚Ä°(
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
))

91 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
√ã(((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x200U√ã? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0807FFFFU) : \

92 (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x180U√ã? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0805FFFFU) : \

93 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <Ô£ø0x0803FFFFU)))

	)

97 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

98 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
√ã(((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x400U√ã? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x080FFFFFU) : \

99 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <Ô£ø0x080BFFFFU))

	)

103 #i‚Ä°(
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
))

104 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
√ã(((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x100U√ã? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0803FFFFU) : \

105 (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)√ã=Ô£ø0x80U√ã? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFFU) : \

106 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <Ô£ø0x0800FFFFU)))

	)

109 
	#IS_OB_WRP
(
PAGE
√ã(((PAGE√ã!Ô£ø0x0000000U))

	)

111 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

112 
	#IS_FLASH_BANK
(
BANK
√ã(((BANK√ã=Ô£ø
FLASH_BANK_1
) || \

113 ((
BANK
√ã=Ô£ø
FLASH_BANK_2
) || \

114 ((
BANK
√ã=Ô£ø
FLASH_BANK_BOTH
))

	)

116 
	#IS_FLASH_BANK
(
BANK
√ã(((BANK√ã=Ô£ø
FLASH_BANK_1
))

	)

120 #i‚Ä°(
def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F102x6
√ã|| def√∂ed(
STM32F103x6
))

121 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã>Ô£ø
FLASH_BASE
√ã&& (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20U) ? \

122 ((
ADDRESS
√ã<Ô£ø
FLASH_BANK1_END
√ã: ((ADDRESS√ã<Ô£ø0x08003FFFU)))

	)

127 #i‚Ä°(
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103xB
))

128 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã>Ô£ø
FLASH_BASE
√ã&& (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80U) ? \

129 ((
ADDRESS
√ã<Ô£ø
FLASH_BANK1_END
√ã: (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x40U) ? \

130 ((
ADDRESS
√ã<Ô£ø0x0800FFFF√ã: (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20U) ? \

131 ((
ADDRESS
√ã<Ô£ø0x08007FFF√ã: ((ADDRESS√ã<Ô£ø0x08003FFFU)))))

	)

136 #i‚Ä°(
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
))

137 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã>Ô£ø
FLASH_BASE
√ã&& (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x200U) ? \

138 ((
ADDRESS
√ã<Ô£ø
FLASH_BANK1_END
√ã: (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x180U) ? \

139 ((
ADDRESS
√ã<Ô£ø0x0805FFFFU√ã: ((ADDRESS√ã<Ô£ø0x0803FFFFU))))

	)

144 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

145 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã>Ô£ø
FLASH_BASE
√ã&& (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x400U) ? \

146 ((
ADDRESS
√ã<Ô£ø
FLASH_BANK2_END
√ã: ((ADDRESS√ã<Ô£ø0x080BFFFFU)))

	)

151 #i‚Ä°(
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
))

152 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã>Ô£ø
FLASH_BASE
√ã&& (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x100U) ? \

153 ((
ADDRESS
√ã<Ô£ø
FLASH_BANK1_END
√ã: (((*((
u√∂t16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80U) ? \

154 ((
ADDRESS
√ã<Ô£ø0x0801FFFFU√ã: ((ADDRESS√ã<Ô£ø0x0800FFFFU))))

	)

172 
u√∂t32_t
 
Ty‚â•E√∏¬£
;

175 
u√∂t32_t
 
B‚Ñ¢ks
;

178 
u√∂t32_t
 
PageAdd¬™ss
;

182 
u√∂t32_t
 
NbPages
;

185 } 
	tFLASH_E√∏¬£In√¥Ty‚â•Def
;

192 
u√∂t32_t
 
O¬±i‚ÅÑTy‚â•
;

195 
u√∂t32_t
 
WRPS√®√£
;

198 
u√∂t32_t
 
WRPPage
;

201 
u√∂t32_t
 
B‚Ñ¢ks
;

204 
u√∂t8_t
 
RDPLev√±
;

207 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

208 
u√∂t8_t
 
USERC‚ÅÑfig
;

213 
u√∂t8_t
 
USERC‚ÅÑfig
;

219 
u√∂t32_t
 
DATAAdd¬™ss
;

222 
u√∂t8_t
 
DATAD¬©a
;

224 } 
	tFLASH_OBProg√∏mIn√¥Ty‚â•Def
;

242 #i‚Ä°(
def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F102x6
√ã|| def√∂ed(
STM32F103x6
√ã|| def√∂ed(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103xB
))

243 
	#FLASH_PAGE_SIZE
 0x400U

	)

247 #i‚Ä°(
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
))

248 
	#FLASH_PAGE_SIZE
 0x800U

	)

260 
	#FLASH_TYPEERASE_PAGES
 0x00U

	)

261 
	#FLASH_TYPEERASE_MASSERASE
 0x02U

	)

270 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

271 
	#FLASH_BANK_1
 1U

	)

272 
	#FLASH_BANK_2
 2U

	)

273 
	#FLASH_BANK_BOTH
 ((
u√∂t32_t
)
FLASH_BANK_1
 | 
FLASH_BANK_2
√ã

	)

276 
	#FLASH_BANK_1
 1U

	)

293 
	#OPTIONBYTE_WRP
 0x01U

	)

294 
	#OPTIONBYTE_RDP
 0x02U

	)

295 
	#OPTIONBYTE_USER
 0x04U

	)

296 
	#OPTIONBYTE_DATA
 0x08U

	)

305 
	#OB_WRPSTATE_DISABLE
 0x00U

	)

306 
	#OB_WRPSTATE_ENABLE
 0x01U

	)

316 #i‚Ä° 
def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F102x6
√ã|| def√∂ed(
STM32F103x6
) \

317 || 
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F102xB
) \

318 || 
def√∂ed
(
STM32F103xB
)

319 
	#OB_WRP_PAGES0TO3
 0x00000001U

	)

320 
	#OB_WRP_PAGES4TO7
 0x00000002U

	)

321 
	#OB_WRP_PAGES8TO11
 0x00000004U

	)

322 
	#OB_WRP_PAGES12TO15
 0x00000008U

	)

323 
	#OB_WRP_PAGES16TO19
 0x00000010U

	)

324 
	#OB_WRP_PAGES20TO23
 0x00000020U

	)

325 
	#OB_WRP_PAGES24TO27
 0x00000040U

	)

326 
	#OB_WRP_PAGES28TO31
 0x00000080U

	)

331 #i‚Ä° 
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103xB
)

332 
	#OB_WRP_PAGES32TO35
 0x00000100U

	)

333 
	#OB_WRP_PAGES36TO39
 0x00000200U

	)

334 
	#OB_WRP_PAGES40TO43
 0x00000400U

	)

335 
	#OB_WRP_PAGES44TO47
 0x00000800U

	)

336 
	#OB_WRP_PAGES48TO51
 0x00001000U

	)

337 
	#OB_WRP_PAGES52TO55
 0x00002000U

	)

338 
	#OB_WRP_PAGES56TO59
 0x00004000U

	)

339 
	#OB_WRP_PAGES60TO63
 0x00008000U

	)

340 
	#OB_WRP_PAGES64TO67
 0x00010000U

	)

341 
	#OB_WRP_PAGES68TO71
 0x00020000U

	)

342 
	#OB_WRP_PAGES72TO75
 0x00040000U

	)

343 
	#OB_WRP_PAGES76TO79
 0x00080000U

	)

344 
	#OB_WRP_PAGES80TO83
 0x00100000U

	)

345 
	#OB_WRP_PAGES84TO87
 0x00200000U

	)

346 
	#OB_WRP_PAGES88TO91
 0x00400000U

	)

347 
	#OB_WRP_PAGES92TO95
 0x00800000U

	)

348 
	#OB_WRP_PAGES96TO99
 0x01000000U

	)

349 
	#OB_WRP_PAGES100TO103
 0x02000000U

	)

350 
	#OB_WRP_PAGES104TO107
 0x04000000U

	)

351 
	#OB_WRP_PAGES108TO111
 0x08000000U

	)

352 
	#OB_WRP_PAGES112TO115
 0x10000000U

	)

353 
	#OB_WRP_PAGES116TO119
 0x20000000U

	)

354 
	#OB_WRP_PAGES120TO123
 0x40000000U

	)

355 
	#OB_WRP_PAGES124TO127
 0x80000000U

	)

360 #i‚Ä° 
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
) \

361 || 
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
) \

362 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

363 
	#OB_WRP_PAGES0TO1
 0x00000001U

	)

364 
	#OB_WRP_PAGES2TO3
 0x00000002U

	)

365 
	#OB_WRP_PAGES4TO5
 0x00000004U

	)

366 
	#OB_WRP_PAGES6TO7
 0x00000008U

	)

367 
	#OB_WRP_PAGES8TO9
 0x00000010U

	)

368 
	#OB_WRP_PAGES10TO11
 0x00000020U

	)

369 
	#OB_WRP_PAGES12TO13
 0x00000040U

	)

370 
	#OB_WRP_PAGES14TO15
 0x00000080U

	)

371 
	#OB_WRP_PAGES16TO17
 0x00000100U

	)

372 
	#OB_WRP_PAGES18TO19
 0x00000200U

	)

373 
	#OB_WRP_PAGES20TO21
 0x00000400U

	)

374 
	#OB_WRP_PAGES22TO23
 0x00000800U

	)

375 
	#OB_WRP_PAGES24TO25
 0x00001000U

	)

376 
	#OB_WRP_PAGES26TO27
 0x00002000U

	)

377 
	#OB_WRP_PAGES28TO29
 0x00004000U

	)

378 
	#OB_WRP_PAGES30TO31
 0x00008000U

	)

379 
	#OB_WRP_PAGES32TO33
 0x00010000U

	)

380 
	#OB_WRP_PAGES34TO35
 0x00020000U

	)

381 
	#OB_WRP_PAGES36TO37
 0x00040000U

	)

382 
	#OB_WRP_PAGES38TO39
 0x00080000U

	)

383 
	#OB_WRP_PAGES40TO41
 0x00100000U

	)

384 
	#OB_WRP_PAGES42TO43
 0x00200000U

	)

385 
	#OB_WRP_PAGES44TO45
 0x00400000U

	)

386 
	#OB_WRP_PAGES46TO47
 0x00800000U

	)

387 
	#OB_WRP_PAGES48TO49
 0x01000000U

	)

388 
	#OB_WRP_PAGES50TO51
 0x02000000U

	)

389 
	#OB_WRP_PAGES52TO53
 0x04000000U

	)

390 
	#OB_WRP_PAGES54TO55
 0x08000000U

	)

391 
	#OB_WRP_PAGES56TO57
 0x10000000U

	)

392 
	#OB_WRP_PAGES58TO59
 0x20000000U

	)

393 
	#OB_WRP_PAGES60TO61
 0x40000000U

	)

394 
	#OB_WRP_PAGES62TO127
 0x80000000U

	)

395 
	#OB_WRP_PAGES62TO255
 0x80000000U

	)

396 
	#OB_WRP_PAGES62TO511
 0x80000000U

	)

401 
	#OB_WRP_ALLPAGES
 0xFFFFFFFFU

	)

404 #i‚Ä° 
def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F102x6
√ã|| def√∂ed(
STM32F103x6
)

405 
	#OB_WRP_PAGES0TO31MASK
 0x000000FFU

	)

409 #i‚Ä° 
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103xB
)

410 
	#OB_WRP_PAGES0TO31MASK
 0x000000FFU

	)

411 
	#OB_WRP_PAGES32TO63MASK
 0x0000FF00U

	)

412 
	#OB_WRP_PAGES64TO95MASK
 0x00FF0000U

	)

413 
	#OB_WRP_PAGES96TO127MASK
 0xFF000000U

	)

417 #i‚Ä° 
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
)

418 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

419 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

420 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

421 
	#OB_WRP_PAGES48TO255MASK
 0xFF000000U

	)

425 #i‚Ä° 
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

426 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

427 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

428 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

429 
	#OB_WRP_PAGES48TO511MASK
 0xFF000000U

	)

433 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

434 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

435 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

436 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

437 
	#OB_WRP_PAGES48TO127MASK
 0xFF000000U

	)

447 
	#OB_RDP_LEVEL_0
 ((
u√∂t8_t
)0xA5)

	)

448 
	#OB_RDP_LEVEL_1
 ((
u√∂t8_t
)0x00)

	)

456 
	#OB_IWDG_SW
 ((
u√∂t16_t
)0x0001√ã

	)

457 
	#OB_IWDG_HW
 ((
u√∂t16_t
)0x0000√ã

	)

465 
	#OB_STOP_NO_RST
 ((
u√∂t16_t
)0x0002√ã

	)

466 
	#OB_STOP_RST
 ((
u√∂t16_t
)0x0000√ã

	)

474 
	#OB_STDBY_NO_RST
 ((
u√∂t16_t
)0x0004√ã

	)

475 
	#OB_STDBY_RST
 ((
u√∂t16_t
)0x0000√ã

	)

480 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

484 
	#OB_BOOT1_RESET
 ((
u√∂t16_t
)0x0000√ã

	)

485 
	#OB_BOOT1_SET
 ((
u√∂t16_t
)0x0008√ã

	)

494 
	#OB_DATA_ADDRESS_DATA0
 0x1FFFF804U

	)

495 
	#OB_DATA_ADDRESS_DATA1
 0x1FFFF806U

	)

512 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

513 
	#FLASH_FLAG_BSY
 
FLASH_FLAG_BSY_BANK1


	)

514 
	#FLASH_FLAG_PGERR
 
FLASH_FLAG_PGERR_BANK1


	)

515 
	#FLASH_FLAG_WRPERR
 
FLASH_FLAG_WRPERR_BANK1


	)

516 
	#FLASH_FLAG_EOP
 
FLASH_FLAG_EOP_BANK1


	)

518 
	#FLASH_FLAG_BSY_BANK1
 
FLASH_SR_BSY


	)

519 
	#FLASH_FLAG_PGERR_BANK1
 
FLASH_SR_PGERR


	)

520 
	#FLASH_FLAG_WRPERR_BANK1
 
FLASH_SR_WRPRTERR


	)

521 
	#FLASH_FLAG_EOP_BANK1
 
FLASH_SR_EOP


	)

523 
	#FLASH_FLAG_BSY_BANK2
 (
FLASH_SR2_BSY
 << 16U√ã

	)

524 
	#FLASH_FLAG_PGERR_BANK2
 (
FLASH_SR2_PGERR
 << 16U√ã

	)

525 
	#FLASH_FLAG_WRPERR_BANK2
 (
FLASH_SR2_WRPRTERR
 << 16U√ã

	)

526 
	#FLASH_FLAG_EOP_BANK2
 (
FLASH_SR2_EOP
 << 16U√ã

	)

530 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

531 
	#FLASH_FLAG_PGERR
 
FLASH_SR_PGERR


	)

532 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPRTERR


	)

533 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

536 
	#FLASH_FLAG_OPTVERR
 ((
OBR_REG_INDEX
 << 8U | 
FLASH_OBR_OPTERR
)√ã

	)

545 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

546 
	#FLASH_IT_EOP
 
FLASH_IT_EOP_BANK1


	)

547 
	#FLASH_IT_ERR
 
FLASH_IT_ERR_BANK1


	)

549 
	#FLASH_IT_EOP_BANK1
 
FLASH_CR_EOPIE


	)

550 
	#FLASH_IT_ERR_BANK1
 
FLASH_CR_ERRIE


	)

552 
	#FLASH_IT_EOP_BANK2
 (
FLASH_CR2_EOPIE
 << 16U√ã

	)

553 
	#FLASH_IT_ERR_BANK2
 (
FLASH_CR2_ERRIE
 << 16U√ã

	)

557 
	#FLASH_IT_EOP
 
FLASH_CR_EOPIE


	)

558 
	#FLASH_IT_ERR
 
FLASH_CR_ERRIE


	)

584 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

595 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
) do { \

597 
	`SET_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFFU)); \

599 
	`SET_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16U)); \

600 } 0U)

	)

612 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
) do { \

614 
	`CLEAR_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFFU)); \

616 
	`CLEAR_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16U)); \

617 } 0U)

	)

634 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
FLASH_FLAG_OPTVERR
) ? \

635 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

636 ((((
__FLAG__
√ã& 
SR_FLAG_MASK
√ã!Ô£ø
RESET
)? \

637 (
FLASH
->
SR
 & ((
__FLAG__
√ã& 
SR_FLAG_MASK
)) : \

638 (
FLASH
->
SR2
 & ((
__FLAG__
√ã>> 16U))))

	)

655 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

657 i‚Ä°((
__FLAG__
√ã=Ô£ø
FLASH_FLAG_OPTVERR
) \

659 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

663 i‚Ä°(((
__FLAG__
√ã& 
SR_FLAG_MASK
√ã!Ô£ø
RESET
) \

665 
FLASH
->
SR
 = ((
__FLAG__
√ã& 
SR_FLAG_MASK
); \

668 i‚Ä°(((
__FLAG__
√ã>> 16U√ã!Ô£ø
RESET
) \

670 
FLASH
->
SR2
 = ((
__FLAG__
) >> 16U); \

673 } 0U)

	)

683 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
√ã(
FLASH
->
CR
 |Ô£ø(__INTERRUPT__))

	)

693 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
√ã(
FLASH
->
CR
 &Ô£ø~(__INTERRUPT__))

	)

706 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
√ã(((__FLAG__√ã=Ô£ø
FLASH_FLAG_OPTVERR
) ? \

707 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

708 (
FLASH
->
SR
 & (
__FLAG__
)))

	)

719 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

721 i‚Ä°((
__FLAG__
√ã=Ô£ø
FLASH_FLAG_OPTVERR
) \

723 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

727 
FLASH
->
SR
 = (
__FLAG__
); \

729 } 0U)

	)

750 
HAL_S√®tusTy‚â•Def
 
HAL_FLASHEx_E√∏¬£
(
FLASH_E√∏¬£In√¥Ty‚â•Def
 *
pE√∏¬£In√¥
, 
u√∂t32_t
 *
PageE¬∫‚Äπ
);

751 
HAL_S√®tusTy‚â•Def
 
HAL_FLASHEx_E√∏¬£_IT
(
FLASH_E√∏¬£In√¥Ty‚â•Def
 *
pE√∏¬£In√¥
);

761 
HAL_S√®tusTy‚â•Def
 
HAL_FLASHEx_OBE√∏¬£
();

762 
HAL_S√®tusTy‚â•Def
 
HAL_FLASHEx_OBProg√∏m
(
FLASH_OBProg√∏mIn√¥Ty‚â•Def
 *
pOBIn√¥
);

763 
HAL_FLASHEx_OBG√´C‚ÅÑfig
(
FLASH_OBProg√∏mIn√¥Ty‚â•Def
 *
pOBIn√¥
);

764 
u√∂t32_t
 
HAL_FLASHEx_OBG√´U¬£rD¬©a
(u√∂t32_√†
DATAAd¬™ss
);

780 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_GPIO_H


22 
	#STM32F1xx_HAL_GPIO_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
P√∂
;

52 
u√∂t32_t
 
Mode
;

55 
u√∂t32_t
 
Pu≈í
;

58 
u√∂t32_t
 
S‚â•ed
;

60 } 
	tGPIO_In√¥Ty‚â•Def
;

67 
GPIO_PIN_RESET
 = 0u,

68 
GPIO_PIN_SET


69 } 
	tGPIO_P√∂S√®√£
;

83 
	#GPIO_PIN_0
 ((
u√∂t16_t
)0x0001√ã

	)

84 
	#GPIO_PIN_1
 ((
u√∂t16_t
)0x0002√ã

	)

85 
	#GPIO_PIN_2
 ((
u√∂t16_t
)0x0004√ã

	)

86 
	#GPIO_PIN_3
 ((
u√∂t16_t
)0x0008√ã

	)

87 
	#GPIO_PIN_4
 ((
u√∂t16_t
)0x0010√ã

	)

88 
	#GPIO_PIN_5
 ((
u√∂t16_t
)0x0020√ã

	)

89 
	#GPIO_PIN_6
 ((
u√∂t16_t
)0x0040√ã

	)

90 
	#GPIO_PIN_7
 ((
u√∂t16_t
)0x0080√ã

	)

91 
	#GPIO_PIN_8
 ((
u√∂t16_t
)0x0100√ã

	)

92 
	#GPIO_PIN_9
 ((
u√∂t16_t
)0x0200√ã

	)

93 
	#GPIO_PIN_10
 ((
u√∂t16_t
)0x0400√ã

	)

94 
	#GPIO_PIN_11
 ((
u√∂t16_t
)0x0800√ã

	)

95 
	#GPIO_PIN_12
 ((
u√∂t16_t
)0x1000√ã

	)

96 
	#GPIO_PIN_13
 ((
u√∂t16_t
)0x2000√ã

	)

97 
	#GPIO_PIN_14
 ((
u√∂t16_t
)0x4000√ã

	)

98 
	#GPIO_PIN_15
 ((
u√∂t16_t
)0x8000√ã

	)

99 
	#GPIO_PIN_A≈í
 ((
u√∂t16_t
)0xFFFF√ã

	)

101 
	#GPIO_PIN_MASK
 0x0000FFFFu

	)

116 
	#GPIO_MODE_INPUT
 0x00000000u

	)

117 
	#GPIO_MODE_OUTPUT_PP
 0x00000001u

	)

118 
	#GPIO_MODE_OUTPUT_OD
 0x00000011u

	)

119 
	#GPIO_MODE_AF_PP
 0x00000002u

	)

120 
	#GPIO_MODE_AF_OD
 0x00000012u

	)

121 
	#GPIO_MODE_AF_INPUT
 
GPIO_MODE_INPUT


	)

123 
	#GPIO_MODE_ANALOG
 0x00000003u

	)

125 
	#GPIO_MODE_IT_RISING
 0x10110000u

	)

126 
	#GPIO_MODE_IT_FALLING
 0x10210000u

	)

127 
	#GPIO_MODE_IT_RISING_FALLING
 0x10310000u

	)

129 
	#GPIO_MODE_EVT_RISING
 0x10120000u

	)

130 
	#GPIO_MODE_EVT_FALLING
 0x10220000u

	)

131 
	#GPIO_MODE_EVT_RISING_FALLING
 0x10320000u

	)

141 
	#GPIO_SPEED_FREQ_LOW
 (
GPIO_CRL_MODE0_1
√ã

	)

142 
	#GPIO_SPEED_FREQ_MEDIUM
 (
GPIO_CRL_MODE0_0
√ã

	)

143 
	#GPIO_SPEED_FREQ_HIGH
 (
GPIO_CRL_MODE0
√ã

	)

153 
	#GPIO_NOPULL
 0x00000000u

	)

154 
	#GPIO_PULLUP
 0x00000001u

	)

155 
	#GPIO_PULLDOWN
 0x00000002u

	)

175 
	#__HAL_GPIO_EXTI_GET_FLAG
(
__EXTI_LINE__
√ã(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

183 
	#__HAL_GPIO_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
√ã(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

191 
	#__HAL_GPIO_EXTI_GET_IT
(
__EXTI_LINE__
√ã(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

199 
	#__HAL_GPIO_EXTI_CLEAR_IT
(
__EXTI_LINE__
√ã(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

207 
	#__HAL_GPIO_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
√ã(
EXTI
->
SWIER
 |Ô£ø(__EXTI_LINE__))

	)

213 
	~"¬∞m32f1xx_h√Ü_gpio_ex.h
"

224 
HAL_GPIO_In√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
GPIO_In√¥Ty‚â•Def
 *
GPIO_In√¥
);

225 
HAL_GPIO_DeIn√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
GPIO_P√∂
);

234 
GPIO_P√∂S√®√£
 
HAL_GPIO_R√≥dP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
);

235 
HAL_GPIO_Wr√¥eP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
, 
GPIO_P√∂S√®√£
 
P√∂S√®√£
);

236 
HAL_GPIO_Togg√ÄP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
);

237 
HAL_S√®tusTy‚â•Def
 
HAL_GPIO_LockP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
);

238 
HAL_GPIO_EXTI_IRQH‚Ñ¢d√Är
(
u√∂t16_t
 
GPIO_P√∂
);

239 
HAL_GPIO_EXTI_C√Ülback
(
u√∂t16_t
 
GPIO_P√∂
);

263 
	#IS_GPIO_PIN_ACTION
(
ACTION
√ã(((ACTION√ã=Ô£ø
GPIO_PIN_RESET
√ã|| ((ACTION√ã=Ô£ø
GPIO_PIN_SET
))

	)

264 
	#IS_GPIO_PIN
(
PIN
√ã(((((
u√∂t32_t
)PIN√ã& 
GPIO_PIN_MASK
 ) !Ô£ø0x00u√ã&& ((((u√∂t32_t)PIN√ã& ~GPIO_PIN_MASK√ã=Ô£ø0x00u))

	)

265 
	#IS_GPIO_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
GPIO_MODE_INPUT
) ||\

266 ((
MODE
√ã=Ô£ø
GPIO_MODE_OUTPUT_PP
) ||\

267 ((
MODE
√ã=Ô£ø
GPIO_MODE_OUTPUT_OD
) ||\

268 ((
MODE
√ã=Ô£ø
GPIO_MODE_AF_PP
) ||\

269 ((
MODE
√ã=Ô£ø
GPIO_MODE_AF_OD
) ||\

270 ((
MODE
√ã=Ô£ø
GPIO_MODE_IT_RISING
) ||\

271 ((
MODE
√ã=Ô£ø
GPIO_MODE_IT_FALLING
) ||\

272 ((
MODE
√ã=Ô£ø
GPIO_MODE_IT_RISING_FALLING
) ||\

273 ((
MODE
√ã=Ô£ø
GPIO_MODE_EVT_RISING
) ||\

274 ((
MODE
√ã=Ô£ø
GPIO_MODE_EVT_FALLING
) ||\

275 ((
MODE
√ã=Ô£ø
GPIO_MODE_EVT_RISING_FALLING
) ||\

276 ((
MODE
√ã=Ô£ø
GPIO_MODE_ANALOG
))

	)

277 
	#IS_GPIO_SPEED
(
SPEED
√ã(((SPEED√ã=Ô£ø
GPIO_SPEED_FREQ_LOW
) || \

278 ((
SPEED
√ã=Ô£ø
GPIO_SPEED_FREQ_MEDIUM
√ã|| ((SPEED√ã=Ô£ø
GPIO_SPEED_FREQ_HIGH
))

	)

279 
	#IS_GPIO_PULL
(
PULL
√ã(((PULL√ã=Ô£ø
GPIO_NOPULL
√ã|| ((PULL√ã=Ô£ø
GPIO_PULLUP
) || \

280 ((
PULL
√ã=Ô£ø
GPIO_PULLDOWN
))

	)

302 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio_ex.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_GPIO_EX_H


22 
	#STM32F1xx_HAL_GPIO_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

54 
	#AFIO_EVENTOUT_PIN_0
 
AFIO_EVCR_PIN_PX0


	)

55 
	#AFIO_EVENTOUT_PIN_1
 
AFIO_EVCR_PIN_PX1


	)

56 
	#AFIO_EVENTOUT_PIN_2
 
AFIO_EVCR_PIN_PX2


	)

57 
	#AFIO_EVENTOUT_PIN_3
 
AFIO_EVCR_PIN_PX3


	)

58 
	#AFIO_EVENTOUT_PIN_4
 
AFIO_EVCR_PIN_PX4


	)

59 
	#AFIO_EVENTOUT_PIN_5
 
AFIO_EVCR_PIN_PX5


	)

60 
	#AFIO_EVENTOUT_PIN_6
 
AFIO_EVCR_PIN_PX6


	)

61 
	#AFIO_EVENTOUT_PIN_7
 
AFIO_EVCR_PIN_PX7


	)

62 
	#AFIO_EVENTOUT_PIN_8
 
AFIO_EVCR_PIN_PX8


	)

63 
	#AFIO_EVENTOUT_PIN_9
 
AFIO_EVCR_PIN_PX9


	)

64 
	#AFIO_EVENTOUT_PIN_10
 
AFIO_EVCR_PIN_PX10


	)

65 
	#AFIO_EVENTOUT_PIN_11
 
AFIO_EVCR_PIN_PX11


	)

66 
	#AFIO_EVENTOUT_PIN_12
 
AFIO_EVCR_PIN_PX12


	)

67 
	#AFIO_EVENTOUT_PIN_13
 
AFIO_EVCR_PIN_PX13


	)

68 
	#AFIO_EVENTOUT_PIN_14
 
AFIO_EVCR_PIN_PX14


	)

69 
	#AFIO_EVENTOUT_PIN_15
 
AFIO_EVCR_PIN_PX15


	)

71 
	#IS_AFIO_EVENTOUT_PIN
(
__PIN__
√ã(((__PIN__√ã=Ô£ø
AFIO_EVENTOUT_PIN_0
) || \

72 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_1
) || \

73 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_2
) || \

74 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_3
) || \

75 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_4
) || \

76 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_5
) || \

77 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_6
) || \

78 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_7
) || \

79 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_8
) || \

80 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_9
) || \

81 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_10
) || \

82 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_11
) || \

83 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_12
) || \

84 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_13
) || \

85 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_14
) || \

86 ((
__PIN__
√ã=Ô£ø
AFIO_EVENTOUT_PIN_15
))

	)

95 
	#AFIO_EVENTOUT_PORT_A
 
AFIO_EVCR_PORT_PA


	)

96 
	#AFIO_EVENTOUT_PORT_B
 
AFIO_EVCR_PORT_PB


	)

97 
	#AFIO_EVENTOUT_PORT_C
 
AFIO_EVCR_PORT_PC


	)

98 
	#AFIO_EVENTOUT_PORT_D
 
AFIO_EVCR_PORT_PD


	)

99 
	#AFIO_EVENTOUT_PORT_E
 
AFIO_EVCR_PORT_PE


	)

101 
	#IS_AFIO_EVENTOUT_PORT
(
__PORT__
√ã(((__PORT__√ã=Ô£ø
AFIO_EVENTOUT_PORT_A
) || \

102 ((
__PORT__
√ã=Ô£ø
AFIO_EVENTOUT_PORT_B
) || \

103 ((
__PORT__
√ã=Ô£ø
AFIO_EVENTOUT_PORT_C
) || \

104 ((
__PORT__
√ã=Ô£ø
AFIO_EVENTOUT_PORT_D
) || \

105 ((
__PORT__
√ã=Ô£ø
AFIO_EVENTOUT_PORT_E
))

	)

124 
	#__HAL_AFIO_REMAP_SPI1_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_SPI1_REMAP
)

	)

131 
	#__HAL_AFIO_REMAP_SPI1_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_SPI1_REMAP
)

	)

138 
	#__HAL_AFIO_REMAP_I2C1_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_I2C1_REMAP
)

	)

145 
	#__HAL_AFIO_REMAP_I2C1_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_I2C1_REMAP
)

	)

152 
	#__HAL_AFIO_REMAP_USART1_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_USART1_REMAP
)

	)

159 
	#__HAL_AFIO_REMAP_USART1_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_USART1_REMAP
)

	)

166 
	#__HAL_AFIO_REMAP_USART2_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_USART2_REMAP
)

	)

173 
	#__HAL_AFIO_REMAP_USART2_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_USART2_REMAP
)

	)

180 
	#__HAL_AFIO_REMAP_USART3_ENABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_FULLREMAP
, AFIO_MAPR_USART3_REMAP_FULLREMAP)

	)

187 
	#__HAL_AFIO_REMAP_USART3_PARTIAL
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_PARTIALREMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

194 
	#__HAL_AFIO_REMAP_USART3_DISABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_NOREMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

201 
	#__HAL_AFIO_REMAP_TIM1_ENABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_FULLREMAP
, AFIO_MAPR_TIM1_REMAP_FULLREMAP)

	)

208 
	#__HAL_AFIO_REMAP_TIM1_PARTIAL
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

215 
	#__HAL_AFIO_REMAP_TIM1_DISABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_NOREMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

222 
	#__HAL_AFIO_REMAP_TIM2_ENABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_FULLREMAP
, AFIO_MAPR_TIM2_REMAP_FULLREMAP)

	)

229 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_2
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

236 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_1
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

243 
	#__HAL_AFIO_REMAP_TIM2_DISABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_NOREMAP
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

251 
	#__HAL_AFIO_REMAP_TIM3_ENABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_FULLREMAP
, AFIO_MAPR_TIM3_REMAP_FULLREMAP)

	)

259 
	#__HAL_AFIO_REMAP_TIM3_PARTIAL
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

267 
	#__HAL_AFIO_REMAP_TIM3_DISABLE
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_NOREMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

275 
	#__HAL_AFIO_REMAP_TIM4_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM4_REMAP
)

	)

283 
	#__HAL_AFIO_REMAP_TIM4_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM4_REMAP
)

	)

285 #i‚Ä°
def√∂ed
(
AFIO_MAPR_CAN_REMAP_REMAP1
)

292 
	#__HAL_AFIO_REMAP_CAN1_1
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP1
, 
AFIO_MAPR_CAN_REMAP
)

	)

299 
	#__HAL_AFIO_REMAP_CAN1_2
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP2
, 
AFIO_MAPR_CAN_REMAP
)

	)

306 
	#__HAL_AFIO_REMAP_CAN1_3
(√ã
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP3
, 
AFIO_MAPR_CAN_REMAP
)

	)

318 
	#__HAL_AFIO_REMAP_PD01_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_PD01_REMAP
)

	)

328 
	#__HAL_AFIO_REMAP_PD01_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_PD01_REMAP
)

	)

330 #i‚Ä°
def√∂ed
(
AFIO_MAPR_TIM5CH4_IREMAP
)

337 
	#__HAL_AFIO_REMAP_TIM5CH4_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

345 
	#__HAL_AFIO_REMAP_TIM5CH4_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

348 #i‚Ä°
def√∂ed
(
AFIO_MAPR_ETH_REMAP
)

355 
	#__HAL_AFIO_REMAP_ETH_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ETH_REMAP
)

	)

363 
	#__HAL_AFIO_REMAP_ETH_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ETH_REMAP
)

	)

366 #i‚Ä°
def√∂ed
(
AFIO_MAPR_CAN2_REMAP
)

374 
	#__HAL_AFIO_REMAP_CAN2_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_CAN2_REMAP
)

	)

382 
	#__HAL_AFIO_REMAP_CAN2_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_CAN2_REMAP
)

	)

385 #i‚Ä°
def√∂ed
(
AFIO_MAPR_MII_RMII_SEL
)

392 
	#__HAL_AFIO_ETH_RMII
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_MII_RMII_SEL
)

	)

400 
	#__HAL_AFIO_ETH_MII
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_MII_RMII_SEL
)

	)

408 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

415 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

422 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

429 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

431 #i‚Ä°
def√∂ed
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

438 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

445 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

448 #i‚Ä°
def√∂ed
 (
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

455 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

462 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

470 
	#__HAL_AFIO_REMAP_SWJ_ENABLE
(√ã
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_RESET
)

	)

477 
	#__HAL_AFIO_REMAP_SWJ_NONJTRST
(√ã
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_NOJNTRST
)

	)

485 
	#__HAL_AFIO_REMAP_SWJ_NOJTAG
(√ã
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_JTAGDISABLE
)

	)

492 
	#__HAL_AFIO_REMAP_SWJ_DISABLE
(√ã
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_DISABLE
)

	)

494 #i‚Ä°
def√∂ed
(
AFIO_MAPR_SPI3_REMAP
)

502 
	#__HAL_AFIO_REMAP_SPI3_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_SPI3_REMAP
)

	)

510 
	#__HAL_AFIO_REMAP_SPI3_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_SPI3_REMAP
)

	)

513 #i‚Ä°
def√∂ed
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

521 
	#__HAL_AFIO_TIM2ITR1_TO_USB
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

529 
	#__HAL_AFIO_TIM2ITR1_TO_ETH
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

532 #i‚Ä°
def√∂ed
(
AFIO_MAPR_PTP_PPS_REMAP
)

540 
	#__HAL_AFIO_ETH_PTP_PPS_ENABLE
(√ã
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_PTP_PPS_REMAP
)

	)

548 
	#__HAL_AFIO_ETH_PTP_PPS_DISABLE
(√ã
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_PTP_PPS_REMAP
)

	)

551 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM9_REMAP
)

558 
	#__HAL_AFIO_REMAP_TIM9_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

565 
	#__HAL_AFIO_REMAP_TIM9_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

568 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM10_REMAP
)

575 
	#__HAL_AFIO_REMAP_TIM10_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

582 
	#__HAL_AFIO_REMAP_TIM10_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

585 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM11_REMAP
)

591 
	#__HAL_AFIO_REMAP_TIM11_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

598 
	#__HAL_AFIO_REMAP_TIM11_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

601 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM13_REMAP
)

608 
	#__HAL_AFIO_REMAP_TIM13_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

615 
	#__HAL_AFIO_REMAP_TIM13_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

618 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM14_REMAP
)

625 
	#__HAL_AFIO_REMAP_TIM14_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

632 
	#__HAL_AFIO_REMAP_TIM14_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

635 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_FSMC_NADV_REMAP
)

642 
	#__HAL_AFIO_FSMCNADV_DISCONNECTED
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

649 
	#__HAL_AFIO_FSMCNADV_CONNECTED
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

652 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM15_REMAP
)

659 
	#__HAL_AFIO_REMAP_TIM15_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

666 
	#__HAL_AFIO_REMAP_TIM15_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

669 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM16_REMAP
)

676 
	#__HAL_AFIO_REMAP_TIM16_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

683 
	#__HAL_AFIO_REMAP_TIM16_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

686 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM17_REMAP
)

693 
	#__HAL_AFIO_REMAP_TIM17_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

700 
	#__HAL_AFIO_REMAP_TIM17_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

703 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_CEC_REMAP
)

710 
	#__HAL_AFIO_REMAP_CEC_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

717 
	#__HAL_AFIO_REMAP_CEC_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

720 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM1_DMA_REMAP
)

727 
	#__HAL_AFIO_REMAP_TIM1DMA_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

734 
	#__HAL_AFIO_REMAP_TIM1DMA_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

737 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

744 
	#__HAL_AFIO_REMAP_TIM67DACDMA_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

751 
	#__HAL_AFIO_REMAP_TIM67DACDMA_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

754 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM12_REMAP
)

762 
	#__HAL_AFIO_REMAP_TIM12_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

770 
	#__HAL_AFIO_REMAP_TIM12_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

773 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_MISC_REMAP
)

785 
	#__HAL_AFIO_REMAP_MISC_ENABLE
(√ã
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

797 
	#__HAL_AFIO_REMAP_MISC_DISABLE
(√ã
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

811 #i‚Ä°
def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)

812 
	#GPIO_GET_INDEX
(
__GPIOx__
√ã(((__GPIOx__√ã=Ô£ø(
GPIOA
))? 0uL :\

813 ((
__GPIOx__
√ã=Ô£ø(
GPIOB
))? 1uL :\

814 ((
__GPIOx__
√ã=Ô£ø(
GPIOC
))? 2uL :3uL)

	)

815 #√±i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

816 
	#GPIO_GET_INDEX
(
__GPIOx__
√ã(((__GPIOx__√ã=Ô£ø(
GPIOA
))? 0uL :\

817 ((
__GPIOx__
√ã=Ô£ø(
GPIOB
))? 1uL :\

818 ((
__GPIOx__
√ã=Ô£ø(
GPIOC
))? 2uL :\

819 ((
__GPIOx__
√ã=Ô£ø(
GPIOD
))? 3uL :4uL)

	)

820 #√±i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

821 
	#GPIO_GET_INDEX
(
__GPIOx__
√ã(((__GPIOx__√ã=Ô£ø(
GPIOA
))? 0uL :\

822 ((
__GPIOx__
√ã=Ô£ø(
GPIOB
))? 1uL :\

823 ((
__GPIOx__
√ã=Ô£ø(
GPIOC
))? 2uL :\

824 ((
__GPIOx__
√ã=Ô£ø(
GPIOD
))? 3uL :\

825 ((
__GPIOx__
√ã=Ô£ø(
GPIOE
))? 4uL :\

826 ((
__GPIOx__
√ã=Ô£ø(
GPIOF
))? 5uL :6uL)

	)

829 
	#AFIO_REMAP_ENABLE
(
REMAP_PIN
√ãdo{ 
u√∂t32_t
 
tm¬•eg
 = 
AFIO
->
MAPR
; \

830 
tm¬•eg
 |Ô£ø
AFIO_MAPR_SWJ_CFG
; \

831 
tm¬•eg
 |Ô£ø
REMAP_PIN
; \

832 
AFIO
->
MAPR
 = 
tm¬•eg
; \

833 }0u)

	)

835 
	#AFIO_REMAP_DISABLE
(
REMAP_PIN
√ãdo{ 
u√∂t32_t
 
tm¬•eg
 = 
AFIO
->
MAPR
; \

836 
tm¬•eg
 |Ô£ø
AFIO_MAPR_SWJ_CFG
; \

837 
tm¬•eg
 &Ô£ø~
REMAP_PIN
; \

838 
AFIO
->
MAPR
 = 
tm¬•eg
; \

839 }0u)

	)

841 
	#AFIO_REMAP_PARTIAL
(
REMAP_PIN
, 
REMAP_PIN_MASK
√ãdo{ 
u√∂t32_t
 
tm¬•eg
 = 
AFIO
->
MAPR
; \

842 
tm¬•eg
 &Ô£ø~
REMAP_PIN_MASK
; \

843 
tm¬•eg
 |Ô£ø
AFIO_MAPR_SWJ_CFG
; \

844 
tm¬•eg
 |Ô£ø
REMAP_PIN
; \

845 
AFIO
->
MAPR
 = 
tm¬•eg
; \

846 }0u)

	)

848 
	#AFIO_DBGAFR_CONFIG
(
DBGAFR_SWJCFG
√ãdo{ 
u√∂t32_t
 
tm¬•eg
 = 
AFIO
->
MAPR
; \

849 
tm¬•eg
 &Ô£ø~
AFIO_MAPR_SWJ_CFG_Msk
; \

850 
tm¬•eg
 |Ô£ø
DBGAFR_SWJCFG
; \

851 
AFIO
->
MAPR
 = 
tm¬•eg
; \

852 }0u)

	)

868 
HAL_GPIOEx_C‚ÅÑfigEv√≠tout
(
u√∂t32_t
 
GPIO_P‚ÄπtSourÀö
, u√∂t32_√†
GPIO_P√∂SourÀö
);

869 
HAL_GPIOEx_E¬´b√ÄEv√≠tout
();

870 
HAL_GPIOEx_Di√üb√ÄEv√≠tout
();

888 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_hcd.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_HCD_H


22 
	#STM32F1xx_HAL_HCD_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_≈í_usb.h
"

31 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

50 
HAL_HCD_STATE_RESET
 = 0x00,

51 
HAL_HCD_STATE_READY
 = 0x01,

52 
HAL_HCD_STATE_ERROR
 = 0x02,

53 
HAL_HCD_STATE_BUSY
 = 0x03,

54 
HAL_HCD_STATE_TIMEOUT
 = 0x04

55 } 
	tHCD_S√®√£Ty‚â•Def
;

57 
USB_OTG_Glob√ÜTy‚â•Def
 
	tHCD_Ty‚â•Def
;

58 
USB_OTG_CfgTy‚â•Def
 
	tHCD_In√¥Ty‚â•Def
;

59 
USB_OTG_HCTy‚â•Def
 
	tHCD_HCTy‚â•Def
;

60 
USB_OTG_URBS√®√£Ty‚â•Def
 
	tHCD_URBS√®√£Ty‚â•Def
;

61 
USB_OTG_HCS√®√£Ty‚â•Def
 
	tHCD_HCS√®√£Ty‚â•Def
;

69 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

70 
__HCD_H‚Ñ¢d√ÄTy‚â•Def


75 
HCD_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

76 
HCD_In√¥Ty‚â•Def
 
In√¥
;

77 
HCD_HCTy‚â•Def
 
hc
[16];

78 
HAL_LockTy‚â•Def
 
Lock
;

79 
__IO
 
HCD_S√®√£Ty‚â•Def
 
S√®√£
;

80 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

81 *
pD¬©a
;

82 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

83 (* 
SOFC√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

84 (* 
C‚ÅÑ‚àöÀòC√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

85 (* 
Disc‚ÅÑ‚àöÀòC√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

86 (* 
P‚ÄπtE¬´b√ÄdC√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

87 (* 
P‚ÄπtDi√üb√ÄdC√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

88 (* 
HC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
,

89 
HCD_URBS√®√£Ty‚â•Def
 
urb_¬∞¬©e
);

91 (* 
M‚Ä¢In√¥C√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

92 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

94 } 
	tHCD_H‚Ñ¢d√ÄTy‚â•Def
;

111 
	#HCD_SPEED_FULL
 
USBH_FSLS_SPEED


	)

112 
	#HCD_SPEED_LOW
 
USBH_FSLS_SPEED


	)

121 
	#HCD_PHY_ULPI
 1U

	)

122 
	#HCD_PHY_EMBEDDED
 2U

	)

131 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

132 
	#HAL_HCD_ERROR_INVALID_CALLBACK
 (0x00000010U√ã

	)

148 
	#__HAL_HCD_ENABLE
(
__HANDLE__
√ã()
	`USB_E¬´b√ÄGlob√ÜI¬°
 ((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

149 
	#__HAL_HCD_DISABLE
(
__HANDLE__
√ã()
	`USB_Di√üb√ÄGlob√ÜI¬°
 ((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

151 
	#__HAL_HCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
√ã((
	`USB_R√≥dI¬°√Æru¬±s
((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã& (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__))

	)

152 
	#__HAL_HCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
GINTSTS
√ãÔ£ø(__INTERRUPT__))

	)

153 
	#__HAL_HCD_IS_INVALID_INTERRUPT
(
__HANDLE__
√ã(
	`USB_R√≥dI¬°√Æru¬±s
((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø0U)

	)

155 
	#__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
__INTERRUPT__
√ã(
	`USBx_HC
(chnum)->
HCINT
 = (__INTERRUPT__))

	)

156 
	#__HAL_HCD_MASK_HALT_HC_INT
(
chnum
√ã(
	`USBx_HC
(chnum)->
HCINTMSK
 &Ô£ø~
USB_OTG_HCINTMSK_CHHM
)

	)

157 
	#__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
√ã(
	`USBx_HC
(chnum)->
HCINTMSK
 |Ô£ø
USB_OTG_HCINTMSK_CHHM
)

	)

158 
	#__HAL_HCD_MASK_ACK_HC_INT
(
chnum
√ã(
	`USBx_HC
(chnum)->
HCINTMSK
 &Ô£ø~
USB_OTG_HCINTMSK_ACKM
)

	)

159 
	#__HAL_HCD_UNMASK_ACK_HC_INT
(
chnum
√ã(
	`USBx_HC
(chnum)->
HCINTMSK
 |Ô£ø
USB_OTG_HCINTMSK_ACKM
)

	)

172 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_In√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

173 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_DeIn√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

174 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_HC_In√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
ch_num
,

175 
u√∂t8_t
 
√Ønum
, u√∂t8_√†
dev_add¬™ss
,

176 
u√∂t8_t
 
‚Ä¢√¨d
, u√∂t8_√†
√Ø_ty‚â•
, 
u√∂t16_t
 
mps
);

178 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_HC_H√Üt
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
ch_num
);

179 
HAL_HCD_M‚Ä¢In√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

180 
HAL_HCD_M‚Ä¢DeIn√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

182 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

189 
HAL_HCD_SOF_CB_ID
 = 0x01,

190 
HAL_HCD_CONNECT_CB_ID
 = 0x02,

191 
HAL_HCD_DISCONNECT_CB_ID
 = 0x03,

192 
HAL_HCD_PORT_ENABLED_CB_ID
 = 0x04,

193 
HAL_HCD_PORT_DISABLED_CB_ID
 = 0x05,

195 
HAL_HCD_MSPINIT_CB_ID
 = 0x06,

196 
HAL_HCD_MSPDEINIT_CB_ID
 = 0x07

198 } 
	tHAL_HCD_C√ÜlbackIDTy‚â•Def
;

208 (*
pHCD_C√ÜlbackTy‚â•Def
)(
	tHCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thhcd
);

209 (*
pHCD_HC_N≈∏ifyURBCh‚Ñ¢geC√ÜlbackTy‚â•Def
)(
	tHCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thhcd
,

210 
	tu√∂t8_t
 
	t√Ønum
,

211 
	tHCD_URBS√®√£Ty‚â•Def
 
	turb_¬∞¬©e
);

216 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_Regi¬∞√ÆC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

217 
HAL_HCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

218 
pHCD_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

220 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_UnRegi¬∞√ÆC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

221 
HAL_HCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

223 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_Regi¬∞√ÆHC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

224 
pHCD_HC_N≈∏ifyURBCh‚Ñ¢geC√ÜlbackTy‚â•Def
 
pC√Ülback
);

226 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_UnRegi¬∞√ÆHC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

236 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_HC_Subm√¥Reque¬∞
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
ch_num
,

237 
u√∂t8_t
 
d√∫eÀòi‚ÅÑ
, u√∂t8_√†
√Ø_ty‚â•
,

238 
u√∂t8_t
 
tok√≠
, u√∂t8_√†*
pbuff
,

239 
u√∂t16_t
 
√Ängth
, 
u√∂t8_t
 
do_p√∂g
);

242 
HAL_HCD_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

243 
HAL_HCD_WKUP_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

244 
HAL_HCD_SOF_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

245 
HAL_HCD_C‚ÅÑ‚àöÀò_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

246 
HAL_HCD_Disc‚ÅÑ‚àöÀò_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

247 
HAL_HCD_P‚ÄπtE¬´b√Äd_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

248 
HAL_HCD_P‚ÄπtDi√üb√Äd_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

249 
HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
,

250 
HCD_URBS√®√£Ty‚â•Def
 
urb_¬∞¬©e
);

259 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_Re¬£tP‚Äπt
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

260 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_S√®œÄ
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

261 
HAL_S√®tusTy‚â•Def
 
HAL_HCD_St‚Ä∫
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

270 
HCD_S√®√£Ty‚â•Def
 
HAL_HCD_G√´S√®√£
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

271 
HCD_URBS√®√£Ty‚â•Def
 
HAL_HCD_HC_G√´URBS√®√£
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
);

272 
HCD_HCS√®√£Ty‚â•Def
 
HAL_HCD_HC_G√´S√®√£
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
);

273 
u√∂t32_t
 
HAL_HCD_HC_G√´X‚ÄûrCou¬°
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
);

274 
u√∂t32_t
 
HAL_HCD_G√´Cu¬∫√≠tF√∏me
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

275 
u√∂t32_t
 
HAL_HCD_G√´Cu¬∫√≠tS‚â•ed
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

302 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_i2c.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_I2C_H


22 
	#__STM32F1xx_HAL_I2C_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

50 
u√∂t32_t
 
ClockS‚â•ed
;

53 
u√∂t32_t
 
DutyCyÀõe
;

56 
u√∂t32_t
 
OwnAdd¬™ss1
;

59 
u√∂t32_t
 
Add¬™ss√∂gMode
;

62 
u√∂t32_t
 
Du√ÜAdd¬™ssMode
;

65 
u√∂t32_t
 
OwnAdd¬™ss2
;

68 
u√∂t32_t
 
G√≠√Æ√ÜC√ÜlMode
;

71 
u√∂t32_t
 
NoS√•√´chMode
;

74 } 
	tI2C_In√¥Ty‚â•Def
;

109 
HAL_I2C_STATE_RESET
 = 0x00U,

110 
HAL_I2C_STATE_READY
 = 0x20U,

111 
HAL_I2C_STATE_BUSY
 = 0x24U,

112 
HAL_I2C_STATE_BUSY_TX
 = 0x21U,

113 
HAL_I2C_STATE_BUSY_RX
 = 0x22U,

114 
HAL_I2C_STATE_LISTEN
 = 0x28U,

115 
HAL_I2C_STATE_BUSY_TX_LISTEN
 = 0x29U,

117 
HAL_I2C_STATE_BUSY_RX_LISTEN
 = 0x2AU,

119 
HAL_I2C_STATE_ABORT
 = 0x60U,

120 
HAL_I2C_STATE_TIMEOUT
 = 0xA0U,

121 
HAL_I2C_STATE_ERROR
 = 0xE0U

123 } 
	tHAL_I2C_S√®√£Ty‚â•Def
;

149 
HAL_I2C_MODE_NONE
 = 0x00U,

150 
HAL_I2C_MODE_MASTER
 = 0x10U,

151 
HAL_I2C_MODE_SLAVE
 = 0x20U,

152 
HAL_I2C_MODE_MEM
 = 0x40U

154 } 
	tHAL_I2C_ModeTy‚â•Def
;

164 
	#HAL_I2C_ERROR_NONE
 0x00000000U

	)

165 
	#HAL_I2C_ERROR_BERR
 0x00000001U

	)

166 
	#HAL_I2C_ERROR_ARLO
 0x00000002U

	)

167 
	#HAL_I2C_ERROR_AF
 0x00000004U

	)

168 
	#HAL_I2C_ERROR_OVR
 0x00000008U

	)

169 
	#HAL_I2C_ERROR_DMA
 0x00000010U

	)

170 
	#HAL_I2C_ERROR_TIMEOUT
 0x00000020U

	)

171 
	#HAL_I2C_ERROR_SIZE
 0x00000040U

	)

172 
	#HAL_I2C_ERROR_DMA_PARAM
 0x00000080U

	)

173 
	#HAL_I2C_WRONG_START
 0x00000200U

	)

174 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

175 
	#HAL_I2C_ERROR_INVALID_CALLBACK
 0x00000100U

	)

185 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

186 
__I2C_H‚Ñ¢d√ÄTy‚â•Def


191 
I2C_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

193 
I2C_In√¥Ty‚â•Def
 
In√¥
;

195 
u√∂t8_t
 *
pBuffP√•
;

197 
u√∂t16_t
 
X‚ÄûrSize
;

199 
__IO
 
u√∂t16_t
 
X‚ÄûrCou¬°
;

201 
__IO
 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
;

203 
__IO
 
u√∂t32_t
 
P¬™viousS√®√£
;

206 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

208 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

210 
HAL_LockTy‚â•Def
 
Lock
;

212 
__IO
 
HAL_I2C_S√®√£Ty‚â•Def
 
S√®√£
;

214 
__IO
 
HAL_I2C_ModeTy‚â•Def
 
Mode
;

216 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

218 
__IO
 
u√∂t32_t
 
Devadd¬™ss
;

220 
__IO
 
u√∂t32_t
 
Memadd¬™ss
;

222 
__IO
 
u√∂t32_t
 
MemaddSize
;

224 
__IO
 
u√∂t32_t
 
Ev√≠tCou¬°
;

227 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

228 (* 
Ma¬∞√ÆTxC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

229 (* 
Ma¬∞√ÆRxC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

230 (* 
S≈ìveTxC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

231 (* 
S≈ìveRxC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

232 (* 
Li¬∞√≠C‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

233 (* 
MemTxC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

234 (* 
MemRxC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

235 (* 
E¬∫‚ÄπC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

236 (* 
Ab‚ÄπtC‚àÇtC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

238 (* 
AddrC√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
, 
u√∂t16_t
 
AddrM¬©chCode
);

240 (* 
M‚Ä¢In√¥C√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

241 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

244 } 
	tI2C_H‚Ñ¢d√ÄTy‚â•Def
;

246 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

252 
HAL_I2C_MASTER_TX_COMPLETE_CB_ID
 = 0x00U,

253 
HAL_I2C_MASTER_RX_COMPLETE_CB_ID
 = 0x01U,

254 
HAL_I2C_SLAVE_TX_COMPLETE_CB_ID
 = 0x02U,

255 
HAL_I2C_SLAVE_RX_COMPLETE_CB_ID
 = 0x03U,

256 
HAL_I2C_LISTEN_COMPLETE_CB_ID
 = 0x04U,

257 
HAL_I2C_MEM_TX_COMPLETE_CB_ID
 = 0x05U,

258 
HAL_I2C_MEM_RX_COMPLETE_CB_ID
 = 0x06U,

259 
HAL_I2C_ERROR_CB_ID
 = 0x07U,

260 
HAL_I2C_ABORT_CB_ID
 = 0x08U,

262 
HAL_I2C_MSPINIT_CB_ID
 = 0x09U,

263 
HAL_I2C_MSPDEINIT_CB_ID
 = 0x0AU

265 } 
	tHAL_I2C_C√ÜlbackIDTy‚â•Def
;

270 (*
pI2C_C√ÜlbackTy‚â•Def
)(
	tI2C_H‚Ñ¢d√ÄTy‚â•Def
 *
	thi2c
);

271 (*
pI2C_AddrC√ÜlbackTy‚â•Def
)(
	tI2C_H‚Ñ¢d√ÄTy‚â•Def
 *
	thi2c
, 
	tu√∂t8_t
 
	tT√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
, 
	tu√∂t16_t
 
	tAddrM¬©chCode
);

290 
	#I2C_DUTYCYCLE_2
 0x00000000U

	)

291 
	#I2C_DUTYCYCLE_16_9
 
I2C_CCR_DUTY


	)

299 
	#I2C_ADDRESSINGMODE_7BIT
 0x00004000U

	)

300 
	#I2C_ADDRESSINGMODE_10BIT
 (
I2C_OAR1_ADDMODE
 | 0x00004000U)

	)

308 
	#I2C_DUALADDRESS_DISABLE
 0x00000000U

	)

309 
	#I2C_DUALADDRESS_ENABLE
 
I2C_OAR2_ENDUAL


	)

317 
	#I2C_GENERALCALL_DISABLE
 0x00000000U

	)

318 
	#I2C_GENERALCALL_ENABLE
 
I2C_CR1_ENGC


	)

326 
	#I2C_NOSTRETCH_DISABLE
 0x00000000U

	)

327 
	#I2C_NOSTRETCH_ENABLE
 
I2C_CR1_NOSTRETCH


	)

335 
	#I2C_MEMADD_SIZE_8BIT
 0x00000001U

	)

336 
	#I2C_MEMADD_SIZE_16BIT
 0x00000010U

	)

344 
	#I2C_DIRECTION_RECEIVE
 0x00000000U

	)

345 
	#I2C_DIRECTION_TRANSMIT
 0x00000001U

	)

353 
	#I2C_FIRST_FRAME
 0x00000001U

	)

354 
	#I2C_FIRST_AND_NEXT_FRAME
 0x00000002U

	)

355 
	#I2C_NEXT_FRAME
 0x00000004U

	)

356 
	#I2C_FIRST_AND_LAST_FRAME
 0x00000008U

	)

357 
	#I2C_LAST_FRAME_NO_STOP
 0x00000010U

	)

358 
	#I2C_LAST_FRAME
 0x00000020U

	)

363 
	#I2C_OTHER_FRAME
 (0x00AA0000U)

	)

364 
	#I2C_OTHER_AND_LAST_FRAME
 (0xAA000000U)

	)

375 
	#I2C_IT_BUF
 
I2C_CR2_ITBUFEN


	)

376 
	#I2C_IT_EVT
 
I2C_CR2_ITEVTEN


	)

377 
	#I2C_IT_ERR
 
I2C_CR2_ITERREN


	)

386 
	#I2C_FLAG_OVR
 0x00010800U

	)

387 
	#I2C_FLAG_AF
 0x00010400U

	)

388 
	#I2C_FLAG_ARLO
 0x00010200U

	)

389 
	#I2C_FLAG_BERR
 0x00010100U

	)

390 
	#I2C_FLAG_TXE
 0x00010080U

	)

391 
	#I2C_FLAG_RXNE
 0x00010040U

	)

392 
	#I2C_FLAG_STOPF
 0x00010010U

	)

393 
	#I2C_FLAG_ADD10
 0x00010008U

	)

394 
	#I2C_FLAG_BTF
 0x00010004U

	)

395 
	#I2C_FLAG_ADDR
 0x00010002U

	)

396 
	#I2C_FLAG_SB
 0x00010001U

	)

397 
	#I2C_FLAG_DUALF
 0x00100080U

	)

398 
	#I2C_FLAG_GENCALL
 0x00100010U

	)

399 
	#I2C_FLAG_TRA
 0x00100004U

	)

400 
	#I2C_FLAG_BUSY
 0x00100002U

	)

401 
	#I2C_FLAG_MSL
 0x00100001U

	)

420 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

421 
	#__HAL_I2C_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

422 (
__HANDLE__
)->
S√®√£
 = 
HAL_I2C_STATE_RESET
; \

423 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

424 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

425 } 0)

	)

427 
	#__HAL_I2C_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_I2C_STATE_RESET
)

	)

439 
	#__HAL_I2C_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
,(__INTERRUPT__))

	)

440 
	#__HAL_I2C_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
, (__INTERRUPT__))

	)

451 
	#__HAL_I2C_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
 & (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__)√ã? 
SET
 : 
RESET
)

	)

476 
	#__HAL_I2C_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((((
u√∂t8_t
)((__FLAG__) >> 16U)) == 0x01U) ? \

477 (((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR1
√ã& ((
__FLAG__
√ã& 
I2C_FLAG_MASK
)√ã=Ô£ø((__FLAG__√ã& I2C_FLAG_MASK)√ã? 
SET
 : 
RESET
) : \

478 (((((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR2
√ã& ((
__FLAG__
√ã& 
I2C_FLAG_MASK
)√ã=Ô£ø((__FLAG__√ã& I2C_FLAG_MASK)√ã? 
SET
 : 
RESET
))

	)

490 
	#__HAL_I2C_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR1
 = ~((__FLAG__√ã& 
I2C_FLAG_MASK
))

	)

497 
	#__HAL_I2C_CLEAR_ADDRFLAG
(
__HANDLE__
) \

499 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0x00U; \

500 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR1
; \

501 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR2
; \

502 
	`UNUSED
(
tm¬•eg
); \

503 } 0)

	)

509 
	#__HAL_I2C_CLEAR_STOPFLAG
(
__HANDLE__
) \

511 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0x00U; \

512 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR1
; \

513 
	`SET_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_PE
); \

514 
	`UNUSED
(
tm¬•eg
); \

515 } 0)

	)

521 
	#__HAL_I2C_ENABLE
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_PE
)

	)

527 
	#__HAL_I2C_DISABLE
(
__HANDLE__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_PE
)

	)

542 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_In√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

543 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_DeIn√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

544 
HAL_I2C_M‚Ä¢In√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

545 
HAL_I2C_M‚Ä¢DeIn√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

548 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

549 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Regi¬∞√ÆC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
HAL_I2C_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pI2C_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

550 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_UnRegi¬∞√ÆC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
HAL_I2C_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

552 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Regi¬∞√ÆAddrC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
pI2C_AddrC√ÜlbackTy‚â•Def
 
pC√Ülback
);

553 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_UnRegi¬∞√ÆAddrC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

564 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_T√∏nsm√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
);

565 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_ReÀöive
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
);

566 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_T√∏nsm√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

567 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_ReÀöive
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

568 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Mem_Wr√¥e
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
);

569 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Mem_R√≥d
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
);

570 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_IsDeviÀöR√≥dy
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t32_t
 
Tr√ºls
, u√∂t32_√†
Timeout
);

573 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

574 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

575 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

576 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

577 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Mem_Wr√¥e_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

578 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Mem_R√≥d_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

580 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

581 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_Seq_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

582 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_Seq_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

583 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_Seq_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

584 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_E¬´b√ÄLi¬∞√≠_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

585 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Di√üb√ÄLi¬∞√≠_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

586 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_Ab‚Äπt_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
);

589 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

590 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

591 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

592 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

593 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Mem_Wr√¥e_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

594 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Mem_R√≥d_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
);

596 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

597 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_Ma¬∞√Æ_Seq_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

598 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_Seq_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

599 
HAL_S√®tusTy‚â•Def
 
HAL_I2C_S≈ìve_Seq_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
);

608 
HAL_I2C_EV_IRQH‚Ñ¢d√Är
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

609 
HAL_I2C_ER_IRQH‚Ñ¢d√Är
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

610 
HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

611 
HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

612 
HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

613 
HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

614 
HAL_I2C_AddrC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
, 
u√∂t16_t
 
AddrM¬©chCode
);

615 
HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

616 
HAL_I2C_MemTxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

617 
HAL_I2C_MemRxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

618 
HAL_I2C_E¬∫‚ÄπC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

619 
HAL_I2C_Ab‚ÄπtC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

628 
HAL_I2C_S√®√£Ty‚â•Def
 
HAL_I2C_G√´S√®√£
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

629 
HAL_I2C_ModeTy‚â•Def
 
HAL_I2C_G√´Mode
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

630 
u√∂t32_t
 
HAL_I2C_G√´E¬∫‚Äπ
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

645 
	#I2C_FLAG_MASK
 0x0000FFFFU

	)

646 
	#I2C_MIN_PCLK_FREQ_STANDARD
 2000000U

	)

647 
	#I2C_MIN_PCLK_FREQ_FAST
 4000000U

	)

657 
	#I2C_MIN_PCLK_FREQ
(
__PCLK__
, 
__SPEED__
√ã(((__SPEED__√ã<Ô£ø100000U√ã? ((__PCLK__√ã< 
I2C_MIN_PCLK_FREQ_STANDARD
√ã: ((__PCLK__√ã< 
I2C_MIN_PCLK_FREQ_FAST
))

	)

658 
	#I2C_CCR_CALCULATION
(
__PCLK__
, 
__SPEED__
, 
__COEFF__
√ã(((((__PCLK__√ã- 1U)/((__SPEED__√ã* (__COEFF__))√ã+ 1U√ã& 
I2C_CCR_CCR
)

	)

659 
	#I2C_FREQRANGE
(
__PCLK__
√ã((__PCLK__)/1000000U)

	)

660 
	#I2C_RISE_TIME
(
__FREQRANGE__
, 
__SPEED__
√ã(((__SPEED__√ã<Ô£ø100000U√ã? ((__FREQRANGE__√ã+ 1U√ã: ((((__FREQRANGE__√ã* 300U√ã/ 1000U√ã+ 1U))

	)

661 
	#I2C_SPEED_STANDARD
(
__PCLK__
, 
__SPEED__
√ã((
	`I2C_CCR_CALCULATION
((__PCLK__), (__SPEED__), 2U√ã< 4U)? 4U:I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U))

	)

662 
	#I2C_SPEED_FAST
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
√ã(((__DUTYCYCLE__√ã=Ô£ø
I2C_DUTYCYCLE_2
)? 
	`I2C_CCR_CALCULATION
((__PCLK__), (__SPEED__), 3U√ã: (I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 25U√ã| 
I2C_DUTYCYCLE_16_9
))

	)

663 
	#I2C_SPEED
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
√ã(((__SPEED__√ã<Ô£ø100000U)? (
	`I2C_SPEED_STANDARD
((__PCLK__), (__SPEED__))) : \

664 ((
	`I2C_SPEED_FAST
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
)√ã& 
I2C_CCR_CCR
) == 0U)? 1U : \

665 ((
	`I2C_SPEED_FAST
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
))√ã| 
I2C_CCR_FS
))

	)

667 
	#I2C_7BIT_ADD_WRITE
(
__ADDRESS__
√ã((
u√∂t8_t
)((__ADDRESS__√ã& (u√∂t8_t)(~
I2C_OAR1_ADD0
)))

	)

668 
	#I2C_7BIT_ADD_READ
(
__ADDRESS__
√ã((
u√∂t8_t
)((__ADDRESS__√ã| 
I2C_OAR1_ADD0
))

	)

670 
	#I2C_10BIT_ADDRESS
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((__ADDRESS__√ã& (u√∂t16_t)0x00FF)))

	)

671 
	#I2C_10BIT_HEADER_WRITE
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((u√∂t16_t)(((u√∂t16_t)((__ADDRESS__√ã& (u√∂t16_t)0x0300)√ã>> 7√ã| (u√∂t16_t)0x00F0)))

	)

672 
	#I2C_10BIT_HEADER_READ
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((u√∂t16_t)(((u√∂t16_t)((__ADDRESS__√ã& (u√∂t16_t)0x0300)√ã>> 7√ã| (u√∂t16_t)(0x00F1))))

	)

674 
	#I2C_MEM_ADD_MSB
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)(((u√∂t16_t)((__ADDRESS__√ã& (u√∂t16_t)0xFF00)√ã>> 8)))

	)

675 
	#I2C_MEM_ADD_LSB
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((__ADDRESS__√ã& (u√∂t16_t)0x00FF)))

	)

680 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
√ã(((CYCLE√ã=Ô£ø
I2C_DUTYCYCLE_2
) || \

681 ((
CYCLE
√ã=Ô£ø
I2C_DUTYCYCLE_16_9
))

	)

682 
	#IS_I2C_ADDRESSING_MODE
(
ADDRESS
√ã(((ADDRESS√ã=Ô£ø
I2C_ADDRESSINGMODE_7BIT
) || \

683 ((
ADDRESS
√ã=Ô£ø
I2C_ADDRESSINGMODE_10BIT
))

	)

684 
	#IS_I2C_DUAL_ADDRESS
(
ADDRESS
√ã(((ADDRESS√ã=Ô£ø
I2C_DUALADDRESS_DISABLE
) || \

685 ((
ADDRESS
√ã=Ô£ø
I2C_DUALADDRESS_ENABLE
))

	)

686 
	#IS_I2C_GENERAL_CALL
(
CALL
√ã(((CALL√ã=Ô£ø
I2C_GENERALCALL_DISABLE
) || \

687 ((
CALL
√ã=Ô£ø
I2C_GENERALCALL_ENABLE
))

	)

688 
	#IS_I2C_NO_STRETCH
(
STRETCH
√ã(((STRETCH√ã=Ô£ø
I2C_NOSTRETCH_DISABLE
) || \

689 ((
STRETCH
√ã=Ô£ø
I2C_NOSTRETCH_ENABLE
))

	)

690 
	#IS_I2C_MEMADD_SIZE
(
SIZE
√ã(((SIZE√ã=Ô£ø
I2C_MEMADD_SIZE_8BIT
) || \

691 ((
SIZE
√ã=Ô£ø
I2C_MEMADD_SIZE_16BIT
))

	)

692 
	#IS_I2C_CLOCK_SPEED
(
SPEED
√ã(((SPEED√ã> 0U√ã&& ((SPEED√ã<Ô£ø400000U))

	)

693 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
√ã(((ADDRESS1√ã& 0xFFFFFC00U√ã=Ô£ø0U)

	)

694 
	#IS_I2C_OWN_ADDRESS2
(
ADDRESS2
√ã(((ADDRESS2√ã& 0xFFFFFF01U√ã=Ô£ø0U)

	)

695 
	#IS_I2C_TRANSFER_OPTIONS_REQUEST
(
REQUEST
√ã(((REQUEST√ã=Ô£ø
I2C_FIRST_FRAME
) || \

696 ((
REQUEST
√ã=Ô£ø
I2C_FIRST_AND_NEXT_FRAME
) || \

697 ((
REQUEST
√ã=Ô£ø
I2C_NEXT_FRAME
) || \

698 ((
REQUEST
√ã=Ô£ø
I2C_FIRST_AND_LAST_FRAME
) || \

699 ((
REQUEST
√ã=Ô£ø
I2C_LAST_FRAME
) || \

700 ((
REQUEST
√ã=Ô£ø
I2C_LAST_FRAME_NO_STOP
) || \

701 
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
REQUEST
))

	)

703 
	#IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
REQUEST
√ã(((REQUEST√ã=Ô£ø
I2C_OTHER_FRAME
) || \

704 ((
REQUEST
√ã=Ô£ø
I2C_OTHER_AND_LAST_FRAME
))

	)

706 
	#I2C_CHECK_FLAG
(
__ISR__
, 
__FLAG__
√ã((((__ISR__√ã& ((__FLAG__√ã& 
I2C_FLAG_MASK
)√ã=Ô£ø((__FLAG__√ã& I2C_FLAG_MASK)√ã? 
SET
 : 
RESET
)

	)

707 
	#I2C_CHECK_IT_SOURCE
(
__CR1__
, 
__IT__
√ã((((__CR1__√ã& (__IT__)√ã=Ô£ø(__IT__)√ã? 
SET
 : 
RESET
)

	)

733 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_i2s.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_I2S_H


22 
	#STM32F1xx_HAL_I2S_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

31 #i‚Ä°
def√∂ed
(
SPI_I2S_SUPPORT
)

50 
u√∂t32_t
 
Mode
;

53 
u√∂t32_t
 
S√®nd¬®d
;

56 
u√∂t32_t
 
D¬©aF‚Äπm¬©
;

59 
u√∂t32_t
 
MCLKOu√ßut
;

62 
u√∂t32_t
 
AudioF¬™q
;

65 
u√∂t32_t
 
CPOL
;

67 } 
	tI2S_In√¥Ty‚â•Def
;

74 
HAL_I2S_STATE_RESET
 = 0x00U,

75 
HAL_I2S_STATE_READY
 = 0x01U,

76 
HAL_I2S_STATE_BUSY
 = 0x02U,

77 
HAL_I2S_STATE_BUSY_TX
 = 0x03U,

78 
HAL_I2S_STATE_BUSY_RX
 = 0x04U,

79 
HAL_I2S_STATE_TIMEOUT
 = 0x06U,

80 
HAL_I2S_STATE_ERROR
 = 0x07U

81 } 
	tHAL_I2S_S√®√£Ty‚â•Def
;

86 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1)

87 
__I2S_H‚Ñ¢d√ÄTy‚â•Def


92 
SPI_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

94 
I2S_In√¥Ty‚â•Def
 
In√¥
;

96 
u√∂t16_t
 *
pTxBuffP√•
;

98 
__IO
 
u√∂t16_t
 
TxX‚ÄûrSize
;

100 
__IO
 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

102 
u√∂t16_t
 *
pRxBuffP√•
;

104 
__IO
 
u√∂t16_t
 
RxX‚ÄûrSize
;

106 
__IO
 
u√∂t16_t
 
RxX‚ÄûrCou¬°
;

112 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

114 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

116 
__IO
 
HAL_LockTy‚â•Def
 
Lock
;

118 
__IO
 
HAL_I2S_S√®√£Ty‚â•Def
 
S√®√£
;

120 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

123 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

124 (* 
TxC‚àÇtC√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

125 (* 
RxC‚àÇtC√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

126 (* 
TxH√ÜfC‚àÇtC√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

127 (* 
RxH√ÜfC‚àÇtC√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

128 (* 
E¬∫‚ÄπC√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

129 (* 
M‚Ä¢In√¥C√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

130 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

133 } 
	tI2S_H‚Ñ¢d√ÄTy‚â•Def
;

135 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

141 
HAL_I2S_TX_COMPLETE_CB_ID
 = 0x00U,

142 
HAL_I2S_RX_COMPLETE_CB_ID
 = 0x01U,

143 
HAL_I2S_TX_HALF_COMPLETE_CB_ID
 = 0x03U,

144 
HAL_I2S_RX_HALF_COMPLETE_CB_ID
 = 0x04U,

145 
HAL_I2S_ERROR_CB_ID
 = 0x06U,

146 
HAL_I2S_MSPINIT_CB_ID
 = 0x07U,

147 
HAL_I2S_MSPDEINIT_CB_ID
 = 0x08U

149 } 
	tHAL_I2S_C√ÜlbackIDTy‚â•Def
;

154 (*
pI2S_C√ÜlbackTy‚â•Def
)(
	tI2S_H‚Ñ¢d√ÄTy‚â•Def
 *
	thi2s
);

168 
	#HAL_I2S_ERROR_NONE
 (0x00000000U√ã

	)

169 
	#HAL_I2S_ERROR_TIMEOUT
 (0x00000001U√ã

	)

170 
	#HAL_I2S_ERROR_OVR
 (0x00000002U√ã

	)

171 
	#HAL_I2S_ERROR_UDR
 (0x00000004U√ã

	)

172 
	#HAL_I2S_ERROR_DMA
 (0x00000008U√ã

	)

173 
	#HAL_I2S_ERROR_PRESCALER
 (0x00000010U√ã

	)

174 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

175 
	#HAL_I2S_ERROR_INVALID_CALLBACK
 (0x00000020U√ã

	)

177 
	#HAL_I2S_ERROR_BUSY_LINE_RX
 (0x00000040U√ã

	)

185 
	#I2S_MODE_SLAVE_TX
 (0x00000000U)

	)

186 
	#I2S_MODE_SLAVE_RX
 (
SPI_I2SCFGR_I2SCFG_0
)

	)

187 
	#I2S_MODE_MASTER_TX
 (
SPI_I2SCFGR_I2SCFG_1
)

	)

188 
	#I2S_MODE_MASTER_RX
 ((
SPI_I2SCFGR_I2SCFG_0
 | 
SPI_I2SCFGR_I2SCFG_1
))

	)

196 
	#I2S_STANDARD_PHILIPS
 (0x00000000U)

	)

197 
	#I2S_STANDARD_MSB
 (
SPI_I2SCFGR_I2SSTD_0
)

	)

198 
	#I2S_STANDARD_LSB
 (
SPI_I2SCFGR_I2SSTD_1
)

	)

199 
	#I2S_STANDARD_PCM_SHORT
 ((
SPI_I2SCFGR_I2SSTD_0
 | 
SPI_I2SCFGR_I2SSTD_1
))

	)

200 
	#I2S_STANDARD_PCM_LONG
 ((
SPI_I2SCFGR_I2SSTD_0
 | 
SPI_I2SCFGR_I2SSTD_1
 | 
SPI_I2SCFGR_PCMSYNC
))

	)

208 
	#I2S_DATAFORMAT_16B
 (0x00000000U)

	)

209 
	#I2S_DATAFORMAT_16B_EXTENDED
 (
SPI_I2SCFGR_CHLEN
)

	)

210 
	#I2S_DATAFORMAT_24B
 ((
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_0
))

	)

211 
	#I2S_DATAFORMAT_32B
 ((
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_1
))

	)

219 
	#I2S_MCLKOUTPUT_ENABLE
 (
SPI_I2SPR_MCKOE
)

	)

220 
	#I2S_MCLKOUTPUT_DISABLE
 (0x00000000U)

	)

228 
	#I2S_AUDIOFREQ_192K
 (192000U)

	)

229 
	#I2S_AUDIOFREQ_96K
 (96000U)

	)

230 
	#I2S_AUDIOFREQ_48K
 (48000U)

	)

231 
	#I2S_AUDIOFREQ_44K
 (44100U)

	)

232 
	#I2S_AUDIOFREQ_32K
 (32000U)

	)

233 
	#I2S_AUDIOFREQ_22K
 (22050U)

	)

234 
	#I2S_AUDIOFREQ_16K
 (16000U)

	)

235 
	#I2S_AUDIOFREQ_11K
 (11025U)

	)

236 
	#I2S_AUDIOFREQ_8K
 (8000U)

	)

237 
	#I2S_AUDIOFREQ_DEFAULT
 (2U)

	)

245 
	#I2S_CPOL_LOW
 (0x00000000U)

	)

246 
	#I2S_CPOL_HIGH
 (
SPI_I2SCFGR_CKPOL
)

	)

254 
	#I2S_IT_TXE
 
SPI_CR2_TXEIE


	)

255 
	#I2S_IT_RXNE
 
SPI_CR2_RXNEIE


	)

256 
	#I2S_IT_ERR
 
SPI_CR2_ERRIE


	)

264 
	#I2S_FLAG_TXE
 
SPI_SR_TXE


	)

265 
	#I2S_FLAG_RXNE
 
SPI_SR_RXNE


	)

267 
	#I2S_FLAG_UDR
 
SPI_SR_UDR


	)

268 
	#I2S_FLAG_OVR
 
SPI_SR_OVR


	)

269 
	#I2S_FLAG_FRE
 
SPI_SR_FRE


	)

271 
	#I2S_FLAG_CHSIDE
 
SPI_SR_CHSIDE


	)

272 
	#I2S_FLAG_BSY
 
SPI_SR_BSY


	)

274 
	#I2S_FLAG_MASK
 (
SPI_SR_RXNE
\

275 | 
SPI_SR_TXE
 | 
SPI_SR_UDR
 | 
SPI_SR_OVR
 | 
SPI_SR_CHSIDE
 | 
SPI_SR_BSY
)

	)

293 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

294 
	#__HAL_I2S_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

295 (
__HANDLE__
)->
S√®√£
 = 
HAL_I2S_STATE_RESET
; \

296 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

297 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

298 } 0)

	)

300 
	#__HAL_I2S_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_I2S_STATE_RESET
)

	)

307 
	#__HAL_I2S_ENABLE
(
__HANDLE__
√ã(
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

	)

313 
	#__HAL_I2S_DISABLE
(
__HANDLE__
√ã(
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

	)

324 
	#__HAL_I2S_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
,(__INTERRUPT__)))

	)

335 
	#__HAL_I2S_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
,(__INTERRUPT__)))

	)

347 
	#__HAL_I2S_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
\

348 & (
__INTERRUPT__
)√ã=Ô£ø(__INTERRUPT__)√ã? 
SET
 : 
RESET
)

	)

363 
	#__HAL_I2S_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
√ã& (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

369 
	#__HAL_I2S_CLEAR_OVRFLAG
(
__HANDLE__
) do{ \

370 
__IO
 
u√∂t32_t
 
tm¬•eg_ovr
 = 0x00U; \

371 
tm¬•eg_ovr
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
; \

372 
tm¬•eg_ovr
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

373 
	`UNUSED
(
tm¬•eg_ovr
); \

374 }0U)

	)

379 
	#__HAL_I2S_CLEAR_UDRFLAG
(
__HANDLE__
) do{\

380 
__IO
 
u√∂t32_t
 
tm¬•eg_udr
 = 0x00U;\

381 
tm¬•eg_udr
 = ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
);\

382 
	`UNUSED
(
tm¬•eg_udr
); \

383 }0U)

	)

388 
	#__HAL_I2S_FLUSH_RX_DR
(
__HANDLE__
) do{\

389 
__IO
 
u√∂t32_t
 
tm¬•eg_dr
 = 0x00U;\

390 
tm¬•eg_dr
 = ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
);\

391 
	`UNUSED
(
tm¬•eg_dr
); \

392 }0U)

	)

406 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_In√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

407 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_DeIn√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

408 
HAL_I2S_M‚Ä¢In√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

409 
HAL_I2S_M‚Ä¢DeIn√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

412 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

413 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_Regi¬∞√ÆC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
HAL_I2S_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

414 
pI2S_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

415 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_UnRegi¬∞√ÆC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
HAL_I2S_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

426 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_T√∏nsm√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
);

427 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_ReÀöive
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
);

430 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_T√∏nsm√¥_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
);

431 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_ReÀöive_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
);

432 
HAL_I2S_IRQH‚Ñ¢d√Är
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

435 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_T√∏nsm√¥_DMA
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
);

436 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_ReÀöive_DMA
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
);

438 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_DMAPau¬£
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

439 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_DMAResume
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

440 
HAL_S√®tusTy‚â•Def
 
HAL_I2S_DMASt‚Ä∫
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

443 
HAL_I2S_TxH√ÜfC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

444 
HAL_I2S_TxC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

445 
HAL_I2S_RxH√ÜfC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

446 
HAL_I2S_RxC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

447 
HAL_I2S_E¬∫‚ÄπC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

456 
HAL_I2S_S√®√£Ty‚â•Def
 
HAL_I2S_G√´S√®√£
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

457 
u√∂t32_t
 
HAL_I2S_G√´E¬∫‚Äπ
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

486 
	#I2S_CHECK_FLAG
(
__SR__
, 
__FLAG__
) ((((__SR__)\

487 & ((
__FLAG__
√ã& 
I2S_FLAG_MASK
)√ã=Ô£ø((__FLAG__√ã& I2S_FLAG_MASK)√ã? 
SET
 : 
RESET
)

	)

498 
	#I2S_CHECK_IT_SOURCE
(
__CR2__
, 
__INTERRUPT__
) ((((__CR2__)\

499 & (
__INTERRUPT__
)√ã=Ô£ø(__INTERRUPT__)√ã? 
SET
 : 
RESET
)

	)

506 
	#IS_I2S_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
I2S_MODE_SLAVE_TX
) || \

507 ((
__MODE__
√ã=Ô£ø
I2S_MODE_SLAVE_RX
) || \

508 ((
__MODE__
√ã=Ô£ø
I2S_MODE_MASTER_TX
) || \

509 ((
__MODE__
√ã=Ô£ø
I2S_MODE_MASTER_RX
))

	)

511 
	#IS_I2S_STANDARD
(
__STANDARD__
√ã(((__STANDARD__√ã=Ô£ø
I2S_STANDARD_PHILIPS
) || \

512 ((
__STANDARD__
√ã=Ô£ø
I2S_STANDARD_MSB
) || \

513 ((
__STANDARD__
√ã=Ô£ø
I2S_STANDARD_LSB
) || \

514 ((
__STANDARD__
√ã=Ô£ø
I2S_STANDARD_PCM_SHORT
) || \

515 ((
__STANDARD__
√ã=Ô£ø
I2S_STANDARD_PCM_LONG
))

	)

517 
	#IS_I2S_DATA_FORMAT
(
__FORMAT__
√ã(((__FORMAT__√ã=Ô£ø
I2S_DATAFORMAT_16B
) || \

518 ((
__FORMAT__
√ã=Ô£ø
I2S_DATAFORMAT_16B_EXTENDED
) || \

519 ((
__FORMAT__
√ã=Ô£ø
I2S_DATAFORMAT_24B
) || \

520 ((
__FORMAT__
√ã=Ô£ø
I2S_DATAFORMAT_32B
))

	)

522 
	#IS_I2S_MCLK_OUTPUT
(
__OUTPUT__
√ã(((__OUTPUT__√ã=Ô£ø
I2S_MCLKOUTPUT_ENABLE
) || \

523 ((
__OUTPUT__
√ã=Ô£ø
I2S_MCLKOUTPUT_DISABLE
))

	)

525 
	#IS_I2S_AUDIO_FREQ
(
__FREQ__
√ã((((__FREQ__√ã>Ô£ø
I2S_AUDIOFREQ_8K
) && \

526 ((
__FREQ__
√ã<Ô£ø
I2S_AUDIOFREQ_192K
)) || \

527 ((
__FREQ__
√ã=Ô£ø
I2S_AUDIOFREQ_DEFAULT
))

	)

534 
	#IS_I2S_CPOL
(
__CPOL__
√ã(((__CPOL__√ã=Ô£ø
I2S_CPOL_LOW
) || \

535 ((
__CPOL__
√ã=Ô£ø
I2S_CPOL_HIGH
))

	)

550 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_irda.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_IRDA_H


22 
	#__STM32F1xx_HAL_IRDA_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

48 
u√∂t32_t
 
BaudR¬©e
;

53 
u√∂t32_t
 
W‚ÄπdL√≠gth
;

56 
u√∂t32_t
 
P¬®√¥y
;

63 
u√∂t32_t
 
Mode
;

66 
u√∂t8_t
 
P¬™sÀá√Är
;

71 
u√∂t32_t
 
IrDAMode
;

73 } 
	tIRDA_In√¥Ty‚â•Def
;

116 
HAL_IRDA_STATE_RESET
 = 0x00U,

118 
HAL_IRDA_STATE_READY
 = 0x20U,

120 
HAL_IRDA_STATE_BUSY
 = 0x24U,

122 
HAL_IRDA_STATE_BUSY_TX
 = 0x21U,

124 
HAL_IRDA_STATE_BUSY_RX
 = 0x22U,

126 
HAL_IRDA_STATE_BUSY_TX_RX
 = 0x23U,

129 
HAL_IRDA_STATE_TIMEOUT
 = 0xA0U,

131 
HAL_IRDA_STATE_ERROR
 = 0xE0U

133 } 
	tHAL_IRDA_S√®√£Ty‚â•Def
;

138 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

139 
__IRDA_H‚Ñ¢d√ÄTy‚â•Def


144 
USART_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

146 
IRDA_In√¥Ty‚â•Def
 
In√¥
;

148 
u√∂t8_t
 *
pTxBuffP√•
;

150 
u√∂t16_t
 
TxX‚ÄûrSize
;

152 
__IO
 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

154 
u√∂t8_t
 *
pRxBuffP√•
;

156 
u√∂t16_t
 
RxX‚ÄûrSize
;

158 
__IO
 
u√∂t16_t
 
RxX‚ÄûrCou¬°
;

160 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

162 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

164 
HAL_LockTy‚â•Def
 
Lock
;

166 
__IO
 
HAL_IRDA_S√®√£Ty‚â•Def
 
gS√®√£
;

170 
__IO
 
HAL_IRDA_S√®√£Ty‚â•Def
 
RxS√®√£
;

173 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

175 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

176 (* 
TxH√ÜfC‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

178 (* 
TxC‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

180 (* 
RxH√ÜfC‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

182 (* 
RxC‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

184 (* 
E¬∫‚ÄπC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

186 (* 
Ab‚ÄπtC‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

188 (* 
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

190 (* 
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

193 (* 
M‚Ä¢In√¥C√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

195 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

198 } 
	tIRDA_H‚Ñ¢d√ÄTy‚â•Def
;

200 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

206 
HAL_IRDA_TX_HALFCOMPLETE_CB_ID
 = 0x00U,

207 
HAL_IRDA_TX_COMPLETE_CB_ID
 = 0x01U,

208 
HAL_IRDA_RX_HALFCOMPLETE_CB_ID
 = 0x02U,

209 
HAL_IRDA_RX_COMPLETE_CB_ID
 = 0x03U,

210 
HAL_IRDA_ERROR_CB_ID
 = 0x04U,

211 
HAL_IRDA_ABORT_COMPLETE_CB_ID
 = 0x05U,

212 
HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID
 = 0x06U,

213 
HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID
 = 0x07U,

215 
HAL_IRDA_MSPINIT_CB_ID
 = 0x08U,

216 
HAL_IRDA_MSPDEINIT_CB_ID
 = 0x09U

218 } 
	tHAL_IRDA_C√ÜlbackIDTy‚â•Def
;

223 (*
pIRDA_C√ÜlbackTy‚â•Def
)(
	tIRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
	th√∫da
);

238 
	#HAL_IRDA_ERROR_NONE
 0x00000000U

	)

239 
	#HAL_IRDA_ERROR_PE
 0x00000001U

	)

240 
	#HAL_IRDA_ERROR_NE
 0x00000002U

	)

241 
	#HAL_IRDA_ERROR_FE
 0x00000004U

	)

242 
	#HAL_IRDA_ERROR_ORE
 0x00000008U

	)

243 
	#HAL_IRDA_ERROR_DMA
 0x00000010U

	)

244 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

245 
	#HAL_IRDA_ERROR_INVALID_CALLBACK
 ((
u√∂t32_t
)0x00000020U√ã

	)

254 
	#IRDA_WORDLENGTH_8B
 0x00000000U

	)

255 
	#IRDA_WORDLENGTH_9B
 ((
u√∂t32_t
)
USART_CR1_M
)

	)

263 
	#IRDA_PARITY_NONE
 0x00000000U

	)

264 
	#IRDA_PARITY_EVEN
 ((
u√∂t32_t
)
USART_CR1_PCE
)

	)

265 
	#IRDA_PARITY_ODD
 ((
u√∂t32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

273 
	#IRDA_MODE_RX
 ((
u√∂t32_t
)
USART_CR1_RE
)

	)

274 
	#IRDA_MODE_TX
 ((
u√∂t32_t
)
USART_CR1_TE
)

	)

275 
	#IRDA_MODE_TX_RX
 ((
u√∂t32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
))

	)

283 
	#IRDA_POWERMODE_LOWPOWER
 ((
u√∂t32_t
)
USART_CR3_IRLP
)

	)

284 
	#IRDA_POWERMODE_NORMAL
 0x00000000U

	)

294 
	#IRDA_FLAG_TXE
 ((
u√∂t32_t
)
USART_SR_TXE
)

	)

295 
	#IRDA_FLAG_TC
 ((
u√∂t32_t
)
USART_SR_TC
)

	)

296 
	#IRDA_FLAG_RXNE
 ((
u√∂t32_t
)
USART_SR_RXNE
)

	)

297 
	#IRDA_FLAG_IDLE
 ((
u√∂t32_t
)
USART_SR_IDLE
)

	)

298 
	#IRDA_FLAG_ORE
 ((
u√∂t32_t
)
USART_SR_ORE
)

	)

299 
	#IRDA_FLAG_NE
 ((
u√∂t32_t
)
USART_SR_NE
)

	)

300 
	#IRDA_FLAG_FE
 ((
u√∂t32_t
)
USART_SR_FE
)

	)

301 
	#IRDA_FLAG_PE
 ((
u√∂t32_t
)
USART_SR_PE
)

	)

315 
	#IRDA_IT_PE
 ((
u√∂t32_t
)(
IRDA_CR1_REG_INDEX
 << 28U | 
USART_CR1_PEIE
))

	)

316 
	#IRDA_IT_TXE
 ((
u√∂t32_t
)(
IRDA_CR1_REG_INDEX
 << 28U | 
USART_CR1_TXEIE
))

	)

317 
	#IRDA_IT_TC
 ((
u√∂t32_t
)(
IRDA_CR1_REG_INDEX
 << 28U | 
USART_CR1_TCIE
))

	)

318 
	#IRDA_IT_RXNE
 ((
u√∂t32_t
)(
IRDA_CR1_REG_INDEX
 << 28U | 
USART_CR1_RXNEIE
))

	)

319 
	#IRDA_IT_IDLE
 ((
u√∂t32_t
)(
IRDA_CR1_REG_INDEX
 << 28U | 
USART_CR1_IDLEIE
))

	)

321 
	#IRDA_IT_LBD
 ((
u√∂t32_t
)(
IRDA_CR2_REG_INDEX
 << 28U | 
USART_CR2_LBDIE
))

	)

323 
	#IRDA_IT_CTS
 ((
u√∂t32_t
)(
IRDA_CR3_REG_INDEX
 << 28U | 
USART_CR3_CTSIE
))

	)

324 
	#IRDA_IT_ERR
 ((
u√∂t32_t
)(
IRDA_CR3_REG_INDEX
 << 28U | 
USART_CR3_EIE
))

	)

344 #i‚Ä°
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1

345 
	#__HAL_IRDA_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

346 (
__HANDLE__
)->
gS√®√£
 = 
HAL_IRDA_STATE_RESET
; \

347 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_IRDA_STATE_RESET
; \

348 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

349 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

350 } 0U)

	)

352 
	#__HAL_IRDA_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

353 (
__HANDLE__
)->
gS√®√£
 = 
HAL_IRDA_STATE_RESET
; \

354 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_IRDA_STATE_RESET
; \

355 } 0U)

	)

364 
	#__HAL_IRDA_FLUSH_DRREGISTER
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DR
)

	)

382 
	#__HAL_IRDA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 & (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

403 
	#__HAL_IRDA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__FLAG__))

	)

411 
	#__HAL_IRDA_CLEAR_PEFLAG
(
__HANDLE__
) \

413 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0x00U; \

414 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

415 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
; \

416 
	`UNUSED
(
tm¬•eg
); \

417 } 0U)

	)

425 
	#__HAL_IRDA_CLEAR_FEFLAG
(
__HANDLE__
√ã
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

433 
	#__HAL_IRDA_CLEAR_NEFLAG
(
__HANDLE__
√ã
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

441 
	#__HAL_IRDA_CLEAR_OREFLAG
(
__HANDLE__
√ã
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

449 
	#__HAL_IRDA_CLEAR_IDLEFLAG
(
__HANDLE__
√ã
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

465 
	#__HAL_IRDA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
IRDA_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø((__INTERRUPT__√ã& 
IRDA_IT_MASK
)): \

466 (((
__INTERRUPT__
√ã>> 28U√ã=Ô£ø
IRDA_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø((__INTERRUPT__√ã& 
IRDA_IT_MASK
)): \

467 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø((
__INTERRUPT__
√ã& 
IRDA_IT_MASK
)))

	)

482 
	#__HAL_IRDA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
IRDA_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~((__INTERRUPT__√ã& 
IRDA_IT_MASK
)): \

483 (((
__INTERRUPT__
√ã>> 28U√ã=Ô£ø
IRDA_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~((__INTERRUPT__√ã& 
IRDA_IT_MASK
)): \

484 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø~ ((
__INTERRUPT__
√ã& 
IRDA_IT_MASK
)))

	)

500 
	#__HAL_IRDA_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
√ã(((((__IT__√ã>> 28U√ã=Ô£ø
IRDA_CR1_REG_INDEX
)? (__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
:(((((
u√∂t32_t
)(__IT__)√ã>> 28U√ã=Ô£ø
IRDA_CR2_REG_INDEX
)? \

501 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 : (__HANDLE__)->In¬∞‚Ñ¢Àö->
CR3
)√ã& (((
u√∂t32_t
)(
__IT__
)√ã& 
IRDA_IT_MASK
))

	)

509 
	#__HAL_IRDA_ENABLE
(
__HANDLE__
√ã(
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_UE
))

	)

517 
	#__HAL_IRDA_DISABLE
(
__HANDLE__
√ã(
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_UE
))

	)

532 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_In√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

533 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_DeIn√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

534 
HAL_IRDA_M‚Ä¢In√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

535 
HAL_IRDA_M‚Ä¢DeIn√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

537 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

539 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Regi¬∞√ÆC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
HAL_IRDA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pIRDA_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

540 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_UnRegi¬∞√ÆC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
HAL_IRDA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

551 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_T√∏nsm√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

552 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_ReÀöive
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

553 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_T√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

554 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_ReÀöive_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

555 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_T√∏nsm√¥_DMA
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

556 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_ReÀöive_DMA
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

557 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_DMAPau¬£
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

558 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_DMAResume
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

559 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_DMASt‚Ä∫
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

561 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Ab‚Äπt
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

562 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Ab‚ÄπtT√∏nsm√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

563 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Ab‚ÄπtReÀöive
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

564 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Ab‚Äπt_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

565 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Ab‚ÄπtT√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

566 
HAL_S√®tusTy‚â•Def
 
HAL_IRDA_Ab‚ÄπtReÀöive_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

568 
HAL_IRDA_IRQH‚Ñ¢d√Är
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

569 
HAL_IRDA_TxC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

570 
HAL_IRDA_RxC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

571 
HAL_IRDA_TxH√ÜfC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

572 
HAL_IRDA_RxH√ÜfC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

573 
HAL_IRDA_E¬∫‚ÄπC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

574 
HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

575 
HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

576 
HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

585 
HAL_IRDA_S√®√£Ty‚â•Def
 
HAL_IRDA_G√´S√®√£
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

586 
u√∂t32_t
 
HAL_IRDA_G√´E¬∫‚Äπ
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

605 
	#IRDA_IT_MASK
 ((
u√∂t32_t
√ã
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
 | 
USART_CR1_RXNEIE
 | \

606 
USART_CR1_IDLEIE
 | 
USART_CR2_LBDIE
 | 
USART_CR3_CTSIE
 | 
USART_CR3_EIE
 )

	)

608 
	#IRDA_CR1_REG_INDEX
 1U

	)

609 
	#IRDA_CR2_REG_INDEX
 2U

	)

610 
	#IRDA_CR3_REG_INDEX
 3U

	)

619 
	#IS_IRDA_WORD_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
IRDA_WORDLENGTH_8B
) || \

620 ((
LENGTH
√ã=Ô£ø
IRDA_WORDLENGTH_9B
))

	)

622 
	#IS_IRDA_PARITY
(
PARITY
√ã(((PARITY√ã=Ô£ø
IRDA_PARITY_NONE
) || \

623 ((
PARITY
√ã=Ô£ø
IRDA_PARITY_EVEN
) || \

624 ((
PARITY
√ã=Ô£ø
IRDA_PARITY_ODD
))

	)

626 
	#IS_IRDA_MODE
(
MODE
√ã((((MODE√ã& 0x0000FFF3U√ã=Ô£ø0x00U√ã&& ((MODE√ã!Ô£ø0x00000000U))

	)

628 
	#IS_IRDA_POWERMODE
(
MODE
√ã(((MODE√ã=Ô£ø
IRDA_POWERMODE_LOWPOWER
) || \

629 ((
MODE
√ã=Ô£ø
IRDA_POWERMODE_NORMAL
))

	)

631 
	#IS_IRDA_BAUDRATE
(
BAUDRATE
√ã((BAUDRATE√ã< 115201U)

	)

633 
	#IRDA_DIV
(
_PCLK_
, 
_BAUD_
√ã(((_PCLK_)*25U)/(4U*(_BAUD_)))

	)

635 
	#IRDA_DIVMANT
(
_PCLK_
, 
_BAUD_
√ã(
	`IRDA_DIV
((_PCLK_), (_BAUD_))/100U)

	)

637 
	#IRDA_DIVFRAQ
(
_PCLK_
, 
_BAUD_
√ã(((
	`IRDA_DIV
((_PCLK_), (_BAUD_)√ã- (
	`IRDA_DIVMANT
((_PCLK_), (_BAUD_)√ã* 100U)√ã* 16U + 50U√ã/ 100U)

	)

641 
	#IRDA_BRR
(
_PCLK_
, 
_BAUD_
√ã(((
	`IRDA_DIVMANT
((_PCLK_), (_BAUD_)) << 4U) + \

642 (
	`IRDA_DIVFRAQ
((
_PCLK_
), (
_BAUD_
)) & 0xF0U)) + \

643 (
	`IRDA_DIVFRAQ
((
_PCLK_
), (
_BAUD_
)√ã& 0x0FU))

	)

666 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_iwdg.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_IWDG_H


22 
	#STM32F1xx_HAL_IWDG_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
P¬™sÀá√Är
;

52 
u√∂t32_t
 
R√±Ô¨Çd
;

55 } 
	tIWDG_In√¥Ty‚â•Def
;

62 
IWDG_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

64 
IWDG_In√¥Ty‚â•Def
 
In√¥
;

65 } 
	tIWDG_H‚Ñ¢d√ÄTy‚â•Def
;

80 
	#IWDG_PRESCALER_4
 0x00000000U

	)

81 
	#IWDG_PRESCALER_8
 
IWDG_PR_PR_0


	)

82 
	#IWDG_PRESCALER_16
 
IWDG_PR_PR_1


	)

83 
	#IWDG_PRESCALER_32
 (
IWDG_PR_PR_1
 | 
IWDG_PR_PR_0
√ã

	)

84 
	#IWDG_PRESCALER_64
 
IWDG_PR_PR_2


	)

85 
	#IWDG_PRESCALER_128
 (
IWDG_PR_PR_2
 | 
IWDG_PR_PR_0
√ã

	)

86 
	#IWDG_PRESCALER_256
 (
IWDG_PR_PR_2
 | 
IWDG_PR_PR_1
√ã

	)

108 
	#__HAL_IWDG_START
(
__HANDLE__
√ã
	`WRITE_REG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
KR
, 
IWDG_KEY_ENABLE
)

	)

116 
	#__HAL_IWDG_RELOAD_COUNTER
(
__HANDLE__
√ã
	`WRITE_REG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
KR
, 
IWDG_KEY_RELOAD
)

	)

131 
HAL_S√®tusTy‚â•Def
 
HAL_IWDG_In√¥
(
IWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hiwdg
);

140 
HAL_S√®tusTy‚â•Def
 
HAL_IWDG_Re‚Ä∞esh
(
IWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hiwdg
);

157 
	#IWDG_KEY_RELOAD
 0x0000AAAAU

	)

158 
	#IWDG_KEY_ENABLE
 0x0000CCCCU

	)

159 
	#IWDG_KEY_WRITE_ACCESS_ENABLE
 0x00005555U

	)

160 
	#IWDG_KEY_WRITE_ACCESS_DISABLE
 0x00000000U

	)

176 
	#IWDG_ENABLE_WRITE_ACCESS
(
__HANDLE__
√ã
	`WRITE_REG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
KR
, 
IWDG_KEY_WRITE_ACCESS_ENABLE
)

	)

183 
	#IWDG_DISABLE_WRITE_ACCESS
(
__HANDLE__
√ã
	`WRITE_REG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
KR
, 
IWDG_KEY_WRITE_ACCESS_DISABLE
)

	)

190 
	#IS_IWDG_PRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
IWDG_PRESCALER_4
) || \

191 ((
__PRESCALER__
√ã=Ô£ø
IWDG_PRESCALER_8
) || \

192 ((
__PRESCALER__
√ã=Ô£ø
IWDG_PRESCALER_16
) || \

193 ((
__PRESCALER__
√ã=Ô£ø
IWDG_PRESCALER_32
) || \

194 ((
__PRESCALER__
√ã=Ô£ø
IWDG_PRESCALER_64
) || \

195 ((
__PRESCALER__
√ã=Ô£ø
IWDG_PRESCALER_128
)|| \

196 ((
__PRESCALER__
√ã=Ô£ø
IWDG_PRESCALER_256
))

	)

203 
	#IS_IWDG_RELOAD
(
__RELOAD__
√ã((__RELOAD__√ã<Ô£ø
IWDG_RLR_RL
)

	)

220 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_mmc.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_MMC_H


22 
	#STM32F1xx_HAL_MMC_H


	)

24 #i‚Ä°
def√∂ed
(
SDIO
)

26 #ifde‚Ä°
__Àùlu‚Ä¢lus


31 
	~"¬∞m32f1xx_≈í_sdmmc.h
"

51 
HAL_MMC_STATE_RESET
 = ((
u√∂t32_t
)0x00000000U),

52 
HAL_MMC_STATE_READY
 = ((
u√∂t32_t
)0x00000001U),

53 
HAL_MMC_STATE_TIMEOUT
 = ((
u√∂t32_t
)0x00000002U),

54 
HAL_MMC_STATE_BUSY
 = ((
u√∂t32_t
)0x00000003U),

55 
HAL_MMC_STATE_PROGRAMMING
 = ((
u√∂t32_t
)0x00000004U),

56 
HAL_MMC_STATE_RECEIVING
 = ((
u√∂t32_t
)0x00000005U),

57 
HAL_MMC_STATE_TRANSFER
 = ((
u√∂t32_t
)0x00000006U),

58 
HAL_MMC_STATE_ERROR
 = ((
u√∂t32_t
)0x0000000FU)

59 }
	tHAL_MMC_S√®√£Ty‚â•Def
;

67 
u√∂t32_t
 
	tHAL_MMC_C¬®dS√®√£Ty‚â•Def
;

69 
	#HAL_MMC_CARD_READY
 0x00000001U

	)

70 
	#HAL_MMC_CARD_IDENTIFICATION
 0x00000002U

	)

71 
	#HAL_MMC_CARD_STANDBY
 0x00000003U

	)

72 
	#HAL_MMC_CARD_TRANSFER
 0x00000004U

	)

73 
	#HAL_MMC_CARD_SENDING
 0x00000005U

	)

74 
	#HAL_MMC_CARD_RECEIVING
 0x00000006U

	)

75 
	#HAL_MMC_CARD_PROGRAMMING
 0x00000007U

	)

76 
	#HAL_MMC_CARD_DISCONNECTED
 0x00000008U

	)

77 
	#HAL_MMC_CARD_ERROR
 0x000000FFU

	)

85 
	#MMC_In√¥Ty‚â•Def
 
SDIO_In√¥Ty‚â•Def


	)

86 
	#MMC_Ty‚â•Def
 
SDIO_Ty‚â•Def


	)

93 
u√∂t32_t
 
C¬®dTy‚â•
;

95 
u√∂t32_t
 
C≈ìss
;

97 
u√∂t32_t
 
R√±C¬®dAdd
;

99 
u√∂t32_t
 
BlockNbr
;

101 
u√∂t32_t
 
BlockSize
;

103 
u√∂t32_t
 
LogBlockNbr
;

105 
u√∂t32_t
 
LogBlockSize
;

107 }
	tHAL_MMC_C¬®dInfoTy‚â•Def
;

112 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

113 
__MMC_H‚Ñ¢d√ÄTy‚â•Def


118 
MMC_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

120 
MMC_In√¥Ty‚â•Def
 
In√¥
;

122 
HAL_LockTy‚â•Def
 
Lock
;

124 
u√∂t8_t
 *
pTxBuffP√•
;

126 
u√∂t32_t
 
TxX‚ÄûrSize
;

128 
u√∂t8_t
 *
pRxBuffP√•
;

130 
u√∂t32_t
 
RxX‚ÄûrSize
;

132 
__IO
 
u√∂t32_t
 
C‚ÅÑ√£xt
;

134 
__IO
 
HAL_MMC_S√®√£Ty‚â•Def
 
S√®√£
;

136 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

138 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

140 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

142 
HAL_MMC_C¬®dInfoTy‚â•Def
 
MmcC¬®d
;

144 
u√∂t32_t
 
CSD
[4U];

146 
u√∂t32_t
 
CID
[4U];

148 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

149 (* 
TxC‚àÇtC√Ülback
√ã(
__MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

150 (* 
RxC‚àÇtC√Ülback
√ã(
__MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

151 (* 
E¬∫‚ÄπC√Ülback
√ã(
__MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

152 (* 
Ab‚ÄπtC‚àÇtC√Ülback
√ã(
__MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

154 (* 
M‚Ä¢In√¥C√Ülback
√ã(
__MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

155 (* 
M‚Ä¢DeIn√¥C√Ülback
√ã(
__MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

157 }
	tMMC_H‚Ñ¢d√ÄTy‚â•Def
;

168 
__IO
 
u√∂t8_t
 
CSDS√•uÀò
;

169 
__IO
 
u√∂t8_t
 
SysS‚â•cV√Æsi‚ÅÑ
;

170 
__IO
 
u√∂t8_t
 
Re¬£rved1
;

171 
__IO
 
u√∂t8_t
 
TAAC
;

172 
__IO
 
u√∂t8_t
 
NSAC
;

173 
__IO
 
u√∂t8_t
 
MaxBusClkF¬™c
;

174 
__IO
 
u√∂t16_t
 
C¬®dComdC≈ìs¬£s
;

175 
__IO
 
u√∂t8_t
 
RdBlockL√≠
;

176 
__IO
 
u√∂t8_t
 
P¬®tBlockR√≥d
;

177 
__IO
 
u√∂t8_t
 
WrBlockMi√ülign
;

178 
__IO
 
u√∂t8_t
 
RdBlockMi√ülign
;

179 
__IO
 
u√∂t8_t
 
DSRIm‚àÇ
;

180 
__IO
 
u√∂t8_t
 
Re¬£rved2
;

181 
__IO
 
u√∂t32_t
 
DeviÀöSize
;

182 
__IO
 
u√∂t8_t
 
MaxRdCu¬∫√≠tVDDM√∂
;

183 
__IO
 
u√∂t8_t
 
MaxRdCu¬∫√≠tVDDMax
;

184 
__IO
 
u√∂t8_t
 
MaxWrCu¬∫√≠tVDDM√∂
;

185 
__IO
 
u√∂t8_t
 
MaxWrCu¬∫√≠tVDDMax
;

186 
__IO
 
u√∂t8_t
 
DeviÀöSizeMul
;

187 
__IO
 
u√∂t8_t
 
E√∏¬£GrSize
;

188 
__IO
 
u√∂t8_t
 
E√∏¬£GrMul
;

189 
__IO
 
u√∂t8_t
 
WrPr≈∏eÀòGrSize
;

190 
__IO
 
u√∂t8_t
 
WrPr≈∏eÀòGrE¬´b√Ä
;

191 
__IO
 
u√∂t8_t
 
M‚Ñ¢De√äECC
;

192 
__IO
 
u√∂t8_t
 
WrS‚â•edFaÀò
;

193 
__IO
 
u√∂t8_t
 
MaxWrBlockL√≠
;

194 
__IO
 
u√∂t8_t
 
Wr√¥eBlockPaP¬®t√ºl
;

195 
__IO
 
u√∂t8_t
 
Re¬£rved3
;

196 
__IO
 
u√∂t8_t
 
C‚ÅÑ√£¬°Pr≈∏eÀòA¬µli
;

197 
__IO
 
u√∂t8_t
 
F√ªeF‚Äπm¬©Group
;

198 
__IO
 
u√∂t8_t
 
C‚Ä∫yF≈ìg
;

199 
__IO
 
u√∂t8_t
 
P√ÆmWrPr≈∏eÀò
;

200 
__IO
 
u√∂t8_t
 
TempWrPr≈∏eÀò
;

201 
__IO
 
u√∂t8_t
 
F√ªeF‚Äπm¬©
;

202 
__IO
 
u√∂t8_t
 
ECC
;

203 
__IO
 
u√∂t8_t
 
CSD_CRC
;

204 
__IO
 
u√∂t8_t
 
Re¬£rved4
;

206 }
	tHAL_MMC_C¬®dCSDTy‚â•Def
;

216 
__IO
 
u√∂t8_t
 
M‚Ñ¢u√ÅÀòu¬™rID
;

217 
__IO
 
u√∂t16_t
 
OEM_A¬µliID
;

218 
__IO
 
u√∂t32_t
 
ProdName1
;

219 
__IO
 
u√∂t8_t
 
ProdName2
;

220 
__IO
 
u√∂t8_t
 
ProdRev
;

221 
__IO
 
u√∂t32_t
 
ProdSN
;

222 
__IO
 
u√∂t8_t
 
Re¬£rved1
;

223 
__IO
 
u√∂t16_t
 
M‚Ñ¢u√ÅÀòD¬©e
;

224 
__IO
 
u√∂t8_t
 
CID_CRC
;

225 
__IO
 
u√∂t8_t
 
Re¬£rved2
;

227 }
	tHAL_MMC_C¬®dCIDTy‚â•Def
;

232 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

238 
HAL_MMC_TX_CPLT_CB_ID
 = 0x00U,

239 
HAL_MMC_RX_CPLT_CB_ID
 = 0x01U,

240 
HAL_MMC_ERROR_CB_ID
 = 0x02U,

241 
HAL_MMC_ABORT_CB_ID
 = 0x03U,

243 
HAL_MMC_MSP_INIT_CB_ID
 = 0x10U,

244 
HAL_MMC_MSP_DEINIT_CB_ID
 = 0x11U

245 }
	tHAL_MMC_C√ÜlbackIDTy‚â•Def
;

253 (*
pMMC_C√ÜlbackTy‚â•Def
√ã(
	tMMC_H‚Ñ¢d√ÄTy‚â•Def
 *
	thmmc
);

267 
	#MMC_BLOCKSIZE
 ((
u√∂t32_t
)512U√ã

	)

272 
	#HAL_MMC_ERROR_NONE
 
SDMMC_ERROR_NONE


	)

273 
	#HAL_MMC_ERROR_CMD_CRC_FAIL
 
SDMMC_ERROR_CMD_CRC_FAIL


	)

274 
	#HAL_MMC_ERROR_DATA_CRC_FAIL
 
SDMMC_ERROR_DATA_CRC_FAIL


	)

275 
	#HAL_MMC_ERROR_CMD_RSP_TIMEOUT
 
SDMMC_ERROR_CMD_RSP_TIMEOUT


	)

276 
	#HAL_MMC_ERROR_DATA_TIMEOUT
 
SDMMC_ERROR_DATA_TIMEOUT


	)

277 
	#HAL_MMC_ERROR_TX_UNDERRUN
 
SDMMC_ERROR_TX_UNDERRUN


	)

278 
	#HAL_MMC_ERROR_RX_OVERRUN
 
SDMMC_ERROR_RX_OVERRUN


	)

279 
	#HAL_MMC_ERROR_ADDR_MISALIGNED
 
SDMMC_ERROR_ADDR_MISALIGNED


	)

280 
	#HAL_MMC_ERROR_BLOCK_LEN_ERR
 
SDMMC_ERROR_BLOCK_LEN_ERR


	)

282 
	#HAL_MMC_ERROR_ERASE_SEQ_ERR
 
SDMMC_ERROR_ERASE_SEQ_ERR


	)

283 
	#HAL_MMC_ERROR_BAD_ERASE_PARAM
 
SDMMC_ERROR_BAD_ERASE_PARAM


	)

284 
	#HAL_MMC_ERROR_WRITE_PROT_VIOLATION
 
SDMMC_ERROR_WRITE_PROT_VIOLATION


	)

285 
	#HAL_MMC_ERROR_LOCK_UNLOCK_FAILED
 
SDMMC_ERROR_LOCK_UNLOCK_FAILED


	)

287 
	#HAL_MMC_ERROR_COM_CRC_FAILED
 
SDMMC_ERROR_COM_CRC_FAILED


	)

288 
	#HAL_MMC_ERROR_ILLEGAL_CMD
 
SDMMC_ERROR_ILLEGAL_CMD


	)

289 
	#HAL_MMC_ERROR_CARD_ECC_FAILED
 
SDMMC_ERROR_CARD_ECC_FAILED


	)

290 
	#HAL_MMC_ERROR_CC_ERR
 
SDMMC_ERROR_CC_ERR


	)

291 
	#HAL_MMC_ERROR_GENERAL_UNKNOWN_ERR
 
SDMMC_ERROR_GENERAL_UNKNOWN_ERR


	)

292 
	#HAL_MMC_ERROR_STREAM_READ_UNDERRUN
 
SDMMC_ERROR_STREAM_READ_UNDERRUN


	)

293 
	#HAL_MMC_ERROR_STREAM_WRITE_OVERRUN
 
SDMMC_ERROR_STREAM_WRITE_OVERRUN


	)

294 
	#HAL_MMC_ERROR_CID_CSD_OVERWRITE
 
SDMMC_ERROR_CID_CSD_OVERWRITE


	)

295 
	#HAL_MMC_ERROR_WP_ERASE_SKIP
 
SDMMC_ERROR_WP_ERASE_SKIP


	)

296 
	#HAL_MMC_ERROR_CARD_ECC_DISABLED
 
SDMMC_ERROR_CARD_ECC_DISABLED


	)

297 
	#HAL_MMC_ERROR_ERASE_RESET
 
SDMMC_ERROR_ERASE_RESET


	)

299 
	#HAL_MMC_ERROR_AKE_SEQ_ERR
 
SDMMC_ERROR_AKE_SEQ_ERR


	)

300 
	#HAL_MMC_ERROR_INVALID_VOLTRANGE
 
SDMMC_ERROR_INVALID_VOLTRANGE


	)

301 
	#HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
 
SDMMC_ERROR_ADDR_OUT_OF_RANGE


	)

302 
	#HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE
 
SDMMC_ERROR_REQUEST_NOT_APPLICABLE


	)

303 
	#HAL_MMC_ERROR_PARAM
 
SDMMC_ERROR_INVALID_PARAMETER


	)

304 
	#HAL_MMC_ERROR_UNSUPPORTED_FEATURE
 
SDMMC_ERROR_UNSUPPORTED_FEATURE


	)

305 
	#HAL_MMC_ERROR_BUSY
 
SDMMC_ERROR_BUSY


	)

306 
	#HAL_MMC_ERROR_DMA
 
SDMMC_ERROR_DMA


	)

307 
	#HAL_MMC_ERROR_TIMEOUT
 
SDMMC_ERROR_TIMEOUT


	)

309 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

310 
	#HAL_MMC_ERROR_INVALID_CALLBACK
 
SDMMC_ERROR_INVALID_PARAMETER


	)

319 
	#MMC_CONTEXT_NONE
 ((
u√∂t32_t
)0x00000000U√ã

	)

320 
	#MMC_CONTEXT_READ_SINGLE_BLOCK
 ((
u√∂t32_t
)0x00000001U√ã

	)

321 
	#MMC_CONTEXT_READ_MULTIPLE_BLOCK
 ((
u√∂t32_t
)0x00000002U√ã

	)

322 
	#MMC_CONTEXT_WRITE_SINGLE_BLOCK
 ((
u√∂t32_t
)0x00000010U√ã

	)

323 
	#MMC_CONTEXT_WRITE_MULTIPLE_BLOCK
 ((
u√∂t32_t
)0x00000020U√ã

	)

324 
	#MMC_CONTEXT_IT
 ((
u√∂t32_t
)0x00000008U√ã

	)

325 
	#MMC_CONTEXT_DMA
 ((
u√∂t32_t
)0x00000080U√ã

	)

337 
	#MMC_HIGH_VOLTAGE_RANGE
 0x80FF8000U

	)

338 
	#MMC_DUAL_VOLTAGE_RANGE
 0x80FF8080U

	)

339 
	#eMMC_HIGH_VOLTAGE_RANGE
 0xC0FF8000U

	)

340 
	#eMMC_DUAL_VOLTAGE_RANGE
 0xC0FF8080U

	)

341 
	#MMC_INVALID_VOLTAGE_RANGE
 0x0001FF01U

	)

349 
	#MMC_LOW_CAPACITY_CARD
 ((
u√∂t32_t
)0x00000000U√ã

	)

350 
	#MMC_HIGH_CAPACITY_CARD
 ((
u√∂t32_t
)0x00000001U√ã

	)

369 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

370 
	#__HAL_MMC_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

371 (
__HANDLE__
)->
S√®√£
 = 
HAL_MMC_STATE_RESET
; \

372 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

373 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

374 } 0)

	)

376 
	#__HAL_MMC_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_MMC_STATE_RESET
)

	)

383 
	#__HAL_MMC_ENABLE
(
__HANDLE__
√ã
	`__SDIO_ENABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

389 
	#__HAL_MMC_DISABLE
(
__HANDLE__
√ã
	`__SDIO_DISABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

395 
	#__HAL_MMC_DMA_ENABLE
(
__HANDLE__
√ã
	`__SDIO_DMA_ENABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

401 
	#__HAL_MMC_DMA_DISABLE
(
__HANDLE__
√ã
	`__SDIO_DMA_DISABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

432 
	#__HAL_MMC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_ENABLE_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

463 
	#__HAL_MMC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_DISABLE_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

494 
	#__HAL_MMC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã
	`__SDIO_GET_FLAG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__FLAG__))

	)

514 
	#__HAL_MMC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã
	`__SDIO_CLEAR_FLAG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__FLAG__))

	)

545 
	#__HAL_MMC_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_GET_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

569 
	#__HAL_MMC_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_CLEAR_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

583 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_In√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

584 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_In√¥C¬®d
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

585 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_DeIn√¥
 (
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

586 
HAL_MMC_M‚Ä¢In√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

587 
HAL_MMC_M‚Ä¢DeIn√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

597 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_R√≥dBlocks
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
);

598 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_Wr√¥eBlocks
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
);

599 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_E√∏¬£
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t32_t
 
BlockS√®œÄAdd
, u√∂t32_√†
BlockEndAdd
);

601 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_R√≥dBlocks_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

602 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_Wr√¥eBlocks_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

604 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_R√≥dBlocks_DMA
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

605 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_Wr√¥eBlocks_DMA
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

607 
HAL_MMC_IRQH‚Ñ¢d√Är
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

610 
HAL_MMC_TxC‚àÇtC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

611 
HAL_MMC_RxC‚àÇtC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

612 
HAL_MMC_E¬∫‚ÄπC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

613 
HAL_MMC_Ab‚ÄπtC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

615 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

617 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_Regi¬∞√ÆC√Ülback
 (
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
, 
pMMC_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

618 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_UnRegi¬∞√ÆC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
);

627 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_C‚ÅÑfigWideBusO‚â•√∏ti‚ÅÑ
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t32_t
 
WideMode
);

635 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
HAL_MMC_G√´C¬®dS√®√£
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

636 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_G√´C¬®dCID
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C¬®dCIDTy‚â•Def
 *
pCID
);

637 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_G√´C¬®dCSD
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C¬®dCSDTy‚â•Def
 *
pCSD
);

638 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_G√´C¬®dInfo
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C¬®dInfoTy‚â•Def
 *
pC¬®dInfo
);

646 
HAL_MMC_S√®√£Ty‚â•Def
 
HAL_MMC_G√´S√®√£
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

647 
u√∂t32_t
 
HAL_MMC_G√´E¬∫‚Äπ
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

655 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_Ab‚Äπt
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

656 
HAL_S√®tusTy‚â•Def
 
HAL_MMC_Ab‚Äπt_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

737 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_nand.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_NAND_H


22 
	#STM32F1xx_HAL_NAND_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

31 
	~"¬∞m32f1xx_≈í_fsmc.h
"

52 
HAL_NAND_STATE_RESET
 = 0x00U,

53 
HAL_NAND_STATE_READY
 = 0x01U,

54 
HAL_NAND_STATE_BUSY
 = 0x02U,

55 
HAL_NAND_STATE_ERROR
 = 0x03U

56 } 
	tHAL_NAND_S√®√£Ty‚â•Def
;

65 
u√∂t8_t
 
	mMak√Æ_Id
;

67 
u√∂t8_t
 
	mDeviÀö_Id
;

69 
u√∂t8_t
 
	mTh√∫d_Id
;

71 
u√∂t8_t
 
	mFouœÄh_Id
;

72 } 
	tNAND_IDTy‚â•Def
;

79 
u√∂t16_t
 
	mPage
;

81 
u√∂t16_t
 
	mP≈ì‚àö
;

83 
u√∂t16_t
 
	mBlock
;

85 } 
	tNAND_Add¬™ssTy‚â•Def
;

92 
u√∂t32_t
 
	mPageSize
;

95 
u√∂t32_t
 
	mS‚àë¬™A¬™aSize
;

98 
u√∂t32_t
 
	mBlockSize
;

100 
u√∂t32_t
 
	mBlockNbr
;

102 
u√∂t32_t
 
	mP≈ì‚àöNbr
;

104 
u√∂t32_t
 
	mP≈ì‚àöSize
;

106 
FunÀòi‚ÅÑ√ÜS√®√£
 
	mEx√•aComm‚Ñ¢dE¬´b√Ä
;

112 } 
	tNAND_DeviÀöC‚ÅÑfigTy‚â•Def
;

117 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

118 
	g__NAND_H‚Ñ¢d√ÄTy‚â•Def


123 
FSMC_NAND_Ty‚â•Def
 *
	gIn¬∞‚Ñ¢Àö
;

125 
FSMC_NAND_In√¥Ty‚â•Def
 
	gIn√¥
;

127 
HAL_LockTy‚â•Def
 
	gLock
;

129 
__IO
 
HAL_NAND_S√®√£Ty‚â•Def
 
	gS√®√£
;

131 
NAND_DeviÀöC‚ÅÑfigTy‚â•Def
 
	gC‚ÅÑfig
;

133 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

134 (* 
	gM‚Ä¢In√¥C√Ülback
)(
__NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
	gh¬´nd
);

135 (* 
	gM‚Ä¢DeIn√¥C√Ülback
)(
__NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
	gh¬´nd
);

136 (* 
	gItC√Ülback
)(
__NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
	gh¬´nd
);

138 } 
	tNAND_H‚Ñ¢d√ÄTy‚â•Def
;

140 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

146 
	mHAL_NAND_MSP_INIT_CB_ID
 = 0x00U,

147 
	mHAL_NAND_MSP_DEINIT_CB_ID
 = 0x01U,

148 
	mHAL_NAND_IT_CB_ID
 = 0x02U

149 } 
	tHAL_NAND_C√ÜlbackIDTy‚â•Def
;

154 (*
	tpNAND_C√ÜlbackTy‚â•Def
)(
	tNAND_H‚Ñ¢d√ÄTy‚â•Def
 *
	th¬´nd
);

171 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

172 
	#__HAL_NAND_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

173 (
__HANDLE__
)->
S√®√£
 = 
HAL_NAND_STATE_RESET
; \

174 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

175 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

176 
	}
} 0)

	)

178 
	#__HAL_NAND_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_NAND_STATE_RESET
)

	)

195 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_In√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
ComS‚àëÀö_Tim√∂g
,

196 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
A√¢S‚àëÀö_Tim√∂g
);

197 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_DeIn√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

199 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_C‚ÅÑfigDeviÀö
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_DeviÀöC‚ÅÑfigTy‚â•Def
 *
pDeviÀöC‚ÅÑfig
);

201 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_R√≥d_ID
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_IDTy‚â•Def
 *
pNAND_ID
);

203 
HAL_NAND_M‚Ä¢In√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

204 
HAL_NAND_M‚Ä¢DeIn√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

205 
HAL_NAND_IRQH‚Ñ¢d√Är
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

206 
HAL_NAND_ITC√Ülback
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

217 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_Re¬£t
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

219 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_R√≥d_Page_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pBuf‚Äûr
,

220 
u√∂t32_t
 
NumPageToR√≥d
);

221 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_Wr√¥e_Page_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pBuf‚Äûr
,

222 
u√∂t32_t
 
NumPageToWr√¥e
);

223 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_R√≥d_S‚àë¬™A¬™a_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

224 
u√∂t8_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aToR√≥d
);

225 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_Wr√¥e_S‚àë¬™A¬™a_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

226 
u√∂t8_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aTowr√¥e
);

228 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_R√≥d_Page_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pBuf‚Äûr
,

229 
u√∂t32_t
 
NumPageToR√≥d
);

230 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_Wr√¥e_Page_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pBuf‚Äûr
,

231 
u√∂t32_t
 
NumPageToWr√¥e
);

232 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_R√≥d_S‚àë¬™A¬™a_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

233 
u√∂t16_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aToR√≥d
);

234 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_Wr√¥e_S‚àë¬™A¬™a_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

235 
u√∂t16_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aTowr√¥e
);

237 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_E√∏¬£_Block
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
);

239 
u√∂t32_t
 
HAL_NAND_Add¬™ss_Inc
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
);

241 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

243 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_Regi¬∞√ÆC√Ülback
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
HAL_NAND_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

244 
pNAND_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

245 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_UnRegi¬∞√ÆC√Ülback
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
HAL_NAND_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
);

257 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_ECC_E¬´b√Ä
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

258 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_ECC_Di√üb√Ä
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

259 
HAL_S√®tusTy‚â•Def
 
HAL_NAND_G√´ECC
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
u√∂t32_t
 *
ECCv√Ü
, u√∂t32_√†
Timeout
);

269 
HAL_NAND_S√®√£Ty‚â•Def
 
HAL_NAND_G√´S√®√£
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

270 
u√∂t32_t
 
HAL_NAND_R√≥d_S√®tus
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
);

285 
	#NAND_DEVICE1
 0x70000000UL

	)

286 
	#NAND_DEVICE2
 0x80000000UL

	)

287 
	#NAND_WRITE_TIMEOUT
 0x01000000UL

	)

289 
	#CMD_AREA
 (1UL<<16U√ã

	)

290 
	#ADDR_AREA
 (1UL<<17U√ã

	)

292 
	#NAND_CMD_AREA_A
 ((
u√∂t8_t
)0x00)

	)

293 
	#NAND_CMD_AREA_B
 ((
u√∂t8_t
)0x01)

	)

294 
	#NAND_CMD_AREA_C
 ((
u√∂t8_t
)0x50)

	)

295 
	#NAND_CMD_AREA_TRUE1
 ((
u√∂t8_t
)0x30)

	)

297 
	#NAND_CMD_WRITE0
 ((
u√∂t8_t
)0x80)

	)

298 
	#NAND_CMD_WRITE_TRUE1
 ((
u√∂t8_t
)0x10)

	)

299 
	#NAND_CMD_ERASE0
 ((
u√∂t8_t
)0x60)

	)

300 
	#NAND_CMD_ERASE1
 ((
u√∂t8_t
)0xD0)

	)

301 
	#NAND_CMD_READID
 ((
u√∂t8_t
)0x90)

	)

302 
	#NAND_CMD_STATUS
 ((
u√∂t8_t
)0x70)

	)

303 
	#NAND_CMD_LOCK_STATUS
 ((
u√∂t8_t
)0x7A)

	)

304 
	#NAND_CMD_RESET
 ((
u√∂t8_t
)0xFF)

	)

307 
	#NAND_VALID_ADDRESS
 0x00000100UL

	)

308 
	#NAND_INVALID_ADDRESS
 0x00000200UL

	)

309 
	#NAND_TIMEOUT_ERROR
 0x00000400UL

	)

310 
	#NAND_BUSY
 0x00000000UL

	)

311 
	#NAND_ERROR
 0x00000001UL

	)

312 
	#NAND_READY
 0x00000040UL

	)

328 
	#ARRAY_ADDRESS
(
__ADDRESS__
 , 
__HANDLE__
√ã((__ADDRESS__)->
Page
 + \

329 (((
__ADDRESS__
)->
Block
 + (((__ADDRESS__)->
P≈ì‚àö
√ã* ((
__HANDLE__
)->
C‚ÅÑfig
.
P≈ì‚àöSize
)))* ((__HANDLE__)->C‚ÅÑfig.
BlockSize
)))

	)

336 
	#COLUMN_ADDRESS
‚Äì
__HANDLE__
√ã((__HANDLE__)->
C‚ÅÑfig
.
PageSize
)

	)

343 
	#ADDR_1ST_CYCLE
(
__ADDRESS__
√ã(
u√∂t8_t
)(__ADDRESS__√ã

	)

344 
	#ADDR_2ND_CYCLE
(
__ADDRESS__
√ã(
u√∂t8_t
)((__ADDRESS__√ã>> 8√ã

	)

345 
	#ADDR_3RD_CYCLE
(
__ADDRESS__
√ã(
u√∂t8_t
)((__ADDRESS__√ã>> 16√ã

	)

346 
	#ADDR_4TH_CYCLE
(
__ADDRESS__
√ã(
u√∂t8_t
)((__ADDRESS__√ã>> 24√ã

	)

353 
	#COLUMN_1ST_CYCLE
(
__ADDRESS__
√ã(
u√∂t8_t
)((__ADDRESS__√ã& 0xFFU√ã

	)

354 
	#COLUMN_2ND_CYCLE
(
__ADDRESS__
√ã(
u√∂t8_t
)((__ADDRESS__√ã>> 8√ã

	)

374 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_nor.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_NOR_H


22 
	#STM32F1xx_HAL_NOR_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
 
FSMC_BANK1


31 
	~"¬∞m32f1xx_≈í_fsmc.h
"

51 
HAL_NOR_STATE_RESET
 = 0x00U,

52 
HAL_NOR_STATE_READY
 = 0x01U,

53 
HAL_NOR_STATE_BUSY
 = 0x02U,

54 
HAL_NOR_STATE_ERROR
 = 0x03U,

55 
HAL_NOR_STATE_PROTECTED
 = 0x04U

56 } 
	tHAL_NOR_S√®√£Ty‚â•Def
;

63 
	mHAL_NOR_STATUS_SUCCESS
 = 0U,

64 
	mHAL_NOR_STATUS_ONGOING
,

65 
	mHAL_NOR_STATUS_ERROR
,

66 
	mHAL_NOR_STATUS_TIMEOUT


67 } 
	tHAL_NOR_S√®tusTy‚â•Def
;

74 
u√∂t16_t
 
	mM‚Ñ¢u√ÅÀòu¬™r_Code
;

76 
u√∂t16_t
 
	mDeviÀö_Code1
;

78 
u√∂t16_t
 
	mDeviÀö_Code2
;

80 
u√∂t16_t
 
	mDeviÀö_Code3
;

84 } 
	tNOR_IDTy‚â•Def
;

95 
u√∂t16_t
 
	mCFI_1
;

97 
u√∂t16_t
 
	mCFI_2
;

99 
u√∂t16_t
 
	mCFI_3
;

101 
u√∂t16_t
 
	mCFI_4
;

102 } 
	tNOR_CFITy‚â•Def
;

107 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

108 
	g__NOR_H‚Ñ¢d√ÄTy‚â•Def


114 
FSMC_NORSRAM_Ty‚â•Def
 *
	gIn¬∞‚Ñ¢Àö
;

116 
FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 *
	gEx√£nded
;

118 
FSMC_NORSRAM_In√¥Ty‚â•Def
 
	gIn√¥
;

120 
HAL_LockTy‚â•Def
 
	gLock
;

122 
__IO
 
HAL_NOR_S√®√£Ty‚â•Def
 
	gS√®√£
;

124 
u√∂t32_t
 
	gComm‚Ñ¢dS√´
;

126 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

127 (* 
	gM‚Ä¢In√¥C√Ülback
)(
__NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghn‚Äπ
);

128 (* 
	gM‚Ä¢DeIn√¥C√Ülback
)(
__NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghn‚Äπ
);

130 } 
	tNOR_H‚Ñ¢d√ÄTy‚â•Def
;

132 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

138 
	mHAL_NOR_MSP_INIT_CB_ID
 = 0x00U,

139 
	mHAL_NOR_MSP_DEINIT_CB_ID
 = 0x01U

140 } 
	tHAL_NOR_C√ÜlbackIDTy‚â•Def
;

145 (*
	tpNOR_C√ÜlbackTy‚â•Def
)(
	tNOR_H‚Ñ¢d√ÄTy‚â•Def
 *
	thn‚Äπ
);

160 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

161 
	#__HAL_NOR_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

162 (
__HANDLE__
)->
S√®√£
 = 
HAL_NOR_STATE_RESET
; \

163 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

164 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

165 
	}
} 0)

	)

167 
	#__HAL_NOR_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_NOR_STATE_RESET
)

	)

183 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_In√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
,

184 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
ExtTim√∂g
);

185 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_DeIn√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

186 
HAL_NOR_M‚Ä¢In√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

187 
HAL_NOR_M‚Ä¢DeIn√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

188 
HAL_NOR_M‚Ä¢Wa√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
Timeout
);

198 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_R√≥d_ID
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
NOR_IDTy‚â•Def
 *
pNOR_ID
);

199 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_R√´u‚à´ToR√≥dMode
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

200 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_R√≥d
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
);

201 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_Prog√∏m
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
);

203 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_R√≥dBuf‚Äûr
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
uwAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
,

204 
u√∂t32_t
 
uwBuf‚ÄûrSize
);

205 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_Prog√∏mBuf‚Äûr
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
uwAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
,

206 
u√∂t32_t
 
uwBuf‚ÄûrSize
);

208 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_E√∏¬£_Block
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
BlockAdd¬™ss
, u√∂t32_√†
Add¬™ss
);

209 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_E√∏¬£_Ch√π
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
Add¬™ss
);

210 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_R√≥d_CFI
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
NOR_CFITy‚â•Def
 *
pNOR_CFI
);

212 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

214 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_Regi¬∞√ÆC√Ülback
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
HAL_NOR_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

215 
pNOR_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

216 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_UnRegi¬∞√ÆC√Ülback
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
HAL_NOR_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
);

227 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

228 
HAL_S√®tusTy‚â•Def
 
HAL_NOR_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

238 
HAL_NOR_S√®√£Ty‚â•Def
 
HAL_NOR_G√´S√®√£
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
);

239 
HAL_NOR_S√®tusTy‚â•Def
 
HAL_NOR_G√´S√®tus
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
Add¬™ss
, u√∂t32_√†
Timeout
);

255 
	#MC_ADDRESS
 ((
u√∂t16_t
)0x0000)

	)

256 
	#DEVICE_CODE1_ADDR
 ((
u√∂t16_t
)0x0001)

	)

257 
	#DEVICE_CODE2_ADDR
 ((
u√∂t16_t
)0x000E)

	)

258 
	#DEVICE_CODE3_ADDR
 ((
u√∂t16_t
)0x000F)

	)

261 
	#CFI1_ADDRESS
 ((
u√∂t16_t
)0x61)

	)

262 
	#CFI2_ADDRESS
 ((
u√∂t16_t
)0x62)

	)

263 
	#CFI3_ADDRESS
 ((
u√∂t16_t
)0x63)

	)

264 
	#CFI4_ADDRESS
 ((
u√∂t16_t
)0x64)

	)

267 
	#NOR_TMEOUT
 ((
u√∂t16_t
)0xFFFF)

	)

270 
	#NOR_MEMORY_8B
 ((
u√∂t8_t
)0x0)

	)

271 
	#NOR_MEMORY_16B
 ((
u√∂t8_t
)0x1)

	)

274 
	#NOR_MEMORY_ADRESS1
 (0x60000000U)

	)

275 
	#NOR_MEMORY_ADRESS2
 (0x64000000U)

	)

276 
	#NOR_MEMORY_ADRESS3
 (0x68000000U)

	)

277 
	#NOR_MEMORY_ADRESS4
 (0x6C000000U)

	)

293 
	#NOR_ADDR_SHIFT
(
__NOR_ADDRESS
, 
__NOR_MEMORY_WIDTH_
, 
__ADDRESS__
) \

294 ((
u√∂t32_t
)(((
__NOR_MEMORY_WIDTH_
√ã=Ô£ø
NOR_MEMORY_16B
)? \

295 ((
u√∂t32_t
)((
__NOR_ADDRESS
√ã+ (2U * (
__ADDRESS__
)))): \

296 ((
u√∂t32_t
)((
__NOR_ADDRESS
√ã+ (
__ADDRESS__
)))))

	)

304 
	#NOR_WRITE
(
__ADDRESS__
, 
__DATA__
) do{ \

305 (*(
__IO
 
u√∂t16_t
 *)((
u√∂t32_t
)(
__ADDRESS__
)√ãÔ£ø(
__DATA__
)); \

306 
	`__DSB
(); \

307 } 0)

	)

323 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pccard.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_PCCARD_H


22 
	#STM32F1xx_HAL_PCCARD_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

31 
	~"¬∞m32f1xx_≈í_fsmc.h
"

51 
HAL_PCCARD_STATE_RESET
 = 0x00U,

52 
HAL_PCCARD_STATE_READY
 = 0x01U,

53 
HAL_PCCARD_STATE_BUSY
 = 0x02U,

54 
HAL_PCCARD_STATE_ERROR
 = 0x04U

55 } 
	tHAL_PCCARD_S√®√£Ty‚â•Def
;

59 
	mHAL_PCCARD_STATUS_SUCCESS
 = 0U,

60 
	mHAL_PCCARD_STATUS_ONGOING
,

61 
	mHAL_PCCARD_STATUS_ERROR
,

62 
	mHAL_PCCARD_STATUS_TIMEOUT


63 } 
	tHAL_PCCARD_S√®tusTy‚â•Def
;

68 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

69 
	g__PCCARD_H‚Ñ¢d√ÄTy‚â•Def


74 
FSMC_PCCARD_Ty‚â•Def
 *
	gIn¬∞‚Ñ¢Àö
;

76 
FSMC_PCCARD_In√¥Ty‚â•Def
 
	gIn√¥
;

78 
__IO
 
HAL_PCCARD_S√®√£Ty‚â•Def
 
	gS√®√£
;

80 
HAL_LockTy‚â•Def
 
	gLock
;

82 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

83 (* 
	gM‚Ä¢In√¥C√Ülback
)(
__PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghpcÀárd
);

84 (* 
	gM‚Ä¢DeIn√¥C√Ülback
)(
__PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghpcÀárd
);

85 (* 
	gItC√Ülback
)(
__PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghpcÀárd
);

87 } 
	tPCCARD_H‚Ñ¢d√ÄTy‚â•Def
;

89 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

95 
	mHAL_PCCARD_MSP_INIT_CB_ID
 = 0x00U,

96 
	mHAL_PCCARD_MSP_DEINIT_CB_ID
 = 0x01U,

97 
	mHAL_PCCARD_IT_CB_ID
 = 0x02U

98 } 
	tHAL_PCCARD_C√ÜlbackIDTy‚â•Def
;

103 (*
	tpPCCARD_C√ÜlbackTy‚â•Def
)(
	tPCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thpcÀárd
);

118 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

119 
	#__HAL_PCCARD_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

120 (
__HANDLE__
)->
S√®√£
 = 
HAL_PCCARD_STATE_RESET
; \

121 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

122 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

123 
	}
} 0)

	)

125 
	#__HAL_PCCARD_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_PCCARD_STATE_RESET
)

	)

140 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_In√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
ComS‚àëÀöTim√∂g
,

141 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
A√¢S‚àëÀöTim√∂g
, FSMC_NAND_PCC_Tim√∂gTy‚â•De‚Ä°*
IOS‚àëÀöTim√∂g
);

142 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_DeIn√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

143 
HAL_PCCARD_M‚Ä¢In√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

144 
HAL_PCCARD_M‚Ä¢DeIn√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

153 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_R√≥d_ID
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t8_t
 
Com‚àëÀòF≈ìsh_ID
[], u√∂t8_√†*
pS√®tus
);

154 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_Wr√¥e_SeÀò‚Äπ
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t16_t
 *
pBuf‚Äûr
, u√∂t16_√†
SeÀò‚ÄπAdd¬™ss
,

155 
u√∂t8_t
 *
pS√®tus
);

156 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_R√≥d_SeÀò‚Äπ
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t16_t
 *
pBuf‚Äûr
, u√∂t16_√†
SeÀò‚ÄπAdd¬™ss
,

157 
u√∂t8_t
 *
pS√®tus
);

158 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_E√∏¬£_SeÀò‚Äπ
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t16_t
 
SeÀò‚ÄπAdd¬™ss
, 
u√∂t8_t
 *
pS√®tus
);

159 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_Re¬£t
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

160 
HAL_PCCARD_IRQH‚Ñ¢d√Är
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

161 
HAL_PCCARD_ITC√Ülback
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

163 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

165 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_Regi¬∞√ÆC√Ülback
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
HAL_PCCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

166 
pPCCARD_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

167 
HAL_S√®tusTy‚â•Def
 
HAL_PCCARD_UnRegi¬∞√ÆC√Ülback
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
,

168 
HAL_PCCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
);

178 
HAL_PCCARD_S√®√£Ty‚â•Def
 
HAL_PCCARD_G√´S√®√£
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

179 
HAL_PCCARD_S√®tusTy‚â•Def
 
HAL_PCCARD_G√´S√®tus
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

180 
HAL_PCCARD_S√®tusTy‚â•Def
 
HAL_PCCARD_R√≥dS√®tus
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
);

194 
	#PCCARD_DEVICE_ADDRESS
 0x90000000U

	)

195 
	#PCCARD_ATTRIBUTE_SPACE_ADDRESS
 0x98000000U

	)

196 
	#PCCARD_COMMON_SPACE_ADDRESS
 
PCCARD_DEVICE_ADDRESS


	)

197 
	#PCCARD_IO_SPACE_ADDRESS
 0x9C000000U

	)

198 
	#PCCARD_IO_SPACE_PRIMARY_ADDR
 0x9C0001F0U

	)

201 
	#ATA_DATA
 ((
u√∂t8_t
)0x00√ã

	)

202 
	#ATA_SECTOR_COUNT
 ((
u√∂t8_t
)0x02√ã

	)

203 
	#ATA_SECTOR_NUMBER
 ((
u√∂t8_t
)0x03√ã

	)

204 
	#ATA_CYLINDER_LOW
 ((
u√∂t8_t
)0x04√ã

	)

205 
	#ATA_CYLINDER_HIGH
 ((
u√∂t8_t
)0x05√ã

	)

206 
	#ATA_CARD_HEAD
 ((
u√∂t8_t
)0x06√ã

	)

207 
	#ATA_STATUS_CMD
 ((
u√∂t8_t
)0x07√ã

	)

208 
	#ATA_STATUS_CMD_ALTERNATE
 ((
u√∂t8_t
)0x0E√ã

	)

209 
	#ATA_COMMON_DATA_AREA
 ((
u√∂t16_t
)0x0400√ã

	)

210 
	#ATA_CARD_CONFIGURATION
 ((
u√∂t16_t
)0x0202√ã

	)

213 
	#ATA_READ_SECTOR_CMD
 ((
u√∂t8_t
)0x20)

	)

214 
	#ATA_WRITE_SECTOR_CMD
 ((
u√∂t8_t
)0x30)

	)

215 
	#ATA_ERASE_SECTOR_CMD
 ((
u√∂t8_t
)0xC0)

	)

216 
	#ATA_IDENTIFY_CMD
 ((
u√∂t8_t
)0xEC)

	)

219 
	#PCCARD_TIMEOUT_ERROR
 ((
u√∂t8_t
)0x60)

	)

220 
	#PCCARD_BUSY
 ((
u√∂t8_t
)0x80)

	)

221 
	#PCCARD_PROGR
 ((
u√∂t8_t
)0x01)

	)

222 
	#PCCARD_READY
 ((
u√∂t8_t
)0x40)

	)

224 
	#PCCARD_SECTOR_SIZE
 255U

	)

230 
	#HAL_CF_In√¥
 
HAL_PCCARD_In√¥


	)

231 
	#HAL_CF_DeIn√¥
 
HAL_PCCARD_DeIn√¥


	)

232 
	#HAL_CF_M‚Ä¢In√¥
 
HAL_PCCARD_M‚Ä¢In√¥


	)

233 
	#HAL_CF_M‚Ä¢DeIn√¥
 
HAL_PCCARD_M‚Ä¢DeIn√¥


	)

235 
	#HAL_CF_R√≥d_ID
 
HAL_PCCARD_R√≥d_ID


	)

236 
	#HAL_CF_Wr√¥e_SeÀò‚Äπ
 
HAL_PCCARD_Wr√¥e_SeÀò‚Äπ


	)

237 
	#HAL_CF_R√≥d_SeÀò‚Äπ
 
HAL_PCCARD_R√≥d_SeÀò‚Äπ


	)

238 
	#HAL_CF_E√∏¬£_SeÀò‚Äπ
 
HAL_PCCARD_E√∏¬£_SeÀò‚Äπ


	)

239 
	#HAL_CF_Re¬£t
 
HAL_PCCARD_Re¬£t


	)

240 
	#HAL_CF_IRQH‚Ñ¢d√Är
 
HAL_PCCARD_IRQH‚Ñ¢d√Är


	)

241 
	#HAL_CF_ITC√Ülback
 
HAL_PCCARD_ITC√Ülback


	)

243 
	#HAL_CF_G√´S√®√£
 
HAL_PCCARD_G√´S√®√£


	)

244 
	#HAL_CF_G√´S√®tus
 
HAL_PCCARD_G√´S√®tus


	)

245 
	#HAL_CF_R√≥dS√®tus
 
HAL_PCCARD_R√≥dS√®tus


	)

247 
	#HAL_CF_STATUS_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

248 
	#HAL_CF_STATUS_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

249 
	#HAL_CF_STATUS_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

250 
	#HAL_CF_STATUS_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

251 
	#HAL_CF_S√®tusTy‚â•Def
 
HAL_PCCARD_S√®tusTy‚â•Def


	)

253 
	#CF_DEVICE_ADDRESS
 
PCCARD_DEVICE_ADDRESS


	)

254 
	#CF_ATTRIBUTE_SPACE_ADDRESS
 
PCCARD_ATTRIBUTE_SPACE_ADDRESS


	)

255 
	#CF_COMMON_SPACE_ADDRESS
 
PCCARD_COMMON_SPACE_ADDRESS


	)

256 
	#CF_IO_SPACE_ADDRESS
 
PCCARD_IO_SPACE_ADDRESS


	)

257 
	#CF_IO_SPACE_PRIMARY_ADDR
 
PCCARD_IO_SPACE_PRIMARY_ADDR


	)

259 
	#CF_TIMEOUT_ERROR
 
PCCARD_TIMEOUT_ERROR


	)

260 
	#CF_BUSY
 
PCCARD_BUSY


	)

261 
	#CF_PROGR
 
PCCARD_PROGR


	)

262 
	#CF_READY
 
PCCARD_READY


	)

264 
	#CF_SECTOR_SIZE
 
PCCARD_SECTOR_SIZE


	)

278 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_PCD_H


22 
	#STM32F1xx_HAL_PCD_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_≈í_usb.h
"

31 #i‚Ä°
def√∂ed
 (
USB
√ã|| def√∂ed (
USB_OTG_FS
)

51 
HAL_PCD_STATE_RESET
 = 0x00,

52 
HAL_PCD_STATE_READY
 = 0x01,

53 
HAL_PCD_STATE_ERROR
 = 0x02,

54 
HAL_PCD_STATE_BUSY
 = 0x03,

55 
HAL_PCD_STATE_TIMEOUT
 = 0x04

56 } 
	tPCD_S√®√£Ty‚â•Def
;

61 
LPM_L0
 = 0x00,

62 
LPM_L1
 = 0x01,

63 
LPM_L2
 = 0x02,

64 
LPM_L3
 = 0x03,

65 } 
	tPCD_LPM_S√®√£Ty‚â•Def
;

69 
PCD_LPM_L0_ACTIVE
 = 0x00,

70 
PCD_LPM_L1_ACTIVE
 = 0x01,

71 } 
	tPCD_LPM_MsgTy‚â•Def
;

75 
PCD_BCD_ERROR
 = 0xFF,

76 
PCD_BCD_CONTACT_DETECTION
 = 0xFE,

77 
PCD_BCD_STD_DOWNSTREAM_PORT
 = 0xFD,

78 
PCD_BCD_CHARGING_DOWNSTREAM_PORT
 = 0xFC,

79 
PCD_BCD_DEDICATED_CHARGING_PORT
 = 0xFB,

80 
PCD_BCD_DISCOVERY_COMPLETED
 = 0x00,

82 } 
	tPCD_BCD_MsgTy‚â•Def
;

84 #i‚Ä°
def√∂ed
 (
USB
)

87 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

88 
USB_OTG_Glob√ÜTy‚â•Def
 
	tPCD_Ty‚â•Def
;

89 
USB_OTG_CfgTy‚â•Def
 
	tPCD_In√¥Ty‚â•Def
;

90 
USB_OTG_EPTy‚â•Def
 
	tPCD_EPTy‚â•Def
;

92 #i‚Ä°
def√∂ed
 (
USB
)

93 
USB_Ty‚â•Def
 
	tPCD_Ty‚â•Def
;

94 
USB_CfgTy‚â•Def
 
	tPCD_In√¥Ty‚â•Def
;

95 
USB_EPTy‚â•Def
 
	tPCD_EPTy‚â•Def
;

101 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

102 
__PCD_H‚Ñ¢d√ÄTy‚â•Def


107 
PCD_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

108 
PCD_In√¥Ty‚â•Def
 
In√¥
;

109 
__IO
 
u√∂t8_t
 
USB_Add¬™ss
;

110 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

111 
PCD_EPTy‚â•Def
 
IN_√Ø
[16];

112 
PCD_EPTy‚â•Def
 
OUT_√Ø
[16];

114 #i‚Ä°
def√∂ed
 (
USB
)

115 
PCD_EPTy‚â•Def
 
IN_√Ø
[8];

116 
PCD_EPTy‚â•Def
 
OUT_√Ø
[8];

118 
HAL_LockTy‚â•Def
 
Lock
;

119 
__IO
 
PCD_S√®√£Ty‚â•Def
 
S√®√£
;

120 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

121 
u√∂t32_t
 
S√´up
[12];

122 
PCD_LPM_S√®√£Ty‚â•Def
 
LPM_S√®√£
;

123 
u√∂t32_t
 
BESL
;

125 *
pD¬©a
;

127 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

128 (* 
SOFC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

129 (* 
S√´upS√®geC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

130 (* 
Re¬£tC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

131 (* 
Su‚Ä¢√≠dC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

132 (* 
ResumeC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

133 (* 
C‚ÅÑ‚àöÀòC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

134 (* 
Disc‚ÅÑ‚àöÀòC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

136 (* 
D¬©aOutS√®geC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

137 (* 
D¬©aInS√®geC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

138 (* 
ISOOUTIncom‚àÇ√´eC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

139 (* 
ISOINIncom‚àÇ√´eC√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

141 (* 
M‚Ä¢In√¥C√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

142 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

144 } 
	tPCD_H‚Ñ¢d√ÄTy‚â•Def
;

151 
	~"¬∞m32f1xx_h√Ü_pcd_ex.h
"

161 
	#PCD_SPEED_FULL
 
USBD_FS_SPEED


	)

169 
	#PCD_PHY_ULPI
 1U

	)

170 
	#PCD_PHY_EMBEDDED
 2U

	)

171 
	#PCD_PHY_UTMI
 3U

	)

180 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

181 
	#HAL_PCD_ERROR_INVALID_CALLBACK
 (0x00000010U√ã

	)

197 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

198 
	#__HAL_PCD_ENABLE
(
__HANDLE__
√ã()
	`USB_E¬´b√ÄGlob√ÜI¬°
 ((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

199 
	#__HAL_PCD_DISABLE
(
__HANDLE__
√ã()
	`USB_Di√üb√ÄGlob√ÜI¬°
 ((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

201 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
√ã((
	`USB_R√≥dI¬°√Æru¬±s
((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã& (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__))

	)

202 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
GINTSTS
√ã&Ô£ø(__INTERRUPT__))

	)

203 
	#__HAL_PCD_IS_INVALID_INTERRUPT
(
__HANDLE__
√ã(
	`USB_R√≥dI¬°√Æru¬±s
((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã=Ô£ø0U)

	)

206 
	#__HAL_PCD_UNGATE_PHYCLOCK
(
__HANDLE__
√ã*(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã+ 
USB_OTG_PCGCCTL_BASE
√ã&Ô£ø~(
USB_OTG_PCGCCTL_STOPCLK
)

	)

208 
	#__HAL_PCD_GATE_PHYCLOCK
(
__HANDLE__
√ã*(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã+ 
USB_OTG_PCGCCTL_BASE
√ã|Ô£ø
USB_OTG_PCGCCTL_STOPCLK


	)

210 
	#__HAL_PCD_IS_PHY_SUSPENDED
(
__HANDLE__
√ã((*(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã+ 
USB_OTG_PCGCCTL_BASE
)√ã& 0x10U)

	)

212 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT
(√ã
EXTI
->
IMR
 |Ô£ø
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

213 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT
(√ã
EXTI
->
IMR
 &Ô£ø~(
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

214 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG
(√ã
EXTI
->
PR
 & (
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

215 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
(√ã
EXTI
->
PR
 = 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

217 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE
() \

219 
EXTI
->
FTSR
 &Ô£ø~(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

220 
EXTI
->
RTSR
 |Ô£ø
USB_OTG_FS_WAKEUP_EXTI_LINE
; \

221 } 0U)

	)

224 #i‚Ä°
def√∂ed
 (
USB
)

225 
	#__HAL_PCD_ENABLE
(
__HANDLE__
√ã()
	`USB_E¬´b√ÄGlob√ÜI¬°
 ((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

226 
	#__HAL_PCD_DISABLE
(
__HANDLE__
√ã()
	`USB_Di√üb√ÄGlob√ÜI¬°
 ((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

227 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
√ã((
	`USB_R√≥dI¬°√Æru¬±s
((__HANDLE__)->
In¬∞‚Ñ¢Àö
√ã& (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__))

	)

228 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
ISTR
√ã&Ô£ø(
u√∂t16_t
)(~(__INTERRUPT__)))

	)

230 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_IT
(√ã
EXTI
->
IMR
 |Ô£ø
USB_WAKEUP_EXTI_LINE


	)

231 
	#__HAL_USB_WAKEUP_EXTI_DISABLE_IT
(√ã
EXTI
->
IMR
 &Ô£ø~(
USB_WAKEUP_EXTI_LINE
)

	)

232 
	#__HAL_USB_WAKEUP_EXTI_GET_FLAG
(√ã
EXTI
->
PR
 & (
USB_WAKEUP_EXTI_LINE
)

	)

233 
	#__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
(√ã
EXTI
->
PR
 = 
USB_WAKEUP_EXTI_LINE


	)

235 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE
() \

237 
EXTI
->
FTSR
 &Ô£ø~(
USB_WAKEUP_EXTI_LINE
); \

238 
EXTI
->
RTSR
 |Ô£ø
USB_WAKEUP_EXTI_LINE
; \

239 } 0U)

	)

256 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_In√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

257 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_DeIn√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

258 
HAL_PCD_M‚Ä¢In√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

259 
HAL_PCD_M‚Ä¢DeIn√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

261 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

268 
HAL_PCD_SOF_CB_ID
 = 0x01,

269 
HAL_PCD_SETUPSTAGE_CB_ID
 = 0x02,

270 
HAL_PCD_RESET_CB_ID
 = 0x03,

271 
HAL_PCD_SUSPEND_CB_ID
 = 0x04,

272 
HAL_PCD_RESUME_CB_ID
 = 0x05,

273 
HAL_PCD_CONNECT_CB_ID
 = 0x06,

274 
HAL_PCD_DISCONNECT_CB_ID
 = 0x07,

276 
HAL_PCD_MSPINIT_CB_ID
 = 0x08,

277 
HAL_PCD_MSPDEINIT_CB_ID
 = 0x09

279 } 
	tHAL_PCD_C√ÜlbackIDTy‚â•Def
;

289 (*
pPCD_C√ÜlbackTy‚â•Def
)(
	tPCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thpcd
);

290 (*
pPCD_D¬©aOutS√®geC√ÜlbackTy‚â•Def
)(
	tPCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thpcd
, 
	tu√∂t8_t
 
	t√Ønum
);

291 (*
pPCD_D¬©aInS√®geC√ÜlbackTy‚â•Def
)(
	tPCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thpcd
, 
	tu√∂t8_t
 
	t√Ønum
);

292 (*
pPCD_IsoOutInÀù‚Ä¶C√ÜlbackTy‚â•Def
)(
	tPCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thpcd
, 
	tu√∂t8_t
 
	t√Ønum
);

293 (*
pPCD_IsoInInÀù‚Ä¶C√ÜlbackTy‚â•Def
)(
	tPCD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thpcd
, 
	tu√∂t8_t
 
	t√Ønum
);

299 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_Regi¬∞√ÆC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

300 
HAL_PCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

301 
pPCD_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

303 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_UnRegi¬∞√ÆC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

304 
HAL_PCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

306 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_Regi¬∞√ÆD¬©aOutS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

307 
pPCD_D¬©aOutS√®geC√ÜlbackTy‚â•Def
 
pC√Ülback
);

309 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_UnRegi¬∞√ÆD¬©aOutS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

311 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_Regi¬∞√ÆD¬©aInS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

312 
pPCD_D¬©aInS√®geC√ÜlbackTy‚â•Def
 
pC√Ülback
);

314 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_UnRegi¬∞√ÆD¬©aInS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

316 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_Regi¬∞√ÆIsoOutInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

317 
pPCD_IsoOutInÀù‚Ä¶C√ÜlbackTy‚â•Def
 
pC√Ülback
);

319 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_UnRegi¬∞√ÆIsoOutInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

321 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_Regi¬∞√ÆIsoInInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

322 
pPCD_IsoInInÀù‚Ä¶C√ÜlbackTy‚â•Def
 
pC√Ülback
);

324 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_UnRegi¬∞√ÆIsoInInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

336 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_S√®œÄ
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

337 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_St‚Ä∫
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

338 
HAL_PCD_IRQH‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

339 
HAL_PCD_WKUP_IRQH‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

341 
HAL_PCD_SOFC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

342 
HAL_PCD_S√´upS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

343 
HAL_PCD_Re¬£tC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

344 
HAL_PCD_Su‚Ä¢√≠dC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

345 
HAL_PCD_ResumeC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

346 
HAL_PCD_C‚ÅÑ‚àöÀòC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

347 
HAL_PCD_Disc‚ÅÑ‚àöÀòC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

349 
HAL_PCD_D¬©aOutS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

350 
HAL_PCD_D¬©aInS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

351 
HAL_PCD_ISOOUTIncom‚àÇ√´eC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

352 
HAL_PCD_ISOINIncom‚àÇ√´eC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
);

361 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_DevC‚ÅÑ‚àöÀò
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

362 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_DevDisc‚ÅÑ‚àöÀò
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

363 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_S√´Add¬™ss
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
add¬™ss
);

364 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_O‚â•n
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
,

365 
u√∂t16_t
 
√Ø_mps
, 
u√∂t8_t
 
√Ø_ty‚â•
);

367 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_Clo¬£
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
);

368 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_ReÀöive
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
,

369 
u√∂t8_t
 *
pBuf
, 
u√∂t32_t
 
√Än
);

371 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_T√∏nsm√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
,

372 
u√∂t8_t
 *
pBuf
, 
u√∂t32_t
 
√Än
);

375 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_S√´S√®≈í
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
);

376 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_C√ÉS√®≈í
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
);

377 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_Flush
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
);

378 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_AÀòiv¬©eRem≈∏eWakeup
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

379 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_DeAÀòiv¬©eRem≈∏eWakeup
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

381 
u√∂t32_t
 
HAL_PCD_EP_G√´RxCou¬°
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
);

390 
PCD_S√®√£Ty‚â•Def
 
HAL_PCD_G√´S√®√£
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

406 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

407 
	#USB_OTG_FS_WAKEUP_EXTI_LINE
 (0x1U << 18√ã

	)

410 #i‚Ä°
def√∂ed
 (
USB
)

411 
	#USB_WAKEUP_EXTI_LINE
 (0x1U << 18√ã

	)

417 #i‚Ä°
def√∂ed
 (
USB
)

421 
	#PCD_EP0MPS_64
 
EP_MPS_64


	)

422 
	#PCD_EP0MPS_32
 
EP_MPS_32


	)

423 
	#PCD_EP0MPS_16
 
EP_MPS_16


	)

424 
	#PCD_EP0MPS_08
 
EP_MPS_8


	)

432 
	#PCD_ENDP0
 0U

	)

433 
	#PCD_ENDP1
 1U

	)

434 
	#PCD_ENDP2
 2U

	)

435 
	#PCD_ENDP3
 3U

	)

436 
	#PCD_ENDP4
 4U

	)

437 
	#PCD_ENDP5
 5U

	)

438 
	#PCD_ENDP6
 6U

	)

439 
	#PCD_ENDP7
 7U

	)

447 
	#PCD_SNG_BUF
 0U

	)

448 
	#PCD_DBL_BUF
 1U

	)

457 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

458 #i‚Äöde‚Ä°
USB_OTG_DOEPINT_OTEPSPR


459 
	#USB_OTG_DOEPINT_OTEPSPR
 (0x1UL << 5√ã

	)

462 #i‚Äöde‚Ä°
USB_OTG_DOEPMSK_OTEPSPRM


463 
	#USB_OTG_DOEPMSK_OTEPSPRM
 (0x1UL << 5√ã

	)

466 #i‚Äöde‚Ä°
USB_OTG_DOEPINT_NAK


467 
	#USB_OTG_DOEPINT_NAK
 (0x1UL << 13√ã

	)

470 #i‚Äöde‚Ä°
USB_OTG_DOEPMSK_NAKM


471 
	#USB_OTG_DOEPMSK_NAKM
 (0x1UL << 13√ã

	)

474 #i‚Äöde‚Ä°
USB_OTG_DOEPINT_STPKTRX


475 
	#USB_OTG_DOEPINT_STPKTRX
 (0x1UL << 15√ã

	)

478 #i‚Äöde‚Ä°
USB_OTG_DOEPMSK_NYETM


479 
	#USB_OTG_DOEPMSK_NYETM
 (0x1UL << 14√ã

	)

487 #i‚Ä°
def√∂ed
 (
USB
)

489 
	#USB_CNTRX_NBLK_MSK
 (0x1FU << 10)

	)

490 
	#USB_CNTRX_BLSIZE
 (0x1U << 15)

	)

493 
	#PCD_SET_ENDPOINT
(
USBx
, 
bEpNum
, 
wRegV√Üue
√ã(*(
__IO
 
u√∂t16_t
 *)(&(USBx)->
EP0R
 + ((bEpNum√ã* 2U)√ãÔ£ø(u√∂t16_t)(wRegV√Üue))

	)

496 
	#PCD_GET_ENDPOINT
(
USBx
, 
bEpNum
√ã(*(
__IO
 
u√∂t16_t
 *)(&(USBx)->
EP0R
 + ((bEpNum√ã* 2U)))

	)

499 
	#USB_EP0S√®œÄX‚Äûr
 
USB_EPS√®œÄX‚Äûr


	)

508 
	#PCD_SET_EPTYPE
(
USBx
, 
bEpNum
, 
wTy‚â•
√ã(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum), ((
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)√ã& 
USB_EP_T_MASK
√ã| (wTy‚â•√ã| 
USB_EP_CTR_TX
 | 
USB_EP_CTR_RX
)))

	)

516 
	#PCD_GET_EPTYPE
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)√ã& 
USB_EP_T_FIELD
)

	)

525 
	#PCD_F¬™eU¬£rBuf‚Äûr
(
USBx
, 
bEpNum
, 
bD√∫
) \

527 i‚Ä°((
bD√∫
) == 0U) \

530 
	`PCD_TX_DTOG
((
USBx
), (
bEpNum
)); \

532 i‚Ä°((
bD√∫
) == 1U) \

535 
	`PCD_RX_DTOG
((
USBx
), (
bEpNum
)); \

537 } 0)

	)

546 
	#PCD_SET_EP_TX_STATUS
(
USBx
, 
bEpNum
, 
wS√®√£
) \

548 
u√∂t16_t
 
_wRegV√Ü
; \

550 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPTX_DTOGMASK
; \

552 i‚Ä°((
USB_EPTX_DTOG1
 & (
wS√®√£
))!= 0U) \

554 
_wRegV√Ü
 ^Ô£ø
USB_EPTX_DTOG1
; \

557 i‚Ä°((
USB_EPTX_DTOG2
 & (
wS√®√£
))!= 0U) \

559 
_wRegV√Ü
 ^Ô£ø
USB_EPTX_DTOG2
; \

561 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

562 } 0√ã

	)

571 
	#PCD_SET_EP_RX_STATUS
(
USBx
, 
bEpNum
,
wS√®√£
) \

573 
u√∂t16_t
 
_wRegV√Ü
; \

575 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPRX_DTOGMASK
; \

577 i‚Ä°((
USB_EPRX_DTOG1
 & (
wS√®√£
))!= 0U) \

579 
_wRegV√Ü
 ^Ô£ø
USB_EPRX_DTOG1
; \

582 i‚Ä°((
USB_EPRX_DTOG2
 & (
wS√®√£
))!= 0U) \

584 
_wRegV√Ü
 ^Ô£ø
USB_EPRX_DTOG2
; \

586 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

587 } 0√ã

	)

597 
	#PCD_SET_EP_TXRX_STATUS
(
USBx
, 
bEpNum
, 
wS√®√£rx
, 
wS√®√£tx
) \

599 
u√∂t16_t
 
_wRegV√Ü
; \

601 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& (
USB_EPRX_DTOGMASK
 | 
USB_EPTX_STAT
); \

603 i‚Ä°((
USB_EPRX_DTOG1
 & (
wS√®√£rx
))!= 0U) \

605 
_wRegV√Ü
 ^Ô£ø
USB_EPRX_DTOG1
; \

608 i‚Ä°((
USB_EPRX_DTOG2
 & (
wS√®√£rx
))!= 0U) \

610 
_wRegV√Ü
 ^Ô£ø
USB_EPRX_DTOG2
; \

613 i‚Ä°((
USB_EPTX_DTOG1
 & (
wS√®√£tx
))!= 0U) \

615 
_wRegV√Ü
 ^Ô£ø
USB_EPTX_DTOG1
; \

618 i‚Ä°((
USB_EPTX_DTOG2
 & (
wS√®√£tx
))!= 0U) \

620 
_wRegV√Ü
 ^Ô£ø
USB_EPTX_DTOG2
; \

623 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

624 } 0√ã

	)

633 
	#PCD_GET_EP_TX_STATUS
(
USBx
, 
bEpNum
√ã((
u√∂t16_t
)
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)√ã& 
USB_EPTX_STAT
)

	)

634 
	#PCD_GET_EP_RX_STATUS
(
USBx
, 
bEpNum
√ã((
u√∂t16_t
)
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)√ã& 
USB_EPRX_STAT
)

	)

642 
	#PCD_SET_EP_TX_VALID
(
USBx
, 
bEpNum
√ã(
	`PCD_SET_EP_TX_STATUS
((USBx), (bEpNum), 
USB_EP_TX_VALID
))

	)

643 
	#PCD_SET_EP_RX_VALID
(
USBx
, 
bEpNum
√ã(
	`PCD_SET_EP_RX_STATUS
((USBx), (bEpNum), 
USB_EP_RX_VALID
))

	)

651 
	#PCD_GET_EP_TX_STALL_STATUS
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_EP_TX_STATUS
((USBx), (bEpNum)√ã=Ô£ø
USB_EP_TX_STALL
)

	)

652 
	#PCD_GET_EP_RX_STALL_STATUS
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_EP_RX_STATUS
((USBx), (bEpNum)√ã=Ô£ø
USB_EP_RX_STALL
)

	)

660 
	#PCD_SET_EP_KIND
(
USBx
, 
bEpNum
) \

662 
u√∂t16_t
 
_wRegV√Ü
; \

664 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPREG_MASK
; \

666 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
 | 
USB_EP_KIND
)); \

667 } 0√ã

	)

669 
	#PCD_CLEAR_EP_KIND
(
USBx
, 
bEpNum
) \

671 
u√∂t16_t
 
_wRegV√Ü
; \

673 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPKIND_MASK
; \

675 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

676 } 0√ã

	)

684 
	#PCD_SET_OUT_STATUS
(
USBx
, 
bEpNum
√ã
	`PCD_SET_EP_KIND
((USBx), (bEpNum))

	)

685 
	#PCD_CLEAR_OUT_STATUS
(
USBx
, 
bEpNum
√ã
	`PCD_CLEAR_EP_KIND
((USBx), (bEpNum))

	)

693 
	#PCD_SET_EP_DBUF
(
USBx
, 
bEpNum
√ã
	`PCD_SET_EP_KIND
((USBx), (bEpNum))

	)

694 
	#PCD_CLEAR_EP_DBUF
(
USBx
, 
bEpNum
√ã
	`PCD_CLEAR_EP_KIND
((USBx), (bEpNum))

	)

702 
	#PCD_CLEAR_RX_EP_CTR
(
USBx
, 
bEpNum
) \

704 
u√∂t16_t
 
_wRegV√Ü
; \

706 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& (0x7FFFU & 
USB_EPREG_MASK
); \

708 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_TX
)); \

709 } 0√ã

	)

711 
	#PCD_CLEAR_TX_EP_CTR
(
USBx
, 
bEpNum
) \

713 
u√∂t16_t
 
_wRegV√Ü
; \

715 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& (0xFF7FU & 
USB_EPREG_MASK
); \

717 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
)); \

718 } 0√ã

	)

726 
	#PCD_RX_DTOG
(
USBx
, 
bEpNum
) \

728 
u√∂t16_t
 
_wEPV√Ü
; \

730 
_wEPV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPREG_MASK
; \

732 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wEPV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
 | 
USB_EP_DTOG_RX
)); \

733 } 0√ã

	)

735 
	#PCD_TX_DTOG
(
USBx
, 
bEpNum
) \

737 
u√∂t16_t
 
_wEPV√Ü
; \

739 
_wEPV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPREG_MASK
; \

741 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wEPV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
 | 
USB_EP_DTOG_TX
)); \

742 } 0√ã

	)

749 
	#PCD_CLEAR_RX_DTOG
(
USBx
, 
bEpNum
) \

751 
u√∂t16_t
 
_wRegV√Ü
; \

753 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)); \

755 i‚Ä°((
_wRegV√Ü
 & 
USB_EP_DTOG_RX
) != 0U)\

757 
	`PCD_RX_DTOG
((
USBx
), (
bEpNum
)); \

759 } 0√ã

	)

761 
	#PCD_CLEAR_TX_DTOG
(
USBx
, 
bEpNum
) \

763 
u√∂t16_t
 
_wRegV√Ü
; \

765 
_wRegV√Ü
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)); \

767 i‚Ä°((
_wRegV√Ü
 & 
USB_EP_DTOG_TX
) != 0U)\

769 
	`PCD_TX_DTOG
((
USBx
), (
bEpNum
)); \

771 } 0√ã

	)

780 
	#PCD_SET_EP_ADDRESS
(
USBx
, 
bEpNum
, 
bAddr
) \

782 
u√∂t16_t
 
_wRegV√Ü
; \

784 
_wRegV√Ü
 = (
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)√ã& 
USB_EPREG_MASK
√ã| (
bAddr
); \

786 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

787 } 0√ã

	)

795 
	#PCD_GET_EP_ADDRESS
(
USBx
, 
bEpNum
√ã((
u√∂t8_t
)(
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)√ã& 
USB_EPADDR_FIELD
))

	)

797 
	#PCD_EP_TX_CNT
(
USBx
, 
bEpNum
√ã((
u√∂t16_t
 *)((((
u√∂t32_t
)(USBx)->
BTABLE
 + ((u√∂t32_t)(bEpNum√ã* 8U√ã+ 2U√ã* 
PMA_ACCESS
√ã+ ((u√∂t32_t)(USBx√ã+ 0x400U)))

	)

798 
	#PCD_EP_RX_CNT
(
USBx
, 
bEpNum
√ã((
u√∂t16_t
 *)((((
u√∂t32_t
)(USBx)->
BTABLE
 + ((u√∂t32_t)(bEpNum√ã* 8U√ã+ 6U√ã* 
PMA_ACCESS
√ã+ ((u√∂t32_t)(USBx√ã+ 0x400U)))

	)

807 
	#PCD_SET_EP_TX_ADDRESS
(
USBx
, 
bEpNum
, 
wAddr
) \

809 
__IO
 
u√∂t16_t
 *
_wRegV√Ü
; \

810 
u√∂t32_t
 
_wRegBa¬£
 = (u√∂t32_t)
USBx
; \

812 
_wRegBa¬£
 +Ô£ø(
u√∂t32_t
)(
USBx
)->
BTABLE
; \

813 
_wRegV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
_wRegBa¬£
 + 0x400U + (((
u√∂t32_t
)(
bEpNum
√ã* 8U√ã* 
PMA_ACCESS
)); \

814 *
_wRegV√Ü
 = ((
wAddr
) >> 1) << 1; \

815 } 0√ã

	)

817 
	#PCD_SET_EP_RX_ADDRESS
(
USBx
, 
bEpNum
, 
wAddr
) \

819 
__IO
 
u√∂t16_t
 *
_wRegV√Ü
; \

820 
u√∂t32_t
 
_wRegBa¬£
 = (u√∂t32_t)
USBx
; \

822 
_wRegBa¬£
 +Ô£ø(
u√∂t32_t
)(
USBx
)->
BTABLE
; \

823 
_wRegV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
_wRegBa¬£
 + 0x400U + ((((
u√∂t32_t
)(
bEpNum
√ã* 8U√ã+ 4U√ã* 
PMA_ACCESS
)); \

824 *
_wRegV√Ü
 = ((
wAddr
) >> 1) << 1; \

825 } 0√ã

	)

833 
	#PCD_GET_EP_TX_ADDRESS
(
USBx
, 
bEpNum
√ã((
u√∂t16_t
)*
	`PCD_EP_TX_ADDRESS
((USBx), (bEpNum)))

	)

834 
	#PCD_GET_EP_RX_ADDRESS
(
USBx
, 
bEpNum
√ã((
u√∂t16_t
)*
	`PCD_EP_RX_ADDRESS
((USBx), (bEpNum)))

	)

843 
	#PCD_CALC_BLK32
(
pdwReg
, 
wCou¬°
, 
wNBlocks
) \

845 (
wNBlocks
√ãÔ£ø(
wCou¬°
) >> 5; \

846 i‚Ä°(((
wCou¬°
) & 0x1fU) == 0U) \

848 (
wNBlocks
)--; \

850 *(
pdwReg
√ãÔ£ø(
u√∂t16_t
)(((
wNBlocks
√ã<< 10√ã| 
USB_CNTRX_BLSIZE
); \

851 } 0√ã

	)

853 
	#PCD_CALC_BLK2
(
pdwReg
, 
wCou¬°
, 
wNBlocks
) \

855 (
wNBlocks
√ãÔ£ø(
wCou¬°
) >> 1; \

856 i‚Ä°(((
wCou¬°
) & 0x1U) != 0U) \

858 (
wNBlocks
)++; \

860 *(
pdwReg
√ãÔ£ø(
u√∂t16_t
)((
wNBlocks
) << 10); \

861 } 0√ã

	)

863 
	#PCD_SET_EP_CNT_RX_REG
(
pdwReg
, 
wCou¬°
) \

865 
u√∂t32_t
 
wNBlocks
; \

866 i‚Ä°((
wCou¬°
) == 0U) \

868 *(
pdwReg
√ã&Ô£ø(
u√∂t16_t
)~
USB_CNTRX_NBLK_MSK
; \

869 *(
pdwReg
√ã|Ô£ø
USB_CNTRX_BLSIZE
; \

871 if((
wCou¬°
) <= 62U) \

873 
	`PCD_CALC_BLK2
((
pdwReg
), (
wCou¬°
), 
wNBlocks
); \

877 
	`PCD_CALC_BLK32
((
pdwReg
), (
wCou¬°
), 
wNBlocks
); \

879 } 0√ã

	)

881 
	#PCD_SET_EP_RX_DBUF0_CNT
(
USBx
, 
bEpNum
, 
wCou¬°
) \

883 
u√∂t32_t
 
_wRegBa¬£
 = (u√∂t32_t)(
USBx
); \

884 
__IO
 
u√∂t16_t
 *
pdwReg
; \

886 
_wRegBa¬£
 +Ô£ø(
u√∂t32_t
)(
USBx
)->
BTABLE
; \

887 
pdwReg
 = (
__IO
 
u√∂t16_t
 *)(
_wRegBa¬£
 + 0x400U + ((((
u√∂t32_t
)(
bEpNum
√ã* 8U√ã+ 2U√ã* 
PMA_ACCESS
)); \

888 
	`PCD_SET_EP_CNT_RX_REG
(
pdwReg
, (
wCou¬°
)); \

889 } 0)

	)

898 
	#PCD_SET_EP_TX_CNT
(
USBx
, 
bEpNum
, 
wCou¬°
) \

900 
u√∂t32_t
 
_wRegBa¬£
 = (u√∂t32_t)(
USBx
); \

901 
__IO
 
u√∂t16_t
 *
_wRegV√Ü
; \

903 
_wRegBa¬£
 +Ô£ø(
u√∂t32_t
)(
USBx
)->
BTABLE
; \

904 
_wRegV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
_wRegBa¬£
 + 0x400U + ((((
u√∂t32_t
)(
bEpNum
√ã* 8U√ã+ 2U√ã* 
PMA_ACCESS
)); \

905 *
_wRegV√Ü
 = (
u√∂t16_t
)(
wCou¬°
); \

906 } 0)

	)

908 
	#PCD_SET_EP_RX_CNT
(
USBx
, 
bEpNum
, 
wCou¬°
) \

910 
u√∂t32_t
 
_wRegBa¬£
 = (u√∂t32_t)(
USBx
); \

911 
__IO
 
u√∂t16_t
 *
_wRegV√Ü
; \

913 
_wRegBa¬£
 +Ô£ø(
u√∂t32_t
)(
USBx
)->
BTABLE
; \

914 
_wRegV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
_wRegBa¬£
 + 0x400U + ((((
u√∂t32_t
)(
bEpNum
√ã* 8U√ã+ 6U√ã* 
PMA_ACCESS
)); \

915 
	`PCD_SET_EP_CNT_RX_REG
(
_wRegV√Ü
, (
wCou¬°
)); \

916 } 0)

	)

924 
	#PCD_GET_EP_TX_CNT
(
USBx
, 
bEpNum
√ã((
u√∂t32_t
)(*
	`PCD_EP_TX_CNT
((USBx), (bEpNum))√ã& 0x3ffU)

	)

925 
	#PCD_GET_EP_RX_CNT
(
USBx
, 
bEpNum
√ã((
u√∂t32_t
)(*
	`PCD_EP_RX_CNT
((USBx), (bEpNum))√ã& 0x3ffU)

	)

934 
	#PCD_SET_EP_DBUF0_ADDR
(
USBx
, 
bEpNum
, 
wBuf0Addr
) \

936 
	`PCD_SET_EP_TX_ADDRESS
((
USBx
), (
bEpNum
), (
wBuf0Addr
)); \

937 } 0√ã

	)

939 
	#PCD_SET_EP_DBUF1_ADDR
(
USBx
, 
bEpNum
, 
wBuf1Addr
) \

941 
	`PCD_SET_EP_RX_ADDRESS
((
USBx
), (
bEpNum
), (
wBuf1Addr
)); \

942 } 0√ã

	)

952 
	#PCD_SET_EP_DBUF_ADDR
(
USBx
, 
bEpNum
, 
wBuf0Addr
, 
wBuf1Addr
) \

954 
	`PCD_SET_EP_DBUF0_ADDR
((
USBx
), (
bEpNum
), (
wBuf0Addr
)); \

955 
	`PCD_SET_EP_DBUF1_ADDR
((
USBx
), (
bEpNum
), (
wBuf1Addr
)); \

956 } 0√ã

	)

964 
	#PCD_GET_EP_DBUF0_ADDR
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_EP_TX_ADDRESS
((USBx), (bEpNum)))

	)

965 
	#PCD_GET_EP_DBUF1_ADDR
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_EP_RX_ADDRESS
((USBx), (bEpNum)))

	)

976 
	#PCD_SET_EP_DBUF0_CNT
(
USBx
, 
bEpNum
, 
bD√∫
, 
wCou¬°
) \

978 i‚Ä°((
bD√∫
) == 0U) \

981 
	`PCD_SET_EP_RX_DBUF0_CNT
((
USBx
), (
bEpNum
), (
wCou¬°
)); \

985 i‚Ä°((
bD√∫
) == 1U) \

988 
	`PCD_SET_EP_TX_CNT
((
USBx
), (
bEpNum
), (
wCou¬°
)); \

991 } 0√ã

	)

993 
	#PCD_SET_EP_DBUF1_CNT
(
USBx
, 
bEpNum
, 
bD√∫
, 
wCou¬°
) \

995 
u√∂t32_t
 
_wBa¬£
 = (u√∂t32_t)(
USBx
); \

996 
__IO
 
u√∂t16_t
 *
_wEPRegV√Ü
; \

998 i‚Ä°((
bD√∫
) == 0U) \

1001 
	`PCD_SET_EP_RX_CNT
((
USBx
), (
bEpNum
), (
wCou¬°
)); \

1005 i‚Ä°((
bD√∫
) == 1U) \

1008 
_wBa¬£
 +Ô£ø(
u√∂t32_t
)(
USBx
)->
BTABLE
; \

1009 
_wEPRegV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
_wBa¬£
 + 0x400U + ((((
u√∂t32_t
)(
bEpNum
√ã* 8U√ã+ 6U√ã* 
PMA_ACCESS
)); \

1010 *
_wEPRegV√Ü
 = (
u√∂t16_t
)(
wCou¬°
); \

1013 } 0√ã

	)

1015 
	#PCD_SET_EP_DBUF_CNT
(
USBx
, 
bEpNum
, 
bD√∫
, 
wCou¬°
) \

1017 
	`PCD_SET_EP_DBUF0_CNT
((
USBx
), (
bEpNum
), (
bD√∫
), (
wCou¬°
)); \

1018 
	`PCD_SET_EP_DBUF1_CNT
((
USBx
), (
bEpNum
), (
bD√∫
), (
wCou¬°
)); \

1019 } 0√ã

	)

1027 
	#PCD_GET_EP_DBUF0_CNT
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_EP_TX_CNT
((USBx), (bEpNum)))

	)

1028 
	#PCD_GET_EP_DBUF1_CNT
(
USBx
, 
bEpNum
√ã(
	`PCD_GET_EP_RX_CNT
((USBx), (bEpNum)))

	)

1045 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd_ex.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_PCD_EX_H


22 
	#STM32F1xx_HAL_PCD_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

31 #i‚Ä°
def√∂ed
 (
USB
√ã|| def√∂ed (
USB_OTG_FS
)

50 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

51 
HAL_S√®tusTy‚â•Def
 
HAL_PCDEx_S√´TxFiFo
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
fifo
, 
u√∂t16_t
 
size
);

52 
HAL_S√®tusTy‚â•Def
 
HAL_PCDEx_S√´RxFiFo
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t16_t
 
size
);

55 #i‚Ä°
def√∂ed
 (
USB
)

56 
HAL_S√®tusTy‚â•Def
 
HAL_PCDEx_PMAC‚ÅÑfig
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t16_t
 
√Ø_addr
,

57 
u√∂t16_t
 
√Ø_k√∂d
, 
u√∂t32_t
 
pm√òd¬™ss
);

59 
HAL_PCDEx_S√´C‚ÅÑ‚àöÀòi‚ÅÑS√®√£
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
¬∞¬©e
);

61 
HAL_PCDEx_LPM_C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
PCD_LPM_MsgTy‚â•Def
 
msg
);

62 
HAL_PCDEx_BCD_C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
PCD_BCD_MsgTy‚â•Def
 
msg
);

81 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pwr.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_PWR_H


22 
	#__STM32F1xx_HAL_PWR_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

50 
u√∂t32_t
 
PVDLev√±
;

53 
u√∂t32_t
 
Mode
;

55 }
	tPWR_PVDTy‚â•Def
;

69 
	#PWR_EXTI_LINE_PVD
 ((
u√∂t32_t
)0x00010000√ã

	)

85 
	#PWR_PVDLEVEL_0
 
PWR_CR_PLS_2V2


	)

86 
	#PWR_PVDLEVEL_1
 
PWR_CR_PLS_2V3


	)

87 
	#PWR_PVDLEVEL_2
 
PWR_CR_PLS_2V4


	)

88 
	#PWR_PVDLEVEL_3
 
PWR_CR_PLS_2V5


	)

89 
	#PWR_PVDLEVEL_4
 
PWR_CR_PLS_2V6


	)

90 
	#PWR_PVDLEVEL_5
 
PWR_CR_PLS_2V7


	)

91 
	#PWR_PVDLEVEL_6
 
PWR_CR_PLS_2V8


	)

92 
	#PWR_PVDLEVEL_7
 
PWR_CR_PLS_2V9


	)

101 
	#PWR_PVD_MODE_NORMAL
 0x00000000U

	)

102 
	#PWR_PVD_MODE_IT_RISING
 0x00010001U

	)

103 
	#PWR_PVD_MODE_IT_FALLING
 0x00010002U

	)

104 
	#PWR_PVD_MODE_IT_RISING_FALLING
 0x00010003U

	)

105 
	#PWR_PVD_MODE_EVENT_RISING
 0x00020001U

	)

106 
	#PWR_PVD_MODE_EVENT_FALLING
 0x00020002U

	)

107 
	#PWR_PVD_MODE_EVENT_RISING_FALLING
 0x00020003U

	)

118 
	#PWR_WAKEUP_PIN1
 
PWR_CSR_EWUP


	)

127 
	#PWR_MAINREGULATOR_ON
 0x00000000U

	)

128 
	#PWR_LOWPOWERREGULATOR_ON
 
PWR_CR_LPDS


	)

137 
	#PWR_SLEEPENTRY_WFI
 ((
u√∂t8_t
)0x01)

	)

138 
	#PWR_SLEEPENTRY_WFE
 ((
u√∂t8_t
)0x02)

	)

147 
	#PWR_STOPENTRY_WFI
 ((
u√∂t8_t
)0x01)

	)

148 
	#PWR_STOPENTRY_WFE
 ((
u√∂t8_t
)0x02)

	)

157 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

158 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

159 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

190 
	#__HAL_PWR_GET_FLAG
(
__FLAG__
√ã((
PWR
->
CSR
 & (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

198 
	#__HAL_PWR_CLEAR_FLAG
(
__FLAG__
√ã
	`SET_BIT
(
PWR
->
CR
, ((__FLAG__√ã<< 2))

	)

204 
	#__HAL_PWR_PVD_EXTI_ENABLE_IT
(√ã
	`SET_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

210 
	#__HAL_PWR_PVD_EXTI_DISABLE_IT
(√ã
	`CLEAR_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

216 
	#__HAL_PWR_PVD_EXTI_ENABLE_EVENT
(√ã
	`SET_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

222 
	#__HAL_PWR_PVD_EXTI_DISABLE_EVENT
(√ã
	`CLEAR_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

229 
	#__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(√ã
	`SET_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

236 
	#__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(√ã
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

243 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
(√ã
	`SET_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

250 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(√ã
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

256 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE
(√ã
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

	)

263 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
(√ã
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

	)

271 
	#__HAL_PWR_PVD_EXTI_GET_FLAG
(√ã(
EXTI
->
PR
 & (
PWR_EXTI_LINE_PVD
))

	)

277 
	#__HAL_PWR_PVD_EXTI_CLEAR_FLAG
(√ã(
EXTI
->
PR
 = (
PWR_EXTI_LINE_PVD
))

	)

283 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(√ã
	`SET_BIT
(
EXTI
->
SWIER
, 
PWR_EXTI_LINE_PVD
)

	)

292 
	#IS_PWR_PVD_LEVEL
(
LEVEL
√ã(((LEVEL√ã=Ô£ø
PWR_PVDLEVEL_0
√ã|| ((LEVEL√ã=Ô£ø
PWR_PVDLEVEL_1
)|| \

293 ((
LEVEL
√ã=Ô£ø
PWR_PVDLEVEL_2
√ã|| ((LEVEL√ã=Ô£ø
PWR_PVDLEVEL_3
)|| \

294 ((
LEVEL
√ã=Ô£ø
PWR_PVDLEVEL_4
√ã|| ((LEVEL√ã=Ô£ø
PWR_PVDLEVEL_5
)|| \

295 ((
LEVEL
√ã=Ô£ø
PWR_PVDLEVEL_6
√ã|| ((LEVEL√ã=Ô£ø
PWR_PVDLEVEL_7
))

	)

298 
	#IS_PWR_PVD_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
PWR_PVD_MODE_IT_RISING
)|| ((MODE√ã=Ô£ø
PWR_PVD_MODE_IT_FALLING
) || \

299 ((
MODE
√ã=Ô£ø
PWR_PVD_MODE_IT_RISING_FALLING
√ã|| ((MODE√ã=Ô£ø
PWR_PVD_MODE_EVENT_RISING
) || \

300 ((
MODE
√ã=Ô£ø
PWR_PVD_MODE_EVENT_FALLING
√ã|| ((MODE√ã=Ô£ø
PWR_PVD_MODE_EVENT_RISING_FALLING
) || \

301 ((
MODE
√ã=Ô£ø
PWR_PVD_MODE_NORMAL
))

	)

303 
	#IS_PWR_WAKEUP_PIN
(
PIN
√ã(((PIN√ã=Ô£ø
PWR_WAKEUP_PIN1
))

	)

305 
	#IS_PWR_REGULATOR
(
REGULATOR
√ã(((REGULATOR√ã=Ô£ø
PWR_MAINREGULATOR_ON
) || \

306 ((
REGULATOR
√ã=Ô£ø
PWR_LOWPOWERREGULATOR_ON
))

	)

308 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
√ã(((ENTRY√ã=Ô£ø
PWR_SLEEPENTRY_WFI
√ã|| ((ENTRY√ã=Ô£ø
PWR_SLEEPENTRY_WFE
))

	)

310 
	#IS_PWR_STOP_ENTRY
(
ENTRY
√ã(((ENTRY√ã=Ô£ø
PWR_STOPENTRY_WFI
√ã|| ((ENTRY√ã=Ô£ø
PWR_STOPENTRY_WFE
))

	)

329 
HAL_PWR_DeIn√¥
();

330 
HAL_PWR_E¬´b√ÄBkUpAcÀöss
();

331 
HAL_PWR_Di√üb√ÄBkUpAcÀöss
();

342 
HAL_PWR_C‚ÅÑfigPVD
(
PWR_PVDTy‚â•Def
 *
sC‚ÅÑfigPVD
);

344 
HAL_PWR_E¬´b√ÄPVD
();

345 
HAL_PWR_Di√üb√ÄPVD
();

348 
HAL_PWR_E¬´b√ÄWakeUpP√∂
(
u√∂t32_t
 
WakeUpP√∂x
);

349 
HAL_PWR_Di√üb√ÄWakeUpP√∂
(
u√∂t32_t
 
WakeUpP√∂x
);

352 
HAL_PWR_E¬°√ÆSTOPMode
(
u√∂t32_t
 
Regu≈ìt‚Äπ
, 
u√∂t8_t
 
STOPE¬°ry
);

353 
HAL_PWR_E¬°√ÆSLEEPMode
(
u√∂t32_t
 
Regu≈ìt‚Äπ
, 
u√∂t8_t
 
SLEEPE¬°ry
);

354 
HAL_PWR_E¬°√ÆSTANDBYMode
();

356 
HAL_PWR_E¬´b√ÄS√Ä√ØOnEx√¥
();

357 
HAL_PWR_Di√üb√ÄS√Ä√ØOnEx√¥
();

358 
HAL_PWR_E¬´b√ÄSEVOnP√≠d
();

359 
HAL_PWR_Di√üb√ÄSEVOnP√≠d
();

363 
HAL_PWR_PVD_IRQH‚Ñ¢d√Är
();

364 
HAL_PWR_PVDC√Ülback
();

381 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_RCC_H


22 
	#__STM32F1xx_HAL_RCC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

51 
u√∂t32_t
 
PLLS√®√£
;

54 
u√∂t32_t
 
PLLSourÀö
;

57 
u√∂t32_t
 
PLLMUL
;

59 } 
	tRCC_PLLIn√¥Ty‚â•Def
;

66 
u√∂t32_t
 
ClockTy‚â•
;

69 
u√∂t32_t
 
SYSCLKSourÀö
;

72 
u√∂t32_t
 
AHBCLKDivid√Æ
;

75 
u√∂t32_t
 
APB1CLKDivid√Æ
;

78 
u√∂t32_t
 
APB2CLKDivid√Æ
;

80 } 
	tRCC_ClkIn√¥Ty‚â•Def
;

95 
	#RCC_PLLSOURCE_HSI_DIV2
 0x00000000U

	)

96 
	#RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC


	)

105 
	#RCC_OSCILLATORTYPE_NONE
 0x00000000U

	)

106 
	#RCC_OSCILLATORTYPE_HSE
 0x00000001U

	)

107 
	#RCC_OSCILLATORTYPE_HSI
 0x00000002U

	)

108 
	#RCC_OSCILLATORTYPE_LSE
 0x00000004U

	)

109 
	#RCC_OSCILLATORTYPE_LSI
 0x00000008U

	)

117 
	#RCC_HSE_OFF
 0x00000000U

	)

118 
	#RCC_HSE_ON
 
RCC_CR_HSEON


	)

119 
	#RCC_HSE_BYPASS
 ((
u√∂t32_t
)(
RCC_CR_HSEBYP
 | 
RCC_CR_HSEON
)√ã

	)

127 
	#RCC_LSE_OFF
 0x00000000U

	)

128 
	#RCC_LSE_ON
 
RCC_BDCR_LSEON


	)

129 
	#RCC_LSE_BYPASS
 ((
u√∂t32_t
)(
RCC_BDCR_LSEBYP
 | 
RCC_BDCR_LSEON
)√ã

	)

138 
	#RCC_HSI_OFF
 0x00000000U

	)

139 
	#RCC_HSI_ON
 
RCC_CR_HSION


	)

141 
	#RCC_HSICALIBRATION_DEFAULT
 0x10U

	)

150 
	#RCC_LSI_OFF
 0x00000000U

	)

151 
	#RCC_LSI_ON
 
RCC_CSR_LSION


	)

160 
	#RCC_PLL_NONE
 0x00000000U

	)

161 
	#RCC_PLL_OFF
 0x00000001U

	)

162 
	#RCC_PLL_ON
 0x00000002U

	)

171 
	#RCC_CLOCKTYPE_SYSCLK
 0x00000001U

	)

172 
	#RCC_CLOCKTYPE_HCLK
 0x00000002U

	)

173 
	#RCC_CLOCKTYPE_PCLK1
 0x00000004U

	)

174 
	#RCC_CLOCKTYPE_PCLK2
 0x00000008U

	)

183 
	#RCC_SYSCLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

184 
	#RCC_SYSCLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

185 
	#RCC_SYSCLKSOURCE_PLLCLK
 
RCC_CFGR_SW_PLL


	)

194 
	#RCC_SYSCLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

195 
	#RCC_SYSCLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

196 
	#RCC_SYSCLKSOURCE_STATUS_PLLCLK
 
RCC_CFGR_SWS_PLL


	)

205 
	#RCC_SYSCLK_DIV1
 
RCC_CFGR_HPRE_DIV1


	)

206 
	#RCC_SYSCLK_DIV2
 
RCC_CFGR_HPRE_DIV2


	)

207 
	#RCC_SYSCLK_DIV4
 
RCC_CFGR_HPRE_DIV4


	)

208 
	#RCC_SYSCLK_DIV8
 
RCC_CFGR_HPRE_DIV8


	)

209 
	#RCC_SYSCLK_DIV16
 
RCC_CFGR_HPRE_DIV16


	)

210 
	#RCC_SYSCLK_DIV64
 
RCC_CFGR_HPRE_DIV64


	)

211 
	#RCC_SYSCLK_DIV128
 
RCC_CFGR_HPRE_DIV128


	)

212 
	#RCC_SYSCLK_DIV256
 
RCC_CFGR_HPRE_DIV256


	)

213 
	#RCC_SYSCLK_DIV512
 
RCC_CFGR_HPRE_DIV512


	)

222 
	#RCC_HCLK_DIV1
 
RCC_CFGR_PPRE1_DIV1


	)

223 
	#RCC_HCLK_DIV2
 
RCC_CFGR_PPRE1_DIV2


	)

224 
	#RCC_HCLK_DIV4
 
RCC_CFGR_PPRE1_DIV4


	)

225 
	#RCC_HCLK_DIV8
 
RCC_CFGR_PPRE1_DIV8


	)

226 
	#RCC_HCLK_DIV16
 
RCC_CFGR_PPRE1_DIV16


	)

235 
	#RCC_RTCCLKSOURCE_NO_CLK
 0x00000000U

	)

236 
	#RCC_RTCCLKSOURCE_LSE
 
RCC_BDCR_RTCSEL_LSE


	)

237 
	#RCC_RTCCLKSOURCE_LSI
 
RCC_BDCR_RTCSEL_LSI


	)

238 
	#RCC_RTCCLKSOURCE_HSE_DIV128
 
RCC_BDCR_RTCSEL_HSE


	)

247 
	#RCC_MCO1
 0x00000000U

	)

248 
	#RCC_MCO
 
RCC_MCO1


	)

257 
	#RCC_MCODIV_1
 0x00000000U

	)

266 
	#RCC_IT_LSIRDY
 ((
u√∂t8_t
)
RCC_CIR_LSIRDYF
√ã

	)

267 
	#RCC_IT_LSERDY
 ((
u√∂t8_t
)
RCC_CIR_LSERDYF
√ã

	)

268 
	#RCC_IT_HSIRDY
 ((
u√∂t8_t
)
RCC_CIR_HSIRDYF
√ã

	)

269 
	#RCC_IT_HSERDY
 ((
u√∂t8_t
)
RCC_CIR_HSERDYF
√ã

	)

270 
	#RCC_IT_PLLRDY
 ((
u√∂t8_t
)
RCC_CIR_PLLRDYF
√ã

	)

271 
	#RCC_IT_CSS
 ((
u√∂t8_t
)
RCC_CIR_CSSF
√ã

	)

286 
	#RCC_FLAG_HSIRDY
 ((
u√∂t8_t
)((
CR_REG_INDEX
 << 5U√ã| 
RCC_CR_HSIRDY_Pos
)√ã

	)

287 
	#RCC_FLAG_HSERDY
 ((
u√∂t8_t
)((
CR_REG_INDEX
 << 5U√ã| 
RCC_CR_HSERDY_Pos
)√ã

	)

288 
	#RCC_FLAG_PLLRDY
 ((
u√∂t8_t
)((
CR_REG_INDEX
 << 5U√ã| 
RCC_CR_PLLRDY_Pos
)√ã

	)

291 
	#RCC_FLAG_LSIRDY
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_LSIRDY_Pos
)√ã

	)

292 
	#RCC_FLAG_PINRST
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_PINRSTF_Pos
)√ã

	)

293 
	#RCC_FLAG_PORRST
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_PORRSTF_Pos
)√ã

	)

294 
	#RCC_FLAG_SFTRST
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_SFTRSTF_Pos
)√ã

	)

295 
	#RCC_FLAG_IWDGRST
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_IWDGRSTF_Pos
)√ã

	)

296 
	#RCC_FLAG_WWDGRST
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_WWDGRSTF_Pos
)√ã

	)

297 
	#RCC_FLAG_LPWRRST
 ((
u√∂t8_t
)((
CSR_REG_INDEX
 << 5U√ã| 
RCC_CSR_LPWRRSTF_Pos
)√ã

	)

300 
	#RCC_FLAG_LSERDY
 ((
u√∂t8_t
)((
BDCR_REG_INDEX
 << 5U√ã| 
RCC_BDCR_LSERDY_Pos
)√ã

	)

323 
	#__HAL_RCC_DMA1_CLK_ENABLE
() do { \

324 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

325 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

327 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

328 
	`UNUSED
(
tm¬•eg
); \

329 } 0U)

	)

331 
	#__HAL_RCC_SRAM_CLK_ENABLE
() do { \

332 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

333 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

335 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

336 
	`UNUSED
(
tm¬•eg
); \

337 } 0U)

	)

339 
	#__HAL_RCC_FLITF_CLK_ENABLE
() do { \

340 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

341 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

343 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

344 
	`UNUSED
(
tm¬•eg
); \

345 } 0U)

	)

347 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

348 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

349 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

351 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

352 
	`UNUSED
(
tm¬•eg
); \

353 } 0U)

	)

355 
	#__HAL_RCC_DMA1_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_DMA1EN
))

	)

356 
	#__HAL_RCC_SRAM_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_SRAMEN
))

	)

357 
	#__HAL_RCC_FLITF_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_FLITFEN
))

	)

358 
	#__HAL_RCC_CRC_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_CRCEN
))

	)

372 
	#__HAL_RCC_DMA1_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)√ã!Ô£ø
RESET
)

	)

373 
	#__HAL_RCC_DMA1_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)√ã=Ô£ø
RESET
)

	)

374 
	#__HAL_RCC_SRAM_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)√ã!Ô£ø
RESET
)

	)

375 
	#__HAL_RCC_SRAM_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)√ã=Ô£ø
RESET
)

	)

376 
	#__HAL_RCC_FLITF_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)√ã!Ô£ø
RESET
)

	)

377 
	#__HAL_RCC_FLITF_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)√ã=Ô£ø
RESET
)

	)

378 
	#__HAL_RCC_CRC_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)√ã!Ô£ø
RESET
)

	)

379 
	#__HAL_RCC_CRC_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)√ã=Ô£ø
RESET
)

	)

392 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

393 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

394 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

396 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

397 
	`UNUSED
(
tm¬•eg
); \

398 } 0U)

	)

400 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

401 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

402 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

404 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

405 
	`UNUSED
(
tm¬•eg
); \

406 } 0U)

	)

408 
	#__HAL_RCC_WWDG_CLK_ENABLE
() do { \

409 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

410 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

412 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

413 
	`UNUSED
(
tm¬•eg
); \

414 } 0U)

	)

416 
	#__HAL_RCC_USART2_CLK_ENABLE
() do { \

417 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

418 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

420 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

421 
	`UNUSED
(
tm¬•eg
); \

422 } 0U)

	)

424 
	#__HAL_RCC_I2C1_CLK_ENABLE
() do { \

425 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

426 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

428 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

429 
	`UNUSED
(
tm¬•eg
); \

430 } 0U)

	)

432 
	#__HAL_RCC_BKP_CLK_ENABLE
() do { \

433 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

434 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

436 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

437 
	`UNUSED
(
tm¬•eg
); \

438 } 0U)

	)

440 
	#__HAL_RCC_PWR_CLK_ENABLE
() do { \

441 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

442 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

444 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

445 
	`UNUSED
(
tm¬•eg
); \

446 } 0U)

	)

448 
	#__HAL_RCC_TIM2_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM2EN
))

	)

449 
	#__HAL_RCC_TIM3_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM3EN
))

	)

450 
	#__HAL_RCC_WWDG_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_WWDGEN
))

	)

451 
	#__HAL_RCC_USART2_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_USART2EN
))

	)

452 
	#__HAL_RCC_I2C1_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_I2C1EN
))

	)

454 
	#__HAL_RCC_BKP_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_BKPEN
))

	)

455 
	#__HAL_RCC_PWR_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_PWREN
))

	)

469 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)√ã!Ô£ø
RESET
)

	)

470 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)√ã=Ô£ø
RESET
)

	)

471 
	#__HAL_RCC_TIM3_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)√ã!Ô£ø
RESET
)

	)

472 
	#__HAL_RCC_TIM3_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)√ã=Ô£ø
RESET
)

	)

473 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)√ã!Ô£ø
RESET
)

	)

474 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)√ã=Ô£ø
RESET
)

	)

475 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)√ã!Ô£ø
RESET
)

	)

476 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)√ã=Ô£ø
RESET
)

	)

477 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)√ã!Ô£ø
RESET
)

	)

478 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)√ã=Ô£ø
RESET
)

	)

479 
	#__HAL_RCC_BKP_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)√ã!Ô£ø
RESET
)

	)

480 
	#__HAL_RCC_BKP_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)√ã=Ô£ø
RESET
)

	)

481 
	#__HAL_RCC_PWR_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)√ã!Ô£ø
RESET
)

	)

482 
	#__HAL_RCC_PWR_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)√ã=Ô£ø
RESET
)

	)

495 
	#__HAL_RCC_AFIO_CLK_ENABLE
() do { \

496 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

497 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

499 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

500 
	`UNUSED
(
tm¬•eg
); \

501 } 0U)

	)

503 
	#__HAL_RCC_GPIOA_CLK_ENABLE
() do { \

504 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

505 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

507 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

508 
	`UNUSED
(
tm¬•eg
); \

509 } 0U)

	)

511 
	#__HAL_RCC_GPIOB_CLK_ENABLE
() do { \

512 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

513 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

515 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

516 
	`UNUSED
(
tm¬•eg
); \

517 } 0U)

	)

519 
	#__HAL_RCC_GPIOC_CLK_ENABLE
() do { \

520 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

521 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

523 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

524 
	`UNUSED
(
tm¬•eg
); \

525 } 0U)

	)

527 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

528 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

529 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

531 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

532 
	`UNUSED
(
tm¬•eg
); \

533 } 0U)

	)

535 
	#__HAL_RCC_ADC1_CLK_ENABLE
() do { \

536 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

537 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

539 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

540 
	`UNUSED
(
tm¬•eg
); \

541 } 0U)

	)

543 
	#__HAL_RCC_TIM1_CLK_ENABLE
() do { \

544 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

545 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

547 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

548 
	`UNUSED
(
tm¬•eg
); \

549 } 0U)

	)

551 
	#__HAL_RCC_SPI1_CLK_ENABLE
() do { \

552 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

553 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

555 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

556 
	`UNUSED
(
tm¬•eg
); \

557 } 0U)

	)

559 
	#__HAL_RCC_USART1_CLK_ENABLE
() do { \

560 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

561 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

563 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

564 
	`UNUSED
(
tm¬•eg
); \

565 } 0U)

	)

567 
	#__HAL_RCC_AFIO_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_AFIOEN
))

	)

568 
	#__HAL_RCC_GPIOA_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPAEN
))

	)

569 
	#__HAL_RCC_GPIOB_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPBEN
))

	)

570 
	#__HAL_RCC_GPIOC_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPCEN
))

	)

571 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPDEN
))

	)

572 
	#__HAL_RCC_ADC1_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_ADC1EN
))

	)

574 
	#__HAL_RCC_TIM1_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM1EN
))

	)

575 
	#__HAL_RCC_SPI1_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_SPI1EN
))

	)

576 
	#__HAL_RCC_USART1_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_USART1EN
))

	)

590 
	#__HAL_RCC_AFIO_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)√ã!Ô£ø
RESET
)

	)

591 
	#__HAL_RCC_AFIO_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)√ã=Ô£ø
RESET
)

	)

592 
	#__HAL_RCC_GPIOA_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)√ã!Ô£ø
RESET
)

	)

593 
	#__HAL_RCC_GPIOA_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)√ã=Ô£ø
RESET
)

	)

594 
	#__HAL_RCC_GPIOB_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)√ã!Ô£ø
RESET
)

	)

595 
	#__HAL_RCC_GPIOB_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)√ã=Ô£ø
RESET
)

	)

596 
	#__HAL_RCC_GPIOC_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)√ã!Ô£ø
RESET
)

	)

597 
	#__HAL_RCC_GPIOC_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)√ã=Ô£ø
RESET
)

	)

598 
	#__HAL_RCC_GPIOD_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)√ã!Ô£ø
RESET
)

	)

599 
	#__HAL_RCC_GPIOD_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)√ã=Ô£ø
RESET
)

	)

600 
	#__HAL_RCC_ADC1_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)√ã!Ô£ø
RESET
)

	)

601 
	#__HAL_RCC_ADC1_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)√ã=Ô£ø
RESET
)

	)

602 
	#__HAL_RCC_TIM1_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)√ã!Ô£ø
RESET
)

	)

603 
	#__HAL_RCC_TIM1_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)√ã=Ô£ø
RESET
)

	)

604 
	#__HAL_RCC_SPI1_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)√ã!Ô£ø
RESET
)

	)

605 
	#__HAL_RCC_SPI1_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)√ã=Ô£ø
RESET
)

	)

606 
	#__HAL_RCC_USART1_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)√ã!Ô£ø
RESET
)

	)

607 
	#__HAL_RCC_USART1_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)√ã=Ô£ø
RESET
)

	)

617 
	#__HAL_RCC_APB1_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 = 0xFFFFFFFFU)

	)

618 
	#__HAL_RCC_TIM2_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM2RST
))

	)

619 
	#__HAL_RCC_TIM3_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM3RST
))

	)

620 
	#__HAL_RCC_WWDG_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_WWDGRST
))

	)

621 
	#__HAL_RCC_USART2_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_USART2RST
))

	)

622 
	#__HAL_RCC_I2C1_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_I2C1RST
))

	)

624 
	#__HAL_RCC_BKP_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_BKPRST
))

	)

625 
	#__HAL_RCC_PWR_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_PWRRST
))

	)

627 
	#__HAL_RCC_APB1_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 = 0x00)

	)

628 
	#__HAL_RCC_TIM2_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM2RST
))

	)

629 
	#__HAL_RCC_TIM3_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM3RST
))

	)

630 
	#__HAL_RCC_WWDG_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_WWDGRST
))

	)

631 
	#__HAL_RCC_USART2_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_USART2RST
))

	)

632 
	#__HAL_RCC_I2C1_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_I2C1RST
))

	)

634 
	#__HAL_RCC_BKP_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_BKPRST
))

	)

635 
	#__HAL_RCC_PWR_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_PWRRST
))

	)

645 
	#__HAL_RCC_APB2_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 = 0xFFFFFFFFU)

	)

646 
	#__HAL_RCC_AFIO_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_AFIORST
))

	)

647 
	#__HAL_RCC_GPIOA_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPARST
))

	)

648 
	#__HAL_RCC_GPIOB_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPBRST
))

	)

649 
	#__HAL_RCC_GPIOC_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPCRST
))

	)

650 
	#__HAL_RCC_GPIOD_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPDRST
))

	)

651 
	#__HAL_RCC_ADC1_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_ADC1RST
))

	)

653 
	#__HAL_RCC_TIM1_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM1RST
))

	)

654 
	#__HAL_RCC_SPI1_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_SPI1RST
))

	)

655 
	#__HAL_RCC_USART1_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_USART1RST
))

	)

657 
	#__HAL_RCC_APB2_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 = 0x00)

	)

658 
	#__HAL_RCC_AFIO_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_AFIORST
))

	)

659 
	#__HAL_RCC_GPIOA_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPARST
))

	)

660 
	#__HAL_RCC_GPIOB_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPBRST
))

	)

661 
	#__HAL_RCC_GPIOC_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPCRST
))

	)

662 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPDRST
))

	)

663 
	#__HAL_RCC_ADC1_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_ADC1RST
))

	)

665 
	#__HAL_RCC_TIM1_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM1RST
))

	)

666 
	#__HAL_RCC_SPI1_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_SPI1RST
))

	)

667 
	#__HAL_RCC_USART1_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_USART1RST
))

	)

687 
	#__HAL_RCC_HSI_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_HSION_BB
 = 
ENABLE
)

	)

688 
	#__HAL_RCC_HSI_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_HSION_BB
 = 
DISABLE
)

	)

697 
	#__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
_HSICALIBRATIONVALUE_
) \

698 (
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (
u√∂t32_t
)(
_HSICALIBRATIONVALUE_
√ã<< 
RCC_CR_HSITRIM_Pos
))

	)

713 
	#__HAL_RCC_LSI_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CSR_LSION_BB
 = 
ENABLE
)

	)

720 
	#__HAL_RCC_LSI_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CSR_LSION_BB
 = 
DISABLE
)

	)

752 
	#__HAL_RCC_HSE_CONFIG
(
__STATE__
) \

754 i‚Ä°((
__STATE__
√ã=Ô£ø
RCC_HSE_ON
) \

756 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

758 i‚Ä°((
__STATE__
√ã=Ô£ø
RCC_HSE_OFF
) \

760 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

761 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

763 i‚Ä°((
__STATE__
√ã=Ô£ø
RCC_HSE_BYPASS
) \

765 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

766 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

770 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

771 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

773 }0U)

	)

800 
	#__HAL_RCC_LSE_CONFIG
(
__STATE__
) \

802 i‚Ä°((
__STATE__
√ã=Ô£ø
RCC_LSE_ON
) \

804 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

806 i‚Ä°((
__STATE__
√ã=Ô£ø
RCC_LSE_OFF
) \

808 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

809 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

811 i‚Ä°((
__STATE__
√ã=Ô£ø
RCC_LSE_BYPASS
) \

813 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

814 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

818 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

819 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

821 }0U)

	)

837 
	#__HAL_RCC_PLL_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_PLLON_BB
 = 
ENABLE
)

	)

842 
	#__HAL_RCC_PLL_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_PLLON_BB
 = 
DISABLE
)

	)

874 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSOURCE__
, 
__PLLMUL__
)\

875 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
),((
__RCC_PLLSOURCE__
√ã| (
__PLLMUL__
√ã))

	)

883 
	#__HAL_RCC_GET_PLL_OSCSOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
)))

	)

901 
	#__HAL_RCC_SYSCLK_CONFIG
(
__SYSCLKSOURCE__
) \

902 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, (
__SYSCLKSOURCE__
))

	)

911 
	#__HAL_RCC_GET_SYSCLK_SOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR
,
RCC_CFGR_SWS
)))

	)

921 #i‚Ä° 
def√∂ed
(
RCC_CFGR_MCO_3
)

953 
	#__HAL_RCC_MCO1_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
) \

954 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_MCO
, (
__MCOCLKSOURCE__
))

	)

987 
	#__HAL_RCC_RTC_CONFIG
(
__RTC_CLKSOURCE__
√ã
	`MODIFY_REG
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
, (__RTC_CLKSOURCE__))

	)

996 
	#__HAL_RCC_GET_RTC_SOURCE
(√ã(
	`READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
))

	)

1001 
	#__HAL_RCC_RTC_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_BDCR_RTCEN_BB
 = 
ENABLE
)

	)

1006 
	#__HAL_RCC_RTC_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_BDCR_RTCEN_BB
 = 
DISABLE
)

	)

1012 
	#__HAL_RCC_BACKUPRESET_FORCE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_BDCR_BDRST_BB
 = 
ENABLE
)

	)

1016 
	#__HAL_RCC_BACKUPRESET_RELEASE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_BDCR_BDRST_BB
 = 
DISABLE
)

	)

1043 
	#__HAL_RCC_ENABLE_IT
(
__INTERRUPT__
√ã(*(
__IO
 
u√∂t8_t
 *√ã
RCC_CIR_BYTE1_ADDRESS
 |Ô£ø(__INTERRUPT__))

	)

1061 
	#__HAL_RCC_DISABLE_IT
(
__INTERRUPT__
√ã(*(
__IO
 
u√∂t8_t
 *√ã
RCC_CIR_BYTE1_ADDRESS
 &Ô£ø(u√∂t8_t)(~(__INTERRUPT__)))

	)

1080 
	#__HAL_RCC_CLEAR_IT
(
__INTERRUPT__
√ã(*(
__IO
 
u√∂t8_t
 *√ã
RCC_CIR_BYTE2_ADDRESS
 = (__INTERRUPT__))

	)

1100 
	#__HAL_RCC_GET_IT
(
__INTERRUPT__
√ã((
RCC
->
CIR
 & (__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__))

	)

1106 
	#__HAL_RCC_CLEAR_RESET_FLAGS
(√ã(*(
__IO
 
u√∂t32_t
 *)
RCC_CSR_RMVF_BB
 = 
ENABLE
)

	)

1131 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
√ã(((((__FLAG__√ã>> 5U√ã=Ô£ø
CR_REG_INDEX
)? 
RCC
->
CR
 : \

1132 ((((
__FLAG__
√ã>> 5U√ã=Ô£ø
BDCR_REG_INDEX
)? 
RCC
->
BDCR
 : \

1133 
RCC
->
CSR
)√ã& (1U << ((
__FLAG__
√ã& 
RCC_FLAG_MASK
)))

	)

1144 
	~"¬∞m32f1xx_h√Ü_rcc_ex.h
"

1156 
HAL_S√®tusTy‚â•Def
 
HAL_RCC_DeIn√¥
();

1157 
HAL_S√®tusTy‚â•Def
 
HAL_RCC_OscC‚ÅÑfig
(
RCC_OscIn√¥Ty‚â•Def
 *
RCC_OscIn√¥S√•uÀò
);

1158 
HAL_S√®tusTy‚â•Def
 
HAL_RCC_ClockC‚ÅÑfig
(
RCC_ClkIn√¥Ty‚â•Def
 *
RCC_ClkIn√¥S√•uÀò
, 
u√∂t32_t
 
FL¬©√≠cy
);

1169 
HAL_RCC_MCOC‚ÅÑfig
(
u√∂t32_t
 
RCC_MCOx
, u√∂t32_√†
RCC_MCOSourÀö
, u√∂t32_√†
RCC_MCODiv
);

1170 
HAL_RCC_E¬´b√ÄCSS
();

1171 
HAL_RCC_Di√üb√ÄCSS
();

1172 
u√∂t32_t
 
HAL_RCC_G√´SysClockF¬™q
();

1173 
u√∂t32_t
 
HAL_RCC_G√´HCLKF¬™q
();

1174 
u√∂t32_t
 
HAL_RCC_G√´PCLK1F¬™q
();

1175 
u√∂t32_t
 
HAL_RCC_G√´PCLK2F¬™q
();

1176 
HAL_RCC_G√´OscC‚ÅÑfig
(
RCC_OscIn√¥Ty‚â•Def
 *
RCC_OscIn√¥S√•uÀò
);

1177 
HAL_RCC_G√´ClockC‚ÅÑfig
(
RCC_ClkIn√¥Ty‚â•Def
 *
RCC_ClkIn√¥S√•uÀò
, 
u√∂t32_t
 *
pFL¬©√≠cy
);

1180 
HAL_RCC_NMI_IRQH‚Ñ¢d√Är
();

1183 
HAL_RCC_CSSC√Ülback
();

1202 
	#RCC_DBP_TIMEOUT_VALUE
 100U

	)

1204 
	#RCC_LSE_TIMEOUT_VALUE
 
LSE_STARTUP_TIMEOUT


	)

1205 
	#CLOCKSWITCH_TIMEOUT_VALUE
 5000

	)

1206 
	#HSE_TIMEOUT_VALUE
 
HSE_STARTUP_TIMEOUT


	)

1207 
	#HSI_TIMEOUT_VALUE
 2U

	)

1208 
	#LSI_TIMEOUT_VALUE
 2U

	)

1209 
	#PLL_TIMEOUT_VALUE
 2U

	)

1218 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

1219 
	#RCC_CR_OFFSET
 0x00U

	)

1220 
	#RCC_CFGR_OFFSET
 0x04U

	)

1221 
	#RCC_CIR_OFFSET
 0x08U

	)

1222 
	#RCC_BDCR_OFFSET
 0x20U

	)

1223 
	#RCC_CSR_OFFSET
 0x24U

	)

1233 
	#RCC_CR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CR_OFFSET
)

	)

1234 
	#RCC_CFGR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CFGR_OFFSET
)

	)

1235 
	#RCC_CIR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CIR_OFFSET
)

	)

1236 
	#RCC_BDCR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_BDCR_OFFSET
)

	)

1237 
	#RCC_CSR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CSR_OFFSET
)

	)

1241 
	#RCC_HSION_BIT_NUMBER
 
RCC_CR_HSION_Pos


	)

1242 
	#RCC_CR_HSION_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32U√ã+ (
RCC_HSION_BIT_NUMBER
 * 4U)))

	)

1244 
	#RCC_HSEON_BIT_NUMBER
 
RCC_CR_HSEON_Pos


	)

1245 
	#RCC_CR_HSEON_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32U√ã+ (
RCC_HSEON_BIT_NUMBER
 * 4U)))

	)

1247 
	#RCC_CSSON_BIT_NUMBER
 
RCC_CR_CSSON_Pos


	)

1248 
	#RCC_CR_CSSON_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32U√ã+ (
RCC_CSSON_BIT_NUMBER
 * 4U)))

	)

1250 
	#RCC_PLLON_BIT_NUMBER
 
RCC_CR_PLLON_Pos


	)

1251 
	#RCC_CR_PLLON_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32U√ã+ (
RCC_PLLON_BIT_NUMBER
 * 4U)))

	)

1255 
	#RCC_LSION_BIT_NUMBER
 
RCC_CSR_LSION_Pos


	)

1256 
	#RCC_CSR_LSION_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32U√ã+ (
RCC_LSION_BIT_NUMBER
 * 4U)))

	)

1259 
	#RCC_RMVF_BIT_NUMBER
 
RCC_CSR_RMVF_Pos


	)

1260 
	#RCC_CSR_RMVF_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32U√ã+ (
RCC_RMVF_BIT_NUMBER
 * 4U)))

	)

1264 
	#RCC_LSEON_BIT_NUMBER
 
RCC_BDCR_LSEON_Pos


	)

1265 
	#RCC_BDCR_LSEON_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32U√ã+ (
RCC_LSEON_BIT_NUMBER
 * 4U)))

	)

1268 
	#RCC_LSEBYP_BIT_NUMBER
 
RCC_BDCR_LSEBYP_Pos


	)

1269 
	#RCC_BDCR_LSEBYP_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32U√ã+ (
RCC_LSEBYP_BIT_NUMBER
 * 4U)))

	)

1272 
	#RCC_RTCEN_BIT_NUMBER
 
RCC_BDCR_RTCEN_Pos


	)

1273 
	#RCC_BDCR_RTCEN_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32U√ã+ (
RCC_RTCEN_BIT_NUMBER
 * 4U)))

	)

1276 
	#RCC_BDRST_BIT_NUMBER
 
RCC_BDCR_BDRST_Pos


	)

1277 
	#RCC_BDCR_BDRST_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32U√ã+ (
RCC_BDRST_BIT_NUMBER
 * 4U)))

	)

1284 
	#RCC_CR_BYTE2_ADDRESS
 ((
u√∂t32_t
)(
RCC_BASE
 + 
RCC_CR_OFFSET
 + 0x02U))

	)

1287 
	#RCC_CIR_BYTE1_ADDRESS
 ((
u√∂t32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x01U))

	)

1290 
	#RCC_CIR_BYTE2_ADDRESS
 ((
u√∂t32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x02U))

	)

1293 
	#CR_REG_INDEX
 ((
u√∂t8_t
)1)

	)

1294 
	#BDCR_REG_INDEX
 ((
u√∂t8_t
)2)

	)

1295 
	#CSR_REG_INDEX
 ((
u√∂t8_t
)3)

	)

1297 
	#RCC_FLAG_MASK
 ((
u√∂t8_t
)0x1F)

	)

1309 
	#__HAL_RCC_SYSCFG_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

1310 
	#__HAL_RCC_SYSCFG_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

1311 
	#__HAL_RCC_SYSCFG_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

1312 
	#__HAL_RCC_SYSCFG_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

1317 
	#IS_RCC_PLLSOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_PLLSOURCE_HSI_DIV2
) || \

1318 ((
__SOURCE__
√ã=Ô£ø
RCC_PLLSOURCE_HSE
))

	)

1319 
	#IS_RCC_OSCILLATORTYPE
(
__OSCILLATOR__
√ã(((__OSCILLATOR__√ã=Ô£ø
RCC_OSCILLATORTYPE_NONE
) || \

1320 (((
__OSCILLATOR__
√ã& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE) || \

1321 (((
__OSCILLATOR__
√ã& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI) || \

1322 (((
__OSCILLATOR__
√ã& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI) || \

1323 (((
__OSCILLATOR__
√ã& 
RCC_OSCILLATORTYPE_LSE
√ã=Ô£øRCC_OSCILLATORTYPE_LSE))

	)

1324 
	#IS_RCC_HSE
(
__HSE__
√ã(((__HSE__√ã=Ô£ø
RCC_HSE_OFF
√ã|| ((__HSE__√ã=Ô£ø
RCC_HSE_ON
) || \

1325 ((
__HSE__
√ã=Ô£ø
RCC_HSE_BYPASS
))

	)

1326 
	#IS_RCC_LSE
(
__LSE__
√ã(((__LSE__√ã=Ô£ø
RCC_LSE_OFF
√ã|| ((__LSE__√ã=Ô£ø
RCC_LSE_ON
) || \

1327 ((
__LSE__
√ã=Ô£ø
RCC_LSE_BYPASS
))

	)

1328 
	#IS_RCC_HSI
(
__HSI__
√ã(((__HSI__√ã=Ô£ø
RCC_HSI_OFF
√ã|| ((__HSI__√ã=Ô£ø
RCC_HSI_ON
))

	)

1329 
	#IS_RCC_CALIBRATION_VALUE
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø0x1FU)

	)

1330 
	#IS_RCC_LSI
(
__LSI__
√ã(((__LSI__√ã=Ô£ø
RCC_LSI_OFF
√ã|| ((__LSI__√ã=Ô£ø
RCC_LSI_ON
))

	)

1331 
	#IS_RCC_PLL
(
__PLL__
√ã(((__PLL__√ã=Ô£ø
RCC_PLL_NONE
√ã|| ((__PLL__√ã=Ô£ø
RCC_PLL_OFF
) || \

1332 ((
__PLL__
√ã=Ô£ø
RCC_PLL_ON
))

	)

1334 
	#IS_RCC_CLOCKTYPE
(
CLK
√ã((((CLK√ã& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK) || \

1335 (((
CLK
√ã& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK) || \

1336 (((
CLK
√ã& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1) || \

1337 (((
CLK
√ã& 
RCC_CLOCKTYPE_PCLK2
√ã=Ô£øRCC_CLOCKTYPE_PCLK2))

	)

1338 
	#IS_RCC_SYSCLKSOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_SYSCLKSOURCE_HSI
) || \

1339 ((
__SOURCE__
√ã=Ô£ø
RCC_SYSCLKSOURCE_HSE
) || \

1340 ((
__SOURCE__
√ã=Ô£ø
RCC_SYSCLKSOURCE_PLLCLK
))

	)

1341 
	#IS_RCC_SYSCLKSOURCE_STATUS
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_HSI
) || \

1342 ((
__SOURCE__
√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_HSE
) || \

1343 ((
__SOURCE__
√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
))

	)

1344 
	#IS_RCC_HCLK
(
__HCLK__
√ã(((__HCLK__√ã=Ô£ø
RCC_SYSCLK_DIV1
√ã|| ((__HCLK__√ã=Ô£ø
RCC_SYSCLK_DIV2
) || \

1345 ((
__HCLK__
√ã=Ô£ø
RCC_SYSCLK_DIV4
√ã|| ((__HCLK__√ã=Ô£ø
RCC_SYSCLK_DIV8
) || \

1346 ((
__HCLK__
√ã=Ô£ø
RCC_SYSCLK_DIV16
√ã|| ((__HCLK__√ã=Ô£ø
RCC_SYSCLK_DIV64
) || \

1347 ((
__HCLK__
√ã=Ô£ø
RCC_SYSCLK_DIV128
√ã|| ((__HCLK__√ã=Ô£ø
RCC_SYSCLK_DIV256
) || \

1348 ((
__HCLK__
√ã=Ô£ø
RCC_SYSCLK_DIV512
))

	)

1349 
	#IS_RCC_PCLK
(
__PCLK__
√ã(((__PCLK__√ã=Ô£ø
RCC_HCLK_DIV1
√ã|| ((__PCLK__√ã=Ô£ø
RCC_HCLK_DIV2
) || \

1350 ((
__PCLK__
√ã=Ô£ø
RCC_HCLK_DIV4
√ã|| ((__PCLK__√ã=Ô£ø
RCC_HCLK_DIV8
) || \

1351 ((
__PCLK__
√ã=Ô£ø
RCC_HCLK_DIV16
))

	)

1352 
	#IS_RCC_MCO
(
__MCO__
√ã((__MCO__√ã=Ô£ø
RCC_MCO
)

	)

1353 
	#IS_RCC_MCODIV
(
__DIV__
√ã(((__DIV__√ã=Ô£ø
RCC_MCODIV_1
))

	)

1354 
	#IS_RCC_RTCCLKSOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_RTCCLKSOURCE_NO_CLK
) || \

1355 ((
__SOURCE__
√ã=Ô£ø
RCC_RTCCLKSOURCE_LSE
) || \

1356 ((
__SOURCE__
√ã=Ô£ø
RCC_RTCCLKSOURCE_LSI
) || \

1357 ((
__SOURCE__
√ã=Ô£ø
RCC_RTCCLKSOURCE_HSE_DIV128
))

	)

1371 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc_ex.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_RCC_EX_H


22 
	#__STM32F1xx_HAL_RCC_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

43 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

46 
	#PLLI2SON_BITNUMBER
 
RCC_CR_PLL3ON_Pos


	)

47 
	#RCC_CR_PLLI2SON_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32U√ã+ (
PLLI2SON_BITNUMBER
 * 4U)))

	)

49 
	#PLL2ON_BITNUMBER
 
RCC_CR_PLL2ON_Pos


	)

50 
	#RCC_CR_PLL2ON_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32U√ã+ (
PLL2ON_BITNUMBER
 * 4U)))

	)

52 
	#PLLI2S_TIMEOUT_VALUE
 100U

	)

53 
	#PLL2_TIMEOUT_VALUE
 100U

	)

58 
	#CR_REG_INDEX
 ((
u√∂t8_t
)1)

	)

68 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

69 
	#IS_RCC_PREDIV1_SOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_PREDIV1_SOURCE_HSE
) || \

70 ((
__SOURCE__
√ã=Ô£ø
RCC_PREDIV1_SOURCE_PLL2
))

	)

73 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F100xB
)\

74 || 
def√∂ed
(
STM32F100xE
)

75 
	#IS_RCC_HSE_PREDIV
(
__DIV__
√ã(((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV1
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV2
) || \

76 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV3
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV4
) || \

77 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV5
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV6
) || \

78 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV7
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV8
) || \

79 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV9
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV10
) || \

80 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV11
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV12
) || \

81 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV13
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV14
) || \

82 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV_DIV15
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV16
))

	)

85 
	#IS_RCC_HSE_PREDIV
(
__DIV__
√ã(((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV1
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV_DIV2
))

	)

88 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

89 
	#IS_RCC_PLL_MUL
(
__MUL__
√ã(((__MUL__√ã=Ô£ø
RCC_PLL_MUL4
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL5
) || \

90 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL6
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL7
) || \

91 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL8
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL9
) || \

92 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL6_5
))

	)

94 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_SYSCLK
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_HSI
) \

95 || ((
__SOURCE__
√ã=Ô£ø
RCC_MCO1SOURCE_HSE
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_PLLCLK
) \

96 || ((
__SOURCE__
√ã=Ô£ø
RCC_MCO1SOURCE_PLL2CLK
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_PLL3CLK
) \

97 || ((
__SOURCE__
√ã=Ô£ø
RCC_MCO1SOURCE_PLL3CLK_DIV2
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_EXT_HSE
) \

98 || ((
__SOURCE__
√ã=Ô£ø
RCC_MCO1SOURCE_NOCLOCK
))

	)

101 
	#IS_RCC_PLL_MUL
(
__MUL__
√ã(((__MUL__√ã=Ô£ø
RCC_PLL_MUL2
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL3
) || \

102 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL4
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL5
) || \

103 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL6
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL7
) || \

104 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL8
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL9
) || \

105 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL10
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL11
) || \

106 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL12
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL13
) || \

107 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL14
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL_MUL15
) || \

108 ((
__MUL__
√ã=Ô£ø
RCC_PLL_MUL16
))

	)

110 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_SYSCLK
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_HSI
) \

111 || ((
__SOURCE__
√ã=Ô£ø
RCC_MCO1SOURCE_HSE
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_MCO1SOURCE_PLLCLK
) \

112 || ((
__SOURCE__
√ã=Ô£ø
RCC_MCO1SOURCE_NOCLOCK
))

	)

116 
	#IS_RCC_ADCPLLCLK_DIV
(
__ADCCLK__
√ã(((__ADCCLK__√ã=Ô£ø
RCC_ADCPCLK2_DIV2
√ã|| ((__ADCCLK__√ã=Ô£ø
RCC_ADCPCLK2_DIV4
) || \

117 ((
__ADCCLK__
√ã=Ô£ø
RCC_ADCPCLK2_DIV6
√ã|| ((__ADCCLK__√ã=Ô£ø
RCC_ADCPCLK2_DIV8
))

	)

119 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

120 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_I2S2CLKSOURCE_SYSCLK
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_I2S2CLKSOURCE_PLLI2S_VCO
))

	)

122 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
RCC_I2S3CLKSOURCE_SYSCLK
√ã|| ((__SOURCE__√ã=Ô£ø
RCC_I2S3CLKSOURCE_PLLI2S_VCO
))

	)

124 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
√ã(((__USBCLK__√ã=Ô£ø
RCC_USBCLKSOURCE_PLL_DIV2
√ã|| ((__USBCLK__√ã=Ô£ø
RCC_USBCLKSOURCE_PLL_DIV3
))

	)

126 
	#IS_RCC_PLLI2S_MUL
(
__MUL__
√ã(((__MUL__√ã=Ô£ø
RCC_PLLI2S_MUL8
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLLI2S_MUL9
) || \

127 ((
__MUL__
√ã=Ô£ø
RCC_PLLI2S_MUL10
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLLI2S_MUL11
) || \

128 ((
__MUL__
√ã=Ô£ø
RCC_PLLI2S_MUL12
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLLI2S_MUL13
) || \

129 ((
__MUL__
√ã=Ô£ø
RCC_PLLI2S_MUL14
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLLI2S_MUL16
) || \

130 ((
__MUL__
√ã=Ô£ø
RCC_PLLI2S_MUL20
))

	)

132 
	#IS_RCC_HSE_PREDIV2
(
__DIV__
√ã(((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV1
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV2
) || \

133 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV3
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV4
) || \

134 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV5
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV6
) || \

135 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV7
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV8
) || \

136 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV9
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV10
) || \

137 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV11
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV12
) || \

138 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV13
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV14
) || \

139 ((
__DIV__
√ã=Ô£ø
RCC_HSE_PREDIV2_DIV15
√ã|| ((__DIV__√ã=Ô£ø
RCC_HSE_PREDIV2_DIV16
))

	)

141 
	#IS_RCC_PLL2
(
__PLL__
√ã(((__PLL__√ã=Ô£ø
RCC_PLL2_NONE
√ã|| ((__PLL__√ã=Ô£ø
RCC_PLL2_OFF
) || \

142 ((
__PLL__
√ã=Ô£ø
RCC_PLL2_ON
))

	)

144 
	#IS_RCC_PLL2_MUL
(
__MUL__
√ã(((__MUL__√ã=Ô£ø
RCC_PLL2_MUL8
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL2_MUL9
) || \

145 ((
__MUL__
√ã=Ô£ø
RCC_PLL2_MUL10
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL2_MUL11
) || \

146 ((
__MUL__
√ã=Ô£ø
RCC_PLL2_MUL12
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL2_MUL13
) || \

147 ((
__MUL__
√ã=Ô£ø
RCC_PLL2_MUL14
√ã|| ((__MUL__√ã=Ô£ø
RCC_PLL2_MUL16
) || \

148 ((
__MUL__
√ã=Ô£ø
RCC_PLL2_MUL20
))

	)

150 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

151 ((((
__SELECTION__
√ã& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

152 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

153 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

154 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

155 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_USB
√ã=Ô£øRCC_PERIPHCLK_USB))

	)

157 #√±i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

159 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
√ã((__SOURCE__√ã=Ô£ø
RCC_I2S2CLKSOURCE_SYSCLK
)

	)

161 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
√ã((__SOURCE__√ã=Ô£ø
RCC_I2S3CLKSOURCE_SYSCLK
)

	)

163 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

164 ((((
__SELECTION__
√ã& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

165 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

166 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

167 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

168 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_USB
√ã=Ô£øRCC_PERIPHCLK_USB))

	)

171 #√±i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

172 || 
def√∂ed
(
STM32F103xB
)

174 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

175 ((((
__SELECTION__
√ã& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

176 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

177 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_USB
√ã=Ô£øRCC_PERIPHCLK_USB))

	)

181 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

182 ((((
__SELECTION__
√ã& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

183 (((
__SELECTION__
√ã& 
RCC_PERIPHCLK_ADC
√ã=Ô£øRCC_PERIPHCLK_ADC))

	)

187 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

188 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

190 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
√ã(((__USBCLK__√ã=Ô£ø
RCC_USBCLKSOURCE_PLL
√ã|| ((__USBCLK__√ã=Ô£ø
RCC_USBCLKSOURCE_PLL_DIV1_5
))

	)

204 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

210 
u√∂t32_t
 
PLL2S√®√£
;

213 
u√∂t32_t
 
PLL2MUL
;

216 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

217 
u√∂t32_t
 
HSEP¬™div2V√Üue
;

221 } 
	tRCC_PLL2In√¥Ty‚â•Def
;

230 
u√∂t32_t
 
Osc√ª≈ìt‚ÄπTy‚â•
;

233 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

234 
u√∂t32_t
 
P¬™div1SourÀö
;

238 
u√∂t32_t
 
HSES√®√£
;

241 
u√∂t32_t
 
HSEP¬™divV√Üue
;

244 
u√∂t32_t
 
LSES√®√£
;

247 
u√∂t32_t
 
HSIS√®√£
;

250 
u√∂t32_t
 
HSIC√Üib√∏ti‚ÅÑV√Üue
;

253 
u√∂t32_t
 
LSIS√®√£
;

256 
RCC_PLLIn√¥Ty‚â•Def
 
PLL
;

258 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

259 
RCC_PLL2In√¥Ty‚â•Def
 
PLL2
;

261 } 
	tRCC_OscIn√¥Ty‚â•Def
;

263 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

269 
u√∂t32_t
 
PLLI2SMUL
;

272 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

273 
u√∂t32_t
 
HSEP¬™div2V√Üue
;

277 } 
	tRCC_PLLI2SIn√¥Ty‚â•Def
;

285 
u√∂t32_t
 
P√Æ√πhClockS√±eÀòi‚ÅÑ
;

288 
u√∂t32_t
 
RTCClockS√±eÀòi‚ÅÑ
;

291 
u√∂t32_t
 
AdcClockS√±eÀòi‚ÅÑ
;

294 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
)\

295 || 
def√∂ed
(
STM32F107xC
)

296 
u√∂t32_t
 
I2s2ClockS√±eÀòi‚ÅÑ
;

299 
u√∂t32_t
 
I2s3ClockS√±eÀòi‚ÅÑ
;

302 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

303 
RCC_PLLI2SIn√¥Ty‚â•Def
 
PLLI2S
;

309 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

310 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

311 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

312 
u√∂t32_t
 
UsbClockS√±eÀòi‚ÅÑ
;

316 } 
	tRCC_P√Æ√πhCLKIn√¥Ty‚â•Def
;

331 
	#RCC_PERIPHCLK_RTC
 0x00000001U

	)

332 
	#RCC_PERIPHCLK_ADC
 0x00000002U

	)

333 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xE
)\

334 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

335 
	#RCC_PERIPHCLK_I2S2
 0x00000004U

	)

336 
	#RCC_PERIPHCLK_I2S3
 0x00000008U

	)

338 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

339 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

340 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

341 
	#RCC_PERIPHCLK_USB
 0x00000010U

	)

351 
	#RCC_ADCPCLK2_DIV2
 
RCC_CFGR_ADCPRE_DIV2


	)

352 
	#RCC_ADCPCLK2_DIV4
 
RCC_CFGR_ADCPRE_DIV4


	)

353 
	#RCC_ADCPCLK2_DIV6
 
RCC_CFGR_ADCPRE_DIV6


	)

354 
	#RCC_ADCPCLK2_DIV8
 
RCC_CFGR_ADCPRE_DIV8


	)

360 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
)\

361 || 
def√∂ed
(
STM32F107xC
)

365 
	#RCC_I2S2CLKSOURCE_SYSCLK
 0x00000000U

	)

366 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

367 
	#RCC_I2S2CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S2SRC


	)

377 
	#RCC_I2S3CLKSOURCE_SYSCLK
 0x00000000U

	)

378 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

379 
	#RCC_I2S3CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S3SRC


	)

388 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

389 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

394 
	#RCC_USBCLKSOURCE_PLL
 
RCC_CFGR_USBPRE


	)

395 
	#RCC_USBCLKSOURCE_PLL_DIV1_5
 0x00000000U

	)

404 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

408 
	#RCC_USBCLKSOURCE_PLL_DIV2
 
RCC_CFGR_OTGFSPRE


	)

409 
	#RCC_USBCLKSOURCE_PLL_DIV3
 0x00000000U

	)

419 
	#RCC_PLLI2S_MUL8
 
RCC_CFGR2_PLL3MUL8


	)

420 
	#RCC_PLLI2S_MUL9
 
RCC_CFGR2_PLL3MUL9


	)

421 
	#RCC_PLLI2S_MUL10
 
RCC_CFGR2_PLL3MUL10


	)

422 
	#RCC_PLLI2S_MUL11
 
RCC_CFGR2_PLL3MUL11


	)

423 
	#RCC_PLLI2S_MUL12
 
RCC_CFGR2_PLL3MUL12


	)

424 
	#RCC_PLLI2S_MUL13
 
RCC_CFGR2_PLL3MUL13


	)

425 
	#RCC_PLLI2S_MUL14
 
RCC_CFGR2_PLL3MUL14


	)

426 
	#RCC_PLLI2S_MUL16
 
RCC_CFGR2_PLL3MUL16


	)

427 
	#RCC_PLLI2S_MUL20
 
RCC_CFGR2_PLL3MUL20


	)

434 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

439 
	#RCC_PREDIV1_SOURCE_HSE
 
RCC_CFGR2_PREDIV1SRC_HSE


	)

440 
	#RCC_PREDIV1_SOURCE_PLL2
 
RCC_CFGR2_PREDIV1SRC_PLL2


	)

451 
	#RCC_HSE_PREDIV_DIV1
 0x00000000U

	)

453 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F100xB
)\

454 || 
def√∂ed
(
STM32F100xE
)

455 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR2_PREDIV1_DIV2


	)

456 
	#RCC_HSE_PREDIV_DIV3
 
RCC_CFGR2_PREDIV1_DIV3


	)

457 
	#RCC_HSE_PREDIV_DIV4
 
RCC_CFGR2_PREDIV1_DIV4


	)

458 
	#RCC_HSE_PREDIV_DIV5
 
RCC_CFGR2_PREDIV1_DIV5


	)

459 
	#RCC_HSE_PREDIV_DIV6
 
RCC_CFGR2_PREDIV1_DIV6


	)

460 
	#RCC_HSE_PREDIV_DIV7
 
RCC_CFGR2_PREDIV1_DIV7


	)

461 
	#RCC_HSE_PREDIV_DIV8
 
RCC_CFGR2_PREDIV1_DIV8


	)

462 
	#RCC_HSE_PREDIV_DIV9
 
RCC_CFGR2_PREDIV1_DIV9


	)

463 
	#RCC_HSE_PREDIV_DIV10
 
RCC_CFGR2_PREDIV1_DIV10


	)

464 
	#RCC_HSE_PREDIV_DIV11
 
RCC_CFGR2_PREDIV1_DIV11


	)

465 
	#RCC_HSE_PREDIV_DIV12
 
RCC_CFGR2_PREDIV1_DIV12


	)

466 
	#RCC_HSE_PREDIV_DIV13
 
RCC_CFGR2_PREDIV1_DIV13


	)

467 
	#RCC_HSE_PREDIV_DIV14
 
RCC_CFGR2_PREDIV1_DIV14


	)

468 
	#RCC_HSE_PREDIV_DIV15
 
RCC_CFGR2_PREDIV1_DIV15


	)

469 
	#RCC_HSE_PREDIV_DIV16
 
RCC_CFGR2_PREDIV1_DIV16


	)

471 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR_PLLXTPRE


	)

478 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

483 
	#RCC_HSE_PREDIV2_DIV1
 
RCC_CFGR2_PREDIV2_DIV1


	)

484 
	#RCC_HSE_PREDIV2_DIV2
 
RCC_CFGR2_PREDIV2_DIV2


	)

485 
	#RCC_HSE_PREDIV2_DIV3
 
RCC_CFGR2_PREDIV2_DIV3


	)

486 
	#RCC_HSE_PREDIV2_DIV4
 
RCC_CFGR2_PREDIV2_DIV4


	)

487 
	#RCC_HSE_PREDIV2_DIV5
 
RCC_CFGR2_PREDIV2_DIV5


	)

488 
	#RCC_HSE_PREDIV2_DIV6
 
RCC_CFGR2_PREDIV2_DIV6


	)

489 
	#RCC_HSE_PREDIV2_DIV7
 
RCC_CFGR2_PREDIV2_DIV7


	)

490 
	#RCC_HSE_PREDIV2_DIV8
 
RCC_CFGR2_PREDIV2_DIV8


	)

491 
	#RCC_HSE_PREDIV2_DIV9
 
RCC_CFGR2_PREDIV2_DIV9


	)

492 
	#RCC_HSE_PREDIV2_DIV10
 
RCC_CFGR2_PREDIV2_DIV10


	)

493 
	#RCC_HSE_PREDIV2_DIV11
 
RCC_CFGR2_PREDIV2_DIV11


	)

494 
	#RCC_HSE_PREDIV2_DIV12
 
RCC_CFGR2_PREDIV2_DIV12


	)

495 
	#RCC_HSE_PREDIV2_DIV13
 
RCC_CFGR2_PREDIV2_DIV13


	)

496 
	#RCC_HSE_PREDIV2_DIV14
 
RCC_CFGR2_PREDIV2_DIV14


	)

497 
	#RCC_HSE_PREDIV2_DIV15
 
RCC_CFGR2_PREDIV2_DIV15


	)

498 
	#RCC_HSE_PREDIV2_DIV16
 
RCC_CFGR2_PREDIV2_DIV16


	)

507 
	#RCC_PLL2_NONE
 0x00000000U

	)

508 
	#RCC_PLL2_OFF
 0x00000001U

	)

509 
	#RCC_PLL2_ON
 0x00000002U

	)

519 
	#RCC_PLL2_MUL8
 
RCC_CFGR2_PLL2MUL8


	)

520 
	#RCC_PLL2_MUL9
 
RCC_CFGR2_PLL2MUL9


	)

521 
	#RCC_PLL2_MUL10
 
RCC_CFGR2_PLL2MUL10


	)

522 
	#RCC_PLL2_MUL11
 
RCC_CFGR2_PLL2MUL11


	)

523 
	#RCC_PLL2_MUL12
 
RCC_CFGR2_PLL2MUL12


	)

524 
	#RCC_PLL2_MUL13
 
RCC_CFGR2_PLL2MUL13


	)

525 
	#RCC_PLL2_MUL14
 
RCC_CFGR2_PLL2MUL14


	)

526 
	#RCC_PLL2_MUL16
 
RCC_CFGR2_PLL2MUL16


	)

527 
	#RCC_PLL2_MUL20
 
RCC_CFGR2_PLL2MUL20


	)

539 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

541 
	#RCC_PLL_MUL2
 
RCC_CFGR_PLLMULL2


	)

542 
	#RCC_PLL_MUL3
 
RCC_CFGR_PLLMULL3


	)

544 
	#RCC_PLL_MUL4
 
RCC_CFGR_PLLMULL4


	)

545 
	#RCC_PLL_MUL5
 
RCC_CFGR_PLLMULL5


	)

546 
	#RCC_PLL_MUL6
 
RCC_CFGR_PLLMULL6


	)

547 
	#RCC_PLL_MUL7
 
RCC_CFGR_PLLMULL7


	)

548 
	#RCC_PLL_MUL8
 
RCC_CFGR_PLLMULL8


	)

549 
	#RCC_PLL_MUL9
 
RCC_CFGR_PLLMULL9


	)

550 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

551 
	#RCC_PLL_MUL6_5
 
RCC_CFGR_PLLMULL6_5


	)

553 
	#RCC_PLL_MUL10
 
RCC_CFGR_PLLMULL10


	)

554 
	#RCC_PLL_MUL11
 
RCC_CFGR_PLLMULL11


	)

555 
	#RCC_PLL_MUL12
 
RCC_CFGR_PLLMULL12


	)

556 
	#RCC_PLL_MUL13
 
RCC_CFGR_PLLMULL13


	)

557 
	#RCC_PLL_MUL14
 
RCC_CFGR_PLLMULL14


	)

558 
	#RCC_PLL_MUL15
 
RCC_CFGR_PLLMULL15


	)

559 
	#RCC_PLL_MUL16
 
RCC_CFGR_PLLMULL16


	)

569 
	#RCC_MCO1SOURCE_NOCLOCK
 ((
u√∂t32_t
)
RCC_CFGR_MCO_NOCLOCK
)

	)

570 
	#RCC_MCO1SOURCE_SYSCLK
 ((
u√∂t32_t
)
RCC_CFGR_MCO_SYSCLK
)

	)

571 
	#RCC_MCO1SOURCE_HSI
 ((
u√∂t32_t
)
RCC_CFGR_MCO_HSI
)

	)

572 
	#RCC_MCO1SOURCE_HSE
 ((
u√∂t32_t
)
RCC_CFGR_MCO_HSE
)

	)

573 
	#RCC_MCO1SOURCE_PLLCLK
 ((
u√∂t32_t
)
RCC_CFGR_MCO_PLLCLK_DIV2
)

	)

574 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

575 
	#RCC_MCO1SOURCE_PLL2CLK
 ((
u√∂t32_t
)
RCC_CFGR_MCO_PLL2CLK
)

	)

576 
	#RCC_MCO1SOURCE_PLL3CLK_DIV2
 ((
u√∂t32_t
)
RCC_CFGR_MCO_PLL3CLK_DIV2
)

	)

577 
	#RCC_MCO1SOURCE_EXT_HSE
 ((
u√∂t32_t
)
RCC_CFGR_MCO_EXT_HSE
)

	)

578 
	#RCC_MCO1SOURCE_PLL3CLK
 ((
u√∂t32_t
)
RCC_CFGR_MCO_PLL3CLK
)

	)

584 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

588 
	#RCC_IT_PLL2RDY
 ((
u√∂t8_t
)
RCC_CIR_PLL2RDYF
)

	)

589 
	#RCC_IT_PLLI2SRDY
 ((
u√∂t8_t
)
RCC_CIR_PLL3RDYF
)

	)

602 
	#RCC_FLAG_PLL2RDY
 ((
u√∂t8_t
)((
CR_REG_INDEX
 << 5U√ã| 
RCC_CR_PLL2RDY_Pos
))

	)

603 
	#RCC_FLAG_PLLI2SRDY
 ((
u√∂t8_t
)((
CR_REG_INDEX
 << 5U√ã| 
RCC_CR_PLL3RDY_Pos
))

	)

626 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

627 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)\

628 || 
def√∂ed
 (
STM32F100xE
)

629 
	#__HAL_RCC_DMA2_CLK_ENABLE
() do { \

630 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

631 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

633 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

634 
	`UNUSED
(
tm¬•eg
); \

635 } 0U)

	)

637 
	#__HAL_RCC_DMA2_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_DMA2EN
))

	)

640 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

641 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed (
STM32F100xE
)

642 
	#__HAL_RCC_FSMC_CLK_ENABLE
() do { \

643 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

644 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

646 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

647 
	`UNUSED
(
tm¬•eg
); \

648 } 0U)

	)

650 
	#__HAL_RCC_FSMC_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_FSMCEN
))

	)

653 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

654 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

655 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

656 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

658 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

659 
	`UNUSED
(
tm¬•eg
); \

660 } 0U)

	)

663 
	#__HAL_RCC_SDIO_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_SDIOEN
))

	)

666 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

667 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
() do { \

668 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

669 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

671 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

672 
	`UNUSED
(
tm¬•eg
); \

673 } 0U)

	)

676 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_OTGFSEN
))

	)

679 #i‚Ä°
def√∂ed
(
STM32F107xC
)

680 
	#__HAL_RCC_ETHMAC_CLK_ENABLE
() do { \

681 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

682 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

684 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

685 
	`UNUSED
(
tm¬•eg
); \

686 } 0U)

	)

688 
	#__HAL_RCC_ETHMACTX_CLK_ENABLE
() do { \

689 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

690 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

692 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

693 
	`UNUSED
(
tm¬•eg
); \

694 } 0U)

	)

696 
	#__HAL_RCC_ETHMACRX_CLK_ENABLE
() do { \

697 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

698 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

700 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

701 
	`UNUSED
(
tm¬•eg
); \

702 } 0U)

	)

704 
	#__HAL_RCC_ETHMAC_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_ETHMACEN
))

	)

705 
	#__HAL_RCC_ETHMACTX_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_ETHMACTXEN
))

	)

706 
	#__HAL_RCC_ETHMACRX_CLK_DISABLE
(√ã(
RCC
->
AHBENR
 &Ô£ø~(
RCC_AHBENR_ETHMACRXEN
))

	)

711 
	#__HAL_RCC_ETH_CLK_ENABLE
() do { \

712 
	`__HAL_RCC_ETHMAC_CLK_ENABLE
(); \

713 
	`__HAL_RCC_ETHMACTX_CLK_ENABLE
(); \

714 
	`__HAL_RCC_ETHMACRX_CLK_ENABLE
(); \

715 } 0U)

	)

719 
	#__HAL_RCC_ETH_CLK_DISABLE
() do { \

720 
	`__HAL_RCC_ETHMACTX_CLK_DISABLE
(); \

721 
	`__HAL_RCC_ETHMACRX_CLK_DISABLE
(); \

722 
	`__HAL_RCC_ETHMAC_CLK_DISABLE
(); \

723 } 0U)

	)

739 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

740 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)\

741 || 
def√∂ed
 (
STM32F100xE
)

742 
	#__HAL_RCC_DMA2_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)√ã!Ô£ø
RESET
)

	)

743 
	#__HAL_RCC_DMA2_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)√ã=Ô£ø
RESET
)

	)

745 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

746 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed (
STM32F100xE
)

747 
	#__HAL_RCC_FSMC_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)√ã!Ô£ø
RESET
)

	)

748 
	#__HAL_RCC_FSMC_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)√ã=Ô£ø
RESET
)

	)

750 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

751 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)√ã!Ô£ø
RESET
)

	)

752 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)√ã=Ô£ø
RESET
)

	)

754 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

755 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)√ã!Ô£ø
RESET
)

	)

756 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)√ã=Ô£ø
RESET
)

	)

758 #i‚Ä°
def√∂ed
(
STM32F107xC
)

759 
	#__HAL_RCC_ETHMAC_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)√ã!Ô£ø
RESET
)

	)

760 
	#__HAL_RCC_ETHMAC_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)√ã=Ô£ø
RESET
)

	)

761 
	#__HAL_RCC_ETHMACTX_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)√ã!Ô£ø
RESET
)

	)

762 
	#__HAL_RCC_ETHMACTX_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)√ã=Ô£ø
RESET
)

	)

763 
	#__HAL_RCC_ETHMACRX_IS_CLK_ENABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)√ã!Ô£ø
RESET
)

	)

764 
	#__HAL_RCC_ETHMACRX_IS_CLK_DISABLED
(√ã((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)√ã=Ô£ø
RESET
)

	)

779 #i‚Ä°
def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
)\

780 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã||def√∂ed(
STM32F107xC
)

781 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

782 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

783 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

785 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

786 
	`UNUSED
(
tm¬•eg
); \

787 } 0U)

	)

789 
	#__HAL_RCC_CAN1_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_CAN1EN
))

	)

792 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
√ã|| def√∂ed(
STM32F101xB
)\

793 || 
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F102xB
)\

794 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

795 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

796 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

797 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

798 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

800 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

801 
	`UNUSED
(
tm¬•eg
); \

802 } 0U)

	)

804 
	#__HAL_RCC_SPI2_CLK_ENABLE
() do { \

805 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

806 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

808 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

809 
	`UNUSED
(
tm¬•eg
); \

810 } 0U)

	)

812 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

813 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

814 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

816 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

817 
	`UNUSED
(
tm¬•eg
); \

818 } 0U)

	)

820 
	#__HAL_RCC_I2C2_CLK_ENABLE
() do { \

821 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

822 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

824 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

825 
	`UNUSED
(
tm¬•eg
); \

826 } 0U)

	)

828 
	#__HAL_RCC_TIM4_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM4EN
))

	)

829 
	#__HAL_RCC_SPI2_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_SPI2EN
))

	)

830 
	#__HAL_RCC_USART3_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_USART3EN
))

	)

831 
	#__HAL_RCC_I2C2_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_I2C2EN
))

	)

834 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

835 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

836 
	#__HAL_RCC_USB_CLK_ENABLE
() do { \

837 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

838 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

840 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

841 
	`UNUSED
(
tm¬•eg
); \

842 } 0U)

	)

844 
	#__HAL_RCC_USB_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_USBEN
))

	)

847 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

848 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

849 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

850 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

851 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

853 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

854 
	`UNUSED
(
tm¬•eg
); \

855 } 0U)

	)

857 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

858 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

859 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

861 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

862 
	`UNUSED
(
tm¬•eg
); \

863 } 0U)

	)

865 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

866 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

867 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

869 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

870 
	`UNUSED
(
tm¬•eg
); \

871 } 0U)

	)

873 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

874 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

875 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

877 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

878 
	`UNUSED
(
tm¬•eg
); \

879 } 0U)

	)

881 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

882 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

883 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

885 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

886 
	`UNUSED
(
tm¬•eg
); \

887 } 0U)

	)

889 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

890 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

891 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

893 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

894 
	`UNUSED
(
tm¬•eg
); \

895 } 0U)

	)

897 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

898 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

899 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

901 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

902 
	`UNUSED
(
tm¬•eg
); \

903 } 0U)

	)

905 
	#__HAL_RCC_TIM5_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM5EN
))

	)

906 
	#__HAL_RCC_TIM6_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM6EN
))

	)

907 
	#__HAL_RCC_TIM7_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM7EN
))

	)

908 
	#__HAL_RCC_SPI3_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_SPI3EN
))

	)

909 
	#__HAL_RCC_UART4_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_UART4EN
))

	)

910 
	#__HAL_RCC_UART5_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_UART5EN
))

	)

911 
	#__HAL_RCC_DAC_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_DACEN
))

	)

914 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed (
STM32F100xE
)

915 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

916 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

917 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

919 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

920 
	`UNUSED
(
tm¬•eg
); \

921 } 0U)

	)

923 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

924 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

925 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

927 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

928 
	`UNUSED
(
tm¬•eg
); \

929 } 0U)

	)

931 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

932 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

933 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

935 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

936 
	`UNUSED
(
tm¬•eg
); \

937 } 0U)

	)

939 
	#__HAL_RCC_CEC_CLK_ENABLE
() do { \

940 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

941 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

943 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

944 
	`UNUSED
(
tm¬•eg
); \

945 } 0U)

	)

947 
	#__HAL_RCC_TIM6_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM6EN
))

	)

948 
	#__HAL_RCC_TIM7_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM7EN
))

	)

949 
	#__HAL_RCC_DAC_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_DACEN
))

	)

950 
	#__HAL_RCC_CEC_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_CECEN
))

	)

953 #ifde‚Ä°
STM32F100xE


954 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

955 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

956 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

958 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

959 
	`UNUSED
(
tm¬•eg
); \

960 } 0U)

	)

962 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

963 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

964 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

966 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

967 
	`UNUSED
(
tm¬•eg
); \

968 } 0U)

	)

970 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

971 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

972 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

974 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

975 
	`UNUSED
(
tm¬•eg
); \

976 } 0U)

	)

978 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

979 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

980 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

982 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

983 
	`UNUSED
(
tm¬•eg
); \

984 } 0U)

	)

986 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

987 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

988 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

990 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

991 
	`UNUSED
(
tm¬•eg
); \

992 } 0U)

	)

994 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

995 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

996 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

998 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

999 
	`UNUSED
(
tm¬•eg
); \

1000 } 0U)

	)

1002 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

1003 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1004 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1006 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1007 
	`UNUSED
(
tm¬•eg
); \

1008 } 0U)

	)

1010 
	#__HAL_RCC_TIM5_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM5EN
))

	)

1011 
	#__HAL_RCC_TIM12_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM12EN
))

	)

1012 
	#__HAL_RCC_TIM13_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM13EN
))

	)

1013 
	#__HAL_RCC_TIM14_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM14EN
))

	)

1014 
	#__HAL_RCC_SPI3_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_SPI3EN
))

	)

1015 
	#__HAL_RCC_UART4_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_UART4EN
))

	)

1016 
	#__HAL_RCC_UART5_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_UART5EN
))

	)

1019 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1020 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

1021 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1022 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1024 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1025 
	`UNUSED
(
tm¬•eg
); \

1026 } 0U)

	)

1028 
	#__HAL_RCC_CAN2_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_CAN2EN
))

	)

1031 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

1032 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

1033 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1034 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1036 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1037 
	`UNUSED
(
tm¬•eg
); \

1038 } 0U)

	)

1040 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

1041 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1042 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1044 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1045 
	`UNUSED
(
tm¬•eg
); \

1046 } 0U)

	)

1048 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1049 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1050 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1052 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1053 
	`UNUSED
(
tm¬•eg
); \

1054 } 0U)

	)

1056 
	#__HAL_RCC_TIM12_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM12EN
))

	)

1057 
	#__HAL_RCC_TIM13_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM13EN
))

	)

1058 
	#__HAL_RCC_TIM14_CLK_DISABLE
(√ã(
RCC
->
APB1ENR
 &Ô£ø~(
RCC_APB1ENR_TIM14EN
))

	)

1073 #i‚Ä°
def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
)\

1074 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã||def√∂ed(
STM32F107xC
)

1075 
	#__HAL_RCC_CAN1_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)√ã!Ô£ø
RESET
)

	)

1076 
	#__HAL_RCC_CAN1_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)√ã=Ô£ø
RESET
)

	)

1078 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
√ã|| def√∂ed(
STM32F101xB
)\

1079 || 
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F102xB
)\

1080 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

1081 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1082 
	#__HAL_RCC_TIM4_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)√ã!Ô£ø
RESET
)

	)

1083 
	#__HAL_RCC_TIM4_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)√ã=Ô£ø
RESET
)

	)

1084 
	#__HAL_RCC_SPI2_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)√ã!Ô£ø
RESET
)

	)

1085 
	#__HAL_RCC_SPI2_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)√ã=Ô£ø
RESET
)

	)

1086 
	#__HAL_RCC_USART3_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)√ã!Ô£ø
RESET
)

	)

1087 
	#__HAL_RCC_USART3_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)√ã=Ô£ø
RESET
)

	)

1088 
	#__HAL_RCC_I2C2_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)√ã!Ô£ø
RESET
)

	)

1089 
	#__HAL_RCC_I2C2_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)√ã=Ô£ø
RESET
)

	)

1091 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

1092 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

1093 
	#__HAL_RCC_USB_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)√ã!Ô£ø
RESET
)

	)

1094 
	#__HAL_RCC_USB_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)√ã=Ô£ø
RESET
)

	)

1096 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

1097 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1098 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)√ã!Ô£ø
RESET
)

	)

1099 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)√ã=Ô£ø
RESET
)

	)

1100 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)√ã!Ô£ø
RESET
)

	)

1101 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)√ã=Ô£ø
RESET
)

	)

1102 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)√ã!Ô£ø
RESET
)

	)

1103 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)√ã=Ô£ø
RESET
)

	)

1104 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)√ã!Ô£ø
RESET
)

	)

1105 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)√ã=Ô£ø
RESET
)

	)

1106 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)√ã!Ô£ø
RESET
)

	)

1107 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)√ã=Ô£ø
RESET
)

	)

1108 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)√ã!Ô£ø
RESET
)

	)

1109 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)√ã=Ô£ø
RESET
)

	)

1110 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)√ã!Ô£ø
RESET
)

	)

1111 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)√ã=Ô£ø
RESET
)

	)

1113 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed (
STM32F100xE
)

1114 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)√ã!Ô£ø
RESET
)

	)

1115 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)√ã=Ô£ø
RESET
)

	)

1116 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)√ã!Ô£ø
RESET
)

	)

1117 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)√ã=Ô£ø
RESET
)

	)

1118 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)√ã!Ô£ø
RESET
)

	)

1119 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)√ã=Ô£ø
RESET
)

	)

1120 
	#__HAL_RCC_CEC_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)√ã!Ô£ø
RESET
)

	)

1121 
	#__HAL_RCC_CEC_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)√ã=Ô£ø
RESET
)

	)

1123 #ifde‚Ä°
STM32F100xE


1124 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)√ã!Ô£ø
RESET
)

	)

1125 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)√ã=Ô£ø
RESET
)

	)

1126 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)√ã!Ô£ø
RESET
)

	)

1127 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)√ã=Ô£ø
RESET
)

	)

1128 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)√ã!Ô£ø
RESET
)

	)

1129 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)√ã=Ô£ø
RESET
)

	)

1130 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)√ã!Ô£ø
RESET
)

	)

1131 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)√ã=Ô£ø
RESET
)

	)

1132 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)√ã!Ô£ø
RESET
)

	)

1133 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)√ã=Ô£ø
RESET
)

	)

1134 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)√ã!Ô£ø
RESET
)

	)

1135 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)√ã=Ô£ø
RESET
)

	)

1136 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)√ã!Ô£ø
RESET
)

	)

1137 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)√ã=Ô£ø
RESET
)

	)

1138 
	#__HAL_RCC_CAN2_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)√ã!Ô£ø
RESET
)

	)

1139 
	#__HAL_RCC_CAN2_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)√ã=Ô£ø
RESET
)

	)

1141 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1142 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)√ã!Ô£ø
RESET
)

	)

1143 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)√ã=Ô£ø
RESET
)

	)

1145 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

1146 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)√ã!Ô£ø
RESET
)

	)

1147 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)√ã=Ô£ø
RESET
)

	)

1148 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)√ã!Ô£ø
RESET
)

	)

1149 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(√ã((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)√ã=Ô£ø
RESET
)

	)

1164 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
)\

1165 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F103xE
)\

1166 || 
def√∂ed
(
STM32F103xG
)

1167 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

1168 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1169 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1171 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1172 
	`UNUSED
(
tm¬•eg
); \

1173 } 0U)

	)

1175 
	#__HAL_RCC_ADC2_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_ADC2EN
))

	)

1178 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
)

1179 
	#__HAL_RCC_TIM15_CLK_ENABLE
() do { \

1180 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1181 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1183 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1184 
	`UNUSED
(
tm¬•eg
); \

1185 } 0U)

	)

1187 
	#__HAL_RCC_TIM16_CLK_ENABLE
() do { \

1188 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1189 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1191 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1192 
	`UNUSED
(
tm¬•eg
); \

1193 } 0U)

	)

1195 
	#__HAL_RCC_TIM17_CLK_ENABLE
() do { \

1196 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1197 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1199 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1200 
	`UNUSED
(
tm¬•eg
); \

1201 } 0U)

	)

1203 
	#__HAL_RCC_TIM15_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM15EN
))

	)

1204 
	#__HAL_RCC_TIM16_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM16EN
))

	)

1205 
	#__HAL_RCC_TIM17_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM17EN
))

	)

1208 #i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F101xE
)\

1209 || 
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F100xB
√ã|| def√∂ed(
STM32F103xB
)\

1210 || 
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
)\

1211 || 
def√∂ed
(
STM32F107xC
)

1212 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

1213 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1214 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1216 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1217 
	`UNUSED
(
tm¬•eg
); \

1218 } 0U)

	)

1220 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPEEN
))

	)

1223 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

1224 || 
def√∂ed
(
STM32F103xG
)

1225 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1226 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1227 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1229 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1230 
	`UNUSED
(
tm¬•eg
); \

1231 } 0U)

	)

1233 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1234 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1235 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1237 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1238 
	`UNUSED
(
tm¬•eg
); \

1239 } 0U)

	)

1241 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPFEN
))

	)

1242 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPGEN
))

	)

1245 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

1246 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

1247 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1248 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1250 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1251 
	`UNUSED
(
tm¬•eg
); \

1252 } 0U)

	)

1254 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

1255 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1256 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1258 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1259 
	`UNUSED
(
tm¬•eg
); \

1260 } 0U)

	)

1262 
	#__HAL_RCC_TIM8_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM8EN
))

	)

1263 
	#__HAL_RCC_ADC3_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_ADC3EN
))

	)

1266 #i‚Ä°
def√∂ed
(
STM32F100xE
)

1267 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1268 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1269 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1271 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1272 
	`UNUSED
(
tm¬•eg
); \

1273 } 0U)

	)

1275 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1276 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1277 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1279 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1280 
	`UNUSED
(
tm¬•eg
); \

1281 } 0U)

	)

1283 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPFEN
))

	)

1284 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_IOPGEN
))

	)

1287 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

1288 
	#__HAL_RCC_TIM9_CLK_ENABLE
() do { \

1289 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1290 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1292 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1293 
	`UNUSED
(
tm¬•eg
); \

1294 } 0U)

	)

1296 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

1297 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1298 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1300 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1301 
	`UNUSED
(
tm¬•eg
); \

1302 } 0U)

	)

1304 
	#__HAL_RCC_TIM11_CLK_ENABLE
() do { \

1305 
__IO
 
u√∂t32_t
 
tm¬•eg
; \

1306 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1308 
tm¬•eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1309 
	`UNUSED
(
tm¬•eg
); \

1310 } 0U)

	)

1312 
	#__HAL_RCC_TIM9_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM9EN
))

	)

1313 
	#__HAL_RCC_TIM10_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM10EN
))

	)

1314 
	#__HAL_RCC_TIM11_CLK_DISABLE
(√ã(
RCC
->
APB2ENR
 &Ô£ø~(
RCC_APB2ENR_TIM11EN
))

	)

1329 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
)\

1330 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F103xE
)\

1331 || 
def√∂ed
(
STM32F103xG
)

1332 
	#__HAL_RCC_ADC2_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)√ã!Ô£ø
RESET
)

	)

1333 
	#__HAL_RCC_ADC2_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)√ã=Ô£ø
RESET
)

	)

1335 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
)

1336 
	#__HAL_RCC_TIM15_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)√ã!Ô£ø
RESET
)

	)

1337 
	#__HAL_RCC_TIM15_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)√ã=Ô£ø
RESET
)

	)

1338 
	#__HAL_RCC_TIM16_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)√ã!Ô£ø
RESET
)

	)

1339 
	#__HAL_RCC_TIM16_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)√ã=Ô£ø
RESET
)

	)

1340 
	#__HAL_RCC_TIM17_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)√ã!Ô£ø
RESET
)

	)

1341 
	#__HAL_RCC_TIM17_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)√ã=Ô£ø
RESET
)

	)

1343 #i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F101xE
)\

1344 || 
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F100xB
√ã|| def√∂ed(
STM32F103xB
)\

1345 || 
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
)\

1346 || 
def√∂ed
(
STM32F107xC
)

1347 
	#__HAL_RCC_GPIOE_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)√ã!Ô£ø
RESET
)

	)

1348 
	#__HAL_RCC_GPIOE_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)√ã=Ô£ø
RESET
)

	)

1350 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

1351 || 
def√∂ed
(
STM32F103xG
)

1352 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)√ã!Ô£ø
RESET
)

	)

1353 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)√ã=Ô£ø
RESET
)

	)

1354 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)√ã!Ô£ø
RESET
)

	)

1355 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)√ã=Ô£ø
RESET
)

	)

1357 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

1358 
	#__HAL_RCC_TIM8_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)√ã!Ô£ø
RESET
)

	)

1359 
	#__HAL_RCC_TIM8_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)√ã=Ô£ø
RESET
)

	)

1360 
	#__HAL_RCC_ADC3_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)√ã!Ô£ø
RESET
)

	)

1361 
	#__HAL_RCC_ADC3_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)√ã=Ô£ø
RESET
)

	)

1363 #i‚Ä°
def√∂ed
(
STM32F100xE
)

1364 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)√ã!Ô£ø
RESET
)

	)

1365 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)√ã=Ô£ø
RESET
)

	)

1366 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)√ã!Ô£ø
RESET
)

	)

1367 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)√ã=Ô£ø
RESET
)

	)

1369 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

1370 
	#__HAL_RCC_TIM9_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)√ã!Ô£ø
RESET
)

	)

1371 
	#__HAL_RCC_TIM9_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)√ã=Ô£ø
RESET
)

	)

1372 
	#__HAL_RCC_TIM10_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)√ã!Ô£ø
RESET
)

	)

1373 
	#__HAL_RCC_TIM10_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)√ã=Ô£ø
RESET
)

	)

1374 
	#__HAL_RCC_TIM11_IS_CLK_ENABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)√ã!Ô£ø
RESET
)

	)

1375 
	#__HAL_RCC_TIM11_IS_CLK_DISABLED
(√ã((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)√ã=Ô£ø
RESET
)

	)

1382 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1387 
	#__HAL_RCC_AHB_FORCE_RESET
(√ã(
RCC
->
AHBRSTR
 = 0xFFFFFFFFU)

	)

1388 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(√ã(
RCC
->
AHBRSTR
 |Ô£ø(
RCC_AHBRSTR_OTGFSRST
))

	)

1389 #i‚Ä°
def√∂ed
(
STM32F107xC
)

1390 
	#__HAL_RCC_ETHMAC_FORCE_RESET
(√ã(
RCC
->
AHBRSTR
 |Ô£ø(
RCC_AHBRSTR_ETHMACRST
))

	)

1393 
	#__HAL_RCC_AHB_RELEASE_RESET
(√ã(
RCC
->
AHBRSTR
 = 0x00)

	)

1394 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(√ã(
RCC
->
AHBRSTR
 &Ô£ø~(
RCC_AHBRSTR_OTGFSRST
))

	)

1395 #i‚Ä°
def√∂ed
(
STM32F107xC
)

1396 
	#__HAL_RCC_ETHMAC_RELEASE_RESET
(√ã(
RCC
->
AHBRSTR
 &Ô£ø~(
RCC_AHBRSTR_ETHMACRST
))

	)

1409 #i‚Ä°
def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
)\

1410 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã||def√∂ed(
STM32F107xC
)

1411 
	#__HAL_RCC_CAN1_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_CAN1RST
))

	)

1413 
	#__HAL_RCC_CAN1_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_CAN1RST
))

	)

1416 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
√ã|| def√∂ed(
STM32F101xB
)\

1417 || 
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F102xB
)\

1418 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

1419 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1420 
	#__HAL_RCC_TIM4_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM4RST
))

	)

1421 
	#__HAL_RCC_SPI2_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_SPI2RST
))

	)

1422 
	#__HAL_RCC_USART3_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_USART3RST
))

	)

1423 
	#__HAL_RCC_I2C2_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_I2C2RST
))

	)

1425 
	#__HAL_RCC_TIM4_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM4RST
))

	)

1426 
	#__HAL_RCC_SPI2_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_SPI2RST
))

	)

1427 
	#__HAL_RCC_USART3_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_USART3RST
))

	)

1428 
	#__HAL_RCC_I2C2_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_I2C2RST
))

	)

1431 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

1432 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

1433 
	#__HAL_RCC_USB_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_USBRST
))

	)

1434 
	#__HAL_RCC_USB_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_USBRST
))

	)

1437 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

1438 || 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1439 
	#__HAL_RCC_TIM5_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM5RST
))

	)

1440 
	#__HAL_RCC_TIM6_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM6RST
))

	)

1441 
	#__HAL_RCC_TIM7_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM7RST
))

	)

1442 
	#__HAL_RCC_SPI3_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_SPI3RST
))

	)

1443 
	#__HAL_RCC_UART4_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_UART4RST
))

	)

1444 
	#__HAL_RCC_UART5_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_UART5RST
))

	)

1445 
	#__HAL_RCC_DAC_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_DACRST
))

	)

1447 
	#__HAL_RCC_TIM5_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM5RST
))

	)

1448 
	#__HAL_RCC_TIM6_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM6RST
))

	)

1449 
	#__HAL_RCC_TIM7_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM7RST
))

	)

1450 
	#__HAL_RCC_SPI3_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_SPI3RST
))

	)

1451 
	#__HAL_RCC_UART4_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_UART4RST
))

	)

1452 
	#__HAL_RCC_UART5_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_UART5RST
))

	)

1453 
	#__HAL_RCC_DAC_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_DACRST
))

	)

1456 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed (
STM32F100xE
)

1457 
	#__HAL_RCC_TIM6_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM6RST
))

	)

1458 
	#__HAL_RCC_TIM7_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM7RST
))

	)

1459 
	#__HAL_RCC_DAC_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_DACRST
))

	)

1460 
	#__HAL_RCC_CEC_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_CECRST
))

	)

1462 
	#__HAL_RCC_TIM6_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM6RST
))

	)

1463 
	#__HAL_RCC_TIM7_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM7RST
))

	)

1464 
	#__HAL_RCC_DAC_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_DACRST
))

	)

1465 
	#__HAL_RCC_CEC_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_CECRST
))

	)

1468 #i‚Ä°
def√∂ed
 (
STM32F100xE
)

1469 
	#__HAL_RCC_TIM5_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM5RST
))

	)

1470 
	#__HAL_RCC_TIM12_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM12RST
))

	)

1471 
	#__HAL_RCC_TIM13_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM13RST
))

	)

1472 
	#__HAL_RCC_TIM14_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM14RST
))

	)

1473 
	#__HAL_RCC_SPI3_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_SPI3RST
))

	)

1474 
	#__HAL_RCC_UART4_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_UART4RST
))

	)

1475 
	#__HAL_RCC_UART5_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_UART5RST
))

	)

1477 
	#__HAL_RCC_TIM5_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM5RST
))

	)

1478 
	#__HAL_RCC_TIM12_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM12RST
))

	)

1479 
	#__HAL_RCC_TIM13_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM13RST
))

	)

1480 
	#__HAL_RCC_TIM14_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM14RST
))

	)

1481 
	#__HAL_RCC_SPI3_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_SPI3RST
))

	)

1482 
	#__HAL_RCC_UART4_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_UART4RST
))

	)

1483 
	#__HAL_RCC_UART5_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_UART5RST
))

	)

1486 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1487 
	#__HAL_RCC_CAN2_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_CAN2RST
))

	)

1489 
	#__HAL_RCC_CAN2_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_CAN2RST
))

	)

1492 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

1493 
	#__HAL_RCC_TIM12_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM12RST
))

	)

1494 
	#__HAL_RCC_TIM13_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM13RST
))

	)

1495 
	#__HAL_RCC_TIM14_FORCE_RESET
(√ã(
RCC
->
APB1RSTR
 |Ô£ø(
RCC_APB1RSTR_TIM14RST
))

	)

1497 
	#__HAL_RCC_TIM12_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM12RST
))

	)

1498 
	#__HAL_RCC_TIM13_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM13RST
))

	)

1499 
	#__HAL_RCC_TIM14_RELEASE_RESET
(√ã(
RCC
->
APB1RSTR
 &Ô£ø~(
RCC_APB1RSTR_TIM14RST
))

	)

1511 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
)\

1512 || 
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F103xE
)\

1513 || 
def√∂ed
(
STM32F103xG
)

1514 
	#__HAL_RCC_ADC2_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_ADC2RST
))

	)

1516 
	#__HAL_RCC_ADC2_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_ADC2RST
))

	)

1519 #i‚Ä°
def√∂ed
(
STM32F100xB
√ã|| def√∂ed(
STM32F100xE
)

1520 
	#__HAL_RCC_TIM15_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM15RST
))

	)

1521 
	#__HAL_RCC_TIM16_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM16RST
))

	)

1522 
	#__HAL_RCC_TIM17_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM17RST
))

	)

1524 
	#__HAL_RCC_TIM15_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM15RST
))

	)

1525 
	#__HAL_RCC_TIM16_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM16RST
))

	)

1526 
	#__HAL_RCC_TIM17_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM17RST
))

	)

1529 #i‚Ä°
def√∂ed
(
STM32F100xE
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F101xE
)\

1530 || 
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F100xB
√ã|| def√∂ed(
STM32F103xB
)\

1531 || 
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
)\

1532 || 
def√∂ed
(
STM32F107xC
)

1533 
	#__HAL_RCC_GPIOE_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPERST
))

	)

1535 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPERST
))

	)

1538 #i‚Ä°
def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
)\

1539 || 
def√∂ed
(
STM32F103xG
)

1540 
	#__HAL_RCC_GPIOF_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPFRST
))

	)

1541 
	#__HAL_RCC_GPIOG_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPGRST
))

	)

1543 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPFRST
))

	)

1544 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPGRST
))

	)

1547 #i‚Ä°
def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

1548 
	#__HAL_RCC_TIM8_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM8RST
))

	)

1549 
	#__HAL_RCC_ADC3_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_ADC3RST
))

	)

1551 
	#__HAL_RCC_TIM8_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM8RST
))

	)

1552 
	#__HAL_RCC_ADC3_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_ADC3RST
))

	)

1555 #i‚Ä°
def√∂ed
(
STM32F100xE
)

1556 
	#__HAL_RCC_GPIOF_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPFRST
))

	)

1557 
	#__HAL_RCC_GPIOG_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_IOPGRST
))

	)

1559 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPFRST
))

	)

1560 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_IOPGRST
))

	)

1563 #i‚Ä°
def√∂ed
(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

1564 
	#__HAL_RCC_TIM9_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM9RST
))

	)

1565 
	#__HAL_RCC_TIM10_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM10RST
))

	)

1566 
	#__HAL_RCC_TIM11_FORCE_RESET
(√ã(
RCC
->
APB2RSTR
 |Ô£ø(
RCC_APB2RSTR_TIM11RST
))

	)

1568 
	#__HAL_RCC_TIM9_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM9RST
))

	)

1569 
	#__HAL_RCC_TIM10_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM10RST
))

	)

1570 
	#__HAL_RCC_TIM11_RELEASE_RESET
(√ã(
RCC
->
APB2RSTR
 &Ô£ø~(
RCC_APB2RSTR_TIM11RST
))

	)

1581 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F100xB
)\

1582 || 
def√∂ed
(
STM32F100xE
)

1591 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
√ã
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
, (
u√∂t32_t
)(__HSE_PREDIV_VALUE__))

	)

1601 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
) \

1602 
	`MODIFY_REG
(
RCC
->
CFGR
,
RCC_CFGR_PLLXTPRE
, (
u√∂t32_t
)(
__HSE_PREDIV_VALUE__
))

	)

1606 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F100xB
)\

1607 || 
def√∂ed
(
STM32F100xE
)

1611 
	#__HAL_RCC_HSE_GET_PREDIV
(√ã
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
)

	)

1617 
	#__HAL_RCC_HSE_GET_PREDIV
(√ã
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLXTPRE
)

	)

1625 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1636 
	#__HAL_RCC_PLLI2S_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_PLLI2SON_BB
 = 
ENABLE
)

	)

1641 
	#__HAL_RCC_PLLI2S_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_PLLI2SON_BB
 = 
DISABLE
)

	)

1659 
	#__HAL_RCC_PLLI2S_CONFIG
(
__PLLI2SMUL__
)\

1660 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
,(
__PLLI2SMUL__
))

	)

1673 #i‚Ä°
def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

1674 || 
def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

1681 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1682 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
, (
u√∂t32_t
)(
__USBCLKSOURCE__
))

	)

1689 
	#__HAL_RCC_GET_USB_SOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
)))

	)

1693 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1701 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1702 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
, (
u√∂t32_t
)(
__USBCLKSOURCE__
))

	)

1709 
	#__HAL_RCC_GET_USB_SOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
)))

	)

1721 
	#__HAL_RCC_ADC_CONFIG
(
__ADCCLKSOURCE__
) \

1722 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
, (
u√∂t32_t
)(
__ADCCLKSOURCE__
))

	)

1731 
	#__HAL_RCC_GET_ADC_SOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
)))

	)

1737 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1751 
	#__HAL_RCC_HSE_PREDIV2_CONFIG
(
__HSE_PREDIV2_VALUE__
) \

1752 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
, (
u√∂t32_t
)(
__HSE_PREDIV2_VALUE__
))

	)

1757 
	#__HAL_RCC_HSE_GET_PREDIV2
(√ã
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
)

	)

1773 
	#__HAL_RCC_PLL2_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_PLL2ON_BB
 = 
ENABLE
)

	)

1779 
	#__HAL_RCC_PLL2_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_PLL2ON_BB
 = 
DISABLE
)

	)

1797 
	#__HAL_RCC_PLL2_CONFIG
(
__PLL2MUL__
)\

1798 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL2MUL
,(
__PLL2MUL__
))

	)

1815 
	#__HAL_RCC_I2S2_CONFIG
(
__I2S2CLKSOURCE__
) \

1816 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
, (
u√∂t32_t
)(
__I2S2CLKSOURCE__
))

	)

1823 
	#__HAL_RCC_GET_I2S2_SOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
)))

	)

1831 
	#__HAL_RCC_I2S3_CONFIG
(
__I2S2CLKSOURCE__
) \

1832 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
, (
u√∂t32_t
)(
__I2S2CLKSOURCE__
))

	)

1839 
	#__HAL_RCC_GET_I2S3_SOURCE
(√ã((
u√∂t32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
)))

	)

1859 
HAL_S√®tusTy‚â•Def
 
HAL_RCCEx_P√Æ√πhCLKC‚ÅÑfig
(
RCC_P√Æ√πhCLKIn√¥Ty‚â•Def
 *
P√Æ√πhClkIn√¥
);

1860 
HAL_RCCEx_G√´P√Æ√πhCLKC‚ÅÑfig
(
RCC_P√Æ√πhCLKIn√¥Ty‚â•Def
 *
P√Æ√πhClkIn√¥
);

1861 
u√∂t32_t
 
HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(u√∂t32_√†
P√Æ√πhClk
);

1867 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

1871 
HAL_S√®tusTy‚â•Def
 
HAL_RCCEx_E¬´b√ÄPLLI2S
(
RCC_PLLI2SIn√¥Ty‚â•Def
 *
PLLI2SIn√¥
);

1872 
HAL_S√®tusTy‚â•Def
 
HAL_RCCEx_Di√üb√ÄPLLI2S
();

1881 
HAL_S√®tusTy‚â•Def
 
HAL_RCCEx_E¬´b√ÄPLL2
(
RCC_PLL2In√¥Ty‚â•Def
 *
PLL2In√¥
);

1882 
HAL_S√®tusTy‚â•Def
 
HAL_RCCEx_Di√üb√ÄPLL2
();

1901 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_RTC_H


22 
	#__STM32F1xx_HAL_RTC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

43 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
√ã(((PREDIV√ã<Ô£ø0xFFFFFU√ã|| ((PREDIV√ã=Ô£ø
RTC_AUTO_1_SECOND
))

	)

44 
	#IS_RTC_HOUR24
(
HOUR
√ã((HOUR√ã<Ô£ø23U)

	)

45 
	#IS_RTC_MINUTES
(
MINUTES
√ã((MINUTES√ã<Ô£ø59U)

	)

46 
	#IS_RTC_SECONDS
(
SECONDS
√ã((SECONDS√ã<Ô£ø59U)

	)

47 
	#IS_RTC_FORMAT
(
FORMAT
√ã(((FORMAT√ã=Ô£ø
RTC_FORMAT_BIN
√ã|| ((FORMAT√ã=Ô£ø
RTC_FORMAT_BCD
))

	)

48 
	#IS_RTC_YEAR
(
YEAR
√ã((YEAR√ã<Ô£ø99U)

	)

49 
	#IS_RTC_MONTH
(
MONTH
√ã(((MONTH√ã>Ô£ø1U√ã&& ((MONTH√ã<Ô£ø12U))

	)

50 
	#IS_RTC_DATE
(
DATE
√ã(((DATE√ã>Ô£ø1U√ã&& ((DATE√ã<Ô£ø31U))

	)

51 
	#IS_RTC_ALARM
(
ALARM
√ã((ALARM√ã=Ô£ø
RTC_ALARM_A
)

	)

52 
	#IS_RTC_CALIB_OUTPUT
(
__OUTPUT__
√ã(((__OUTPUT__√ã=Ô£ø
RTC_OUTPUTSOURCE_NONE
) || \

53 ((
__OUTPUT__
√ã=Ô£ø
RTC_OUTPUTSOURCE_CALIBCLOCK
) || \

54 ((
__OUTPUT__
√ã=Ô£ø
RTC_OUTPUTSOURCE_ALARM
) || \

55 ((
__OUTPUT__
√ã=Ô£ø
RTC_OUTPUTSOURCE_SECOND
))

	)

68 
	#RTC_TIMEOUT_VALUE
 1000U

	)

76 
	#RTC_EXTI_LINE_ALARM_EVENT
 ((
u√∂t32_t
)
EXTI_IMR_MR17
√ã

	)

95 
u√∂t8_t
 
Hours
;

98 
u√∂t8_t
 
M√∂u√£s
;

101 
u√∂t8_t
 
Sec‚ÅÑds
;

104 } 
	tRTC_TimeTy‚â•Def
;

111 
RTC_TimeTy‚â•Def
 
A≈ìrmTime
;

113 
u√∂t32_t
 
A≈ìrm
;

115 } 
	tRTC_A≈ìrmTy‚â•Def
;

122 
HAL_RTC_STATE_RESET
 = 0x00U,

123 
HAL_RTC_STATE_READY
 = 0x01U,

124 
HAL_RTC_STATE_BUSY
 = 0x02U,

125 
HAL_RTC_STATE_TIMEOUT
 = 0x03U,

126 
HAL_RTC_STATE_ERROR
 = 0x04U

128 } 
	tHAL_RTCS√®√£Ty‚â•Def
;

135 
u√∂t32_t
 
AsynchP¬™div
;

139 
u√∂t32_t
 
OutPut
;

142 } 
	tRTC_In√¥Ty‚â•Def
;

149 
u√∂t8_t
 
W√¨kDay
;

152 
u√∂t8_t
 
M‚ÅÑth
;

155 
u√∂t8_t
 
D¬©e
;

158 
u√∂t8_t
 
Y√≥r
;

161 } 
	tRTC_D¬©eTy‚â•Def
;

166 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

167 
__RTC_H‚Ñ¢d√ÄTy‚â•Def


172 
RTC_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

174 
RTC_In√¥Ty‚â•Def
 
In√¥
;

176 
RTC_D¬©eTy‚â•Def
 
D¬©eToUpd¬©e
;

178 
HAL_LockTy‚â•Def
 
Lock
;

180 
__IO
 
HAL_RTCS√®√£Ty‚â•Def
 
S√®√£
;

182 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

183 (* 
A≈ìrmAEv√≠tC√Ülback
)(
__RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

185 (* 
Tam‚â•r1Ev√≠tC√Ülback
)(
__RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

187 (* 
M‚Ä¢In√¥C√Ülback
)(
__RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

189 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

193 } 
	tRTC_H‚Ñ¢d√ÄTy‚â•Def
;

195 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

201 
HAL_RTC_ALARM_A_EVENT_CB_ID
 = 0x00u,

202 
HAL_RTC_TAMPER1_EVENT_CB_ID
 = 0x04u,

203 
HAL_RTC_MSPINIT_CB_ID
 = 0x0Eu,

204 
HAL_RTC_MSPDEINIT_CB_ID
 = 0x0Fu

205 } 
	tHAL_RTC_C√ÜlbackIDTy‚â•Def
;

210 (*
pRTC_C√ÜlbackTy‚â•Def
)(
	tRTC_H‚Ñ¢d√ÄTy‚â•Def
 *
	thœÄc
);

225 
	#RTC_AUTO_1_SECOND
 0xFFFFFFFFU

	)

234 
	#RTC_FORMAT_BIN
 0x000000000U

	)

235 
	#RTC_FORMAT_BCD
 0x000000001U

	)

246 
	#RTC_MONTH_JANUARY
 ((
u√∂t8_t
)0x01)

	)

247 
	#RTC_MONTH_FEBRUARY
 ((
u√∂t8_t
)0x02)

	)

248 
	#RTC_MONTH_MARCH
 ((
u√∂t8_t
)0x03)

	)

249 
	#RTC_MONTH_APRIL
 ((
u√∂t8_t
)0x04)

	)

250 
	#RTC_MONTH_MAY
 ((
u√∂t8_t
)0x05)

	)

251 
	#RTC_MONTH_JUNE
 ((
u√∂t8_t
)0x06)

	)

252 
	#RTC_MONTH_JULY
 ((
u√∂t8_t
)0x07)

	)

253 
	#RTC_MONTH_AUGUST
 ((
u√∂t8_t
)0x08)

	)

254 
	#RTC_MONTH_SEPTEMBER
 ((
u√∂t8_t
)0x09)

	)

255 
	#RTC_MONTH_OCTOBER
 ((
u√∂t8_t
)0x10)

	)

256 
	#RTC_MONTH_NOVEMBER
 ((
u√∂t8_t
)0x11)

	)

257 
	#RTC_MONTH_DECEMBER
 ((
u√∂t8_t
)0x12)

	)

266 
	#RTC_WEEKDAY_MONDAY
 ((
u√∂t8_t
)0x01)

	)

267 
	#RTC_WEEKDAY_TUESDAY
 ((
u√∂t8_t
)0x02)

	)

268 
	#RTC_WEEKDAY_WEDNESDAY
 ((
u√∂t8_t
)0x03)

	)

269 
	#RTC_WEEKDAY_THURSDAY
 ((
u√∂t8_t
)0x04)

	)

270 
	#RTC_WEEKDAY_FRIDAY
 ((
u√∂t8_t
)0x05)

	)

271 
	#RTC_WEEKDAY_SATURDAY
 ((
u√∂t8_t
)0x06)

	)

272 
	#RTC_WEEKDAY_SUNDAY
 ((
u√∂t8_t
)0x00)

	)

281 
	#RTC_ALARM_A
 0U

	)

292 
	#RTC_OUTPUTSOURCE_NONE
 0x00000000U

	)

293 
	#RTC_OUTPUTSOURCE_CALIBCLOCK
 
BKP_RTCCR_CCO


	)

294 
	#RTC_OUTPUTSOURCE_ALARM
 
BKP_RTCCR_ASOE


	)

295 
	#RTC_OUTPUTSOURCE_SECOND
 (
BKP_RTCCR_ASOS
 | 
BKP_RTCCR_ASOE
√ã

	)

304 
	#RTC_IT_OW
 
RTC_CRH_OWIE


	)

305 
	#RTC_IT_ALRA
 
RTC_CRH_ALRIE


	)

306 
	#RTC_IT_SEC
 
RTC_CRH_SECIE


	)

307 
	#RTC_IT_TAMP1
 
BKP_CSR_TPIE


	)

315 
	#RTC_FLAG_RTOFF
 
RTC_CRL_RTOFF


	)

316 
	#RTC_FLAG_RSF
 
RTC_CRL_RSF


	)

317 
	#RTC_FLAG_OW
 
RTC_CRL_OWF


	)

318 
	#RTC_FLAG_ALRAF
 
RTC_CRL_ALRF


	)

319 
	#RTC_FLAG_SEC
 
RTC_CRL_SECF


	)

320 
	#RTC_FLAG_TAMP1F
 
BKP_CSR_TEF


	)

339 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

340 
	#__HAL_RTC_RESET_HANDLE_STATE
(
__HANDLE__
) do{\

341 (
__HANDLE__
)->
S√®√£
 = 
HAL_RTC_STATE_RESET
;\

342 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
;\

343 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
;\

344 }0u)

	)

346 
	#__HAL_RTC_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_RTC_STATE_RESET
)

	)

354 
	#__HAL_RTC_WRITEPROTECTION_DISABLE
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
, 
RTC_CRL_CNF
)

	)

361 
	#__HAL_RTC_WRITEPROTECTION_ENABLE
(
__HANDLE__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
, 
RTC_CRL_CNF
)

	)

371 
	#__HAL_RTC_ALARM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
, (__INTERRUPT__))

	)

381 
	#__HAL_RTC_ALARM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
, (__INTERRUPT__))

	)

391 
	#__HAL_RTC_ALARM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
)& ((__INTERRUPT__)))√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

401 
	#__HAL_RTC_ALARM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ã& (__FLAG__)√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

411 
	#__HAL_RTC_ALARM_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã(((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ã& (__INTERRUPT__)√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

421 
	#__HAL_RTC_ALARM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ãÔ£ø~(__FLAG__)

	)

427 
	#__HAL_RTC_ALARM_EXTI_ENABLE_IT
(√ã
	`SET_BIT
(
EXTI
->
IMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

433 
	#__HAL_RTC_ALARM_EXTI_DISABLE_IT
(√ã
	`CLEAR_BIT
(
EXTI
->
IMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

439 
	#__HAL_RTC_ALARM_EXTI_ENABLE_EVENT
(√ã
	`SET_BIT
(
EXTI
->
EMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

445 
	#__HAL_RTC_ALARM_EXTI_DISABLE_EVENT
(√ã
	`CLEAR_BIT
(
EXTI
->
EMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

452 
	#__HAL_RTC_ALARM_EXTI_ENABLE_FALLING_EDGE
(√ã
	`SET_BIT
(
EXTI
->
FTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

459 
	#__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE
(√ã
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

466 
	#__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
(√ã
	`SET_BIT
(
EXTI
->
RTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

473 
	#__HAL_RTC_ALARM_EXTI_DISABLE_RISING_EDGE
(√ã
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

479 
	#__HAL_RTC_ALARM_EXTI_ENABLE_RISING_FALLING_EDGE
() \

481 
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
(); \

482 
	`__HAL_RTC_ALARM_EXTI_ENABLE_FALLING_EDGE
(); \

483 } 0U)

	)

490 
	#__HAL_RTC_ALARM_EXTI_DISABLE_RISING_FALLING_EDGE
() \

492 
	`__HAL_RTC_ALARM_EXTI_DISABLE_RISING_EDGE
(); \

493 
	`__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE
(); \

494 } 0U)

	)

500 
	#__HAL_RTC_ALARM_EXTI_GET_FLAG
(√ã(
EXTI
->
PR
 & (
RTC_EXTI_LINE_ALARM_EVENT
))

	)

506 
	#__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
(√ã(
EXTI
->
PR
 = (
RTC_EXTI_LINE_ALARM_EVENT
))

	)

512 
	#__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
(√ã
	`SET_BIT
(
EXTI
->
SWIER
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

518 
	~"¬∞m32f1xx_h√Ü_œÄc_ex.h
"

530 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_In√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

531 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_DeIn√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

532 
HAL_RTC_M‚Ä¢In√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

533 
HAL_RTC_M‚Ä¢DeIn√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

536 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

537 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_Regi¬∞√ÆC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
HAL_RTC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pRTC_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

538 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_UnRegi¬∞√ÆC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
HAL_RTC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

548 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_S√´Time
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_TimeTy‚â•Def
 *
sTime
, 
u√∂t32_t
 
F‚Äπm¬©
);

549 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_G√´Time
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_TimeTy‚â•Def
 *
sTime
, 
u√∂t32_t
 
F‚Äπm¬©
);

550 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_S√´D¬©e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_D¬©eTy‚â•Def
 *
sD¬©e
, 
u√∂t32_t
 
F‚Äπm¬©
);

551 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_G√´D¬©e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_D¬©eTy‚â•Def
 *
sD¬©e
, 
u√∂t32_t
 
F‚Äπm¬©
);

560 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_S√´A≈ìrm
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_A≈ìrmTy‚â•Def
 *
sA≈ìrm
, 
u√∂t32_t
 
F‚Äπm¬©
);

561 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_S√´A≈ìrm_IT
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_A≈ìrmTy‚â•Def
 *
sA≈ìrm
, 
u√∂t32_t
 
F‚Äπm¬©
);

562 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_D√≥Àòiv¬©eA≈ìrm
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
A≈ìrm
);

563 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_G√´A≈ìrm
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_A≈ìrmTy‚â•Def
 *
sA≈ìrm
, 
u√∂t32_t
 
A≈ìrm
, u√∂t32_√†
F‚Äπm¬©
);

564 
HAL_RTC_A≈ìrmIRQH‚Ñ¢d√Är
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

565 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_PÔ¨ÅlF‚ÄπA≈ìrmAEv√≠t
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Timeout
);

566 
HAL_RTC_A≈ìrmAEv√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

575 
HAL_RTCS√®√£Ty‚â•Def
 
HAL_RTC_G√´S√®√£
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

584 
HAL_S√®tusTy‚â•Def
 
HAL_RTC_Wa√¥F‚ÄπSynchro
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

601 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc_ex.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_RTC_EX_H


22 
	#__STM32F1xx_HAL_RTC_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

46 
	#HAL_RTCEx_Tam‚â•rTimeS√®mpIRQH‚Ñ¢d√Är
 
HAL_RTCEx_Tam‚â•rIRQH‚Ñ¢d√Är


	)

55 
	#IS_RTC_TAMPER
(
__TAMPER__
√ã((__TAMPER__√ã=Ô£ø
RTC_TAMPER_1
)

	)

57 
	#IS_RTC_TAMPER_TRIGGER
(
__TRIGGER__
√ã(((__TRIGGER__√ã=Ô£ø
RTC_TAMPERTRIGGER_LOWLEVEL
) || \

58 ((
__TRIGGER__
√ã=Ô£ø
RTC_TAMPERTRIGGER_HIGHLEVEL
))

	)

60 #i‚Ä°
RTC_BKP_NUMBER
 > 10U

61 
	#IS_RTC_BKP
(
BKP
√ã(((BKP√ã<Ô£ø(
u√∂t32_t
)
RTC_BKP_DR10
√ã|| (((BKP√ã>Ô£ø(u√∂t32_t)
RTC_BKP_DR11
√ã&& ((BKP√ã<Ô£ø(u√∂t32_t)
RTC_BKP_DR42
)))

	)

63 
	#IS_RTC_BKP
(
BKP
√ã((BKP√ã<Ô£ø(
u√∂t32_t
)
RTC_BKP_NUMBER
)

	)

65 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø0x0000007FU)

	)

84 
u√∂t32_t
 
Tam‚â•r
;

87 
u√∂t32_t
 
Trigg√Æ
;

90 } 
	tRTC_Tam‚â•rTy‚â•Def
;

104 
	#RTC_TAMPER_1
 
BKP_CR_TPE


	)

113 
	#RTC_TAMPERTRIGGER_LOWLEVEL
 
BKP_CR_TPAL


	)

114 
	#RTC_TAMPERTRIGGER_HIGHLEVEL
 0x00000000U

	)

123 #i‚Ä°
RTC_BKP_NUMBER
 > 0U

124 
	#RTC_BKP_DR1
 0x00000001U

	)

125 
	#RTC_BKP_DR2
 0x00000002U

	)

126 
	#RTC_BKP_DR3
 0x00000003U

	)

127 
	#RTC_BKP_DR4
 0x00000004U

	)

128 
	#RTC_BKP_DR5
 0x00000005U

	)

129 
	#RTC_BKP_DR6
 0x00000006U

	)

130 
	#RTC_BKP_DR7
 0x00000007U

	)

131 
	#RTC_BKP_DR8
 0x00000008U

	)

132 
	#RTC_BKP_DR9
 0x00000009U

	)

133 
	#RTC_BKP_DR10
 0x0000000AU

	)

136 #i‚Ä°
RTC_BKP_NUMBER
 > 10U

137 
	#RTC_BKP_DR11
 0x00000010U

	)

138 
	#RTC_BKP_DR12
 0x00000011U

	)

139 
	#RTC_BKP_DR13
 0x00000012U

	)

140 
	#RTC_BKP_DR14
 0x00000013U

	)

141 
	#RTC_BKP_DR15
 0x00000014U

	)

142 
	#RTC_BKP_DR16
 0x00000015U

	)

143 
	#RTC_BKP_DR17
 0x00000016U

	)

144 
	#RTC_BKP_DR18
 0x00000017U

	)

145 
	#RTC_BKP_DR19
 0x00000018U

	)

146 
	#RTC_BKP_DR20
 0x00000019U

	)

147 
	#RTC_BKP_DR21
 0x0000001AU

	)

148 
	#RTC_BKP_DR22
 0x0000001BU

	)

149 
	#RTC_BKP_DR23
 0x0000001CU

	)

150 
	#RTC_BKP_DR24
 0x0000001DU

	)

151 
	#RTC_BKP_DR25
 0x0000001EU

	)

152 
	#RTC_BKP_DR26
 0x0000001FU

	)

153 
	#RTC_BKP_DR27
 0x00000020U

	)

154 
	#RTC_BKP_DR28
 0x00000021U

	)

155 
	#RTC_BKP_DR29
 0x00000022U

	)

156 
	#RTC_BKP_DR30
 0x00000023U

	)

157 
	#RTC_BKP_DR31
 0x00000024U

	)

158 
	#RTC_BKP_DR32
 0x00000025U

	)

159 
	#RTC_BKP_DR33
 0x00000026U

	)

160 
	#RTC_BKP_DR34
 0x00000027U

	)

161 
	#RTC_BKP_DR35
 0x00000028U

	)

162 
	#RTC_BKP_DR36
 0x00000029U

	)

163 
	#RTC_BKP_DR37
 0x0000002AU

	)

164 
	#RTC_BKP_DR38
 0x0000002BU

	)

165 
	#RTC_BKP_DR39
 0x0000002CU

	)

166 
	#RTC_BKP_DR40
 0x0000002DU

	)

167 
	#RTC_BKP_DR41
 0x0000002EU

	)

168 
	#RTC_BKP_DR42
 0x0000002FU

	)

192 
	#__HAL_RTC_TAMPER_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
(
BKP
->
CSR
, (__INTERRUPT__))

	)

202 
	#__HAL_RTC_TAMPER_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
(
BKP
->
CSR
, (__INTERRUPT__))

	)

212 
	#__HAL_RTC_TAMPER_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((
BKP
->
CSR
√ã& ((__INTERRUPT__))√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

222 
	#__HAL_RTC_TAMPER_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((((
BKP
->
CSR
√ã& (__FLAG__)√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

232 
	#__HAL_RTC_TAMPER_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((
BKP
->
CSR
√ã& (
BKP_CSR_TEF
)√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

242 
	#__HAL_RTC_TAMPER_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã
	`SET_BIT
(
BKP
->
CSR
, 
BKP_CSR_CTE
 | 
BKP_CSR_CTI
)

	)

252 
	#__HAL_RTC_SECOND_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
, (__INTERRUPT__))

	)

262 
	#__HAL_RTC_SECOND_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
, (__INTERRUPT__))

	)

272 
	#__HAL_RTC_SECOND_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
)& ((__INTERRUPT__)))√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

282 
	#__HAL_RTC_SECOND_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ã& (__FLAG__)√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

292 
	#__HAL_RTC_SECOND_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ãÔ£ø~(__FLAG__)

	)

302 
	#__HAL_RTC_OVERFLOW_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
, (__INTERRUPT__))

	)

312 
	#__HAL_RTC_OVERFLOW_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
, (__INTERRUPT__))

	)

322 
	#__HAL_RTC_OVERFLOW_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRH
)& ((__INTERRUPT__))√ã√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

332 
	#__HAL_RTC_OVERFLOW_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ã& (__FLAG__)√ã!Ô£ø
RESET
)? 
SET
 : RESET)

	)

342 
	#__HAL_RTC_OVERFLOW_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CRL
√ãÔ£ø~(__FLAG__)

	)

357 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_S√´Tam‚â•r
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_Tam‚â•rTy‚â•Def
 *
sTam‚â•r
);

358 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_S√´Tam‚â•r_IT
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_Tam‚â•rTy‚â•Def
 *
sTam‚â•r
);

359 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_D√≥Àòiv¬©eTam‚â•r
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Tam‚â•r
);

360 
HAL_RTCEx_Tam‚â•rIRQH‚Ñ¢d√Är
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

361 
HAL_RTCEx_Tam‚â•r1Ev√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

362 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_PÔ¨ÅlF‚ÄπTam‚â•r1Ev√≠t
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Timeout
);

372 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_S√´Sec‚ÅÑd_IT
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

373 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_D√≥Àòiv¬©eSec‚ÅÑd
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

374 
HAL_RTCEx_RTCIRQH‚Ñ¢d√Är
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

375 
HAL_RTCEx_RTCEv√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

376 
HAL_RTCEx_RTCEv√≠tE¬∫‚ÄπC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

386 
HAL_RTCEx_BKUPWr√¥e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
BackupRegi¬∞√Æ
, u√∂t32_√†
D¬©a
);

387 
u√∂t32_t
 
HAL_RTCEx_BKUPR√≥d
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, u√∂t32_√†
BackupRegi¬∞√Æ
);

389 
HAL_S√®tusTy‚â•Def
 
HAL_RTCEx_S√´Smo≈∏hC√Üib
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Smo≈∏hC√ÜibP√Æiod
, u√∂t32_√†
Smo≈∏hC√ÜibPlusPul¬£s
, u√∂t32_√†
SmouthC√ÜibM√∂usPul¬£sV√Üue
);

406 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_SD_H


22 
	#STM32F1xx_HAL_SD_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
(
SDIO
)

31 
	~"¬∞m32f1xx_≈í_sdmmc.h
"

52 
HAL_SD_STATE_RESET
 = ((
u√∂t32_t
)0x00000000U),

53 
HAL_SD_STATE_READY
 = ((
u√∂t32_t
)0x00000001U),

54 
HAL_SD_STATE_TIMEOUT
 = ((
u√∂t32_t
)0x00000002U),

55 
HAL_SD_STATE_BUSY
 = ((
u√∂t32_t
)0x00000003U),

56 
HAL_SD_STATE_PROGRAMMING
 = ((
u√∂t32_t
)0x00000004U),

57 
HAL_SD_STATE_RECEIVING
 = ((
u√∂t32_t
)0x00000005U),

58 
HAL_SD_STATE_TRANSFER
 = ((
u√∂t32_t
)0x00000006U),

59 
HAL_SD_STATE_ERROR
 = ((
u√∂t32_t
)0x0000000FU)

60 }
	tHAL_SD_S√®√£Ty‚â•Def
;

68 
u√∂t32_t
 
	tHAL_SD_C¬®dS√®√£Ty‚â•Def
;

70 
	#HAL_SD_CARD_READY
 0x00000001U

	)

71 
	#HAL_SD_CARD_IDENTIFICATION
 0x00000002U

	)

72 
	#HAL_SD_CARD_STANDBY
 0x00000003U

	)

73 
	#HAL_SD_CARD_TRANSFER
 0x00000004U

	)

74 
	#HAL_SD_CARD_SENDING
 0x00000005U

	)

75 
	#HAL_SD_CARD_RECEIVING
 0x00000006U

	)

76 
	#HAL_SD_CARD_PROGRAMMING
 0x00000007U

	)

77 
	#HAL_SD_CARD_DISCONNECTED
 0x00000008U

	)

78 
	#HAL_SD_CARD_ERROR
 0x000000FFU

	)

86 
	#SD_In√¥Ty‚â•Def
 
SDIO_In√¥Ty‚â•Def


	)

87 
	#SD_Ty‚â•Def
 
SDIO_Ty‚â•Def


	)

94 
u√∂t32_t
 
	mC¬®dTy‚â•
;

96 
u√∂t32_t
 
	mC¬®dV√Æsi‚ÅÑ
;

98 
u√∂t32_t
 
	mC≈ìss
;

100 
u√∂t32_t
 
	mR√±C¬®dAdd
;

102 
u√∂t32_t
 
	mBlockNbr
;

104 
u√∂t32_t
 
	mBlockSize
;

106 
u√∂t32_t
 
	mLogBlockNbr
;

108 
u√∂t32_t
 
	mLogBlockSize
;

110 }
	tHAL_SD_C¬®dInfoTy‚â•Def
;

115 #i‚Ä°
def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

116 
	g__SD_H‚Ñ¢d√ÄTy‚â•Def


121 
SD_Ty‚â•Def
 *
	gIn¬∞‚Ñ¢Àö
;

123 
SD_In√¥Ty‚â•Def
 
	gIn√¥
;

125 
HAL_LockTy‚â•Def
 
	gLock
;

127 
u√∂t8_t
 *
	gpTxBuffP√•
;

129 
u√∂t32_t
 
	gTxX‚ÄûrSize
;

131 
u√∂t8_t
 *
	gpRxBuffP√•
;

133 
u√∂t32_t
 
	gRxX‚ÄûrSize
;

135 
__IO
 
u√∂t32_t
 
	gC‚ÅÑ√£xt
;

137 
__IO
 
HAL_SD_S√®√£Ty‚â•Def
 
	gS√®√£
;

139 
__IO
 
u√∂t32_t
 
	gE¬∫‚ÄπCode
;

141 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghdm¬©x
;

143 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghdm¬®x
;

145 
HAL_SD_C¬®dInfoTy‚â•Def
 
	gSdC¬®d
;

147 
u√∂t32_t
 
	gCSD
[4];

149 
u√∂t32_t
 
	gCID
[4];

151 #i‚Ä°
def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

152 (* 
	gTxC‚àÇtC√Ülback
√ã(
__SD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghsd
);

153 (* 
	gRxC‚àÇtC√Ülback
√ã(
__SD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghsd
);

154 (* 
	gE¬∫‚ÄπC√Ülback
√ã(
__SD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghsd
);

155 (* 
	gAb‚ÄπtC‚àÇtC√Ülback
√ã(
__SD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghsd
);

157 (* 
	gM‚Ä¢In√¥C√Ülback
√ã(
__SD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghsd
);

158 (* 
	gM‚Ä¢DeIn√¥C√Ülback
√ã(
__SD_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghsd
);

160 }
	tSD_H‚Ñ¢d√ÄTy‚â•Def
;

171 
__IO
 
u√∂t8_t
 
	mCSDS√•uÀò
;

172 
__IO
 
u√∂t8_t
 
	mSysS‚â•cV√Æsi‚ÅÑ
;

173 
__IO
 
u√∂t8_t
 
	mRe¬£rved1
;

174 
__IO
 
u√∂t8_t
 
	mTAAC
;

175 
__IO
 
u√∂t8_t
 
	mNSAC
;

176 
__IO
 
u√∂t8_t
 
	mMaxBusClkF¬™c
;

177 
__IO
 
u√∂t16_t
 
	mC¬®dComdC≈ìs¬£s
;

178 
__IO
 
u√∂t8_t
 
	mRdBlockL√≠
;

179 
__IO
 
u√∂t8_t
 
	mP¬®tBlockR√≥d
;

180 
__IO
 
u√∂t8_t
 
	mWrBlockMi√ülign
;

181 
__IO
 
u√∂t8_t
 
	mRdBlockMi√ülign
;

182 
__IO
 
u√∂t8_t
 
	mDSRIm‚àÇ
;

183 
__IO
 
u√∂t8_t
 
	mRe¬£rved2
;

184 
__IO
 
u√∂t32_t
 
	mDeviÀöSize
;

185 
__IO
 
u√∂t8_t
 
	mMaxRdCu¬∫√≠tVDDM√∂
;

186 
__IO
 
u√∂t8_t
 
	mMaxRdCu¬∫√≠tVDDMax
;

187 
__IO
 
u√∂t8_t
 
	mMaxWrCu¬∫√≠tVDDM√∂
;

188 
__IO
 
u√∂t8_t
 
	mMaxWrCu¬∫√≠tVDDMax
;

189 
__IO
 
u√∂t8_t
 
	mDeviÀöSizeMul
;

190 
__IO
 
u√∂t8_t
 
	mE√∏¬£GrSize
;

191 
__IO
 
u√∂t8_t
 
	mE√∏¬£GrMul
;

192 
__IO
 
u√∂t8_t
 
	mWrPr≈∏eÀòGrSize
;

193 
__IO
 
u√∂t8_t
 
	mWrPr≈∏eÀòGrE¬´b√Ä
;

194 
__IO
 
u√∂t8_t
 
	mM‚Ñ¢De√äECC
;

195 
__IO
 
u√∂t8_t
 
	mWrS‚â•edFaÀò
;

196 
__IO
 
u√∂t8_t
 
	mMaxWrBlockL√≠
;

197 
__IO
 
u√∂t8_t
 
	mWr√¥eBlockPaP¬®t√ºl
;

198 
__IO
 
u√∂t8_t
 
	mRe¬£rved3
;

199 
__IO
 
u√∂t8_t
 
	mC‚ÅÑ√£¬°Pr≈∏eÀòA¬µli
;

200 
__IO
 
u√∂t8_t
 
	mF√ªeF‚Äπm¬©Group
;

201 
__IO
 
u√∂t8_t
 
	mC‚Ä∫yF≈ìg
;

202 
__IO
 
u√∂t8_t
 
	mP√ÆmWrPr≈∏eÀò
;

203 
__IO
 
u√∂t8_t
 
	mTempWrPr≈∏eÀò
;

204 
__IO
 
u√∂t8_t
 
	mF√ªeF‚Äπm¬©
;

205 
__IO
 
u√∂t8_t
 
	mECC
;

206 
__IO
 
u√∂t8_t
 
	mCSD_CRC
;

207 
__IO
 
u√∂t8_t
 
	mRe¬£rved4
;

208 }
	tHAL_SD_C¬®dCSDTy‚â•Def
;

218 
__IO
 
u√∂t8_t
 
	mM‚Ñ¢u√ÅÀòu¬™rID
;

219 
__IO
 
u√∂t16_t
 
	mOEM_A¬µliID
;

220 
__IO
 
u√∂t32_t
 
	mProdName1
;

221 
__IO
 
u√∂t8_t
 
	mProdName2
;

222 
__IO
 
u√∂t8_t
 
	mProdRev
;

223 
__IO
 
u√∂t32_t
 
	mProdSN
;

224 
__IO
 
u√∂t8_t
 
	mRe¬£rved1
;

225 
__IO
 
u√∂t16_t
 
	mM‚Ñ¢u√ÅÀòD¬©e
;

226 
__IO
 
u√∂t8_t
 
	mCID_CRC
;

227 
__IO
 
u√∂t8_t
 
	mRe¬£rved2
;

229 }
	tHAL_SD_C¬®dCIDTy‚â•Def
;

239 
__IO
 
u√∂t8_t
 
	mD¬©aBusWidth
;

240 
__IO
 
u√∂t8_t
 
	mSecu¬™dMode
;

241 
__IO
 
u√∂t16_t
 
	mC¬®dTy‚â•
;

242 
__IO
 
u√∂t32_t
 
	mPr≈∏eÀòedA¬™aSize
;

243 
__IO
 
u√∂t8_t
 
	mS‚â•edC≈ìss
;

244 
__IO
 
u√∂t8_t
 
	mP√Æf‚Äπm‚Ñ¢ÀöMove
;

245 
__IO
 
u√∂t8_t
 
	mA≈íoÀáti‚ÅÑUn√¥Size
;

246 
__IO
 
u√∂t16_t
 
	mE√∏¬£Size
;

247 
__IO
 
u√∂t8_t
 
	mE√∏¬£Timeout
;

248 
__IO
 
u√∂t8_t
 
	mE√∏¬£Off¬£t
;

250 }
	tHAL_SD_C¬®dS√®tusTy‚â•Def
;

255 #i‚Ä°
def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

261 
	mHAL_SD_TX_CPLT_CB_ID
 = 0x00U,

262 
	mHAL_SD_RX_CPLT_CB_ID
 = 0x01U,

263 
	mHAL_SD_ERROR_CB_ID
 = 0x02U,

264 
	mHAL_SD_ABORT_CB_ID
 = 0x03U,

266 
	mHAL_SD_MSP_INIT_CB_ID
 = 0x10U,

267 
	mHAL_SD_MSP_DEINIT_CB_ID
 = 0x11U

268 }
	tHAL_SD_C√ÜlbackIDTy‚â•Def
;

276 (*
	tpSD_C√ÜlbackTy‚â•Def
√ã(
	tSD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thsd
);

290 
	#BLOCKSIZE
 ((
u√∂t32_t
)512U√ã

	)

295 
	#HAL_SD_ERROR_NONE
 
SDMMC_ERROR_NONE


	)

296 
	#HAL_SD_ERROR_CMD_CRC_FAIL
 
SDMMC_ERROR_CMD_CRC_FAIL


	)

297 
	#HAL_SD_ERROR_DATA_CRC_FAIL
 
SDMMC_ERROR_DATA_CRC_FAIL


	)

298 
	#HAL_SD_ERROR_CMD_RSP_TIMEOUT
 
SDMMC_ERROR_CMD_RSP_TIMEOUT


	)

299 
	#HAL_SD_ERROR_DATA_TIMEOUT
 
SDMMC_ERROR_DATA_TIMEOUT


	)

300 
	#HAL_SD_ERROR_TX_UNDERRUN
 
SDMMC_ERROR_TX_UNDERRUN


	)

301 
	#HAL_SD_ERROR_RX_OVERRUN
 
SDMMC_ERROR_RX_OVERRUN


	)

302 
	#HAL_SD_ERROR_ADDR_MISALIGNED
 
SDMMC_ERROR_ADDR_MISALIGNED


	)

303 
	#HAL_SD_ERROR_BLOCK_LEN_ERR
 
SDMMC_ERROR_BLOCK_LEN_ERR


	)

305 
	#HAL_SD_ERROR_ERASE_SEQ_ERR
 
SDMMC_ERROR_ERASE_SEQ_ERR


	)

306 
	#HAL_SD_ERROR_BAD_ERASE_PARAM
 
SDMMC_ERROR_BAD_ERASE_PARAM


	)

307 
	#HAL_SD_ERROR_WRITE_PROT_VIOLATION
 
SDMMC_ERROR_WRITE_PROT_VIOLATION


	)

308 
	#HAL_SD_ERROR_LOCK_UNLOCK_FAILED
 
SDMMC_ERROR_LOCK_UNLOCK_FAILED


	)

310 
	#HAL_SD_ERROR_COM_CRC_FAILED
 
SDMMC_ERROR_COM_CRC_FAILED


	)

311 
	#HAL_SD_ERROR_ILLEGAL_CMD
 
SDMMC_ERROR_ILLEGAL_CMD


	)

312 
	#HAL_SD_ERROR_CARD_ECC_FAILED
 
SDMMC_ERROR_CARD_ECC_FAILED


	)

313 
	#HAL_SD_ERROR_CC_ERR
 
SDMMC_ERROR_CC_ERR


	)

314 
	#HAL_SD_ERROR_GENERAL_UNKNOWN_ERR
 
SDMMC_ERROR_GENERAL_UNKNOWN_ERR


	)

315 
	#HAL_SD_ERROR_STREAM_READ_UNDERRUN
 
SDMMC_ERROR_STREAM_READ_UNDERRUN


	)

316 
	#HAL_SD_ERROR_STREAM_WRITE_OVERRUN
 
SDMMC_ERROR_STREAM_WRITE_OVERRUN


	)

317 
	#HAL_SD_ERROR_CID_CSD_OVERWRITE
 
SDMMC_ERROR_CID_CSD_OVERWRITE


	)

318 
	#HAL_SD_ERROR_WP_ERASE_SKIP
 
SDMMC_ERROR_WP_ERASE_SKIP


	)

319 
	#HAL_SD_ERROR_CARD_ECC_DISABLED
 
SDMMC_ERROR_CARD_ECC_DISABLED


	)

320 
	#HAL_SD_ERROR_ERASE_RESET
 
SDMMC_ERROR_ERASE_RESET


	)

322 
	#HAL_SD_ERROR_AKE_SEQ_ERR
 
SDMMC_ERROR_AKE_SEQ_ERR


	)

323 
	#HAL_SD_ERROR_INVALID_VOLTRANGE
 
SDMMC_ERROR_INVALID_VOLTRANGE


	)

324 
	#HAL_SD_ERROR_ADDR_OUT_OF_RANGE
 
SDMMC_ERROR_ADDR_OUT_OF_RANGE


	)

325 
	#HAL_SD_ERROR_REQUEST_NOT_APPLICABLE
 
SDMMC_ERROR_REQUEST_NOT_APPLICABLE


	)

326 
	#HAL_SD_ERROR_PARAM
 
SDMMC_ERROR_INVALID_PARAMETER


	)

327 
	#HAL_SD_ERROR_UNSUPPORTED_FEATURE
 
SDMMC_ERROR_UNSUPPORTED_FEATURE


	)

328 
	#HAL_SD_ERROR_BUSY
 
SDMMC_ERROR_BUSY


	)

329 
	#HAL_SD_ERROR_DMA
 
SDMMC_ERROR_DMA


	)

330 
	#HAL_SD_ERROR_TIMEOUT
 
SDMMC_ERROR_TIMEOUT


	)

332 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

333 
	#HAL_SD_ERROR_INVALID_CALLBACK
 
SDMMC_ERROR_INVALID_PARAMETER


	)

342 
	#SD_CONTEXT_NONE
 ((
u√∂t32_t
)0x00000000U√ã

	)

343 
	#SD_CONTEXT_READ_SINGLE_BLOCK
 ((
u√∂t32_t
)0x00000001U√ã

	)

344 
	#SD_CONTEXT_READ_MULTIPLE_BLOCK
 ((
u√∂t32_t
)0x00000002U√ã

	)

345 
	#SD_CONTEXT_WRITE_SINGLE_BLOCK
 ((
u√∂t32_t
)0x00000010U√ã

	)

346 
	#SD_CONTEXT_WRITE_MULTIPLE_BLOCK
 ((
u√∂t32_t
)0x00000020U√ã

	)

347 
	#SD_CONTEXT_IT
 ((
u√∂t32_t
)0x00000008U√ã

	)

348 
	#SD_CONTEXT_DMA
 ((
u√∂t32_t
)0x00000080U√ã

	)

357 
	#CARD_SDSC
 ((
u√∂t32_t
)0x00000000U√ã

	)

358 
	#CARD_SDHC_SDXC
 ((
u√∂t32_t
)0x00000001U√ã

	)

359 
	#CARD_SECURED
 ((
u√∂t32_t
)0x00000003U)

	)

368 
	#CARD_V1_X
 ((
u√∂t32_t
)0x00000000U)

	)

369 
	#CARD_V2_X
 ((
u√∂t32_t
)0x00000001U)

	)

387 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

388 
	#__HAL_SD_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

389 (
__HANDLE__
)->
S√®√£
 = 
HAL_SD_STATE_RESET
; \

390 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

391 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

392 
	}
} 0)

	)

394 
	#__HAL_SD_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_SD_STATE_RESET
)

	)

401 
	#__HAL_SD_ENABLE
(
__HANDLE__
√ã
	`__SDIO_ENABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

407 
	#__HAL_SD_DISABLE
(
__HANDLE__
√ã
	`__SDIO_DISABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

413 
	#__HAL_SD_DMA_ENABLE
(
__HANDLE__
√ã
	`__SDIO_DMA_ENABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

419 
	#__HAL_SD_DMA_DISABLE
(
__HANDLE__
√ã
	`__SDIO_DMA_DISABLE
((__HANDLE__)->
In¬∞‚Ñ¢Àö
)

	)

450 
	#__HAL_SD_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_ENABLE_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

481 
	#__HAL_SD_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_DISABLE_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

512 
	#__HAL_SD_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã
	`__SDIO_GET_FLAG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__FLAG__))

	)

532 
	#__HAL_SD_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã
	`__SDIO_CLEAR_FLAG
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__FLAG__))

	)

563 
	#__HAL_SD_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_GET_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

582 
	#__HAL_SD_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__SDIO_CLEAR_IT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
, (__INTERRUPT__))

	)

596 
HAL_S√®tusTy‚â•Def
 
HAL_SD_In√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

597 
HAL_S√®tusTy‚â•Def
 
HAL_SD_In√¥C¬®d
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

598 
HAL_S√®tusTy‚â•Def
 
HAL_SD_DeIn√¥
 (
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

599 
HAL_SD_M‚Ä¢In√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

600 
HAL_SD_M‚Ä¢DeIn√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

609 
HAL_S√®tusTy‚â•Def
 
HAL_SD_R√≥dBlocks
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
);

610 
HAL_S√®tusTy‚â•Def
 
HAL_SD_Wr√¥eBlocks
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
);

611 
HAL_S√®tusTy‚â•Def
 
HAL_SD_E√∏¬£
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 
BlockS√®œÄAdd
, u√∂t32_√†
BlockEndAdd
);

613 
HAL_S√®tusTy‚â•Def
 
HAL_SD_R√≥dBlocks_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

614 
HAL_S√®tusTy‚â•Def
 
HAL_SD_Wr√¥eBlocks_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

616 
HAL_S√®tusTy‚â•Def
 
HAL_SD_R√≥dBlocks_DMA
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

617 
HAL_S√®tusTy‚â•Def
 
HAL_SD_Wr√¥eBlocks_DMA
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
);

619 
HAL_SD_IRQH‚Ñ¢d√Är
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

622 
HAL_SD_TxC‚àÇtC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

623 
HAL_SD_RxC‚àÇtC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

624 
HAL_SD_E¬∫‚ÄπC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

625 
HAL_SD_Ab‚ÄπtC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

627 #i‚Ä°
def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

629 
HAL_S√®tusTy‚â•Def
 
HAL_SD_Regi¬∞√ÆC√Ülback
 (
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
, 
pSD_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

630 
HAL_S√®tusTy‚â•Def
 
HAL_SD_UnRegi¬∞√ÆC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
);

640 
HAL_S√®tusTy‚â•Def
 
HAL_SD_C‚ÅÑfigWideBusO‚â•√∏ti‚ÅÑ
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 
WideMode
);

641 
HAL_S√®tusTy‚â•Def
 
HAL_SD_C‚ÅÑfigS‚â•edBusO‚â•√∏ti‚ÅÑ
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 
S‚â•edMode
);

649 
HAL_S√®tusTy‚â•Def
 
HAL_SD_S√≠dSDS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 *
pSD¬∞¬©us
);

650 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
HAL_SD_G√´C¬®dS√®√£
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

651 
HAL_S√®tusTy‚â•Def
 
HAL_SD_G√´C¬®dCID
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dCIDTy‚â•Def
 *
pCID
);

652 
HAL_S√®tusTy‚â•Def
 
HAL_SD_G√´C¬®dCSD
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dCSDTy‚â•Def
 *
pCSD
);

653 
HAL_S√®tusTy‚â•Def
 
HAL_SD_G√´C¬®dS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dS√®tusTy‚â•Def
 *
pS√®tus
);

654 
HAL_S√®tusTy‚â•Def
 
HAL_SD_G√´C¬®dInfo
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dInfoTy‚â•Def
 *
pC¬®dInfo
);

662 
HAL_SD_S√®√£Ty‚â•Def
 
HAL_SD_G√´S√®√£
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

663 
u√∂t32_t
 
HAL_SD_G√´E¬∫‚Äπ
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

671 
HAL_S√®tusTy‚â•Def
 
HAL_SD_Ab‚Äπt
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

672 
HAL_S√®tusTy‚â•Def
 
HAL_SD_Ab‚Äπt_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

755 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_smartcard.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_SMARTCARD_H


22 
	#__STM32F1xx_HAL_SMARTCARD_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
BaudR¬©e
;

54 
u√∂t32_t
 
W‚ÄπdL√≠gth
;

57 
u√∂t32_t
 
St‚Ä∫B√¥s
;

60 
u√∂t32_t
 
P¬®√¥y
;

67 
u√∂t32_t
 
Mode
;

70 
u√∂t32_t
 
CLKPÔ¨Å¬®√¥y
;

73 
u√∂t32_t
 
CLKPha¬£
;

76 
u√∂t32_t
 
CLKLa¬∞B√¥
;

80 
u√∂t32_t
 
P¬™sÀá√Är
;

85 
u√∂t32_t
 
Gu¬®dTime
;

87 
u√∂t32_t
 
NACKS√®√£
;

89 }
	tSMARTCARD_In√¥Ty‚â•Def
;

132 
HAL_SMARTCARD_STATE_RESET
 = 0x00U,

134 
HAL_SMARTCARD_STATE_READY
 = 0x20U,

136 
HAL_SMARTCARD_STATE_BUSY
 = 0x24U,

138 
HAL_SMARTCARD_STATE_BUSY_TX
 = 0x21U,

140 
HAL_SMARTCARD_STATE_BUSY_RX
 = 0x22U,

142 
HAL_SMARTCARD_STATE_BUSY_TX_RX
 = 0x23U,

145 
HAL_SMARTCARD_STATE_TIMEOUT
 = 0xA0U,

147 
HAL_SMARTCARD_STATE_ERROR
 = 0xE0U

149 }
	tHAL_SMARTCARD_S√®√£Ty‚â•Def
;

154 
	s__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def


156 
USART_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

158 
SMARTCARD_In√¥Ty‚â•Def
 
In√¥
;

160 
u√∂t8_t
 *
pTxBuffP√•
;

162 
u√∂t16_t
 
TxX‚ÄûrSize
;

164 
__IO
 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

166 
u√∂t8_t
 *
pRxBuffP√•
;

168 
u√∂t16_t
 
RxX‚ÄûrSize
;

170 
__IO
 
u√∂t16_t
 
RxX‚ÄûrCou¬°
;

172 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

174 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

176 
HAL_LockTy‚â•Def
 
Lock
;

178 
__IO
 
HAL_SMARTCARD_S√®√£Ty‚â•Def
 
gS√®√£
;

182 
__IO
 
HAL_SMARTCARD_S√®√£Ty‚â•Def
 
RxS√®√£
;

185 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

187 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

188 (* 
TxC‚àÇtC√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

190 (* 
RxC‚àÇtC√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

192 (* 
E¬∫‚ÄπC√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

194 (* 
Ab‚ÄπtC‚àÇtC√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

196 (* 
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

198 (* 
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

200 (* 
M‚Ä¢In√¥C√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

202 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

205 } 
	tSMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
;

207 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

213 
HAL_SMARTCARD_TX_COMPLETE_CB_ID
 = 0x00U,

214 
HAL_SMARTCARD_RX_COMPLETE_CB_ID
 = 0x01U,

215 
HAL_SMARTCARD_ERROR_CB_ID
 = 0x02U,

216 
HAL_SMARTCARD_ABORT_COMPLETE_CB_ID
 = 0x03U,

217 
HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID
 = 0x04U,

218 
HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID
 = 0x05U,

220 
HAL_SMARTCARD_MSPINIT_CB_ID
 = 0x08U,

221 
HAL_SMARTCARD_MSPDEINIT_CB_ID
 = 0x09U

223 } 
	tHAL_SMARTCARD_C√ÜlbackIDTy‚â•Def
;

228 (*
pSMARTCARD_C√ÜlbackTy‚â•Def
)(
	tSMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
	thsc
);

244 
	#HAL_SMARTCARD_ERROR_NONE
 0x00000000U

	)

245 
	#HAL_SMARTCARD_ERROR_PE
 0x00000001U

	)

246 
	#HAL_SMARTCARD_ERROR_NE
 0x00000002U

	)

247 
	#HAL_SMARTCARD_ERROR_FE
 0x00000004U

	)

248 
	#HAL_SMARTCARD_ERROR_ORE
 0x00000008U

	)

249 
	#HAL_SMARTCARD_ERROR_DMA
 0x00000010U

	)

250 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

251 
	#HAL_SMARTCARD_ERROR_INVALID_CALLBACK
 0x00000020U

	)

260 
	#SMARTCARD_WORDLENGTH_9B
 ((
u√∂t32_t
)
USART_CR1_M
)

	)

268 
	#SMARTCARD_STOPBITS_0_5
 ((
u√∂t32_t
)
USART_CR2_STOP_0
)

	)

269 
	#SMARTCARD_STOPBITS_1_5
 ((
u√∂t32_t
)(
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
))

	)

277 
	#SMARTCARD_PARITY_EVEN
 ((
u√∂t32_t
)
USART_CR1_PCE
)

	)

278 
	#SMARTCARD_PARITY_ODD
 ((
u√∂t32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

286 
	#SMARTCARD_MODE_RX
 ((
u√∂t32_t
)
USART_CR1_RE
)

	)

287 
	#SMARTCARD_MODE_TX
 ((
u√∂t32_t
)
USART_CR1_TE
)

	)

288 
	#SMARTCARD_MODE_TX_RX
 ((
u√∂t32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
))

	)

296 
	#SMARTCARD_POLARITY_LOW
 0x00000000U

	)

297 
	#SMARTCARD_POLARITY_HIGH
 ((
u√∂t32_t
)
USART_CR2_CPOL
)

	)

305 
	#SMARTCARD_PHASE_1EDGE
 0x00000000U

	)

306 
	#SMARTCARD_PHASE_2EDGE
 ((
u√∂t32_t
)
USART_CR2_CPHA
)

	)

314 
	#SMARTCARD_LASTBIT_DISABLE
 0x00000000U

	)

315 
	#SMARTCARD_LASTBIT_ENABLE
 ((
u√∂t32_t
)
USART_CR2_LBCL
)

	)

323 
	#SMARTCARD_NACK_ENABLE
 ((
u√∂t32_t
)
USART_CR3_NACK
)

	)

324 
	#SMARTCARD_NACK_DISABLE
 0x00000000U

	)

332 
	#SMARTCARD_DMAREQ_TX
 ((
u√∂t32_t
)
USART_CR3_DMAT
)

	)

333 
	#SMARTCARD_DMAREQ_RX
 ((
u√∂t32_t
)
USART_CR3_DMAR
)

	)

341 
	#SMARTCARD_PRESCALER_SYSCLK_DIV2
 0x00000001U

	)

342 
	#SMARTCARD_PRESCALER_SYSCLK_DIV4
 0x00000002U

	)

343 
	#SMARTCARD_PRESCALER_SYSCLK_DIV6
 0x00000003U

	)

344 
	#SMARTCARD_PRESCALER_SYSCLK_DIV8
 0x00000004U

	)

345 
	#SMARTCARD_PRESCALER_SYSCLK_DIV10
 0x00000005U

	)

346 
	#SMARTCARD_PRESCALER_SYSCLK_DIV12
 0x00000006U

	)

347 
	#SMARTCARD_PRESCALER_SYSCLK_DIV14
 0x00000007U

	)

348 
	#SMARTCARD_PRESCALER_SYSCLK_DIV16
 0x00000008U

	)

349 
	#SMARTCARD_PRESCALER_SYSCLK_DIV18
 0x00000009U

	)

350 
	#SMARTCARD_PRESCALER_SYSCLK_DIV20
 0x0000000AU

	)

351 
	#SMARTCARD_PRESCALER_SYSCLK_DIV22
 0x0000000BU

	)

352 
	#SMARTCARD_PRESCALER_SYSCLK_DIV24
 0x0000000CU

	)

353 
	#SMARTCARD_PRESCALER_SYSCLK_DIV26
 0x0000000DU

	)

354 
	#SMARTCARD_PRESCALER_SYSCLK_DIV28
 0x0000000EU

	)

355 
	#SMARTCARD_PRESCALER_SYSCLK_DIV30
 0x0000000FU

	)

356 
	#SMARTCARD_PRESCALER_SYSCLK_DIV32
 0x00000010U

	)

357 
	#SMARTCARD_PRESCALER_SYSCLK_DIV34
 0x00000011U

	)

358 
	#SMARTCARD_PRESCALER_SYSCLK_DIV36
 0x00000012U

	)

359 
	#SMARTCARD_PRESCALER_SYSCLK_DIV38
 0x00000013U

	)

360 
	#SMARTCARD_PRESCALER_SYSCLK_DIV40
 0x00000014U

	)

361 
	#SMARTCARD_PRESCALER_SYSCLK_DIV42
 0x00000015U

	)

362 
	#SMARTCARD_PRESCALER_SYSCLK_DIV44
 0x00000016U

	)

363 
	#SMARTCARD_PRESCALER_SYSCLK_DIV46
 0x00000017U

	)

364 
	#SMARTCARD_PRESCALER_SYSCLK_DIV48
 0x00000018U

	)

365 
	#SMARTCARD_PRESCALER_SYSCLK_DIV50
 0x00000019U

	)

366 
	#SMARTCARD_PRESCALER_SYSCLK_DIV52
 0x0000001AU

	)

367 
	#SMARTCARD_PRESCALER_SYSCLK_DIV54
 0x0000001BU

	)

368 
	#SMARTCARD_PRESCALER_SYSCLK_DIV56
 0x0000001CU

	)

369 
	#SMARTCARD_PRESCALER_SYSCLK_DIV58
 0x0000001DU

	)

370 
	#SMARTCARD_PRESCALER_SYSCLK_DIV60
 0x0000001EU

	)

371 
	#SMARTCARD_PRESCALER_SYSCLK_DIV62
 0x0000001FU

	)

381 
	#SMARTCARD_FLAG_TXE
 ((
u√∂t32_t
)
USART_SR_TXE
)

	)

382 
	#SMARTCARD_FLAG_TC
 ((
u√∂t32_t
)
USART_SR_TC
)

	)

383 
	#SMARTCARD_FLAG_RXNE
 ((
u√∂t32_t
)
USART_SR_RXNE
)

	)

384 
	#SMARTCARD_FLAG_IDLE
 ((
u√∂t32_t
)
USART_SR_IDLE
)

	)

385 
	#SMARTCARD_FLAG_ORE
 ((
u√∂t32_t
)
USART_SR_ORE
)

	)

386 
	#SMARTCARD_FLAG_NE
 ((
u√∂t32_t
)
USART_SR_NE
)

	)

387 
	#SMARTCARD_FLAG_FE
 ((
u√∂t32_t
)
USART_SR_FE
)

	)

388 
	#SMARTCARD_FLAG_PE
 ((
u√∂t32_t
)
USART_SR_PE
)

	)

401 
	#SMARTCARD_IT_PE
 ((
u√∂t32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28U | 
USART_CR1_PEIE
))

	)

402 
	#SMARTCARD_IT_TXE
 ((
u√∂t32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28U | 
USART_CR1_TXEIE
))

	)

403 
	#SMARTCARD_IT_TC
 ((
u√∂t32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28U | 
USART_CR1_TCIE
))

	)

404 
	#SMARTCARD_IT_RXNE
 ((
u√∂t32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28U | 
USART_CR1_RXNEIE
))

	)

405 
	#SMARTCARD_IT_IDLE
 ((
u√∂t32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28U | 
USART_CR1_IDLEIE
))

	)

406 
	#SMARTCARD_IT_ERR
 ((
u√∂t32_t
)(
SMARTCARD_CR3_REG_INDEX
 << 28U | 
USART_CR3_EIE
))

	)

425 #i‚Ä°
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1

426 
	#__HAL_SMARTCARD_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

427 (
__HANDLE__
)->
gS√®√£
 = 
HAL_SMARTCARD_STATE_RESET
; \

428 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_RESET
; \

429 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

430 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

431 } 0U)

	)

433 
	#__HAL_SMARTCARD_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

434 (
__HANDLE__
)->
gS√®√£
 = 
HAL_SMARTCARD_STATE_RESET
; \

435 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_RESET
; \

436 } 0U)

	)

444 
	#__HAL_SMARTCARD_FLUSH_DRREGISTER
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DR
)

	)

461 
	#__HAL_SMARTCARD_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 & (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

480 
	#__HAL_SMARTCARD_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__FLAG__))

	)

487 
	#__HAL_SMARTCARD_CLEAR_PEFLAG
(
__HANDLE__
) \

489 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0x00U; \

490 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

491 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
; \

492 
	`UNUSED
(
tm¬•eg
); \

493 } 0U)

	)

500 
	#__HAL_SMARTCARD_CLEAR_FEFLAG
(
__HANDLE__
√ã
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

507 
	#__HAL_SMARTCARD_CLEAR_NEFLAG
(
__HANDLE__
√ã
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

514 
	#__HAL_SMARTCARD_CLEAR_OREFLAG
(
__HANDLE__
√ã
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

521 
	#__HAL_SMARTCARD_CLEAR_IDLEFLAG
(
__HANDLE__
√ã
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

536 
	#__HAL_SMARTCARD_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
SMARTCARD_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø((__INTERRUPT__√ã& 
SMARTCARD_IT_MASK
)): \

537 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø((
__INTERRUPT__
√ã& 
SMARTCARD_IT_MASK
)))

	)

552 
	#__HAL_SMARTCARD_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
SMARTCARD_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~((__INTERRUPT__√ã& 
SMARTCARD_IT_MASK
)): \

553 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø~ ((
__INTERRUPT__
√ã& 
SMARTCARD_IT_MASK
)))

	)

567 
	#__HAL_SMARTCARD_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
√ã(((((__IT__√ã>> 28U√ã=Ô£ø
SMARTCARD_CR1_REG_INDEX
)? (__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
: (__HANDLE__)->In¬∞‚Ñ¢Àö->
CR3
√ã& (((
u√∂t32_t
)(__IT__)√ã& 
SMARTCARD_IT_MASK
))

	)

574 
	#__HAL_SMARTCARD_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø
USART_CR1_UE
)

	)

581 
	#__HAL_SMARTCARD_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~
USART_CR1_UE
)

	)

591 
	#__HAL_SMARTCARD_DMA_REQUEST_ENABLE
(
__HANDLE__
, 
__REQUEST__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø(__REQUEST__))

	)

601 
	#__HAL_SMARTCARD_DMA_REQUEST_DISABLE
(
__HANDLE__
, 
__REQUEST__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø~(__REQUEST__))

	)

616 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_In√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

617 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_ReIn√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

618 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_DeIn√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

619 
HAL_SMARTCARD_M‚Ä¢In√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

620 
HAL_SMARTCARD_M‚Ä¢DeIn√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

621 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

623 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Regi¬∞√ÆC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
HAL_SMARTCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pSMARTCARD_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

624 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_UnRegi¬∞√ÆC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
HAL_SMARTCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

634 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_T√∏nsm√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

635 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_ReÀöive
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

636 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_T√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

637 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_ReÀöive_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

638 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_T√∏nsm√¥_DMA
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

639 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_ReÀöive_DMA
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

641 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Ab‚Äπt
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

642 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

643 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Ab‚ÄπtReÀöive
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

644 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Ab‚Äπt_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

645 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

646 
HAL_S√®tusTy‚â•Def
 
HAL_SMARTCARD_Ab‚ÄπtReÀöive_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

648 
HAL_SMARTCARD_IRQH‚Ñ¢d√Är
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

649 
HAL_SMARTCARD_TxC‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

650 
HAL_SMARTCARD_RxC‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

651 
HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

652 
HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

653 
HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

654 
HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

663 
HAL_SMARTCARD_S√®√£Ty‚â•Def
 
HAL_SMARTCARD_G√´S√®√£
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

664 
u√∂t32_t
 
HAL_SMARTCARD_G√´E¬∫‚Äπ
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

682 
	#SMARTCARD_IT_MASK
 ((
u√∂t32_t
√ã
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
 | 
USART_CR1_RXNEIE
 | \

683 
USART_CR1_IDLEIE
 | 
USART_CR3_EIE
 )

	)

685 
	#SMARTCARD_CR1_REG_INDEX
 1U

	)

686 
	#SMARTCARD_CR3_REG_INDEX
 3U

	)

695 
	#IS_SMARTCARD_WORD_LENGTH
(
LENGTH
√ã((LENGTH√ã=Ô£ø
SMARTCARD_WORDLENGTH_9B
)

	)

696 
	#IS_SMARTCARD_STOPBITS
(
STOPBITS
√ã(((STOPBITS√ã=Ô£ø
SMARTCARD_STOPBITS_0_5
) || \

697 ((
STOPBITS
√ã=Ô£ø
SMARTCARD_STOPBITS_1_5
))

	)

698 
	#IS_SMARTCARD_PARITY
(
PARITY
√ã(((PARITY√ã=Ô£ø
SMARTCARD_PARITY_EVEN
) || \

699 ((
PARITY
√ã=Ô£ø
SMARTCARD_PARITY_ODD
))

	)

700 
	#IS_SMARTCARD_MODE
(
MODE
√ã((((MODE√ã& 0x0000FFF3U√ã=Ô£ø0x00U√ã&& ((MODE√ã!Ô£ø0x000000U))

	)

701 
	#IS_SMARTCARD_POLARITY
(
CPOL
√ã(((CPOL√ã=Ô£ø
SMARTCARD_POLARITY_LOW
√ã|| ((CPOL√ã=Ô£ø
SMARTCARD_POLARITY_HIGH
))

	)

702 
	#IS_SMARTCARD_PHASE
(
CPHA
√ã(((CPHA√ã=Ô£ø
SMARTCARD_PHASE_1EDGE
√ã|| ((CPHA√ã=Ô£ø
SMARTCARD_PHASE_2EDGE
))

	)

703 
	#IS_SMARTCARD_LASTBIT
(
LASTBIT
√ã(((LASTBIT√ã=Ô£ø
SMARTCARD_LASTBIT_DISABLE
) || \

704 ((
LASTBIT
√ã=Ô£ø
SMARTCARD_LASTBIT_ENABLE
))

	)

705 
	#IS_SMARTCARD_NACK_STATE
(
NACK
√ã(((NACK√ã=Ô£ø
SMARTCARD_NACK_ENABLE
) || \

706 ((
NACK
√ã=Ô£ø
SMARTCARD_NACK_DISABLE
))

	)

707 
	#IS_SMARTCARD_BAUDRATE
(
BAUDRATE
√ã((BAUDRATE√ã< 4500001U)

	)

709 
	#SMARTCARD_DIV
(
__PCLK__
, 
__BAUD__
√ã(((__PCLK__)*25U)/(4U*(__BAUD__)))

	)

710 
	#SMARTCARD_DIVMANT
(
__PCLK__
, 
__BAUD__
√ã(
	`SMARTCARD_DIV
((__PCLK__), (__BAUD__))/100U)

	)

711 
	#SMARTCARD_DIVFRAQ
(
__PCLK__
, 
__BAUD__
√ã((((
	`SMARTCARD_DIV
((__PCLK__), (__BAUD__)√ã- (
	`SMARTCARD_DIVMANT
((__PCLK__), (__BAUD__)√ã* 100U)√ã* 16U√ã+ 50U√ã/ 100U)

	)

714 
	#SMARTCARD_BRR
(
__PCLK__
, 
__BAUD__
√ã(((
	`SMARTCARD_DIVMANT
((__PCLK__), (__BAUD__)) << 4U) + \

715 (
	`SMARTCARD_DIVFRAQ
((
__PCLK__
), (
__BAUD__
)) & 0xF0U)) + \

716 (
	`SMARTCARD_DIVFRAQ
((
__PCLK__
), (
__BAUD__
)√ã& 0x0FU))

	)

739 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_SPI_H


22 
	#STM32F1xx_HAL_SPI_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
Mode
;

52 
u√∂t32_t
 
D√∫eÀòi‚ÅÑ
;

55 
u√∂t32_t
 
D¬©aSize
;

58 
u√∂t32_t
 
CLKPÔ¨Å¬®√¥y
;

61 
u√∂t32_t
 
CLKPha¬£
;

64 
u√∂t32_t
 
NSS
;

68 
u√∂t32_t
 
BaudR¬©eP¬™sÀá√Är
;

74 
u√∂t32_t
 
F√∫¬∞B√¥
;

77 
u√∂t32_t
 
TIMode
;

80 
u√∂t32_t
 
CRCC√Ücu≈ìti‚ÅÑ
;

83 
u√∂t32_t
 
CRCPÔ¨Åynom√ºl
;

85 } 
	tSPI_In√¥Ty‚â•Def
;

92 
HAL_SPI_STATE_RESET
 = 0x00U,

93 
HAL_SPI_STATE_READY
 = 0x01U,

94 
HAL_SPI_STATE_BUSY
 = 0x02U,

95 
HAL_SPI_STATE_BUSY_TX
 = 0x03U,

96 
HAL_SPI_STATE_BUSY_RX
 = 0x04U,

97 
HAL_SPI_STATE_BUSY_TX_RX
 = 0x05U,

98 
HAL_SPI_STATE_ERROR
 = 0x06U,

99 
HAL_SPI_STATE_ABORT
 = 0x07U

100 } 
	tHAL_SPI_S√®√£Ty‚â•Def
;

105 
	s__SPI_H‚Ñ¢d√ÄTy‚â•Def


107 
SPI_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

109 
SPI_In√¥Ty‚â•Def
 
In√¥
;

111 
u√∂t8_t
 *
pTxBuffP√•
;

113 
u√∂t16_t
 
TxX‚ÄûrSize
;

115 
__IO
 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

117 
u√∂t8_t
 *
pRxBuffP√•
;

119 
u√∂t16_t
 
RxX‚ÄûrSize
;

121 
__IO
 
u√∂t16_t
 
RxX‚ÄûrCou¬°
;

123 (*
RxISR
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

125 (*
TxISR
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

127 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

129 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

131 
HAL_LockTy‚â•Def
 
Lock
;

133 
__IO
 
HAL_SPI_S√®√£Ty‚â•Def
 
S√®√£
;

135 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

137 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

138 (* 
TxC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

139 (* 
RxC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

140 (* 
TxRxC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

141 (* 
TxH√ÜfC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

142 (* 
RxH√ÜfC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

143 (* 
TxRxH√ÜfC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

144 (* 
E¬∫‚ÄπC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

145 (* 
Ab‚ÄπtC‚àÇtC√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

146 (* 
M‚Ä¢In√¥C√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

147 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

150 } 
	tSPI_H‚Ñ¢d√ÄTy‚â•Def
;

152 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

158 
HAL_SPI_TX_COMPLETE_CB_ID
 = 0x00U,

159 
HAL_SPI_RX_COMPLETE_CB_ID
 = 0x01U,

160 
HAL_SPI_TX_RX_COMPLETE_CB_ID
 = 0x02U,

161 
HAL_SPI_TX_HALF_COMPLETE_CB_ID
 = 0x03U,

162 
HAL_SPI_RX_HALF_COMPLETE_CB_ID
 = 0x04U,

163 
HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID
 = 0x05U,

164 
HAL_SPI_ERROR_CB_ID
 = 0x06U,

165 
HAL_SPI_ABORT_CB_ID
 = 0x07U,

166 
HAL_SPI_MSPINIT_CB_ID
 = 0x08U,

167 
HAL_SPI_MSPDEINIT_CB_ID
 = 0x09U

169 } 
	tHAL_SPI_C√ÜlbackIDTy‚â•Def
;

174 (*
pSPI_C√ÜlbackTy‚â•Def
)(
	tSPI_H‚Ñ¢d√ÄTy‚â•Def
 *
	th‚Ä¢i
);

189 
	#HAL_SPI_ERROR_NONE
 (0x00000000U√ã

	)

190 
	#HAL_SPI_ERROR_MODF
 (0x00000001U√ã

	)

191 
	#HAL_SPI_ERROR_CRC
 (0x00000002U√ã

	)

192 
	#HAL_SPI_ERROR_OVR
 (0x00000004U√ã

	)

193 
	#HAL_SPI_ERROR_DMA
 (0x00000010U√ã

	)

194 
	#HAL_SPI_ERROR_FLAG
 (0x00000020U√ã

	)

195 
	#HAL_SPI_ERROR_ABORT
 (0x00000040U√ã

	)

196 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

197 
	#HAL_SPI_ERROR_INVALID_CALLBACK
 (0x00000080U√ã

	)

206 
	#SPI_MODE_SLAVE
 (0x00000000U)

	)

207 
	#SPI_MODE_MASTER
 (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
)

	)

215 
	#SPI_DIRECTION_2LINES
 (0x00000000U)

	)

216 
	#SPI_DIRECTION_2LINES_RXONLY
 
SPI_CR1_RXONLY


	)

217 
	#SPI_DIRECTION_1LINE
 
SPI_CR1_BIDIMODE


	)

225 
	#SPI_DATASIZE_8BIT
 (0x00000000U)

	)

226 
	#SPI_DATASIZE_16BIT
 
SPI_CR1_DFF


	)

234 
	#SPI_POLARITY_LOW
 (0x00000000U)

	)

235 
	#SPI_POLARITY_HIGH
 
SPI_CR1_CPOL


	)

243 
	#SPI_PHASE_1EDGE
 (0x00000000U)

	)

244 
	#SPI_PHASE_2EDGE
 
SPI_CR1_CPHA


	)

252 
	#SPI_NSS_SOFT
 
SPI_CR1_SSM


	)

253 
	#SPI_NSS_HARD_INPUT
 (0x00000000U)

	)

254 
	#SPI_NSS_HARD_OUTPUT
 (
SPI_CR2_SSOE
 << 16U)

	)

262 
	#SPI_BAUDRATEPRESCALER_2
 (0x00000000U)

	)

263 
	#SPI_BAUDRATEPRESCALER_4
 (
SPI_CR1_BR_0
)

	)

264 
	#SPI_BAUDRATEPRESCALER_8
 (
SPI_CR1_BR_1
)

	)

265 
	#SPI_BAUDRATEPRESCALER_16
 (
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
)

	)

266 
	#SPI_BAUDRATEPRESCALER_32
 (
SPI_CR1_BR_2
)

	)

267 
	#SPI_BAUDRATEPRESCALER_64
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_0
)

	)

268 
	#SPI_BAUDRATEPRESCALER_128
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
)

	)

269 
	#SPI_BAUDRATEPRESCALER_256
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
)

	)

277 
	#SPI_FIRSTBIT_MSB
 (0x00000000U)

	)

278 
	#SPI_FIRSTBIT_LSB
 
SPI_CR1_LSBFIRST


	)

286 
	#SPI_TIMODE_DISABLE
 (0x00000000U)

	)

294 
	#SPI_CRCCALCULATION_DISABLE
 (0x00000000U)

	)

295 
	#SPI_CRCCALCULATION_ENABLE
 
SPI_CR1_CRCEN


	)

303 
	#SPI_IT_TXE
 
SPI_CR2_TXEIE


	)

304 
	#SPI_IT_RXNE
 
SPI_CR2_RXNEIE


	)

305 
	#SPI_IT_ERR
 
SPI_CR2_ERRIE


	)

313 
	#SPI_FLAG_RXNE
 
SPI_SR_RXNE


	)

314 
	#SPI_FLAG_TXE
 
SPI_SR_TXE


	)

315 
	#SPI_FLAG_BSY
 
SPI_SR_BSY


	)

316 
	#SPI_FLAG_CRCERR
 
SPI_SR_CRCERR


	)

317 
	#SPI_FLAG_MODF
 
SPI_SR_MODF


	)

318 
	#SPI_FLAG_OVR
 
SPI_SR_OVR


	)

319 
	#SPI_FLAG_MASK
 (
SPI_SR_RXNE
 | 
SPI_SR_TXE
 | 
SPI_SR_BSY
\

320 | 
SPI_SR_CRCERR
 | 
SPI_SR_MODF
 | 
SPI_SR_OVR
)

	)

339 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

340 
	#__HAL_SPI_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

341 (
__HANDLE__
)->
S√®√£
 = 
HAL_SPI_STATE_RESET
; \

342 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

343 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

344 } 0)

	)

346 
	#__HAL_SPI_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_SPI_STATE_RESET
)

	)

359 
	#__HAL_SPI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
, (__INTERRUPT__))

	)

371 
	#__HAL_SPI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
, (__INTERRUPT__))

	)

383 
	#__HAL_SPI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR2
\

384 & (
__INTERRUPT__
)√ã=Ô£ø(__INTERRUPT__)√ã? 
SET
 : 
RESET
)

	)

399 
	#__HAL_SPI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
√ã& (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

406 
	#__HAL_SPI_CLEAR_CRCERRFLAG
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = (
u√∂t16_t
)(~
SPI_FLAG_CRCERR
))

	)

413 
	#__HAL_SPI_CLEAR_MODFFLAG
(
__HANDLE__
) \

415 
__IO
 
u√∂t32_t
 
tm¬•eg_modf
 = 0x00U; \

416 
tm¬•eg_modf
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

417 
	`CLEAR_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_SPE
); \

418 
	`UNUSED
(
tm¬•eg_modf
); \

419 } 0U)

	)

426 
	#__HAL_SPI_CLEAR_OVRFLAG
(
__HANDLE__
) \

428 
__IO
 
u√∂t32_t
 
tm¬•eg_ovr
 = 0x00U; \

429 
tm¬•eg_ovr
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
; \

430 
tm¬•eg_ovr
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

431 
	`UNUSED
(
tm¬•eg_ovr
); \

432 } 0U)

	)

439 
	#__HAL_SPI_ENABLE
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_SPE
)

	)

446 
	#__HAL_SPI_DISABLE
(
__HANDLE__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_SPE
)

	)

456 
	#SPI_INVALID_CRC_ERROR
 0U

	)

457 
	#SPI_VALID_CRC_ERROR
 1U

	)

472 
	#SPI_1LINE_TX
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_BIDIOE
)

	)

479 
	#SPI_1LINE_RX
(
__HANDLE__
√ã
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_BIDIOE
)

	)

486 
	#SPI_RESET_CRC
(
__HANDLE__
√ãdo{
	`CLEAR_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCEN
);\

487 
	`SET_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCEN
);}0U)

	)

501 
	#SPI_CHECK_FLAG
(
__SR__
, 
__FLAG__
√ã((((__SR__√ã& ((__FLAG__√ã& 
SPI_FLAG_MASK
)) == \

502 ((
__FLAG__
√ã& 
SPI_FLAG_MASK
)√ã? 
SET
 : 
RESET
)

	)

513 
	#SPI_CHECK_IT_SOURCE
(
__CR2__
, 
__INTERRUPT__
) ((((__CR2__) & (__INTERRUPT__)) == \

514 (
__INTERRUPT__
)√ã? 
SET
 : 
RESET
)

	)

521 
	#IS_SPI_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
SPI_MODE_SLAVE
) || \

522 ((
__MODE__
√ã=Ô£ø
SPI_MODE_MASTER
))

	)

529 
	#IS_SPI_DIRECTION
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
SPI_DIRECTION_2LINES
) || \

530 ((
__MODE__
√ã=Ô£ø
SPI_DIRECTION_2LINES_RXONLY
) || \

531 ((
__MODE__
√ã=Ô£ø
SPI_DIRECTION_1LINE
))

	)

537 
	#IS_SPI_DIRECTION_2LINES
(
__MODE__
√ã((__MODE__√ã=Ô£ø
SPI_DIRECTION_2LINES
)

	)

543 
	#IS_SPI_DIRECTION_2LINES_OR_1LINE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
SPI_DIRECTION_2LINES
) || \

544 ((
__MODE__
√ã=Ô£ø
SPI_DIRECTION_1LINE
))

	)

551 
	#IS_SPI_DATASIZE
(
__DATASIZE__
√ã(((__DATASIZE__√ã=Ô£ø
SPI_DATASIZE_16BIT
) || \

552 ((
__DATASIZE__
√ã=Ô£ø
SPI_DATASIZE_8BIT
))

	)

559 
	#IS_SPI_CPOL
(
__CPOL__
√ã(((__CPOL__√ã=Ô£ø
SPI_POLARITY_LOW
) || \

560 ((
__CPOL__
√ã=Ô£ø
SPI_POLARITY_HIGH
))

	)

567 
	#IS_SPI_CPHA
(
__CPHA__
√ã(((__CPHA__√ã=Ô£ø
SPI_PHASE_1EDGE
) || \

568 ((
__CPHA__
√ã=Ô£ø
SPI_PHASE_2EDGE
))

	)

575 
	#IS_SPI_NSS
(
__NSS__
√ã(((__NSS__√ã=Ô£ø
SPI_NSS_SOFT
) || \

576 ((
__NSS__
√ã=Ô£ø
SPI_NSS_HARD_INPUT
) || \

577 ((
__NSS__
√ã=Ô£ø
SPI_NSS_HARD_OUTPUT
))

	)

584 
	#IS_SPI_BAUDRATE_PRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
SPI_BAUDRATEPRESCALER_2
) || \

585 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_4
) || \

586 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_8
) || \

587 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_16
) || \

588 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_32
) || \

589 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_64
) || \

590 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_128
) || \

591 ((
__PRESCALER__
√ã=Ô£ø
SPI_BAUDRATEPRESCALER_256
))

	)

598 
	#IS_SPI_FIRST_BIT
(
__BIT__
√ã(((__BIT__√ã=Ô£ø
SPI_FIRSTBIT_MSB
) || \

599 ((
__BIT__
√ã=Ô£ø
SPI_FIRSTBIT_LSB
))

	)

606 
	#IS_SPI_TIMODE
(
__MODE__
√ã((__MODE__√ã=Ô£ø
SPI_TIMODE_DISABLE
)

	)

613 
	#IS_SPI_CRC_CALCULATION
(
__CALCULATION__
√ã(((__CALCULATION__√ã=Ô£ø
SPI_CRCCALCULATION_DISABLE
) || \

614 ((
__CALCULATION__
√ã=Ô£ø
SPI_CRCCALCULATION_ENABLE
))

	)

621 
	#IS_SPI_CRC_POLYNOMIAL
(
__POLYNOMIAL__
) (((__POLYNOMIAL__) >= 0x1U) && \

622 ((
__POLYNOMIAL__
) <= 0xFFFFU) && \

623 (((
__POLYNOMIAL__
)&0x1U√ã!Ô£ø0U))

	)

629 
	#IS_SPI_DMA_HANDLE
(
__HANDLE__
√ã((__HANDLE__√ã!Ô£ø
NULL
)

	)

639 
u√∂t8_t
 
SPI_ISCRCE¬∫‚ÄπV√Üid
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

653 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_In√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

654 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_DeIn√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

655 
HAL_SPI_M‚Ä¢In√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

656 
HAL_SPI_M‚Ä¢DeIn√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

659 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

660 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_Regi¬∞√ÆC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
HAL_SPI_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pSPI_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

661 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_UnRegi¬∞√ÆC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
HAL_SPI_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

671 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_T√∏nsm√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

672 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_ReÀöive
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

673 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_T√∏nsm√¥ReÀöive
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
,

674 
u√∂t32_t
 
Timeout
);

675 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_T√∏nsm√¥_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

676 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_ReÀöive_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

677 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_T√∏nsm√¥ReÀöive_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
,

678 
u√∂t16_t
 
Size
);

679 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_T√∏nsm√¥_DMA
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

680 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_ReÀöive_DMA
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

681 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_T√∏nsm√¥ReÀöive_DMA
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
,

682 
u√∂t16_t
 
Size
);

683 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_DMAPau¬£
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

684 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_DMAResume
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

685 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_DMASt‚Ä∫
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

687 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_Ab‚Äπt
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

688 
HAL_S√®tusTy‚â•Def
 
HAL_SPI_Ab‚Äπt_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

690 
HAL_SPI_IRQH‚Ñ¢d√Är
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

691 
HAL_SPI_TxC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

692 
HAL_SPI_RxC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

693 
HAL_SPI_TxRxC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

694 
HAL_SPI_TxH√ÜfC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

695 
HAL_SPI_RxH√ÜfC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

696 
HAL_SPI_TxRxH√ÜfC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

697 
HAL_SPI_E¬∫‚ÄπC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

698 
HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

707 
HAL_SPI_S√®√£Ty‚â•Def
 
HAL_SPI_G√´S√®√£
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

708 
u√∂t32_t
 
HAL_SPI_G√´E¬∫‚Äπ
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

725 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sram.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_SRAM_H


22 
	#STM32F1xx_HAL_SRAM_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
 
FSMC_BANK1


31 
	~"¬∞m32f1xx_≈í_fsmc.h
"

50 
HAL_SRAM_STATE_RESET
 = 0x00U,

51 
HAL_SRAM_STATE_READY
 = 0x01U,

52 
HAL_SRAM_STATE_BUSY
 = 0x02U,

53 
HAL_SRAM_STATE_ERROR
 = 0x03U,

54 
HAL_SRAM_STATE_PROTECTED
 = 0x04U

56 } 
	tHAL_SRAM_S√®√£Ty‚â•Def
;

61 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

62 
	g__SRAM_H‚Ñ¢d√ÄTy‚â•Def


67 
FSMC_NORSRAM_Ty‚â•Def
 *
	gIn¬∞‚Ñ¢Àö
;

69 
FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 *
	gEx√£nded
;

71 
FSMC_NORSRAM_In√¥Ty‚â•Def
 
	gIn√¥
;

73 
HAL_LockTy‚â•Def
 
	gLock
;

75 
__IO
 
HAL_SRAM_S√®√£Ty‚â•Def
 
	gS√®√£
;

77 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghdma
;

79 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

80 (* 
	gM‚Ä¢In√¥C√Ülback
)(
__SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
	gh¬ßam
);

81 (* 
	gM‚Ä¢DeIn√¥C√Ülback
)(
__SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
	gh¬ßam
);

82 (* 
	gDmaX‚ÄûrC‚àÇtC√Ülback
)(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghdma
);

83 (* 
	gDmaX‚ÄûrE¬∫‚ÄπC√Ülback
)(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
	ghdma
);

85 } 
	tSRAM_H‚Ñ¢d√ÄTy‚â•Def
;

87 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

93 
	mHAL_SRAM_MSP_INIT_CB_ID
 = 0x00U,

94 
	mHAL_SRAM_MSP_DEINIT_CB_ID
 = 0x01U,

95 
	mHAL_SRAM_DMA_XFER_CPLT_CB_ID
 = 0x02U,

96 
	mHAL_SRAM_DMA_XFER_ERR_CB_ID
 = 0x03U

97 } 
	tHAL_SRAM_C√ÜlbackIDTy‚â•Def
;

102 (*
	tpSRAM_C√ÜlbackTy‚â•Def
)(
	tSRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
	th¬ßam
);

103 (*
	tpSRAM_DmaC√ÜlbackTy‚â•Def
)(
	tDMA_H‚Ñ¢d√ÄTy‚â•Def
 *
	thdma
);

120 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

121 
	#__HAL_SRAM_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

122 (
__HANDLE__
)->
S√®√£
 = 
HAL_SRAM_STATE_RESET
; \

123 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

124 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

125 
	}
} 0)

	)

127 
	#__HAL_SRAM_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_SRAM_STATE_RESET
)

	)

144 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_In√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
,

145 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
ExtTim√∂g
);

146 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_DeIn√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
);

147 
HAL_SRAM_M‚Ä¢In√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
);

148 
HAL_SRAM_M‚Ä¢DeIn√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
);

159 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_R√≥d_8b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pD¬∞Buf‚Äûr
,

160 
u√∂t32_t
 
Buf‚ÄûrSize
);

161 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Wr√¥e_8b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pSrcBuf‚Äûr
,

162 
u√∂t32_t
 
Buf‚ÄûrSize
);

163 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_R√≥d_16b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pD¬∞Buf‚Äûr
,

164 
u√∂t32_t
 
Buf‚ÄûrSize
);

165 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Wr√¥e_16b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pSrcBuf‚Äûr
,

166 
u√∂t32_t
 
Buf‚ÄûrSize
);

167 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_R√≥d_32b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pD¬∞Buf‚Äûr
,

168 
u√∂t32_t
 
Buf‚ÄûrSize
);

169 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Wr√¥e_32b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pSrcBuf‚Äûr
,

170 
u√∂t32_t
 
Buf‚ÄûrSize
);

171 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_R√≥d_DMA
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pD¬∞Buf‚Äûr
,

172 
u√∂t32_t
 
Buf‚ÄûrSize
);

173 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Wr√¥e_DMA
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pSrcBuf‚Äûr
,

174 
u√∂t32_t
 
Buf‚ÄûrSize
);

176 
HAL_SRAM_DMA_X‚ÄûrC‚àÇtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

177 
HAL_SRAM_DMA_X‚ÄûrE¬∫‚ÄπC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

179 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

181 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Regi¬∞√ÆC√Ülback
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
HAL_SRAM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

182 
pSRAM_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

183 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_UnRegi¬∞√ÆC√Ülback
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
HAL_SRAM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
);

184 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Regi¬∞√ÆDmaC√Ülback
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
HAL_SRAM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

185 
pSRAM_DmaC√ÜlbackTy‚â•Def
 
pC√Ülback
);

197 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
);

198 
HAL_S√®tusTy‚â•Def
 
HAL_SRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
);

209 
HAL_SRAM_S√®√£Ty‚â•Def
 
HAL_SRAM_G√´S√®√£
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
);

229 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_TIM_H


22 
	#STM32F1xx_HAL_TIM_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
P¬™sÀá√Är
;

52 
u√∂t32_t
 
Cou¬°√ÆMode
;

55 
u√∂t32_t
 
P√Æiod
;

59 
u√∂t32_t
 
ClockDivisi‚ÅÑ
;

62 
u√∂t32_t
 
R√Ø√´√¥i‚ÅÑCou¬°√Æ
;

71 
u√∂t32_t
 
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
;

73 } 
	tTIM_Ba¬£_In√¥Ty‚â•Def
;

80 
u√∂t32_t
 
OCMode
;

83 
u√∂t32_t
 
Pul¬£
;

86 
u√∂t32_t
 
OCPÔ¨Å¬®√¥y
;

89 
u√∂t32_t
 
OCNPÔ¨Å¬®√¥y
;

93 
u√∂t32_t
 
OCFa¬∞Mode
;

98 
u√∂t32_t
 
OCId√ÄS√®√£
;

102 
u√∂t32_t
 
OCNId√ÄS√®√£
;

105 } 
	tTIM_OC_In√¥Ty‚â•Def
;

112 
u√∂t32_t
 
OCMode
;

115 
u√∂t32_t
 
Pul¬£
;

118 
u√∂t32_t
 
OCPÔ¨Å¬®√¥y
;

121 
u√∂t32_t
 
OCNPÔ¨Å¬®√¥y
;

125 
u√∂t32_t
 
OCId√ÄS√®√£
;

129 
u√∂t32_t
 
OCNId√ÄS√®√£
;

133 
u√∂t32_t
 
ICPÔ¨Å¬®√¥y
;

136 
u√∂t32_t
 
ICS√±eÀòi‚ÅÑ
;

139 
u√∂t32_t
 
ICF√ª√£r
;

141 } 
	tTIM_O‚àöPul¬£_In√¥Ty‚â•Def
;

148 
u√∂t32_t
 
ICPÔ¨Å¬®√¥y
;

151 
u√∂t32_t
 
ICS√±eÀòi‚ÅÑ
;

154 
u√∂t32_t
 
ICP¬™sÀá√Är
;

157 
u√∂t32_t
 
ICF√ª√£r
;

159 } 
	tTIM_IC_In√¥Ty‚â•Def
;

166 
u√∂t32_t
 
Encod√ÆMode
;

169 
u√∂t32_t
 
IC1PÔ¨Å¬®√¥y
;

172 
u√∂t32_t
 
IC1S√±eÀòi‚ÅÑ
;

175 
u√∂t32_t
 
IC1P¬™sÀá√Är
;

178 
u√∂t32_t
 
IC1F√ª√£r
;

181 
u√∂t32_t
 
IC2PÔ¨Å¬®√¥y
;

184 
u√∂t32_t
 
IC2S√±eÀòi‚ÅÑ
;

187 
u√∂t32_t
 
IC2P¬™sÀá√Är
;

190 
u√∂t32_t
 
IC2F√ª√£r
;

192 } 
	tTIM_Encod√Æ_In√¥Ty‚â•Def
;

199 
u√∂t32_t
 
ClockSourÀö
;

201 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
;

203 
u√∂t32_t
 
ClockP¬™sÀá√Är
;

205 
u√∂t32_t
 
ClockF√ª√£r
;

207 } 
	tTIM_ClockC‚ÅÑfigTy‚â•Def
;

214 
u√∂t32_t
 
C√Ä¬®I‚âàutS√®√£
;

216 
u√∂t32_t
 
C√Ä¬®I‚âàutSourÀö
;

218 
u√∂t32_t
 
C√Ä¬®I‚âàutPÔ¨Å¬®√¥y
;

220 
u√∂t32_t
 
C√Ä¬®I‚âàutP¬™sÀá√Är
;

222 
u√∂t32_t
 
C√Ä¬®I‚âàutF√ª√£r
;

224 } 
	tTIM_C√Ä¬®I‚âàutC‚ÅÑfigTy‚â•Def
;

231 
u√∂t32_t
 
Ma¬∞√ÆOu√ßutTrigg√Æ
;

233 
u√∂t32_t
 
Ma¬∞√ÆS≈ìveMode
;

240 } 
	tTIM_Ma¬∞√ÆC‚ÅÑfigTy‚â•Def
;

247 
u√∂t32_t
 
S≈ìveMode
;

249 
u√∂t32_t
 
I‚âàutTrigg√Æ
;

251 
u√∂t32_t
 
Trigg√ÆPÔ¨Å¬®√¥y
;

253 
u√∂t32_t
 
Trigg√ÆP¬™sÀá√Är
;

255 
u√∂t32_t
 
Trigg√ÆF√ª√£r
;

258 } 
	tTIM_S≈ìveC‚ÅÑfigTy‚â•Def
;

267 
u√∂t32_t
 
OffS√®√£RunMode
;

269 
u√∂t32_t
 
OffS√®√£IDLEMode
;

271 
u√∂t32_t
 
LockLev√±
;

273 
u√∂t32_t
 
D√≥dTime
;

275 
u√∂t32_t
 
B¬™akS√®√£
;

277 
u√∂t32_t
 
B¬™akPÔ¨Å¬®√¥y
;

279 
u√∂t32_t
 
B¬™akF√ª√£r
;

281 
u√∂t32_t
 
Autom¬©icOu√ßut
;

283 } 
	tTIM_B¬™akD√≥dTimeC‚ÅÑfigTy‚â•Def
;

290 
HAL_TIM_STATE_RESET
 = 0x00U,

291 
HAL_TIM_STATE_READY
 = 0x01U,

292 
HAL_TIM_STATE_BUSY
 = 0x02U,

293 
HAL_TIM_STATE_TIMEOUT
 = 0x03U,

294 
HAL_TIM_STATE_ERROR
 = 0x04U

295 } 
	tHAL_TIM_S√®√£Ty‚â•Def
;

302 
HAL_TIM_CHANNEL_STATE_RESET
 = 0x00U,

303 
HAL_TIM_CHANNEL_STATE_READY
 = 0x01U,

304 
HAL_TIM_CHANNEL_STATE_BUSY
 = 0x02U,

305 } 
	tHAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
;

312 
HAL_DMA_BURST_STATE_RESET
 = 0x00U,

313 
HAL_DMA_BURST_STATE_READY
 = 0x01U,

314 
HAL_DMA_BURST_STATE_BUSY
 = 0x02U,

315 } 
	tHAL_TIM_DMABur¬∞S√®√£Ty‚â•Def
;

322 
HAL_TIM_ACTIVE_CHANNEL_1
 = 0x01U,

323 
HAL_TIM_ACTIVE_CHANNEL_2
 = 0x02U,

324 
HAL_TIM_ACTIVE_CHANNEL_3
 = 0x04U,

325 
HAL_TIM_ACTIVE_CHANNEL_4
 = 0x08U,

326 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
 = 0x00U

327 } 
	tHAL_TIM_AÀòiveCh‚Ñ¢‚àöl
;

332 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

333 
__TIM_H‚Ñ¢d√ÄTy‚â•Def


338 
TIM_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

339 
TIM_Ba¬£_In√¥Ty‚â•Def
 
In√¥
;

340 
HAL_TIM_AÀòiveCh‚Ñ¢‚àöl
 
Ch‚Ñ¢‚àöl
;

341 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
[7];

343 
HAL_LockTy‚â•Def
 
Lock
;

344 
__IO
 
HAL_TIM_S√®√£Ty‚â•Def
 
S√®√£
;

345 
__IO
 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
Ch‚Ñ¢‚àölS√®√£
[4];

346 
__IO
 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
Ch‚Ñ¢‚àölNS√®√£
[4];

347 
__IO
 
HAL_TIM_DMABur¬∞S√®√£Ty‚â•Def
 
DMABur¬∞S√®√£
;

349 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

350 (* 
Ba¬£_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

351 (* 
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

352 (* 
IC_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

353 (* 
IC_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

354 (* 
OC_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

355 (* 
OC_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

356 (* 
PWM_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

357 (* 
PWM_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

358 (* 
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

359 (* 
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

360 (* 
Encod√Æ_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

361 (* 
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

362 (* 
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

363 (* 
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

364 (* 
P√ÆiodE≈ìp¬£dC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

365 (* 
P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

366 (* 
Trigg√ÆC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

367 (* 
Trigg√ÆH√ÜfC‚àÇtC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

368 (* 
IC_C‚â†tu¬™C√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

369 (* 
IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

370 (* 
OC_D√±ayE≈ìp¬£dC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

371 (* 
PWM_Pul¬£F√∂ishedC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

372 (* 
PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

373 (* 
E¬∫‚ÄπC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

374 (* 
Commu√®ti‚ÅÑC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

375 (* 
Commu√®ti‚ÅÑH√ÜfC‚àÇtC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

376 (* 
B¬™akC√Ülback
)(
__TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

378 } 
	tTIM_H‚Ñ¢d√ÄTy‚â•Def
;

380 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

386 
HAL_TIM_BASE_MSPINIT_CB_ID
 = 0x00U

387 , 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 = 0x01U

388 , 
HAL_TIM_IC_MSPINIT_CB_ID
 = 0x02U

389 , 
HAL_TIM_IC_MSPDEINIT_CB_ID
 = 0x03U

390 , 
HAL_TIM_OC_MSPINIT_CB_ID
 = 0x04U

391 , 
HAL_TIM_OC_MSPDEINIT_CB_ID
 = 0x05U

392 , 
HAL_TIM_PWM_MSPINIT_CB_ID
 = 0x06U

393 , 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 = 0x07U

394 , 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 = 0x08U

395 , 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 = 0x09U

396 , 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 = 0x0AU

397 , 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 = 0x0BU

398 , 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 = 0x0CU

399 , 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 = 0x0DU

400 , 
HAL_TIM_PERIOD_ELAPSED_CB_ID
 = 0x0EU

401 , 
HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID
 = 0x0FU

402 , 
HAL_TIM_TRIGGER_CB_ID
 = 0x10U

403 , 
HAL_TIM_TRIGGER_HALF_CB_ID
 = 0x11U

405 , 
HAL_TIM_IC_CAPTURE_CB_ID
 = 0x12U

406 , 
HAL_TIM_IC_CAPTURE_HALF_CB_ID
 = 0x13U

407 , 
HAL_TIM_OC_DELAY_ELAPSED_CB_ID
 = 0x14U

408 , 
HAL_TIM_PWM_PULSE_FINISHED_CB_ID
 = 0x15U

409 , 
HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID
 = 0x16U

410 , 
HAL_TIM_ERROR_CB_ID
 = 0x17U

411 , 
HAL_TIM_COMMUTATION_CB_ID
 = 0x18U

412 , 
HAL_TIM_COMMUTATION_HALF_CB_ID
 = 0x19U

413 , 
HAL_TIM_BREAK_CB_ID
 = 0x1AU

414 } 
	tHAL_TIM_C√ÜlbackIDTy‚â•Def
;

419 (*
pTIM_C√ÜlbackTy‚â•Def
)(
	tTIM_H‚Ñ¢d√ÄTy‚â•Def
 *
	thtim
);

436 
	#TIM_CLEARINPUTSOURCE_NONE
 0x00000000U

	)

437 
	#TIM_CLEARINPUTSOURCE_ETR
 0x00000001U

	)

445 
	#TIM_DMABASE_CR1
 0x00000000U

	)

446 
	#TIM_DMABASE_CR2
 0x00000001U

	)

447 
	#TIM_DMABASE_SMCR
 0x00000002U

	)

448 
	#TIM_DMABASE_DIER
 0x00000003U

	)

449 
	#TIM_DMABASE_SR
 0x00000004U

	)

450 
	#TIM_DMABASE_EGR
 0x00000005U

	)

451 
	#TIM_DMABASE_CCMR1
 0x00000006U

	)

452 
	#TIM_DMABASE_CCMR2
 0x00000007U

	)

453 
	#TIM_DMABASE_CCER
 0x00000008U

	)

454 
	#TIM_DMABASE_CNT
 0x00000009U

	)

455 
	#TIM_DMABASE_PSC
 0x0000000AU

	)

456 
	#TIM_DMABASE_ARR
 0x0000000BU

	)

457 
	#TIM_DMABASE_RCR
 0x0000000CU

	)

458 
	#TIM_DMABASE_CCR1
 0x0000000DU

	)

459 
	#TIM_DMABASE_CCR2
 0x0000000EU

	)

460 
	#TIM_DMABASE_CCR3
 0x0000000FU

	)

461 
	#TIM_DMABASE_CCR4
 0x00000010U

	)

462 
	#TIM_DMABASE_BDTR
 0x00000011U

	)

463 
	#TIM_DMABASE_DCR
 0x00000012U

	)

464 
	#TIM_DMABASE_DMAR
 0x00000013U

	)

472 
	#TIM_EVENTSOURCE_UPDATE
 
TIM_EGR_UG


	)

473 
	#TIM_EVENTSOURCE_CC1
 
TIM_EGR_CC1G


	)

474 
	#TIM_EVENTSOURCE_CC2
 
TIM_EGR_CC2G


	)

475 
	#TIM_EVENTSOURCE_CC3
 
TIM_EGR_CC3G


	)

476 
	#TIM_EVENTSOURCE_CC4
 
TIM_EGR_CC4G


	)

477 
	#TIM_EVENTSOURCE_COM
 
TIM_EGR_COMG


	)

478 
	#TIM_EVENTSOURCE_TRIGGER
 
TIM_EGR_TG


	)

479 
	#TIM_EVENTSOURCE_BREAK
 
TIM_EGR_BG


	)

487 
	#TIM_INPUTCHANNELPOLARITY_RISING
 0x00000000U

	)

488 
	#TIM_INPUTCHANNELPOLARITY_FALLING
 
TIM_CCER_CC1P


	)

489 
	#TIM_INPUTCHANNELPOLARITY_BOTHEDGE
 (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
√ã

	)

497 
	#TIM_ETRPOLARITY_INVERTED
 
TIM_SMCR_ETP


	)

498 
	#TIM_ETRPOLARITY_NONINVERTED
 0x00000000U

	)

506 
	#TIM_ETRPRESCALER_DIV1
 0x00000000U

	)

507 
	#TIM_ETRPRESCALER_DIV2
 
TIM_SMCR_ETPS_0


	)

508 
	#TIM_ETRPRESCALER_DIV4
 
TIM_SMCR_ETPS_1


	)

509 
	#TIM_ETRPRESCALER_DIV8
 
TIM_SMCR_ETPS


	)

517 
	#TIM_COUNTERMODE_UP
 0x00000000U

	)

518 
	#TIM_COUNTERMODE_DOWN
 
TIM_CR1_DIR


	)

519 
	#TIM_COUNTERMODE_CENTERALIGNED1
 
TIM_CR1_CMS_0


	)

520 
	#TIM_COUNTERMODE_CENTERALIGNED2
 
TIM_CR1_CMS_1


	)

521 
	#TIM_COUNTERMODE_CENTERALIGNED3
 
TIM_CR1_CMS


	)

529 
	#TIM_CLOCKDIVISION_DIV1
 0x00000000U

	)

530 
	#TIM_CLOCKDIVISION_DIV2
 
TIM_CR1_CKD_0


	)

531 
	#TIM_CLOCKDIVISION_DIV4
 
TIM_CR1_CKD_1


	)

539 
	#TIM_OUTPUTSTATE_DISABLE
 0x00000000U

	)

540 
	#TIM_OUTPUTSTATE_ENABLE
 
TIM_CCER_CC1E


	)

548 
	#TIM_AUTORELOAD_PRELOAD_DISABLE
 0x00000000U

	)

549 
	#TIM_AUTORELOAD_PRELOAD_ENABLE
 
TIM_CR1_ARPE


	)

558 
	#TIM_OCFAST_DISABLE
 0x00000000U

	)

559 
	#TIM_OCFAST_ENABLE
 
TIM_CCMR1_OC1FE


	)

567 
	#TIM_OUTPUTNSTATE_DISABLE
 0x00000000U

	)

568 
	#TIM_OUTPUTNSTATE_ENABLE
 
TIM_CCER_CC1NE


	)

576 
	#TIM_OCPOLARITY_HIGH
 0x00000000U

	)

577 
	#TIM_OCPOLARITY_LOW
 
TIM_CCER_CC1P


	)

585 
	#TIM_OCNPOLARITY_HIGH
 0x00000000U

	)

586 
	#TIM_OCNPOLARITY_LOW
 
TIM_CCER_CC1NP


	)

594 
	#TIM_OCIDLESTATE_SET
 
TIM_CR2_OIS1


	)

595 
	#TIM_OCIDLESTATE_RESET
 0x00000000U

	)

603 
	#TIM_OCNIDLESTATE_SET
 
TIM_CR2_OIS1N


	)

604 
	#TIM_OCNIDLESTATE_RESET
 0x00000000U

	)

612 
	#TIM_ICPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

613 
	#TIM_ICPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

614 
	#TIM_ICPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

622 
	#TIM_ENCODERINPUTPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

623 
	#TIM_ENCODERINPUTPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

631 
	#TIM_ICSELECTION_DIRECTTI
 
TIM_CCMR1_CC1S_0


	)

633 
	#TIM_ICSELECTION_INDIRECTTI
 
TIM_CCMR1_CC1S_1


	)

635 
	#TIM_ICSELECTION_TRC
 
TIM_CCMR1_CC1S


	)

643 
	#TIM_ICPSC_DIV1
 0x00000000U

	)

644 
	#TIM_ICPSC_DIV2
 
TIM_CCMR1_IC1PSC_0


	)

645 
	#TIM_ICPSC_DIV4
 
TIM_CCMR1_IC1PSC_1


	)

646 
	#TIM_ICPSC_DIV8
 
TIM_CCMR1_IC1PSC


	)

654 
	#TIM_OPMODE_SINGLE
 
TIM_CR1_OPM


	)

655 
	#TIM_OPMODE_REPETITIVE
 0x00000000U

	)

663 
	#TIM_ENCODERMODE_TI1
 
TIM_SMCR_SMS_0


	)

664 
	#TIM_ENCODERMODE_TI2
 
TIM_SMCR_SMS_1


	)

665 
	#TIM_ENCODERMODE_TI12
 (
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
√ã

	)

673 
	#TIM_IT_UPDATE
 
TIM_DIER_UIE


	)

674 
	#TIM_IT_CC1
 
TIM_DIER_CC1IE


	)

675 
	#TIM_IT_CC2
 
TIM_DIER_CC2IE


	)

676 
	#TIM_IT_CC3
 
TIM_DIER_CC3IE


	)

677 
	#TIM_IT_CC4
 
TIM_DIER_CC4IE


	)

678 
	#TIM_IT_COM
 
TIM_DIER_COMIE


	)

679 
	#TIM_IT_TRIGGER
 
TIM_DIER_TIE


	)

680 
	#TIM_IT_BREAK
 
TIM_DIER_BIE


	)

688 
	#TIM_COMMUTATION_TRGI
 
TIM_CR2_CCUS


	)

689 
	#TIM_COMMUTATION_SOFTWARE
 0x00000000U

	)

697 
	#TIM_DMA_UPDATE
 
TIM_DIER_UDE


	)

698 
	#TIM_DMA_CC1
 
TIM_DIER_CC1DE


	)

699 
	#TIM_DMA_CC2
 
TIM_DIER_CC2DE


	)

700 
	#TIM_DMA_CC3
 
TIM_DIER_CC3DE


	)

701 
	#TIM_DMA_CC4
 
TIM_DIER_CC4DE


	)

702 
	#TIM_DMA_COM
 
TIM_DIER_COMDE


	)

703 
	#TIM_DMA_TRIGGER
 
TIM_DIER_TDE


	)

711 
	#TIM_FLAG_UPDATE
 
TIM_SR_UIF


	)

712 
	#TIM_FLAG_CC1
 
TIM_SR_CC1IF


	)

713 
	#TIM_FLAG_CC2
 
TIM_SR_CC2IF


	)

714 
	#TIM_FLAG_CC3
 
TIM_SR_CC3IF


	)

715 
	#TIM_FLAG_CC4
 
TIM_SR_CC4IF


	)

716 
	#TIM_FLAG_COM
 
TIM_SR_COMIF


	)

717 
	#TIM_FLAG_TRIGGER
 
TIM_SR_TIF


	)

718 
	#TIM_FLAG_BREAK
 
TIM_SR_BIF


	)

719 
	#TIM_FLAG_CC1OF
 
TIM_SR_CC1OF


	)

720 
	#TIM_FLAG_CC2OF
 
TIM_SR_CC2OF


	)

721 
	#TIM_FLAG_CC3OF
 
TIM_SR_CC3OF


	)

722 
	#TIM_FLAG_CC4OF
 
TIM_SR_CC4OF


	)

730 
	#TIM_CHANNEL_1
 0x00000000U

	)

731 
	#TIM_CHANNEL_2
 0x00000004U

	)

732 
	#TIM_CHANNEL_3
 0x00000008U

	)

733 
	#TIM_CHANNEL_4
 0x0000000CU

	)

734 
	#TIM_CHANNEL_ALL
 0x0000003CU

	)

742 
	#TIM_CLOCKSOURCE_ETRMODE2
 
TIM_SMCR_ETPS_1


	)

743 
	#TIM_CLOCKSOURCE_INTERNAL
 
TIM_SMCR_ETPS_0


	)

744 
	#TIM_CLOCKSOURCE_ITR0
 
TIM_TS_ITR0


	)

745 
	#TIM_CLOCKSOURCE_ITR1
 
TIM_TS_ITR1


	)

746 
	#TIM_CLOCKSOURCE_ITR2
 
TIM_TS_ITR2


	)

747 
	#TIM_CLOCKSOURCE_ITR3
 
TIM_TS_ITR3


	)

748 
	#TIM_CLOCKSOURCE_TI1ED
 
TIM_TS_TI1F_ED


	)

749 
	#TIM_CLOCKSOURCE_TI1
 
TIM_TS_TI1FP1


	)

750 
	#TIM_CLOCKSOURCE_TI2
 
TIM_TS_TI2FP2


	)

751 
	#TIM_CLOCKSOURCE_ETRMODE1
 
TIM_TS_ETRF


	)

759 
	#TIM_CLOCKPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

760 
	#TIM_CLOCKPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

761 
	#TIM_CLOCKPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

762 
	#TIM_CLOCKPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

763 
	#TIM_CLOCKPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

771 
	#TIM_CLOCKPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

772 
	#TIM_CLOCKPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

773 
	#TIM_CLOCKPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

774 
	#TIM_CLOCKPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

782 
	#TIM_CLEARINPUTPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

783 
	#TIM_CLEARINPUTPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

791 
	#TIM_CLEARINPUTPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

792 
	#TIM_CLEARINPUTPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

793 
	#TIM_CLEARINPUTPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

794 
	#TIM_CLEARINPUTPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

802 
	#TIM_OSSR_ENABLE
 
TIM_BDTR_OSSR


	)

803 
	#TIM_OSSR_DISABLE
 0x00000000U

	)

811 
	#TIM_OSSI_ENABLE
 
TIM_BDTR_OSSI


	)

812 
	#TIM_OSSI_DISABLE
 0x00000000U

	)

819 
	#TIM_LOCKLEVEL_OFF
 0x00000000U

	)

820 
	#TIM_LOCKLEVEL_1
 
TIM_BDTR_LOCK_0


	)

821 
	#TIM_LOCKLEVEL_2
 
TIM_BDTR_LOCK_1


	)

822 
	#TIM_LOCKLEVEL_3
 
TIM_BDTR_LOCK


	)

830 
	#TIM_BREAK_ENABLE
 
TIM_BDTR_BKE


	)

831 
	#TIM_BREAK_DISABLE
 0x00000000U

	)

839 
	#TIM_BREAKPOLARITY_LOW
 0x00000000U

	)

840 
	#TIM_BREAKPOLARITY_HIGH
 
TIM_BDTR_BKP


	)

848 
	#TIM_AUTOMATICOUTPUT_DISABLE
 0x00000000U

	)

849 
	#TIM_AUTOMATICOUTPUT_ENABLE
 
TIM_BDTR_AOE


	)

858 
	#TIM_TRGO_RESET
 0x00000000U

	)

859 
	#TIM_TRGO_ENABLE
 
TIM_CR2_MMS_0


	)

860 
	#TIM_TRGO_UPDATE
 
TIM_CR2_MMS_1


	)

861 
	#TIM_TRGO_OC1
 (
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
√ã

	)

862 
	#TIM_TRGO_OC1REF
 
TIM_CR2_MMS_2


	)

863 
	#TIM_TRGO_OC2REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_0
√ã

	)

864 
	#TIM_TRGO_OC3REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
√ã

	)

865 
	#TIM_TRGO_OC4REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
√ã

	)

873 
	#TIM_MASTERSLAVEMODE_ENABLE
 
TIM_SMCR_MSM


	)

874 
	#TIM_MASTERSLAVEMODE_DISABLE
 0x00000000U

	)

882 
	#TIM_SLAVEMODE_DISABLE
 0x00000000U

	)

883 
	#TIM_SLAVEMODE_RESET
 
TIM_SMCR_SMS_2


	)

884 
	#TIM_SLAVEMODE_GATED
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_0
√ã

	)

885 
	#TIM_SLAVEMODE_TRIGGER
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_1
√ã

	)

886 
	#TIM_SLAVEMODE_EXTERNAL1
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
√ã

	)

894 
	#TIM_OCMODE_TIMING
 0x00000000U

	)

895 
	#TIM_OCMODE_ACTIVE
 
TIM_CCMR1_OC1M_0


	)

896 
	#TIM_OCMODE_INACTIVE
 
TIM_CCMR1_OC1M_1


	)

897 
	#TIM_OCMODE_TOGGLE
 (
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_0
√ã

	)

898 
	#TIM_OCMODE_PWM1
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_1
√ã

	)

899 
	#TIM_OCMODE_PWM2
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_0
√ã

	)

900 
	#TIM_OCMODE_FORCED_ACTIVE
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_0
√ã

	)

901 
	#TIM_OCMODE_FORCED_INACTIVE
 
TIM_CCMR1_OC1M_2


	)

909 
	#TIM_TS_ITR0
 0x00000000U

	)

910 
	#TIM_TS_ITR1
 
TIM_SMCR_TS_0


	)

911 
	#TIM_TS_ITR2
 
TIM_SMCR_TS_1


	)

912 
	#TIM_TS_ITR3
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
√ã

	)

913 
	#TIM_TS_TI1F_ED
 
TIM_SMCR_TS_2


	)

914 
	#TIM_TS_TI1FP1
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_2
√ã

	)

915 
	#TIM_TS_TI2FP2
 (
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_2
√ã

	)

916 
	#TIM_TS_ETRF
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_2
√ã

	)

917 
	#TIM_TS_NONE
 0x0000FFFFU

	)

925 
	#TIM_TRIGGERPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

926 
	#TIM_TRIGGERPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

927 
	#TIM_TRIGGERPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

928 
	#TIM_TRIGGERPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

929 
	#TIM_TRIGGERPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

937 
	#TIM_TRIGGERPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

938 
	#TIM_TRIGGERPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

939 
	#TIM_TRIGGERPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

940 
	#TIM_TRIGGERPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

948 
	#TIM_TI1SELECTION_CH1
 0x00000000U

	)

949 
	#TIM_TI1SELECTION_XORCOMBINATION
 
TIM_CR2_TI1S


	)

957 
	#TIM_DMABURSTLENGTH_1TRANSFER
 0x00000000U

	)

958 
	#TIM_DMABURSTLENGTH_2TRANSFERS
 0x00000100U

	)

959 
	#TIM_DMABURSTLENGTH_3TRANSFERS
 0x00000200U

	)

960 
	#TIM_DMABURSTLENGTH_4TRANSFERS
 0x00000300U

	)

961 
	#TIM_DMABURSTLENGTH_5TRANSFERS
 0x00000400U

	)

962 
	#TIM_DMABURSTLENGTH_6TRANSFERS
 0x00000500U

	)

963 
	#TIM_DMABURSTLENGTH_7TRANSFERS
 0x00000600U

	)

964 
	#TIM_DMABURSTLENGTH_8TRANSFERS
 0x00000700U

	)

965 
	#TIM_DMABURSTLENGTH_9TRANSFERS
 0x00000800U

	)

966 
	#TIM_DMABURSTLENGTH_10TRANSFERS
 0x00000900U

	)

967 
	#TIM_DMABURSTLENGTH_11TRANSFERS
 0x00000A00U

	)

968 
	#TIM_DMABURSTLENGTH_12TRANSFERS
 0x00000B00U

	)

969 
	#TIM_DMABURSTLENGTH_13TRANSFERS
 0x00000C00U

	)

970 
	#TIM_DMABURSTLENGTH_14TRANSFERS
 0x00000D00U

	)

971 
	#TIM_DMABURSTLENGTH_15TRANSFERS
 0x00000E00U

	)

972 
	#TIM_DMABURSTLENGTH_16TRANSFERS
 0x00000F00U

	)

973 
	#TIM_DMABURSTLENGTH_17TRANSFERS
 0x00001000U

	)

974 
	#TIM_DMABURSTLENGTH_18TRANSFERS
 0x00001100U

	)

982 
	#TIM_DMA_ID_UPDATE
 ((
u√∂t16_t
√ã0x0000√ã

	)

983 
	#TIM_DMA_ID_CC1
 ((
u√∂t16_t
√ã0x0001√ã

	)

984 
	#TIM_DMA_ID_CC2
 ((
u√∂t16_t
√ã0x0002√ã

	)

985 
	#TIM_DMA_ID_CC3
 ((
u√∂t16_t
√ã0x0003√ã

	)

986 
	#TIM_DMA_ID_CC4
 ((
u√∂t16_t
√ã0x0004√ã

	)

987 
	#TIM_DMA_ID_COMMUTATION
 ((
u√∂t16_t
√ã0x0005√ã

	)

988 
	#TIM_DMA_ID_TRIGGER
 ((
u√∂t16_t
√ã0x0006√ã

	)

996 
	#TIM_CCx_ENABLE
 0x00000001U

	)

997 
	#TIM_CCx_DISABLE
 0x00000000U

	)

998 
	#TIM_CCxN_ENABLE
 0x00000004U

	)

999 
	#TIM_CCxN_DISABLE
 0x00000000U

	)

1018 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1019 
	#__HAL_TIM_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

1020 (
__HANDLE__
)->
S√®√£
 = 
HAL_TIM_STATE_RESET
; \

1021 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1022 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1023 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1024 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1025 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1026 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1027 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1028 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1029 (
__HANDLE__
)->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
; \

1030 (
__HANDLE__
)->
Ba¬£_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1031 (
__HANDLE__
)->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1032 (
__HANDLE__
)->
IC_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1033 (
__HANDLE__
)->
IC_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1034 (
__HANDLE__
)->
OC_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1035 (
__HANDLE__
)->
OC_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1036 (
__HANDLE__
)->
PWM_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1037 (
__HANDLE__
)->
PWM_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1038 (
__HANDLE__
)->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1039 (
__HANDLE__
)->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1040 (
__HANDLE__
)->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1041 (
__HANDLE__
)->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1042 (
__HANDLE__
)->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

1043 (
__HANDLE__
)->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

1044 } 0)

	)

1046 
	#__HAL_TIM_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

1047 (
__HANDLE__
)->
S√®√£
 = 
HAL_TIM_STATE_RESET
; \

1048 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1049 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1050 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1051 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1052 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1053 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1054 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1055 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1056 (
__HANDLE__
)->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
; \

1057 } 0)

	)

1065 
	#__HAL_TIM_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
|=(
TIM_CR1_CEN
))

	)

1072 
	#__HAL_TIM_MOE_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
BDTR
|=(
TIM_BDTR_MOE
))

	)

1079 
	#__HAL_TIM_DISABLE
(
__HANDLE__
) \

1081 i‚Ä°(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0UL) \

1083 if(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 & 
TIM_CCER_CCxNE_MASK
) == 0UL) \

1085 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~(
TIM_CR1_CEN
); \

1088 } 0)

	)

1096 
	#__HAL_TIM_MOE_DISABLE
(
__HANDLE__
) \

1098 i‚Ä°(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0UL) \

1100 if(((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 & 
TIM_CCER_CCxNE_MASK
) == 0UL) \

1102 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
BDTR
 &Ô£ø~(
TIM_BDTR_MOE
); \

1105 } 0)

	)

1113 
	#__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY
(
__HANDLE__
√ã(__HANDLE__)->
In¬∞‚Ñ¢Àö
->
BDTR
 &Ô£ø~(
TIM_BDTR_MOE
)

	)

1129 
	#__HAL_TIM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DIER
 |Ô£ø(__INTERRUPT__))

	)

1145 
	#__HAL_TIM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DIER
 &Ô£ø~(__INTERRUPT__))

	)

1160 
	#__HAL_TIM_ENABLE_DMA
(
__HANDLE__
, 
__DMA__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DIER
 |Ô£ø(__DMA__))

	)

1175 
	#__HAL_TIM_DISABLE_DMA
(
__HANDLE__
, 
__DMA__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DIER
 &Ô£ø~(__DMA__))

	)

1195 
	#__HAL_TIM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 &(__FLAG__)√ã=Ô£ø(__FLAG__))

	)

1215 
	#__HAL_TIM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__FLAG__))

	)

1232 
	#__HAL_TIM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DIER
 & (__INTERRUPT__)) \

1233 =Ô£ø(
__INTERRUPT__
)√ã? 
SET
 : 
RESET
)

	)

1249 
	#__HAL_TIM_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__INTERRUPT__))

	)

1258 
	#__HAL_TIM_IS_TIM_COUNTING_DOWN
(
__HANDLE__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &(
TIM_CR1_DIR
)√ã=Ô£ø(TIM_CR1_DIR))

	)

1266 
	#__HAL_TIM_SET_PRESCALER
(
__HANDLE__
, 
__PRESC__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
PSC
 = (__PRESC__))

	)

1274 
	#__HAL_TIM_SET_COUNTER
(
__HANDLE__
, 
__COUNTER__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CNT
 = (__COUNTER__))

	)

1281 
	#__HAL_TIM_GET_COUNTER
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CNT
)

	)

1289 
	#__HAL_TIM_SET_AUTORELOAD
(
__HANDLE__
, 
__AUTORELOAD__
) \

1291 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
ARR
 = (
__AUTORELOAD__
); \

1292 (
__HANDLE__
)->
In√¥
.
P√Æiod
 = (
__AUTORELOAD__
); \

1293 } 0)

	)

1300 
	#__HAL_TIM_GET_AUTORELOAD
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
ARR
)

	)

1312 
	#__HAL_TIM_SET_CLOCKDIVISION
(
__HANDLE__
, 
__CKD__
) \

1314 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø(~
TIM_CR1_CKD
); \

1315 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø(
__CKD__
); \

1316 (
__HANDLE__
)->
In√¥
.
ClockDivisi‚ÅÑ
 = (
__CKD__
); \

1317 } 0)

	)

1327 
	#__HAL_TIM_GET_CLOCKDIVISION
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 & 
TIM_CR1_CKD
)

	)

1346 
	#__HAL_TIM_SET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
) \

1348 
	`TIM_RESET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
)); \

1349 
	`TIM_SET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
), (
__ICPSC__
)); \

1350 } 0)

	)

1367 
	#__HAL_TIM_GET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
) \

1368 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 & 
TIM_CCMR1_IC1PSC
) :\

1369 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 & 
TIM_CCMR1_IC2PSC
) >> 8U) :\

1370 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 & 
TIM_CCMR2_IC3PSC
) :\

1371 (((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 & 
TIM_CCMR2_IC4PSC
)√ã>> 8U)

	)

1385 
	#__HAL_TIM_SET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
, 
__COMPARE__
) \

1386 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR1
 = (
__COMPARE__
)) :\

1387 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR2
 = (
__COMPARE__
)) :\

1388 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR3
 = (
__COMPARE__
)) :\

1389 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR4
 = (
__COMPARE__
)))

	)

1402 
	#__HAL_TIM_GET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
) \

1403 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR1
) :\

1404 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR2
) :\

1405 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR3
) :\

1406 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCR4
))

	)

1419 
	#__HAL_TIM_ENABLE_OCxPRELOAD
(
__HANDLE__
, 
__CHANNEL__
) \

1420 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
TIM_CCMR1_OC1PE
) :\

1421 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
TIM_CCMR1_OC2PE
) :\

1422 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
TIM_CCMR2_OC3PE
) :\

1423 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
TIM_CCMR2_OC4PE
))

	)

1436 
	#__HAL_TIM_DISABLE_OCxPRELOAD
(
__HANDLE__
, 
__CHANNEL__
) \

1437 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_OC1PE
) :\

1438 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_OC2PE
) :\

1439 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_OC3PE
) :\

1440 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_OC4PE
))

	)

1457 
	#__HAL_TIM_ENABLE_OCxFAST
(
__HANDLE__
, 
__CHANNEL__
) \

1458 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
TIM_CCMR1_OC1FE
) :\

1459 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
TIM_CCMR1_OC2FE
) :\

1460 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
TIM_CCMR2_OC3FE
) :\

1461 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
TIM_CCMR2_OC4FE
))

	)

1478 
	#__HAL_TIM_DISABLE_OCxFAST
(
__HANDLE__
, 
__CHANNEL__
) \

1479 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_OC1FE
) :\

1480 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_OC2FE
) :\

1481 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_OC3FE
) :\

1482 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_OC4FE
))

	)

1492 
	#__HAL_TIM_URS_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
|Ô£ø
TIM_CR1_URS
)

	)

1505 
	#__HAL_TIM_URS_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
&=~
TIM_CR1_URS
)

	)

1522 
	#__HAL_TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
) \

1524 
	`TIM_RESET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
)); \

1525 
	`TIM_SET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
), (
__POLARITY__
)); \

1526 }0)

	)

1539 
	#TIM_CCER_CCxE_MASK
 ((
u√∂t32_t
)(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
 | 
TIM_CCER_CC3E
 | 
TIM_CCER_CC4E
))

	)

1540 
	#TIM_CCER_CCxNE_MASK
 ((
u√∂t32_t
)(
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
))

	)

1550 
	#IS_TIM_CLEARINPUT_SOURCE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_CLEARINPUTSOURCE_NONE
) || \

1551 ((
__MODE__
√ã=Ô£ø
TIM_CLEARINPUTSOURCE_ETR
))

	)

1553 
	#IS_TIM_DMA_BASE
(
__BASE__
√ã(((__BASE__√ã=Ô£ø
TIM_DMABASE_CR1
) || \

1554 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CR2
) || \

1555 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_SMCR
) || \

1556 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_DIER
) || \

1557 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_SR
) || \

1558 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_EGR
) || \

1559 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCMR1
) || \

1560 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCMR2
) || \

1561 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCER
) || \

1562 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CNT
) || \

1563 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_PSC
) || \

1564 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_ARR
) || \

1565 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_RCR
) || \

1566 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCR1
) || \

1567 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCR2
) || \

1568 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCR3
) || \

1569 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_CCR4
) || \

1570 ((
__BASE__
√ã=Ô£ø
TIM_DMABASE_BDTR
))

	)

1572 
	#IS_TIM_EVENT_SOURCE
(
__SOURCE__
√ã((((__SOURCE__√ã& 0xFFFFFF00U√ã=Ô£ø0x00000000U√ã&& ((__SOURCE__√ã!Ô£ø0x00000000U))

	)

1574 
	#IS_TIM_COUNTER_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_COUNTERMODE_UP
) || \

1575 ((
__MODE__
√ã=Ô£ø
TIM_COUNTERMODE_DOWN
) || \

1576 ((
__MODE__
√ã=Ô£ø
TIM_COUNTERMODE_CENTERALIGNED1
) || \

1577 ((
__MODE__
√ã=Ô£ø
TIM_COUNTERMODE_CENTERALIGNED2
) || \

1578 ((
__MODE__
√ã=Ô£ø
TIM_COUNTERMODE_CENTERALIGNED3
))

	)

1580 
	#IS_TIM_CLOCKDIVISION_DIV
(
__DIV__
√ã(((__DIV__√ã=Ô£ø
TIM_CLOCKDIVISION_DIV1
) || \

1581 ((
__DIV__
√ã=Ô£ø
TIM_CLOCKDIVISION_DIV2
) || \

1582 ((
__DIV__
√ã=Ô£ø
TIM_CLOCKDIVISION_DIV4
))

	)

1584 
	#IS_TIM_AUTORELOAD_PRELOAD
(
PRELOAD
√ã(((PRELOAD√ã=Ô£ø
TIM_AUTORELOAD_PRELOAD_DISABLE
) || \

1585 ((
PRELOAD
√ã=Ô£ø
TIM_AUTORELOAD_PRELOAD_ENABLE
))

	)

1587 
	#IS_TIM_FAST_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_OCFAST_DISABLE
) || \

1588 ((
__STATE__
√ã=Ô£ø
TIM_OCFAST_ENABLE
))

	)

1590 
	#IS_TIM_OC_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_OCPOLARITY_HIGH
) || \

1591 ((
__POLARITY__
√ã=Ô£ø
TIM_OCPOLARITY_LOW
))

	)

1593 
	#IS_TIM_OCN_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_OCNPOLARITY_HIGH
) || \

1594 ((
__POLARITY__
√ã=Ô£ø
TIM_OCNPOLARITY_LOW
))

	)

1596 
	#IS_TIM_OCIDLE_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_OCIDLESTATE_SET
) || \

1597 ((
__STATE__
√ã=Ô£ø
TIM_OCIDLESTATE_RESET
))

	)

1599 
	#IS_TIM_OCNIDLE_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_OCNIDLESTATE_SET
) || \

1600 ((
__STATE__
√ã=Ô£ø
TIM_OCNIDLESTATE_RESET
))

	)

1602 
	#IS_TIM_ENCODERINPUT_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_ENCODERINPUTPOLARITY_RISING
) || \

1603 ((
__POLARITY__
√ã=Ô£ø
TIM_ENCODERINPUTPOLARITY_FALLING
))

	)

1605 
	#IS_TIM_IC_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_ICPOLARITY_RISING
) || \

1606 ((
__POLARITY__
√ã=Ô£ø
TIM_ICPOLARITY_FALLING
) || \

1607 ((
__POLARITY__
√ã=Ô£ø
TIM_ICPOLARITY_BOTHEDGE
))

	)

1609 
	#IS_TIM_IC_SELECTION
(
__SELECTION__
√ã(((__SELECTION__√ã=Ô£ø
TIM_ICSELECTION_DIRECTTI
) || \

1610 ((
__SELECTION__
√ã=Ô£ø
TIM_ICSELECTION_INDIRECTTI
) || \

1611 ((
__SELECTION__
√ã=Ô£ø
TIM_ICSELECTION_TRC
))

	)

1613 
	#IS_TIM_IC_PRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
TIM_ICPSC_DIV1
) || \

1614 ((
__PRESCALER__
√ã=Ô£ø
TIM_ICPSC_DIV2
) || \

1615 ((
__PRESCALER__
√ã=Ô£ø
TIM_ICPSC_DIV4
) || \

1616 ((
__PRESCALER__
√ã=Ô£ø
TIM_ICPSC_DIV8
))

	)

1618 
	#IS_TIM_OPM_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_OPMODE_SINGLE
) || \

1619 ((
__MODE__
√ã=Ô£ø
TIM_OPMODE_REPETITIVE
))

	)

1621 
	#IS_TIM_ENCODER_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_ENCODERMODE_TI1
) || \

1622 ((
__MODE__
√ã=Ô£ø
TIM_ENCODERMODE_TI2
) || \

1623 ((
__MODE__
√ã=Ô£ø
TIM_ENCODERMODE_TI12
))

	)

1625 
	#IS_TIM_DMA_SOURCE
(
__SOURCE__
√ã((((__SOURCE__√ã& 0xFFFF80FFU√ã=Ô£ø0x00000000U√ã&& ((__SOURCE__√ã!Ô£ø0x00000000U))

	)

1627 
	#IS_TIM_CHANNELS
(
__CHANNEL__
√ã(((__CHANNEL__√ã=Ô£ø
TIM_CHANNEL_1
) || \

1628 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
) || \

1629 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
) || \

1630 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_4
) || \

1631 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_ALL
))

	)

1633 
	#IS_TIM_OPM_CHANNELS
(
__CHANNEL__
√ã(((__CHANNEL__√ã=Ô£ø
TIM_CHANNEL_1
) || \

1634 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
))

	)

1636 
	#IS_TIM_COMPLEMENTARY_CHANNELS
(
__CHANNEL__
√ã(((__CHANNEL__√ã=Ô£ø
TIM_CHANNEL_1
) || \

1637 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
) || \

1638 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
))

	)

1640 
	#IS_TIM_CLOCKSOURCE
(
__CLOCK__
√ã(((__CLOCK__√ã=Ô£ø
TIM_CLOCKSOURCE_INTERNAL
) || \

1641 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_ETRMODE2
) || \

1642 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_ITR0
) || \

1643 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_ITR1
) || \

1644 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_ITR2
) || \

1645 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_ITR3
) || \

1646 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_TI1ED
) || \

1647 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_TI1
) || \

1648 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_TI2
) || \

1649 ((
__CLOCK__
√ã=Ô£ø
TIM_CLOCKSOURCE_ETRMODE1
))

	)

1651 
	#IS_TIM_CLOCKPOLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_CLOCKPOLARITY_INVERTED
) || \

1652 ((
__POLARITY__
√ã=Ô£ø
TIM_CLOCKPOLARITY_NONINVERTED
) || \

1653 ((
__POLARITY__
√ã=Ô£ø
TIM_CLOCKPOLARITY_RISING
) || \

1654 ((
__POLARITY__
√ã=Ô£ø
TIM_CLOCKPOLARITY_FALLING
) || \

1655 ((
__POLARITY__
√ã=Ô£ø
TIM_CLOCKPOLARITY_BOTHEDGE
))

	)

1657 
	#IS_TIM_CLOCKPRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
TIM_CLOCKPRESCALER_DIV1
) || \

1658 ((
__PRESCALER__
√ã=Ô£ø
TIM_CLOCKPRESCALER_DIV2
) || \

1659 ((
__PRESCALER__
√ã=Ô£ø
TIM_CLOCKPRESCALER_DIV4
) || \

1660 ((
__PRESCALER__
√ã=Ô£ø
TIM_CLOCKPRESCALER_DIV8
))

	)

1662 
	#IS_TIM_CLOCKFILTER
(
__ICFILTER__
√ã((__ICFILTER__√ã<Ô£ø0xFU)

	)

1664 
	#IS_TIM_CLEARINPUT_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_CLEARINPUTPOLARITY_INVERTED
) || \

1665 ((
__POLARITY__
√ã=Ô£ø
TIM_CLEARINPUTPOLARITY_NONINVERTED
))

	)

1667 
	#IS_TIM_CLEARINPUT_PRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
TIM_CLEARINPUTPRESCALER_DIV1
) || \

1668 ((
__PRESCALER__
√ã=Ô£ø
TIM_CLEARINPUTPRESCALER_DIV2
) || \

1669 ((
__PRESCALER__
√ã=Ô£ø
TIM_CLEARINPUTPRESCALER_DIV4
) || \

1670 ((
__PRESCALER__
√ã=Ô£ø
TIM_CLEARINPUTPRESCALER_DIV8
))

	)

1672 
	#IS_TIM_CLEARINPUT_FILTER
(
__ICFILTER__
√ã((__ICFILTER__√ã<Ô£ø0xFU)

	)

1674 
	#IS_TIM_OSSR_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_OSSR_ENABLE
) || \

1675 ((
__STATE__
√ã=Ô£ø
TIM_OSSR_DISABLE
))

	)

1677 
	#IS_TIM_OSSI_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_OSSI_ENABLE
) || \

1678 ((
__STATE__
√ã=Ô£ø
TIM_OSSI_DISABLE
))

	)

1680 
	#IS_TIM_LOCK_LEVEL
(
__LEVEL__
√ã(((__LEVEL__√ã=Ô£ø
TIM_LOCKLEVEL_OFF
) || \

1681 ((
__LEVEL__
√ã=Ô£ø
TIM_LOCKLEVEL_1
) || \

1682 ((
__LEVEL__
√ã=Ô£ø
TIM_LOCKLEVEL_2
) || \

1683 ((
__LEVEL__
√ã=Ô£ø
TIM_LOCKLEVEL_3
))

	)

1685 
	#IS_TIM_BREAK_FILTER
(
__BRKFILTER__
√ã((__BRKFILTER__√ã<Ô£ø0xFUL)

	)

1688 
	#IS_TIM_BREAK_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_BREAK_ENABLE
) || \

1689 ((
__STATE__
√ã=Ô£ø
TIM_BREAK_DISABLE
))

	)

1691 
	#IS_TIM_BREAK_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_BREAKPOLARITY_LOW
) || \

1692 ((
__POLARITY__
√ã=Ô£ø
TIM_BREAKPOLARITY_HIGH
))

	)

1694 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_AUTOMATICOUTPUT_ENABLE
) || \

1695 ((
__STATE__
√ã=Ô£ø
TIM_AUTOMATICOUTPUT_DISABLE
))

	)

1697 
	#IS_TIM_TRGO_SOURCE
(
__SOURCE__
√ã(((__SOURCE__√ã=Ô£ø
TIM_TRGO_RESET
) || \

1698 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_ENABLE
) || \

1699 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_UPDATE
) || \

1700 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_OC1
) || \

1701 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_OC1REF
) || \

1702 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_OC2REF
) || \

1703 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_OC3REF
) || \

1704 ((
__SOURCE__
√ã=Ô£ø
TIM_TRGO_OC4REF
))

	)

1706 
	#IS_TIM_MSM_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
TIM_MASTERSLAVEMODE_ENABLE
) || \

1707 ((
__STATE__
√ã=Ô£ø
TIM_MASTERSLAVEMODE_DISABLE
))

	)

1709 
	#IS_TIM_SLAVE_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_SLAVEMODE_DISABLE
) || \

1710 ((
__MODE__
√ã=Ô£ø
TIM_SLAVEMODE_RESET
) || \

1711 ((
__MODE__
√ã=Ô£ø
TIM_SLAVEMODE_GATED
) || \

1712 ((
__MODE__
√ã=Ô£ø
TIM_SLAVEMODE_TRIGGER
) || \

1713 ((
__MODE__
√ã=Ô£ø
TIM_SLAVEMODE_EXTERNAL1
))

	)

1715 
	#IS_TIM_PWM_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_OCMODE_PWM1
) || \

1716 ((
__MODE__
√ã=Ô£ø
TIM_OCMODE_PWM2
))

	)

1718 
	#IS_TIM_OC_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
TIM_OCMODE_TIMING
) || \

1719 ((
__MODE__
√ã=Ô£ø
TIM_OCMODE_ACTIVE
) || \

1720 ((
__MODE__
√ã=Ô£ø
TIM_OCMODE_INACTIVE
) || \

1721 ((
__MODE__
√ã=Ô£ø
TIM_OCMODE_TOGGLE
) || \

1722 ((
__MODE__
√ã=Ô£ø
TIM_OCMODE_FORCED_ACTIVE
) || \

1723 ((
__MODE__
√ã=Ô£ø
TIM_OCMODE_FORCED_INACTIVE
))

	)

1725 
	#IS_TIM_TRIGGER_SELECTION
(
__SELECTION__
√ã(((__SELECTION__√ã=Ô£ø
TIM_TS_ITR0
) || \

1726 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ITR1
) || \

1727 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ITR2
) || \

1728 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ITR3
) || \

1729 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_TI1F_ED
) || \

1730 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_TI1FP1
) || \

1731 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_TI2FP2
) || \

1732 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ETRF
))

	)

1734 
	#IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
__SELECTION__
√ã(((__SELECTION__√ã=Ô£ø
TIM_TS_ITR0
) || \

1735 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ITR1
) || \

1736 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ITR2
) || \

1737 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_ITR3
) || \

1738 ((
__SELECTION__
√ã=Ô£ø
TIM_TS_NONE
))

	)

1740 
	#IS_TIM_TRIGGERPOLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
TIM_TRIGGERPOLARITY_INVERTED
 ) || \

1741 ((
__POLARITY__
√ã=Ô£ø
TIM_TRIGGERPOLARITY_NONINVERTED
) || \

1742 ((
__POLARITY__
√ã=Ô£ø
TIM_TRIGGERPOLARITY_RISING
 ) || \

1743 ((
__POLARITY__
√ã=Ô£ø
TIM_TRIGGERPOLARITY_FALLING
 ) || \

1744 ((
__POLARITY__
√ã=Ô£ø
TIM_TRIGGERPOLARITY_BOTHEDGE
 ))

	)

1746 
	#IS_TIM_TRIGGERPRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
TIM_TRIGGERPRESCALER_DIV1
) || \

1747 ((
__PRESCALER__
√ã=Ô£ø
TIM_TRIGGERPRESCALER_DIV2
) || \

1748 ((
__PRESCALER__
√ã=Ô£ø
TIM_TRIGGERPRESCALER_DIV4
) || \

1749 ((
__PRESCALER__
√ã=Ô£ø
TIM_TRIGGERPRESCALER_DIV8
))

	)

1751 
	#IS_TIM_TRIGGERFILTER
(
__ICFILTER__
√ã((__ICFILTER__√ã<Ô£ø0xFU)

	)

1753 
	#IS_TIM_TI1SELECTION
(
__TI1SELECTION__
√ã(((__TI1SELECTION__√ã=Ô£ø
TIM_TI1SELECTION_CH1
) || \

1754 ((
__TI1SELECTION__
√ã=Ô£ø
TIM_TI1SELECTION_XORCOMBINATION
))

	)

1756 
	#IS_TIM_DMA_LENGTH
(
__LENGTH__
√ã(((__LENGTH__√ã=Ô£ø
TIM_DMABURSTLENGTH_1TRANSFER
) || \

1757 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_2TRANSFERS
) || \

1758 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_3TRANSFERS
) || \

1759 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_4TRANSFERS
) || \

1760 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_5TRANSFERS
) || \

1761 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_6TRANSFERS
) || \

1762 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_7TRANSFERS
) || \

1763 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_8TRANSFERS
) || \

1764 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_9TRANSFERS
) || \

1765 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_10TRANSFERS
) || \

1766 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_11TRANSFERS
) || \

1767 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_12TRANSFERS
) || \

1768 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_13TRANSFERS
) || \

1769 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_14TRANSFERS
) || \

1770 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_15TRANSFERS
) || \

1771 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_16TRANSFERS
) || \

1772 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_17TRANSFERS
) || \

1773 ((
__LENGTH__
√ã=Ô£ø
TIM_DMABURSTLENGTH_18TRANSFERS
))

	)

1775 
	#IS_TIM_DMA_DATA_LENGTH
(
LENGTH
√ã(((LENGTH√ã>Ô£ø0x1U√ã&& ((LENGTH√ã< 0x10000U))

	)

1777 
	#IS_TIM_IC_FILTER
(
__ICFILTER__
√ã((__ICFILTER__√ã<Ô£ø0xFU)

	)

1779 
	#IS_TIM_DEADTIME
(
__DEADTIME__
√ã((__DEADTIME__√ã<Ô£ø0xFFU)

	)

1781 
	#IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
__TRIGGER__
√ã((__TRIGGER__√ã=Ô£ø
TIM_SLAVEMODE_TRIGGER
)

	)

1783 
	#TIM_SET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
) \

1784 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø(
__ICPSC__
)) :\

1785 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø((
__ICPSC__
) << 8U)) :\

1786 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø(
__ICPSC__
)) :\

1787 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø((
__ICPSC__
√ã<< 8U)))

	)

1789 
	#TIM_RESET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
) \

1790 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC1PSC
) :\

1791 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC2PSC
) :\

1792 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_IC3PSC
) :\

1793 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_IC4PSC
))

	)

1795 
	#TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
) \

1796 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 |Ô£ø(
__POLARITY__
)) :\

1797 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 |Ô£ø((
__POLARITY__
) << 4U)) :\

1798 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 |Ô£ø((
__POLARITY__
) << 8U)) :\

1799 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 |Ô£ø(((
__POLARITY__
√ã<< 12U))))

	)

1801 
	#TIM_RESET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
) \

1802 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 &Ô£ø~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
)) :\

1803 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 &Ô£ø~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
)) :\

1804 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 &Ô£ø~(
TIM_CCER_CC3P
)) :\

1805 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CCER
 &Ô£ø~(
TIM_CCER_CC4P
)))

	)

1807 
	#TIM_CHANNEL_STATE_GET
(
__HANDLE__
, 
__CHANNEL__
)\

1808 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[0] :\

1809 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[1] :\

1810 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[2] :\

1811 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[3])

	)

1813 
	#TIM_CHANNEL_STATE_SET
(
__HANDLE__
, 
__CHANNEL__
, 
__CHANNEL_STATE__
) \

1814 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[0] = (
__CHANNEL_STATE__
)) :\

1815 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[1] = (
__CHANNEL_STATE__
)) :\

1816 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[2] = (
__CHANNEL_STATE__
)) :\

1817 ((
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[3] = (
__CHANNEL_STATE__
)))

	)

1819 
	#TIM_CHANNEL_STATE_SET_ALL
(
__HANDLE__
, 
__CHANNEL_STATE__
) do { \

1820 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[0] = (
__CHANNEL_STATE__
); \

1821 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[1] = (
__CHANNEL_STATE__
); \

1822 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[2] = (
__CHANNEL_STATE__
); \

1823 (
__HANDLE__
)->
Ch‚Ñ¢‚àölS√®√£
[3] = (
__CHANNEL_STATE__
); \

1824 } 0)

	)

1826 
	#TIM_CHANNEL_N_STATE_GET
(
__HANDLE__
, 
__CHANNEL__
)\

1827 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[0] :\

1828 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[1] :\

1829 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[2] :\

1830 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[3])

	)

1832 
	#TIM_CHANNEL_N_STATE_SET
(
__HANDLE__
, 
__CHANNEL__
, 
__CHANNEL_STATE__
) \

1833 (((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_1
√ã? ((
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[0] = (
__CHANNEL_STATE__
)) :\

1834 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_2
√ã? ((
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[1] = (
__CHANNEL_STATE__
)) :\

1835 ((
__CHANNEL__
√ã=Ô£ø
TIM_CHANNEL_3
√ã? ((
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[2] = (
__CHANNEL_STATE__
)) :\

1836 ((
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[3] = (
__CHANNEL_STATE__
)))

	)

1838 
	#TIM_CHANNEL_N_STATE_SET_ALL
(
__HANDLE__
, 
__CHANNEL_STATE__
) do { \

1839 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[0] = (
__CHANNEL_STATE__
); \

1840 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[1] = (
__CHANNEL_STATE__
); \

1841 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[2] = (
__CHANNEL_STATE__
); \

1842 (
__HANDLE__
)->
Ch‚Ñ¢‚àölNS√®√£
[3] = (
__CHANNEL_STATE__
); \

1843 } 0)

	)

1851 
	~"¬∞m32f1xx_h√Ü_tim_ex.h
"

1863 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1864 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1865 
HAL_TIM_Ba¬£_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1866 
HAL_TIM_Ba¬£_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1868 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1869 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1871 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1872 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1874 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 *
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

1875 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Ba¬£_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1885 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1886 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1887 
HAL_TIM_OC_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1888 
HAL_TIM_OC_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1890 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1891 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1893 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1894 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1896 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

1897 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1907 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1908 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1909 
HAL_TIM_PWM_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1910 
HAL_TIM_PWM_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1912 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1913 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1915 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1916 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1918 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

1919 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1929 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1930 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1931 
HAL_TIM_IC_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1932 
HAL_TIM_IC_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1934 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1935 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1937 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1938 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1940 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

1941 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1951 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
O‚àöPul¬£Mode
);

1952 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1953 
HAL_TIM_O‚àöPul¬£_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1954 
HAL_TIM_O‚àöPul¬£_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1956 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

1957 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

1959 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

1960 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

1970 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_Encod√Æ_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
);

1971 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1972 
HAL_TIM_Encod√Æ_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1973 
HAL_TIM_Encod√Æ_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

1975 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1976 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1978 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1979 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1981 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a1
,

1982 
u√∂t32_t
 *
pD¬©a2
, 
u√∂t16_t
 
L√≠gth
);

1983 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Encod√Æ_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

1993 
HAL_TIM_IRQH‚Ñ¢d√Är
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2003 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_OC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_OC_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

2004 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_PWM_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_OC_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

2005 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_IC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_IC_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

2006 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_O‚àöPul¬£_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_O‚àöPul¬£_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
,

2007 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
, u√∂t32_√†
I‚âàutCh‚Ñ¢‚àöl
);

2008 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_C‚ÅÑfigOC¬™fC√Ä¬®
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_C√Ä¬®I‚âàutC‚ÅÑfigTy‚â•Def
 *
sC√Ä¬®I‚âàutC‚ÅÑfig
,

2009 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

2010 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_C‚ÅÑfigClockSourÀö
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_ClockC‚ÅÑfigTy‚â•Def
 *
sClockSourÀöC‚ÅÑfig
);

2011 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_C‚ÅÑfigTI1I‚âàut
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
TI1_S√±eÀòi‚ÅÑ
);

2012 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_S≈ìveC‚ÅÑfigSynchro
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_S≈ìveC‚ÅÑfigTy‚â•Def
 *
sS≈ìveC‚ÅÑfig
);

2013 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_S≈ìveC‚ÅÑfigSynchro_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_S≈ìveC‚ÅÑfigTy‚â•Def
 *
sS≈ìveC‚ÅÑfig
);

2014 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_DMABur¬∞_Wr√¥eS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

2015 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
, u√∂t32_√†
Bur¬∞L√≠gth
);

2016 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_DMABur¬∞_Mu‚Ä¶iWr√¥eS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

2017 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
, u√∂t32_√†
Bur¬∞L√≠gth
,

2018 
u√∂t32_t
 
D¬©aL√≠gth
);

2019 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_DMABur¬∞_Wr√¥eSt‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
);

2020 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_DMABur¬∞_R√≥dS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

2021 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
, u√∂t32_√†
Bur¬∞L√≠gth
);

2022 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_DMABur¬∞_Mu‚Ä¶iR√≥dS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

2023 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
, u√∂t32_√†
Bur¬∞L√≠gth
,

2024 
u√∂t32_t
 
D¬©aL√≠gth
);

2025 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_DMABur¬∞_R√≥dSt‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
);

2026 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_G√≠√Æ¬©eEv√≠t
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ev√≠tSourÀö
);

2027 
u√∂t32_t
 
HAL_TIM_R√≥dC‚â†tu¬™dV√Üue
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, u√∂t32_√†
Ch‚Ñ¢‚àöl
);

2037 
HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2038 
HAL_TIM_P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2039 
HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2040 
HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2041 
HAL_TIM_IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2042 
HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2043 
HAL_TIM_PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2044 
HAL_TIM_Trigg√ÆC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2045 
HAL_TIM_Trigg√ÆH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2046 
HAL_TIM_E¬∫‚ÄπC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2049 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2050 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_Regi¬∞√ÆC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
HAL_TIM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

2051 
pTIM_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

2052 
HAL_S√®tusTy‚â•Def
 
HAL_TIM_UnRegi¬∞√ÆC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
HAL_TIM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

2064 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIM_Ba¬£_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2065 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIM_OC_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2066 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIM_PWM_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2067 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIM_IC_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2068 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIM_O‚àöPul¬£_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2069 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIM_Encod√Æ_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2072 
HAL_TIM_AÀòiveCh‚Ñ¢‚àöl
 
HAL_TIM_G√´AÀòiveCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2073 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
HAL_TIM_G√´Ch‚Ñ¢‚àölS√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

2074 
HAL_TIM_DMABur¬∞S√®√£Ty‚â•Def
 
HAL_TIM_DMABur¬∞S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2088 
TIM_Ba¬£_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_Ba¬£_In√¥Ty‚â•Def
 *
S√•uÀòu¬™
);

2089 
TIM_TI1_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
, u√∂t32_√†
TIM_ICF√ª√£r
);

2090 
TIM_OC2_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
);

2091 
TIM_ETR_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ExtTRGP¬™sÀá√Är
,

2092 
u√∂t32_t
 
TIM_ExtTRGPÔ¨Å¬®√¥y
, u√∂t32_√†
ExtTRGF√ª√£r
);

2094 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

2095 
TIM_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

2096 
TIM_DMAC‚â†tu¬™C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

2097 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

2098 
TIM_CCxCh‚Ñ¢‚àölCmd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Ch‚Ñ¢‚àölS√®√£
);

2100 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2101 
TIM_Re¬£tC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

2117 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim_ex.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_TIM_EX_H


22 
	#STM32F1xx_HAL_TIM_EX_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

50 
u√∂t32_t
 
IC1PÔ¨Å¬®√¥y
;

53 
u√∂t32_t
 
IC1P¬™sÀá√Är
;

56 
u√∂t32_t
 
IC1F√ª√£r
;

59 
u√∂t32_t
 
Commu√®ti‚ÅÑ_D√±ay
;

61 } 
	tTIM_H√ÜlS√≠s‚Äπ_In√¥Ty‚â•Def
;

114 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_H√ÜlS√≠s‚Äπ_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
);

115 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

117 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

118 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

121 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

122 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

124 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

125 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

127 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 *
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

128 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

139 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_OCN_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

140 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_OCN_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

143 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_OCN_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

144 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_OCN_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

147 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_OCN_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

148 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_OCN_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

159 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_PWMN_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

160 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_PWMN_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

163 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_PWMN_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

164 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_PWMN_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

166 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_PWMN_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
);

167 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_PWMN_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
);

178 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_O‚àöPul¬£N_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

179 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_O‚àöPul¬£N_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

182 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_O‚àöPul¬£N_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

183 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_O‚àöPul¬£N_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
);

193 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_C‚ÅÑfigCommutEv√≠t
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
I‚âàutTrigg√Æ
,

194 
u√∂t32_t
 
Commu√®ti‚ÅÑSourÀö
);

195 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_C‚ÅÑfigCommutEv√≠t_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
I‚âàutTrigg√Æ
,

196 
u√∂t32_t
 
Commu√®ti‚ÅÑSourÀö
);

197 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_C‚ÅÑfigCommutEv√≠t_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
I‚âàutTrigg√Æ
,

198 
u√∂t32_t
 
Commu√®ti‚ÅÑSourÀö
);

199 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_Ma¬∞√ÆC‚ÅÑfigSynchr‚ÅÑiz¬©i‚ÅÑ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

200 
TIM_Ma¬∞√ÆC‚ÅÑfigTy‚â•Def
 *
sMa¬∞√ÆC‚ÅÑfig
);

201 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_C‚ÅÑfigB¬™akD√≥dTime
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

202 
TIM_B¬™akD√≥dTimeC‚ÅÑfigTy‚â•Def
 *
sB¬™akD√≥dTimeC‚ÅÑfig
);

203 
HAL_S√®tusTy‚â•Def
 
HAL_TIMEx_Rem‚â†C‚ÅÑfig
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Rem‚â†
);

213 
HAL_TIMEx_CommutC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

214 
HAL_TIMEx_CommutH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

215 
HAL_TIMEx_B¬™akC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

225 
HAL_TIM_S√®√£Ty‚â•Def
 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
);

226 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
HAL_TIMEx_G√´Ch‚Ñ¢‚àölNS√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àölN
);

240 
TIMEx_DMACommu√®ti‚ÅÑC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

241 
TIMEx_DMACommu√®ti‚ÅÑH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

255 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_uart.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_UART_H


22 
	#__STM32F1xx_HAL_UART_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
BaudR¬©e
;

54 
u√∂t32_t
 
W‚ÄπdL√≠gth
;

57 
u√∂t32_t
 
St‚Ä∫B√¥s
;

60 
u√∂t32_t
 
P¬®√¥y
;

67 
u√∂t32_t
 
Mode
;

70 
u√∂t32_t
 
HwFlowC√©
;

73 
u√∂t32_t
 
Ov√ÆSam‚àÇ√∂g
;

76 } 
	tUART_In√¥Ty‚â•Def
;

119 
HAL_UART_STATE_RESET
 = 0x00U,

121 
HAL_UART_STATE_READY
 = 0x20U,

123 
HAL_UART_STATE_BUSY
 = 0x24U,

125 
HAL_UART_STATE_BUSY_TX
 = 0x21U,

127 
HAL_UART_STATE_BUSY_RX
 = 0x22U,

129 
HAL_UART_STATE_BUSY_TX_RX
 = 0x23U,

132 
HAL_UART_STATE_TIMEOUT
 = 0xA0U,

134 
HAL_UART_STATE_ERROR
 = 0xE0U

136 } 
	tHAL_UART_S√®√£Ty‚â•Def
;

141 
	s__UART_H‚Ñ¢d√ÄTy‚â•Def


143 
USART_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

145 
UART_In√¥Ty‚â•Def
 
In√¥
;

147 
u√∂t8_t
 *
pTxBuffP√•
;

149 
u√∂t16_t
 
TxX‚ÄûrSize
;

151 
__IO
 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

153 
u√∂t8_t
 *
pRxBuffP√•
;

155 
u√∂t16_t
 
RxX‚ÄûrSize
;

157 
__IO
 
u√∂t16_t
 
RxX‚ÄûrCou¬°
;

159 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

161 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

163 
HAL_LockTy‚â•Def
 
Lock
;

165 
__IO
 
HAL_UART_S√®√£Ty‚â•Def
 
gS√®√£
;

169 
__IO
 
HAL_UART_S√®√£Ty‚â•Def
 
RxS√®√£
;

172 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

174 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

175 (* 
TxH√ÜfC‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

176 (* 
TxC‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

177 (* 
RxH√ÜfC‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

178 (* 
RxC‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

179 (* 
E¬∫‚ÄπC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

180 (* 
Ab‚ÄπtC‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

181 (* 
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

182 (* 
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

183 (* 
WakeupC√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

185 (* 
M‚Ä¢In√¥C√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

186 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

189 } 
	tUART_H‚Ñ¢d√ÄTy‚â•Def
;

191 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

197 
HAL_UART_TX_HALFCOMPLETE_CB_ID
 = 0x00U,

198 
HAL_UART_TX_COMPLETE_CB_ID
 = 0x01U,

199 
HAL_UART_RX_HALFCOMPLETE_CB_ID
 = 0x02U,

200 
HAL_UART_RX_COMPLETE_CB_ID
 = 0x03U,

201 
HAL_UART_ERROR_CB_ID
 = 0x04U,

202 
HAL_UART_ABORT_COMPLETE_CB_ID
 = 0x05U,

203 
HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID
 = 0x06U,

204 
HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID
 = 0x07U,

205 
HAL_UART_WAKEUP_CB_ID
 = 0x08U,

207 
HAL_UART_MSPINIT_CB_ID
 = 0x0BU,

208 
HAL_UART_MSPDEINIT_CB_ID
 = 0x0CU

210 } 
	tHAL_UART_C√ÜlbackIDTy‚â•Def
;

215 (*
pUART_C√ÜlbackTy‚â•Def
)(
	tUART_H‚Ñ¢d√ÄTy‚â•Def
 *
	thu¬®t
);

231 
	#HAL_UART_ERROR_NONE
 0x00000000U

	)

232 
	#HAL_UART_ERROR_PE
 0x00000001U

	)

233 
	#HAL_UART_ERROR_NE
 0x00000002U

	)

234 
	#HAL_UART_ERROR_FE
 0x00000004U

	)

235 
	#HAL_UART_ERROR_ORE
 0x00000008U

	)

236 
	#HAL_UART_ERROR_DMA
 0x00000010U

	)

237 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

238 
	#HAL_UART_ERROR_INVALID_CALLBACK
 0x00000020U

	)

247 
	#UART_WORDLENGTH_8B
 0x00000000U

	)

248 
	#UART_WORDLENGTH_9B
 ((
u√∂t32_t
)
USART_CR1_M
)

	)

256 
	#UART_STOPBITS_1
 0x00000000U

	)

257 
	#UART_STOPBITS_2
 ((
u√∂t32_t
)
USART_CR2_STOP_1
)

	)

265 
	#UART_PARITY_NONE
 0x00000000U

	)

266 
	#UART_PARITY_EVEN
 ((
u√∂t32_t
)
USART_CR1_PCE
)

	)

267 
	#UART_PARITY_ODD
 ((
u√∂t32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

275 
	#UART_HWCONTROL_NONE
 0x00000000U

	)

276 
	#UART_HWCONTROL_RTS
 ((
u√∂t32_t
)
USART_CR3_RTSE
)

	)

277 
	#UART_HWCONTROL_CTS
 ((
u√∂t32_t
)
USART_CR3_CTSE
)

	)

278 
	#UART_HWCONTROL_RTS_CTS
 ((
u√∂t32_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

286 
	#UART_MODE_RX
 ((
u√∂t32_t
)
USART_CR1_RE
)

	)

287 
	#UART_MODE_TX
 ((
u√∂t32_t
)
USART_CR1_TE
)

	)

288 
	#UART_MODE_TX_RX
 ((
u√∂t32_t
)(
USART_CR1_TE
 | 
USART_CR1_RE
))

	)

296 
	#UART_STATE_DISABLE
 0x00000000U

	)

297 
	#UART_STATE_ENABLE
 ((
u√∂t32_t
)
USART_CR1_UE
)

	)

305 
	#UART_OVERSAMPLING_16
 0x00000000U

	)

306 #i‚Ä°
def√∂ed
(
USART_CR1_OVER8
)

307 
	#UART_OVERSAMPLING_8
 ((
u√∂t32_t
)
USART_CR1_OVER8
)

	)

316 
	#UART_LINBREAKDETECTLENGTH_10B
 0x00000000U

	)

317 
	#UART_LINBREAKDETECTLENGTH_11B
 ((
u√∂t32_t
)
USART_CR2_LBDL
)

	)

325 
	#UART_WAKEUPMETHOD_IDLELINE
 0x00000000U

	)

326 
	#UART_WAKEUPMETHOD_ADDRESSMARK
 ((
u√∂t32_t
)
USART_CR1_WAKE
)

	)

336 
	#UART_FLAG_CTS
 ((
u√∂t32_t
)
USART_SR_CTS
)

	)

337 
	#UART_FLAG_LBD
 ((
u√∂t32_t
)
USART_SR_LBD
)

	)

338 
	#UART_FLAG_TXE
 ((
u√∂t32_t
)
USART_SR_TXE
)

	)

339 
	#UART_FLAG_TC
 ((
u√∂t32_t
)
USART_SR_TC
)

	)

340 
	#UART_FLAG_RXNE
 ((
u√∂t32_t
)
USART_SR_RXNE
)

	)

341 
	#UART_FLAG_IDLE
 ((
u√∂t32_t
)
USART_SR_IDLE
)

	)

342 
	#UART_FLAG_ORE
 ((
u√∂t32_t
)
USART_SR_ORE
)

	)

343 
	#UART_FLAG_NE
 ((
u√∂t32_t
)
USART_SR_NE
)

	)

344 
	#UART_FLAG_FE
 ((
u√∂t32_t
)
USART_SR_FE
)

	)

345 
	#UART_FLAG_PE
 ((
u√∂t32_t
)
USART_SR_PE
)

	)

360 
	#UART_IT_PE
 ((
u√∂t32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_PEIE
))

	)

361 
	#UART_IT_TXE
 ((
u√∂t32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_TXEIE
))

	)

362 
	#UART_IT_TC
 ((
u√∂t32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_TCIE
))

	)

363 
	#UART_IT_RXNE
 ((
u√∂t32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_RXNEIE
))

	)

364 
	#UART_IT_IDLE
 ((
u√∂t32_t
)(
UART_CR1_REG_INDEX
 << 28U | 
USART_CR1_IDLEIE
))

	)

366 
	#UART_IT_LBD
 ((
u√∂t32_t
)(
UART_CR2_REG_INDEX
 << 28U | 
USART_CR2_LBDIE
))

	)

368 
	#UART_IT_CTS
 ((
u√∂t32_t
)(
UART_CR3_REG_INDEX
 << 28U | 
USART_CR3_CTSIE
))

	)

369 
	#UART_IT_ERR
 ((
u√∂t32_t
)(
UART_CR3_REG_INDEX
 << 28U | 
USART_CR3_EIE
))

	)

389 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

390 
	#__HAL_UART_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

391 (
__HANDLE__
)->
gS√®√£
 = 
HAL_UART_STATE_RESET
; \

392 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_UART_STATE_RESET
; \

393 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

394 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

395 } 0U)

	)

397 
	#__HAL_UART_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

398 (
__HANDLE__
)->
gS√®√£
 = 
HAL_UART_STATE_RESET
; \

399 (
__HANDLE__
)->
RxS√®√£
 = 
HAL_UART_STATE_RESET
; \

400 } 0U)

	)

408 
	#__HAL_UART_FLUSH_DRREGISTER
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
DR
)

	)

428 
	#__HAL_UART_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 & (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

452 
	#__HAL_UART_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__FLAG__))

	)

460 
	#__HAL_UART_CLEAR_PEFLAG
(
__HANDLE__
) \

462 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0x00U; \

463 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

464 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
; \

465 
	`UNUSED
(
tm¬•eg
); \

466 } 0U)

	)

474 
	#__HAL_UART_CLEAR_FEFLAG
(
__HANDLE__
√ã
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

482 
	#__HAL_UART_CLEAR_NEFLAG
(
__HANDLE__
√ã
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

490 
	#__HAL_UART_CLEAR_OREFLAG
(
__HANDLE__
√ã
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

498 
	#__HAL_UART_CLEAR_IDLEFLAG
(
__HANDLE__
√ã
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

516 
	#__HAL_UART_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
UART_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø((__INTERRUPT__√ã& 
UART_IT_MASK
)): \

517 (((
__INTERRUPT__
√ã>> 28U√ã=Ô£ø
UART_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø((__INTERRUPT__√ã& 
UART_IT_MASK
)): \

518 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø((
__INTERRUPT__
√ã& 
UART_IT_MASK
)))

	)

536 
	#__HAL_UART_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
UART_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~((__INTERRUPT__√ã& 
UART_IT_MASK
)): \

537 (((
__INTERRUPT__
√ã>> 28U√ã=Ô£ø
UART_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~((__INTERRUPT__√ã& 
UART_IT_MASK
)): \

538 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø~ ((
__INTERRUPT__
√ã& 
UART_IT_MASK
)))

	)

555 
	#__HAL_UART_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
√ã(((((__IT__√ã>> 28U√ã=Ô£ø
UART_CR1_REG_INDEX
)? (__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
:(((((
u√∂t32_t
)(__IT__)√ã>> 28U√ã=Ô£ø
UART_CR2_REG_INDEX
)? \

556 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 : (__HANDLE__)->In¬∞‚Ñ¢Àö->
CR3
)√ã& (((
u√∂t32_t
)(
__IT__
)√ã& 
UART_IT_MASK
))

	)

572 
	#__HAL_UART_HWCONTROL_CTS_ENABLE
(
__HANDLE__
) \

574 
	`SET_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_CTSE
); \

575 (
__HANDLE__
)->
In√¥
.
HwFlowC√©
 |Ô£ø
USART_CR3_CTSE
; \

576 } 0U)

	)

592 
	#__HAL_UART_HWCONTROL_CTS_DISABLE
(
__HANDLE__
) \

594 
	`CLEAR_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_CTSE
); \

595 (
__HANDLE__
)->
In√¥
.
HwFlowC√©
 &Ô£ø~(
USART_CR3_CTSE
); \

596 } 0U)

	)

612 
	#__HAL_UART_HWCONTROL_RTS_ENABLE
(
__HANDLE__
) \

614 
	`SET_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_RTSE
); \

615 (
__HANDLE__
)->
In√¥
.
HwFlowC√©
 |Ô£ø
USART_CR3_RTSE
; \

616 } 0U)

	)

632 
	#__HAL_UART_HWCONTROL_RTS_DISABLE
(
__HANDLE__
) \

634 
	`CLEAR_BIT
((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_RTSE
);\

635 (
__HANDLE__
)->
In√¥
.
HwFlowC√©
 &Ô£ø~(
USART_CR3_RTSE
); \

636 } 0U)

	)

637 #i‚Ä°
def√∂ed
(
USART_CR3_ONEBIT
)

643 
	#__HAL_UART_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR3
|Ô£ø
USART_CR3_ONEBIT
)

	)

649 
	#__HAL_UART_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø(
u√∂t16_t
)~((u√∂t16_t)
USART_CR3_ONEBIT
))

	)

656 
	#__HAL_UART_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø
USART_CR1_UE
)

	)

662 
	#__HAL_UART_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~
USART_CR1_UE
)

	)

677 
HAL_S√®tusTy‚â•Def
 
HAL_UART_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

678 
HAL_S√®tusTy‚â•Def
 
HAL_H√ÜfDu‚àÇex_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

679 
HAL_S√®tusTy‚â•Def
 
HAL_LIN_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t32_t
 
B¬™akD√´eÀòL√≠gth
);

680 
HAL_S√®tusTy‚â•Def
 
HAL_Mu‚Ä¶iProÀöss‚Äπ_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 
Add¬™ss
, 
u√∂t32_t
 
WakeUpM√´hod
);

681 
HAL_S√®tusTy‚â•Def
 
HAL_UART_DeIn√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

682 
HAL_UART_M‚Ä¢In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

683 
HAL_UART_M‚Ä¢DeIn√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

686 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

687 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Regi¬∞√ÆC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
HAL_UART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pUART_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

688 
HAL_S√®tusTy‚â•Def
 
HAL_UART_UnRegi¬∞√ÆC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
HAL_UART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

700 
HAL_S√®tusTy‚â•Def
 
HAL_UART_T√∏nsm√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

701 
HAL_S√®tusTy‚â•Def
 
HAL_UART_ReÀöive
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

702 
HAL_S√®tusTy‚â•Def
 
HAL_UART_T√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

703 
HAL_S√®tusTy‚â•Def
 
HAL_UART_ReÀöive_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

704 
HAL_S√®tusTy‚â•Def
 
HAL_UART_T√∏nsm√¥_DMA
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

705 
HAL_S√®tusTy‚â•Def
 
HAL_UART_ReÀöive_DMA
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
);

706 
HAL_S√®tusTy‚â•Def
 
HAL_UART_DMAPau¬£
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

707 
HAL_S√®tusTy‚â•Def
 
HAL_UART_DMAResume
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

708 
HAL_S√®tusTy‚â•Def
 
HAL_UART_DMASt‚Ä∫
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

710 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Ab‚Äπt
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

711 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Ab‚ÄπtT√∏nsm√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

712 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Ab‚ÄπtReÀöive
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

713 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Ab‚Äπt_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

714 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Ab‚ÄπtT√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

715 
HAL_S√®tusTy‚â•Def
 
HAL_UART_Ab‚ÄπtReÀöive_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

717 
HAL_UART_IRQH‚Ñ¢d√Är
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

718 
HAL_UART_TxC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

719 
HAL_UART_TxH√ÜfC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

720 
HAL_UART_RxC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

721 
HAL_UART_RxH√ÜfC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

722 
HAL_UART_E¬∫‚ÄπC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

723 
HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

724 
HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

725 
HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

735 
HAL_S√®tusTy‚â•Def
 
HAL_LIN_S√≠dB¬™ak
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

736 
HAL_S√®tusTy‚â•Def
 
HAL_Mu‚Ä¶iProÀöss‚Äπ_E¬°√ÆMu√£Mode
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

737 
HAL_S√®tusTy‚â•Def
 
HAL_Mu‚Ä¶iProÀöss‚Äπ_Ex√¥Mu√£Mode
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

738 
HAL_S√®tusTy‚â•Def
 
HAL_H√ÜfDu‚àÇex_E¬´b√ÄT√∏nsm√¥√£r
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

739 
HAL_S√®tusTy‚â•Def
 
HAL_H√ÜfDu‚àÇex_E¬´b√ÄReÀöiv√Æ
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

748 
HAL_UART_S√®√£Ty‚â•Def
 
HAL_UART_G√´S√®√£
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

749 
u√∂t32_t
 
HAL_UART_G√´E¬∫‚Äπ
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

766 
	#UART_IT_MASK
 0x0000FFFFU

	)

768 
	#UART_CR1_REG_INDEX
 1U

	)

769 
	#UART_CR2_REG_INDEX
 2U

	)

770 
	#UART_CR3_REG_INDEX
 3U

	)

779 
	#IS_UART_WORD_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
UART_WORDLENGTH_8B
) || \

780 ((
LENGTH
√ã=Ô£ø
UART_WORDLENGTH_9B
))

	)

781 
	#IS_UART_LIN_WORD_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
UART_WORDLENGTH_8B
))

	)

782 
	#IS_UART_STOPBITS
(
STOPBITS
√ã(((STOPBITS√ã=Ô£ø
UART_STOPBITS_1
) || \

783 ((
STOPBITS
√ã=Ô£ø
UART_STOPBITS_2
))

	)

784 
	#IS_UART_PARITY
(
PARITY
√ã(((PARITY√ã=Ô£ø
UART_PARITY_NONE
) || \

785 ((
PARITY
√ã=Ô£ø
UART_PARITY_EVEN
) || \

786 ((
PARITY
√ã=Ô£ø
UART_PARITY_ODD
))

	)

787 
	#IS_UART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

788 (((
CONTROL
√ã=Ô£ø
UART_HWCONTROL_NONE
) || \

789 ((
CONTROL
√ã=Ô£ø
UART_HWCONTROL_RTS
) || \

790 ((
CONTROL
√ã=Ô£ø
UART_HWCONTROL_CTS
) || \

791 ((
CONTROL
√ã=Ô£ø
UART_HWCONTROL_RTS_CTS
))

	)

792 
	#IS_UART_MODE
(
MODE
√ã((((MODE√ã& 0x0000FFF3U√ã=Ô£ø0x00U√ã&& ((MODE√ã!Ô£ø0x00U))

	)

793 
	#IS_UART_STATE
(
STATE
√ã(((STATE√ã=Ô£ø
UART_STATE_DISABLE
) || \

794 ((
STATE
√ã=Ô£ø
UART_STATE_ENABLE
))

	)

795 #i‚Ä°
def√∂ed
(
USART_CR1_OVER8
)

796 
	#IS_UART_OVERSAMPLING
(
SAMPLING
√ã(((SAMPLING√ã=Ô£ø
UART_OVERSAMPLING_16
) || \

797 ((
SAMPLING
√ã=Ô£ø
UART_OVERSAMPLING_8
))

	)

799 
	#IS_UART_LIN_OVERSAMPLING
(
SAMPLING
√ã(((SAMPLING√ã=Ô£ø
UART_OVERSAMPLING_16
))

	)

800 
	#IS_UART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
UART_LINBREAKDETECTLENGTH_10B
) || \

801 ((
LENGTH
√ã=Ô£ø
UART_LINBREAKDETECTLENGTH_11B
))

	)

802 
	#IS_UART_WAKEUPMETHOD
(
WAKEUP
√ã(((WAKEUP√ã=Ô£ø
UART_WAKEUPMETHOD_IDLELINE
) || \

803 ((
WAKEUP
√ã=Ô£ø
UART_WAKEUPMETHOD_ADDRESSMARK
))

	)

804 
	#IS_UART_BAUDRATE
(
BAUDRATE
√ã((BAUDRATE√ã<Ô£ø4500000U)

	)

805 
	#IS_UART_ADDRESS
(
ADDRESS
√ã((ADDRESS√ã<Ô£ø0x0FU)

	)

807 
	#UART_DIV_SAMPLING16
(
_PCLK_
, 
_BAUD_
√ã(((_PCLK_)*25U)/(4U*(_BAUD_)))

	)

808 
	#UART_DIVMANT_SAMPLING16
(
_PCLK_
, 
_BAUD_
√ã(
	`UART_DIV_SAMPLING16
((_PCLK_), (_BAUD_))/100U)

	)

809 
	#UART_DIVFRAQ_SAMPLING16
(
_PCLK_
, 
_BAUD_
√ã((((
	`UART_DIV_SAMPLING16
((_PCLK_), (_BAUD_)√ã- (
	`UART_DIVMANT_SAMPLING16
((_PCLK_), (_BAUD_)√ã* 100U)√ã* 16U√ã+ 50U√ã/ 100U)

	)

812 
	#UART_BRR_SAMPLING16
(
_PCLK_
, 
_BAUD_
√ã(((
	`UART_DIVMANT_SAMPLING16
((_PCLK_), (_BAUD_)) << 4U) + \

813 (
	`UART_DIVFRAQ_SAMPLING16
((
_PCLK_
), (
_BAUD_
)) & 0xF0U)) + \

814 (
	`UART_DIVFRAQ_SAMPLING16
((
_PCLK_
), (
_BAUD_
)√ã& 0x0FU))

	)

816 
	#UART_DIV_SAMPLING8
(
_PCLK_
, 
_BAUD_
√ã(((_PCLK_)*25U)/(2U*(_BAUD_)))

	)

817 
	#UART_DIVMANT_SAMPLING8
(
_PCLK_
, 
_BAUD_
√ã(
	`UART_DIV_SAMPLING8
((_PCLK_), (_BAUD_))/100U)

	)

818 
	#UART_DIVFRAQ_SAMPLING8
(
_PCLK_
, 
_BAUD_
√ã((((
	`UART_DIV_SAMPLING8
((_PCLK_), (_BAUD_)√ã- (
	`UART_DIVMANT_SAMPLING8
((_PCLK_), (_BAUD_)√ã* 100U)√ã* 8U√ã+ 50U√ã/ 100U)

	)

821 
	#UART_BRR_SAMPLING8
(
_PCLK_
, 
_BAUD_
√ã(((
	`UART_DIVMANT_SAMPLING8
((_PCLK_), (_BAUD_)) << 4U) + \

822 ((
	`UART_DIVFRAQ_SAMPLING8
((
_PCLK_
), (
_BAUD_
)) & 0xF8U) << 1U)) + \

823 (
	`UART_DIVFRAQ_SAMPLING8
((
_PCLK_
), (
_BAUD_
)√ã& 0x07U))

	)

846 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_usart.h

21 #i‚Äöde‚Ä°
__STM32F1xx_HAL_USART_H


22 
	#__STM32F1xx_HAL_USART_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

49 
u√∂t32_t
 
BaudR¬©e
;

54 
u√∂t32_t
 
W‚ÄπdL√≠gth
;

57 
u√∂t32_t
 
St‚Ä∫B√¥s
;

60 
u√∂t32_t
 
P¬®√¥y
;

67 
u√∂t32_t
 
Mode
;

70 
u√∂t32_t
 
CLKPÔ¨Å¬®√¥y
;

73 
u√∂t32_t
 
CLKPha¬£
;

76 
u√∂t32_t
 
CLKLa¬∞B√¥
;

79 } 
	tUSART_In√¥Ty‚â•Def
;

86 
HAL_USART_STATE_RESET
 = 0x00U,

87 
HAL_USART_STATE_READY
 = 0x01U,

88 
HAL_USART_STATE_BUSY
 = 0x02U,

89 
HAL_USART_STATE_BUSY_TX
 = 0x12U,

90 
HAL_USART_STATE_BUSY_RX
 = 0x22U,

91 
HAL_USART_STATE_BUSY_TX_RX
 = 0x32U,

92 
HAL_USART_STATE_TIMEOUT
 = 0x03U,

93 
HAL_USART_STATE_ERROR
 = 0x04U

94 } 
	tHAL_USART_S√®√£Ty‚â•Def
;

99 
	s__USART_H‚Ñ¢d√ÄTy‚â•Def


101 
USART_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

103 
USART_In√¥Ty‚â•Def
 
In√¥
;

105 
u√∂t8_t
 *
pTxBuffP√•
;

107 
u√∂t16_t
 
TxX‚ÄûrSize
;

109 
__IO
 
u√∂t16_t
 
TxX‚ÄûrCou¬°
;

111 
u√∂t8_t
 *
pRxBuffP√•
;

113 
u√∂t16_t
 
RxX‚ÄûrSize
;

115 
__IO
 
u√∂t16_t
 
RxX‚ÄûrCou¬°
;

117 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬©x
;

119 
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdm¬®x
;

121 
HAL_LockTy‚â•Def
 
Lock
;

123 
__IO
 
HAL_USART_S√®√£Ty‚â•Def
 
S√®√£
;

125 
__IO
 
u√∂t32_t
 
E¬∫‚ÄπCode
;

127 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

128 (* 
TxH√ÜfC‚àÇtC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

129 (* 
TxC‚àÇtC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

130 (* 
RxH√ÜfC‚àÇtC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

131 (* 
RxC‚àÇtC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

132 (* 
TxRxC‚àÇtC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

133 (* 
E¬∫‚ÄπC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

134 (* 
Ab‚ÄπtC‚àÇtC√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

136 (* 
M‚Ä¢In√¥C√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

137 (* 
M‚Ä¢DeIn√¥C√Ülback
)(
__USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

140 } 
	tUSART_H‚Ñ¢d√ÄTy‚â•Def
;

142 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

148 
HAL_USART_TX_HALFCOMPLETE_CB_ID
 = 0x00U,

149 
HAL_USART_TX_COMPLETE_CB_ID
 = 0x01U,

150 
HAL_USART_RX_HALFCOMPLETE_CB_ID
 = 0x02U,

151 
HAL_USART_RX_COMPLETE_CB_ID
 = 0x03U,

152 
HAL_USART_TX_RX_COMPLETE_CB_ID
 = 0x04U,

153 
HAL_USART_ERROR_CB_ID
 = 0x05U,

154 
HAL_USART_ABORT_COMPLETE_CB_ID
 = 0x06U,

156 
HAL_USART_MSPINIT_CB_ID
 = 0x07U,

157 
HAL_USART_MSPDEINIT_CB_ID
 = 0x08U

159 } 
	tHAL_USART_C√ÜlbackIDTy‚â•Def
;

164 (*
pUSART_C√ÜlbackTy‚â•Def
)(
	tUSART_H‚Ñ¢d√ÄTy‚â•Def
 *
	thu√üœÄ
);

181 
	#HAL_USART_ERROR_NONE
 0x00000000U

	)

182 
	#HAL_USART_ERROR_PE
 0x00000001U

	)

183 
	#HAL_USART_ERROR_NE
 0x00000002U

	)

184 
	#HAL_USART_ERROR_FE
 0x00000004U

	)

185 
	#HAL_USART_ERROR_ORE
 0x00000008U

	)

186 
	#HAL_USART_ERROR_DMA
 0x00000010U

	)

187 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

188 
	#HAL_USART_ERROR_INVALID_CALLBACK
 0x00000020U

	)

197 
	#USART_WORDLENGTH_8B
 0x00000000U

	)

198 
	#USART_WORDLENGTH_9B
 ((
u√∂t32_t
)
USART_CR1_M
)

	)

206 
	#USART_STOPBITS_1
 0x00000000U

	)

207 
	#USART_STOPBITS_0_5
 ((
u√∂t32_t
)
USART_CR2_STOP_0
)

	)

208 
	#USART_STOPBITS_2
 ((
u√∂t32_t
)
USART_CR2_STOP_1
)

	)

209 
	#USART_STOPBITS_1_5
 ((
u√∂t32_t
)(
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
))

	)

217 
	#USART_PARITY_NONE
 0x00000000U

	)

218 
	#USART_PARITY_EVEN
 ((
u√∂t32_t
)
USART_CR1_PCE
)

	)

219 
	#USART_PARITY_ODD
 ((
u√∂t32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

227 
	#USART_MODE_RX
 ((
u√∂t32_t
)
USART_CR1_RE
)

	)

228 
	#USART_MODE_TX
 ((
u√∂t32_t
)
USART_CR1_TE
)

	)

229 
	#USART_MODE_TX_RX
 ((
u√∂t32_t
)(
USART_CR1_TE
 | 
USART_CR1_RE
))

	)

237 
	#USART_CLOCK_DISABLE
 0x00000000U

	)

238 
	#USART_CLOCK_ENABLE
 ((
u√∂t32_t
)
USART_CR2_CLKEN
)

	)

246 
	#USART_POLARITY_LOW
 0x00000000U

	)

247 
	#USART_POLARITY_HIGH
 ((
u√∂t32_t
)
USART_CR2_CPOL
)

	)

255 
	#USART_PHASE_1EDGE
 0x00000000U

	)

256 
	#USART_PHASE_2EDGE
 ((
u√∂t32_t
)
USART_CR2_CPHA
)

	)

264 
	#USART_LASTBIT_DISABLE
 0x00000000U

	)

265 
	#USART_LASTBIT_ENABLE
 ((
u√∂t32_t
)
USART_CR2_LBCL
)

	)

273 
	#USART_NACK_ENABLE
 ((
u√∂t32_t
)
USART_CR3_NACK
)

	)

274 
	#USART_NACK_DISABLE
 0x00000000U

	)

284 
	#USART_FLAG_TXE
 ((
u√∂t32_t
)
USART_SR_TXE
)

	)

285 
	#USART_FLAG_TC
 ((
u√∂t32_t
)
USART_SR_TC
)

	)

286 
	#USART_FLAG_RXNE
 ((
u√∂t32_t
)
USART_SR_RXNE
)

	)

287 
	#USART_FLAG_IDLE
 ((
u√∂t32_t
)
USART_SR_IDLE
)

	)

288 
	#USART_FLAG_ORE
 ((
u√∂t32_t
)
USART_SR_ORE
)

	)

289 
	#USART_FLAG_NE
 ((
u√∂t32_t
)
USART_SR_NE
)

	)

290 
	#USART_FLAG_FE
 ((
u√∂t32_t
)
USART_SR_FE
)

	)

291 
	#USART_FLAG_PE
 ((
u√∂t32_t
)
USART_SR_PE
)

	)

305 
	#USART_IT_PE
 ((
u√∂t32_t
)(
USART_CR1_REG_INDEX
 << 28U | 
USART_CR1_PEIE
))

	)

306 
	#USART_IT_TXE
 ((
u√∂t32_t
)(
USART_CR1_REG_INDEX
 << 28U | 
USART_CR1_TXEIE
))

	)

307 
	#USART_IT_TC
 ((
u√∂t32_t
)(
USART_CR1_REG_INDEX
 << 28U | 
USART_CR1_TCIE
))

	)

308 
	#USART_IT_RXNE
 ((
u√∂t32_t
)(
USART_CR1_REG_INDEX
 << 28U | 
USART_CR1_RXNEIE
))

	)

309 
	#USART_IT_IDLE
 ((
u√∂t32_t
)(
USART_CR1_REG_INDEX
 << 28U | 
USART_CR1_IDLEIE
))

	)

310 
	#USART_IT_ERR
 ((
u√∂t32_t
)(
USART_CR3_REG_INDEX
 << 28U | 
USART_CR3_EIE
))

	)

329 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

330 
	#__HAL_USART_RESET_HANDLE_STATE
(
__HANDLE__
) do{ \

331 (
__HANDLE__
)->
S√®√£
 = 
HAL_USART_STATE_RESET
; \

332 (
__HANDLE__
)->
M‚Ä¢In√¥C√Ülback
 = 
NULL
; \

333 (
__HANDLE__
)->
M‚Ä¢DeIn√¥C√Ülback
 = 
NULL
; \

334 } 0U)

	)

336 
	#__HAL_USART_RESET_HANDLE_STATE
(
__HANDLE__
√ã((__HANDLE__)->
S√®√£
 = 
HAL_USART_STATE_RESET
)

	)

354 
	#__HAL_USART_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 & (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

375 
	#__HAL_USART_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__FLAG__))

	)

382 
	#__HAL_USART_CLEAR_PEFLAG
(
__HANDLE__
) \

384 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0x00U; \

385 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
SR
; \

386 
tm¬•eg
 = (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
DR
; \

387 
	`UNUSED
(
tm¬•eg
); \

388 } 0U)

	)

395 
	#__HAL_USART_CLEAR_FEFLAG
(
__HANDLE__
√ã
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

402 
	#__HAL_USART_CLEAR_NEFLAG
(
__HANDLE__
√ã
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

409 
	#__HAL_USART_CLEAR_OREFLAG
(
__HANDLE__
√ã
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

416 
	#__HAL_USART_CLEAR_IDLEFLAG
(
__HANDLE__
√ã
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

431 
	#__HAL_USART_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
USART_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø((__INTERRUPT__√ã& 
USART_IT_MASK
)): \

432 (((
__INTERRUPT__
√ã>> 28U√ã=Ô£ø
USART_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø((__INTERRUPT__√ã& 
USART_IT_MASK
)): \

433 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø((
__INTERRUPT__
√ã& 
USART_IT_MASK
)))

	)

434 
	#__HAL_USART_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã((((__INTERRUPT__√ã>> 28U√ã=Ô£ø
USART_CR1_REG_INDEX
)? ((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~((__INTERRUPT__√ã& 
USART_IT_MASK
)): \

435 (((
__INTERRUPT__
√ã>> 28U√ã=Ô£ø
USART_CR2_REG_INDEX
)? ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~((__INTERRUPT__√ã& 
USART_IT_MASK
)): \

436 ((
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø~ ((
__INTERRUPT__
√ã& 
USART_IT_MASK
)))

	)

451 
	#__HAL_USART_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
√ã(((((__IT__√ã>> 28U√ã=Ô£ø
USART_CR1_REG_INDEX
)? (__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
:(((((
u√∂t32_t
)(__IT__)√ã>> 28U√ã=Ô£ø
USART_CR2_REG_INDEX
)? \

452 (
__HANDLE__
)->
In¬∞‚Ñ¢Àö
->
CR2
 : (__HANDLE__)->In¬∞‚Ñ¢Àö->
CR3
)√ã& (((
u√∂t32_t
)(
__IT__
)√ã& 
USART_IT_MASK
))

	)

458 
	#__HAL_USART_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø
USART_CR3_ONEBIT
)

	)

464 
	#__HAL_USART_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR3
 &Ô£ø(
u√∂t16_t
)~((u√∂t16_t)
USART_CR3_ONEBIT
))

	)

471 
	#__HAL_USART_ENABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø
USART_CR1_UE
)

	)

478 
	#__HAL_USART_DISABLE
(
__HANDLE__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~
USART_CR1_UE
)

	)

492 
HAL_S√®tusTy‚â•Def
 
HAL_USART_In√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

493 
HAL_S√®tusTy‚â•Def
 
HAL_USART_DeIn√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

494 
HAL_USART_M‚Ä¢In√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

495 
HAL_USART_M‚Ä¢DeIn√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

498 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

499 
HAL_S√®tusTy‚â•Def
 
HAL_USART_Regi¬∞√ÆC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
HAL_USART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pUSART_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

500 
HAL_S√®tusTy‚â•Def
 
HAL_USART_UnRegi¬∞√ÆC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
HAL_USART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

511 
HAL_S√®tusTy‚â•Def
 
HAL_USART_T√∏nsm√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

512 
HAL_S√®tusTy‚â•Def
 
HAL_USART_ReÀöive
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pRxD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

513 
HAL_S√®tusTy‚â•Def
 
HAL_USART_T√∏nsm√¥ReÀöive
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
);

514 
HAL_S√®tusTy‚â•Def
 
HAL_USART_T√∏nsm√¥_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, 
u√∂t16_t
 
Size
);

515 
HAL_S√®tusTy‚â•Def
 
HAL_USART_ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pRxD¬©a
, 
u√∂t16_t
 
Size
);

516 
HAL_S√®tusTy‚â•Def
 
HAL_USART_T√∏nsm√¥ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
);

517 
HAL_S√®tusTy‚â•Def
 
HAL_USART_T√∏nsm√¥_DMA
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, 
u√∂t16_t
 
Size
);

518 
HAL_S√®tusTy‚â•Def
 
HAL_USART_ReÀöive_DMA
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pRxD¬©a
, 
u√∂t16_t
 
Size
);

519 
HAL_S√®tusTy‚â•Def
 
HAL_USART_T√∏nsm√¥ReÀöive_DMA
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
);

520 
HAL_S√®tusTy‚â•Def
 
HAL_USART_DMAPau¬£
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

521 
HAL_S√®tusTy‚â•Def
 
HAL_USART_DMAResume
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

522 
HAL_S√®tusTy‚â•Def
 
HAL_USART_DMASt‚Ä∫
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

524 
HAL_S√®tusTy‚â•Def
 
HAL_USART_Ab‚Äπt
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

525 
HAL_S√®tusTy‚â•Def
 
HAL_USART_Ab‚Äπt_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

527 
HAL_USART_IRQH‚Ñ¢d√Är
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

528 
HAL_USART_TxC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

529 
HAL_USART_TxH√ÜfC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

530 
HAL_USART_RxC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

531 
HAL_USART_RxH√ÜfC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

532 
HAL_USART_TxRxC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

533 
HAL_USART_E¬∫‚ÄπC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

534 
HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

543 
HAL_USART_S√®√£Ty‚â•Def
 
HAL_USART_G√´S√®√£
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

544 
u√∂t32_t
 
HAL_USART_G√´E¬∫‚Äπ
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

561 
	#USART_IT_MASK
 ((
u√∂t32_t
√ã
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
 | 
USART_CR1_RXNEIE
 | \

562 
USART_CR1_IDLEIE
 | 
USART_CR2_LBDIE
 | 
USART_CR3_CTSIE
 | 
USART_CR3_EIE
 )

	)

564 
	#USART_CR1_REG_INDEX
 1U

	)

565 
	#USART_CR2_REG_INDEX
 2U

	)

566 
	#USART_CR3_REG_INDEX
 3U

	)

575 
	#IS_USART_NACK_STATE
(
NACK
√ã(((NACK√ã=Ô£ø
USART_NACK_ENABLE
) || \

576 ((
NACK
√ã=Ô£ø
USART_NACK_DISABLE
))

	)

578 
	#IS_USART_LASTBIT
(
LASTBIT
√ã(((LASTBIT√ã=Ô£ø
USART_LASTBIT_DISABLE
) || \

579 ((
LASTBIT
√ã=Ô£ø
USART_LASTBIT_ENABLE
))

	)

581 
	#IS_USART_PHASE
(
CPHA
√ã(((CPHA√ã=Ô£ø
USART_PHASE_1EDGE
) || \

582 ((
CPHA
√ã=Ô£ø
USART_PHASE_2EDGE
))

	)

584 
	#IS_USART_POLARITY
(
CPOL
√ã(((CPOL√ã=Ô£ø
USART_POLARITY_LOW
) || \

585 ((
CPOL
√ã=Ô£ø
USART_POLARITY_HIGH
))

	)

587 
	#IS_USART_CLOCK
(
CLOCK
√ã(((CLOCK√ã=Ô£ø
USART_CLOCK_DISABLE
) || \

588 ((
CLOCK
√ã=Ô£ø
USART_CLOCK_ENABLE
))

	)

590 
	#IS_USART_WORD_LENGTH
(
LENGTH
√ã(((LENGTH√ã=Ô£ø
USART_WORDLENGTH_8B
) || \

591 ((
LENGTH
√ã=Ô£ø
USART_WORDLENGTH_9B
))

	)

593 
	#IS_USART_STOPBITS
(
STOPBITS
√ã(((STOPBITS√ã=Ô£ø
USART_STOPBITS_1
) || \

594 ((
STOPBITS
√ã=Ô£ø
USART_STOPBITS_0_5
) || \

595 ((
STOPBITS
√ã=Ô£ø
USART_STOPBITS_1_5
) || \

596 ((
STOPBITS
√ã=Ô£ø
USART_STOPBITS_2
))

	)

598 
	#IS_USART_PARITY
(
PARITY
√ã(((PARITY√ã=Ô£ø
USART_PARITY_NONE
) || \

599 ((
PARITY
√ã=Ô£ø
USART_PARITY_EVEN
) || \

600 ((
PARITY
√ã=Ô£ø
USART_PARITY_ODD
))

	)

602 
	#IS_USART_MODE
(
MODE
√ã((((MODE√ã& (~((
u√∂t32_t
)
USART_MODE_TX_RX
))√ã=Ô£ø0x00U√ã&& ((MODE√ã!Ô£ø0x00U))

	)

604 
	#IS_USART_BAUDRATE
(
BAUDRATE
√ã((BAUDRATE√ã<Ô£ø4500000U)

	)

606 
	#USART_DIV
(
_PCLK_
, 
_BAUD_
√ã(((_PCLK_)*25U)/(4U*(_BAUD_)))

	)

608 
	#USART_DIVMANT
(
_PCLK_
, 
_BAUD_
√ã(
	`USART_DIV
((_PCLK_), (_BAUD_))/100U)

	)

610 
	#USART_DIVFRAQ
(
_PCLK_
, 
_BAUD_
√ã((((
	`USART_DIV
((_PCLK_), (_BAUD_)√ã- (
	`USART_DIVMANT
((_PCLK_), (_BAUD_)√ã* 100U)√ã* 16U√ã+ 50U√ã/ 100U)

	)

615 
	#USART_BRR
(
_PCLK_
, 
_BAUD_
√ã(((
	`USART_DIVMANT
((_PCLK_), (_BAUD_)) << 4U) + \

616 ((
	`USART_DIVFRAQ
((
_PCLK_
), (
_BAUD_
)) & 0xF0U) << 1U)) + \

617 (
	`USART_DIVFRAQ
((
_PCLK_
), (
_BAUD_
)√ã& 0x0FU))

	)

639 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_wwdg.h

21 #i‚Äöde‚Ä°
STM32F1xx_HAL_WWDG_H


22 
	#STM32F1xx_HAL_WWDG_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

50 
u√∂t32_t
 
P¬™sÀá√Är
;

53 
u√∂t32_t
 
W√∂dow
;

56 
u√∂t32_t
 
Cou¬°√Æ
;

59 
u√∂t32_t
 
EWIMode
 ;

62 } 
	tWWDG_In√¥Ty‚â•Def
;

67 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

68 
__WWDG_H‚Ñ¢d√ÄTy‚â•Def


73 
WWDG_Ty‚â•Def
 *
In¬∞‚Ñ¢Àö
;

75 
WWDG_In√¥Ty‚â•Def
 
In√¥
;

77 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

78 (* 
EwiC√Ülback
)(
__WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

80 (* 
M‚Ä¢In√¥C√Ülback
)(
__WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

82 } 
	tWWDG_H‚Ñ¢d√ÄTy‚â•Def
;

84 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

90 
HAL_WWDG_EWI_CB_ID
 = 0x00U,

91 
HAL_WWDG_MSPINIT_CB_ID
 = 0x01U,

92 } 
	tHAL_WWDG_C√ÜlbackIDTy‚â•Def
;

97 (*
pWWDG_C√ÜlbackTy‚â•Def
)(
	tWWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
	th¬µp
);

113 
	#WWDG_IT_EWI
 
WWDG_CFR_EWI


	)

122 
	#WWDG_FLAG_EWIF
 
WWDG_SR_EWIF


	)

130 
	#WWDG_PRESCALER_1
 0x00000000u

	)

131 
	#WWDG_PRESCALER_2
 
WWDG_CFR_WDGTB_0


	)

132 
	#WWDG_PRESCALER_4
 
WWDG_CFR_WDGTB_1


	)

133 
	#WWDG_PRESCALER_8
 (
WWDG_CFR_WDGTB_1
 | 
WWDG_CFR_WDGTB_0
√ã

	)

141 
	#WWDG_EWI_DISABLE
 0x00000000u

	)

142 
	#WWDG_EWI_ENABLE
 
WWDG_CFR_EWI


	)

156 
	#IS_WWDG_PRESCALER
(
__PRESCALER__
√ã(((__PRESCALER__√ã=Ô£ø
WWDG_PRESCALER_1
) || \

157 ((
__PRESCALER__
√ã=Ô£ø
WWDG_PRESCALER_2
) || \

158 ((
__PRESCALER__
√ã=Ô£ø
WWDG_PRESCALER_4
) || \

159 ((
__PRESCALER__
√ã=Ô£ø
WWDG_PRESCALER_8
))

	)

161 
	#IS_WWDG_WINDOW
(
__WINDOW__
√ã(((__WINDOW__√ã>Ô£ø
WWDG_CFR_W_6
√ã&& ((__WINDOW__√ã<Ô£ø
WWDG_CFR_W
))

	)

163 
	#IS_WWDG_COUNTER
(
__COUNTER__
√ã(((__COUNTER__√ã>Ô£ø
WWDG_CR_T_6
√ã&& ((__COUNTER__√ã<Ô£ø
WWDG_CR_T
))

	)

165 
	#IS_WWDG_EWI_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
WWDG_EWI_ENABLE
) || \

166 ((
__MODE__
√ã=Ô£ø
WWDG_EWI_DISABLE
))

	)

183 
	#__HAL_WWDG_ENABLE
(
__HANDLE__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CR
, 
WWDG_CR_WDGA
)

	)

194 
	#__HAL_WWDG_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`SET_BIT
((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFR
, (__INTERRUPT__))

	)

204 
	#__HAL_WWDG_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__HAL_WWDG_GET_FLAG
((__HANDLE__),(__INTERRUPT__))

	)

213 
	#__HAL_WWDG_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
√ã
	`__HAL_WWDG_CLEAR_FLAG
((__HANDLE__), (__INTERRUPT__))

	)

223 
	#__HAL_WWDG_GET_FLAG
(
__HANDLE__
, 
__FLAG__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 & (__FLAG__)√ã=Ô£ø(__FLAG__))

	)

233 
	#__HAL_WWDG_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
√ã((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
SR
 = ~(__FLAG__))

	)

242 
	#__HAL_WWDG_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
√ã(((__HANDLE__)->
In¬∞‚Ñ¢Àö
->
CFR
\

243 & (
__INTERRUPT__
)√ã=Ô£ø(__INTERRUPT__))

	)

259 
HAL_S√®tusTy‚â•Def
 
HAL_WWDG_In√¥
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

260 
HAL_WWDG_M‚Ä¢In√¥
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

262 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

263 
HAL_S√®tusTy‚â•Def
 
HAL_WWDG_Regi¬∞√ÆC√Ülback
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
, 
HAL_WWDG_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

264 
pWWDG_C√ÜlbackTy‚â•Def
 
pC√Ülback
);

265 
HAL_S√®tusTy‚â•Def
 
HAL_WWDG_UnRegi¬∞√ÆC√Ülback
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
, 
HAL_WWDG_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
);

276 
HAL_S√®tusTy‚â•Def
 
HAL_WWDG_Re‚Ä∞esh
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

277 
HAL_WWDG_IRQH‚Ñ¢d√Är
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

278 
HAL_WWDG_E¬®lyWakeupC√Ülback
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
);

295 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_adc.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_ADC_H


22 
	#__STM32F1xx_LL_ADC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
ADC1
√ã|| def√∂ed (
ADC2
√ã|| def√∂ed (
ADC3
)

56 
	#ADC_SQR1_REGOFFSET
 0x00000000U

	)

57 
	#ADC_SQR2_REGOFFSET
 0x00000100U

	)

58 
	#ADC_SQR3_REGOFFSET
 0x00000200U

	)

59 
	#ADC_SQR4_REGOFFSET
 0x00000300U

	)

61 
	#ADC_REG_SQRX_REGOFFSET_MASK
 (
ADC_SQR1_REGOFFSET
 | 
ADC_SQR2_REGOFFSET
 | 
ADC_SQR3_REGOFFSET
 | 
ADC_SQR4_REGOFFSET
)

	)

62 
	#ADC_REG_RANK_ID_SQRX_MASK
 (
ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0
)

	)

66 
	#ADC_REG_RANK_1_SQRX_BITOFFSET_POS
 ( 0U√ã

	)

67 
	#ADC_REG_RANK_2_SQRX_BITOFFSET_POS
 ( 5U√ã

	)

68 
	#ADC_REG_RANK_3_SQRX_BITOFFSET_POS
 (10U√ã

	)

69 
	#ADC_REG_RANK_4_SQRX_BITOFFSET_POS
 (15U√ã

	)

70 
	#ADC_REG_RANK_5_SQRX_BITOFFSET_POS
 (20U√ã

	)

71 
	#ADC_REG_RANK_6_SQRX_BITOFFSET_POS
 (25U√ã

	)

72 
	#ADC_REG_RANK_7_SQRX_BITOFFSET_POS
 ( 0U√ã

	)

73 
	#ADC_REG_RANK_8_SQRX_BITOFFSET_POS
 ( 5U√ã

	)

74 
	#ADC_REG_RANK_9_SQRX_BITOFFSET_POS
 (10U√ã

	)

75 
	#ADC_REG_RANK_10_SQRX_BITOFFSET_POS
 (15U√ã

	)

76 
	#ADC_REG_RANK_11_SQRX_BITOFFSET_POS
 (20U√ã

	)

77 
	#ADC_REG_RANK_12_SQRX_BITOFFSET_POS
 (25U√ã

	)

78 
	#ADC_REG_RANK_13_SQRX_BITOFFSET_POS
 ( 0U√ã

	)

79 
	#ADC_REG_RANK_14_SQRX_BITOFFSET_POS
 ( 5U√ã

	)

80 
	#ADC_REG_RANK_15_SQRX_BITOFFSET_POS
 (10U√ã

	)

81 
	#ADC_REG_RANK_16_SQRX_BITOFFSET_POS
 (15U√ã

	)

91 
	#ADC_JDR1_REGOFFSET
 0x00000000U

	)

92 
	#ADC_JDR2_REGOFFSET
 0x00000100U

	)

93 
	#ADC_JDR3_REGOFFSET
 0x00000200U

	)

94 
	#ADC_JDR4_REGOFFSET
 0x00000300U

	)

98 
	#ADC_JOFR1_REGOFFSET
 0x00000000U

	)

99 
	#ADC_JOFR2_REGOFFSET
 0x00001000U

	)

100 
	#ADC_JOFR3_REGOFFSET
 0x00002000U

	)

101 
	#ADC_JOFR4_REGOFFSET
 0x00003000U

	)

103 
	#ADC_INJ_JDRX_REGOFFSET_MASK
 (
ADC_JDR1_REGOFFSET
 | 
ADC_JDR2_REGOFFSET
 | 
ADC_JDR3_REGOFFSET
 | 
ADC_JDR4_REGOFFSET
)

	)

104 
	#ADC_INJ_JOFRX_REGOFFSET_MASK
 (
ADC_JOFR1_REGOFFSET
 | 
ADC_JOFR2_REGOFFSET
 | 
ADC_JOFR3_REGOFFSET
 | 
ADC_JOFR4_REGOFFSET
)

	)

105 
	#ADC_INJ_RANK_ID_JSQR_MASK
 (
ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0
)

	)

114 
	#ADC_CHANNEL_ID_NUMBER_MASK
 (
ADC_CR1_AWDCH
)

	)

115 
	#ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
 ( 0U)

	)

116 
	#ADC_CHANNEL_ID_MASK
 (
ADC_CHANNEL_ID_NUMBER_MASK
 | 
ADC_CHANNEL_ID_INTERNAL_CH_MASK
)

	)

118 
	#ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0
 0x0000001FU

	)

121 
	#ADC_CHANNEL_ID_INTERNAL_CH
 0x80000000U

	)

122 
	#ADC_CHANNEL_ID_INTERNAL_CH_2
 0x40000000U

	)

123 
	#ADC_CHANNEL_ID_INTERNAL_CH_MASK
 (
ADC_CHANNEL_ID_INTERNAL_CH
 | 
ADC_CHANNEL_ID_INTERNAL_CH_2
)

	)

127 
	#ADC_SMPR1_REGOFFSET
 0x00000000U

	)

128 
	#ADC_SMPR2_REGOFFSET
 0x02000000U

	)

129 
	#ADC_CHANNEL_SMPRX_REGOFFSET_MASK
 (
ADC_SMPR1_REGOFFSET
 | 
ADC_SMPR2_REGOFFSET
)

	)

131 
	#ADC_CHANNEL_SMPx_BITOFFSET_MASK
 0x01F00000U

	)

132 
	#ADC_CHANNEL_SMPx_BITOFFSET_POS
 (20U√ã

	)

136 
	#ADC_CHANNEL_0_NUMBER
 0x00000000U

	)

137 
	#ADC_CHANNEL_1_NUMBER
 ( 
ADC_CR1_AWDCH_0
)

	)

138 
	#ADC_CHANNEL_2_NUMBER
 ( 
ADC_CR1_AWDCH_1
 )

	)

139 
	#ADC_CHANNEL_3_NUMBER
 ( 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
)

	)

140 
	#ADC_CHANNEL_4_NUMBER
 ( 
ADC_CR1_AWDCH_2
 )

	)

141 
	#ADC_CHANNEL_5_NUMBER
 ( 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_0
)

	)

142 
	#ADC_CHANNEL_6_NUMBER
 ( 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
 )

	)

143 
	#ADC_CHANNEL_7_NUMBER
 ( 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
)

	)

144 
	#ADC_CHANNEL_8_NUMBER
 ( 
ADC_CR1_AWDCH_3
 )

	)

145 
	#ADC_CHANNEL_9_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_0
)

	)

146 
	#ADC_CHANNEL_10_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_1
 )

	)

147 
	#ADC_CHANNEL_11_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
)

	)

148 
	#ADC_CHANNEL_12_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 )

	)

149 
	#ADC_CHANNEL_13_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_0
)

	)

150 
	#ADC_CHANNEL_14_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
 )

	)

151 
	#ADC_CHANNEL_15_NUMBER
 ( 
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
)

	)

152 
	#ADC_CHANNEL_16_NUMBER
 (
ADC_CR1_AWDCH_4
 )

	)

153 
	#ADC_CHANNEL_17_NUMBER
 (
ADC_CR1_AWDCH_4
 | 
ADC_CR1_AWDCH_0
)

	)

157 
	#ADC_CHANNEL_0_SMP
 (
ADC_SMPR2_REGOFFSET
 | (‚Äì0U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

158 
	#ADC_CHANNEL_1_SMP
 (
ADC_SMPR2_REGOFFSET
 | (‚Äì3U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

159 
	#ADC_CHANNEL_2_SMP
 (
ADC_SMPR2_REGOFFSET
 | (‚Äì6U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

160 
	#ADC_CHANNEL_3_SMP
 (
ADC_SMPR2_REGOFFSET
 | (‚Äì9U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

161 
	#ADC_CHANNEL_4_SMP
 (
ADC_SMPR2_REGOFFSET
 | ((12U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

162 
	#ADC_CHANNEL_5_SMP
 (
ADC_SMPR2_REGOFFSET
 | ((15U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

163 
	#ADC_CHANNEL_6_SMP
 (
ADC_SMPR2_REGOFFSET
 | ((18U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

164 
	#ADC_CHANNEL_7_SMP
 (
ADC_SMPR2_REGOFFSET
 | ((21U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

165 
	#ADC_CHANNEL_8_SMP
 (
ADC_SMPR2_REGOFFSET
 | ((24U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

166 
	#ADC_CHANNEL_9_SMP
 (
ADC_SMPR2_REGOFFSET
 | ((27U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

167 
	#ADC_CHANNEL_10_SMP
 (
ADC_SMPR1_REGOFFSET
 | (‚Äì0U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

168 
	#ADC_CHANNEL_11_SMP
 (
ADC_SMPR1_REGOFFSET
 | (‚Äì3U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

169 
	#ADC_CHANNEL_12_SMP
 (
ADC_SMPR1_REGOFFSET
 | (‚Äì6U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

170 
	#ADC_CHANNEL_13_SMP
 (
ADC_SMPR1_REGOFFSET
 | (‚Äì9U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

171 
	#ADC_CHANNEL_14_SMP
 (
ADC_SMPR1_REGOFFSET
 | ((12U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

172 
	#ADC_CHANNEL_15_SMP
 (
ADC_SMPR1_REGOFFSET
 | ((15U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

173 
	#ADC_CHANNEL_16_SMP
 (
ADC_SMPR1_REGOFFSET
 | ((18U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

174 
	#ADC_CHANNEL_17_SMP
 (
ADC_SMPR1_REGOFFSET
 | ((21U√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)√ã

	)

184 
	#ADC_AWD_CR1_REGOFFSET
 0x00000000U

	)

186 
	#ADC_AWD_CRX_REGOFFSET_MASK
 (
ADC_AWD_CR1_REGOFFSET
)

	)

188 
	#ADC_AWD_CR1_CHANNEL_MASK
 (
ADC_CR1_AWDCH
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
)

	)

189 
	#ADC_AWD_CR_ALL_CHANNEL_MASK
 (
ADC_AWD_CR1_CHANNEL_MASK
)

	)

192 
	#ADC_AWD_TR1_HIGH_REGOFFSET
 0x00000000U

	)

193 
	#ADC_AWD_TR1_LOW_REGOFFSET
 0x00000001U

	)

194 
	#ADC_AWD_TRX_REGOFFSET_MASK
 (
ADC_AWD_TR1_HIGH_REGOFFSET
 | 
ADC_AWD_TR1_LOW_REGOFFSET
)

	)

197 
	#ADC_CR1_DUALMOD_BITOFFSET_POS
 (16U√ã

	)

217 
	#__ADC_MASK_SHIFT
(
__BITS__
, 
__MASK__
) \

218 (((
__BITS__
√ã& (
__MASK__
)√ã>> 
	`POSITION_VAL
((__MASK__)))

	)

228 
	#__ADC_PTR_REG_OFFSET
(
__REG__
, 
__REG_OFFFSET__
) \

229 ((
__IO
 
u√∂t32_t
 *)((u√∂t32_t√ã((u√∂t32_t)(&(
__REG__
)√ã+ ((
__REG_OFFFSET__
√ã<< 2U))))

	)

237 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

254 
u√∂t32_t
 
Mu‚Ä¶imode
;

258 } 
	tLL_ADC_Comm‚ÅÑIn√¥Ty‚â•Def
;

281 
u√∂t32_t
 
D¬©aAlignm√≠t
;

286 
u√∂t32_t
 
Sequ√≠ÀörsSÀánMode
;

291 } 
	tLL_ADC_In√¥Ty‚â•Def
;

314 
u√∂t32_t
 
Trigg√ÆSourÀö
;

321 
u√∂t32_t
 
Sequ√≠ÀörL√≠gth
;

327 
u√∂t32_t
 
Sequ√≠ÀörDisc‚ÅÑt
;

334 
u√∂t32_t
 
C‚ÅÑt√∂uousMode
;

340 
u√∂t32_t
 
DMAT√∏ns‚Äûr
;

345 } 
	tLL_ADC_REG_In√¥Ty‚â•Def
;

368 
u√∂t32_t
 
Trigg√ÆSourÀö
;

375 
u√∂t32_t
 
Sequ√≠ÀörL√≠gth
;

381 
u√∂t32_t
 
Sequ√≠ÀörDisc‚ÅÑt
;

388 
u√∂t32_t
 
TrigAuto
;

394 } 
	tLL_ADC_INJ_In√¥Ty‚â•Def
;

410 
	#LL_ADC_FLAG_STRT
 
ADC_SR_STRT


	)

411 
	#LL_ADC_FLAG_EOS
 
ADC_SR_EOC


	)

412 
	#LL_ADC_FLAG_JSTRT
 
ADC_SR_JSTRT


	)

413 
	#LL_ADC_FLAG_JEOS
 
ADC_SR_JEOC


	)

414 
	#LL_ADC_FLAG_AWD1
 
ADC_SR_AWD


	)

415 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

416 
	#LL_ADC_FLAG_EOS_MST
 
ADC_SR_EOC


	)

417 
	#LL_ADC_FLAG_EOS_SLV
 
ADC_SR_EOC


	)

418 
	#LL_ADC_FLAG_JEOS_MST
 
ADC_SR_JEOC


	)

419 
	#LL_ADC_FLAG_JEOS_SLV
 
ADC_SR_JEOC


	)

420 
	#LL_ADC_FLAG_AWD1_MST
 
ADC_SR_AWD


	)

421 
	#LL_ADC_FLAG_AWD1_SLV
 
ADC_SR_AWD


	)

431 
	#LL_ADC_IT_EOS
 
ADC_CR1_EOCIE


	)

432 
	#LL_ADC_IT_JEOS
 
ADC_CR1_JEOCIE


	)

433 
	#LL_ADC_IT_AWD1
 
ADC_CR1_AWDIE


	)

444 
	#LL_ADC_DMA_REG_REGULAR_DATA
 0x00000000U

	)

445 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

446 
	#LL_ADC_DMA_REG_REGULAR_DATA_MULTI
 0x00000001U

	)

460 
	#LL_ADC_PATH_INTERNAL_NONE
 0x00000000U

	)

461 
	#LL_ADC_PATH_INTERNAL_VREFINT
 (
ADC_CR2_TSVREFE
√ã

	)

462 
	#LL_ADC_PATH_INTERNAL_TEMPSENSOR
 (
ADC_CR2_TSVREFE
√ã

	)

470 
	#LL_ADC_RESOLUTION_12B
 0x00000000U

	)

478 
	#LL_ADC_DATA_ALIGN_RIGHT
 0x00000000U

	)

479 
	#LL_ADC_DATA_ALIGN_LEFT
 (
ADC_CR2_ALIGN
√ã

	)

487 
	#LL_ADC_SEQ_SCAN_DISABLE
 0x00000000U

	)

488 
	#LL_ADC_SEQ_SCAN_ENABLE
 (
ADC_CR1_SCAN
√ã

	)

496 
	#LL_ADC_GROUP_REGULAR
 0x00000001U

	)

497 
	#LL_ADC_GROUP_INJECTED
 0x00000002U

	)

498 
	#LL_ADC_GROUP_REGULAR_INJECTED
 0x00000003U

	)

506 
	#LL_ADC_CHANNEL_0
 (
ADC_CHANNEL_0_NUMBER
 | 
ADC_CHANNEL_0_SMP
√ã

	)

507 
	#LL_ADC_CHANNEL_1
 (
ADC_CHANNEL_1_NUMBER
 | 
ADC_CHANNEL_1_SMP
√ã

	)

508 
	#LL_ADC_CHANNEL_2
 (
ADC_CHANNEL_2_NUMBER
 | 
ADC_CHANNEL_2_SMP
√ã

	)

509 
	#LL_ADC_CHANNEL_3
 (
ADC_CHANNEL_3_NUMBER
 | 
ADC_CHANNEL_3_SMP
√ã

	)

510 
	#LL_ADC_CHANNEL_4
 (
ADC_CHANNEL_4_NUMBER
 | 
ADC_CHANNEL_4_SMP
√ã

	)

511 
	#LL_ADC_CHANNEL_5
 (
ADC_CHANNEL_5_NUMBER
 | 
ADC_CHANNEL_5_SMP
√ã

	)

512 
	#LL_ADC_CHANNEL_6
 (
ADC_CHANNEL_6_NUMBER
 | 
ADC_CHANNEL_6_SMP
√ã

	)

513 
	#LL_ADC_CHANNEL_7
 (
ADC_CHANNEL_7_NUMBER
 | 
ADC_CHANNEL_7_SMP
√ã

	)

514 
	#LL_ADC_CHANNEL_8
 (
ADC_CHANNEL_8_NUMBER
 | 
ADC_CHANNEL_8_SMP
√ã

	)

515 
	#LL_ADC_CHANNEL_9
 (
ADC_CHANNEL_9_NUMBER
 | 
ADC_CHANNEL_9_SMP
√ã

	)

516 
	#LL_ADC_CHANNEL_10
 (
ADC_CHANNEL_10_NUMBER
 | 
ADC_CHANNEL_10_SMP
√ã

	)

517 
	#LL_ADC_CHANNEL_11
 (
ADC_CHANNEL_11_NUMBER
 | 
ADC_CHANNEL_11_SMP
√ã

	)

518 
	#LL_ADC_CHANNEL_12
 (
ADC_CHANNEL_12_NUMBER
 | 
ADC_CHANNEL_12_SMP
√ã

	)

519 
	#LL_ADC_CHANNEL_13
 (
ADC_CHANNEL_13_NUMBER
 | 
ADC_CHANNEL_13_SMP
√ã

	)

520 
	#LL_ADC_CHANNEL_14
 (
ADC_CHANNEL_14_NUMBER
 | 
ADC_CHANNEL_14_SMP
√ã

	)

521 
	#LL_ADC_CHANNEL_15
 (
ADC_CHANNEL_15_NUMBER
 | 
ADC_CHANNEL_15_SMP
√ã

	)

522 
	#LL_ADC_CHANNEL_16
 (
ADC_CHANNEL_16_NUMBER
 | 
ADC_CHANNEL_16_SMP
√ã

	)

523 
	#LL_ADC_CHANNEL_17
 (
ADC_CHANNEL_17_NUMBER
 | 
ADC_CHANNEL_17_SMP
√ã

	)

524 
	#LL_ADC_CHANNEL_VREFINT
 (
LL_ADC_CHANNEL_17
 | 
ADC_CHANNEL_ID_INTERNAL_CH
√ã

	)

525 
	#LL_ADC_CHANNEL_TEMPSENSOR
 (
LL_ADC_CHANNEL_16
 | 
ADC_CHANNEL_ID_INTERNAL_CH
√ã

	)

534 
	#LL_ADC_REG_TRIG_SOFTWARE
 (
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
√ã

	)

535 
	#LL_ADC_REG_TRIG_EXT_TIM1_CH3
 (
ADC_CR2_EXTSEL_1
√ã

	)

537 
	#LL_ADC_REG_TRIG_EXT_TIM1_CH1
 0x00000000U

	)

538 
	#LL_ADC_REG_TRIG_EXT_TIM1_CH2
 (
ADC_CR2_EXTSEL_0
√ã

	)

539 
	#LL_ADC_REG_TRIG_EXT_TIM2_CH2
 (
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
√ã

	)

540 
	#LL_ADC_REG_TRIG_EXT_TIM3_TRGO
 (
ADC_CR2_EXTSEL_2
√ã

	)

541 
	#LL_ADC_REG_TRIG_EXT_TIM4_CH4
 (
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_0
√ã

	)

542 
	#LL_ADC_REG_TRIG_EXT_EXTI_LINE11
 (
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
√ã

	)

543 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

549 
	#LL_ADC_REG_TRIG_EXT_TIM8_TRGO
 (
LL_ADC_REG_TRIG_EXT_EXTI_LINE11
√ã

	)

551 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

553 
	#LL_ADC_REG_TRIG_EXT_TIM3_CH1
 (
LL_ADC_REG_TRIG_EXT_TIM1_CH1
√ã

	)

554 
	#LL_ADC_REG_TRIG_EXT_TIM2_CH3
 (
LL_ADC_REG_TRIG_EXT_TIM1_CH2
√ã

	)

555 
	#LL_ADC_REG_TRIG_EXT_TIM8_CH1
 (
LL_ADC_REG_TRIG_EXT_TIM2_CH2
√ã

	)

556 
	#LL_ADC_REG_TRIG_EXT_TIM8_TRGO_ADC3
 (
LL_ADC_REG_TRIG_EXT_TIM3_TRGO
√ã

	)

557 
	#LL_ADC_REG_TRIG_EXT_TIM5_CH1
 (
LL_ADC_REG_TRIG_EXT_TIM4_CH4
√ã

	)

558 
	#LL_ADC_REG_TRIG_EXT_TIM5_CH3
 (
LL_ADC_REG_TRIG_EXT_EXTI_LINE11
√ã

	)

567 
	#LL_ADC_REG_TRIG_EXT_RISING
 
ADC_CR2_EXTTRIG


	)

575 
	#LL_ADC_REG_CONV_SINGLE
 0x00000000U

	)

576 
	#LL_ADC_REG_CONV_CONTINUOUS
 (
ADC_CR2_CONT
√ã

	)

584 
	#LL_ADC_REG_DMA_TRANSFER_NONE
 0x00000000U

	)

585 
	#LL_ADC_REG_DMA_TRANSFER_UNLIMITED
 (
ADC_CR2_DMA
√ã

	)

593 
	#LL_ADC_REG_SEQ_SCAN_DISABLE
 0x00000000U

	)

594 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
 ( 
ADC_SQR1_L_0
√ã

	)

595 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
 ( 
ADC_SQR1_L_1
 )

	)

596 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
 ( 
ADC_SQR1_L_1
 | 
ADC_SQR1_L_0
√ã

	)

597 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
 ( 
ADC_SQR1_L_2
 )

	)

598 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
 ( 
ADC_SQR1_L_2
 | 
ADC_SQR1_L_0
√ã

	)

599 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
 ( 
ADC_SQR1_L_2
 | 
ADC_SQR1_L_1
 )

	)

600 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
 ( 
ADC_SQR1_L_2
 | 
ADC_SQR1_L_1
 | 
ADC_SQR1_L_0
√ã

	)

601 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
 (
ADC_SQR1_L_3
 )

	)

602 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_0
√ã

	)

603 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_1
 )

	)

604 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_1
 | 
ADC_SQR1_L_0
√ã

	)

605 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_2
 )

	)

606 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_2
 | 
ADC_SQR1_L_0
√ã

	)

607 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_2
 | 
ADC_SQR1_L_1
 )

	)

608 
	#LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
 (
ADC_SQR1_L_3
 | 
ADC_SQR1_L_2
 | 
ADC_SQR1_L_1
 | 
ADC_SQR1_L_0
√ã

	)

616 
	#LL_ADC_REG_SEQ_DISCONT_DISABLE
 0x00000000U

	)

617 
	#LL_ADC_REG_SEQ_DISCONT_1RANK
 ( 
ADC_CR1_DISCEN
√ã

	)

618 
	#LL_ADC_REG_SEQ_DISCONT_2RANKS
 ( 
ADC_CR1_DISCNUM_0
 | 
ADC_CR1_DISCEN
√ã

	)

619 
	#LL_ADC_REG_SEQ_DISCONT_3RANKS
 ( 
ADC_CR1_DISCNUM_1
 | 
ADC_CR1_DISCEN
√ã

	)

620 
	#LL_ADC_REG_SEQ_DISCONT_4RANKS
 ( 
ADC_CR1_DISCNUM_1
 | 
ADC_CR1_DISCNUM_0
 | 
ADC_CR1_DISCEN
√ã

	)

621 
	#LL_ADC_REG_SEQ_DISCONT_5RANKS
 (
ADC_CR1_DISCNUM_2
 | 
ADC_CR1_DISCEN
√ã

	)

622 
	#LL_ADC_REG_SEQ_DISCONT_6RANKS
 (
ADC_CR1_DISCNUM_2
 | 
ADC_CR1_DISCNUM_0
 | 
ADC_CR1_DISCEN
√ã

	)

623 
	#LL_ADC_REG_SEQ_DISCONT_7RANKS
 (
ADC_CR1_DISCNUM_2
 | 
ADC_CR1_DISCNUM_1
 | 
ADC_CR1_DISCEN
√ã

	)

624 
	#LL_ADC_REG_SEQ_DISCONT_8RANKS
 (
ADC_CR1_DISCNUM_2
 | 
ADC_CR1_DISCNUM_1
 | 
ADC_CR1_DISCNUM_0
 | 
ADC_CR1_DISCEN
√ã

	)

632 
	#LL_ADC_REG_RANK_1
 (
ADC_SQR3_REGOFFSET
 | 
ADC_REG_RANK_1_SQRX_BITOFFSET_POS
√ã

	)

633 
	#LL_ADC_REG_RANK_2
 (
ADC_SQR3_REGOFFSET
 | 
ADC_REG_RANK_2_SQRX_BITOFFSET_POS
√ã

	)

634 
	#LL_ADC_REG_RANK_3
 (
ADC_SQR3_REGOFFSET
 | 
ADC_REG_RANK_3_SQRX_BITOFFSET_POS
√ã

	)

635 
	#LL_ADC_REG_RANK_4
 (
ADC_SQR3_REGOFFSET
 | 
ADC_REG_RANK_4_SQRX_BITOFFSET_POS
√ã

	)

636 
	#LL_ADC_REG_RANK_5
 (
ADC_SQR3_REGOFFSET
 | 
ADC_REG_RANK_5_SQRX_BITOFFSET_POS
√ã

	)

637 
	#LL_ADC_REG_RANK_6
 (
ADC_SQR3_REGOFFSET
 | 
ADC_REG_RANK_6_SQRX_BITOFFSET_POS
√ã

	)

638 
	#LL_ADC_REG_RANK_7
 (
ADC_SQR2_REGOFFSET
 | 
ADC_REG_RANK_7_SQRX_BITOFFSET_POS
√ã

	)

639 
	#LL_ADC_REG_RANK_8
 (
ADC_SQR2_REGOFFSET
 | 
ADC_REG_RANK_8_SQRX_BITOFFSET_POS
√ã

	)

640 
	#LL_ADC_REG_RANK_9
 (
ADC_SQR2_REGOFFSET
 | 
ADC_REG_RANK_9_SQRX_BITOFFSET_POS
√ã

	)

641 
	#LL_ADC_REG_RANK_10
 (
ADC_SQR2_REGOFFSET
 | 
ADC_REG_RANK_10_SQRX_BITOFFSET_POS
√ã

	)

642 
	#LL_ADC_REG_RANK_11
 (
ADC_SQR2_REGOFFSET
 | 
ADC_REG_RANK_11_SQRX_BITOFFSET_POS
√ã

	)

643 
	#LL_ADC_REG_RANK_12
 (
ADC_SQR2_REGOFFSET
 | 
ADC_REG_RANK_12_SQRX_BITOFFSET_POS
√ã

	)

644 
	#LL_ADC_REG_RANK_13
 (
ADC_SQR1_REGOFFSET
 | 
ADC_REG_RANK_13_SQRX_BITOFFSET_POS
√ã

	)

645 
	#LL_ADC_REG_RANK_14
 (
ADC_SQR1_REGOFFSET
 | 
ADC_REG_RANK_14_SQRX_BITOFFSET_POS
√ã

	)

646 
	#LL_ADC_REG_RANK_15
 (
ADC_SQR1_REGOFFSET
 | 
ADC_REG_RANK_15_SQRX_BITOFFSET_POS
√ã

	)

647 
	#LL_ADC_REG_RANK_16
 (
ADC_SQR1_REGOFFSET
 | 
ADC_REG_RANK_16_SQRX_BITOFFSET_POS
√ã

	)

656 
	#LL_ADC_INJ_TRIG_SOFTWARE
 (
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
√ã

	)

657 
	#LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
 0x00000000U

	)

658 
	#LL_ADC_INJ_TRIG_EXT_TIM1_CH4
 (
ADC_CR2_JEXTSEL_0
√ã

	)

660 
	#LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
 (
ADC_CR2_JEXTSEL_1
√ã

	)

661 
	#LL_ADC_INJ_TRIG_EXT_TIM2_CH1
 (
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
√ã

	)

662 
	#LL_ADC_INJ_TRIG_EXT_TIM3_CH4
 (
ADC_CR2_JEXTSEL_2
√ã

	)

663 
	#LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
 (
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_0
√ã

	)

664 
	#LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
 (
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
√ã

	)

665 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

671 
	#LL_ADC_INJ_TRIG_EXT_TIM8_CH4
 (
LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
√ã

	)

673 #i‚Ä°
def√∂ed
 (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

675 
	#LL_ADC_INJ_TRIG_EXT_TIM4_CH3
 (
LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
√ã

	)

676 
	#LL_ADC_INJ_TRIG_EXT_TIM8_CH2
 (
LL_ADC_INJ_TRIG_EXT_TIM2_CH1
√ã

	)

677 
	#LL_ADC_INJ_TRIG_EXT_TIM8_CH4_ADC3
 (
LL_ADC_INJ_TRIG_EXT_TIM3_CH4
√ã

	)

678 
	#LL_ADC_INJ_TRIG_EXT_TIM5_TRGO
 (
LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
√ã

	)

679 
	#LL_ADC_INJ_TRIG_EXT_TIM5_CH4
 (
LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
√ã

	)

688 
	#LL_ADC_INJ_TRIG_EXT_RISING
 
ADC_CR2_JEXTTRIG


	)

696 
	#LL_ADC_INJ_TRIG_INDEPENDENT
 0x00000000U

	)

697 
	#LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
 (
ADC_CR1_JAUTO
√ã

	)

706 
	#LL_ADC_INJ_SEQ_SCAN_DISABLE
 0x00000000U

	)

707 
	#LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
 ( 
ADC_JSQR_JL_0
√ã

	)

708 
	#LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
 (
ADC_JSQR_JL_1
 )

	)

709 
	#LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
 (
ADC_JSQR_JL_1
 | 
ADC_JSQR_JL_0
√ã

	)

717 
	#LL_ADC_INJ_SEQ_DISCONT_DISABLE
 0x00000000U

	)

718 
	#LL_ADC_INJ_SEQ_DISCONT_1RANK
 (
ADC_CR1_JDISCEN
√ã

	)

726 
	#LL_ADC_INJ_RANK_1
 (
ADC_JDR1_REGOFFSET
 | 
ADC_JOFR1_REGOFFSET
 | 0x00000001U√ã

	)

727 
	#LL_ADC_INJ_RANK_2
 (
ADC_JDR2_REGOFFSET
 | 
ADC_JOFR2_REGOFFSET
 | 0x00000002U√ã

	)

728 
	#LL_ADC_INJ_RANK_3
 (
ADC_JDR3_REGOFFSET
 | 
ADC_JOFR3_REGOFFSET
 | 0x00000003U√ã

	)

729 
	#LL_ADC_INJ_RANK_4
 (
ADC_JDR4_REGOFFSET
 | 
ADC_JOFR4_REGOFFSET
 | 0x00000004U√ã

	)

737 
	#LL_ADC_SAMPLINGTIME_1CYCLE_5
 0x00000000U

	)

738 
	#LL_ADC_SAMPLINGTIME_7CYCLES_5
 (
ADC_SMPR2_SMP0_0
√ã

	)

739 
	#LL_ADC_SAMPLINGTIME_13CYCLES_5
 (
ADC_SMPR2_SMP0_1
√ã

	)

740 
	#LL_ADC_SAMPLINGTIME_28CYCLES_5
 (
ADC_SMPR2_SMP0_1
 | 
ADC_SMPR2_SMP0_0
√ã

	)

741 
	#LL_ADC_SAMPLINGTIME_41CYCLES_5
 (
ADC_SMPR2_SMP0_2
√ã

	)

742 
	#LL_ADC_SAMPLINGTIME_55CYCLES_5
 (
ADC_SMPR2_SMP0_2
 | 
ADC_SMPR2_SMP0_0
√ã

	)

743 
	#LL_ADC_SAMPLINGTIME_71CYCLES_5
 (
ADC_SMPR2_SMP0_2
 | 
ADC_SMPR2_SMP0_1
√ã

	)

744 
	#LL_ADC_SAMPLINGTIME_239CYCLES_5
 (
ADC_SMPR2_SMP0_2
 | 
ADC_SMPR2_SMP0_1
 | 
ADC_SMPR2_SMP0_0
√ã

	)

752 
	#LL_ADC_AWD1
 (
ADC_AWD_CR1_CHANNEL_MASK
 | 
ADC_AWD_CR1_REGOFFSET
√ã

	)

760 
	#LL_ADC_AWD_DISABLE
 0x00000000U

	)

761 
	#LL_ADC_AWD_ALL_CHANNELS_REG
 ( 
ADC_CR1_AWDEN
 )

	)

762 
	#LL_ADC_AWD_ALL_CHANNELS_INJ
 ( 
ADC_CR1_JAWDEN
 )

	)

763 
	#LL_ADC_AWD_ALL_CHANNELS_REG_INJ
 ( 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 )

	)

764 
	#LL_ADC_AWD_CHANNEL_0_REG
 ((
LL_ADC_CHANNEL_0
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

765 
	#LL_ADC_AWD_CHANNEL_0_INJ
 ((
LL_ADC_CHANNEL_0
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

766 
	#LL_ADC_AWD_CHANNEL_0_REG_INJ
 ((
LL_ADC_CHANNEL_0
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

767 
	#LL_ADC_AWD_CHANNEL_1_REG
 ((
LL_ADC_CHANNEL_1
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

768 
	#LL_ADC_AWD_CHANNEL_1_INJ
 ((
LL_ADC_CHANNEL_1
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

769 
	#LL_ADC_AWD_CHANNEL_1_REG_INJ
 ((
LL_ADC_CHANNEL_1
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

770 
	#LL_ADC_AWD_CHANNEL_2_REG
 ((
LL_ADC_CHANNEL_2
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

771 
	#LL_ADC_AWD_CHANNEL_2_INJ
 ((
LL_ADC_CHANNEL_2
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

772 
	#LL_ADC_AWD_CHANNEL_2_REG_INJ
 ((
LL_ADC_CHANNEL_2
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

773 
	#LL_ADC_AWD_CHANNEL_3_REG
 ((
LL_ADC_CHANNEL_3
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

774 
	#LL_ADC_AWD_CHANNEL_3_INJ
 ((
LL_ADC_CHANNEL_3
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

775 
	#LL_ADC_AWD_CHANNEL_3_REG_INJ
 ((
LL_ADC_CHANNEL_3
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

776 
	#LL_ADC_AWD_CHANNEL_4_REG
 ((
LL_ADC_CHANNEL_4
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

777 
	#LL_ADC_AWD_CHANNEL_4_INJ
 ((
LL_ADC_CHANNEL_4
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

778 
	#LL_ADC_AWD_CHANNEL_4_REG_INJ
 ((
LL_ADC_CHANNEL_4
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

779 
	#LL_ADC_AWD_CHANNEL_5_REG
 ((
LL_ADC_CHANNEL_5
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

780 
	#LL_ADC_AWD_CHANNEL_5_INJ
 ((
LL_ADC_CHANNEL_5
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

781 
	#LL_ADC_AWD_CHANNEL_5_REG_INJ
 ((
LL_ADC_CHANNEL_5
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

782 
	#LL_ADC_AWD_CHANNEL_6_REG
 ((
LL_ADC_CHANNEL_6
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

783 
	#LL_ADC_AWD_CHANNEL_6_INJ
 ((
LL_ADC_CHANNEL_6
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

784 
	#LL_ADC_AWD_CHANNEL_6_REG_INJ
 ((
LL_ADC_CHANNEL_6
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

785 
	#LL_ADC_AWD_CHANNEL_7_REG
 ((
LL_ADC_CHANNEL_7
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

786 
	#LL_ADC_AWD_CHANNEL_7_INJ
 ((
LL_ADC_CHANNEL_7
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

787 
	#LL_ADC_AWD_CHANNEL_7_REG_INJ
 ((
LL_ADC_CHANNEL_7
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

788 
	#LL_ADC_AWD_CHANNEL_8_REG
 ((
LL_ADC_CHANNEL_8
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

789 
	#LL_ADC_AWD_CHANNEL_8_INJ
 ((
LL_ADC_CHANNEL_8
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

790 
	#LL_ADC_AWD_CHANNEL_8_REG_INJ
 ((
LL_ADC_CHANNEL_8
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

791 
	#LL_ADC_AWD_CHANNEL_9_REG
 ((
LL_ADC_CHANNEL_9
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

792 
	#LL_ADC_AWD_CHANNEL_9_INJ
 ((
LL_ADC_CHANNEL_9
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

793 
	#LL_ADC_AWD_CHANNEL_9_REG_INJ
 ((
LL_ADC_CHANNEL_9
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

794 
	#LL_ADC_AWD_CHANNEL_10_REG
 ((
LL_ADC_CHANNEL_10
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

795 
	#LL_ADC_AWD_CHANNEL_10_INJ
 ((
LL_ADC_CHANNEL_10
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

796 
	#LL_ADC_AWD_CHANNEL_10_REG_INJ
 ((
LL_ADC_CHANNEL_10
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

797 
	#LL_ADC_AWD_CHANNEL_11_REG
 ((
LL_ADC_CHANNEL_11
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

798 
	#LL_ADC_AWD_CHANNEL_11_INJ
 ((
LL_ADC_CHANNEL_11
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

799 
	#LL_ADC_AWD_CHANNEL_11_REG_INJ
 ((
LL_ADC_CHANNEL_11
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

800 
	#LL_ADC_AWD_CHANNEL_12_REG
 ((
LL_ADC_CHANNEL_12
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

801 
	#LL_ADC_AWD_CHANNEL_12_INJ
 ((
LL_ADC_CHANNEL_12
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

802 
	#LL_ADC_AWD_CHANNEL_12_REG_INJ
 ((
LL_ADC_CHANNEL_12
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

803 
	#LL_ADC_AWD_CHANNEL_13_REG
 ((
LL_ADC_CHANNEL_13
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

804 
	#LL_ADC_AWD_CHANNEL_13_INJ
 ((
LL_ADC_CHANNEL_13
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

805 
	#LL_ADC_AWD_CHANNEL_13_REG_INJ
 ((
LL_ADC_CHANNEL_13
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

806 
	#LL_ADC_AWD_CHANNEL_14_REG
 ((
LL_ADC_CHANNEL_14
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

807 
	#LL_ADC_AWD_CHANNEL_14_INJ
 ((
LL_ADC_CHANNEL_14
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

808 
	#LL_ADC_AWD_CHANNEL_14_REG_INJ
 ((
LL_ADC_CHANNEL_14
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

809 
	#LL_ADC_AWD_CHANNEL_15_REG
 ((
LL_ADC_CHANNEL_15
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

810 
	#LL_ADC_AWD_CHANNEL_15_INJ
 ((
LL_ADC_CHANNEL_15
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

811 
	#LL_ADC_AWD_CHANNEL_15_REG_INJ
 ((
LL_ADC_CHANNEL_15
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

812 
	#LL_ADC_AWD_CHANNEL_16_REG
 ((
LL_ADC_CHANNEL_16
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

813 
	#LL_ADC_AWD_CHANNEL_16_INJ
 ((
LL_ADC_CHANNEL_16
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

814 
	#LL_ADC_AWD_CHANNEL_16_REG_INJ
 ((
LL_ADC_CHANNEL_16
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

815 
	#LL_ADC_AWD_CHANNEL_17_REG
 ((
LL_ADC_CHANNEL_17
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

816 
	#LL_ADC_AWD_CHANNEL_17_INJ
 ((
LL_ADC_CHANNEL_17
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

817 
	#LL_ADC_AWD_CHANNEL_17_REG_INJ
 ((
LL_ADC_CHANNEL_17
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

818 
	#LL_ADC_AWD_CH_VREFINT_REG
 ((
LL_ADC_CHANNEL_VREFINT
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

819 
	#LL_ADC_AWD_CH_VREFINT_INJ
 ((
LL_ADC_CHANNEL_VREFINT
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

820 
	#LL_ADC_AWD_CH_VREFINT_REG_INJ
 ((
LL_ADC_CHANNEL_VREFINT
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

821 
	#LL_ADC_AWD_CH_TEMPSENSOR_REG
 ((
LL_ADC_CHANNEL_TEMPSENSOR
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

822 
	#LL_ADC_AWD_CH_TEMPSENSOR_INJ
 ((
LL_ADC_CHANNEL_TEMPSENSOR
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

823 
	#LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ
 ((
LL_ADC_CHANNEL_TEMPSENSOR
 & 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
√ã

	)

831 
	#LL_ADC_AWD_THRESHOLD_HIGH
 (
ADC_AWD_TR1_HIGH_REGOFFSET
√ã

	)

832 
	#LL_ADC_AWD_THRESHOLD_LOW
 (
ADC_AWD_TR1_LOW_REGOFFSET
√ã

	)

837 #i‚Ä°!
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

841 
	#LL_ADC_MULTI_INDEPENDENT
 0x00000000U

	)

846 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

850 
	#LL_ADC_MULTI_INDEPENDENT
 0x00000000U

	)

851 
	#LL_ADC_MULTI_DUAL_REG_SIMULT
 ( 
ADC_CR1_DUALMOD_2
 | 
ADC_CR1_DUALMOD_1
 )

	)

852 
	#LL_ADC_MULTI_DUAL_REG_INTERL_FAST
 ( 
ADC_CR1_DUALMOD_2
 | 
ADC_CR1_DUALMOD_1
 | 
ADC_CR1_DUALMOD_0
√ã

	)

853 
	#LL_ADC_MULTI_DUAL_REG_INTERL_SLOW
 (
ADC_CR1_DUALMOD_3
 )

	)

854 
	#LL_ADC_MULTI_DUAL_INJ_SIMULT
 ( 
ADC_CR1_DUALMOD_2
 | 
ADC_CR1_DUALMOD_0
√ã

	)

855 
	#LL_ADC_MULTI_DUAL_INJ_ALTERN
 (
ADC_CR1_DUALMOD_3
 | 
ADC_CR1_DUALMOD_0
√ã

	)

856 
	#LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
 ( 
ADC_CR1_DUALMOD_0
√ã

	)

857 
	#LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
 ( 
ADC_CR1_DUALMOD_1
 )

	)

858 
	#LL_ADC_MULTI_DUAL_REG_INTFAST_INJ_SIM
 ( 
ADC_CR1_DUALMOD_1
 | 
ADC_CR1_DUALMOD_0
√ã

	)

859 
	#LL_ADC_MULTI_DUAL_REG_INTSLOW_INJ_SIM
 ( 
ADC_CR1_DUALMOD_2
 )

	)

868 
	#LL_ADC_MULTI_MASTER
 ( 
ADC_DR_DATA
√ã

	)

869 
	#LL_ADC_MULTI_SLAVE
 (
ADC_DR_ADC2DATA
 )

	)

870 
	#LL_ADC_MULTI_MASTER_SLAVE
 (
ADC_DR_ADC2DATA
 | 
ADC_DR_DATA
√ã

	)

903 
	#LL_ADC_DELAY_TEMPSENSOR_STAB_US
 (10U√ã

	)

915 
	#LL_ADC_DELAY_DISABLE_CALIB_ADC_CYCLES
 (2U√ã

	)

925 
	#LL_ADC_DELAY_ENABLE_CALIB_ADC_CYCLES
 (2U√ã

	)

952 
	#LL_ADC_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

960 
	#LL_ADC_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

1003 
	#__LL_ADC_CHANNEL_TO_DECIMAL_NB
(
__CHANNEL__
) \

1004 (((
__CHANNEL__
√ã& 
ADC_CHANNEL_ID_NUMBER_MASK
√ã>> 
ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
)

	)

1040 
	#__LL_ADC_DECIMAL_NB_TO_CHANNEL
(
__DECIMAL_NB__
) \

1041 (((
__DECIMAL_NB__
) <= 9U) \

1043 ((
__DECIMAL_NB__
√ã<< 
ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
) | \

1044 (
ADC_SMPR2_REGOFFSET
 | (((
u√∂t32_t
√ã(3U * (
__DECIMAL_NB__
))√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)) \

1048 ((
__DECIMAL_NB__
√ã<< 
ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
) | \

1049 (
ADC_SMPR1_REGOFFSET
 | (((
u√∂t32_t
√ã(3U * ((
__DECIMAL_NB__
√ã- 10U))√ã<< 
ADC_CHANNEL_SMPx_BITOFFSET_POS
)) \

1051 )

	)

1096 
	#__LL_ADC_IS_CHANNEL_INTERNAL
(
__CHANNEL__
) \

1097 (((
__CHANNEL__
√ã& 
ADC_CHANNEL_ID_INTERNAL_CH_MASK
√ã!Ô£ø0U)

	)

1155 
	#__LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL
(
__CHANNEL__
) \

1156 ((
__CHANNEL__
√ã& ~
ADC_CHANNEL_ID_INTERNAL_CH_MASK
)

	)

1180 
	#__LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE
(
__ADC_INSTANCE__
, 
__CHANNEL__
) \

1181 (((
__ADC_INSTANCE__
√ã=Ô£ø
ADC1
) \

1183 ((
__CHANNEL__
√ã=Ô£ø
LL_ADC_CHANNEL_VREFINT
) || \

1184 ((
__CHANNEL__
√ã=Ô£ø
LL_ADC_CHANNEL_TEMPSENSOR
) \

1188 )

	)

1297 
	#__LL_ADC_ANALOGWD_CHANNEL_GROUP
(
__CHANNEL__
, 
__GROUP__
) \

1298 (((
__GROUP__
√ã=Ô£ø
LL_ADC_GROUP_REGULAR
) \

1299 ? (((
__CHANNEL__
√ã& 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
) \

1301 ((
__GROUP__
√ã=Ô£ø
LL_ADC_GROUP_INJECTED
) \

1302 ? (((
__CHANNEL__
√ã& 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
) \

1304 (((
__CHANNEL__
√ã& 
ADC_CHANNEL_ID_MASK
√ã| 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_AWDSGL
) \

1305 )

	)

1326 
	#__LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION
(
__ADC_RESOLUTION__
, 
__AWD_THRESHOLD__
) \

1327 ((
__AWD_THRESHOLD__
√ã<< (0U))

	)

1348 
	#__LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
(
__ADC_RESOLUTION__
, 
__AWD_THRESHOLD_12_BITS__
) \

1349 (
__AWD_THRESHOLD_12_BITS__
)

	)

1351 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

1365 
	#__LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE
(
__ADC_MULTI_MASTER_SLAVE__
, 
__ADC_MULTI_CONV_DATA__
) \

1366 (((
__ADC_MULTI_CONV_DATA__
√ã>> 
	`POSITION_VAL
((
__ADC_MULTI_MASTER_SLAVE__
))√ã& 
ADC_DR_DATA
)

	)

1387 #i‚Ä°
def√∂ed
(
ADC1
√ã&& def√∂ed(
ADC2
√ã&& def√∂ed(
ADC3
)

1388 
	#__LL_ADC_COMMON_INSTANCE
(
__ADCx__
) \

1389 ((((
__ADCx__
√ã=Ô£ø
ADC1
√ã|| ((__ADCx__√ã=Ô£ø
ADC2
)) \

1391 (
ADC12_COMMON
) \

1397 )

	)

1398 #√±i‚Ä°
def√∂ed
(
ADC1
√ã&& def√∂ed(
ADC2
)

1399 
	#__LL_ADC_COMMON_INSTANCE
(
__ADCx__
) \

1400 (
ADC12_COMMON
)

	)

1402 
	#__LL_ADC_COMMON_INSTANCE
(
__ADCx__
) \

1403 (
ADC1_COMMON
)

	)

1431 #i‚Ä°
def√∂ed
(
ADC1
√ã&& def√∂ed(
ADC2
√ã&& def√∂ed(
ADC3
)

1432 
	#__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE
(
__ADCXY_COMMON__
) \

1433 (((
__ADCXY_COMMON__
√ã=Ô£ø
ADC12_COMMON
) \

1435 (
	`LL_ADC_IsE¬´b√Äd
(
ADC1
) | \

1436 
	`LL_ADC_IsE¬´b√Äd
(
ADC2
) ) \

1440 
	`LL_ADC_IsE¬´b√Äd
(
ADC3
) \

1442 )

	)

1443 #√±i‚Ä°
def√∂ed
(
ADC1
√ã&& def√∂ed(
ADC2
)

1444 
	#__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE
(
__ADCXY_COMMON__
) \

1445 (
	`LL_ADC_IsE¬´b√Äd
(
ADC1
) | \

1446 
	`LL_ADC_IsE¬´b√Äd
(
ADC2
√ã)

	)

1448 
	#__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE
(
__ADCXY_COMMON__
) \

1449 
	`LL_ADC_IsE¬´b√Äd
(
ADC1
)

	)

1462 
	#__LL_ADC_DIGITAL_SCALE
(
__ADC_RESOLUTION__
) \

1463 (0xFFFU)

	)

1478 
	#__LL_ADC_CALC_DATA_TO_VOLTAGE
(
__VREFANALOG_VOLTAGE__
,\

1479 
__ADC_DATA__
,\

1480 
__ADC_RESOLUTION__
) \

1481 ((
__ADC_DATA__
√ã* (
__VREFANALOG_VOLTAGE__
) \

1482 / 
	`__LL_ADC_DIGITAL_SCALE
(
__ADC_RESOLUTION__
) \

1483 )

	)

1526 
	#__LL_ADC_CALC_TEMPERATURE_TYP_PARAMS
(
__TEMPSENSOR_TYP_AVGSLOPE__
,\

1527 
__TEMPSENSOR_TYP_CALX_V__
,\

1528 
__TEMPSENSOR_CALX_TEMP__
,\

1529 
__VREFANALOG_VOLTAGE__
,\

1530 
__TEMPSENSOR_ADC_DATA__
,\

1531 
__ADC_RESOLUTION__
) \

1533 (
√∂t32_t
)(((
__TEMPSENSOR_TYP_CALX_V__
)) \

1536 (
√∂t32_t
)((((
__TEMPSENSOR_ADC_DATA__
√ã* (
__VREFANALOG_VOLTAGE__
)) \

1537 / 
	`__LL_ADC_DIGITAL_SCALE
(
__ADC_RESOLUTION__
)) \

1540 √ã/ (
__TEMPSENSOR_TYP_AVGSLOPE__
) \

1541 √ã+ (
__TEMPSENSOR_CALX_TEMP__
) \

1542 )

	)

1600 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

1601 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_DMA_G√´RegAddr
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
Regi¬∞√Æ
)

1603 
u√∂t32_t
 
d¬©a_¬™g_addr
 = 0U;

1605 i‚Ä°(
Regi¬∞√Æ
 =Ô£ø
LL_ADC_DMA_REG_REGULAR_DATA
)

1608 
d¬©a_¬™g_addr
 = (
u√∂t32_t
)&(
ADCx
->
DR
);

1613 
d¬©a_¬™g_addr
 = (
u√∂t32_t
)&(
ADC12_COMMON
->
DR
);

1616  
d¬©a_¬™g_addr
;

1619 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_DMA_G√´RegAddr
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
Regi¬∞√Æ
)

1622  (
u√∂t32_t
)&(
ADCx
->
DR
);

1659 
__STATIC_INLINE
 
LL_ADC_S√´Comm‚ÅÑP¬©hI¬°√Æ¬´lCh
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
, 
u√∂t32_t
 
P¬©hI¬°√Æ¬´l
)

1661 
MODIFY_REG
(
ADCxy_COMMON
->
CR2
, (
ADC_CR2_TSVREFE
), 
P¬©hI¬°√Æ¬´l
);

1678 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´Comm‚ÅÑP¬©hI¬°√Æ¬´lCh
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

1680  (
u√∂t32_t
)(
READ_BIT
(
ADCxy_COMMON
->
CR2
, 
ADC_CR2_TSVREFE
));

1702 
__STATIC_INLINE
 
LL_ADC_S√´D¬©aAlignm√≠t
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
D¬©aAlignm√≠t
)

1704 
MODIFY_REG
(
ADCx
->
CR2
, 
ADC_CR2_ALIGN
, 
D¬©aAlignm√≠t
);

1717 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´D¬©aAlignm√≠t
(
ADC_Ty‚â•Def
 *
ADCx
)

1719  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_ALIGN
));

1743 
__STATIC_INLINE
 
LL_ADC_S√´Sequ√≠ÀörsSÀánMode
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
SÀánMode
)

1745 
MODIFY_REG
(
ADCx
->
CR1
, 
ADC_CR1_SCAN
, 
SÀánMode
);

1768 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´Sequ√≠ÀörsSÀánMode
(
ADC_Ty‚â•Def
 *
ADCx
)

1770  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR1
, 
ADC_CR1_SCAN
));

1815 
__STATIC_INLINE
 
LL_ADC_REG_S√´Trigg√ÆSourÀö
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Trigg√ÆSourÀö
)

1822 
MODIFY_REG
(
ADCx
->
CR2
, 
ADC_CR2_EXTSEL
, (
Trigg√ÆSourÀö
 & ADC_CR2_EXTSEL));

1862 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_G√´Trigg√ÆSourÀö
(
ADC_Ty‚â•Def
 *
ADCx
)

1864  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_EXTSEL
));

1878 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_IsTrigg√ÆSourÀöSWS√®œÄ
(
ADC_Ty‚â•Def
 *
ADCx
)

1880  (
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_EXTSEL
√ã=Ô£ø(
LL_ADC_REG_TRIG_SOFTWARE
));

1940 
__STATIC_INLINE
 
LL_ADC_REG_S√´Sequ√≠ÀörL√≠gth
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Sequ√≠ÀörNbR‚Ñ¢ks
)

1942 
MODIFY_REG
(
ADCx
->
SQR1
, 
ADC_SQR1_L
, 
Sequ√≠ÀörNbR‚Ñ¢ks
);

2000 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_G√´Sequ√≠ÀörL√≠gth
(
ADC_Ty‚â•Def
 *
ADCx
)

2002  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
SQR1
, 
ADC_SQR1_L
));

2028 
__STATIC_INLINE
 
LL_ADC_REG_S√´Sequ√≠ÀörDisc‚ÅÑt
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
SeqDisc‚ÅÑt
)

2030 
MODIFY_REG
(
ADCx
->
CR1
, 
ADC_CR1_DISCEN
 | 
ADC_CR1_DISCNUM
, 
SeqDisc‚ÅÑt
);

2051 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_G√´Sequ√≠ÀörDisc‚ÅÑt
(
ADC_Ty‚â•Def
 *
ADCx
)

2053  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR1
, 
ADC_CR1_DISCEN
 | 
ADC_CR1_DISCNUM
));

2131 
__STATIC_INLINE
 
LL_ADC_REG_S√´Sequ√≠ÀörR‚Ñ¢ks
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
R‚Ñ¢k
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2137 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
SQR1
, 
__ADC_MASK_SHIFT
(
R‚Ñ¢k
, 
ADC_REG_SQRX_REGOFFSET_MASK
));

2139 
MODIFY_REG
(*
¬•eg
,

2140 
ADC_CHANNEL_ID_NUMBER_MASK
 << (
R‚Ñ¢k
 & 
ADC_REG_RANK_ID_SQRX_MASK
),

2141 (
Ch‚Ñ¢‚àöl
 & 
ADC_CHANNEL_ID_NUMBER_MASK
√ã<< (
R‚Ñ¢k
 & 
ADC_REG_RANK_ID_SQRX_MASK
));

2225 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_G√´Sequ√≠ÀörR‚Ñ¢ks
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
R‚Ñ¢k
)

2227 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
SQR1
, 
__ADC_MASK_SHIFT
(
R‚Ñ¢k
, 
ADC_REG_SQRX_REGOFFSET_MASK
));

2229  (
u√∂t32_t
√ã(
READ_BIT
(*
¬•eg
,

2230 
ADC_CHANNEL_ID_NUMBER_MASK
 << (
R‚Ñ¢k
 & 
ADC_REG_RANK_ID_SQRX_MASK
))

2231 >> (
R‚Ñ¢k
 & 
ADC_REG_RANK_ID_SQRX_MASK
)

2250 
__STATIC_INLINE
 
LL_ADC_REG_S√´C‚ÅÑt√∂uousMode
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
C‚ÅÑt√∂uous
)

2252 
MODIFY_REG
(
ADCx
->
CR2
, 
ADC_CR2_CONT
, 
C‚ÅÑt√∂uous
);

2267 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_G√´C‚ÅÑt√∂uousMode
(
ADC_Ty‚â•Def
 *
ADCx
)

2269  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_CONT
));

2299 
__STATIC_INLINE
 
LL_ADC_REG_S√´DMAT√∏ns‚Äûr
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
DMAT√∏ns‚Äûr
)

2301 
MODIFY_REG
(
ADCx
->
CR2
, 
ADC_CR2_DMA
, 
DMAT√∏ns‚Äûr
);

2330 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_G√´DMAT√∏ns‚Äûr
(
ADC_Ty‚â•Def
 *
ADCx
)

2332  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_DMA
));

2376 
__STATIC_INLINE
 
LL_ADC_INJ_S√´Trigg√ÆSourÀö
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Trigg√ÆSourÀö
)

2383 
MODIFY_REG
(
ADCx
->
CR2
, 
ADC_CR2_JEXTSEL
, (
Trigg√ÆSourÀö
 & ADC_CR2_JEXTSEL));

2422 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_G√´Trigg√ÆSourÀö
(
ADC_Ty‚â•Def
 *
ADCx
)

2424  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_JEXTSEL
));

2438 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_IsTrigg√ÆSourÀöSWS√®œÄ
(
ADC_Ty‚â•Def
 *
ADCx
)

2440  (
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_JEXTSEL
√ã=Ô£ø
LL_ADC_INJ_TRIG_SOFTWARE
);

2466 
__STATIC_INLINE
 
LL_ADC_INJ_S√´Sequ√≠ÀörL√≠gth
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Sequ√≠ÀörNbR‚Ñ¢ks
)

2468 
MODIFY_REG
(
ADCx
->
JSQR
, 
ADC_JSQR_JL
, 
Sequ√≠ÀörNbR‚Ñ¢ks
);

2493 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_G√´Sequ√≠ÀörL√≠gth
(
ADC_Ty‚â•Def
 *
ADCx
)

2495  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
JSQR
, 
ADC_JSQR_JL
));

2511 
__STATIC_INLINE
 
LL_ADC_INJ_S√´Sequ√≠ÀörDisc‚ÅÑt
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
SeqDisc‚ÅÑt
)

2513 
MODIFY_REG
(
ADCx
->
CR1
, 
ADC_CR1_JDISCEN
, 
SeqDisc‚ÅÑt
);

2526 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_G√´Sequ√≠ÀörDisc‚ÅÑt
(
ADC_Ty‚â•Def
 *
ADCx
)

2528  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR1
, 
ADC_CR1_JDISCEN
));

2575 
__STATIC_INLINE
 
LL_ADC_INJ_S√´Sequ√≠ÀörR‚Ñ¢ks
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
R‚Ñ¢k
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2581 
u√∂t32_t
 
tm¬•eg1
 = (
READ_BIT
(
ADCx
->
JSQR
, 
ADC_JSQR_JL
√ã>> 
ADC_JSQR_JL_Pos
) + 1U;

2583 
MODIFY_REG
(
ADCx
->
JSQR
,

2584 
ADC_CHANNEL_ID_NUMBER_MASK
 << (5U * (
u√∂t8_t
)(((
R‚Ñ¢k
√ã+ 3U√ã- (
tm¬•eg1
))),

2585 (
Ch‚Ñ¢‚àöl
 & 
ADC_CHANNEL_ID_NUMBER_MASK
√ã<< (5U * (
u√∂t8_t
)(((
R‚Ñ¢k
√ã+ 3U√ã- (
tm¬•eg1
))));

2641 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_G√´Sequ√≠ÀörR‚Ñ¢ks
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
R‚Ñ¢k
)

2643 
u√∂t32_t
 
tm¬•eg1
 = (
READ_BIT
(
ADCx
->
JSQR
, 
ADC_JSQR_JL
√ã>> 
ADC_JSQR_JL_Pos
) + 1U;

2645  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
JSQR
,

2646 
ADC_CHANNEL_ID_NUMBER_MASK
 << (5U * (
u√∂t8_t
)(((
R‚Ñ¢k
√ã+ 3U√ã- (
tm¬•eg1
))))

2647 >> (5U * (
u√∂t8_t
)(((
R‚Ñ¢k
√ã+ 3U√ã- (
tm¬•eg1
)))

2677 
__STATIC_INLINE
 
LL_ADC_INJ_S√´TrigAuto
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
TrigAuto
)

2679 
MODIFY_REG
(
ADCx
->
CR1
, 
ADC_CR1_JAUTO
, 
TrigAuto
);

2691 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_G√´TrigAuto
(
ADC_Ty‚â•Def
 *
ADCx
)

2693  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR1
, 
ADC_CR1_JAUTO
));

2721 
__STATIC_INLINE
 
LL_ADC_INJ_S√´Off¬£t
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
R‚Ñ¢k
, u√∂t32_√†
Off¬£tLev√±
)

2723 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
JOFR1
, 
__ADC_MASK_SHIFT
(
R‚Ñ¢k
, 
ADC_INJ_JOFRX_REGOFFSET_MASK
));

2725 
MODIFY_REG
(*
¬•eg
,

2726 
ADC_JOFR1_JOFFSET1
,

2727 
Off¬£tLev√±
);

2748 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_G√´Off¬£t
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
R‚Ñ¢k
)

2750 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
JOFR1
, 
__ADC_MASK_SHIFT
(
R‚Ñ¢k
, 
ADC_INJ_JOFRX_REGOFFSET_MASK
));

2752  (
u√∂t32_t
)(
READ_BIT
(*
¬•eg
,

2753 
ADC_JOFR1_JOFFSET1
)

2837 
__STATIC_INLINE
 
LL_ADC_S√´Ch‚Ñ¢‚àölSam‚àÇ√∂gTime
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Sam‚àÇ√∂gTime
)

2843 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
SMPR1
, 
__ADC_MASK_SHIFT
(
Ch‚Ñ¢‚àöl
, 
ADC_CHANNEL_SMPRX_REGOFFSET_MASK
));

2845 
MODIFY_REG
(*
¬•eg
,

2846 
ADC_SMPR2_SMP0
 << 
__ADC_MASK_SHIFT
(
Ch‚Ñ¢‚àöl
, 
ADC_CHANNEL_SMPx_BITOFFSET_MASK
),

2847 
Sam‚àÇ√∂gTime
 << 
__ADC_MASK_SHIFT
(
Ch‚Ñ¢‚àöl
, 
ADC_CHANNEL_SMPx_BITOFFSET_MASK
));

2910 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´Ch‚Ñ¢‚àölSam‚àÇ√∂gTime
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2912 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
SMPR1
, 
__ADC_MASK_SHIFT
(
Ch‚Ñ¢‚àöl
, 
ADC_CHANNEL_SMPRX_REGOFFSET_MASK
));

2914  (
u√∂t32_t
)(
READ_BIT
(*
¬•eg
,

2915 
ADC_SMPR2_SMP0
 << 
__ADC_MASK_SHIFT
(
Ch‚Ñ¢‚àöl
, 
ADC_CHANNEL_SMPx_BITOFFSET_MASK
))

2916 >> 
__ADC_MASK_SHIFT
(
Ch‚Ñ¢‚àöl
, 
ADC_CHANNEL_SMPx_BITOFFSET_MASK
)

3017 
__STATIC_INLINE
 
LL_ADC_S√´A¬´logWDM‚ÅÑ√¥Ch‚Ñ¢‚àöls
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
AWDCh‚Ñ¢‚àölGroup
)

3019 
MODIFY_REG
(
ADCx
->
CR1
,

3020 (
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
 | 
ADC_CR1_AWDCH
),

3021 
AWDCh‚Ñ¢‚àölGroup
);

3110 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´A¬´logWDM‚ÅÑ√¥Ch‚Ñ¢‚àöls
(
ADC_Ty‚â•Def
 *
ADCx
)

3112  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
CR1
, (
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDSGL
 | 
ADC_CR1_AWDCH
)));

3134 
__STATIC_INLINE
 
LL_ADC_S√´A¬´logWDTh¬™shÔ¨Åds
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
AWDTh¬™shÔ¨ÅdsHighLow
, u√∂t32_√†
AWDTh¬™shÔ¨ÅdV√Üue
)

3136 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
HTR
, 
AWDTh¬™shÔ¨ÅdsHighLow
);

3138 
MODIFY_REG
(*
¬•eg
,

3139 
ADC_HTR_HT
,

3140 
AWDTh¬™shÔ¨ÅdV√Üue
);

3157 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´A¬´logWDTh¬™shÔ¨Åds
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
AWDTh¬™shÔ¨ÅdsHighLow
)

3159 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
HTR
, 
AWDTh¬™shÔ¨ÅdsHighLow
);

3161  (
u√∂t32_t
)(
READ_BIT
(*
¬•eg
, 
ADC_HTR_HT
));

3172 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

3195 
__STATIC_INLINE
 
LL_ADC_S√´Mu‚Ä¶imode
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
, 
u√∂t32_t
 
Mu‚Ä¶imode
)

3197 
MODIFY_REG
(
ADCxy_COMMON
->
CR1
, 
ADC_CR1_DUALMOD
, 
Mu‚Ä¶imode
);

3221 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_G√´Mu‚Ä¶imode
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3223  (
u√∂t32_t
)(
READ_BIT
(
ADCxy_COMMON
->
CR1
, 
ADC_CR1_DUALMOD
));

3245 
__STATIC_INLINE
 
LL_ADC_E¬´b√Ä
(
ADC_Ty‚â•Def
 *
ADCx
)

3247 
SET_BIT
(
ADCx
->
CR2
, 
ADC_CR2_ADON
);

3256 
__STATIC_INLINE
 
LL_ADC_Di√üb√Ä
(
ADC_Ty‚â•Def
 *
ADCx
)

3258 
CLEAR_BIT
(
ADCx
->
CR2
, 
ADC_CR2_ADON
);

3267 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsE¬´b√Äd
(
ADC_Ty‚â•Def
 *
ADCx
)

3269  (
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_ADON
) == (ADC_CR2_ADON));

3287 
__STATIC_INLINE
 
LL_ADC_S√®œÄC√Üib√∏ti‚ÅÑ
(
ADC_Ty‚â•Def
 *
ADCx
)

3289 
SET_BIT
(
ADCx
->
CR2
, 
ADC_CR2_CAL
);

3298 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsC√Üib√∏ti‚ÅÑOnGo√∂g
(
ADC_Ty‚â•Def
 *
ADCx
)

3300  (
READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_CAL
) == (ADC_CR2_CAL));

3327 
__STATIC_INLINE
 
LL_ADC_REG_S√®œÄC‚ÅÑv√Æsi‚ÅÑSWS√®œÄ
(
ADC_Ty‚â•Def
 *
ADCx
)

3329 
SET_BIT
(
ADCx
->
CR2
, (
ADC_CR2_SWSTART
 | 
ADC_CR2_EXTTRIG
));

3346 
__STATIC_INLINE
 
LL_ADC_REG_S√®œÄC‚ÅÑv√Æsi‚ÅÑExtTrig
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Ex√£‚à´√ÜTrigg√ÆEdge
)

3348 
SET_BIT
(
ADCx
->
CR2
, 
Ex√£‚à´√ÜTrigg√ÆEdge
);

3364 
__STATIC_INLINE
 
LL_ADC_REG_St‚Ä∫C‚ÅÑv√Æsi‚ÅÑExtTrig
(
ADC_Ty‚â•Def
 *
ADCx
)

3366 
CLEAR_BIT
(
ADCx
->
CR2
, 
ADC_CR2_EXTTRIG
);

3378 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_R√≥dC‚ÅÑv√Æsi‚ÅÑD¬©a32
(
ADC_Ty‚â•Def
 *
ADCx
)

3380  (
u√∂t16_t
)(
READ_BIT
(
ADCx
->
DR
, 
ADC_DR_DATA
));

3393 
__STATIC_INLINE
 
u√∂t16_t
 
LL_ADC_REG_R√≥dC‚ÅÑv√Æsi‚ÅÑD¬©a12
(
ADC_Ty‚â•Def
 *
ADCx
)

3395  (
u√∂t16_t
)(
READ_BIT
(
ADCx
->
DR
, 
ADC_DR_DATA
));

3398 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

3420 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_REG_R√≥dMu‚Ä¶iC‚ÅÑv√Æsi‚ÅÑD¬©a32
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
C‚ÅÑv√Æsi‚ÅÑD¬©a
)

3422  (
u√∂t32_t
)(
READ_BIT
(
ADCx
->
DR
,

3423 
ADC_DR_ADC2DATA
)

3424 >> 
POSITION_VAL
(
C‚ÅÑv√Æsi‚ÅÑD¬©a
)

3453 
__STATIC_INLINE
 
LL_ADC_INJ_S√®œÄC‚ÅÑv√Æsi‚ÅÑSWS√®œÄ
(
ADC_Ty‚â•Def
 *
ADCx
)

3455 
SET_BIT
(
ADCx
->
CR2
, (
ADC_CR2_JSWSTART
 | 
ADC_CR2_JEXTTRIG
));

3472 
__STATIC_INLINE
 
LL_ADC_INJ_S√®œÄC‚ÅÑv√Æsi‚ÅÑExtTrig
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
Ex√£‚à´√ÜTrigg√ÆEdge
)

3474 
SET_BIT
(
ADCx
->
CR2
, 
Ex√£‚à´√ÜTrigg√ÆEdge
);

3490 
__STATIC_INLINE
 
LL_ADC_INJ_St‚Ä∫C‚ÅÑv√Æsi‚ÅÑExtTrig
(
ADC_Ty‚â•Def
 *
ADCx
)

3492 
CLEAR_BIT
(
ADCx
->
CR2
, 
ADC_CR2_JEXTTRIG
);

3512 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_INJ_R√≥dC‚ÅÑv√Æsi‚ÅÑD¬©a32
(
ADC_Ty‚â•Def
 *
ADCx
, u√∂t32_√†
R‚Ñ¢k
)

3514 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
JDR1
, 
__ADC_MASK_SHIFT
(
R‚Ñ¢k
, 
ADC_INJ_JDRX_REGOFFSET_MASK
));

3516  (
u√∂t32_t
)(
READ_BIT
(*
¬•eg
,

3517 
ADC_JDR1_JDATA
)

3539 
__STATIC_INLINE
 
u√∂t16_t
 
LL_ADC_INJ_R√≥dC‚ÅÑv√Æsi‚ÅÑD¬©a12
(
ADC_Ty‚â•Def
 *
ADCx
, 
u√∂t32_t
 
R‚Ñ¢k
)

3541 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCx
->
JDR1
, 
__ADC_MASK_SHIFT
(
R‚Ñ¢k
, 
ADC_INJ_JDRX_REGOFFSET_MASK
));

3543  (
u√∂t16_t
)(
READ_BIT
(*
¬•eg
,

3544 
ADC_JDR1_JDATA
)

3562 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_EOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3568  (
READ_BIT
(
ADCx
->
SR
, 
LL_ADC_FLAG_EOS
) == (LL_ADC_FLAG_EOS));

3578 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_JEOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3584  (
READ_BIT
(
ADCx
->
SR
, 
LL_ADC_FLAG_JEOS
) == (LL_ADC_FLAG_JEOS));

3593 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_AWD1
(
ADC_Ty‚â•Def
 *
ADCx
)

3595  (
READ_BIT
(
ADCx
->
SR
, 
LL_ADC_FLAG_AWD1
) == (LL_ADC_FLAG_AWD1));

3604 
__STATIC_INLINE
 
LL_ADC_C√Ä¬®F≈ìg_EOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3610 
WRITE_REG
(
ADCx
->
SR
, ~
LL_ADC_FLAG_EOS
);

3620 
__STATIC_INLINE
 
LL_ADC_C√Ä¬®F≈ìg_JEOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3626 
WRITE_REG
(
ADCx
->
SR
, ~
LL_ADC_FLAG_JEOS
);

3635 
__STATIC_INLINE
 
LL_ADC_C√Ä¬®F≈ìg_AWD1
(
ADC_Ty‚â•Def
 *
ADCx
)

3637 
WRITE_REG
(
ADCx
->
SR
, ~
LL_ADC_FLAG_AWD1
);

3640 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

3648 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_MST_EOS
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3654  (
READ_BIT
(
ADCxy_COMMON
->
SR
, 
ADC_SR_EOC
) == (ADC_SR_EOC));

3664 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_SLV_EOS
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3671 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCxy_COMMON
->
SR
, 1U);

3673  (
READ_BIT
(*
¬•eg
, 
LL_ADC_FLAG_EOS_SLV
) == (LL_ADC_FLAG_EOS_SLV));

3684 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_MST_JEOS
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3690  (
READ_BIT
(
ADC1
->
SR
, 
ADC_SR_JEOC
) == (ADC_SR_JEOC));

3700 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_SLV_JEOS
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3707 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCxy_COMMON
->
SR
, 1U);

3709  (
READ_BIT
(*
¬•eg
, 
LL_ADC_FLAG_JEOS_SLV
) == (LL_ADC_FLAG_JEOS_SLV));

3719 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_MST_AWD1
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3721  (
READ_BIT
(
ADC1
->
SR
, 
LL_ADC_FLAG_AWD1
) == (LL_ADC_FLAG_AWD1));

3731 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsAÀòiveF≈ìg_SLV_AWD1
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

3733 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__ADC_PTR_REG_OFFSET
(
ADCxy_COMMON
->
SR
, 1U);

3735  (
READ_BIT
(*
¬•eg
, 
LL_ADC_FLAG_AWD1
) == (LL_ADC_FLAG_AWD1));

3754 
__STATIC_INLINE
 
LL_ADC_E¬´b√ÄIT_EOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3760 
SET_BIT
(
ADCx
->
CR1
, 
ADC_CR1_EOCIE
);

3770 
__STATIC_INLINE
 
LL_ADC_E¬´b√ÄIT_JEOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3776 
SET_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_JEOS
);

3785 
__STATIC_INLINE
 
LL_ADC_E¬´b√ÄIT_AWD1
(
ADC_Ty‚â•Def
 *
ADCx
)

3787 
SET_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_AWD1
);

3796 
__STATIC_INLINE
 
LL_ADC_Di√üb√ÄIT_EOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3802 
CLEAR_BIT
(
ADCx
->
CR1
, 
ADC_CR1_EOCIE
);

3812 
__STATIC_INLINE
 
LL_ADC_Di√üb√ÄIT_JEOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3818 
CLEAR_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_JEOS
);

3827 
__STATIC_INLINE
 
LL_ADC_Di√üb√ÄIT_AWD1
(
ADC_Ty‚â•Def
 *
ADCx
)

3829 
CLEAR_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_AWD1
);

3839 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsE¬´b√ÄdIT_EOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3845  (
READ_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_EOS
) == (LL_ADC_IT_EOS));

3856 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsE¬´b√ÄdIT_JEOS
(
ADC_Ty‚â•Def
 *
ADCx
)

3862  (
READ_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_JEOS
) == (LL_ADC_IT_JEOS));

3872 
__STATIC_INLINE
 
u√∂t32_t
 
LL_ADC_IsE¬´b√ÄdIT_AWD1
(
ADC_Ty‚â•Def
 *
ADCx
)

3874  (
READ_BIT
(
ADCx
->
CR1
, 
LL_ADC_IT_AWD1
) == (LL_ADC_IT_AWD1));

3881 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

3887 
E¬∫‚ÄπS√®tus
 
LL_ADC_Comm‚ÅÑDeIn√¥
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
);

3888 
E¬∫‚ÄπS√®tus
 
LL_ADC_Comm‚ÅÑIn√¥
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
, 
LL_ADC_Comm‚ÅÑIn√¥Ty‚â•Def
 *
ADC_Comm‚ÅÑIn√¥S√•uÀò
);

3889 
LL_ADC_Comm‚ÅÑS√•uÀòIn√¥
(
LL_ADC_Comm‚ÅÑIn√¥Ty‚â•Def
 *
ADC_Comm‚ÅÑIn√¥S√•uÀò
);

3893 
E¬∫‚ÄπS√®tus
 
LL_ADC_DeIn√¥
(
ADC_Ty‚â•Def
 *
ADCx
);

3896 
E¬∫‚ÄπS√®tus
 
LL_ADC_In√¥
(
ADC_Ty‚â•Def
 *
ADCx
, 
LL_ADC_In√¥Ty‚â•Def
 *
ADC_In√¥S√•uÀò
);

3897 
LL_ADC_S√•uÀòIn√¥
(
LL_ADC_In√¥Ty‚â•Def
 *
ADC_In√¥S√•uÀò
);

3900 
E¬∫‚ÄπS√®tus
 
LL_ADC_REG_In√¥
(
ADC_Ty‚â•Def
 *
ADCx
, 
LL_ADC_REG_In√¥Ty‚â•Def
 *
ADC_REG_In√¥S√•uÀò
);

3901 
LL_ADC_REG_S√•uÀòIn√¥
(
LL_ADC_REG_In√¥Ty‚â•Def
 *
ADC_REG_In√¥S√•uÀò
);

3904 
E¬∫‚ÄπS√®tus
 
LL_ADC_INJ_In√¥
(
ADC_Ty‚â•Def
 *
ADCx
, 
LL_ADC_INJ_In√¥Ty‚â•Def
 *
ADC_INJ_In√¥S√•uÀò
);

3905 
LL_ADC_INJ_S√•uÀòIn√¥
(
LL_ADC_INJ_In√¥Ty‚â•Def
 *
ADC_INJ_In√¥S√•uÀò
);

3926 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_bus.h

38 #i‚Äöde‚Ä°
__STM32F1xx_LL_BUS_H


39 
	#__STM32F1xx_LL_BUS_H


	)

41 #ifde‚Ä°
__Àùlu‚Ä¢lus


46 
	~"¬∞m32f1xx.h
"

52 #i‚Ä°
def√∂ed
(
RCC
)

62 #i‚Ä°
def√∂ed
(
RCC_AHBRSTR_OTGFSRST
√ã|| def√∂ed(
RCC_AHBRSTR_ETHMACRST
)

63 
	#RCC_AHBRSTR_SUPPORT


	)

77 
	#LL_AHB1_GRP1_PERIPH_ALL
 (
u√∂t32_t
)0xFFFFFFFFU

	)

78 
	#LL_AHB1_GRP1_PERIPH_CRC
 
RCC_AHBENR_CRCEN


	)

79 
	#LL_AHB1_GRP1_PERIPH_DMA1
 
RCC_AHBENR_DMA1EN


	)

80 #i‚Ä°
def√∂ed
(
DMA2
)

81 
	#LL_AHB1_GRP1_PERIPH_DMA2
 
RCC_AHBENR_DMA2EN


	)

83 #i‚Ä°
def√∂ed
(
ETH
)

84 
	#LL_AHB1_GRP1_PERIPH_ETHMAC
 
RCC_AHBENR_ETHMACEN


	)

85 
	#LL_AHB1_GRP1_PERIPH_ETHMACRX
 
RCC_AHBENR_ETHMACRXEN


	)

86 
	#LL_AHB1_GRP1_PERIPH_ETHMACTX
 
RCC_AHBENR_ETHMACTXEN


	)

88 
	#LL_AHB1_GRP1_PERIPH_FLASH
 
RCC_AHBENR_FLITFEN


	)

89 #i‚Ä°
def√∂ed
(
FSMC_B‚Ñ¢k1
)

90 
	#LL_AHB1_GRP1_PERIPH_FSMC
 
RCC_AHBENR_FSMCEN


	)

92 #i‚Ä°
def√∂ed
(
USB_OTG_FS
)

93 
	#LL_AHB1_GRP1_PERIPH_OTGFS
 
RCC_AHBENR_OTGFSEN


	)

95 #i‚Ä°
def√∂ed
(
SDIO
)

96 
	#LL_AHB1_GRP1_PERIPH_SDIO
 
RCC_AHBENR_SDIOEN


	)

98 
	#LL_AHB1_GRP1_PERIPH_SRAM
 
RCC_AHBENR_SRAMEN


	)

106 
	#LL_APB1_GRP1_PERIPH_ALL
 (
u√∂t32_t
)0xFFFFFFFFU

	)

107 
	#LL_APB1_GRP1_PERIPH_BKP
 
RCC_APB1ENR_BKPEN


	)

108 #i‚Ä°
def√∂ed
(
CAN1
)

109 
	#LL_APB1_GRP1_PERIPH_CAN1
 
RCC_APB1ENR_CAN1EN


	)

111 #i‚Ä°
def√∂ed
(
CAN2
)

112 
	#LL_APB1_GRP1_PERIPH_CAN2
 
RCC_APB1ENR_CAN2EN


	)

114 #i‚Ä°
def√∂ed
(
CEC
)

115 
	#LL_APB1_GRP1_PERIPH_CEC
 
RCC_APB1ENR_CECEN


	)

117 #i‚Ä°
def√∂ed
(
DAC
)

118 
	#LL_APB1_GRP1_PERIPH_DAC1
 
RCC_APB1ENR_DACEN


	)

120 
	#LL_APB1_GRP1_PERIPH_I2C1
 
RCC_APB1ENR_I2C1EN


	)

121 #i‚Ä°
def√∂ed
(
I2C2
)

122 
	#LL_APB1_GRP1_PERIPH_I2C2
 
RCC_APB1ENR_I2C2EN


	)

124 
	#LL_APB1_GRP1_PERIPH_PWR
 
RCC_APB1ENR_PWREN


	)

125 #i‚Ä°
def√∂ed
(
SPI2
)

126 
	#LL_APB1_GRP1_PERIPH_SPI2
 
RCC_APB1ENR_SPI2EN


	)

128 #i‚Ä°
def√∂ed
(
SPI3
)

129 
	#LL_APB1_GRP1_PERIPH_SPI3
 
RCC_APB1ENR_SPI3EN


	)

131 #i‚Ä°
def√∂ed
(
TIM12
)

132 
	#LL_APB1_GRP1_PERIPH_TIM12
 
RCC_APB1ENR_TIM12EN


	)

134 #i‚Ä°
def√∂ed
(
TIM13
)

135 
	#LL_APB1_GRP1_PERIPH_TIM13
 
RCC_APB1ENR_TIM13EN


	)

137 #i‚Ä°
def√∂ed
(
TIM14
)

138 
	#LL_APB1_GRP1_PERIPH_TIM14
 
RCC_APB1ENR_TIM14EN


	)

140 
	#LL_APB1_GRP1_PERIPH_TIM2
 
RCC_APB1ENR_TIM2EN


	)

141 
	#LL_APB1_GRP1_PERIPH_TIM3
 
RCC_APB1ENR_TIM3EN


	)

142 #i‚Ä°
def√∂ed
(
TIM4
)

143 
	#LL_APB1_GRP1_PERIPH_TIM4
 
RCC_APB1ENR_TIM4EN


	)

145 #i‚Ä°
def√∂ed
(
TIM5
)

146 
	#LL_APB1_GRP1_PERIPH_TIM5
 
RCC_APB1ENR_TIM5EN


	)

148 #i‚Ä°
def√∂ed
(
TIM6
)

149 
	#LL_APB1_GRP1_PERIPH_TIM6
 
RCC_APB1ENR_TIM6EN


	)

151 #i‚Ä°
def√∂ed
(
TIM7
)

152 
	#LL_APB1_GRP1_PERIPH_TIM7
 
RCC_APB1ENR_TIM7EN


	)

154 #i‚Ä°
def√∂ed
(
UART4
)

155 
	#LL_APB1_GRP1_PERIPH_UART4
 
RCC_APB1ENR_UART4EN


	)

157 #i‚Ä°
def√∂ed
(
UART5
)

158 
	#LL_APB1_GRP1_PERIPH_UART5
 
RCC_APB1ENR_UART5EN


	)

160 
	#LL_APB1_GRP1_PERIPH_USART2
 
RCC_APB1ENR_USART2EN


	)

161 #i‚Ä°
def√∂ed
(
USART3
)

162 
	#LL_APB1_GRP1_PERIPH_USART3
 
RCC_APB1ENR_USART3EN


	)

164 #i‚Ä°
def√∂ed
(
USB
)

165 
	#LL_APB1_GRP1_PERIPH_USB
 
RCC_APB1ENR_USBEN


	)

167 
	#LL_APB1_GRP1_PERIPH_WWDG
 
RCC_APB1ENR_WWDGEN


	)

175 
	#LL_APB2_GRP1_PERIPH_ALL
 (
u√∂t32_t
)0xFFFFFFFFU

	)

176 
	#LL_APB2_GRP1_PERIPH_ADC1
 
RCC_APB2ENR_ADC1EN


	)

177 #i‚Ä°
def√∂ed
(
ADC2
)

178 
	#LL_APB2_GRP1_PERIPH_ADC2
 
RCC_APB2ENR_ADC2EN


	)

180 #i‚Ä°
def√∂ed
(
ADC3
)

181 
	#LL_APB2_GRP1_PERIPH_ADC3
 
RCC_APB2ENR_ADC3EN


	)

183 
	#LL_APB2_GRP1_PERIPH_AFIO
 
RCC_APB2ENR_AFIOEN


	)

184 
	#LL_APB2_GRP1_PERIPH_GPIOA
 
RCC_APB2ENR_IOPAEN


	)

185 
	#LL_APB2_GRP1_PERIPH_GPIOB
 
RCC_APB2ENR_IOPBEN


	)

186 
	#LL_APB2_GRP1_PERIPH_GPIOC
 
RCC_APB2ENR_IOPCEN


	)

187 
	#LL_APB2_GRP1_PERIPH_GPIOD
 
RCC_APB2ENR_IOPDEN


	)

188 #i‚Ä°
def√∂ed
(
GPIOE
)

189 
	#LL_APB2_GRP1_PERIPH_GPIOE
 
RCC_APB2ENR_IOPEEN


	)

191 #i‚Ä°
def√∂ed
(
GPIOF
)

192 
	#LL_APB2_GRP1_PERIPH_GPIOF
 
RCC_APB2ENR_IOPFEN


	)

194 #i‚Ä°
def√∂ed
(
GPIOG
)

195 
	#LL_APB2_GRP1_PERIPH_GPIOG
 
RCC_APB2ENR_IOPGEN


	)

197 
	#LL_APB2_GRP1_PERIPH_SPI1
 
RCC_APB2ENR_SPI1EN


	)

198 #i‚Ä°
def√∂ed
(
TIM10
)

199 
	#LL_APB2_GRP1_PERIPH_TIM10
 
RCC_APB2ENR_TIM10EN


	)

201 #i‚Ä°
def√∂ed
(
TIM11
)

202 
	#LL_APB2_GRP1_PERIPH_TIM11
 
RCC_APB2ENR_TIM11EN


	)

204 #i‚Ä°
def√∂ed
(
TIM15
)

205 
	#LL_APB2_GRP1_PERIPH_TIM15
 
RCC_APB2ENR_TIM15EN


	)

207 #i‚Ä°
def√∂ed
(
TIM16
)

208 
	#LL_APB2_GRP1_PERIPH_TIM16
 
RCC_APB2ENR_TIM16EN


	)

210 #i‚Ä°
def√∂ed
(
TIM17
)

211 
	#LL_APB2_GRP1_PERIPH_TIM17
 
RCC_APB2ENR_TIM17EN


	)

213 
	#LL_APB2_GRP1_PERIPH_TIM1
 
RCC_APB2ENR_TIM1EN


	)

214 #i‚Ä°
def√∂ed
(
TIM8
)

215 
	#LL_APB2_GRP1_PERIPH_TIM8
 
RCC_APB2ENR_TIM8EN


	)

217 #i‚Ä°
def√∂ed
(
TIM9
)

218 
	#LL_APB2_GRP1_PERIPH_TIM9
 
RCC_APB2ENR_TIM9EN


	)

220 
	#LL_APB2_GRP1_PERIPH_USART1
 
RCC_APB2ENR_USART1EN


	)

269 
__STATIC_INLINE
 
LL_AHB1_GRP1_E¬´b√ÄClock
(
u√∂t32_t
 
P√Æ√πhs
)

271 
__IO
 
u√∂t32_t
 
tm¬•eg
;

272 
SET_BIT
(
RCC
->
AHBENR
, 
P√Æ√πhs
);

274 
tm¬•eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
P√Æ√πhs
);

275 ()
tm¬•eg
;

307 
__STATIC_INLINE
 
u√∂t32_t
 
LL_AHB1_GRP1_IsE¬´b√ÄdClock
(u√∂t32_√†
P√Æ√πhs
)

309  (
READ_BIT
(
RCC
->
AHBENR
, 
P√Æ√πhs
) == Periphs);

341 
__STATIC_INLINE
 
LL_AHB1_GRP1_Di√üb√ÄClock
(
u√∂t32_t
 
P√Æ√πhs
)

343 
CLEAR_BIT
(
RCC
->
AHBENR
, 
P√Æ√πhs
);

346 #i‚Ä°
def√∂ed
(
RCC_AHBRSTR_SUPPORT
)

359 
__STATIC_INLINE
 
LL_AHB1_GRP1_F‚ÄπÀöRe¬£t
(
u√∂t32_t
 
P√Æ√πhs
)

361 
SET_BIT
(
RCC
->
AHBRSTR
, 
P√Æ√πhs
);

376 
__STATIC_INLINE
 
LL_AHB1_GRP1_R√±√≥¬£Re¬£t
(
u√∂t32_t
 
P√Æ√πhs
)

378 
CLEAR_BIT
(
RCC
->
AHBRSTR
, 
P√Æ√πhs
);

447 
__STATIC_INLINE
 
LL_APB1_GRP1_E¬´b√ÄClock
(
u√∂t32_t
 
P√Æ√πhs
)

449 
__IO
 
u√∂t32_t
 
tm¬•eg
;

450 
SET_BIT
(
RCC
->
APB1ENR
, 
P√Æ√πhs
);

452 
tm¬•eg
 = 
READ_BIT
(
RCC
->
APB1ENR
, 
P√Æ√πhs
);

453 ()
tm¬•eg
;

513 
__STATIC_INLINE
 
u√∂t32_t
 
LL_APB1_GRP1_IsE¬´b√ÄdClock
(u√∂t32_√†
P√Æ√πhs
)

515  (
READ_BIT
(
RCC
->
APB1ENR
, 
P√Æ√πhs
) == Periphs);

575 
__STATIC_INLINE
 
LL_APB1_GRP1_Di√üb√ÄClock
(
u√∂t32_t
 
P√Æ√πhs
)

577 
CLEAR_BIT
(
RCC
->
APB1ENR
, 
P√Æ√πhs
);

638 
__STATIC_INLINE
 
LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
u√∂t32_t
 
P√Æ√πhs
)

640 
SET_BIT
(
RCC
->
APB1RSTR
, 
P√Æ√πhs
);

701 
__STATIC_INLINE
 
LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
u√∂t32_t
 
P√Æ√πhs
)

703 
CLEAR_BIT
(
RCC
->
APB1RSTR
, 
P√Æ√πhs
);

763 
__STATIC_INLINE
 
LL_APB2_GRP1_E¬´b√ÄClock
(
u√∂t32_t
 
P√Æ√πhs
)

765 
__IO
 
u√∂t32_t
 
tm¬•eg
;

766 
SET_BIT
(
RCC
->
APB2ENR
, 
P√Æ√πhs
);

768 
tm¬•eg
 = 
READ_BIT
(
RCC
->
APB2ENR
, 
P√Æ√πhs
);

769 ()
tm¬•eg
;

821 
__STATIC_INLINE
 
u√∂t32_t
 
LL_APB2_GRP1_IsE¬´b√ÄdClock
(u√∂t32_√†
P√Æ√πhs
)

823  (
READ_BIT
(
RCC
->
APB2ENR
, 
P√Æ√πhs
) == Periphs);

875 
__STATIC_INLINE
 
LL_APB2_GRP1_Di√üb√ÄClock
(
u√∂t32_t
 
P√Æ√πhs
)

877 
CLEAR_BIT
(
RCC
->
APB2ENR
, 
P√Æ√πhs
);

930 
__STATIC_INLINE
 
LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
u√∂t32_t
 
P√Æ√πhs
)

932 
SET_BIT
(
RCC
->
APB2RSTR
, 
P√Æ√πhs
);

985 
__STATIC_INLINE
 
LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
u√∂t32_t
 
P√Æ√πhs
)

987 
CLEAR_BIT
(
RCC
->
APB2RSTR
, 
P√Æ√πhs
);

1009 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_cortex.h

37 #i‚Äöde‚Ä°
__STM32F1xx_LL_CORTEX_H


38 
	#__STM32F1xx_LL_CORTEX_H


	)

40 #ifde‚Ä°
__Àùlu‚Ä¢lus


45 
	~"¬∞m32f1xx.h
"

71 
	#LL_SYSTICK_CLKSOURCE_HCLK_DIV8
 0x00000000U

	)

72 
	#LL_SYSTICK_CLKSOURCE_HCLK
 
SysTick_CTRL_CLKSOURCE_Msk


	)

80 
	#LL_HANDLER_FAULT_USG
 
SCB_SHCSR_USGFAULTENA_Msk


	)

81 
	#LL_HANDLER_FAULT_BUS
 
SCB_SHCSR_BUSFAULTENA_Msk


	)

82 
	#LL_HANDLER_FAULT_MEM
 
SCB_SHCSR_MEMFAULTENA_Msk


	)

87 #i‚Ä°
__MPU_PRESENT


92 
	#LL_MPU_CTRL_HFNMI_PRIVDEF_NONE
 0x00000000U

	)

93 
	#LL_MPU_CTRL_HARDFAULT_NMI
 
MPU_CTRL_HFNMIENA_Msk


	)

94 
	#LL_MPU_CTRL_PRIVILEGED_DEFAULT
 
MPU_CTRL_PRIVDEFENA_Msk


	)

95 
	#LL_MPU_CTRL_HFNMI_PRIVDEF
 (
MPU_CTRL_HFNMIENA_Msk
 | 
MPU_CTRL_PRIVDEFENA_Msk
√ã

	)

103 
	#LL_MPU_REGION_NUMBER0
 0x00U

	)

104 
	#LL_MPU_REGION_NUMBER1
 0x01U

	)

105 
	#LL_MPU_REGION_NUMBER2
 0x02U

	)

106 
	#LL_MPU_REGION_NUMBER3
 0x03U

	)

107 
	#LL_MPU_REGION_NUMBER4
 0x04U

	)

108 
	#LL_MPU_REGION_NUMBER5
 0x05U

	)

109 
	#LL_MPU_REGION_NUMBER6
 0x06U

	)

110 
	#LL_MPU_REGION_NUMBER7
 0x07U

	)

118 
	#LL_MPU_REGION_SIZE_32B
 (0x04U << 
MPU_RASR_SIZE_Pos
√ã

	)

119 
	#LL_MPU_REGION_SIZE_64B
 (0x05U << 
MPU_RASR_SIZE_Pos
√ã

	)

120 
	#LL_MPU_REGION_SIZE_128B
 (0x06U << 
MPU_RASR_SIZE_Pos
√ã

	)

121 
	#LL_MPU_REGION_SIZE_256B
 (0x07U << 
MPU_RASR_SIZE_Pos
√ã

	)

122 
	#LL_MPU_REGION_SIZE_512B
 (0x08U << 
MPU_RASR_SIZE_Pos
√ã

	)

123 
	#LL_MPU_REGION_SIZE_1KB
 (0x09U << 
MPU_RASR_SIZE_Pos
√ã

	)

124 
	#LL_MPU_REGION_SIZE_2KB
 (0x0AU << 
MPU_RASR_SIZE_Pos
√ã

	)

125 
	#LL_MPU_REGION_SIZE_4KB
 (0x0BU << 
MPU_RASR_SIZE_Pos
√ã

	)

126 
	#LL_MPU_REGION_SIZE_8KB
 (0x0CU << 
MPU_RASR_SIZE_Pos
√ã

	)

127 
	#LL_MPU_REGION_SIZE_16KB
 (0x0DU << 
MPU_RASR_SIZE_Pos
√ã

	)

128 
	#LL_MPU_REGION_SIZE_32KB
 (0x0EU << 
MPU_RASR_SIZE_Pos
√ã

	)

129 
	#LL_MPU_REGION_SIZE_64KB
 (0x0FU << 
MPU_RASR_SIZE_Pos
√ã

	)

130 
	#LL_MPU_REGION_SIZE_128KB
 (0x10U << 
MPU_RASR_SIZE_Pos
√ã

	)

131 
	#LL_MPU_REGION_SIZE_256KB
 (0x11U << 
MPU_RASR_SIZE_Pos
√ã

	)

132 
	#LL_MPU_REGION_SIZE_512KB
 (0x12U << 
MPU_RASR_SIZE_Pos
√ã

	)

133 
	#LL_MPU_REGION_SIZE_1MB
 (0x13U << 
MPU_RASR_SIZE_Pos
√ã

	)

134 
	#LL_MPU_REGION_SIZE_2MB
 (0x14U << 
MPU_RASR_SIZE_Pos
√ã

	)

135 
	#LL_MPU_REGION_SIZE_4MB
 (0x15U << 
MPU_RASR_SIZE_Pos
√ã

	)

136 
	#LL_MPU_REGION_SIZE_8MB
 (0x16U << 
MPU_RASR_SIZE_Pos
√ã

	)

137 
	#LL_MPU_REGION_SIZE_16MB
 (0x17U << 
MPU_RASR_SIZE_Pos
√ã

	)

138 
	#LL_MPU_REGION_SIZE_32MB
 (0x18U << 
MPU_RASR_SIZE_Pos
√ã

	)

139 
	#LL_MPU_REGION_SIZE_64MB
 (0x19U << 
MPU_RASR_SIZE_Pos
√ã

	)

140 
	#LL_MPU_REGION_SIZE_128MB
 (0x1AU << 
MPU_RASR_SIZE_Pos
√ã

	)

141 
	#LL_MPU_REGION_SIZE_256MB
 (0x1BU << 
MPU_RASR_SIZE_Pos
√ã

	)

142 
	#LL_MPU_REGION_SIZE_512MB
 (0x1CU << 
MPU_RASR_SIZE_Pos
√ã

	)

143 
	#LL_MPU_REGION_SIZE_1GB
 (0x1DU << 
MPU_RASR_SIZE_Pos
√ã

	)

144 
	#LL_MPU_REGION_SIZE_2GB
 (0x1EU << 
MPU_RASR_SIZE_Pos
√ã

	)

145 
	#LL_MPU_REGION_SIZE_4GB
 (0x1FU << 
MPU_RASR_SIZE_Pos
√ã

	)

153 
	#LL_MPU_REGION_NO_ACCESS
 (0x00U << 
MPU_RASR_AP_Pos
√ã

	)

154 
	#LL_MPU_REGION_PRIV_RW
 (0x01U << 
MPU_RASR_AP_Pos
√ã

	)

155 
	#LL_MPU_REGION_PRIV_RW_URO
 (0x02U << 
MPU_RASR_AP_Pos
√ã

	)

156 
	#LL_MPU_REGION_FULL_ACCESS
 (0x03U << 
MPU_RASR_AP_Pos
√ã

	)

157 
	#LL_MPU_REGION_PRIV_RO
 (0x05U << 
MPU_RASR_AP_Pos
√ã

	)

158 
	#LL_MPU_REGION_PRIV_RO_URO
 (0x06U << 
MPU_RASR_AP_Pos
√ã

	)

166 
	#LL_MPU_TEX_LEVEL0
 (0x00U << 
MPU_RASR_TEX_Pos
√ã

	)

167 
	#LL_MPU_TEX_LEVEL1
 (0x01U << 
MPU_RASR_TEX_Pos
√ã

	)

168 
	#LL_MPU_TEX_LEVEL2
 (0x02U << 
MPU_RASR_TEX_Pos
√ã

	)

169 
	#LL_MPU_TEX_LEVEL4
 (0x04U << 
MPU_RASR_TEX_Pos
√ã

	)

177 
	#LL_MPU_INSTRUCTION_ACCESS_ENABLE
 0x00U

	)

178 
	#LL_MPU_INSTRUCTION_ACCESS_DISABLE
 
MPU_RASR_XN_Msk


	)

186 
	#LL_MPU_ACCESS_SHAREABLE
 
MPU_RASR_S_Msk


	)

187 
	#LL_MPU_ACCESS_NOT_SHAREABLE
 0x00U

	)

195 
	#LL_MPU_ACCESS_CACHEABLE
 
MPU_RASR_C_Msk


	)

196 
	#LL_MPU_ACCESS_NOT_CACHEABLE
 0x00U

	)

204 
	#LL_MPU_ACCESS_BUFFERABLE
 
MPU_RASR_B_Msk


	)

205 
	#LL_MPU_ACCESS_NOT_BUFFERABLE
 0x00U

	)

231 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SYSTICK_IsAÀòiveCou¬°√ÆF≈ìg
()

233  ((
SysTick
->
CTRL
 & 
SysTick_CTRL_COUNTFLAG_Msk
) == (SysTick_CTRL_COUNTFLAG_Msk));

244 
__STATIC_INLINE
 
LL_SYSTICK_S√´ClkSourÀö
(
u√∂t32_t
 
SourÀö
)

246 i‚Ä°(
SourÀö
 =Ô£ø
LL_SYSTICK_CLKSOURCE_HCLK
)

248 
SET_BIT
(
SysTick
->
CTRL
, 
LL_SYSTICK_CLKSOURCE_HCLK
);

252 
CLEAR_BIT
(
SysTick
->
CTRL
, 
LL_SYSTICK_CLKSOURCE_HCLK
);

263 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SYSTICK_G√´ClkSourÀö
()

265  
READ_BIT
(
SysTick
->
CTRL
, 
LL_SYSTICK_CLKSOURCE_HCLK
);

273 
__STATIC_INLINE
 
LL_SYSTICK_E¬´b√ÄIT
()

275 
SET_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

283 
__STATIC_INLINE
 
LL_SYSTICK_Di√üb√ÄIT
()

285 
CLEAR_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

293 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SYSTICK_IsE¬´b√ÄdIT
()

295  (
READ_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
) == (SysTick_CTRL_TICKINT_Msk));

311 
__STATIC_INLINE
 
LL_LPM_E¬´b√ÄS√Ä√Ø
()

314 
CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

322 
__STATIC_INLINE
 
LL_LPM_E¬´b√ÄD√¨pS√Ä√Ø
()

325 
SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

335 
__STATIC_INLINE
 
LL_LPM_E¬´b√ÄS√Ä√ØOnEx√¥
()

338 
SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

346 
__STATIC_INLINE
 
LL_LPM_Di√üb√ÄS√Ä√ØOnEx√¥
()

349 
CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

358 
__STATIC_INLINE
 
LL_LPM_E¬´b√ÄEv√≠tOnP√≠d
()

361 
SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SEVONPEND_Msk
));

370 
__STATIC_INLINE
 
LL_LPM_Di√üb√ÄEv√≠tOnP√≠d
()

373 
CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SEVONPEND_Msk
));

393 
__STATIC_INLINE
 
LL_HANDLER_E¬´b√ÄFau‚Ä¶
(
u√∂t32_t
 
Fau‚Ä¶
)

396 
SET_BIT
(
SCB
->
SHCSR
, 
Fau‚Ä¶
);

408 
__STATIC_INLINE
 
LL_HANDLER_Di√üb√ÄFau‚Ä¶
(
u√∂t32_t
 
Fau‚Ä¶
)

411 
CLEAR_BIT
(
SCB
->
SHCSR
, 
Fau‚Ä¶
);

427 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CPUID_G√´Im‚àÇem√≠√£r
()

429  (
u√∂t32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_IMPLEMENTER_Msk
√ã>> 
SCB_CPUID_IMPLEMENTER_Pos
);

437 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CPUID_G√´V¬®√º¬°
()

439  (
u√∂t32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_VARIANT_Msk
√ã>> 
SCB_CPUID_VARIANT_Pos
);

447 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CPUID_G√´C‚ÅÑ¬∞‚Ñ¢t
()

449  (
u√∂t32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_ARCHITECTURE_Msk
√ã>> 
SCB_CPUID_ARCHITECTURE_Pos
);

457 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CPUID_G√´P¬®No
()

459  (
u√∂t32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_PARTNO_Msk
√ã>> 
SCB_CPUID_PARTNO_Pos
);

467 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CPUID_G√´Revisi‚ÅÑ
()

469  (
u√∂t32_t
)(
READ_BIT
(
SCB
->
CPUID
, 
SCB_CPUID_REVISION_Msk
√ã>> 
SCB_CPUID_REVISION_Pos
);

476 #i‚Ä°
__MPU_PRESENT


491 
__STATIC_INLINE
 
LL_MPU_E¬´b√Ä
(
u√∂t32_t
 
O¬±i‚ÅÑs
)

494 
WRITE_REG
(
MPU
->
CTRL
, (
MPU_CTRL_ENABLE_Msk
 | 
O¬±i‚ÅÑs
));

496 
__DSB
();

498 
__ISB
();

506 
__STATIC_INLINE
 
LL_MPU_Di√üb√Ä
()

509 
__DMB
();

511 
WRITE_REG
(
MPU
->
CTRL
, 0U);

519 
__STATIC_INLINE
 
u√∂t32_t
 
LL_MPU_IsE¬´b√Äd
()

521  (
READ_BIT
(
MPU
->
CTRL
, 
MPU_CTRL_ENABLE_Msk
) == (MPU_CTRL_ENABLE_Msk));

538 
__STATIC_INLINE
 
LL_MPU_E¬´b√ÄRegi‚ÅÑ
(
u√∂t32_t
 
Regi‚ÅÑ
)

541 
WRITE_REG
(
MPU
->
RNR
, 
Regi‚ÅÑ
);

543 
SET_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

584 
__STATIC_INLINE
 
LL_MPU_C‚ÅÑfigRegi‚ÅÑ
(
u√∂t32_t
 
Regi‚ÅÑ
, u√∂t32_√†
SubRegi‚ÅÑDi√üb√Ä
, u√∂t32_√†
Add¬™ss
, u√∂t32_√†
A√¢ribu√£s
)

587 
WRITE_REG
(
MPU
->
RNR
, 
Regi‚ÅÑ
);

589 
WRITE_REG
(
MPU
->
RBAR
, (
Add¬™ss
 & 0xFFFFFFE0U));

591 
WRITE_REG
(
MPU
->
RASR
, (
MPU_RASR_ENABLE_Msk
 | 
A√¢ribu√£s
 | 
SubRegi‚ÅÑDi√üb√Ä
 << 
MPU_RASR_SRD_Pos
));

609 
__STATIC_INLINE
 
LL_MPU_Di√üb√ÄRegi‚ÅÑ
(
u√∂t32_t
 
Regi‚ÅÑ
)

612 
WRITE_REG
(
MPU
->
RNR
, 
Regi‚ÅÑ
);

614 
CLEAR_BIT
(
MPU
->
RASR
, 
MPU_RASR_ENABLE_Msk
);

634 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_crc.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_CRC_H


22 
	#STM32F1xx_LL_CRC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
(
CRC
)

72 
	#LL_CRC_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, __VALUE__)

	)

80 
	#LL_CRC_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

108 
__STATIC_INLINE
 
LL_CRC_Re¬£tCRCC√Ücu≈ìti‚ÅÑUn√¥
(
CRC_Ty‚â•Def
 *
CRCx
)

110 
SET_BIT
(
CRCx
->
CR
, 
CRC_CR_RESET
);

128 
__STATIC_INLINE
 
LL_CRC_F√¨dD¬©a32
(
CRC_Ty‚â•Def
 *
CRCx
, 
u√∂t32_t
 
InD¬©a
)

130 
WRITE_REG
(
CRCx
->
DR
, 
InD¬©a
);

139 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CRC_R√≥dD¬©a32
(
CRC_Ty‚â•Def
 *
CRCx
)

141  (
u√∂t32_t
)(
READ_REG
(
CRCx
->
DR
));

151 
__STATIC_INLINE
 
u√∂t32_t
 
LL_CRC_R√≥d_IDR
(
CRC_Ty‚â•Def
 *
CRCx
)

153  (
u√∂t32_t
)(
READ_REG
(
CRCx
->
IDR
));

164 
__STATIC_INLINE
 
LL_CRC_Wr√¥e_IDR
(
CRC_Ty‚â•Def
 *
CRCx
, 
u√∂t32_t
 
InD¬©a
)

166 *((
u√∂t8_t
 
__IO
 *)(&
CRCx
->
IDR
)√ãÔ£ø(u√∂t8_t√ã
InD¬©a
;

172 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

177 
E¬∫‚ÄπS√®tus
 
LL_CRC_DeIn√¥
(
CRC_Ty‚â•Def
 *
CRCx
);

198 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_dac.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_DAC_H


22 
	#STM32F1xx_LL_DAC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
(
DAC
)

55 
	#DAC_CR_CH1_BITOFFSET
 0U

	)

56 
	#DAC_CR_CH2_BITOFFSET
 16U

	)

57 
	#DAC_CR_CHX_BITOFFSET_MASK
 (
DAC_CR_CH1_BITOFFSET
 | 
DAC_CR_CH2_BITOFFSET
)

	)

59 
	#DAC_SWTR_CH1
 (
DAC_SWTRIGR_SWTRIG1
√ã

	)

60 
	#DAC_SWTR_CH2
 (
DAC_SWTRIGR_SWTRIG2
√ã

	)

61 
	#DAC_SWTR_CHX_MASK
 (
DAC_SWTR_CH1
 | 
DAC_SWTR_CH2
)

	)

63 
	#DAC_REG_DHR12R1_REGOFFSET
 0x00000000U

	)

64 
	#DAC_REG_DHR12L1_REGOFFSET
 0x00100000U

	)

65 
	#DAC_REG_DHR8R1_REGOFFSET
 0x02000000U

	)

66 
	#DAC_REG_DHR12R2_REGOFFSET
 0x00030000U

	)

67 
	#DAC_REG_DHR12L2_REGOFFSET
 0x00400000U

	)

68 
	#DAC_REG_DHR8R2_REGOFFSET
 0x05000000U

	)

69 
	#DAC_REG_DHR12RX_REGOFFSET_MASK
 0x000F0000U

	)

70 
	#DAC_REG_DHR12LX_REGOFFSET_MASK
 0x00F00000U

	)

71 
	#DAC_REG_DHR8RX_REGOFFSET_MASK
 0x0F000000U

	)

72 
	#DAC_REG_DHRX_REGOFFSET_MASK
 (
DAC_REG_DHR12RX_REGOFFSET_MASK
 | 
DAC_REG_DHR12LX_REGOFFSET_MASK
 | 
DAC_REG_DHR8RX_REGOFFSET_MASK
)

	)

74 
	#DAC_REG_DOR1_REGOFFSET
 0x00000000U

	)

75 
	#DAC_REG_DOR2_REGOFFSET
 0x10000000U

	)

76 
	#DAC_REG_DORX_REGOFFSET_MASK
 (
DAC_REG_DOR1_REGOFFSET
 | 
DAC_REG_DOR2_REGOFFSET
)

	)

79 
	#DAC_REG_DHR_REGOFFSET_MASK_POSBIT0
 0x0000000FU

	)

80 
	#DAC_REG_DORX_REGOFFSET_MASK_POSBIT0
 0x00000001U

	)

81 
	#DAC_REG_SHSRX_REGOFFSET_MASK_POSBIT0
 0x00000001U

	)

83 
	#DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS
 16U

	)

84 
	#DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS
 20U

	)

85 
	#DAC_REG_DHR8RX_REGOFFSET_BITOFFSET_POS
 24U

	)

86 
	#DAC_REG_DORX_REGOFFSET_BITOFFSET_POS
 28U

	)

89 
	#DAC_DHR12RD_DACC2DHR_BITOFFSET_POS
 
DAC_DHR12RD_DACC2DHR_Pos


	)

90 
	#DAC_DHR12LD_DACC2DHR_BITOFFSET_POS
 
DAC_DHR12LD_DACC2DHR_Pos


	)

91 
	#DAC_DHR8RD_DACC2DHR_BITOFFSET_POS
 
DAC_DHR8RD_DACC2DHR_Pos


	)

94 
	#DAC_DIGITAL_SCALE_12BITS
 4095U

	)

114 
	#__DAC_PTR_REG_OFFSET
(
__REG__
, 
__REG_OFFFSET__
) \

115 ((
u√∂t32_t
 *)((u√∂t32_t√ã((u√∂t32_t)(&(
__REG__
)√ã+ ((
__REG_OFFFSET__
√ã<< 2U))))

	)

123 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

133 
u√∂t32_t
 
Trigg√ÆSourÀö
;

138 
u√∂t32_t
 
WaveAutoG√≠√Æ¬©i‚ÅÑ
;

143 
u√∂t32_t
 
WaveAutoG√≠√Æ¬©i‚ÅÑC‚ÅÑfig
;

151 
u√∂t32_t
 
Ou√ßutBuf‚Äûr
;

156 } 
	tLL_DAC_In√¥Ty‚â•Def
;

173 
	#LL_DAC_FLAG_DMAUDR1
 (
DAC_SR_DMAUDR1
√ã

	)

176 
	#LL_DAC_FLAG_DMAUDR2
 (
DAC_SR_DMAUDR2
√ã

	)

185 
	#LL_DAC_IT_DMAUDRIE1
 (
DAC_CR_DMAUDRIE1
√ã

	)

186 
	#LL_DAC_IT_DMAUDRIE2
 (
DAC_CR_DMAUDRIE2
√ã

	)

194 
	#LL_DAC_CHANNEL_1
 (
DAC_REG_DOR1_REGOFFSET
 | 
DAC_REG_DHR12R1_REGOFFSET
 | 
DAC_REG_DHR12L1_REGOFFSET
 | 
DAC_REG_DHR8R1_REGOFFSET
 | 
DAC_CR_CH1_BITOFFSET
 | 
DAC_SWTR_CH1
√ã

	)

195 
	#LL_DAC_CHANNEL_2
 (
DAC_REG_DOR2_REGOFFSET
 | 
DAC_REG_DHR12R2_REGOFFSET
 | 
DAC_REG_DHR12L2_REGOFFSET
 | 
DAC_REG_DHR8R2_REGOFFSET
 | 
DAC_CR_CH2_BITOFFSET
 | 
DAC_SWTR_CH2
√ã

	)

203 
	#LL_DAC_TRIG_SOFTWARE
 (
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
√ã

	)

204 
	#LL_DAC_TRIG_EXT_TIM3_TRGO
 ( 
DAC_CR_TSEL1_0
√ã

	)

205 
	#LL_DAC_TRIG_EXT_TIM15_TRGO
 ( 
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
√ã

	)

206 
	#LL_DAC_TRIG_EXT_TIM2_TRGO
 (
DAC_CR_TSEL1_2
 )

	)

207 
	#LL_DAC_TRIG_EXT_TIM8_TRGO
 ( 
DAC_CR_TSEL1_0
√ã

	)

208 
	#LL_DAC_TRIG_EXT_TIM4_TRGO
 (
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_0
√ã

	)

209 
	#LL_DAC_TRIG_EXT_TIM6_TRGO
 0x00000000U

	)

210 
	#LL_DAC_TRIG_EXT_TIM7_TRGO
 ( 
DAC_CR_TSEL1_1
 )

	)

211 
	#LL_DAC_TRIG_EXT_TIM5_TRGO
 ( 
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
√ã

	)

212 
	#LL_DAC_TRIG_EXT_EXTI_LINE9
 (
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_1
 )

	)

220 
	#LL_DAC_WAVE_AUTO_GENERATION_NONE
 0x00000000U

	)

221 
	#LL_DAC_WAVE_AUTO_GENERATION_NOISE
 ( 
DAC_CR_WAVE1_0
√ã

	)

222 
	#LL_DAC_WAVE_AUTO_GENERATION_TRIANGLE
 (
DAC_CR_WAVE1_1
 )

	)

230 
	#LL_DAC_NOISE_LFSR_UNMASK_BIT0
 0x00000000U

	)

231 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS1_0
 ( 
DAC_CR_MAMP1_0
√ã

	)

232 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS2_0
 ( 
DAC_CR_MAMP1_1
 )

	)

233 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS3_0
 ( 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

234 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS4_0
 ( 
DAC_CR_MAMP1_2
 )

	)

235 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS5_0
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
√ã

	)

236 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS6_0
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 )

	)

237 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS7_0
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

238 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS8_0
 (
DAC_CR_MAMP1_3
 )

	)

239 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS9_0
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
√ã

	)

240 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS10_0
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 )

	)

241 
	#LL_DAC_NOISE_LFSR_UNMASK_BITS11_0
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

249 
	#LL_DAC_TRIANGLE_AMPLITUDE_1
 0x00000000U

	)

250 
	#LL_DAC_TRIANGLE_AMPLITUDE_3
 ( 
DAC_CR_MAMP1_0
√ã

	)

251 
	#LL_DAC_TRIANGLE_AMPLITUDE_7
 ( 
DAC_CR_MAMP1_1
 )

	)

252 
	#LL_DAC_TRIANGLE_AMPLITUDE_15
 ( 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

253 
	#LL_DAC_TRIANGLE_AMPLITUDE_31
 ( 
DAC_CR_MAMP1_2
 )

	)

254 
	#LL_DAC_TRIANGLE_AMPLITUDE_63
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
√ã

	)

255 
	#LL_DAC_TRIANGLE_AMPLITUDE_127
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 )

	)

256 
	#LL_DAC_TRIANGLE_AMPLITUDE_255
 ( 
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

257 
	#LL_DAC_TRIANGLE_AMPLITUDE_511
 (
DAC_CR_MAMP1_3
 )

	)

258 
	#LL_DAC_TRIANGLE_AMPLITUDE_1023
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
√ã

	)

259 
	#LL_DAC_TRIANGLE_AMPLITUDE_2047
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 )

	)

260 
	#LL_DAC_TRIANGLE_AMPLITUDE_4095
 (
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
√ã

	)

268 
	#LL_DAC_OUTPUT_BUFFER_ENABLE
 0x00000000U

	)

269 
	#LL_DAC_OUTPUT_BUFFER_DISABLE
 (
DAC_CR_BOFF1
√ã

	)

277 
	#LL_DAC_RESOLUTION_12B
 0x00000000U

	)

278 
	#LL_DAC_RESOLUTION_8B
 0x00000002U

	)

289 
	#LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED
 
DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS


	)

290 
	#LL_DAC_DMA_REG_DATA_12BITS_LEFT_ALIGNED
 
DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS


	)

291 
	#LL_DAC_DMA_REG_DATA_8BITS_RIGHT_ALIGNED
 
DAC_REG_DHR8RX_REGOFFSET_BITOFFSET_POS


	)

316 
	#LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US
 15U

	)

329 
	#LL_DAC_DELAY_VOLTAGE_SETTLING_US
 12U

	)

355 
	#LL_DAC_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

363 
	#LL_DAC_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

386 
	#__LL_DAC_CHANNEL_TO_DECIMAL_NB
(
__CHANNEL__
) \

387 ((
__CHANNEL__
√ã& 
DAC_SWTR_CHX_MASK
)

	)

402 
	#__LL_DAC_DECIMAL_NB_TO_CHANNEL
(
__DECIMAL_NB__
) \

403 (((
__DECIMAL_NB__
) == 1U) \

405 
LL_DAC_CHANNEL_1
 \

408 (((
__DECIMAL_NB__
) == 2U) \

410 
LL_DAC_CHANNEL_2
 \

417 )

	)

430 
	#__LL_DAC_DIGITAL_SCALE
(
__DAC_RESOLUTION__
) \

431 ((0x00000FFFU√ã>> ((
__DAC_RESOLUTION__
√ã<< 1U))

	)

451 
	#__LL_DAC_CALC_VOLTAGE_TO_DATA
(
__VREFANALOG_VOLTAGE__
,\

452 
__DAC_VOLTAGE__
,\

453 
__DAC_RESOLUTION__
) \

454 ((
__DAC_VOLTAGE__
√ã* 
	`__LL_DAC_DIGITAL_SCALE
(
__DAC_RESOLUTION__
) \

455 / (
__VREFANALOG_VOLTAGE__
) \

456 )

	)

497 
__STATIC_INLINE
 
LL_DAC_S√´Trigg√ÆSourÀö
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
Trigg√ÆSourÀö
)

499 
MODIFY_REG
(
DACx
->
CR
,

500 
DAC_CR_TSEL1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
),

501 
Trigg√ÆSourÀö
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

527 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_G√´Trigg√ÆSourÀö
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

529  (
u√∂t32_t
)(
READ_BIT
(
DACx
->
CR
, 
DAC_CR_TSEL1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

530 >> (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

549 
__STATIC_INLINE
 
LL_DAC_S√´WaveAutoG√≠√Æ¬©i‚ÅÑ
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
WaveAutoG√≠√Æ¬©i‚ÅÑ
)

551 
MODIFY_REG
(
DACx
->
CR
,

552 
DAC_CR_WAVE1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
),

553 
WaveAutoG√≠√Æ¬©i‚ÅÑ
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

570 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_G√´WaveAutoG√≠√Æ¬©i‚ÅÑ
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

572  (
u√∂t32_t
)(
READ_BIT
(
DACx
->
CR
, 
DAC_CR_WAVE1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

573 >> (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

606 
__STATIC_INLINE
 
LL_DAC_S√´WaveNoi¬£LFSR
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
Noi¬£LFSRMask
)

608 
MODIFY_REG
(
DACx
->
CR
,

609 
DAC_CR_MAMP1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
),

610 
Noi¬£LFSRMask
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

636 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_G√´WaveNoi¬£LFSR
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

638  (
u√∂t32_t
)(
READ_BIT
(
DACx
->
CR
, 
DAC_CR_MAMP1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

639 >> (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

672 
__STATIC_INLINE
 
LL_DAC_S√´WaveTr√ºng√ÄAm‚àÇ√¥ude
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
,

673 
u√∂t32_t
 
Tr√ºng√ÄAm‚àÇ√¥ude
)

675 
MODIFY_REG
(
DACx
->
CR
,

676 
DAC_CR_MAMP1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
),

677 
Tr√ºng√ÄAm‚àÇ√¥ude
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

703 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_G√´WaveTr√ºng√ÄAm‚àÇ√¥ude
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

705  (
u√∂t32_t
)(
READ_BIT
(
DACx
->
CR
, 
DAC_CR_MAMP1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

706 >> (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

723 
__STATIC_INLINE
 
LL_DAC_S√´Ou√ßutBuf‚Äûr
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
Ou√ßutBuf‚Äûr
)

725 
MODIFY_REG
(
DACx
->
CR
,

726 
DAC_CR_BOFF1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
),

727 
Ou√ßutBuf‚Äûr
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

742 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_G√´Ou√ßutBuf‚Äûr
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

744  (
u√∂t32_t
)(
READ_BIT
(
DACx
->
CR
, 
DAC_CR_BOFF1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

745 >> (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

769 
__STATIC_INLINE
 
LL_DAC_E¬´b√ÄDMAReq
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

771 
SET_BIT
(
DACx
->
CR
,

772 
DAC_CR_DMAEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

787 
__STATIC_INLINE
 
LL_DAC_Di√üb√ÄDMAReq
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

789 
CLEAR_BIT
(
DACx
->
CR
,

790 
DAC_CR_DMAEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

804 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsDMAReqE¬´b√Äd
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

806  ((
READ_BIT
(
DACx
->
CR
,

807 
DAC_CR_DMAEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

808 =Ô£ø(
DAC_CR_DMAEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))) ? 1UL : 0UL);

842 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_DMA_G√´RegAddr
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
Regi¬∞√Æ
)

846  ((
u√∂t32_t
)(
__DAC_PTR_REG_OFFSET
((
DACx
)->
DHR12R1
,

847 ((
DAC_Ch‚Ñ¢‚àöl
 >> (
Regi¬∞√Æ
 & 0x1FUL)√ã& 
DAC_REG_DHR_REGOFFSET_MASK_POSBIT0
))));

870 
__STATIC_INLINE
 
LL_DAC_E¬´b√Ä
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

872 
SET_BIT
(
DACx
->
CR
,

873 
DAC_CR_EN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

886 
__STATIC_INLINE
 
LL_DAC_Di√üb√Ä
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

888 
CLEAR_BIT
(
DACx
->
CR
,

889 
DAC_CR_EN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

903 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsE¬´b√Äd
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

905  ((
READ_BIT
(
DACx
->
CR
,

906 
DAC_CR_EN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

907 =Ô£ø(
DAC_CR_EN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))) ? 1UL : 0UL);

928 
__STATIC_INLINE
 
LL_DAC_E¬´b√ÄTrigg√Æ
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

930 
SET_BIT
(
DACx
->
CR
,

931 
DAC_CR_TEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

944 
__STATIC_INLINE
 
LL_DAC_Di√üb√ÄTrigg√Æ
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

946 
CLEAR_BIT
(
DACx
->
CR
,

947 
DAC_CR_TEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
));

961 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsTrigg√ÆE¬´b√Äd
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

963  ((
READ_BIT
(
DACx
->
CR
,

964 
DAC_CR_TEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))

965 =Ô£ø(
DAC_CR_TEN1
 << (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
))) ? 1UL : 0UL);

989 
__STATIC_INLINE
 
LL_DAC_TrigSWC‚ÅÑv√Æsi‚ÅÑ
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
)

991 
SET_BIT
(
DACx
->
SWTRIGR
,

992 (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_SWTR_CHX_MASK
));

1008 
__STATIC_INLINE
 
LL_DAC_C‚ÅÑv√ÆtD¬©a12RightAlig‚àöd
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
D¬©a
)

1010 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__DAC_PTR_REG_OFFSET
(
DACx
->
DHR12R1
, (
DAC_Ch‚Ñ¢‚àöl
 >> 
DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS
√ã& 
DAC_REG_DHR_REGOFFSET_MASK_POSBIT0
);

1012 
MODIFY_REG
(*
¬•eg
,

1013 
DAC_DHR12R1_DACC1DHR
,

1014 
D¬©a
);

1030 
__STATIC_INLINE
 
LL_DAC_C‚ÅÑv√ÆtD¬©a12Le¬∑Alig‚àöd
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
D¬©a
)

1032 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__DAC_PTR_REG_OFFSET
(
DACx
->
DHR12R1
, (
DAC_Ch‚Ñ¢‚àöl
 >> 
DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS
√ã& 
DAC_REG_DHR_REGOFFSET_MASK_POSBIT0
);

1034 
MODIFY_REG
(*
¬•eg
,

1035 
DAC_DHR12L1_DACC1DHR
,

1036 
D¬©a
);

1052 
__STATIC_INLINE
 
LL_DAC_C‚ÅÑv√ÆtD¬©a8RightAlig‚àöd
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, u√∂t32_√†
D¬©a
)

1054 
__IO
 
u√∂t32_t
 *
¬•eg
 = 
__DAC_PTR_REG_OFFSET
(
DACx
->
DHR12R1
, (
DAC_Ch‚Ñ¢‚àöl
 >> 
DAC_REG_DHR8RX_REGOFFSET_BITOFFSET_POS
√ã& 
DAC_REG_DHR_REGOFFSET_MASK_POSBIT0
);

1056 
MODIFY_REG
(*
¬•eg
,

1057 
DAC_DHR8R1_DACC1DHR
,

1058 
D¬©a
);

1073 
__STATIC_INLINE
 
LL_DAC_C‚ÅÑv√ÆtDu√ÜD¬©a12RightAlig‚àöd
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
D¬©aCh‚Ñ¢‚àöl1
,

1074 
u√∂t32_t
 
D¬©aCh‚Ñ¢‚àöl2
)

1076 
MODIFY_REG
(
DACx
->
DHR12RD
,

1077 (
DAC_DHR12RD_DACC2DHR
 | 
DAC_DHR12RD_DACC1DHR
),

1078 ((
D¬©aCh‚Ñ¢‚àöl2
 << 
DAC_DHR12RD_DACC2DHR_BITOFFSET_POS
√ã| 
D¬©aCh‚Ñ¢‚àöl1
));

1092 
__STATIC_INLINE
 
LL_DAC_C‚ÅÑv√ÆtDu√ÜD¬©a12Le¬∑Alig‚àöd
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
D¬©aCh‚Ñ¢‚àöl1
,

1093 
u√∂t32_t
 
D¬©aCh‚Ñ¢‚àöl2
)

1098 
MODIFY_REG
(
DACx
->
DHR12LD
,

1099 (
DAC_DHR12LD_DACC2DHR
 | 
DAC_DHR12LD_DACC1DHR
),

1100 ((
D¬©aCh‚Ñ¢‚àöl2
 << (
DAC_DHR12LD_DACC2DHR_BITOFFSET_POS
 - 4U)√ã| 
D¬©aCh‚Ñ¢‚àöl1
));

1114 
__STATIC_INLINE
 
LL_DAC_C‚ÅÑv√ÆtDu√ÜD¬©a8RightAlig‚àöd
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
D¬©aCh‚Ñ¢‚àöl1
,

1115 
u√∂t32_t
 
D¬©aCh‚Ñ¢‚àöl2
)

1117 
MODIFY_REG
(
DACx
->
DHR8RD
,

1118 (
DAC_DHR8RD_DACC2DHR
 | 
DAC_DHR8RD_DACC1DHR
),

1119 ((
D¬©aCh‚Ñ¢‚àöl2
 << 
DAC_DHR8RD_DACC2DHR_BITOFFSET_POS
√ã| 
D¬©aCh‚Ñ¢‚àöl1
));

1137 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_R√´r√µveOu√ßutD¬©a
(
DAC_Ty‚â•Def
 *
DACx
, u√∂t32_√†
DAC_Ch‚Ñ¢‚àöl
)

1139 
__IO
 
u√∂t32_t
 c‚ÅÑ¬∞ *
¬•eg
 = 
__DAC_PTR_REG_OFFSET
(
DACx
->
DOR1
, (
DAC_Ch‚Ñ¢‚àöl
 >> 
DAC_REG_DORX_REGOFFSET_BITOFFSET_POS
√ã& 
DAC_REG_DORX_REGOFFSET_MASK_POSBIT0
);

1141  (
u√∂t16_t
√ã
READ_BIT
(*
¬•eg
, 
DAC_DOR1_DACC1DOR
);

1151 #i‚Ä°
def√∂ed
(
DAC_SR_DMAUDR1
)

1158 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsAÀòiveF≈ìg_DMAUDR1
(
DAC_Ty‚â•Def
 *
DACx
)

1160  ((
READ_BIT
(
DACx
->
SR
, 
LL_DAC_FLAG_DMAUDR1
) == (LL_DAC_FLAG_DMAUDR1)) ? 1UL : 0UL);

1164 #i‚Ä°
def√∂ed
(
DAC_SR_DMAUDR2
)

1171 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsAÀòiveF≈ìg_DMAUDR2
(
DAC_Ty‚â•Def
 *
DACx
)

1173  ((
READ_BIT
(
DACx
->
SR
, 
LL_DAC_FLAG_DMAUDR2
) == (LL_DAC_FLAG_DMAUDR2)) ? 1UL : 0UL);

1177 #i‚Ä°
def√∂ed
(
DAC_SR_DMAUDR1
)

1184 
__STATIC_INLINE
 
LL_DAC_C√Ä¬®F≈ìg_DMAUDR1
(
DAC_Ty‚â•Def
 *
DACx
)

1186 
WRITE_REG
(
DACx
->
SR
, 
LL_DAC_FLAG_DMAUDR1
);

1190 #i‚Ä°
def√∂ed
(
DAC_SR_DMAUDR2
)

1197 
__STATIC_INLINE
 
LL_DAC_C√Ä¬®F≈ìg_DMAUDR2
(
DAC_Ty‚â•Def
 *
DACx
)

1199 
WRITE_REG
(
DACx
->
SR
, 
LL_DAC_FLAG_DMAUDR2
);

1210 #i‚Ä°
def√∂ed
(
DAC_CR_DMAUDRIE1
)

1217 
__STATIC_INLINE
 
LL_DAC_E¬´b√ÄIT_DMAUDR1
(
DAC_Ty‚â•Def
 *
DACx
)

1219 
SET_BIT
(
DACx
->
CR
, 
LL_DAC_IT_DMAUDRIE1
);

1223 #i‚Ä°
def√∂ed
(
DAC_CR_DMAUDRIE2
)

1230 
__STATIC_INLINE
 
LL_DAC_E¬´b√ÄIT_DMAUDR2
(
DAC_Ty‚â•Def
 *
DACx
)

1232 
SET_BIT
(
DACx
->
CR
, 
LL_DAC_IT_DMAUDRIE2
);

1236 #i‚Ä°
def√∂ed
(
DAC_CR_DMAUDRIE1
)

1243 
__STATIC_INLINE
 
LL_DAC_Di√üb√ÄIT_DMAUDR1
(
DAC_Ty‚â•Def
 *
DACx
)

1245 
CLEAR_BIT
(
DACx
->
CR
, 
LL_DAC_IT_DMAUDRIE1
);

1249 #i‚Ä°
def√∂ed
(
DAC_CR_DMAUDRIE2
)

1256 
__STATIC_INLINE
 
LL_DAC_Di√üb√ÄIT_DMAUDR2
(
DAC_Ty‚â•Def
 *
DACx
)

1258 
CLEAR_BIT
(
DACx
->
CR
, 
LL_DAC_IT_DMAUDRIE2
);

1262 #i‚Ä°
def√∂ed
(
DAC_CR_DMAUDRIE1
)

1269 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsE¬´b√ÄdIT_DMAUDR1
(
DAC_Ty‚â•Def
 *
DACx
)

1271  ((
READ_BIT
(
DACx
->
CR
, 
LL_DAC_IT_DMAUDRIE1
) == (LL_DAC_IT_DMAUDRIE1)) ? 1UL : 0UL);

1275 #i‚Ä°
def√∂ed
(
DAC_CR_DMAUDRIE2
)

1282 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DAC_IsE¬´b√ÄdIT_DMAUDR2
(
DAC_Ty‚â•Def
 *
DACx
)

1284  ((
READ_BIT
(
DACx
->
CR
, 
LL_DAC_IT_DMAUDRIE2
) == (LL_DAC_IT_DMAUDRIE2)) ? 1UL : 0UL);

1292 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1297 
E¬∫‚ÄπS√®tus
 
LL_DAC_DeIn√¥
(
DAC_Ty‚â•Def
 *
DACx
);

1298 
E¬∫‚ÄπS√®tus
 
LL_DAC_In√¥
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, 
LL_DAC_In√¥Ty‚â•Def
 *
DAC_In√¥S√•uÀò
);

1299 
LL_DAC_S√•uÀòIn√¥
(
LL_DAC_In√¥Ty‚â•Def
 *
DAC_In√¥S√•uÀò
);

1320 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_dma.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_DMA_H


22 
	#__STM32F1xx_LL_DMA_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
DMA1
√ã|| def√∂ed (
DMA2
)

47 c‚ÅÑ¬∞ 
u√∂t8_t
 
CHANNEL_OFFSET_TAB
[] =

49 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl1_BASE
 - 
DMA1_BASE
),

50 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl2_BASE
 - 
DMA1_BASE
),

51 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl3_BASE
 - 
DMA1_BASE
),

52 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl4_BASE
 - 
DMA1_BASE
),

53 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl5_BASE
 - 
DMA1_BASE
),

54 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl6_BASE
 - 
DMA1_BASE
),

55 (
u√∂t8_t
)(
DMA1_Ch‚Ñ¢‚àöl7_BASE
 - 
DMA1_BASE
)

62 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

72 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

78 
u√∂t32_t
 
P√Æ√πhOrM2MSrcAdd¬™ss
;

83 
u√∂t32_t
 
Mem‚ÄπyOrM2MD¬∞Add¬™ss
;

88 
u√∂t32_t
 
D√∫eÀòi‚ÅÑ
;

94 
u√∂t32_t
 
Mode
;

101 
u√∂t32_t
 
P√Æ√πhOrM2MSrcIncMode
;

107 
u√∂t32_t
 
Mem‚ÄπyOrM2MD¬∞IncMode
;

113 
u√∂t32_t
 
P√Æ√πhOrM2MSrcD¬©aSize
;

119 
u√∂t32_t
 
Mem‚ÄπyOrM2MD¬∞D¬©aSize
;

125 
u√∂t32_t
 
NbD¬©a
;

132 
u√∂t32_t
 
Pri‚Äπ√¥y
;

137 } 
	tLL_DMA_In√¥Ty‚â•Def
;

151 
	#LL_DMA_IFCR_CGIF1
 
DMA_IFCR_CGIF1


	)

152 
	#LL_DMA_IFCR_CTCIF1
 
DMA_IFCR_CTCIF1


	)

153 
	#LL_DMA_IFCR_CHTIF1
 
DMA_IFCR_CHTIF1


	)

154 
	#LL_DMA_IFCR_CTEIF1
 
DMA_IFCR_CTEIF1


	)

155 
	#LL_DMA_IFCR_CGIF2
 
DMA_IFCR_CGIF2


	)

156 
	#LL_DMA_IFCR_CTCIF2
 
DMA_IFCR_CTCIF2


	)

157 
	#LL_DMA_IFCR_CHTIF2
 
DMA_IFCR_CHTIF2


	)

158 
	#LL_DMA_IFCR_CTEIF2
 
DMA_IFCR_CTEIF2


	)

159 
	#LL_DMA_IFCR_CGIF3
 
DMA_IFCR_CGIF3


	)

160 
	#LL_DMA_IFCR_CTCIF3
 
DMA_IFCR_CTCIF3


	)

161 
	#LL_DMA_IFCR_CHTIF3
 
DMA_IFCR_CHTIF3


	)

162 
	#LL_DMA_IFCR_CTEIF3
 
DMA_IFCR_CTEIF3


	)

163 
	#LL_DMA_IFCR_CGIF4
 
DMA_IFCR_CGIF4


	)

164 
	#LL_DMA_IFCR_CTCIF4
 
DMA_IFCR_CTCIF4


	)

165 
	#LL_DMA_IFCR_CHTIF4
 
DMA_IFCR_CHTIF4


	)

166 
	#LL_DMA_IFCR_CTEIF4
 
DMA_IFCR_CTEIF4


	)

167 
	#LL_DMA_IFCR_CGIF5
 
DMA_IFCR_CGIF5


	)

168 
	#LL_DMA_IFCR_CTCIF5
 
DMA_IFCR_CTCIF5


	)

169 
	#LL_DMA_IFCR_CHTIF5
 
DMA_IFCR_CHTIF5


	)

170 
	#LL_DMA_IFCR_CTEIF5
 
DMA_IFCR_CTEIF5


	)

171 
	#LL_DMA_IFCR_CGIF6
 
DMA_IFCR_CGIF6


	)

172 
	#LL_DMA_IFCR_CTCIF6
 
DMA_IFCR_CTCIF6


	)

173 
	#LL_DMA_IFCR_CHTIF6
 
DMA_IFCR_CHTIF6


	)

174 
	#LL_DMA_IFCR_CTEIF6
 
DMA_IFCR_CTEIF6


	)

175 
	#LL_DMA_IFCR_CGIF7
 
DMA_IFCR_CGIF7


	)

176 
	#LL_DMA_IFCR_CTCIF7
 
DMA_IFCR_CTCIF7


	)

177 
	#LL_DMA_IFCR_CHTIF7
 
DMA_IFCR_CHTIF7


	)

178 
	#LL_DMA_IFCR_CTEIF7
 
DMA_IFCR_CTEIF7


	)

187 
	#LL_DMA_ISR_GIF1
 
DMA_ISR_GIF1


	)

188 
	#LL_DMA_ISR_TCIF1
 
DMA_ISR_TCIF1


	)

189 
	#LL_DMA_ISR_HTIF1
 
DMA_ISR_HTIF1


	)

190 
	#LL_DMA_ISR_TEIF1
 
DMA_ISR_TEIF1


	)

191 
	#LL_DMA_ISR_GIF2
 
DMA_ISR_GIF2


	)

192 
	#LL_DMA_ISR_TCIF2
 
DMA_ISR_TCIF2


	)

193 
	#LL_DMA_ISR_HTIF2
 
DMA_ISR_HTIF2


	)

194 
	#LL_DMA_ISR_TEIF2
 
DMA_ISR_TEIF2


	)

195 
	#LL_DMA_ISR_GIF3
 
DMA_ISR_GIF3


	)

196 
	#LL_DMA_ISR_TCIF3
 
DMA_ISR_TCIF3


	)

197 
	#LL_DMA_ISR_HTIF3
 
DMA_ISR_HTIF3


	)

198 
	#LL_DMA_ISR_TEIF3
 
DMA_ISR_TEIF3


	)

199 
	#LL_DMA_ISR_GIF4
 
DMA_ISR_GIF4


	)

200 
	#LL_DMA_ISR_TCIF4
 
DMA_ISR_TCIF4


	)

201 
	#LL_DMA_ISR_HTIF4
 
DMA_ISR_HTIF4


	)

202 
	#LL_DMA_ISR_TEIF4
 
DMA_ISR_TEIF4


	)

203 
	#LL_DMA_ISR_GIF5
 
DMA_ISR_GIF5


	)

204 
	#LL_DMA_ISR_TCIF5
 
DMA_ISR_TCIF5


	)

205 
	#LL_DMA_ISR_HTIF5
 
DMA_ISR_HTIF5


	)

206 
	#LL_DMA_ISR_TEIF5
 
DMA_ISR_TEIF5


	)

207 
	#LL_DMA_ISR_GIF6
 
DMA_ISR_GIF6


	)

208 
	#LL_DMA_ISR_TCIF6
 
DMA_ISR_TCIF6


	)

209 
	#LL_DMA_ISR_HTIF6
 
DMA_ISR_HTIF6


	)

210 
	#LL_DMA_ISR_TEIF6
 
DMA_ISR_TEIF6


	)

211 
	#LL_DMA_ISR_GIF7
 
DMA_ISR_GIF7


	)

212 
	#LL_DMA_ISR_TCIF7
 
DMA_ISR_TCIF7


	)

213 
	#LL_DMA_ISR_HTIF7
 
DMA_ISR_HTIF7


	)

214 
	#LL_DMA_ISR_TEIF7
 
DMA_ISR_TEIF7


	)

223 
	#LL_DMA_CCR_TCIE
 
DMA_CCR_TCIE


	)

224 
	#LL_DMA_CCR_HTIE
 
DMA_CCR_HTIE


	)

225 
	#LL_DMA_CCR_TEIE
 
DMA_CCR_TEIE


	)

233 
	#LL_DMA_CHANNEL_1
 0x00000001U

	)

234 
	#LL_DMA_CHANNEL_2
 0x00000002U

	)

235 
	#LL_DMA_CHANNEL_3
 0x00000003U

	)

236 
	#LL_DMA_CHANNEL_4
 0x00000004U

	)

237 
	#LL_DMA_CHANNEL_5
 0x00000005U

	)

238 
	#LL_DMA_CHANNEL_6
 0x00000006U

	)

239 
	#LL_DMA_CHANNEL_7
 0x00000007U

	)

240 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

241 
	#LL_DMA_CHANNEL_ALL
 0xFFFF0000U

	)

250 
	#LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 0x00000000U

	)

251 
	#LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 
DMA_CCR_DIR


	)

252 
	#LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 
DMA_CCR_MEM2MEM


	)

260 
	#LL_DMA_MODE_NORMAL
 0x00000000U

	)

261 
	#LL_DMA_MODE_CIRCULAR
 
DMA_CCR_CIRC


	)

269 
	#LL_DMA_PERIPH_INCREMENT
 
DMA_CCR_PINC


	)

270 
	#LL_DMA_PERIPH_NOINCREMENT
 0x00000000U

	)

278 
	#LL_DMA_MEMORY_INCREMENT
 
DMA_CCR_MINC


	)

279 
	#LL_DMA_MEMORY_NOINCREMENT
 0x00000000U

	)

287 
	#LL_DMA_PDATAALIGN_BYTE
 0x00000000U

	)

288 
	#LL_DMA_PDATAALIGN_HALFWORD
 
DMA_CCR_PSIZE_0


	)

289 
	#LL_DMA_PDATAALIGN_WORD
 
DMA_CCR_PSIZE_1


	)

297 
	#LL_DMA_MDATAALIGN_BYTE
 0x00000000U

	)

298 
	#LL_DMA_MDATAALIGN_HALFWORD
 
DMA_CCR_MSIZE_0


	)

299 
	#LL_DMA_MDATAALIGN_WORD
 
DMA_CCR_MSIZE_1


	)

307 
	#LL_DMA_PRIORITY_LOW
 0x00000000U

	)

308 
	#LL_DMA_PRIORITY_MEDIUM
 
DMA_CCR_PL_0


	)

309 
	#LL_DMA_PRIORITY_HIGH
 
DMA_CCR_PL_1


	)

310 
	#LL_DMA_PRIORITY_VERYHIGH
 
DMA_CCR_PL


	)

334 
	#LL_DMA_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

342 
	#LL_DMA_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

356 #i‚Ä°
def√∂ed
(
DMA2
)

357 
	#__LL_DMA_GET_INSTANCE
(
__CHANNEL_INSTANCE__
) \

358 (((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã> ((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl7
)√ã? 
DMA2
 : 
DMA1
)

	)

360 
	#__LL_DMA_GET_INSTANCE
(
__CHANNEL_INSTANCE__
√ã(
DMA1
)

	)

368 #i‚Ä°
def√∂ed
 (
DMA2
)

369 
	#__LL_DMA_GET_CHANNEL
(
__CHANNEL_INSTANCE__
) \

370 (((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
)√ã? 
LL_DMA_CHANNEL_1
 : \

371 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
)√ã? 
LL_DMA_CHANNEL_1
 : \

372 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
)√ã? 
LL_DMA_CHANNEL_2
 : \

373 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
)√ã? 
LL_DMA_CHANNEL_2
 : \

374 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
)√ã? 
LL_DMA_CHANNEL_3
 : \

375 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl3
)√ã? 
LL_DMA_CHANNEL_3
 : \

376 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
)√ã? 
LL_DMA_CHANNEL_4
 : \

377 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl4
)√ã? 
LL_DMA_CHANNEL_4
 : \

378 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
)√ã? 
LL_DMA_CHANNEL_5
 : \

379 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl5
)√ã? 
LL_DMA_CHANNEL_5
 : \

380 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
)√ã? 
LL_DMA_CHANNEL_6
 : \

381 
LL_DMA_CHANNEL_7
)

	)

383 
	#__LL_DMA_GET_CHANNEL
(
__CHANNEL_INSTANCE__
) \

384 (((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
)√ã? 
LL_DMA_CHANNEL_1
 : \

385 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
)√ã? 
LL_DMA_CHANNEL_2
 : \

386 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl3
)√ã? 
LL_DMA_CHANNEL_3
 : \

387 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl4
)√ã? 
LL_DMA_CHANNEL_4
 : \

388 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl5
)√ã? 
LL_DMA_CHANNEL_5
 : \

389 ((
u√∂t32_t
)(
__CHANNEL_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl6
)√ã? 
LL_DMA_CHANNEL_6
 : \

390 
LL_DMA_CHANNEL_7
)

	)

399 #i‚Ä°
def√∂ed
 (
DMA2
)

400 
	#__LL_DMA_GET_CHANNEL_INSTANCE
(
__DMA_INSTANCE__
, 
__CHANNEL__
) \

401 ((((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_1
))√ã? 
DMA1_Ch‚Ñ¢‚àöl1
 : \

402 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_1
))√ã? 
DMA2_Ch‚Ñ¢‚àöl1
 : \

403 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_2
))√ã? 
DMA1_Ch‚Ñ¢‚àöl2
 : \

404 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_2
))√ã? 
DMA2_Ch‚Ñ¢‚àöl2
 : \

405 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_3
))√ã? 
DMA1_Ch‚Ñ¢‚àöl3
 : \

406 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_3
))√ã? 
DMA2_Ch‚Ñ¢‚àöl3
 : \

407 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_4
))√ã? 
DMA1_Ch‚Ñ¢‚àöl4
 : \

408 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_4
))√ã? 
DMA2_Ch‚Ñ¢‚àöl4
 : \

409 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_5
))√ã? 
DMA1_Ch‚Ñ¢‚àöl5
 : \

410 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA2
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_5
))√ã? 
DMA2_Ch‚Ñ¢‚àöl5
 : \

411 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_6
))√ã? 
DMA1_Ch‚Ñ¢‚àöl6
 : \

412 
DMA1_Ch‚Ñ¢‚àöl7
)

	)

414 
	#__LL_DMA_GET_CHANNEL_INSTANCE
(
__DMA_INSTANCE__
, 
__CHANNEL__
) \

415 ((((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_1
))√ã? 
DMA1_Ch‚Ñ¢‚àöl1
 : \

416 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_2
))√ã? 
DMA1_Ch‚Ñ¢‚àöl2
 : \

417 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_3
))√ã? 
DMA1_Ch‚Ñ¢‚àöl3
 : \

418 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_4
))√ã? 
DMA1_Ch‚Ñ¢‚àöl4
 : \

419 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_5
))√ã? 
DMA1_Ch‚Ñ¢‚àöl5
 : \

420 (((
u√∂t32_t
)(
__DMA_INSTANCE__
√ã=Ô£ø((u√∂t32_t)
DMA1
)√ã&& ((u√∂t32_t)(
__CHANNEL__
√ã=Ô£ø((u√∂t32_t)
LL_DMA_CHANNEL_6
))√ã? 
DMA1_Ch‚Ñ¢‚àöl6
 : \

421 
DMA1_Ch‚Ñ¢‚àöl7
)

	)

454 
__STATIC_INLINE
 
LL_DMA_E¬´b√ÄCh‚Ñ¢‚àöl
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

456 
SET_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_EN
);

473 
__STATIC_INLINE
 
LL_DMA_Di√üb√ÄCh‚Ñ¢‚àöl
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

475 
CLEAR_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_EN
);

492 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsE¬´b√ÄdCh‚Ñ¢‚àöl
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

494  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

495 
DMA_CCR_EN
) == (DMA_CCR_EN));

527 
__STATIC_INLINE
 
LL_DMA_C‚ÅÑfigT√∏ns‚Äûr
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
C‚ÅÑfigu√∏ti‚ÅÑ
)

529 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

530 
DMA_CCR_DIR
 | 
DMA_CCR_MEM2MEM
 | 
DMA_CCR_CIRC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_MINC
 | 
DMA_CCR_PSIZE
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PL
,

531 
C‚ÅÑfigu√∏ti‚ÅÑ
);

553 
__STATIC_INLINE
 
LL_DMA_S√´D¬©aT√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
D√∫eÀòi‚ÅÑ
)

555 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

556 
DMA_CCR_DIR
 | 
DMA_CCR_MEM2MEM
, 
D√∫eÀòi‚ÅÑ
);

577 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´D¬©aT√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

579  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

580 
DMA_CCR_DIR
 | 
DMA_CCR_MEM2MEM
));

602 
__STATIC_INLINE
 
LL_DMA_S√´Mode
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mode
)

604 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_CIRC
,

605 
Mode
);

624 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´Mode
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

626  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

627 
DMA_CCR_CIRC
));

647 
__STATIC_INLINE
 
LL_DMA_S√´P√Æ√πhIncMode
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
P√Æ√πhOrM2MSrcIncMode
)

649 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_PINC
,

650 
P√Æ√πhOrM2MSrcIncMode
);

669 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´P√Æ√πhIncMode
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

671  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

672 
DMA_CCR_PINC
));

692 
__STATIC_INLINE
 
LL_DMA_S√´Mem‚ÄπyIncMode
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mem‚ÄπyOrM2MD¬∞IncMode
)

694 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_MINC
,

695 
Mem‚ÄπyOrM2MD¬∞IncMode
);

714 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´Mem‚ÄπyIncMode
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

716  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

717 
DMA_CCR_MINC
));

738 
__STATIC_INLINE
 
LL_DMA_S√´P√Æ√πhSize
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
P√Æ√πhOrM2MSrcD¬©aSize
)

740 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_PSIZE
,

741 
P√Æ√πhOrM2MSrcD¬©aSize
);

761 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´P√Æ√πhSize
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

763  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

764 
DMA_CCR_PSIZE
));

785 
__STATIC_INLINE
 
LL_DMA_S√´Mem‚ÄπySize
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mem‚ÄπyOrM2MD¬∞D¬©aSize
)

787 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_MSIZE
,

788 
Mem‚ÄπyOrM2MD¬∞D¬©aSize
);

808 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´Mem‚ÄπySize
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

810  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

811 
DMA_CCR_MSIZE
));

833 
__STATIC_INLINE
 
LL_DMA_S√´Ch‚Ñ¢‚àölPri‚Äπ√¥yLev√±
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Pri‚Äπ√¥y
)

835 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_PL
,

836 
Pri‚Äπ√¥y
);

857 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´Ch‚Ñ¢‚àölPri‚Äπ√¥yLev√±
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

859  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

860 
DMA_CCR_PL
));

880 
__STATIC_INLINE
 
LL_DMA_S√´D¬©aL√≠gth
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
NbD¬©a
)

882 
MODIFY_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CNDTR
,

883 
DMA_CNDTR_NDT
, 
NbD¬©a
);

902 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´D¬©aL√≠gth
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

904  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CNDTR
,

905 
DMA_CNDTR_NDT
));

931 
__STATIC_INLINE
 
LL_DMA_C‚ÅÑfigAdd¬™s¬£s
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
SrcAdd¬™ss
,

932 
u√∂t32_t
 
D¬∞Add¬™ss
, u√∂t32_√†
D√∫eÀòi‚ÅÑ
)

935 i‚Ä°(
D√∫eÀòi‚ÅÑ
 =Ô£ø
LL_DMA_DIRECTION_MEMORY_TO_PERIPH
)

937 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CMAR
, 
SrcAdd¬™ss
);

938 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CPAR
, 
D¬∞Add¬™ss
);

943 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CPAR
, 
SrcAdd¬™ss
);

944 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CMAR
, 
D¬∞Add¬™ss
);

965 
__STATIC_INLINE
 
LL_DMA_S√´Mem‚ÄπyAdd¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mem‚ÄπyAdd¬™ss
)

967 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CMAR
, 
Mem‚ÄπyAdd¬™ss
);

987 
__STATIC_INLINE
 
LL_DMA_S√´P√Æ√πhAdd¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
P√Æ√πhAdd¬™ss
)

989 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CPAR
, 
P√Æ√πhAdd¬™ss
);

1007 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´Mem‚ÄπyAdd¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1009  (
READ_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CMAR
));

1027 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´P√Æ√πhAdd¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1029  (
READ_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CPAR
));

1049 
__STATIC_INLINE
 
LL_DMA_S√´M2MSrcAdd¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mem‚ÄπyAdd¬™ss
)

1051 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CPAR
, 
Mem‚ÄπyAdd¬™ss
);

1071 
__STATIC_INLINE
 
LL_DMA_S√´M2MD¬∞Add¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mem‚ÄπyAdd¬™ss
)

1073 
WRITE_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CMAR
, 
Mem‚ÄπyAdd¬™ss
);

1091 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´M2MSrcAdd¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1093  (
READ_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CPAR
));

1111 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_G√´M2MD¬∞Add¬™ss
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1113  (
READ_REG
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CMAR
));

1130 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI1
(
DMA_Ty‚â•Def
 *
DMAx
)

1132  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF1
) == (DMA_ISR_GIF1));

1141 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI2
(
DMA_Ty‚â•Def
 *
DMAx
)

1143  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF2
) == (DMA_ISR_GIF2));

1152 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI3
(
DMA_Ty‚â•Def
 *
DMAx
)

1154  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF3
) == (DMA_ISR_GIF3));

1163 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI4
(
DMA_Ty‚â•Def
 *
DMAx
)

1165  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF4
) == (DMA_ISR_GIF4));

1174 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI5
(
DMA_Ty‚â•Def
 *
DMAx
)

1176  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF5
) == (DMA_ISR_GIF5));

1185 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI6
(
DMA_Ty‚â•Def
 *
DMAx
)

1187  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF6
) == (DMA_ISR_GIF6));

1196 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_GI7
(
DMA_Ty‚â•Def
 *
DMAx
)

1198  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_GIF7
) == (DMA_ISR_GIF7));

1207 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC1
(
DMA_Ty‚â•Def
 *
DMAx
)

1209  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF1
) == (DMA_ISR_TCIF1));

1218 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC2
(
DMA_Ty‚â•Def
 *
DMAx
)

1220  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF2
) == (DMA_ISR_TCIF2));

1229 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC3
(
DMA_Ty‚â•Def
 *
DMAx
)

1231  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF3
) == (DMA_ISR_TCIF3));

1240 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC4
(
DMA_Ty‚â•Def
 *
DMAx
)

1242  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF4
) == (DMA_ISR_TCIF4));

1251 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC5
(
DMA_Ty‚â•Def
 *
DMAx
)

1253  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF5
) == (DMA_ISR_TCIF5));

1262 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC6
(
DMA_Ty‚â•Def
 *
DMAx
)

1264  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF6
) == (DMA_ISR_TCIF6));

1273 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TC7
(
DMA_Ty‚â•Def
 *
DMAx
)

1275  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TCIF7
) == (DMA_ISR_TCIF7));

1284 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT1
(
DMA_Ty‚â•Def
 *
DMAx
)

1286  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF1
) == (DMA_ISR_HTIF1));

1295 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT2
(
DMA_Ty‚â•Def
 *
DMAx
)

1297  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF2
) == (DMA_ISR_HTIF2));

1306 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT3
(
DMA_Ty‚â•Def
 *
DMAx
)

1308  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF3
) == (DMA_ISR_HTIF3));

1317 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT4
(
DMA_Ty‚â•Def
 *
DMAx
)

1319  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF4
) == (DMA_ISR_HTIF4));

1328 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT5
(
DMA_Ty‚â•Def
 *
DMAx
)

1330  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF5
) == (DMA_ISR_HTIF5));

1339 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT6
(
DMA_Ty‚â•Def
 *
DMAx
)

1341  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF6
) == (DMA_ISR_HTIF6));

1350 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_HT7
(
DMA_Ty‚â•Def
 *
DMAx
)

1352  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_HTIF7
) == (DMA_ISR_HTIF7));

1361 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE1
(
DMA_Ty‚â•Def
 *
DMAx
)

1363  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF1
) == (DMA_ISR_TEIF1));

1372 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE2
(
DMA_Ty‚â•Def
 *
DMAx
)

1374  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF2
) == (DMA_ISR_TEIF2));

1383 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE3
(
DMA_Ty‚â•Def
 *
DMAx
)

1385  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF3
) == (DMA_ISR_TEIF3));

1394 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE4
(
DMA_Ty‚â•Def
 *
DMAx
)

1396  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF4
) == (DMA_ISR_TEIF4));

1405 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE5
(
DMA_Ty‚â•Def
 *
DMAx
)

1407  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF5
) == (DMA_ISR_TEIF5));

1416 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE6
(
DMA_Ty‚â•Def
 *
DMAx
)

1418  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF6
) == (DMA_ISR_TEIF6));

1427 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsAÀòiveF≈ìg_TE7
(
DMA_Ty‚â•Def
 *
DMAx
)

1429  (
READ_BIT
(
DMAx
->
ISR
, 
DMA_ISR_TEIF7
) == (DMA_ISR_TEIF7));

1438 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI1
(
DMA_Ty‚â•Def
 *
DMAx
)

1440 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF1
);

1449 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI2
(
DMA_Ty‚â•Def
 *
DMAx
)

1451 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF2
);

1460 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI3
(
DMA_Ty‚â•Def
 *
DMAx
)

1462 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF3
);

1471 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI4
(
DMA_Ty‚â•Def
 *
DMAx
)

1473 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF4
);

1482 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI5
(
DMA_Ty‚â•Def
 *
DMAx
)

1484 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF5
);

1493 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI6
(
DMA_Ty‚â•Def
 *
DMAx
)

1495 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF6
);

1504 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_GI7
(
DMA_Ty‚â•Def
 *
DMAx
)

1506 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CGIF7
);

1515 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC1
(
DMA_Ty‚â•Def
 *
DMAx
)

1517 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF1
);

1526 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC2
(
DMA_Ty‚â•Def
 *
DMAx
)

1528 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF2
);

1537 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC3
(
DMA_Ty‚â•Def
 *
DMAx
)

1539 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF3
);

1548 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC4
(
DMA_Ty‚â•Def
 *
DMAx
)

1550 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF4
);

1559 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC5
(
DMA_Ty‚â•Def
 *
DMAx
)

1561 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF5
);

1570 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC6
(
DMA_Ty‚â•Def
 *
DMAx
)

1572 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF6
);

1581 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TC7
(
DMA_Ty‚â•Def
 *
DMAx
)

1583 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTCIF7
);

1592 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT1
(
DMA_Ty‚â•Def
 *
DMAx
)

1594 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF1
);

1603 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT2
(
DMA_Ty‚â•Def
 *
DMAx
)

1605 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF2
);

1614 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT3
(
DMA_Ty‚â•Def
 *
DMAx
)

1616 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF3
);

1625 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT4
(
DMA_Ty‚â•Def
 *
DMAx
)

1627 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF4
);

1636 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT5
(
DMA_Ty‚â•Def
 *
DMAx
)

1638 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF5
);

1647 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT6
(
DMA_Ty‚â•Def
 *
DMAx
)

1649 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF6
);

1658 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_HT7
(
DMA_Ty‚â•Def
 *
DMAx
)

1660 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CHTIF7
);

1669 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE1
(
DMA_Ty‚â•Def
 *
DMAx
)

1671 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF1
);

1680 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE2
(
DMA_Ty‚â•Def
 *
DMAx
)

1682 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF2
);

1691 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE3
(
DMA_Ty‚â•Def
 *
DMAx
)

1693 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF3
);

1702 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE4
(
DMA_Ty‚â•Def
 *
DMAx
)

1704 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF4
);

1713 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE5
(
DMA_Ty‚â•Def
 *
DMAx
)

1715 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF5
);

1724 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE6
(
DMA_Ty‚â•Def
 *
DMAx
)

1726 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF6
);

1735 
__STATIC_INLINE
 
LL_DMA_C√Ä¬®F≈ìg_TE7
(
DMA_Ty‚â•Def
 *
DMAx
)

1737 
WRITE_REG
(
DMAx
->
IFCR
, 
DMA_IFCR_CTEIF7
);

1762 
__STATIC_INLINE
 
LL_DMA_E¬´b√ÄIT_TC
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1764 
SET_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_TCIE
);

1781 
__STATIC_INLINE
 
LL_DMA_E¬´b√ÄIT_HT
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1783 
SET_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_HTIE
);

1800 
__STATIC_INLINE
 
LL_DMA_E¬´b√ÄIT_TE
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1802 
SET_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_TEIE
);

1819 
__STATIC_INLINE
 
LL_DMA_Di√üb√ÄIT_TC
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1821 
CLEAR_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_TCIE
);

1838 
__STATIC_INLINE
 
LL_DMA_Di√üb√ÄIT_HT
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1840 
CLEAR_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_HTIE
);

1857 
__STATIC_INLINE
 
LL_DMA_Di√üb√ÄIT_TE
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1859 
CLEAR_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
, 
DMA_CCR_TEIE
);

1876 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsE¬´b√ÄdIT_TC
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1878  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

1879 
DMA_CCR_TCIE
) == (DMA_CCR_TCIE));

1896 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsE¬´b√ÄdIT_HT
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1898  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

1899 
DMA_CCR_HTIE
) == (DMA_CCR_HTIE));

1916 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DMA_IsE¬´b√ÄdIT_TE
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1918  (
READ_BIT
(((
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)((
u√∂t32_t
)((u√∂t32_t)
DMAx
 + 
CHANNEL_OFFSET_TAB
[
Ch‚Ñ¢‚àöl
 - 1U])))->
CCR
,

1919 
DMA_CCR_TEIE
) == (DMA_CCR_TEIE));

1926 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1931 
u√∂t32_t
 
LL_DMA_In√¥
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
, 
LL_DMA_In√¥Ty‚â•Def
 *
DMA_In√¥S√•uÀò
);

1932 
u√∂t32_t
 
LL_DMA_DeIn√¥
(
DMA_Ty‚â•Def
 *
DMAx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
);

1933 
LL_DMA_S√•uÀòIn√¥
(
LL_DMA_In√¥Ty‚â•Def
 *
DMA_In√¥S√•uÀò
);

1954 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_exti.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_EXTI_H


22 
	#STM32F1xx_LL_EXTI_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
EXTI
)

45 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

54 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

61 
u√∂t32_t
 
L√∂e_0_31
;

64 
FunÀòi‚ÅÑ√ÜS√®√£
 
L√∂eComm‚Ñ¢d
;

67 
u√∂t8_t
 
Mode
;

70 
u√∂t8_t
 
Trigg√Æ
;

72 } 
	tLL_EXTI_In√¥Ty‚â•Def
;

87 
	#LL_EXTI_LINE_0
 
EXTI_IMR_IM0


	)

88 
	#LL_EXTI_LINE_1
 
EXTI_IMR_IM1


	)

89 
	#LL_EXTI_LINE_2
 
EXTI_IMR_IM2


	)

90 
	#LL_EXTI_LINE_3
 
EXTI_IMR_IM3


	)

91 
	#LL_EXTI_LINE_4
 
EXTI_IMR_IM4


	)

92 
	#LL_EXTI_LINE_5
 
EXTI_IMR_IM5


	)

93 
	#LL_EXTI_LINE_6
 
EXTI_IMR_IM6


	)

94 
	#LL_EXTI_LINE_7
 
EXTI_IMR_IM7


	)

95 
	#LL_EXTI_LINE_8
 
EXTI_IMR_IM8


	)

96 
	#LL_EXTI_LINE_9
 
EXTI_IMR_IM9


	)

97 
	#LL_EXTI_LINE_10
 
EXTI_IMR_IM10


	)

98 
	#LL_EXTI_LINE_11
 
EXTI_IMR_IM11


	)

99 
	#LL_EXTI_LINE_12
 
EXTI_IMR_IM12


	)

100 
	#LL_EXTI_LINE_13
 
EXTI_IMR_IM13


	)

101 
	#LL_EXTI_LINE_14
 
EXTI_IMR_IM14


	)

102 
	#LL_EXTI_LINE_15
 
EXTI_IMR_IM15


	)

103 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM16
)

104 
	#LL_EXTI_LINE_16
 
EXTI_IMR_IM16


	)

106 
	#LL_EXTI_LINE_17
 
EXTI_IMR_IM17


	)

107 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM18
)

108 
	#LL_EXTI_LINE_18
 
EXTI_IMR_IM18


	)

110 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM19
)

111 
	#LL_EXTI_LINE_19
 
EXTI_IMR_IM19


	)

113 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM20
)

114 
	#LL_EXTI_LINE_20
 
EXTI_IMR_IM20


	)

116 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM21
)

117 
	#LL_EXTI_LINE_21
 
EXTI_IMR_IM21


	)

119 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM22
)

120 
	#LL_EXTI_LINE_22
 
EXTI_IMR_IM22


	)

122 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM23
)

123 
	#LL_EXTI_LINE_23
 
EXTI_IMR_IM23


	)

125 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM24
)

126 
	#LL_EXTI_LINE_24
 
EXTI_IMR_IM24


	)

128 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM25
)

129 
	#LL_EXTI_LINE_25
 
EXTI_IMR_IM25


	)

131 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM26
)

132 
	#LL_EXTI_LINE_26
 
EXTI_IMR_IM26


	)

134 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM27
)

135 
	#LL_EXTI_LINE_27
 
EXTI_IMR_IM27


	)

137 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM28
)

138 
	#LL_EXTI_LINE_28
 
EXTI_IMR_IM28


	)

140 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM29
)

141 
	#LL_EXTI_LINE_29
 
EXTI_IMR_IM29


	)

143 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM30
)

144 
	#LL_EXTI_LINE_30
 
EXTI_IMR_IM30


	)

146 #i‚Ä°
def√∂ed
(
EXTI_IMR_IM31
)

147 
	#LL_EXTI_LINE_31
 
EXTI_IMR_IM31


	)

149 
	#LL_EXTI_LINE_ALL_0_31
 
EXTI_IMR_IM


	)

152 
	#LL_EXTI_LINE_ALL
 (0xFFFFFFFFU√ã

	)

154 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

155 
	#LL_EXTI_LINE_NONE
 (0x00000000U√ã

	)

161 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

166 
	#LL_EXTI_MODE_IT
 ((
u√∂t8_t
)0x00√ã

	)

167 
	#LL_EXTI_MODE_EVENT
 ((
u√∂t8_t
)0x01√ã

	)

168 
	#LL_EXTI_MODE_IT_EVENT
 ((
u√∂t8_t
)0x02√ã

	)

176 
	#LL_EXTI_TRIGGER_NONE
 ((
u√∂t8_t
)0x00√ã

	)

177 
	#LL_EXTI_TRIGGER_RISING
 ((
u√∂t8_t
)0x01√ã

	)

178 
	#LL_EXTI_TRIGGER_FALLING
 ((
u√∂t8_t
)0x02√ã

	)

179 
	#LL_EXTI_TRIGGER_RISING_FALLING
 ((
u√∂t8_t
)0x03√ã

	)

208 
	#LL_EXTI_Wr√¥eReg
(
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(
EXTI
->__REG__, (__VALUE__))

	)

215 
	#LL_EXTI_R√≥dReg
(
__REG__
√ã
	`READ_REG
(
EXTI
->__REG__)

	)

266 
__STATIC_INLINE
 
LL_EXTI_E¬´b√ÄIT_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

268 
SET_BIT
(
EXTI
->
IMR
, 
ExtiL√∂e
);

302 
__STATIC_INLINE
 
LL_EXTI_Di√üb√ÄIT_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

304 
CLEAR_BIT
(
EXTI
->
IMR
, 
ExtiL√∂e
);

339 
__STATIC_INLINE
 
u√∂t32_t
 
LL_EXTI_IsE¬´b√ÄdIT_0_31
(u√∂t32_√†
ExtiL√∂e
)

341  (
READ_BIT
(
EXTI
->
IMR
, 
ExtiL√∂e
) == (ExtiLine));

381 
__STATIC_INLINE
 
LL_EXTI_E¬´b√ÄEv√≠t_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

383 
SET_BIT
(
EXTI
->
EMR
, 
ExtiL√∂e
);

416 
__STATIC_INLINE
 
LL_EXTI_Di√üb√ÄEv√≠t_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

418 
CLEAR_BIT
(
EXTI
->
EMR
, 
ExtiL√∂e
);

450 
__STATIC_INLINE
 
u√∂t32_t
 
LL_EXTI_IsE¬´b√ÄdEv√≠t_0_31
(u√∂t32_√†
ExtiL√∂e
)

452  (
READ_BIT
(
EXTI
->
EMR
, 
ExtiL√∂e
) == (ExtiLine));

498 
__STATIC_INLINE
 
LL_EXTI_E¬´b√ÄRis√∂gTrig_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

500 
SET_BIT
(
EXTI
->
RTSR
, 
ExtiL√∂e
);

538 
__STATIC_INLINE
 
LL_EXTI_Di√üb√ÄRis√∂gTrig_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

540 
CLEAR_BIT
(
EXTI
->
RTSR
, 
ExtiL√∂e
);

571 
__STATIC_INLINE
 
u√∂t32_t
 
LL_EXTI_IsE¬´b√ÄdRis√∂gTrig_0_31
(u√∂t32_√†
ExtiL√∂e
)

573  (
READ_BIT
(
EXTI
->
RTSR
, 
ExtiL√∂e
) == (ExtiLine));

618 
__STATIC_INLINE
 
LL_EXTI_E¬´b√ÄF√Ül√∂gTrig_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

620 
SET_BIT
(
EXTI
->
FTSR
, 
ExtiL√∂e
);

656 
__STATIC_INLINE
 
LL_EXTI_Di√üb√ÄF√Ül√∂gTrig_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

658 
CLEAR_BIT
(
EXTI
->
FTSR
, 
ExtiL√∂e
);

688 
__STATIC_INLINE
 
u√∂t32_t
 
LL_EXTI_IsE¬´b√ÄdF√Ül√∂gTrig_0_31
(u√∂t32_√†
ExtiL√∂e
)

690  (
READ_BIT
(
EXTI
->
FTSR
, 
ExtiL√∂e
) == (ExtiLine));

733 
__STATIC_INLINE
 
LL_EXTI_G√≠√Æ¬©eSWI_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

735 
SET_BIT
(
EXTI
->
SWIER
, 
ExtiL√∂e
);

775 
__STATIC_INLINE
 
u√∂t32_t
 
LL_EXTI_IsAÀòiveF≈ìg_0_31
(u√∂t32_√†
ExtiL√∂e
)

777  (
READ_BIT
(
EXTI
->
PR
, 
ExtiL√∂e
) == (ExtiLine));

809 
__STATIC_INLINE
 
u√∂t32_t
 
LL_EXTI_R√≥dF≈ìg_0_31
(u√∂t32_√†
ExtiL√∂e
)

811  (
u√∂t32_t
)(
READ_BIT
(
EXTI
->
PR
, 
ExtiL√∂e
));

843 
__STATIC_INLINE
 
LL_EXTI_C√Ä¬®F≈ìg_0_31
(
u√∂t32_t
 
ExtiL√∂e
)

845 
WRITE_REG
(
EXTI
->
PR
, 
ExtiL√∂e
);

853 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

858 
u√∂t32_t
 
LL_EXTI_In√¥
(
LL_EXTI_In√¥Ty‚â•Def
 *
EXTI_In√¥S√•uÀò
);

859 
u√∂t32_t
 
LL_EXTI_DeIn√¥
();

860 
LL_EXTI_S√•uÀòIn√¥
(
LL_EXTI_In√¥Ty‚â•Def
 *
EXTI_In√¥S√•uÀò
);

882 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_FSMC_H


22 
	#STM32F1xx_LL_FSMC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

42 #i‚Ä°
def√∂ed
 
FSMC_BANK1


44 
	#IS_FSMC_NORSRAM_BANK
(
__BANK__
√ã(((__BANK__√ã=Ô£ø
FSMC_NORSRAM_BANK1
) || \

45 ((
__BANK__
√ã=Ô£ø
FSMC_NORSRAM_BANK2
) || \

46 ((
__BANK__
√ã=Ô£ø
FSMC_NORSRAM_BANK3
) || \

47 ((
__BANK__
√ã=Ô£ø
FSMC_NORSRAM_BANK4
))

	)

48 
	#IS_FSMC_MUX
(
__MUX__
√ã(((__MUX__√ã=Ô£ø
FSMC_DATA_ADDRESS_MUX_DISABLE
) || \

49 ((
__MUX__
√ã=Ô£ø
FSMC_DATA_ADDRESS_MUX_ENABLE
))

	)

50 
	#IS_FSMC_MEMORY
(
__MEMORY__
√ã(((__MEMORY__√ã=Ô£ø
FSMC_MEMORY_TYPE_SRAM
) || \

51 ((
__MEMORY__
√ã=Ô£ø
FSMC_MEMORY_TYPE_PSRAM
)|| \

52 ((
__MEMORY__
√ã=Ô£ø
FSMC_MEMORY_TYPE_NOR
))

	)

53 
	#IS_FSMC_NORSRAM_MEMORY_WIDTH
(
__WIDTH__
√ã(((__WIDTH__√ã=Ô£ø
FSMC_NORSRAM_MEM_BUS_WIDTH_8
) || \

54 ((
__WIDTH__
√ã=Ô£ø
FSMC_NORSRAM_MEM_BUS_WIDTH_16
) || \

55 ((
__WIDTH__
√ã=Ô£ø
FSMC_NORSRAM_MEM_BUS_WIDTH_32
))

	)

56 
	#IS_FSMC_PAGESIZE
(
__SIZE__
√ã(((__SIZE__√ã=Ô£ø
FSMC_PAGE_SIZE_NONE
) || \

57 ((
__SIZE__
√ã=Ô£ø
FSMC_PAGE_SIZE_128
) || \

58 ((
__SIZE__
√ã=Ô£ø
FSMC_PAGE_SIZE_256
) || \

59 ((
__SIZE__
√ã=Ô£ø
FSMC_PAGE_SIZE_512
) || \

60 ((
__SIZE__
√ã=Ô£ø
FSMC_PAGE_SIZE_1024
))

	)

61 
	#IS_FSMC_ACCESS_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
FSMC_ACCESS_MODE_A
) || \

62 ((
__MODE__
√ã=Ô£ø
FSMC_ACCESS_MODE_B
) || \

63 ((
__MODE__
√ã=Ô£ø
FSMC_ACCESS_MODE_C
) || \

64 ((
__MODE__
√ã=Ô£ø
FSMC_ACCESS_MODE_D
))

	)

65 
	#IS_FSMC_BURSTMODE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
FSMC_BURST_ACCESS_MODE_DISABLE
) || \

66 ((
__STATE__
√ã=Ô£ø
FSMC_BURST_ACCESS_MODE_ENABLE
))

	)

67 
	#IS_FSMC_WAIT_POLARITY
(
__POLARITY__
√ã(((__POLARITY__√ã=Ô£ø
FSMC_WAIT_SIGNAL_POLARITY_LOW
) || \

68 ((
__POLARITY__
√ã=Ô£ø
FSMC_WAIT_SIGNAL_POLARITY_HIGH
))

	)

69 
	#IS_FSMC_WRAP_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
FSMC_WRAP_MODE_DISABLE
) || \

70 ((
__MODE__
√ã=Ô£ø
FSMC_WRAP_MODE_ENABLE
))

	)

71 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
__ACTIVE__
√ã(((__ACTIVE__√ã=Ô£ø
FSMC_WAIT_TIMING_BEFORE_WS
) || \

72 ((
__ACTIVE__
√ã=Ô£ø
FSMC_WAIT_TIMING_DURING_WS
))

	)

73 
	#IS_FSMC_WRITE_OPERATION
(
__OPERATION__
√ã(((__OPERATION__√ã=Ô£ø
FSMC_WRITE_OPERATION_DISABLE
) || \

74 ((
__OPERATION__
√ã=Ô£ø
FSMC_WRITE_OPERATION_ENABLE
))

	)

75 
	#IS_FSMC_WAITE_SIGNAL
(
__SIGNAL__
√ã(((__SIGNAL__√ã=Ô£ø
FSMC_WAIT_SIGNAL_DISABLE
) || \

76 ((
__SIGNAL__
√ã=Ô£ø
FSMC_WAIT_SIGNAL_ENABLE
))

	)

77 
	#IS_FSMC_EXTENDED_MODE
(
__MODE__
√ã(((__MODE__√ã=Ô£ø
FSMC_EXTENDED_MODE_DISABLE
) || \

78 ((
__MODE__
√ã=Ô£ø
FSMC_EXTENDED_MODE_ENABLE
))

	)

79 
	#IS_FSMC_ASYNWAIT
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
FSMC_ASYNCHRONOUS_WAIT_DISABLE
) || \

80 ((
__STATE__
√ã=Ô£ø
FSMC_ASYNCHRONOUS_WAIT_ENABLE
))

	)

81 
	#IS_FSMC_DATA_LATENCY
(
__LATENCY__
√ã(((__LATENCY__√ã> 1U√ã&& ((__LATENCY__√ã<Ô£ø17U))

	)

82 
	#IS_FSMC_WRITE_BURST
(
__BURST__
√ã(((__BURST__√ã=Ô£ø
FSMC_WRITE_BURST_DISABLE
) || \

83 ((
__BURST__
√ã=Ô£ø
FSMC_WRITE_BURST_ENABLE
))

	)

84 
	#IS_FSMC_CONTINOUS_CLOCK
(
__CCLOCK__
√ã(((__CCLOCK__√ã=Ô£ø
FSMC_CONTINUOUS_CLOCK_SYNC_ONLY
) || \

85 ((
__CCLOCK__
√ã=Ô£ø
FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC
))

	)

86 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø15U)

	)

87 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
__TIME__
√ã(((__TIME__√ã> 0U√ã&& ((__TIME__√ã<Ô£ø15U))

	)

88 
	#IS_FSMC_DATASETUP_TIME
(
__TIME__
√ã(((__TIME__√ã> 0U√ã&& ((__TIME__√ã<Ô£ø255U))

	)

89 
	#IS_FSMC_DATAHOLD_DURATION
(
__DATAHOLD__
√ã((__DATAHOLD__√ã<Ô£ø3U)

	)

90 
	#IS_FSMC_TURNAROUND_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø15U)

	)

91 
	#IS_FSMC_CLK_DIV
(
__DIV__
√ã(((__DIV__√ã> 1U√ã&& ((__DIV__√ã<Ô£ø16U))

	)

92 
	#IS_FSMC_NORSRAM_DEVICE
(
__INSTANCE__
√ã((__INSTANCE__√ã=Ô£ø
FSMC_NORSRAM_DEVICE
)

	)

93 
	#IS_FSMC_NORSRAM_EXTENDED_DEVICE
(
__INSTANCE__
√ã((__INSTANCE__√ã=Ô£ø
FSMC_NORSRAM_EXTENDED_DEVICE
)

	)

96 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

98 
	#IS_FSMC_NAND_BANK
(
__BANK__
√ã((__BANK__√ã=Ô£ø
FSMC_NAND_BANK3
)

	)

99 
	#IS_FSMC_WAIT_FEATURE
(
__FEATURE__
√ã(((__FEATURE__√ã=Ô£ø
FSMC_NAND_PCC_WAIT_FEATURE_DISABLE
) || \

100 ((
__FEATURE__
√ã=Ô£ø
FSMC_NAND_PCC_WAIT_FEATURE_ENABLE
))

	)

101 
	#IS_FSMC_NAND_MEMORY_WIDTH
(
__WIDTH__
√ã(((__WIDTH__√ã=Ô£ø
FSMC_NAND_PCC_MEM_BUS_WIDTH_8
) || \

102 ((
__WIDTH__
√ã=Ô£ø
FSMC_NAND_PCC_MEM_BUS_WIDTH_16
))

	)

103 
	#IS_FSMC_ECC_STATE
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
FSMC_NAND_ECC_DISABLE
) || \

104 ((
__STATE__
√ã=Ô£ø
FSMC_NAND_ECC_ENABLE
))

	)

106 
	#IS_FSMC_ECCPAGE_SIZE
(
__SIZE__
√ã(((__SIZE__√ã=Ô£ø
FSMC_NAND_ECC_PAGE_SIZE_256BYTE
) || \

107 ((
__SIZE__
√ã=Ô£ø
FSMC_NAND_ECC_PAGE_SIZE_512BYTE
) || \

108 ((
__SIZE__
√ã=Ô£ø
FSMC_NAND_ECC_PAGE_SIZE_1024BYTE
) || \

109 ((
__SIZE__
√ã=Ô£ø
FSMC_NAND_ECC_PAGE_SIZE_2048BYTE
) || \

110 ((
__SIZE__
√ã=Ô£ø
FSMC_NAND_ECC_PAGE_SIZE_4096BYTE
) || \

111 ((
__SIZE__
√ã=Ô£ø
FSMC_NAND_ECC_PAGE_SIZE_8192BYTE
))

	)

112 
	#IS_FSMC_TCLR_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø255U)

	)

113 
	#IS_FSMC_TAR_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø255U)

	)

114 
	#IS_FSMC_SETUP_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø254U)

	)

115 
	#IS_FSMC_WAIT_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø254U)

	)

116 
	#IS_FSMC_HOLD_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø254U)

	)

117 
	#IS_FSMC_HIZ_TIME
(
__TIME__
√ã((__TIME__√ã<Ô£ø254U)

	)

118 
	#IS_FSMC_NAND_DEVICE
(
__INSTANCE__
√ã((__INSTANCE__√ã=Ô£ø
FSMC_NAND_DEVICE
)

	)

121 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

122 
	#IS_FSMC_PCCARD_DEVICE
(
__INSTANCE__
√ã((__INSTANCE__√ã=Ô£ø
FSMC_PCCARD_DEVICE
)

	)

136 #i‚Ä°
def√∂ed
 
FSMC_BANK1


137 
	#FSMC_NORSRAM_Ty‚â•Def
 
FSMC_B‚Ñ¢k1_Ty‚â•Def


	)

138 
	#FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 
FSMC_B‚Ñ¢k1E_Ty‚â•Def


	)

140 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

141 
	#FSMC_NAND_Ty‚â•Def
 
FSMC_B‚Ñ¢k2_3_Ty‚â•Def


	)

143 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

144 
	#FSMC_PCCARD_Ty‚â•Def
 
FSMC_B‚Ñ¢k4_Ty‚â•Def


	)

147 #i‚Ä°
def√∂ed
 
FSMC_BANK1


148 
	#FSMC_NORSRAM_DEVICE
 
FSMC_B‚Ñ¢k1


	)

149 
	#FSMC_NORSRAM_EXTENDED_DEVICE
 
FSMC_B‚Ñ¢k1E


	)

151 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

152 
	#FSMC_NAND_DEVICE
 
FSMC_B‚Ñ¢k2_3


	)

154 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

155 
	#FSMC_PCCARD_DEVICE
 
FSMC_B‚Ñ¢k4


	)

158 #i‚Ä°
def√∂ed
 
FSMC_BANK1


164 
u√∂t32_t
 
NSB‚Ñ¢k
;

167 
u√∂t32_t
 
D¬©aAdd¬™ssMux
;

171 
u√∂t32_t
 
Mem‚ÄπyTy‚â•
;

175 
u√∂t32_t
 
Mem‚ÄπyD¬©aWidth
;

178 
u√∂t32_t
 
Bur¬∞AcÀössMode
;

182 
u√∂t32_t
 
Wa√¥Sig¬´lPÔ¨Å¬®√¥y
;

186 
u√∂t32_t
 
W√∏pMode
;

190 
u√∂t32_t
 
Wa√¥Sig¬´lAÀòive
;

195 
u√∂t32_t
 
Wr√¥eO‚â•√∏ti‚ÅÑ
;

198 
u√∂t32_t
 
Wa√¥Sig¬´l
;

202 
u√∂t32_t
 
Ex√£ndedMode
;

205 
u√∂t32_t
 
Asynchr‚ÅÑousWa√¥
;

209 
u√∂t32_t
 
Wr√¥eBur¬∞
;

213 
u√∂t32_t
 
PageSize
;

215 } 
	tFSMC_NORSRAM_In√¥Ty‚â•Def
;

222 
u√∂t32_t
 
Add¬™ssS√´upTime
;

227 
u√∂t32_t
 
Add¬™ssHÔ¨ÅdTime
;

232 
u√∂t32_t
 
D¬©aS√´upTime
;

238 
u√∂t32_t
 
BusTu‚à´AroundDu√∏ti‚ÅÑ
;

243 
u√∂t32_t
 
CLKDivisi‚ÅÑ
;

248 
u√∂t32_t
 
D¬©aL¬©√≠cy
;

256 
u√∂t32_t
 
AcÀössMode
;

258 } 
	tFSMC_NORSRAM_Tim√∂gTy‚â•Def
;

261 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

267 
u√∂t32_t
 
N‚Ñ¢dB‚Ñ¢k
;

270 
u√∂t32_t
 
Wa√¥‚Äû¬©u¬™
;

273 
u√∂t32_t
 
Mem‚ÄπyD¬©aWidth
;

276 
u√∂t32_t
 
EccCompu√®ti‚ÅÑ
;

279 
u√∂t32_t
 
ECCPageSize
;

282 
u√∂t32_t
 
TCLRS√´upTime
;

286 
u√∂t32_t
 
TARS√´upTime
;

289 } 
	tFSMC_NAND_In√¥Ty‚â•Def
;

292 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)||def√∂ed(
FSMC_BANK4
)

298 
u√∂t32_t
 
S√´upTime
;

304 
u√∂t32_t
 
Wa√¥S√´upTime
;

310 
u√∂t32_t
 
HÔ¨ÅdS√´upTime
;

317 
u√∂t32_t
 
HiZS√´upTime
;

322 } 
	tFSMC_NAND_PCC_Tim√∂gTy‚â•Def
;

325 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

331 
u√∂t32_t
 
Wa√¥‚Äû¬©u¬™
;

334 
u√∂t32_t
 
TCLRS√´upTime
;

338 
u√∂t32_t
 
TARS√´upTime
;

341 }
	tFSMC_PCCARD_In√¥Ty‚â•Def
;

352 #i‚Ä°
def√∂ed
 
FSMC_BANK1


361 
	#FSMC_NORSRAM_BANK1
 (0x00000000U)

	)

362 
	#FSMC_NORSRAM_BANK2
 (0x00000002U)

	)

363 
	#FSMC_NORSRAM_BANK3
 (0x00000004U)

	)

364 
	#FSMC_NORSRAM_BANK4
 (0x00000006U)

	)

372 
	#FSMC_DATA_ADDRESS_MUX_DISABLE
 (0x00000000U)

	)

373 
	#FSMC_DATA_ADDRESS_MUX_ENABLE
 (0x00000002U)

	)

381 
	#FSMC_MEMORY_TYPE_SRAM
 (0x00000000U)

	)

382 
	#FSMC_MEMORY_TYPE_PSRAM
 (0x00000004U)

	)

383 
	#FSMC_MEMORY_TYPE_NOR
 (0x00000008U)

	)

391 
	#FSMC_NORSRAM_MEM_BUS_WIDTH_8
 (0x00000000U)

	)

392 
	#FSMC_NORSRAM_MEM_BUS_WIDTH_16
 (0x00000010U)

	)

393 
	#FSMC_NORSRAM_MEM_BUS_WIDTH_32
 (0x00000020U)

	)

401 
	#FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 (0x00000040U)

	)

402 
	#FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 (0x00000000U)

	)

410 
	#FSMC_BURST_ACCESS_MODE_DISABLE
 (0x00000000U)

	)

411 
	#FSMC_BURST_ACCESS_MODE_ENABLE
 (0x00000100U)

	)

419 
	#FSMC_WAIT_SIGNAL_POLARITY_LOW
 (0x00000000U)

	)

420 
	#FSMC_WAIT_SIGNAL_POLARITY_HIGH
 (0x00000200U)

	)

428 
	#FSMC_WRAP_MODE_DISABLE
 (0x00000000U)

	)

429 
	#FSMC_WRAP_MODE_ENABLE
 (0x00000400U)

	)

437 
	#FSMC_WAIT_TIMING_BEFORE_WS
 (0x00000000U)

	)

438 
	#FSMC_WAIT_TIMING_DURING_WS
 (0x00000800U)

	)

446 
	#FSMC_WRITE_OPERATION_DISABLE
 (0x00000000U)

	)

447 
	#FSMC_WRITE_OPERATION_ENABLE
 (0x00001000U)

	)

455 
	#FSMC_WAIT_SIGNAL_DISABLE
 (0x00000000U)

	)

456 
	#FSMC_WAIT_SIGNAL_ENABLE
 (0x00002000U)

	)

464 
	#FSMC_EXTENDED_MODE_DISABLE
 (0x00000000U)

	)

465 
	#FSMC_EXTENDED_MODE_ENABLE
 (0x00004000U)

	)

473 
	#FSMC_ASYNCHRONOUS_WAIT_DISABLE
 (0x00000000U)

	)

474 
	#FSMC_ASYNCHRONOUS_WAIT_ENABLE
 (0x00008000U)

	)

482 
	#FSMC_PAGE_SIZE_NONE
 (0x00000000U)

	)

483 
	#FSMC_PAGE_SIZE_128
 (0x00010000U)

	)

484 
	#FSMC_PAGE_SIZE_256
 (0x00020000U)

	)

485 
	#FSMC_PAGE_SIZE_512
 (0x00030000U)

	)

486 
	#FSMC_PAGE_SIZE_1024
 (0x00040000U)

	)

494 
	#FSMC_WRITE_BURST_DISABLE
 (0x00000000U)

	)

495 
	#FSMC_WRITE_BURST_ENABLE
 (0x00080000U)

	)

503 
	#FSMC_CONTINUOUS_CLOCK_SYNC_ONLY
 (0x00000000U)

	)

504 
	#FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC
 (0x00100000U)

	)

512 
	#FSMC_ACCESS_MODE_A
 (0x00000000U)

	)

513 
	#FSMC_ACCESS_MODE_B
 (0x10000000U)

	)

514 
	#FSMC_ACCESS_MODE_C
 (0x20000000U)

	)

515 
	#FSMC_ACCESS_MODE_D
 (0x30000000U)

	)

525 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)||def√∂ed(
FSMC_BANK4
)

533 
	#FSMC_NAND_BANK2
 (0x00000010U)

	)

534 
	#FSMC_NAND_BANK3
 (0x00000100U)

	)

542 
	#FSMC_NAND_PCC_WAIT_FEATURE_DISABLE
 (0x00000000U)

	)

543 
	#FSMC_NAND_PCC_WAIT_FEATURE_ENABLE
 (0x00000002U)

	)

551 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

552 
	#FSMC_PCR_MEMORY_TYPE_PCCARD
 (0x00000000U)

	)

554 
	#FSMC_PCR_MEMORY_TYPE_NAND
 (0x00000008U)

	)

562 
	#FSMC_NAND_PCC_MEM_BUS_WIDTH_8
 (0x00000000U)

	)

563 
	#FSMC_NAND_PCC_MEM_BUS_WIDTH_16
 (0x00000010U)

	)

571 
	#FSMC_NAND_ECC_DISABLE
 (0x00000000U)

	)

572 
	#FSMC_NAND_ECC_ENABLE
 (0x00000040U)

	)

580 
	#FSMC_NAND_ECC_PAGE_SIZE_256BYTE
 (0x00000000U)

	)

581 
	#FSMC_NAND_ECC_PAGE_SIZE_512BYTE
 (0x00020000U)

	)

582 
	#FSMC_NAND_ECC_PAGE_SIZE_1024BYTE
 (0x00040000U)

	)

583 
	#FSMC_NAND_ECC_PAGE_SIZE_2048BYTE
 (0x00060000U)

	)

584 
	#FSMC_NAND_ECC_PAGE_SIZE_4096BYTE
 (0x00080000U)

	)

585 
	#FSMC_NAND_ECC_PAGE_SIZE_8192BYTE
 (0x000A0000U)

	)

599 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)||def√∂ed(
FSMC_BANK4
)

600 
	#FSMC_IT_RISING_EDGE
 (0x00000008U)

	)

601 
	#FSMC_IT_LEVEL
 (0x00000010U)

	)

602 
	#FSMC_IT_FALLING_EDGE
 (0x00000020U)

	)

611 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)||def√∂ed(
FSMC_BANK4
)

612 
	#FSMC_FLAG_RISING_EDGE
 (0x00000001U)

	)

613 
	#FSMC_FLAG_LEVEL
 (0x00000002U)

	)

614 
	#FSMC_FLAG_FALLING_EDGE
 (0x00000004U)

	)

615 
	#FSMC_FLAG_FEMPT
 (0x00000040U)

	)

633 #i‚Ä°
def√∂ed
 
FSMC_BANK1


645 
	#__FSMC_NORSRAM_ENABLE
(
__INSTANCE__
, 
__BANK__
√ã((__INSTANCE__)->
BTCR
[(__BANK__)]\

646 |Ô£ø
FSMC_BCRx_MBKEN
)

	)

654 
	#__FSMC_NORSRAM_DISABLE
(
__INSTANCE__
, 
__BANK__
√ã((__INSTANCE__)->
BTCR
[(__BANK__)]\

655 &Ô£ø~
FSMC_BCRx_MBKEN
)

	)

662 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

674 
	#__FSMC_NAND_ENABLE
(
__INSTANCE__
, 
__BANK__
√ã(((__BANK__√ã=Ô£ø
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
PCR2
 |Ô£ø
FSMC_PCRx_PBKEN
): \

675 ((
__INSTANCE__
)->
PCR3
 |Ô£ø
FSMC_PCRx_PBKEN
))

	)

683 
	#__FSMC_NAND_DISABLE
(
__INSTANCE__
, 
__BANK__
√ã(((__BANK__√ã=Ô£ø
FSMC_NAND_BANK2
)? 
	`CLEAR_BIT
((__INSTANCE__)->
PCR2
, 
FSMC_PCRx_PBKEN
): \

684 
	`CLEAR_BIT
((
__INSTANCE__
)->
PCR3
, 
FSMC_PCRx_PBKEN
))

	)

691 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

701 
	#__FSMC_PCCARD_ENABLE
(
__INSTANCE__
√ã((__INSTANCE__)->
PCR4
 |Ô£ø
FSMC_PCRx_PBKEN
)

	)

708 
	#__FSMC_PCCARD_DISABLE
(
__INSTANCE__
√ã((__INSTANCE__)->
PCR4
 &Ô£ø~
FSMC_PCRx_PBKEN
)

	)

714 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

731 
	#__FSMC_NAND_ENABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
√ã(((__BANK__√ã=Ô£ø
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 |= (__INTERRUPT__)): \

732 ((
__INSTANCE__
)->
SR3
 |Ô£ø(
__INTERRUPT__
)))

	)

745 
	#__FSMC_NAND_DISABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
√ã(((__BANK__√ã=Ô£ø
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 &= ~(__INTERRUPT__)): \

746 ((
__INSTANCE__
)->
SR3
 &Ô£ø~(
__INTERRUPT__
)))

	)

760 
	#__FSMC_NAND_GET_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
√ã(((__BANK__√ã=Ô£ø
FSMC_NAND_BANK2
)? (((__INSTANCE__)->
SR2
 &(__FLAG__)) == (__FLAG__)): \

761 (((
__INSTANCE__
)->
SR3
 &(
__FLAG__
)√ã=Ô£ø(__FLAG__)))

	)

775 
	#__FSMC_NAND_CLEAR_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
√ã(((__BANK__√ã=Ô£ø
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 &= ~(__FLAG__)): \

776 ((
__INSTANCE__
)->
SR3
 &Ô£ø~(
__FLAG__
)))

	)

783 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

799 
	#__FSMC_PCCARD_ENABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
SR4
 |Ô£ø(__INTERRUPT__))

	)

811 
	#__FSMC_PCCARD_DISABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
SR4
 &Ô£ø~(__INTERRUPT__))

	)

824 
	#__FSMC_PCCARD_GET_FLAG
(
__INSTANCE__
, 
__FLAG__
√ã(((__INSTANCE__)->
SR4
 &(__FLAG__)√ã=Ô£ø(__FLAG__))

	)

837 
	#__FSMC_PCCARD_CLEAR_FLAG
(
__INSTANCE__
, 
__FLAG__
√ã((__INSTANCE__)->
SR4
 &Ô£ø~(__FLAG__))

	)

857 #i‚Ä°
def√∂ed
 
FSMC_BANK1


864 
HAL_S√®tusTy‚â•Def
 
FSMC_NORSRAM_In√¥
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
,

865 
FSMC_NORSRAM_In√¥Ty‚â•Def
 *
In√¥
);

866 
HAL_S√®tusTy‚â•Def
 
FSMC_NORSRAM_Tim√∂g_In√¥
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
,

867 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
);

868 
HAL_S√®tusTy‚â•Def
 
FSMC_NORSRAM_Ex√£nded_Tim√∂g_In√¥
(
FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 *
DeviÀö
,

869 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
, u√∂t32_√†
Ex√£ndedMode
);

870 
HAL_S√®tusTy‚â•Def
 
FSMC_NORSRAM_DeIn√¥
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
,

871 
FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 *
ExDeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
);

879 
HAL_S√®tusTy‚â•Def
 
FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
);

880 
HAL_S√®tusTy‚â•Def
 
FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
);

889 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

896 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_In√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
FSMC_NAND_In√¥Ty‚â•Def
 *
In√¥
);

897 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_Comm‚ÅÑS‚àëÀö_Tim√∂g_In√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
,

898 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
);

899 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_A√¢ribu√£S‚àëÀö_Tim√∂g_In√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
,

900 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
);

901 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_DeIn√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
);

909 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_ECC_E¬´b√Ä
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
);

910 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_ECC_Di√üb√Ä
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
);

911 
HAL_S√®tusTy‚â•Def
 
FSMC_NAND_G√´ECC
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 *
ECCv√Ü
, u√∂t32_√†
B‚Ñ¢k
,

912 
u√∂t32_t
 
Timeout
);

921 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

928 
HAL_S√®tusTy‚â•Def
 
FSMC_PCCARD_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
, 
FSMC_PCCARD_In√¥Ty‚â•Def
 *
In√¥
);

929 
HAL_S√®tusTy‚â•Def
 
FSMC_PCCARD_Comm‚ÅÑS‚àëÀö_Tim√∂g_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
,

930 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
);

931 
HAL_S√®tusTy‚â•Def
 
FSMC_PCCARD_A√¢ribu√£S‚àëÀö_Tim√∂g_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
,

932 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
);

933 
HAL_S√®tusTy‚â•Def
 
FSMC_PCCARD_IOS‚àëÀö_Tim√∂g_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
,

934 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
);

935 
HAL_S√®tusTy‚â•Def
 
FSMC_PCCARD_DeIn√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
);

957 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_gpio.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_GPIO_H


22 
	#STM32F1xx_LL_GPIO_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
GPIOA
√ã|| def√∂ed (
GPIOB
√ã|| def√∂ed (
GPIOC
√ã|| def√∂ed (
GPIOD
√ã|| def√∂ed (
GPIOE
√ã|| def√∂ed (
GPIOF
√ã|| def√∂ed (
GPIOG
)

49 
	#GPIO_PIN_MASK_POS
 8U

	)

50 
	#GPIO_PIN_NB
 16U

	)

56 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

67 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

77 
u√∂t32_t
 
P√∂
;

80 
u√∂t32_t
 
Mode
;

85 
u√∂t32_t
 
S‚â•ed
;

90 
u√∂t32_t
 
Ou√ßutTy‚â•
;

95 
u√∂t32_t
 
Pu≈í
;

99 } 
	tLL_GPIO_In√¥Ty‚â•Def
;

114 
	#LL_GPIO_PIN_0
 ((
GPIO_BSRR_BS0
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000001U√ã

	)

115 
	#LL_GPIO_PIN_1
 ((
GPIO_BSRR_BS1
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000002U√ã

	)

116 
	#LL_GPIO_PIN_2
 ((
GPIO_BSRR_BS2
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000004U√ã

	)

117 
	#LL_GPIO_PIN_3
 ((
GPIO_BSRR_BS3
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000008U√ã

	)

118 
	#LL_GPIO_PIN_4
 ((
GPIO_BSRR_BS4
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000010U√ã

	)

119 
	#LL_GPIO_PIN_5
 ((
GPIO_BSRR_BS5
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000020U√ã

	)

120 
	#LL_GPIO_PIN_6
 ((
GPIO_BSRR_BS6
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000040U√ã

	)

121 
	#LL_GPIO_PIN_7
 ((
GPIO_BSRR_BS7
 << 
GPIO_PIN_MASK_POS
√ã| 0x00000080U√ã

	)

122 
	#LL_GPIO_PIN_8
 ((
GPIO_BSRR_BS8
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000001U√ã

	)

123 
	#LL_GPIO_PIN_9
 ((
GPIO_BSRR_BS9
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000002U√ã

	)

124 
	#LL_GPIO_PIN_10
 ((
GPIO_BSRR_BS10
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000004U√ã

	)

125 
	#LL_GPIO_PIN_11
 ((
GPIO_BSRR_BS11
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000008U√ã

	)

126 
	#LL_GPIO_PIN_12
 ((
GPIO_BSRR_BS12
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000010U√ã

	)

127 
	#LL_GPIO_PIN_13
 ((
GPIO_BSRR_BS13
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000020U√ã

	)

128 
	#LL_GPIO_PIN_14
 ((
GPIO_BSRR_BS14
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000040U√ã

	)

129 
	#LL_GPIO_PIN_15
 ((
GPIO_BSRR_BS15
 << 
GPIO_PIN_MASK_POS
√ã| 0x04000080U√ã

	)

130 
	#LL_GPIO_PIN_ALL
 (
LL_GPIO_PIN_0
 | 
LL_GPIO_PIN_1
 | 
LL_GPIO_PIN_2
 | \

131 
LL_GPIO_PIN_3
 | 
LL_GPIO_PIN_4
 | 
LL_GPIO_PIN_5
 | \

132 
LL_GPIO_PIN_6
 | 
LL_GPIO_PIN_7
 | 
LL_GPIO_PIN_8
 | \

133 
LL_GPIO_PIN_9
 | 
LL_GPIO_PIN_10
 | 
LL_GPIO_PIN_11
 | \

134 
LL_GPIO_PIN_12
 | 
LL_GPIO_PIN_13
 | 
LL_GPIO_PIN_14
 | \

135 
LL_GPIO_PIN_15
√ã

	)

143 
	#LL_GPIO_MODE_ANALOG
 0x00000000U

	)

144 
	#LL_GPIO_MODE_FLOATING
 
GPIO_CRL_CNF0_0


	)

145 
	#LL_GPIO_MODE_INPUT
 
GPIO_CRL_CNF0_1


	)

146 
	#LL_GPIO_MODE_OUTPUT
 
GPIO_CRL_MODE0_0


	)

147 
	#LL_GPIO_MODE_ALTERNATE
 (
GPIO_CRL_CNF0_1
 | 
GPIO_CRL_MODE0_0
√ã

	)

155 
	#LL_GPIO_OUTPUT_PUSHPULL
 0x00000000U

	)

156 
	#LL_GPIO_OUTPUT_OPENDRAIN
 
GPIO_CRL_CNF0_0


	)

164 
	#LL_GPIO_MODE_OUTPUT_10MHz
 
GPIO_CRL_MODE0_0


	)

165 
	#LL_GPIO_MODE_OUTPUT_2MHz
 
GPIO_CRL_MODE0_1


	)

166 
	#LL_GPIO_MODE_OUTPUT_50MHz
 
GPIO_CRL_MODE0


	)

171 
	#LL_GPIO_SPEED_FREQ_LOW
 
LL_GPIO_MODE_OUTPUT_2MHz


	)

172 
	#LL_GPIO_SPEED_FREQ_MEDIUM
 
LL_GPIO_MODE_OUTPUT_10MHz


	)

173 
	#LL_GPIO_SPEED_FREQ_HIGH
 
LL_GPIO_MODE_OUTPUT_50MHz


	)

178 
	#LL_GPIO_PULL_DOWN
 0x00000000U

	)

179 
	#LL_GPIO_PULL_UP
 
GPIO_ODR_ODR0


	)

189 
	#LL_GPIO_AF_EVENTOUT_PIN_0
 
AFIO_EVCR_PIN_PX0


	)

190 
	#LL_GPIO_AF_EVENTOUT_PIN_1
 
AFIO_EVCR_PIN_PX1


	)

191 
	#LL_GPIO_AF_EVENTOUT_PIN_2
 
AFIO_EVCR_PIN_PX2


	)

192 
	#LL_GPIO_AF_EVENTOUT_PIN_3
 
AFIO_EVCR_PIN_PX3


	)

193 
	#LL_GPIO_AF_EVENTOUT_PIN_4
 
AFIO_EVCR_PIN_PX4


	)

194 
	#LL_GPIO_AF_EVENTOUT_PIN_5
 
AFIO_EVCR_PIN_PX5


	)

195 
	#LL_GPIO_AF_EVENTOUT_PIN_6
 
AFIO_EVCR_PIN_PX6


	)

196 
	#LL_GPIO_AF_EVENTOUT_PIN_7
 
AFIO_EVCR_PIN_PX7


	)

197 
	#LL_GPIO_AF_EVENTOUT_PIN_8
 
AFIO_EVCR_PIN_PX8


	)

198 
	#LL_GPIO_AF_EVENTOUT_PIN_9
 
AFIO_EVCR_PIN_PX9


	)

199 
	#LL_GPIO_AF_EVENTOUT_PIN_10
 
AFIO_EVCR_PIN_PX10


	)

200 
	#LL_GPIO_AF_EVENTOUT_PIN_11
 
AFIO_EVCR_PIN_PX11


	)

201 
	#LL_GPIO_AF_EVENTOUT_PIN_12
 
AFIO_EVCR_PIN_PX12


	)

202 
	#LL_GPIO_AF_EVENTOUT_PIN_13
 
AFIO_EVCR_PIN_PX13


	)

203 
	#LL_GPIO_AF_EVENTOUT_PIN_14
 
AFIO_EVCR_PIN_PX14


	)

204 
	#LL_GPIO_AF_EVENTOUT_PIN_15
 
AFIO_EVCR_PIN_PX15


	)

214 
	#LL_GPIO_AF_EVENTOUT_PORT_A
 
AFIO_EVCR_PORT_PA


	)

215 
	#LL_GPIO_AF_EVENTOUT_PORT_B
 
AFIO_EVCR_PORT_PB


	)

216 
	#LL_GPIO_AF_EVENTOUT_PORT_C
 
AFIO_EVCR_PORT_PC


	)

217 
	#LL_GPIO_AF_EVENTOUT_PORT_D
 
AFIO_EVCR_PORT_PD


	)

218 
	#LL_GPIO_AF_EVENTOUT_PORT_E
 
AFIO_EVCR_PORT_PE


	)

227 
	#LL_GPIO_AF_EXTI_PORTA
 0U

	)

228 
	#LL_GPIO_AF_EXTI_PORTB
 1U

	)

229 
	#LL_GPIO_AF_EXTI_PORTC
 2U

	)

230 
	#LL_GPIO_AF_EXTI_PORTD
 3U

	)

231 
	#LL_GPIO_AF_EXTI_PORTE
 4U

	)

232 
	#LL_GPIO_AF_EXTI_PORTF
 5U

	)

233 
	#LL_GPIO_AF_EXTI_PORTG
 6U

	)

241 
	#LL_GPIO_AF_EXTI_LINE0
 (0x000FU << 16U | 0U√ã

	)

242 
	#LL_GPIO_AF_EXTI_LINE1
 (0x00F0U << 16U | 0U√ã

	)

243 
	#LL_GPIO_AF_EXTI_LINE2
 (0x0F00U << 16U | 0U√ã

	)

244 
	#LL_GPIO_AF_EXTI_LINE3
 (0xF000U << 16U | 0U√ã

	)

245 
	#LL_GPIO_AF_EXTI_LINE4
 (0x000FU << 16U | 1U√ã

	)

246 
	#LL_GPIO_AF_EXTI_LINE5
 (0x00F0U << 16U | 1U√ã

	)

247 
	#LL_GPIO_AF_EXTI_LINE6
 (0x0F00U << 16U | 1U√ã

	)

248 
	#LL_GPIO_AF_EXTI_LINE7
 (0xF000U << 16U | 1U√ã

	)

249 
	#LL_GPIO_AF_EXTI_LINE8
 (0x000FU << 16U | 2U√ã

	)

250 
	#LL_GPIO_AF_EXTI_LINE9
 (0x00F0U << 16U | 2U√ã

	)

251 
	#LL_GPIO_AF_EXTI_LINE10
 (0x0F00U << 16U | 2U√ã

	)

252 
	#LL_GPIO_AF_EXTI_LINE11
 (0xF000U << 16U | 2U√ã

	)

253 
	#LL_GPIO_AF_EXTI_LINE12
 (0x000FU << 16U | 3U√ã

	)

254 
	#LL_GPIO_AF_EXTI_LINE13
 (0x00F0U << 16U | 3U√ã

	)

255 
	#LL_GPIO_AF_EXTI_LINE14
 (0x0F00U << 16U | 3U√ã

	)

256 
	#LL_GPIO_AF_EXTI_LINE15
 (0xF000U << 16U | 3U√ã

	)

281 
	#LL_GPIO_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

289 
	#LL_GPIO_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

342 
__STATIC_INLINE
 
LL_GPIO_S√´P√∂Mode
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂
, u√∂t32_√†
Mode
)

344 
u√∂t32_t
 *
pReg
 = (u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
GPIOx
->
CRL
√ã+ (
P√∂
 >> 24)));

345 
MODIFY_REG
(*
pReg
, ((
GPIO_CRL_CNF0
 | 
GPIO_CRL_MODE0
√ã<< (
POSITION_VAL
(
P√∂
√ã* 4U)), (
Mode
 << (POSITION_VAL(Pin) * 4U)));

382 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_G√´P√∂Mode
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂
)

384 
u√∂t32_t
 *
pReg
 = (u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
GPIOx
->
CRL
√ã+ (
P√∂
 >> 24)));

385  (
READ_BIT
(*
pReg
, ((
GPIO_CRL_CNF0
 | 
GPIO_CRL_MODE0
√ã<< (
POSITION_VAL
(
P√∂
) * 4U))) >> (POSITION_VAL(Pin) * 4U));

420 
__STATIC_INLINE
 
LL_GPIO_S√´P√∂S‚â•ed
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂
, u√∂t32_√†
S‚â•ed
)

422 
u√∂t32_t
 *
pReg
 = (u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
GPIOx
->
CRL
√ã+ (
P√∂
 >> 24)));

423 
MODIFY_REG
(*
pReg
, (
GPIO_CRL_MODE0
 << (
POSITION_VAL
(
P√∂
) * 4U)),

424 (
S‚â•ed
 << (
POSITION_VAL
(
P√∂
) * 4U)));

458 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_G√´P√∂S‚â•ed
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂
)

460 
u√∂t32_t
 *
pReg
 = (u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
GPIOx
->
CRL
√ã+ (
P√∂
 >> 24)));

461  (
READ_BIT
(*
pReg
, (
GPIO_CRL_MODE0
 << (
POSITION_VAL
(
P√∂
) * 4U))) >> (POSITION_VAL(Pin) * 4U));

494 
__STATIC_INLINE
 
LL_GPIO_S√´P√∂Ou√ßutTy‚â•
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂
, u√∂t32_√†
Ou√ßutTy‚â•
)

496 
u√∂t32_t
 *
pReg
 = (u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
GPIOx
->
CRL
√ã+ (
P√∂
 >> 24)));

497 
MODIFY_REG
(*
pReg
, (
GPIO_CRL_CNF0_0
 << (
POSITION_VAL
(
P√∂
) * 4U)),

498 (
Ou√ßutTy‚â•
 << (
POSITION_VAL
(
P√∂
) * 4U)));

531 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_G√´P√∂Ou√ßutTy‚â•
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂
)

533 
u√∂t32_t
 *
pReg
 = (u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
GPIOx
->
CRL
√ã+ (
P√∂
 >> 24)));

534  (
READ_BIT
(*
pReg
, (
GPIO_CRL_CNF0_0
 << (
POSITION_VAL
(
P√∂
) * 4U))) >> (POSITION_VAL(Pin) * 4U));

565 
__STATIC_INLINE
 
LL_GPIO_S√´P√∂Pu≈í
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂
, u√∂t32_√†
Pu≈í
)

567 
MODIFY_REG
(
GPIOx
->
ODR
, (
P√∂
 >> 
GPIO_PIN_MASK_POS
), 
Pu≈í
 << (
POSITION_VAL
(Pin >> GPIO_PIN_MASK_POS)));

596 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_G√´P√∂Pu≈í
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂
)

598  (
READ_BIT
(
GPIOx
->
ODR
, (
GPIO_ODR_ODR0
 << (
POSITION_VAL
(
P√∂
 >> 
GPIO_PIN_MASK_POS
)))) >> (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));

630 
__STATIC_INLINE
 
LL_GPIO_LockP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂Mask
)

632 
__IO
 
u√∂t32_t
 
√£mp
;

633 
WRITE_REG
(
GPIOx
->
LCKR
, 
GPIO_LCKR_LCKK
 | ((
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU));

634 
WRITE_REG
(
GPIOx
->
LCKR
, ((
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU));

635 
WRITE_REG
(
GPIOx
->
LCKR
, 
GPIO_LCKR_LCKK
 | ((
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU));

636 
√£mp
 = 
READ_REG
(
GPIOx
->
LCKR
);

637 (√ã
√£mp
;

664 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_IsP√∂Locked
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂Mask
)

666  (
READ_BIT
(
GPIOx
->
LCKR
, ((
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU)) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));

675 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_IsAnyP√∂Locked
(
GPIO_Ty‚â•Def
 *
GPIOx
)

677  (
READ_BIT
(
GPIOx
->
LCKR
, 
GPIO_LCKR_LCKK
) == (GPIO_LCKR_LCKK));

694 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_R√≥dI‚âàutP‚Äπt
(
GPIO_Ty‚â•Def
 *
GPIOx
)

696  (
READ_REG
(
GPIOx
->
IDR
));

723 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_IsI‚âàutP√∂S√´
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂Mask
)

725  (
READ_BIT
(
GPIOx
->
IDR
, (
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));

735 
__STATIC_INLINE
 
LL_GPIO_Wr√¥eOu√ßutP‚Äπt
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P‚ÄπtV√Üue
)

737 
WRITE_REG
(
GPIOx
->
ODR
, 
P‚ÄπtV√Üue
);

746 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_R√≥dOu√ßutP‚Äπt
(
GPIO_Ty‚â•Def
 *
GPIOx
)

748  (
u√∂t32_t
)(
READ_REG
(
GPIOx
->
ODR
));

775 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_IsOu√ßutP√∂S√´
(
GPIO_Ty‚â•Def
 *
GPIOx
, u√∂t32_√†
P√∂Mask
)

777  (
READ_BIT
(
GPIOx
->
ODR
, (
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));

804 
__STATIC_INLINE
 
LL_GPIO_S√´Ou√ßutP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂Mask
)

806 
WRITE_REG
(
GPIOx
->
BSRR
, (
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU);

833 
__STATIC_INLINE
 
LL_GPIO_Re¬£tOu√ßutP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂Mask
)

835 
WRITE_REG
(
GPIOx
->
BRR
, (
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU);

862 
__STATIC_INLINE
 
LL_GPIO_Togg√ÄP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
P√∂Mask
)

864 
u√∂t32_t
 
odr
 = 
READ_REG
(
GPIOx
->
ODR
);

865 
u√∂t32_t
 
p√∂mask
 = ((
P√∂Mask
 >> 
GPIO_PIN_MASK_POS
) & 0x0000FFFFU);

866 
WRITE_REG
(
GPIOx
->
BSRR
, ((
odr
 & 
p√∂mask
) << 16u) | (~odr &√ñinmask));

884 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_SPI1
()

886 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

895 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_SPI1
()

897 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_SPI1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

905 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_SPI1
()

907  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI1_REMAP
) == (AFIO_MAPR_SPI1_REMAP));

916 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_I2C1
()

918 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_I2C1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

927 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_I2C1
()

929 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_I2C1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

937 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_I2C1
()

939  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_I2C1_REMAP
) == (AFIO_MAPR_I2C1_REMAP));

948 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_USART1
()

950 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

959 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_USART1
()

961 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

969 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_USART1
()

971  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART1_REMAP
) == (AFIO_MAPR_USART1_REMAP));

980 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_USART2
()

982 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

991 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_USART2
()

993 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1001 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_USART2
()

1003  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART2_REMAP
) == (AFIO_MAPR_USART2_REMAP));

1006 #i‚Ä°
def√∂ed
 (
AFIO_MAPR_USART3_REMAP
)

1013 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_USART3
()

1015 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_USART3_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1024 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl_USART3
()

1026 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 | AFIO_MAPR_SWJ_CFG));

1035 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_USART3
()

1037 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_USART3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_USART3_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1047 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM1
()

1049 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM1_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1058 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl_TIM1
()

1060 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 | AFIO_MAPR_SWJ_CFG));

1069 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM1
()

1071 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM1_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM1_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1080 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM2
()

1082 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1091 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl2_TIM2
()

1093 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 | AFIO_MAPR_SWJ_CFG));

1102 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl1_TIM2
()

1104 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 | AFIO_MAPR_SWJ_CFG));

1113 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM2
()

1115 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM2_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1125 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM3
()

1127 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM3_REMAP_FULLREMAP
 | AFIO_MAPR_SWJ_CFG));

1137 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl_TIM3
()

1139 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 | AFIO_MAPR_SWJ_CFG));

1149 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM3
()

1151 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_TIM3_REMAP_NOREMAP
 | AFIO_MAPR_SWJ_CFG));

1154 #i‚Ä°
def√∂ed
(
AFIO_MAPR_TIM4_REMAP
)

1162 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM4
()

1164 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM4_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1173 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM4
()

1175 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM4_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1183 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM4
()

1185  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM4_REMAP
) == (AFIO_MAPR_TIM4_REMAP));

1189 #i‚Ä°
def√∂ed
(
AFIO_MAPR_CAN_REMAP_REMAP1
)

1197 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl1_CAN1
()

1199 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_CAN_REMAP_REMAP1
 | AFIO_MAPR_SWJ_CFG));

1208 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl2_CAN1
()

1210 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_CAN_REMAP_REMAP2
 | AFIO_MAPR_SWJ_CFG));

1219 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†P¬®t√ºl3_CAN1
()

1221 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), (
AFIO_MAPR_CAN_REMAP_REMAP3
 | AFIO_MAPR_SWJ_CFG));

1234 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_PD01
()

1236 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PD01_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1248 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_PD01
()

1250 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_PD01_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1258 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_PD01
()

1260  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PD01_REMAP
) == (AFIO_MAPR_PD01_REMAP));

1263 #i‚Ä°
def√∂ed
(
AFIO_MAPR_TIM5CH4_IREMAP
)

1271 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM5CH4
()

1273 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM5CH4_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1283 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM5CH4
()

1285 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM5CH4_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1293 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM5CH4
()

1295  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM5CH4_IREMAP
) == (AFIO_MAPR_TIM5CH4_IREMAP));

1299 #i‚Ä°
def√∂ed
(
AFIO_MAPR_ETH_REMAP
)

1307 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_ETH
()

1309 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ETH_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1319 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_ETH
()

1321 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ETH_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1329 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_ETH
()

1331  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ETH_REMAP
) == (AFIO_MAPR_ETH_REMAP));

1335 #i‚Ä°
def√∂ed
(
AFIO_MAPR_CAN2_REMAP
)

1344 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_CAN2
()

1346 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1355 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_CAN2
()

1357 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_CAN2_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1365 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_CAN2
()

1367  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN2_REMAP
) == (AFIO_MAPR_CAN2_REMAP));

1371 #i‚Ä°
def√∂ed
(
AFIO_MAPR_MII_RMII_SEL
)

1379 
__STATIC_INLINE
 
LL_GPIO_AF_S√±eÀò_ETH_RMII
()

1381 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_MII_RMII_SEL
 | 
AFIO_MAPR_SWJ_CFG
);

1391 
__STATIC_INLINE
 
LL_GPIO_AF_S√±eÀò_ETH_MII
()

1393 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_MII_RMII_SEL
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1397 #i‚Ä°
def√∂ed
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

1404 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_ADC1_ETRGINJ
()

1406 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1415 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_ADC1_ETRGINJ
()

1417 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC1_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1425 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_ADC1_ETRGINJ
()

1427  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
) == (AFIO_MAPR_ADC1_ETRGINJ_REMAP));

1431 #i‚Ä°
def√∂ed
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

1438 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_ADC1_ETRGREG
()

1440 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1449 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_ADC1_ETRGREG
()

1451 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC1_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1459 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_ADC1_ETRGREG
()

1461  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGREG_REMAP
) == (AFIO_MAPR_ADC1_ETRGREG_REMAP));

1465 #i‚Ä°
def√∂ed
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

1473 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_ADC2_ETRGINJ
()

1475 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1484 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_ADC2_ETRGINJ
()

1486 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC2_ETRGINJ_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1494 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_ADC2_ETRGINJ
()

1496  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
) == (AFIO_MAPR_ADC2_ETRGINJ_REMAP));

1500 #i‚Ä°
def√∂ed
 (
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

1508 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_ADC2_ETRGREG
()

1510 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1519 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_ADC2_ETRGREG
()

1521 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_ADC2_ETRGREG_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1529 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_ADC2_ETRGREG
()

1531  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGREG_REMAP
) == (AFIO_MAPR_ADC2_ETRGREG_REMAP));

1541 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_SWJ
()

1543 
CLEAR_BIT
(
AFIO
->
MAPR
,
AFIO_MAPR_SWJ_CFG
);

1544 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG_RESET
);

1553 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†_SWJ_NONJTRST
()

1555 
CLEAR_BIT
(
AFIO
->
MAPR
,
AFIO_MAPR_SWJ_CFG
);

1556 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG_NOJNTRST
);

1565 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†_SWJ_NOJTAG
()

1567 
CLEAR_BIT
(
AFIO
->
MAPR
,
AFIO_MAPR_SWJ_CFG
);

1568 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE
);

1577 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_SWJ
()

1579 
CLEAR_BIT
(
AFIO
->
MAPR
,
AFIO_MAPR_SWJ_CFG
);

1580 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG_DISABLE
);

1583 #i‚Ä°
def√∂ed
(
AFIO_MAPR_SPI3_REMAP
)

1592 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_SPI3
()

1594 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1604 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_SPI3
()

1606 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_SPI3_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1614 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_SPI3
()

1616  (
READ_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI3_REMAP
) == (AFIO_MAPR_SPI3_REMAP));

1620 #i‚Ä°
def√∂ed
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

1629 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†_TIM2ITR1_TO_USB
()

1631 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2ITR1_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1641 
__STATIC_INLINE
 
LL_GPIO_AF_Rem‚â†_TIM2ITR1_TO_ETH
()

1643 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_TIM2ITR1_IREMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1647 #i‚Ä°
def√∂ed
(
AFIO_MAPR_PTP_PPS_REMAP
)

1656 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_ETH_PTP_PPS
()

1658 
SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PTP_PPS_REMAP
 | 
AFIO_MAPR_SWJ_CFG
);

1668 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_ETH_PTP_PPS
()

1670 
MODIFY_REG
(
AFIO
->
MAPR
, (
AFIO_MAPR_PTP_PPS_REMAP
 | 
AFIO_MAPR_SWJ_CFG
), AFIO_MAPR_SWJ_CFG);

1674 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM9_REMAP
)

1682 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM9
()

1684 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
);

1693 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM9
()

1695 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
);

1703 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM9
()

1705  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
) == (AFIO_MAPR2_TIM9_REMAP));

1709 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM10_REMAP
)

1717 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM10
()

1719 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
);

1728 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM10
()

1730 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
);

1738 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM10
()

1740  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
) == (AFIO_MAPR2_TIM10_REMAP));

1744 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM11_REMAP
)

1751 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM11
()

1753 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
);

1762 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM11
()

1764 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
);

1772 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM11
()

1774  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
) == (AFIO_MAPR2_TIM11_REMAP));

1778 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM13_REMAP
)

1786 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM13
()

1788 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
);

1797 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM13
()

1799 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
);

1807 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM13
()

1809  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
) == (AFIO_MAPR2_TIM13_REMAP));

1813 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM14_REMAP
)

1821 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM14
()

1823 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
);

1832 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM14
()

1834 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
);

1842 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM14
()

1844  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
) == (AFIO_MAPR2_TIM14_REMAP));

1848 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_FSMC_NADV_REMAP
)

1856 
__STATIC_INLINE
 
LL_GPIO_AF_Disc‚ÅÑ‚àöÀò_FSMCNADV
()

1858 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
);

1867 
__STATIC_INLINE
 
LL_GPIO_AF_C‚ÅÑ‚àöÀò_FSMCNADV
()

1869 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
);

1873 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM15_REMAP
)

1881 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM15
()

1883 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
);

1891 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM15
()

1893 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
);

1901 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM15
()

1903  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
) == (AFIO_MAPR2_TIM15_REMAP));

1907 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM16_REMAP
)

1915 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM16
()

1917 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
);

1926 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM16
()

1928 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
);

1936 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM16
()

1938  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
) == (AFIO_MAPR2_TIM16_REMAP));

1942 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM17_REMAP
)

1950 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM17
()

1952 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
);

1961 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM17
()

1963 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
);

1971 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM17
()

1973  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
) == (AFIO_MAPR2_TIM17_REMAP));

1977 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_CEC_REMAP
)

1985 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_CEC
()

1987 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
);

1996 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_CEC
()

1998 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
);

2006 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_CEC
()

2008  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
) == (AFIO_MAPR2_CEC_REMAP));

2012 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM1_DMA_REMAP
)

2020 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM1DMA
()

2022 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
);

2031 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM1DMA
()

2033 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
);

2041 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM1DMA
()

2043  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
) == (AFIO_MAPR2_TIM1_DMA_REMAP));

2047 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

2055 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM67DACDMA
()

2057 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
);

2066 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM67DACDMA
()

2068 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
);

2076 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM67DACDMA
()

2078  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
) == (AFIO_MAPR2_TIM67_DAC_DMA_REMAP));

2082 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_TIM12_REMAP
)

2091 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_TIM12
()

2093 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
);

2103 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_TIM12
()

2105 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
);

2113 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_TIM12
()

2115  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
) == (AFIO_MAPR2_TIM12_REMAP));

2119 #i‚Ä°
def√∂ed
(
AFIO_MAPR2_MISC_REMAP
)

2132 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄRem‚â†_MISC
()

2134 
SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
);

2148 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄRem‚â†_MISC
()

2150 
CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
);

2158 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_IsE¬´b√ÄdRem‚â†_MISC
()

2160  (
READ_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
) == (AFIO_MAPR2_MISC_REMAP));

2202 
__STATIC_INLINE
 
LL_GPIO_AF_C‚ÅÑfigEv√≠tout
(
u√∂t32_t
 
LL_GPIO_P‚ÄπtSourÀö
, u√∂t32_√†
LL_GPIO_P√∂SourÀö
)

2204 
MODIFY_REG
(
AFIO
->
EVCR
, (
AFIO_EVCR_PORT
√ã| (
AFIO_EVCR_PIN
), (
LL_GPIO_P‚ÄπtSourÀö
√ã| (
LL_GPIO_P√∂SourÀö
));

2212 
__STATIC_INLINE
 
LL_GPIO_AF_E¬´b√ÄEv√≠tout
()

2214 
SET_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

2222 
__STATIC_INLINE
 
LL_GPIO_AF_Di√üb√ÄEv√≠tout
()

2224 
CLEAR_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

2268 
__STATIC_INLINE
 
LL_GPIO_AF_S√´EXTISourÀö
(
u√∂t32_t
 
P‚Äπt
, u√∂t32_√†
L√∂e
)

2270 
MODIFY_REG
(
AFIO
->
EXTICR
[
L√∂e
 & 0xFF], (L√∂√™>> 16), 
P‚Äπt
 << 
POSITION_VAL
((Line >> 16)));

2305 
__STATIC_INLINE
 
u√∂t32_t
 
LL_GPIO_AF_G√´EXTISourÀö
(u√∂t32_√†
L√∂e
)

2307  (
u√∂t32_t
)(
READ_BIT
(
AFIO
->
EXTICR
[
L√∂e
 & 0xFF], (L√∂√™>> 16)√ã>> 
POSITION_VAL
(Line >> 16));

2314 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

2319 
E¬∫‚ÄπS√®tus
 
LL_GPIO_DeIn√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
);

2320 
E¬∫‚ÄπS√®tus
 
LL_GPIO_In√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
LL_GPIO_In√¥Ty‚â•Def
 *
GPIO_In√¥S√•uÀò
);

2321 
LL_GPIO_S√•uÀòIn√¥
(
LL_GPIO_In√¥Ty‚â•Def
 *
GPIO_In√¥S√•uÀò
);

2341 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_i2c.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_I2C_H


22 
	#__STM32F1xx_LL_I2C_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
I2C1
√ã|| def√∂ed (
I2C2
)

50 
	#LL_I2C_MAX_SPEED_STANDARD
 100000U

	)

51 
	#LL_I2C_MAX_SPEED_FAST
 400000U

	)

57 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

67 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

73 
u√∂t32_t
 
P√Æ√πh√Æ√ÜMode
;

78 
u√∂t32_t
 
ClockS‚â•ed
;

84 
u√∂t32_t
 
DutyCyÀõe
;

89 
u√∂t32_t
 
OwnAdd¬™ss1
;

94 
u√∂t32_t
 
Ty‚â•Acknow√Ädge
;

99 
u√∂t32_t
 
OwnAddrSize
;

103 } 
	tLL_I2C_In√¥Ty‚â•Def
;

118 
	#LL_I2C_SR1_SB
 
I2C_SR1_SB


	)

119 
	#LL_I2C_SR1_ADDR
 
I2C_SR1_ADDR


	)

121 
	#LL_I2C_SR1_BTF
 
I2C_SR1_BTF


	)

122 
	#LL_I2C_SR1_ADD10
 
I2C_SR1_ADD10


	)

123 
	#LL_I2C_SR1_STOPF
 
I2C_SR1_STOPF


	)

124 
	#LL_I2C_SR1_RXNE
 
I2C_SR1_RXNE


	)

125 
	#LL_I2C_SR1_TXE
 
I2C_SR1_TXE


	)

126 
	#LL_I2C_SR1_BERR
 
I2C_SR1_BERR


	)

127 
	#LL_I2C_SR1_ARLO
 
I2C_SR1_ARLO


	)

128 
	#LL_I2C_SR1_AF
 
I2C_SR1_AF


	)

129 
	#LL_I2C_SR1_OVR
 
I2C_SR1_OVR


	)

130 
	#LL_I2C_SR1_PECERR
 
I2C_ISR_PECERR


	)

131 
	#LL_I2C_SR1_TIMEOUT
 
I2C_ISR_TIMEOUT


	)

132 
	#LL_I2C_SR1_SMALERT
 
I2C_ISR_SMALERT


	)

133 
	#LL_I2C_SR2_MSL
 
I2C_SR2_MSL


	)

134 
	#LL_I2C_SR2_BUSY
 
I2C_SR2_BUSY


	)

135 
	#LL_I2C_SR2_TRA
 
I2C_SR2_TRA


	)

136 
	#LL_I2C_SR2_GENCALL
 
I2C_SR2_GENCALL


	)

137 
	#LL_I2C_SR2_SMBDEFAULT
 
I2C_SR2_SMBDEFAULT


	)

138 
	#LL_I2C_SR2_SMBHOST
 
I2C_SR2_SMBHOST


	)

139 
	#LL_I2C_SR2_DUALF
 
I2C_SR2_DUALF


	)

148 
	#LL_I2C_CR2_ITEVTEN
 
I2C_CR2_ITEVTEN


	)

149 
	#LL_I2C_CR2_ITBUFEN
 
I2C_CR2_ITBUFEN


	)

150 
	#LL_I2C_CR2_ITERREN
 
I2C_CR2_ITERREN


	)

158 
	#LL_I2C_OWNADDRESS1_7BIT
 0x00004000U

	)

159 
	#LL_I2C_OWNADDRESS1_10BIT
 (
u√∂t32_t
)(
I2C_OAR1_ADDMODE
 | 0x00004000U√ã

	)

167 
	#LL_I2C_DUTYCYCLE_2
 0x00000000U

	)

168 
	#LL_I2C_DUTYCYCLE_16_9
 
I2C_CCR_DUTY


	)

176 
	#LL_I2C_CLOCK_SPEED_STANDARD_MODE
 0x00000000U

	)

177 
	#LL_I2C_CLOCK_SPEED_FAST_MODE
 
I2C_CCR_FS


	)

185 
	#LL_I2C_MODE_I2C
 0x00000000U

	)

186 
	#LL_I2C_MODE_SMBUS_HOST
 (
u√∂t32_t
)(
I2C_CR1_SMBUS
 | 
I2C_CR1_SMBTYPE
 | 
I2C_CR1_ENARP
√ã

	)

187 
	#LL_I2C_MODE_SMBUS_DEVICE
 
I2C_CR1_SMBUS


	)

188 
	#LL_I2C_MODE_SMBUS_DEVICE_ARP
 (
u√∂t32_t
)(
I2C_CR1_SMBUS
 | 
I2C_CR1_ENARP
√ã

	)

196 
	#LL_I2C_ACK
 
I2C_CR1_ACK


	)

197 
	#LL_I2C_NACK
 0x00000000U

	)

205 
	#LL_I2C_DIRECTION_WRITE
 
I2C_SR2_TRA


	)

206 
	#LL_I2C_DIRECTION_READ
 0x00000000U

	)

231 
	#LL_I2C_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

239 
	#LL_I2C_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

253 
	#__LL_I2C_FREQ_HZ_TO_MHZ
(
__PCLK__
√ã(
u√∂t32_t
)((__PCLK__)/1000000U)

	)

260 
	#__LL_I2C_FREQ_MHZ_TO_HZ
(
__PCLK__
√ã(
u√∂t32_t
)((__PCLK__)*1000000U)

	)

268 
	#__LL_I2C_RISE_TIME
(
__FREQRANGE__
, 
__SPEED__
√ã(
u√∂t32_t
)(((__SPEED__√ã<Ô£ø
LL_I2C_MAX_SPEED_STANDARD
√ã? ((__FREQRANGE__√ã+ 1U√ã: ((((__FREQRANGE__√ã* 300U√ã/ 1000U√ã+ 1U))

	)

279 
	#__LL_I2C_SPEED_TO_CCR
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
√ã(
u√∂t32_t
)(((__SPEED__√ã<Ô£ø
LL_I2C_MAX_SPEED_STANDARD
)? \

280 (
	`__LL_I2C_SPEED_STANDARD_TO_CCR
((
__PCLK__
), (
__SPEED__
))) : \

281 (
	`__LL_I2C_SPEED_FAST_TO_CCR
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
))))

	)

289 
	#__LL_I2C_SPEED_STANDARD_TO_CCR
(
__PCLK__
, 
__SPEED__
√ã(
u√∂t32_t
)(((((__PCLK__)/((__SPEED__√ã<< 1U)√ã& 
I2C_CCR_CCR
√ã< 4U)? 4U:((__PCLK__√ã/ ((__SPEED__√ã<< 1U)))

	)

300 
	#__LL_I2C_SPEED_FAST_TO_CCR
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
√ã(
u√∂t32_t
)(((__DUTYCYCLE__√ã=Ô£ø
LL_I2C_DUTYCYCLE_2
)? \

301 (((((
__PCLK__
√ã/ ((
__SPEED__
√ã* 3U)√ã& 
I2C_CCR_CCR
) == 0U)? 1U:((__PCLK__) / ((__SPEED__) * 3U))) : \

302 (((((
__PCLK__
√ã/ ((
__SPEED__
√ã* 25U)√ã& 
I2C_CCR_CCR
√ã=Ô£ø0U)? 1U:((__PCLK__√ã/ ((__SPEED__√ã* 25U))))

	)

309 
	#__LL_I2C_10BIT_ADDRESS
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((__ADDRESS__√ã& (u√∂t16_t)(0x00FF))))

	)

316 
	#__LL_I2C_10BIT_HEADER_WRITE
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((u√∂t16_t)(((u√∂t16_t)((__ADDRESS__√ã& (u√∂t16_t)(0x0300))√ã>> 7√ã| (u√∂t16_t)(0xF0))))

	)

323 
	#__LL_I2C_10BIT_HEADER_READ
(
__ADDRESS__
√ã((
u√∂t8_t
)((
u√∂t16_t
)((u√∂t16_t)(((u√∂t16_t)((__ADDRESS__√ã& (u√∂t16_t)(0x0300))√ã>> 7√ã| (u√∂t16_t)(0xF1))))

	)

349 
__STATIC_INLINE
 
LL_I2C_E¬´b√Ä
(
I2C_Ty‚â•Def
 *
I2Cx
)

351 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
);

360 
__STATIC_INLINE
 
LL_I2C_Di√üb√Ä
(
I2C_Ty‚â•Def
 *
I2Cx
)

362 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
);

371 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√Äd
(
I2C_Ty‚â•Def
 *
I2Cx
)

373  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
) == (I2C_CR1_PE));

383 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄDMAReq_TX
(
I2C_Ty‚â•Def
 *
I2Cx
)

385 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

394 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄDMAReq_TX
(
I2C_Ty‚â•Def
 *
I2Cx
)

396 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

405 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdDMAReq_TX
(
I2C_Ty‚â•Def
 *
I2Cx
)

407  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
) == (I2C_CR2_DMAEN));

416 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄDMAReq_RX
(
I2C_Ty‚â•Def
 *
I2Cx
)

418 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

427 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄDMAReq_RX
(
I2C_Ty‚â•Def
 *
I2Cx
)

429 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
);

438 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdDMAReq_RX
(
I2C_Ty‚â•Def
 *
I2Cx
)

440  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_DMAEN
) == (I2C_CR2_DMAEN));

449 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_DMA_G√´RegAddr
(
I2C_Ty‚â•Def
 *
I2Cx
)

451  (
u√∂t32_t
√ã& (
I2Cx
->
DR
);

461 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄClockS√•√´ch√∂g
(
I2C_Ty‚â•Def
 *
I2Cx
)

463 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_NOSTRETCH
);

473 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄClockS√•√´ch√∂g
(
I2C_Ty‚â•Def
 *
I2Cx
)

475 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_NOSTRETCH
);

484 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdClockS√•√´ch√∂g
(
I2C_Ty‚â•Def
 *
I2Cx
)

486  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_NOSTRETCH
) != (I2C_CR1_NOSTRETCH));

496 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄG√≠√Æ√ÜC√Ül
(
I2C_Ty‚â•Def
 *
I2Cx
)

498 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENGC
);

508 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄG√≠√Æ√ÜC√Ül
(
I2C_Ty‚â•Def
 *
I2Cx
)

510 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENGC
);

519 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdG√≠√Æ√ÜC√Ül
(
I2C_Ty‚â•Def
 *
I2Cx
)

521  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENGC
) == (I2C_CR1_ENGC));

537 
__STATIC_INLINE
 
LL_I2C_S√´OwnAdd¬™ss1
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
OwnAdd¬™ss1
, u√∂t32_√†
OwnAddrSize
)

539 
MODIFY_REG
(
I2Cx
->
OAR1
, 
I2C_OAR1_ADD0
 | 
I2C_OAR1_ADD1_7
 | 
I2C_OAR1_ADD8_9
 | 
I2C_OAR1_ADDMODE
, 
OwnAdd¬™ss1
 | 
OwnAddrSize
);

550 
__STATIC_INLINE
 
LL_I2C_S√´OwnAdd¬™ss2
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
OwnAdd¬™ss2
)

552 
MODIFY_REG
(
I2Cx
->
OAR2
, 
I2C_OAR2_ADD2
, 
OwnAdd¬™ss2
);

561 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄOwnAdd¬™ss2
(
I2C_Ty‚â•Def
 *
I2Cx
)

563 
SET_BIT
(
I2Cx
->
OAR2
, 
I2C_OAR2_ENDUAL
);

572 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄOwnAdd¬™ss2
(
I2C_Ty‚â•Def
 *
I2Cx
)

574 
CLEAR_BIT
(
I2Cx
->
OAR2
, 
I2C_OAR2_ENDUAL
);

583 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdOwnAdd¬™ss2
(
I2C_Ty‚â•Def
 *
I2Cx
)

585  (
READ_BIT
(
I2Cx
->
OAR2
, 
I2C_OAR2_ENDUAL
) == (I2C_OAR2_ENDUAL));

595 
__STATIC_INLINE
 
LL_I2C_S√´P√Æ√πhClock
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
P√Æ√πhClock
)

597 
MODIFY_REG
(
I2Cx
->
CR2
, 
I2C_CR2_FREQ
, 
__LL_I2C_FREQ_HZ_TO_MHZ
(
P√Æ√πhClock
));

606 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´P√Æ√πhClock
(
I2C_Ty‚â•Def
 *
I2Cx
)

608  (
u√∂t32_t
)(
__LL_I2C_FREQ_MHZ_TO_HZ
(
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_FREQ
)));

620 
__STATIC_INLINE
 
LL_I2C_S√´DutyCyÀõe
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
DutyCyÀõe
)

622 
MODIFY_REG
(
I2Cx
->
CCR
, 
I2C_CCR_DUTY
, 
DutyCyÀõe
);

633 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´DutyCyÀõe
(
I2C_Ty‚â•Def
 *
I2Cx
)

635  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
CCR
, 
I2C_CCR_DUTY
));

647 
__STATIC_INLINE
 
LL_I2C_S√´ClockS‚â•edMode
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
ClockS‚â•edMode
)

649 
MODIFY_REG
(
I2Cx
->
CCR
, 
I2C_CCR_FS
, 
ClockS‚â•edMode
);

660 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´ClockS‚â•edMode
(
I2C_Ty‚â•Def
 *
I2Cx
)

662  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
CCR
, 
I2C_CCR_FS
));

673 
__STATIC_INLINE
 
LL_I2C_S√´Ri¬£Time
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
Ri¬£Time
)

675 
MODIFY_REG
(
I2Cx
->
TRISE
, 
I2C_TRISE_TRISE
, 
Ri¬£Time
);

684 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´Ri¬£Time
(
I2C_Ty‚â•Def
 *
I2Cx
)

686  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
TRISE
, 
I2C_TRISE_TRISE
));

697 
__STATIC_INLINE
 
LL_I2C_S√´ClockP√Æiod
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
ClockP√Æiod
)

699 
MODIFY_REG
(
I2Cx
->
CCR
, 
I2C_CCR_CCR
, 
ClockP√Æiod
);

708 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´ClockP√Æiod
(
I2C_Ty‚â•Def
 *
I2Cx
)

710  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
CCR
, 
I2C_CCR_CCR
));

729 
__STATIC_INLINE
 
LL_I2C_C‚ÅÑfigS‚â•ed
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
P√Æ√πhClock
, u√∂t32_√†
ClockS‚â•ed
,

730 
u√∂t32_t
 
DutyCyÀõe
)

732 
u√∂t32_t
 
‚Ä∞eq√∏nge
 = 0x0U;

733 
u√∂t32_t
 
Àõockc‚ÅÑfig
 = 0x0U;

736 
‚Ä∞eq√∏nge
 = 
__LL_I2C_FREQ_HZ_TO_MHZ
(
P√Æ√πhClock
);

739 
MODIFY_REG
(
I2Cx
->
CR2
, 
I2C_CR2_FREQ
, 
‚Ä∞eq√∏nge
);

742 
MODIFY_REG
(
I2Cx
->
TRISE
, 
I2C_TRISE_TRISE
, 
__LL_I2C_RISE_TIME
(
‚Ä∞eq√∏nge
, 
ClockS‚â•ed
));

745 i‚Ä°(
ClockS‚â•ed
 > 
LL_I2C_MAX_SPEED_STANDARD
)

748 
Àõockc‚ÅÑfig
 = 
LL_I2C_CLOCK_SPEED_FAST_MODE
 | \

749 
__LL_I2C_SPEED_FAST_TO_CCR
(
P√Æ√πhClock
, 
ClockS‚â•ed
, 
DutyCyÀõe
) | \

750 
DutyCyÀõe
;

755 
Àõockc‚ÅÑfig
 = 
LL_I2C_CLOCK_SPEED_STANDARD_MODE
 | \

756 
__LL_I2C_SPEED_STANDARD_TO_CCR
(
P√Æ√πhClock
, 
ClockS‚â•ed
);

760 
MODIFY_REG
(
I2Cx
->
CCR
, (
I2C_CCR_FS
 | 
I2C_CCR_DUTY
 | 
I2C_CCR_CCR
), 
Àõockc‚ÅÑfig
);

778 
__STATIC_INLINE
 
LL_I2C_S√´Mode
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
P√Æ√πh√Æ√ÜMode
)

780 
MODIFY_REG
(
I2Cx
->
CR1
, 
I2C_CR1_SMBUS
 | 
I2C_CR1_SMBTYPE
 | 
I2C_CR1_ENARP
, 
P√Æ√πh√Æ√ÜMode
);

797 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´Mode
(
I2C_Ty‚â•Def
 *
I2Cx
)

799  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SMBUS
 | 
I2C_CR1_SMBTYPE
 | 
I2C_CR1_ENARP
));

815 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄSMBusA√ÄœÄ
(
I2C_Ty‚â•Def
 *
I2Cx
)

817 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ALERT
);

833 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄSMBusA√ÄœÄ
(
I2C_Ty‚â•Def
 *
I2Cx
)

835 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ALERT
);

846 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdSMBusA√ÄœÄ
(
I2C_Ty‚â•Def
 *
I2Cx
)

848  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ALERT
) == (I2C_CR1_ALERT));

859 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄSMBusPEC
(
I2C_Ty‚â•Def
 *
I2Cx
)

861 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENPEC
);

872 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄSMBusPEC
(
I2C_Ty‚â•Def
 *
I2Cx
)

874 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENPEC
);

885 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdSMBusPEC
(
I2C_Ty‚â•Def
 *
I2Cx
)

887  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_ENPEC
) == (I2C_CR1_ENPEC));

905 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄIT_TX
(
I2C_Ty‚â•Def
 *
I2Cx
)

907 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

917 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄIT_TX
(
I2C_Ty‚â•Def
 *
I2Cx
)

919 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

929 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdIT_TX
(
I2C_Ty‚â•Def
 *
I2Cx
)

931  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));

941 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄIT_RX
(
I2C_Ty‚â•Def
 *
I2Cx
)

943 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

953 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄIT_RX
(
I2C_Ty‚â•Def
 *
I2Cx
)

955 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
);

965 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdIT_RX
(
I2C_Ty‚â•Def
 *
I2Cx
)

967  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
 | 
I2C_CR2_ITBUFEN
) == (I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN));

986 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄIT_EVT
(
I2C_Ty‚â•Def
 *
I2Cx
)

988 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
);

1005 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄIT_EVT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1007 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
);

1016 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdIT_EVT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1018  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITEVTEN
) == (I2C_CR2_ITEVTEN));

1030 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄIT_BUF
(
I2C_Ty‚â•Def
 *
I2Cx
)

1032 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITBUFEN
);

1044 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄIT_BUF
(
I2C_Ty‚â•Def
 *
I2Cx
)

1046 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITBUFEN
);

1055 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdIT_BUF
(
I2C_Ty‚â•Def
 *
I2Cx
)

1057  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITBUFEN
) == (I2C_CR2_ITBUFEN));

1076 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄIT_ERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1078 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITERREN
);

1097 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄIT_ERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1099 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITERREN
);

1108 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdIT_ERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1110  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_ITERREN
) == (I2C_CR2_ITERREN));

1129 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_TXE
(
I2C_Ty‚â•Def
 *
I2Cx
)

1131  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_TXE
) == (I2C_SR1_TXE));

1142 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_BTF
(
I2C_Ty‚â•Def
 *
I2Cx
)

1144  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_BTF
) == (I2C_SR1_BTF));

1155 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_RXNE
(
I2C_Ty‚â•Def
 *
I2Cx
)

1157  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_RXNE
) == (I2C_SR1_RXNE));

1168 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_SB
(
I2C_Ty‚â•Def
 *
I2Cx
)

1170  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_SB
) == (I2C_SR1_SB));

1181 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_ADDR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1183  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ADDR
) == (I2C_SR1_ADDR));

1194 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_ADD10
(
I2C_Ty‚â•Def
 *
I2Cx
)

1196  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ADD10
) == (I2C_SR1_ADD10));

1207 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_AF
(
I2C_Ty‚â•Def
 *
I2Cx
)

1209  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_AF
) == (I2C_SR1_AF));

1220 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_STOP
(
I2C_Ty‚â•Def
 *
I2Cx
)

1222  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_STOPF
) == (I2C_SR1_STOPF));

1233 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_BERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1235  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_BERR
) == (I2C_SR1_BERR));

1246 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_ARLO
(
I2C_Ty‚â•Def
 *
I2Cx
)

1248  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ARLO
) == (I2C_SR1_ARLO));

1259 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_OVR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1261  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_OVR
) == (I2C_SR1_OVR));

1272 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveSMBusF≈ìg_PECERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1274  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_PECERR
) == (I2C_SR1_PECERR));

1285 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveSMBusF≈ìg_TIMEOUT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1287  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_TIMEOUT
) == (I2C_SR1_TIMEOUT));

1298 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveSMBusF≈ìg_ALERT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1300  (
READ_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_SMBALERT
) == (I2C_SR1_SMBALERT));

1311 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_BUSY
(
I2C_Ty‚â•Def
 *
I2Cx
)

1313  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_BUSY
) == (I2C_SR2_BUSY));

1324 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_DUAL
(
I2C_Ty‚â•Def
 *
I2Cx
)

1326  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_DUALF
) == (I2C_SR2_DUALF));

1340 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveSMBusF≈ìg_SMBHOST
(
I2C_Ty‚â•Def
 *
I2Cx
)

1342  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_SMBHOST
) == (I2C_SR2_SMBHOST));

1356 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveSMBusF≈ìg_SMBDEFAULT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1358  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_SMBDEFAULT
) == (I2C_SR2_SMBDEFAULT));

1370 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_GENCALL
(
I2C_Ty‚â•Def
 *
I2Cx
)

1372  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_GENCALL
) == (I2C_SR2_GENCALL));

1383 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsAÀòiveF≈ìg_MSL
(
I2C_Ty‚â•Def
 *
I2Cx
)

1385  (
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_MSL
) == (I2C_SR2_MSL));

1396 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®F≈ìg_ADDR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1398 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1399 
tm¬•eg
 = 
I2Cx
->
SR1
;

1400 (√ã
tm¬•eg
;

1401 
tm¬•eg
 = 
I2Cx
->
SR2
;

1402 (√ã
tm¬•eg
;

1411 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®F≈ìg_AF
(
I2C_Ty‚â•Def
 *
I2Cx
)

1413 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_AF
);

1425 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®F≈ìg_STOP
(
I2C_Ty‚â•Def
 *
I2Cx
)

1427 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1428 
tm¬•eg
 = 
I2Cx
->
SR1
;

1429 (√ã
tm¬•eg
;

1430 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PE
);

1439 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®F≈ìg_BERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1441 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_BERR
);

1450 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®F≈ìg_ARLO
(
I2C_Ty‚â•Def
 *
I2Cx
)

1452 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_ARLO
);

1461 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®F≈ìg_OVR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1463 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_OVR
);

1472 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®SMBusF≈ìg_PECERR
(
I2C_Ty‚â•Def
 *
I2Cx
)

1474 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_PECERR
);

1485 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®SMBusF≈ìg_TIMEOUT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1487 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_TIMEOUT
);

1498 
__STATIC_INLINE
 
LL_I2C_C√Ä¬®SMBusF≈ìg_ALERT
(
I2C_Ty‚â•Def
 *
I2Cx
)

1500 
CLEAR_BIT
(
I2Cx
->
SR1
, 
I2C_SR1_SMBALERT
);

1517 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄRe¬£t
(
I2C_Ty‚â•Def
 *
I2Cx
)

1519 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SWRST
);

1528 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄRe¬£t
(
I2C_Ty‚â•Def
 *
I2Cx
)

1530 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SWRST
);

1539 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsRe¬£tE¬´b√Äd
(
I2C_Ty‚â•Def
 *
I2Cx
)

1541  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_SWRST
) == (I2C_CR1_SWRST));

1554 
__STATIC_INLINE
 
LL_I2C_Acknow√ÄdgeNextD¬©a
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t32_t
 
Ty‚â•Acknow√Ädge
)

1556 
MODIFY_REG
(
I2Cx
->
CR1
, 
I2C_CR1_ACK
, 
Ty‚â•Acknow√Ädge
);

1567 
__STATIC_INLINE
 
LL_I2C_G√≠√Æ¬©eS√®œÄC‚ÅÑd√¥i‚ÅÑ
(
I2C_Ty‚â•Def
 *
I2Cx
)

1569 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_START
);

1578 
__STATIC_INLINE
 
LL_I2C_G√≠√Æ¬©eSt‚Ä∫C‚ÅÑd√¥i‚ÅÑ
(
I2C_Ty‚â•Def
 *
I2Cx
)

1580 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_STOP
);

1590 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄB√¥POS
(
I2C_Ty‚â•Def
 *
I2Cx
)

1592 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_POS
);

1602 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄB√¥POS
(
I2C_Ty‚â•Def
 *
I2Cx
)

1604 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_POS
);

1613 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdB√¥POS
(
I2C_Ty‚â•Def
 *
I2Cx
)

1615  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_POS
) == (I2C_CR1_POS));

1628 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
I2C_Ty‚â•Def
 *
I2Cx
)

1630  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_TRA
));

1640 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄLa¬∞DMA
(
I2C_Ty‚â•Def
 *
I2Cx
)

1642 
SET_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_LAST
);

1652 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄLa¬∞DMA
(
I2C_Ty‚â•Def
 *
I2Cx
)

1654 
CLEAR_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_LAST
);

1663 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdLa¬∞DMA
(
I2C_Ty‚â•Def
 *
I2Cx
)

1665  (
READ_BIT
(
I2Cx
->
CR2
, 
I2C_CR2_LAST
) == (I2C_CR2_LAST));

1678 
__STATIC_INLINE
 
LL_I2C_E¬´b√ÄSMBusPECCom‚àë¬™
(
I2C_Ty‚â•Def
 *
I2Cx
)

1680 
SET_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PEC
);

1691 
__STATIC_INLINE
 
LL_I2C_Di√üb√ÄSMBusPECCom‚àë¬™
(
I2C_Ty‚â•Def
 *
I2Cx
)

1693 
CLEAR_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PEC
);

1704 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_IsE¬´b√ÄdSMBusPECCom‚àë¬™
(
I2C_Ty‚â•Def
 *
I2Cx
)

1706  (
READ_BIT
(
I2Cx
->
CR1
, 
I2C_CR1_PEC
) == (I2C_CR1_PEC));

1717 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2C_G√´SMBusPEC
(
I2C_Ty‚â•Def
 *
I2Cx
)

1719  (
u√∂t32_t
)(
READ_BIT
(
I2Cx
->
SR2
, 
I2C_SR2_PEC
√ã>> 
I2C_SR2_PEC_Pos
);

1728 
__STATIC_INLINE
 
u√∂t8_t
 
LL_I2C_ReÀöiveD¬©a8
(
I2C_Ty‚â•Def
 *
I2Cx
)

1730  (
u√∂t8_t
)(
READ_BIT
(
I2Cx
->
DR
, 
I2C_DR_DR
));

1740 
__STATIC_INLINE
 
LL_I2C_T√∏nsm√¥D¬©a8
(
I2C_Ty‚â•Def
 *
I2Cx
, 
u√∂t8_t
 
D¬©a
)

1742 
MODIFY_REG
(
I2Cx
->
DR
, 
I2C_DR_DR
, 
D¬©a
);

1749 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1754 
u√∂t32_t
 
LL_I2C_In√¥
(
I2C_Ty‚â•Def
 *
I2Cx
, 
LL_I2C_In√¥Ty‚â•Def
 *
I2C_In√¥S√•uÀò
);

1755 
u√∂t32_t
 
LL_I2C_DeIn√¥
(
I2C_Ty‚â•Def
 *
I2Cx
);

1756 
LL_I2C_S√•uÀòIn√¥
(
LL_I2C_In√¥Ty‚â•Def
 *
I2C_In√¥S√•uÀò
);

1778 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_iwdg.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_IWDG_H


22 
	#STM32F1xx_LL_IWDG_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
(
IWDG
)

48 
	#LL_IWDG_KEY_RELOAD
 0x0000AAAAU

	)

49 
	#LL_IWDG_KEY_ENABLE
 0x0000CCCCU

	)

50 
	#LL_IWDG_KEY_WR_ACCESS_ENABLE
 0x00005555U

	)

51 
	#LL_IWDG_KEY_WR_ACCESS_DISABLE
 0x00000000U

	)

68 
	#LL_IWDG_SR_PVU
 
IWDG_SR_PVU


	)

69 
	#LL_IWDG_SR_RVU
 
IWDG_SR_RVU


	)

77 
	#LL_IWDG_PRESCALER_4
 0x00000000U

	)

78 
	#LL_IWDG_PRESCALER_8
 (
IWDG_PR_PR_0
√ã

	)

79 
	#LL_IWDG_PRESCALER_16
 (
IWDG_PR_PR_1
√ã

	)

80 
	#LL_IWDG_PRESCALER_32
 (
IWDG_PR_PR_1
 | 
IWDG_PR_PR_0
√ã

	)

81 
	#LL_IWDG_PRESCALER_64
 (
IWDG_PR_PR_2
√ã

	)

82 
	#LL_IWDG_PRESCALER_128
 (
IWDG_PR_PR_2
 | 
IWDG_PR_PR_0
√ã

	)

83 
	#LL_IWDG_PRESCALER_256
 (
IWDG_PR_PR_2
 | 
IWDG_PR_PR_1
√ã

	)

108 
	#LL_IWDG_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

116 
	#LL_IWDG_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

141 
__STATIC_INLINE
 
LL_IWDG_E¬´b√Ä
(
IWDG_Ty‚â•Def
 *
IWDGx
)

143 
WRITE_REG
(
IWDGx
->
KR
, 
LL_IWDG_KEY_ENABLE
);

152 
__STATIC_INLINE
 
LL_IWDG_R√±Ô¨ÇdCou¬°√Æ
(
IWDG_Ty‚â•Def
 *
IWDGx
)

154 
WRITE_REG
(
IWDGx
->
KR
, 
LL_IWDG_KEY_RELOAD
);

163 
__STATIC_INLINE
 
LL_IWDG_E¬´b√ÄWr√¥eAcÀöss
(
IWDG_Ty‚â•Def
 *
IWDGx
)

165 
WRITE_REG
(
IWDGx
->
KR
, 
LL_IWDG_KEY_WR_ACCESS_ENABLE
);

174 
__STATIC_INLINE
 
LL_IWDG_Di√üb√ÄWr√¥eAcÀöss
(
IWDG_Ty‚â•Def
 *
IWDGx
)

176 
WRITE_REG
(
IWDGx
->
KR
, 
LL_IWDG_KEY_WR_ACCESS_DISABLE
);

193 
__STATIC_INLINE
 
LL_IWDG_S√´P¬™sÀá√Är
(
IWDG_Ty‚â•Def
 *
IWDGx
, 
u√∂t32_t
 
P¬™sÀá√Är
)

195 
WRITE_REG
(
IWDGx
->
PR
, 
IWDG_PR_PR
 & 
P¬™sÀá√Är
);

211 
__STATIC_INLINE
 
u√∂t32_t
 
LL_IWDG_G√´P¬™sÀá√Är
(
IWDG_Ty‚â•Def
 *
IWDGx
)

213  (
READ_REG
(
IWDGx
->
PR
));

223 
__STATIC_INLINE
 
LL_IWDG_S√´R√±Ô¨ÇdCou¬°√Æ
(
IWDG_Ty‚â•Def
 *
IWDGx
, 
u√∂t32_t
 
Cou¬°√Æ
)

225 
WRITE_REG
(
IWDGx
->
RLR
, 
IWDG_RLR_RL
 & 
Cou¬°√Æ
);

234 
__STATIC_INLINE
 
u√∂t32_t
 
LL_IWDG_G√´R√±Ô¨ÇdCou¬°√Æ
(
IWDG_Ty‚â•Def
 *
IWDGx
)

236  (
READ_REG
(
IWDGx
->
RLR
));

254 
__STATIC_INLINE
 
u√∂t32_t
 
LL_IWDG_IsAÀòiveF≈ìg_PVU
(
IWDG_Ty‚â•Def
 *
IWDGx
)

256  ((
READ_BIT
(
IWDGx
->
SR
, 
IWDG_SR_PVU
) == (IWDG_SR_PVU)) ? 1UL : 0UL);

265 
__STATIC_INLINE
 
u√∂t32_t
 
LL_IWDG_IsAÀòiveF≈ìg_RVU
(
IWDG_Ty‚â•Def
 *
IWDGx
)

267  ((
READ_BIT
(
IWDGx
->
SR
, 
IWDG_SR_RVU
) == (IWDG_SR_RVU)) ? 1UL : 0UL);

277 
__STATIC_INLINE
 
u√∂t32_t
 
LL_IWDG_IsR√≥dy
(
IWDG_Ty‚â•Def
 *
IWDGx
)

279  ((
READ_BIT
(
IWDGx
->
SR
, 
IWDG_SR_PVU
 | 
IWDG_SR_RVU
) == 0U) ? 1UL : 0UL);

301 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_pwr.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_PWR_H


22 
	#__STM32F1xx_LL_PWR_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
(
PWR
)

55 
	#LL_PWR_CR_CSBF
 
PWR_CR_CSBF


	)

56 
	#LL_PWR_CR_CWUF
 
PWR_CR_CWUF


	)

65 
	#LL_PWR_CSR_WUF
 
PWR_CSR_WUF


	)

66 
	#LL_PWR_CSR_SBF
 
PWR_CSR_SBF


	)

67 
	#LL_PWR_CSR_PVDO
 
PWR_CSR_PVDO


	)

68 
	#LL_PWR_CSR_EWUP1
 
PWR_CSR_EWUP


	)

77 
	#LL_PWR_MODE_STOP_MAINREGU
 0x00000000U

	)

78 
	#LL_PWR_MODE_STOP_LPREGU
 (
PWR_CR_LPDS
√ã

	)

79 
	#LL_PWR_MODE_STANDBY
 (
PWR_CR_PDDS
√ã

	)

87 
	#LL_PWR_REGU_DSMODE_MAIN
 0x00000000U

	)

88 
	#LL_PWR_REGU_DSMODE_LOW_POWER
 (
PWR_CR_LPDS
√ã

	)

96 
	#LL_PWR_PVDLEVEL_0
 (
PWR_CR_PLS_LEV0
√ã

	)

97 
	#LL_PWR_PVDLEVEL_1
 (
PWR_CR_PLS_LEV1
√ã

	)

98 
	#LL_PWR_PVDLEVEL_2
 (
PWR_CR_PLS_LEV2
√ã

	)

99 
	#LL_PWR_PVDLEVEL_3
 (
PWR_CR_PLS_LEV3
√ã

	)

100 
	#LL_PWR_PVDLEVEL_4
 (
PWR_CR_PLS_LEV4
√ã

	)

101 
	#LL_PWR_PVDLEVEL_5
 (
PWR_CR_PLS_LEV5
√ã

	)

102 
	#LL_PWR_PVDLEVEL_6
 (
PWR_CR_PLS_LEV6
√ã

	)

103 
	#LL_PWR_PVDLEVEL_7
 (
PWR_CR_PLS_LEV7
√ã

	)

110 
	#LL_PWR_WAKEUP_PIN1
 (
PWR_CSR_EWUP
√ã

	)

135 
	#LL_PWR_Wr√¥eReg
(
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(
PWR
->__REG__, (__VALUE__))

	)

142 
	#LL_PWR_R√≥dReg
(
__REG__
√ã
	`READ_REG
(
PWR
->__REG__)

	)

165 
__STATIC_INLINE
 
LL_PWR_E¬´b√ÄBkUpAcÀöss
()

167 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

175 
__STATIC_INLINE
 
LL_PWR_Di√üb√ÄBkUpAcÀöss
()

177 
CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

185 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_IsE¬´b√ÄdBkUpAcÀöss
()

187  (
READ_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
) == (PWR_CR_DBP));

198 
__STATIC_INLINE
 
LL_PWR_S√´RegulModeDS
(
u√∂t32_t
 
RegulMode
)

200 
MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_LPDS
, 
RegulMode
);

210 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_G√´RegulModeDS
()

212  (
u√∂t32_t
)(
READ_BIT
(
PWR
->
CR
, 
PWR_CR_LPDS
));

225 
__STATIC_INLINE
 
LL_PWR_S√´Pow√ÆMode
(
u√∂t32_t
 
PDMode
)

227 
MODIFY_REG
(
PWR
->
CR
, (
PWR_CR_PDDS
| 
PWR_CR_LPDS
), 
PDMode
);

239 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_G√´Pow√ÆMode
()

241  (
u√∂t32_t
)(
READ_BIT
(
PWR
->
CR
, (
PWR_CR_PDDS
| 
PWR_CR_LPDS
)));

258 
__STATIC_INLINE
 
LL_PWR_S√´PVDLev√±
(
u√∂t32_t
 
PVDLev√±
)

260 
MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
PVDLev√±
);

276 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_G√´PVDLev√±
()

278  (
u√∂t32_t
)(
READ_BIT
(
PWR
->
CR
, 
PWR_CR_PLS
));

286 
__STATIC_INLINE
 
LL_PWR_E¬´b√ÄPVD
()

288 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
);

296 
__STATIC_INLINE
 
LL_PWR_Di√üb√ÄPVD
()

298 
CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
);

306 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_IsE¬´b√ÄdPVD
()

308  (
READ_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
) == (PWR_CR_PVDE));

318 
__STATIC_INLINE
 
LL_PWR_E¬´b√ÄWakeUpP√∂
(
u√∂t32_t
 
WakeUpP√∂
)

320 
SET_BIT
(
PWR
->
CSR
, 
WakeUpP√∂
);

330 
__STATIC_INLINE
 
LL_PWR_Di√üb√ÄWakeUpP√∂
(
u√∂t32_t
 
WakeUpP√∂
)

332 
CLEAR_BIT
(
PWR
->
CSR
, 
WakeUpP√∂
);

342 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_IsE¬´b√ÄdWakeUpP√∂
(u√∂t32_√†
WakeUpP√∂
)

344  (
READ_BIT
(
PWR
->
CSR
, 
WakeUpP√∂
) == (WakeUpPin));

361 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_IsAÀòiveF≈ìg_WU
()

363  (
READ_BIT
(
PWR
->
CSR
, 
PWR_CSR_WUF
) == (PWR_CSR_WUF));

371 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_IsAÀòiveF≈ìg_SB
()

373  (
READ_BIT
(
PWR
->
CSR
, 
PWR_CSR_SBF
) == (PWR_CSR_SBF));

381 
__STATIC_INLINE
 
u√∂t32_t
 
LL_PWR_IsAÀòiveF≈ìg_PVDO
()

383  (
READ_BIT
(
PWR
->
CSR
, 
PWR_CSR_PVDO
) == (PWR_CSR_PVDO));

391 
__STATIC_INLINE
 
LL_PWR_C√Ä¬®F≈ìg_SB
()

393 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_CSBF
);

401 
__STATIC_INLINE
 
LL_PWR_C√Ä¬®F≈ìg_WU
()

403 
SET_BIT
(
PWR
->
CR
, 
PWR_CR_CWUF
);

410 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

414 
E¬∫‚ÄπS√®tus
 
LL_PWR_DeIn√¥
();

434 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_rcc.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_RCC_H


22 
	#__STM32F1xx_LL_RCC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
(
RCC
)

45 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

54 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

68 
u√∂t32_t
 
SYSCLK_F¬™qu√≠cy
;

69 
u√∂t32_t
 
HCLK_F¬™qu√≠cy
;

70 
u√∂t32_t
 
PCLK1_F¬™qu√≠cy
;

71 
u√∂t32_t
 
PCLK2_F¬™qu√≠cy
;

72 } 
	tLL_RCC_ClocksTy‚â•Def
;

94 #i‚Ä°!
def√∂ed
 (
HSE_VALUE
)

95 
	#HSE_VALUE
 8000000U

	)

98 #i‚Ä°!
def√∂ed
 (
HSI_VALUE
)

99 
	#HSI_VALUE
 8000000U

	)

102 #i‚Ä°!
def√∂ed
 (
LSE_VALUE
)

103 
	#LSE_VALUE
 32768U

	)

106 #i‚Ä°!
def√∂ed
 (
LSI_VALUE
)

107 
	#LSI_VALUE
 40000U

	)

117 
	#LL_RCC_CIR_LSIRDYC
 
RCC_CIR_LSIRDYC


	)

118 
	#LL_RCC_CIR_LSERDYC
 
RCC_CIR_LSERDYC


	)

119 
	#LL_RCC_CIR_HSIRDYC
 
RCC_CIR_HSIRDYC


	)

120 
	#LL_RCC_CIR_HSERDYC
 
RCC_CIR_HSERDYC


	)

121 
	#LL_RCC_CIR_PLLRDYC
 
RCC_CIR_PLLRDYC


	)

122 
	#LL_RCC_CIR_PLL3RDYC
 
RCC_CIR_PLL3RDYC


	)

123 
	#LL_RCC_CIR_PLL2RDYC
 
RCC_CIR_PLL2RDYC


	)

124 
	#LL_RCC_CIR_CSSC
 
RCC_CIR_CSSC


	)

133 
	#LL_RCC_CIR_LSIRDYF
 
RCC_CIR_LSIRDYF


	)

134 
	#LL_RCC_CIR_LSERDYF
 
RCC_CIR_LSERDYF


	)

135 
	#LL_RCC_CIR_HSIRDYF
 
RCC_CIR_HSIRDYF


	)

136 
	#LL_RCC_CIR_HSERDYF
 
RCC_CIR_HSERDYF


	)

137 
	#LL_RCC_CIR_PLLRDYF
 
RCC_CIR_PLLRDYF


	)

138 
	#LL_RCC_CIR_PLL3RDYF
 
RCC_CIR_PLL3RDYF


	)

139 
	#LL_RCC_CIR_PLL2RDYF
 
RCC_CIR_PLL2RDYF


	)

140 
	#LL_RCC_CIR_CSSF
 
RCC_CIR_CSSF


	)

141 
	#LL_RCC_CSR_PINRSTF
 
RCC_CSR_PINRSTF


	)

142 
	#LL_RCC_CSR_PORRSTF
 
RCC_CSR_PORRSTF


	)

143 
	#LL_RCC_CSR_SFTRSTF
 
RCC_CSR_SFTRSTF


	)

144 
	#LL_RCC_CSR_IWDGRSTF
 
RCC_CSR_IWDGRSTF


	)

145 
	#LL_RCC_CSR_WWDGRSTF
 
RCC_CSR_WWDGRSTF


	)

146 
	#LL_RCC_CSR_LPWRRSTF
 
RCC_CSR_LPWRRSTF


	)

155 
	#LL_RCC_CIR_LSIRDYIE
 
RCC_CIR_LSIRDYIE


	)

156 
	#LL_RCC_CIR_LSERDYIE
 
RCC_CIR_LSERDYIE


	)

157 
	#LL_RCC_CIR_HSIRDYIE
 
RCC_CIR_HSIRDYIE


	)

158 
	#LL_RCC_CIR_HSERDYIE
 
RCC_CIR_HSERDYIE


	)

159 
	#LL_RCC_CIR_PLLRDYIE
 
RCC_CIR_PLLRDYIE


	)

160 
	#LL_RCC_CIR_PLL3RDYIE
 
RCC_CIR_PLL3RDYIE


	)

161 
	#LL_RCC_CIR_PLL2RDYIE
 
RCC_CIR_PLL2RDYIE


	)

166 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV2
)

170 
	#LL_RCC_HSE_PREDIV2_DIV_1
 
RCC_CFGR2_PREDIV2_DIV1


	)

171 
	#LL_RCC_HSE_PREDIV2_DIV_2
 
RCC_CFGR2_PREDIV2_DIV2


	)

172 
	#LL_RCC_HSE_PREDIV2_DIV_3
 
RCC_CFGR2_PREDIV2_DIV3


	)

173 
	#LL_RCC_HSE_PREDIV2_DIV_4
 
RCC_CFGR2_PREDIV2_DIV4


	)

174 
	#LL_RCC_HSE_PREDIV2_DIV_5
 
RCC_CFGR2_PREDIV2_DIV5


	)

175 
	#LL_RCC_HSE_PREDIV2_DIV_6
 
RCC_CFGR2_PREDIV2_DIV6


	)

176 
	#LL_RCC_HSE_PREDIV2_DIV_7
 
RCC_CFGR2_PREDIV2_DIV7


	)

177 
	#LL_RCC_HSE_PREDIV2_DIV_8
 
RCC_CFGR2_PREDIV2_DIV8


	)

178 
	#LL_RCC_HSE_PREDIV2_DIV_9
 
RCC_CFGR2_PREDIV2_DIV9


	)

179 
	#LL_RCC_HSE_PREDIV2_DIV_10
 
RCC_CFGR2_PREDIV2_DIV10


	)

180 
	#LL_RCC_HSE_PREDIV2_DIV_11
 
RCC_CFGR2_PREDIV2_DIV11


	)

181 
	#LL_RCC_HSE_PREDIV2_DIV_12
 
RCC_CFGR2_PREDIV2_DIV12


	)

182 
	#LL_RCC_HSE_PREDIV2_DIV_13
 
RCC_CFGR2_PREDIV2_DIV13


	)

183 
	#LL_RCC_HSE_PREDIV2_DIV_14
 
RCC_CFGR2_PREDIV2_DIV14


	)

184 
	#LL_RCC_HSE_PREDIV2_DIV_15
 
RCC_CFGR2_PREDIV2_DIV15


	)

185 
	#LL_RCC_HSE_PREDIV2_DIV_16
 
RCC_CFGR2_PREDIV2_DIV16


	)

195 
	#LL_RCC_SYS_CLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

196 
	#LL_RCC_SYS_CLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

197 
	#LL_RCC_SYS_CLKSOURCE_PLL
 
RCC_CFGR_SW_PLL


	)

205 
	#LL_RCC_SYS_CLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

206 
	#LL_RCC_SYS_CLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

207 
	#LL_RCC_SYS_CLKSOURCE_STATUS_PLL
 
RCC_CFGR_SWS_PLL


	)

215 
	#LL_RCC_SYSCLK_DIV_1
 
RCC_CFGR_HPRE_DIV1


	)

216 
	#LL_RCC_SYSCLK_DIV_2
 
RCC_CFGR_HPRE_DIV2


	)

217 
	#LL_RCC_SYSCLK_DIV_4
 
RCC_CFGR_HPRE_DIV4


	)

218 
	#LL_RCC_SYSCLK_DIV_8
 
RCC_CFGR_HPRE_DIV8


	)

219 
	#LL_RCC_SYSCLK_DIV_16
 
RCC_CFGR_HPRE_DIV16


	)

220 
	#LL_RCC_SYSCLK_DIV_64
 
RCC_CFGR_HPRE_DIV64


	)

221 
	#LL_RCC_SYSCLK_DIV_128
 
RCC_CFGR_HPRE_DIV128


	)

222 
	#LL_RCC_SYSCLK_DIV_256
 
RCC_CFGR_HPRE_DIV256


	)

223 
	#LL_RCC_SYSCLK_DIV_512
 
RCC_CFGR_HPRE_DIV512


	)

231 
	#LL_RCC_APB1_DIV_1
 
RCC_CFGR_PPRE1_DIV1


	)

232 
	#LL_RCC_APB1_DIV_2
 
RCC_CFGR_PPRE1_DIV2


	)

233 
	#LL_RCC_APB1_DIV_4
 
RCC_CFGR_PPRE1_DIV4


	)

234 
	#LL_RCC_APB1_DIV_8
 
RCC_CFGR_PPRE1_DIV8


	)

235 
	#LL_RCC_APB1_DIV_16
 
RCC_CFGR_PPRE1_DIV16


	)

243 
	#LL_RCC_APB2_DIV_1
 
RCC_CFGR_PPRE2_DIV1


	)

244 
	#LL_RCC_APB2_DIV_2
 
RCC_CFGR_PPRE2_DIV2


	)

245 
	#LL_RCC_APB2_DIV_4
 
RCC_CFGR_PPRE2_DIV4


	)

246 
	#LL_RCC_APB2_DIV_8
 
RCC_CFGR_PPRE2_DIV8


	)

247 
	#LL_RCC_APB2_DIV_16
 
RCC_CFGR_PPRE2_DIV16


	)

255 
	#LL_RCC_MCO1SOURCE_NOCLOCK
 
RCC_CFGR_MCO_NOCLOCK


	)

256 
	#LL_RCC_MCO1SOURCE_SYSCLK
 
RCC_CFGR_MCO_SYSCLK


	)

257 
	#LL_RCC_MCO1SOURCE_HSI
 
RCC_CFGR_MCO_HSI


	)

258 
	#LL_RCC_MCO1SOURCE_HSE
 
RCC_CFGR_MCO_HSE


	)

259 
	#LL_RCC_MCO1SOURCE_PLLCLK_DIV_2
 
RCC_CFGR_MCO_PLLCLK_DIV2


	)

260 #i‚Ä°
def√∂ed
(
RCC_CFGR_MCO_PLL2CLK
)

261 
	#LL_RCC_MCO1SOURCE_PLL2CLK
 
RCC_CFGR_MCO_PLL2CLK


	)

263 #i‚Ä°
def√∂ed
(
RCC_CFGR_MCO_PLL3CLK_DIV2
)

264 
	#LL_RCC_MCO1SOURCE_PLLI2SCLK_DIV2
 
RCC_CFGR_MCO_PLL3CLK_DIV2


	)

266 #i‚Ä°
def√∂ed
(
RCC_CFGR_MCO_EXT_HSE
)

267 
	#LL_RCC_MCO1SOURCE_EXT_HSE
 
RCC_CFGR_MCO_EXT_HSE


	)

269 #i‚Ä°
def√∂ed
(
RCC_CFGR_MCO_PLL3CLK
)

270 
	#LL_RCC_MCO1SOURCE_PLLI2SCLK
 
RCC_CFGR_MCO_PLL3CLK


	)

276 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

280 
	#LL_RCC_PERIPH_FREQUENCY_NO
 0x00000000U

	)

281 
	#LL_RCC_PERIPH_FREQUENCY_NA
 0xFFFFFFFFU

	)

287 #i‚Ä°
def√∂ed
(
RCC_CFGR2_I2S2SRC
)

291 
	#LL_RCC_I2S2_CLKSOURCE_SYSCLK
 
RCC_CFGR2_I2S2SRC


	)

292 
	#LL_RCC_I2S2_CLKSOURCE_PLLI2S_VCO
 (
u√∂t32_t
)(
RCC_CFGR2_I2S2SRC
 | (RCC_CFGR2_I2S2SRC >> 16U)√ã

	)

293 
	#LL_RCC_I2S3_CLKSOURCE_SYSCLK
 
RCC_CFGR2_I2S3SRC


	)

294 
	#LL_RCC_I2S3_CLKSOURCE_PLLI2S_VCO
 (
u√∂t32_t
)(
RCC_CFGR2_I2S3SRC
 | (RCC_CFGR2_I2S3SRC >> 16U)√ã

	)

300 #i‚Ä°
def√∂ed
(
USB_OTG_FS
√ã|| def√∂ed(
USB
)

304 #i‚Ä°
def√∂ed
(
RCC_CFGR_USBPRE
)

305 
	#LL_RCC_USB_CLKSOURCE_PLL
 
RCC_CFGR_USBPRE


	)

306 
	#LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5
 0x00000000U

	)

308 #i‚Ä°
def√∂ed
(
RCC_CFGR_OTGFSPRE
)

309 
	#LL_RCC_USB_CLKSOURCE_PLL_DIV_2
 
RCC_CFGR_OTGFSPRE


	)

310 
	#LL_RCC_USB_CLKSOURCE_PLL_DIV_3
 0x00000000U

	)

320 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_2
 
RCC_CFGR_ADCPRE_DIV2


	)

321 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_4
 
RCC_CFGR_ADCPRE_DIV4


	)

322 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
 
RCC_CFGR_ADCPRE_DIV6


	)

323 
	#LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
 
RCC_CFGR_ADCPRE_DIV8


	)

328 #i‚Ä°
def√∂ed
(
RCC_CFGR2_I2S2SRC
)

332 
	#LL_RCC_I2S2_CLKSOURCE
 
RCC_CFGR2_I2S2SRC


	)

333 
	#LL_RCC_I2S3_CLKSOURCE
 
RCC_CFGR2_I2S3SRC


	)

340 #i‚Ä°
def√∂ed
(
USB_OTG_FS
√ã|| def√∂ed(
USB
)

344 
	#LL_RCC_USB_CLKSOURCE
 0x00400000U

	)

354 
	#LL_RCC_ADC_CLKSOURCE
 
RCC_CFGR_ADCPRE


	)

362 
	#LL_RCC_RTC_CLKSOURCE_NONE
 0x00000000U

	)

363 
	#LL_RCC_RTC_CLKSOURCE_LSE
 
RCC_BDCR_RTCSEL_0


	)

364 
	#LL_RCC_RTC_CLKSOURCE_LSI
 
RCC_BDCR_RTCSEL_1


	)

365 
	#LL_RCC_RTC_CLKSOURCE_HSE_DIV128
 
RCC_BDCR_RTCSEL


	)

373 #i‚Ä°
def√∂ed
(
RCC_CFGR_PLLMULL2
)

374 
	#LL_RCC_PLL_MUL_2
 
RCC_CFGR_PLLMULL2


	)

376 #i‚Ä°
def√∂ed
(
RCC_CFGR_PLLMULL3
)

377 
	#LL_RCC_PLL_MUL_3
 
RCC_CFGR_PLLMULL3


	)

379 
	#LL_RCC_PLL_MUL_4
 
RCC_CFGR_PLLMULL4


	)

380 
	#LL_RCC_PLL_MUL_5
 
RCC_CFGR_PLLMULL5


	)

381 
	#LL_RCC_PLL_MUL_6
 
RCC_CFGR_PLLMULL6


	)

382 
	#LL_RCC_PLL_MUL_7
 
RCC_CFGR_PLLMULL7


	)

383 
	#LL_RCC_PLL_MUL_8
 
RCC_CFGR_PLLMULL8


	)

384 
	#LL_RCC_PLL_MUL_9
 
RCC_CFGR_PLLMULL9


	)

385 #i‚Ä°
def√∂ed
(
RCC_CFGR_PLLMULL6_5
)

386 
	#LL_RCC_PLL_MUL_6_5
 
RCC_CFGR_PLLMULL6_5


	)

388 
	#LL_RCC_PLL_MUL_10
 
RCC_CFGR_PLLMULL10


	)

389 
	#LL_RCC_PLL_MUL_11
 
RCC_CFGR_PLLMULL11


	)

390 
	#LL_RCC_PLL_MUL_12
 
RCC_CFGR_PLLMULL12


	)

391 
	#LL_RCC_PLL_MUL_13
 
RCC_CFGR_PLLMULL13


	)

392 
	#LL_RCC_PLL_MUL_14
 
RCC_CFGR_PLLMULL14


	)

393 
	#LL_RCC_PLL_MUL_15
 
RCC_CFGR_PLLMULL15


	)

394 
	#LL_RCC_PLL_MUL_16
 
RCC_CFGR_PLLMULL16


	)

403 
	#LL_RCC_PLLSOURCE_HSI_DIV_2
 0x00000000U

	)

404 
	#LL_RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC


	)

405 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

406 
	#LL_RCC_PLLSOURCE_PLL2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

409 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1
)

410 
	#LL_RCC_PLLSOURCE_HSE_DIV_1
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV1
√ã

	)

411 
	#LL_RCC_PLLSOURCE_HSE_DIV_2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV2
√ã

	)

412 
	#LL_RCC_PLLSOURCE_HSE_DIV_3
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV3
√ã

	)

413 
	#LL_RCC_PLLSOURCE_HSE_DIV_4
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV4
√ã

	)

414 
	#LL_RCC_PLLSOURCE_HSE_DIV_5
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV5
√ã

	)

415 
	#LL_RCC_PLLSOURCE_HSE_DIV_6
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV6
√ã

	)

416 
	#LL_RCC_PLLSOURCE_HSE_DIV_7
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV7
√ã

	)

417 
	#LL_RCC_PLLSOURCE_HSE_DIV_8
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV8
√ã

	)

418 
	#LL_RCC_PLLSOURCE_HSE_DIV_9
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV9
√ã

	)

419 
	#LL_RCC_PLLSOURCE_HSE_DIV_10
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV10
√ã

	)

420 
	#LL_RCC_PLLSOURCE_HSE_DIV_11
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV11
√ã

	)

421 
	#LL_RCC_PLLSOURCE_HSE_DIV_12
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV12
√ã

	)

422 
	#LL_RCC_PLLSOURCE_HSE_DIV_13
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV13
√ã

	)

423 
	#LL_RCC_PLLSOURCE_HSE_DIV_14
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV14
√ã

	)

424 
	#LL_RCC_PLLSOURCE_HSE_DIV_15
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV15
√ã

	)

425 
	#LL_RCC_PLLSOURCE_HSE_DIV_16
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV16
√ã

	)

426 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

427 
	#LL_RCC_PLLSOURCE_PLL2_DIV_1
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV1
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

428 
	#LL_RCC_PLLSOURCE_PLL2_DIV_2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV2
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

429 
	#LL_RCC_PLLSOURCE_PLL2_DIV_3
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV3
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

430 
	#LL_RCC_PLLSOURCE_PLL2_DIV_4
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV4
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

431 
	#LL_RCC_PLLSOURCE_PLL2_DIV_5
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV5
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

432 
	#LL_RCC_PLLSOURCE_PLL2_DIV_6
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV6
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

433 
	#LL_RCC_PLLSOURCE_PLL2_DIV_7
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV7
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

434 
	#LL_RCC_PLLSOURCE_PLL2_DIV_8
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV8
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

435 
	#LL_RCC_PLLSOURCE_PLL2_DIV_9
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV9
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

436 
	#LL_RCC_PLLSOURCE_PLL2_DIV_10
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV10
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

437 
	#LL_RCC_PLLSOURCE_PLL2_DIV_11
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV11
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

438 
	#LL_RCC_PLLSOURCE_PLL2_DIV_12
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV12
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

439 
	#LL_RCC_PLLSOURCE_PLL2_DIV_13
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV13
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

440 
	#LL_RCC_PLLSOURCE_PLL2_DIV_14
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV14
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

441 
	#LL_RCC_PLLSOURCE_PLL2_DIV_15
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV15
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

442 
	#LL_RCC_PLLSOURCE_PLL2_DIV_16
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR2_PREDIV1_DIV16
 | 
RCC_CFGR2_PREDIV1SRC
 << 4U√ã

	)

445 
	#LL_RCC_PLLSOURCE_HSE_DIV_1
 (
RCC_CFGR_PLLSRC
 | 0x00000000U√ã

	)

446 
	#LL_RCC_PLLSOURCE_HSE_DIV_2
 (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
√ã

	)

455 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1
)

456 
	#LL_RCC_PREDIV_DIV_1
 
RCC_CFGR2_PREDIV1_DIV1


	)

457 
	#LL_RCC_PREDIV_DIV_2
 
RCC_CFGR2_PREDIV1_DIV2


	)

458 
	#LL_RCC_PREDIV_DIV_3
 
RCC_CFGR2_PREDIV1_DIV3


	)

459 
	#LL_RCC_PREDIV_DIV_4
 
RCC_CFGR2_PREDIV1_DIV4


	)

460 
	#LL_RCC_PREDIV_DIV_5
 
RCC_CFGR2_PREDIV1_DIV5


	)

461 
	#LL_RCC_PREDIV_DIV_6
 
RCC_CFGR2_PREDIV1_DIV6


	)

462 
	#LL_RCC_PREDIV_DIV_7
 
RCC_CFGR2_PREDIV1_DIV7


	)

463 
	#LL_RCC_PREDIV_DIV_8
 
RCC_CFGR2_PREDIV1_DIV8


	)

464 
	#LL_RCC_PREDIV_DIV_9
 
RCC_CFGR2_PREDIV1_DIV9


	)

465 
	#LL_RCC_PREDIV_DIV_10
 
RCC_CFGR2_PREDIV1_DIV10


	)

466 
	#LL_RCC_PREDIV_DIV_11
 
RCC_CFGR2_PREDIV1_DIV11


	)

467 
	#LL_RCC_PREDIV_DIV_12
 
RCC_CFGR2_PREDIV1_DIV12


	)

468 
	#LL_RCC_PREDIV_DIV_13
 
RCC_CFGR2_PREDIV1_DIV13


	)

469 
	#LL_RCC_PREDIV_DIV_14
 
RCC_CFGR2_PREDIV1_DIV14


	)

470 
	#LL_RCC_PREDIV_DIV_15
 
RCC_CFGR2_PREDIV1_DIV15


	)

471 
	#LL_RCC_PREDIV_DIV_16
 
RCC_CFGR2_PREDIV1_DIV16


	)

473 
	#LL_RCC_PREDIV_DIV_1
 0x00000000U

	)

474 
	#LL_RCC_PREDIV_DIV_2
 
RCC_CFGR_PLLXTPRE


	)

480 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

484 
	#LL_RCC_PLLI2S_MUL_8
 
RCC_CFGR2_PLL3MUL8


	)

485 
	#LL_RCC_PLLI2S_MUL_9
 
RCC_CFGR2_PLL3MUL9


	)

486 
	#LL_RCC_PLLI2S_MUL_10
 
RCC_CFGR2_PLL3MUL10


	)

487 
	#LL_RCC_PLLI2S_MUL_11
 
RCC_CFGR2_PLL3MUL11


	)

488 
	#LL_RCC_PLLI2S_MUL_12
 
RCC_CFGR2_PLL3MUL12


	)

489 
	#LL_RCC_PLLI2S_MUL_13
 
RCC_CFGR2_PLL3MUL13


	)

490 
	#LL_RCC_PLLI2S_MUL_14
 
RCC_CFGR2_PLL3MUL14


	)

491 
	#LL_RCC_PLLI2S_MUL_16
 
RCC_CFGR2_PLL3MUL16


	)

492 
	#LL_RCC_PLLI2S_MUL_20
 
RCC_CFGR2_PLL3MUL20


	)

499 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

503 
	#LL_RCC_PLL2_MUL_8
 
RCC_CFGR2_PLL2MUL8


	)

504 
	#LL_RCC_PLL2_MUL_9
 
RCC_CFGR2_PLL2MUL9


	)

505 
	#LL_RCC_PLL2_MUL_10
 
RCC_CFGR2_PLL2MUL10


	)

506 
	#LL_RCC_PLL2_MUL_11
 
RCC_CFGR2_PLL2MUL11


	)

507 
	#LL_RCC_PLL2_MUL_12
 
RCC_CFGR2_PLL2MUL12


	)

508 
	#LL_RCC_PLL2_MUL_13
 
RCC_CFGR2_PLL2MUL13


	)

509 
	#LL_RCC_PLL2_MUL_14
 
RCC_CFGR2_PLL2MUL14


	)

510 
	#LL_RCC_PLL2_MUL_16
 
RCC_CFGR2_PLL2MUL16


	)

511 
	#LL_RCC_PLL2_MUL_20
 
RCC_CFGR2_PLL2MUL20


	)

537 
	#LL_RCC_Wr√¥eReg
(
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(
RCC
->__REG__, (__VALUE__))

	)

544 
	#LL_RCC_R√≥dReg
(
__REG__
√ã
	`READ_REG
(
RCC
->__REG__)

	)

553 #i‚Ä°
def√∂ed
(
RCC_CFGR_PLLMULL6_5
)

568 
	#__LL_RCC_CALC_PLLCLK_FREQ
(
__INPUTFREQ__
, 
__PLLMUL__
) \

569 (((
__PLLMUL__
√ã!Ô£ø
RCC_CFGR_PLLMULL6_5
) ? \

570 ((
__INPUTFREQ__
√ã* ((((
__PLLMUL__
√ã& 
RCC_CFGR_PLLMULL
√ã>> 
RCC_CFGR_PLLMULL_Pos
) + 2U)) :\

571 (((
__INPUTFREQ__
√ã* 13U√ã/ 2U))

	)

596 
	#__LL_RCC_CALC_PLLCLK_FREQ
(
__INPUTFREQ__
, 
__PLLMUL__
√ã((__INPUTFREQ__√ã* (((__PLLMUL__√ã>> 
RCC_CFGR_PLLMULL_Pos
√ã+ 2U))

	)

599 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

633 
	#__LL_RCC_CALC_PLLI2SCLK_FREQ
(
__INPUTFREQ__
, 
__PLLI2SMUL__
, 
__PLLI2SDIV__
√ã(((__INPUTFREQ__√ã* (((__PLLI2SMUL__√ã>> 
RCC_CFGR2_PLL3MUL_Pos
√ã+ 2U)√ã/ (((__PLLI2SDIV__√ã>> 
RCC_CFGR2_PREDIV2_Pos
√ã+ 1U))

	)

636 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

670 
	#__LL_RCC_CALC_PLL2CLK_FREQ
(
__INPUTFREQ__
, 
__PLL2MUL__
, 
__PLL2DIV__
√ã(((__INPUTFREQ__√ã* (((__PLL2MUL__√ã>> 
RCC_CFGR2_PLL2MUL_Pos
√ã+ 2U)√ã/ (((__PLL2DIV__√ã>> 
RCC_CFGR2_PREDIV2_Pos
√ã+ 1U))

	)

690 
	#__LL_RCC_CALC_HCLK_FREQ
(
__SYSCLKFREQ__
, 
__AHBPRESCALER__
√ã((__SYSCLKFREQ__√ã>> 
AHBP¬™scTab√Ä
[((__AHBPRESCALER__√ã& 
RCC_CFGR_HPRE
√ã>> 
RCC_CFGR_HPRE_Pos
])

	)

705 
	#__LL_RCC_CALC_PCLK1_FREQ
(
__HCLKFREQ__
, 
__APB1PRESCALER__
√ã((__HCLKFREQ__√ã>> 
APBP¬™scTab√Ä
[(__APB1PRESCALER__√ã>> 
RCC_CFGR_PPRE1_Pos
])

	)

720 
	#__LL_RCC_CALC_PCLK2_FREQ
(
__HCLKFREQ__
, 
__APB2PRESCALER__
√ã((__HCLKFREQ__√ã>> 
APBP¬™scTab√Ä
[(__APB2PRESCALER__√ã>> 
RCC_CFGR_PPRE2_Pos
])

	)

744 
__STATIC_INLINE
 
LL_RCC_HSE_E¬´b√ÄCSS
()

746 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_CSSON
);

754 
__STATIC_INLINE
 
LL_RCC_HSE_E¬´b√ÄBy‚àëss
()

756 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

764 
__STATIC_INLINE
 
LL_RCC_HSE_Di√üb√ÄBy‚àëss
()

766 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

774 
__STATIC_INLINE
 
LL_RCC_HSE_E¬´b√Ä
()

776 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
);

784 
__STATIC_INLINE
 
LL_RCC_HSE_Di√üb√Ä
()

786 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
);

794 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_HSE_IsR√≥dy
()

796  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSERDY
) == (RCC_CR_HSERDY));

799 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV2
)

821 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_HSE_G√´P¬™div2
()

823  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
));

840 
__STATIC_INLINE
 
LL_RCC_HSI_E¬´b√Ä
()

842 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

850 
__STATIC_INLINE
 
LL_RCC_HSI_Di√üb√Ä
()

852 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

860 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_HSI_IsR√≥dy
()

862  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSIRDY
) == (RCC_CR_HSIRDY));

872 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_HSI_G√´C√Üib√∏ti‚ÅÑ
()

874  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSICAL
√ã>> 
RCC_CR_HSICAL_Pos
);

886 
__STATIC_INLINE
 
LL_RCC_HSI_S√´C√ÜibTrimm√∂g
(
u√∂t32_t
 
V√Üue
)

888 
MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, 
V√Üue
 << 
RCC_CR_HSITRIM_Pos
);

896 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_HSI_G√´C√ÜibTrimm√∂g
()

898  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSITRIM
√ã>> 
RCC_CR_HSITRIM_Pos
);

914 
__STATIC_INLINE
 
LL_RCC_LSE_E¬´b√Ä
()

916 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
);

924 
__STATIC_INLINE
 
LL_RCC_LSE_Di√üb√Ä
()

926 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
);

934 
__STATIC_INLINE
 
LL_RCC_LSE_E¬´b√ÄBy‚àëss
()

936 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
);

944 
__STATIC_INLINE
 
LL_RCC_LSE_Di√üb√ÄBy‚àëss
()

946 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
);

954 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_LSE_IsR√≥dy
()

956  (
READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSERDY
) == (RCC_BDCR_LSERDY));

972 
__STATIC_INLINE
 
LL_RCC_LSI_E¬´b√Ä
()

974 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSION
);

982 
__STATIC_INLINE
 
LL_RCC_LSI_Di√üb√Ä
()

984 
CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSION
);

992 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_LSI_IsR√≥dy
()

994  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSIRDY
) == (RCC_CSR_LSIRDY));

1014 
__STATIC_INLINE
 
LL_RCC_S√´SysClkSourÀö
(
u√∂t32_t
 
SourÀö
)

1016 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, 
SourÀö
);

1027 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´SysClkSourÀö
()

1029  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SWS
));

1047 
__STATIC_INLINE
 
LL_RCC_S√´AHBP¬™sÀá√Är
(
u√∂t32_t
 
P¬™sÀá√Är
)

1049 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
P¬™sÀá√Är
);

1063 
__STATIC_INLINE
 
LL_RCC_S√´APB1P¬™sÀá√Är
(
u√∂t32_t
 
P¬™sÀá√Är
)

1065 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
P¬™sÀá√Är
);

1079 
__STATIC_INLINE
 
LL_RCC_S√´APB2P¬™sÀá√Är
(
u√∂t32_t
 
P¬™sÀá√Är
)

1081 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, 
P¬™sÀá√Är
);

1098 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´AHBP¬™sÀá√Är
()

1100  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
));

1113 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´APB1P¬™sÀá√Är
()

1115  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
));

1128 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´APB2P¬™sÀá√Är
()

1130  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
));

1158 
__STATIC_INLINE
 
LL_RCC_C‚ÅÑfigMCO
(
u√∂t32_t
 
MCOxSourÀö
)

1160 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_MCOSEL
, 
MCOxSourÀö
);

1171 #i‚Ä°
def√∂ed
(
RCC_CFGR2_I2S2SRC
)

1183 
__STATIC_INLINE
 
LL_RCC_S√´I2SClockSourÀö
(
u√∂t32_t
 
I2SxSourÀö
)

1185 
MODIFY_REG
(
RCC
->
CFGR2
, (
I2SxSourÀö
 & 0xFFFF0000U), (I2SxSource << 16U));

1189 #i‚Ä°
def√∂ed
(
USB_OTG_FS
√ã|| def√∂ed(
USB
)

1203 
__STATIC_INLINE
 
LL_RCC_S√´USBClockSourÀö
(
u√∂t32_t
 
USBxSourÀö
)

1205 #i‚Ä°
def√∂ed
(
RCC_CFGR_USBPRE
)

1206 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
, 
USBxSourÀö
);

1208 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
, 
USBxSourÀö
);

1223 
__STATIC_INLINE
 
LL_RCC_S√´ADCClockSourÀö
(
u√∂t32_t
 
ADCxSourÀö
)

1225 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
, 
ADCxSourÀö
);

1228 #i‚Ä°
def√∂ed
(
RCC_CFGR2_I2S2SRC
)

1242 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´I2SClockSourÀö
(u√∂t32_√†
I2Sx
)

1244  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
I2Sx
) >> 16U | I2Sx);

1248 #i‚Ä°
def√∂ed
(
USB_OTG_FS
√ã|| def√∂ed(
USB
)

1263 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´USBClockSourÀö
(u√∂t32_√†
USBx
)

1265  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
USBx
));

1280 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´ADCClockSourÀö
(u√∂t32_√†
ADCx
)

1282  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
ADCx
));

1305 
__STATIC_INLINE
 
LL_RCC_S√´RTCClockSourÀö
(
u√∂t32_t
 
SourÀö
)

1307 
MODIFY_REG
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
, 
SourÀö
);

1319 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_G√´RTCClockSourÀö
()

1321  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
));

1329 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄRTC
()

1331 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCEN
);

1339 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄRTC
()

1341 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCEN
);

1349 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdRTC
()

1351  (
READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCEN
) == (RCC_BDCR_RTCEN));

1359 
__STATIC_INLINE
 
LL_RCC_F‚ÄπÀöBackupDoma√∂Re¬£t
()

1361 
SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_BDRST
);

1369 
__STATIC_INLINE
 
LL_RCC_R√±√≥¬£BackupDoma√∂Re¬£t
()

1371 
CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_BDRST
);

1387 
__STATIC_INLINE
 
LL_RCC_PLL_E¬´b√Ä
()

1389 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

1398 
__STATIC_INLINE
 
LL_RCC_PLL_Di√üb√Ä
()

1400 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

1408 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLL_IsR√≥dy
()

1410  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLLRDY
) == (RCC_CR_PLLRDY));

1477 
__STATIC_INLINE
 
LL_RCC_PLL_C‚ÅÑfigDoma√∂_SYS
(
u√∂t32_t
 
SourÀö
, u√∂t32_√†
PLLMul
)

1479 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
,

1480 (
SourÀö
 & (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
)√ã| 
PLLMul
);

1481 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1
)

1482 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1483 
MODIFY_REG
(
RCC
->
CFGR2
, (
RCC_CFGR2_PREDIV1
 | 
RCC_CFGR2_PREDIV1SRC
),

1484 (
SourÀö
 & 
RCC_CFGR2_PREDIV1
√ã| ((SourÀö & (
RCC_CFGR2_PREDIV1SRC
 << 4U)) >> 4U));

1486 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
, (
SourÀö
 & RCC_CFGR2_PREDIV1));

1501 
__STATIC_INLINE
 
LL_RCC_PLL_S√´Ma√∂SourÀö
(
u√∂t32_t
 
PLLSourÀö
)

1503 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1504 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
, ((
PLLSourÀö
 & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));

1506 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
, 
PLLSourÀö
);

1520 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLL_G√´Ma√∂SourÀö
()

1522 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1523 
u√∂t32_t
 
‚àÇl¬ßc
 = 
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
);

1524 
u√∂t32_t
 
¬•ediv¬ßc
 = (u√∂t32_t)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
) << 4U);

1525  (
u√∂t32_t
)(
‚àÇl¬ßc
 | 
¬•ediv¬ßc
);

1527  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
));

1554 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLL_G√´Mu‚Ä¶√πliÀát‚Äπ
()

1556  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLMULL
));

1584 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLL_G√´P¬™div
()

1586 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1
)

1587  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
));

1589  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLXTPRE
√ã>> 
RCC_CFGR_PLLXTPRE_Pos
);

1597 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

1607 
__STATIC_INLINE
 
LL_RCC_PLLI2S_E¬´b√Ä
()

1609 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

1617 
__STATIC_INLINE
 
LL_RCC_PLLI2S_Di√üb√Ä
()

1619 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

1627 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLLI2S_IsR√≥dy
()

1629  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3RDY
) == (RCC_CR_PLL3RDY));

1665 
__STATIC_INLINE
 
LL_RCC_PLL_C‚ÅÑfigDoma√∂_PLLI2S
(
u√∂t32_t
 
Divid√Æ
, u√∂t32_√†
Mu‚Ä¶√πliÀát‚Äπ
)

1667 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL3MUL
, 
Divid√Æ
 | 
Mu‚Ä¶√πliÀát‚Äπ
);

1684 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLLI2S_G√´Mu‚Ä¶√πliÀát‚Äπ
()

1686  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
));

1694 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

1704 
__STATIC_INLINE
 
LL_RCC_PLL2_E¬´b√Ä
()

1706 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

1714 
__STATIC_INLINE
 
LL_RCC_PLL2_Di√üb√Ä
()

1716 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

1724 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLL2_IsR√≥dy
()

1726  (
READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2RDY
) == (RCC_CR_PLL2RDY));

1762 
__STATIC_INLINE
 
LL_RCC_PLL_C‚ÅÑfigDoma√∂_PLL2
(
u√∂t32_t
 
Divid√Æ
, u√∂t32_√†
Mu‚Ä¶√πliÀát‚Äπ
)

1764 
MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
 | 
RCC_CFGR2_PLL2MUL
, 
Divid√Æ
 | 
Mu‚Ä¶√πliÀát‚Äπ
);

1781 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_PLL2_G√´Mu‚Ä¶√πliÀát‚Äπ
()

1783  (
u√∂t32_t
)(
READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL2MUL
));

1800 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_LSIRDY
()

1802 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYC
);

1810 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_LSERDY
()

1812 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYC
);

1820 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_HSIRDY
()

1822 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYC
);

1830 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_HSERDY
()

1832 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYC
);

1840 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_PLLRDY
()

1842 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYC
);

1845 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

1851 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_PLLI2SRDY
()

1853 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYC
);

1857 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

1863 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_PLL2RDY
()

1865 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYC
);

1874 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®F≈ìg_HSECSS
()

1876 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_CSSC
);

1884 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_LSIRDY
()

1886  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYF
) == (RCC_CIR_LSIRDYF));

1894 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_LSERDY
()

1896  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYF
) == (RCC_CIR_LSERDYF));

1904 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_HSIRDY
()

1906  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYF
) == (RCC_CIR_HSIRDYF));

1914 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_HSERDY
()

1916  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYF
) == (RCC_CIR_HSERDYF));

1924 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_PLLRDY
()

1926  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYF
) == (RCC_CIR_PLLRDYF));

1929 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

1935 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_PLLI2SRDY
()

1937  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYF
) == (RCC_CIR_PLL3RDYF));

1941 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

1947 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_PLL2RDY
()

1949  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYF
) == (RCC_CIR_PLL2RDYF));

1958 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_HSECSS
()

1960  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_CSSF
) == (RCC_CIR_CSSF));

1968 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_IWDGRST
()

1970  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_IWDGRSTF
) == (RCC_CSR_IWDGRSTF));

1978 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_LPWRRST
()

1980  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_LPWRRSTF
) == (RCC_CSR_LPWRRSTF));

1988 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_PINRST
()

1990  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_PINRSTF
) == (RCC_CSR_PINRSTF));

1998 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_PORRST
()

2000  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_PORRSTF
) == (RCC_CSR_PORRSTF));

2008 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_SFTRST
()

2010  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_SFTRSTF
) == (RCC_CSR_SFTRSTF));

2018 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsAÀòiveF≈ìg_WWDGRST
()

2020  (
READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_WWDGRSTF
) == (RCC_CSR_WWDGRSTF));

2028 
__STATIC_INLINE
 
LL_RCC_C√Ä¬®Re¬£tF≈ìgs
()

2030 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RMVF
);

2046 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_LSIRDY
()

2048 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYIE
);

2056 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_LSERDY
()

2058 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYIE
);

2066 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_HSIRDY
()

2068 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYIE
);

2076 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_HSERDY
()

2078 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYIE
);

2086 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_PLLRDY
()

2088 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYIE
);

2091 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

2097 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_PLLI2SRDY
()

2099 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYIE
);

2103 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

2109 
__STATIC_INLINE
 
LL_RCC_E¬´b√ÄIT_PLL2RDY
()

2111 
SET_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYIE
);

2120 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_LSIRDY
()

2122 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYIE
);

2130 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_LSERDY
()

2132 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYIE
);

2140 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_HSIRDY
()

2142 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYIE
);

2150 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_HSERDY
()

2152 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYIE
);

2160 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_PLLRDY
()

2162 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYIE
);

2165 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

2171 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_PLLI2SRDY
()

2173 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYIE
);

2177 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

2183 
__STATIC_INLINE
 
LL_RCC_Di√üb√ÄIT_PLL2RDY
()

2185 
CLEAR_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYIE
);

2194 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_LSIRDY
()

2196  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSIRDYIE
) == (RCC_CIR_LSIRDYIE));

2204 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_LSERDY
()

2206  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_LSERDYIE
) == (RCC_CIR_LSERDYIE));

2214 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_HSIRDY
()

2216  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSIRDYIE
) == (RCC_CIR_HSIRDYIE));

2224 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_HSERDY
()

2226  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_HSERDYIE
) == (RCC_CIR_HSERDYIE));

2234 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_PLLRDY
()

2236  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLLRDYIE
) == (RCC_CIR_PLLRDYIE));

2239 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

2245 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_PLLI2SRDY
()

2247  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL3RDYIE
) == (RCC_CIR_PLL3RDYIE));

2251 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

2257 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RCC_IsE¬´b√ÄdIT_PLL2RDY
()

2259  (
READ_BIT
(
RCC
->
CIR
, 
RCC_CIR_PLL2RDYIE
) == (RCC_CIR_PLL2RDYIE));

2267 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

2271 
E¬∫‚ÄπS√®tus
 
LL_RCC_DeIn√¥
();

2279 
LL_RCC_G√´Sy¬∞emClocksF¬™q
(
LL_RCC_ClocksTy‚â•Def
 *
RCC_Clocks
);

2280 #i‚Ä°
def√∂ed
(
RCC_CFGR2_I2S2SRC
)

2281 
u√∂t32_t
 
LL_RCC_G√´I2SClockF¬™q
(u√∂t32_√†
I2SxSourÀö
);

2283 #i‚Ä°
def√∂ed
(
USB_OTG_FS
√ã|| def√∂ed(
USB
)

2284 
u√∂t32_t
 
LL_RCC_G√´USBClockF¬™q
(u√∂t32_√†
USBxSourÀö
);

2286 
u√∂t32_t
 
LL_RCC_G√´ADCClockF¬™q
(u√∂t32_√†
ADCxSourÀö
);

2306 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_rtc.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_RTC_H


22 
	#__STM32F1xx_LL_RTC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
(
RTC
)

46 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

56 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

66 
u√∂t32_t
 
AsynchP¬™sÀá√Är
;

72 
u√∂t32_t
 
OutPutSourÀö
;

78 } 
	tLL_RTC_In√¥Ty‚â•Def
;

85 
u√∂t8_t
 
Hours
;

88 
u√∂t8_t
 
M√∂u√£s
;

91 
u√∂t8_t
 
Sec‚ÅÑds
;

93 } 
	tLL_RTC_TimeTy‚â•Def
;

101 
LL_RTC_TimeTy‚â•Def
 
A≈ìrmTime
;

103 } 
	tLL_RTC_A≈ìrmTy‚â•Def
;

115 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

119 
	#LL_RTC_FORMAT_BIN
 (0x000000000U√ã

	)

120 
	#LL_RTC_FORMAT_BCD
 (0x000000001U√ã

	)

129 #i‚Ä°
RTC_BKP_NUMBER
 > 0

130 
	#LL_RTC_BKP_DR1
 (0x00000001U)

	)

131 
	#LL_RTC_BKP_DR2
 (0x00000002U)

	)

132 
	#LL_RTC_BKP_DR3
 (0x00000003U)

	)

133 
	#LL_RTC_BKP_DR4
 (0x00000004U)

	)

134 
	#LL_RTC_BKP_DR5
 (0x00000005U)

	)

135 
	#LL_RTC_BKP_DR6
 (0x00000006U)

	)

136 
	#LL_RTC_BKP_DR7
 (0x00000007U)

	)

137 
	#LL_RTC_BKP_DR8
 (0x00000008U)

	)

138 
	#LL_RTC_BKP_DR9
 (0x00000009U)

	)

139 
	#LL_RTC_BKP_DR10
 (0x0000000AU)

	)

141 #i‚Ä°
RTC_BKP_NUMBER
 > 10

142 
	#LL_RTC_BKP_DR11
 (0x0000000BU)

	)

143 
	#LL_RTC_BKP_DR12
 (0x0000000CU)

	)

144 
	#LL_RTC_BKP_DR13
 (0x0000000DU)

	)

145 
	#LL_RTC_BKP_DR14
 (0x0000000EU)

	)

146 
	#LL_RTC_BKP_DR15
 (0x0000000FU)

	)

147 
	#LL_RTC_BKP_DR16
 (0x00000010U)

	)

148 
	#LL_RTC_BKP_DR17
 (0x00000011U)

	)

149 
	#LL_RTC_BKP_DR18
 (0x00000012U)

	)

150 
	#LL_RTC_BKP_DR19
 (0x00000013U)

	)

151 
	#LL_RTC_BKP_DR20
 (0x00000014U)

	)

152 
	#LL_RTC_BKP_DR21
 (0x00000015U)

	)

153 
	#LL_RTC_BKP_DR22
 (0x00000016U)

	)

154 
	#LL_RTC_BKP_DR23
 (0x00000017U)

	)

155 
	#LL_RTC_BKP_DR24
 (0x00000018U)

	)

156 
	#LL_RTC_BKP_DR25
 (0x00000019U)

	)

157 
	#LL_RTC_BKP_DR26
 (0x0000001AU)

	)

158 
	#LL_RTC_BKP_DR27
 (0x0000001BU)

	)

159 
	#LL_RTC_BKP_DR28
 (0x0000001CU)

	)

160 
	#LL_RTC_BKP_DR29
 (0x0000001DU)

	)

161 
	#LL_RTC_BKP_DR30
 (0x0000001EU)

	)

162 
	#LL_RTC_BKP_DR31
 (0x0000001FU)

	)

163 
	#LL_RTC_BKP_DR32
 (0x00000020U)

	)

164 
	#LL_RTC_BKP_DR33
 (0x00000021U)

	)

165 
	#LL_RTC_BKP_DR34
 (0x00000022U)

	)

166 
	#LL_RTC_BKP_DR35
 (0x00000023U)

	)

167 
	#LL_RTC_BKP_DR36
 (0x00000024U)

	)

168 
	#LL_RTC_BKP_DR37
 (0x00000025U)

	)

169 
	#LL_RTC_BKP_DR38
 (0x00000026U)

	)

170 
	#LL_RTC_BKP_DR39
 (0x00000027U)

	)

171 
	#LL_RTC_BKP_DR40
 (0x00000028U)

	)

172 
	#LL_RTC_BKP_DR41
 (0x00000029U)

	)

173 
	#LL_RTC_BKP_DR42
 (0x0000002AU)

	)

183 
	#LL_RTC_TAMPER_ACTIVELEVEL_LOW
 
BKP_CR_TPAL


	)

184 
	#LL_RTC_TAMPER_ACTIVELEVEL_HIGH
 (0x00000000U√ã

	)

193 
	#LL_RTC_CALIB_OUTPUT_NONE
 (0x00000000U√ã

	)

194 
	#LL_RTC_CALIB_OUTPUT_RTCCLOCK
 
BKP_RTCCR_CCO


	)

195 
	#LL_RTC_CALIB_OUTPUT_ALARM
 
BKP_RTCCR_ASOE


	)

196 
	#LL_RTC_CALIB_OUTPUT_SECOND
 (
BKP_RTCCR_ASOS
 | 
BKP_RTCCR_ASOE
√ã

	)

221 
	#LL_RTC_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

229 
	#LL_RTC_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

243 
	#__LL_RTC_CONVERT_BIN2BCD
(
__VALUE__
√ã(
u√∂t8_t
)((((__VALUE__√ã/ 10U√ã<< 4U√ã| ((__VALUE__√ã% 10U))

	)

250 
	#__LL_RTC_CONVERT_BCD2BIN
(
__VALUE__
√ã(
u√∂t8_t
)(((u√∂t8_t)((__VALUE__√ã& (u√∂t8_t)0xF0U√ã>> (u√∂t8_t)0x4U√ã* 10U + ((__VALUE__√ã& (u√∂t8_t)0x0FU))

	)

277 
__STATIC_INLINE
 
LL_RTC_S√´AsynchP¬™sÀá√Är
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
AsynchP¬™sÀá√Är
)

279 
MODIFY_REG
(
RTCx
->
PRLH
, 
RTC_PRLH_PRL
, (
AsynchP¬™sÀá√Är
 >> 16));

280 
MODIFY_REG
(
RTCx
->
PRLL
, 
RTC_PRLL_PRL
, (
AsynchP¬™sÀá√Är
 & RTC_PRLL_PRL));

290 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_G√´Divid√Æ
(
RTC_Ty‚â•Def
 *
RTCx
)

292 
u√∂t16_t
 
High¬•esÀá√Är
 = 0, 
Low¬•esÀá√Är
 = 0;

293 
High¬•esÀá√Är
 = 
READ_REG
(
RTCx
->
DIVH
 & 
RTC_DIVH_RTC_DIV
);

294 
Low¬•esÀá√Är
 = 
READ_REG
(
RTCx
->
DIVL
 & 
RTC_DIVL_RTC_DIV
);

296  (((
u√∂t32_t
√ã
High¬•esÀá√Är
 << 16U√ã| 
Low¬•esÀá√Är
);

312 
__STATIC_INLINE
 
LL_RTC_S√´Ou√ßutSourÀö
(
BKP_Ty‚â•Def
 *
BKPx
, 
u√∂t32_t
 
Ou√ßutSourÀö
)

314 
MODIFY_REG
(
BKPx
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
 | 
BKP_RTCCR_ASOS
), 
Ou√ßutSourÀö
);

329 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_G√´OutPutSourÀö
(
BKP_Ty‚â•Def
 *
BKPx
)

331  (
u√∂t32_t
)(
READ_BIT
(
BKPx
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
 | 
BKP_RTCCR_ASOS
)));

340 
__STATIC_INLINE
 
LL_RTC_E¬´b√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTC_Ty‚â•Def
 *
RTCx
)

342 
CLEAR_BIT
(
RTCx
->
CRL
, 
RTC_CRL_CNF
);

351 
__STATIC_INLINE
 
LL_RTC_Di√üb√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTC_Ty‚â•Def
 *
RTCx
)

353 
SET_BIT
(
RTCx
->
CRL
, 
RTC_CRL_CNF
);

374 
__STATIC_INLINE
 
LL_RTC_TIME_S√´
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
TimeCou¬°√Æ
)

377 
WRITE_REG
(
RTCx
->
CNTH
, (
TimeCou¬°√Æ
 >> 16U));

379 
WRITE_REG
(
RTCx
->
CNTL
, (
TimeCou¬°√Æ
 & 
RTC_CNTL_RTC_CNT
));

389 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_TIME_G√´
(
RTC_Ty‚â•Def
 *
RTCx
)

391 
u√∂t16_t
 
high
 = 0, 
low
 = 0;

393 
high
 = 
READ_REG
(
RTCx
->
CNTH
 & 
RTC_CNTH_RTC_CNT
);

394 
low
 = 
READ_REG
(
RTCx
->
CNTL
 & 
RTC_CNTL_RTC_CNT
);

395  ((
u√∂t32_t
)(((u√∂t32_t√ã
high
 << 16U√ã| 
low
));

415 
__STATIC_INLINE
 
LL_RTC_ALARM_S√´
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
A≈ìrmCou¬°√Æ
)

418 
WRITE_REG
(
RTCx
->
ALRH
, (
A≈ìrmCou¬°√Æ
 >> 16));

420 
WRITE_REG
(
RTCx
->
ALRL
, (
A≈ìrmCou¬°√Æ
 & 
RTC_ALRL_RTC_ALR
));

431 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_ALARM_G√´
(
RTC_Ty‚â•Def
 *
RTCx
)

433 
u√∂t16_t
 
high
 = 0, 
low
 = 0;

435 
high
 = 
READ_REG
(
RTCx
->
ALRH
 & 
RTC_ALRH_RTC_ALR
);

436 
low
 = 
READ_REG
(
RTCx
->
ALRL
 & 
RTC_ALRL_RTC_ALR
);

438  (((
u√∂t32_t
√ã
high
 << 16U√ã| 
low
);

454 
__STATIC_INLINE
 
LL_RTC_TAMPER_E¬´b√Ä
(
BKP_Ty‚â•Def
 *
BKPx
)

456 
SET_BIT
(
BKPx
->
CR
, 
BKP_CR_TPE
);

464 
__STATIC_INLINE
 
LL_RTC_TAMPER_Di√üb√Ä
(
BKP_Ty‚â•Def
 *
BKPx
)

466 
CLEAR_BIT
(
BKP
->
CR
, 
BKP_CR_TPE
);

478 
__STATIC_INLINE
 
LL_RTC_TAMPER_S√´AÀòiveLev√±
(
BKP_Ty‚â•Def
 *
BKPx
, 
u√∂t32_t
 
Tam‚â•r
)

480 
MODIFY_REG
(
BKPx
->
CR
, 
BKP_CR_TPAL
, 
Tam‚â•r
);

488 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_TAMPER_G√´AÀòiveLev√±
(
BKP_Ty‚â•Def
 *
BKPx
)

490  (
u√∂t32_t
)(
READ_BIT
(
BKPx
->
CR
, 
BKP_CR_TPAL
));

552 
__STATIC_INLINE
 
LL_RTC_BKP_S√´Regi¬∞√Æ
(
BKP_Ty‚â•Def
 *
BKPx
, 
u√∂t32_t
 
BackupRegi¬∞√Æ
, u√∂t32_√†
D¬©a
)

554 
u√∂t32_t
 
tmp
 = 0U;

556 
tmp
 = (
u√∂t32_t
)
BKP_BASE
;

557 
tmp
 +Ô£ø(
BackupRegi¬∞√Æ
 * 4U);

560 *(
__IO
 
u√∂t32_t
 *)
tmp
 = (u√∂t32_t)
D¬©a
;

612 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_BKP_G√´Regi¬∞√Æ
(
BKP_Ty‚â•Def
 *
BKPx
, u√∂t32_√†
BackupRegi¬∞√Æ
)

614 
u√∂t32_t
 
tmp
 = 0U;

616 
tmp
 = (
u√∂t32_t
)
BKP_BASE
;

617 
tmp
 +Ô£ø(
BackupRegi¬∞√Æ
 * 4U);

620  ((*(
__IO
 
u√∂t32_t
 *)
tmp
√ã& 
BKP_DR1_D
);

641 
__STATIC_INLINE
 
LL_RTC_CAL_S√´CÔ¨Çr¬£Dig√¥√Ü
(
BKP_Ty‚â•Def
 *
BKPx
, 
u√∂t32_t
 
V√Üue
)

643 
MODIFY_REG
(
BKPx
->
RTCCR
, 
BKP_RTCCR_CAL
, 
V√Üue
);

652 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_CAL_G√´CÔ¨Çr¬£Dig√¥√Ü
(
BKP_Ty‚â•Def
 *
BKPx
)

654  (
u√∂t32_t
)(
READ_BIT
(
BKPx
->
RTCCR
, 
BKP_RTCCR_CAL
));

670 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_TAMPI
(
BKP_Ty‚â•Def
 *
BKPx
)

672  (
READ_BIT
(
BKPx
->
CSR
, 
BKP_CSR_TIF
) == (BKP_CSR_TIF));

681 
__STATIC_INLINE
 
LL_RTC_C√Ä¬®F≈ìg_TAMPI
(
BKP_Ty‚â•Def
 *
BKPx
)

683 
SET_BIT
(
BKPx
->
CSR
, 
BKP_CSR_CTI
);

692 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_TAMPE
(
BKP_Ty‚â•Def
 *
BKPx
)

694  (
READ_BIT
(
BKPx
->
CSR
, 
BKP_CSR_TEF
) == (BKP_CSR_TEF));

703 
__STATIC_INLINE
 
LL_RTC_C√Ä¬®F≈ìg_TAMPE
(
BKP_Ty‚â•Def
 *
BKPx
)

705 
SET_BIT
(
BKPx
->
CSR
, 
BKP_CSR_CTE
);

714 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_ALR
(
RTC_Ty‚â•Def
 *
RTCx
)

716  (
READ_BIT
(
RTCx
->
CRL
, 
RTC_CRL_ALRF
) == (RTC_CRL_ALRF));

725 
__STATIC_INLINE
 
LL_RTC_C√Ä¬®F≈ìg_ALR
(
RTC_Ty‚â•Def
 *
RTCx
)

727 
CLEAR_BIT
(
RTCx
->
CRL
, 
RTC_CRL_ALRF
);

736 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_RS
(
RTC_Ty‚â•Def
 *
RTCx
)

738  (
READ_BIT
(
RTCx
->
CRL
, 
RTC_CRL_RSF
) == (RTC_CRL_RSF));

747 
__STATIC_INLINE
 
LL_RTC_C√Ä¬®F≈ìg_RS
(
RTC_Ty‚â•Def
 *
RTCx
)

749 
CLEAR_BIT
(
RTCx
->
CRL
, 
RTC_CRL_RSF
);

758 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_OW
(
RTC_Ty‚â•Def
 *
RTCx
)

760  (
READ_BIT
(
RTCx
->
CRL
, 
RTC_CRL_OWF
) == (RTC_CRL_OWF));

769 
__STATIC_INLINE
 
LL_RTC_C√Ä¬®F≈ìg_OW
(
RTC_Ty‚â•Def
 *
RTCx
)

771 
CLEAR_BIT
(
RTCx
->
CRL
, 
RTC_CRL_OWF
);

780 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_SEC
(
RTC_Ty‚â•Def
 *
RTCx
)

782  (
READ_BIT
(
RTCx
->
CRL
, 
RTC_CRL_SECF
) == (RTC_CRL_SECF));

791 
__STATIC_INLINE
 
LL_RTC_C√Ä¬®F≈ìg_SEC
(
RTC_Ty‚â•Def
 *
RTCx
)

793 
CLEAR_BIT
(
RTCx
->
CRL
, 
RTC_CRL_SECF
);

802 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsAÀòiveF≈ìg_RTOF
(
RTC_Ty‚â•Def
 *
RTCx
)

804  (
READ_BIT
(
RTCx
->
CRL
, 
RTC_CRL_RTOFF
) == (RTC_CRL_RTOFF));

822 
__STATIC_INLINE
 
LL_RTC_E¬´b√ÄIT_ALR
(
RTC_Ty‚â•Def
 *
RTCx
)

824 
SET_BIT
(
RTCx
->
CRH
, 
RTC_CRH_ALRIE
);

834 
__STATIC_INLINE
 
LL_RTC_Di√üb√ÄIT_ALR
(
RTC_Ty‚â•Def
 *
RTCx
)

836 
CLEAR_BIT
(
RTCx
->
CRH
, 
RTC_CRH_ALRIE
);

845 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsE¬´b√ÄdIT_ALR
(
RTC_Ty‚â•Def
 *
RTCx
)

847  (
READ_BIT
(
RTCx
->
CRH
, 
RTC_CRH_ALRIE
) == (RTC_CRH_ALRIE));

857 
__STATIC_INLINE
 
LL_RTC_E¬´b√ÄIT_SEC
(
RTC_Ty‚â•Def
 *
RTCx
)

859 
SET_BIT
(
RTCx
->
CRH
, 
RTC_CRH_SECIE
);

869 
__STATIC_INLINE
 
LL_RTC_Di√üb√ÄIT_SEC
(
RTC_Ty‚â•Def
 *
RTCx
)

871 
CLEAR_BIT
(
RTCx
->
CRH
, 
RTC_CRH_SECIE
);

880 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsE¬´b√ÄdIT_SEC
(
RTC_Ty‚â•Def
 *
RTCx
)

882  (
READ_BIT
(
RTCx
->
CRH
, 
RTC_CRH_SECIE
) == (RTC_CRH_SECIE));

892 
__STATIC_INLINE
 
LL_RTC_E¬´b√ÄIT_OW
(
RTC_Ty‚â•Def
 *
RTCx
)

894 
SET_BIT
(
RTCx
->
CRH
, 
RTC_CRH_OWIE
);

904 
__STATIC_INLINE
 
LL_RTC_Di√üb√ÄIT_OW
(
RTC_Ty‚â•Def
 *
RTCx
)

906 
CLEAR_BIT
(
RTCx
->
CRH
, 
RTC_CRH_OWIE
);

915 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsE¬´b√ÄdIT_OW
(
RTC_Ty‚â•Def
 *
RTCx
)

917  (
READ_BIT
(
RTCx
->
CRH
, 
RTC_CRH_OWIE
) == (RTC_CRH_OWIE));

926 
__STATIC_INLINE
 
LL_RTC_E¬´b√ÄIT_TAMP
(
BKP_Ty‚â•Def
 *
BKPx
)

928 
SET_BIT
(
BKPx
->
CSR
, 
BKP_CSR_TPIE
);

937 
__STATIC_INLINE
 
LL_RTC_Di√üb√ÄIT_TAMP
(
BKP_Ty‚â•Def
 *
BKPx
)

939 
CLEAR_BIT
(
BKPx
->
CSR
, 
BKP_CSR_TPIE
);

948 
__STATIC_INLINE
 
u√∂t32_t
 
LL_RTC_IsE¬´b√ÄdIT_TAMP
(
BKP_Ty‚â•Def
 *
BKPx
)

950  (
READ_BIT
(
BKPx
->
CSR
, 
BKP_CSR_TPIE
) == BKP_CSR_TPIE);

956 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

961 
E¬∫‚ÄπS√®tus
 
LL_RTC_DeIn√¥
(
RTC_Ty‚â•Def
 *
RTCx
);

962 
E¬∫‚ÄπS√®tus
 
LL_RTC_In√¥
(
RTC_Ty‚â•Def
 *
RTCx
, 
LL_RTC_In√¥Ty‚â•Def
 *
RTC_In√¥S√•uÀò
);

963 
LL_RTC_S√•uÀòIn√¥
(
LL_RTC_In√¥Ty‚â•Def
 *
RTC_In√¥S√•uÀò
);

964 
E¬∫‚ÄπS√®tus
 
LL_RTC_TIME_In√¥
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
RTC_F‚Äπm¬©
, 
LL_RTC_TimeTy‚â•Def
 *
RTC_TimeS√•uÀò
);

965 
LL_RTC_TIME_S√•uÀòIn√¥
(
LL_RTC_TimeTy‚â•Def
 *
RTC_TimeS√•uÀò
);

966 
E¬∫‚ÄπS√®tus
 
LL_RTC_ALARM_In√¥
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
RTC_F‚Äπm¬©
, 
LL_RTC_A≈ìrmTy‚â•Def
 *
RTC_A≈ìrmS√•uÀò
);

967 
LL_RTC_ALARM_S√•uÀòIn√¥
(
LL_RTC_A≈ìrmTy‚â•Def
 *
RTC_A≈ìrmS√•uÀò
);

968 
E¬∫‚ÄπS√®tus
 
LL_RTC_E¬°√ÆIn√¥Mode
(
RTC_Ty‚â•Def
 *
RTCx
);

969 
E¬∫‚ÄπS√®tus
 
LL_RTC_Ex√¥In√¥Mode
(
RTC_Ty‚â•Def
 *
RTCx
);

970 
E¬∫‚ÄπS√®tus
 
LL_RTC_Wa√¥F‚ÄπSynchro
(
RTC_Ty‚â•Def
 *
RTCx
);

971 
E¬∫‚ÄπS√®tus
 
LL_RTC_TIME_S√´Cou¬°√Æ
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
TimeCou¬°√Æ
);

972 
E¬∫‚ÄπS√®tus
 
LL_RTC_ALARM_S√´Cou¬°√Æ
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
A≈ìrmCou¬°√Æ
);

997 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_sdmmc.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_SDMMC_H


22 
	#STM32F1xx_LL_SDMMC_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


28 #i‚Ä°
def√∂ed
(
SDIO
)

31 
	~"¬∞m32f1xx_h√Ü_def.h
"

51 
u√∂t32_t
 
ClockEdge
;

54 
u√∂t32_t
 
ClockBy‚àëss
;

58 
u√∂t32_t
 
ClockPow√ÆSave
;

62 
u√∂t32_t
 
BusWide
;

65 
u√∂t32_t
 
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
;

68 
u√∂t32_t
 
ClockDiv
;

71 }
	tSDIO_In√¥Ty‚â•Def
;

79 
u√∂t32_t
 
	mArgum√≠t
;

84 
u√∂t32_t
 
	mCmdIndex
;

87 
u√∂t32_t
 
	mRe‚Ä¢‚ÅÑ¬£
;

90 
u√∂t32_t
 
	mWa√¥F‚ÄπI¬°√Æru¬±
;

94 
u√∂t32_t
 
	mCPSM
;

97 }
	tSDIO_CmdIn√¥Ty‚â•Def
;

105 
u√∂t32_t
 
	mD¬©aTimeOut
;

107 
u√∂t32_t
 
	mD¬©aL√≠gth
;

109 
u√∂t32_t
 
	mD¬©aBlockSize
;

112 
u√∂t32_t
 
	mT√∏ns‚ÄûrD√∫
;

116 
u√∂t32_t
 
	mT√∏ns‚ÄûrMode
;

119 
u√∂t32_t
 
	mDPSM
;

122 }
	tSDIO_D¬©aIn√¥Ty‚â•Def
;

132 
	#SDMMC_ERROR_NONE
 ((
u√∂t32_t
)0x00000000U√ã

	)

133 
	#SDMMC_ERROR_CMD_CRC_FAIL
 ((
u√∂t32_t
)0x00000001U√ã

	)

134 
	#SDMMC_ERROR_DATA_CRC_FAIL
 ((
u√∂t32_t
)0x00000002U√ã

	)

135 
	#SDMMC_ERROR_CMD_RSP_TIMEOUT
 ((
u√∂t32_t
)0x00000004U√ã

	)

136 
	#SDMMC_ERROR_DATA_TIMEOUT
 ((
u√∂t32_t
)0x00000008U√ã

	)

137 
	#SDMMC_ERROR_TX_UNDERRUN
 ((
u√∂t32_t
)0x00000010U√ã

	)

138 
	#SDMMC_ERROR_RX_OVERRUN
 ((
u√∂t32_t
)0x00000020U√ã

	)

139 
	#SDMMC_ERROR_ADDR_MISALIGNED
 ((
u√∂t32_t
)0x00000040U√ã

	)

140 
	#SDMMC_ERROR_BLOCK_LEN_ERR
 ((
u√∂t32_t
)0x00000080U√ã

	)

142 
	#SDMMC_ERROR_ERASE_SEQ_ERR
 ((
u√∂t32_t
)0x00000100U√ã

	)

143 
	#SDMMC_ERROR_BAD_ERASE_PARAM
 ((
u√∂t32_t
)0x00000200U√ã

	)

144 
	#SDMMC_ERROR_WRITE_PROT_VIOLATION
 ((
u√∂t32_t
)0x00000400U√ã

	)

145 
	#SDMMC_ERROR_LOCK_UNLOCK_FAILED
 ((
u√∂t32_t
)0x00000800U√ã

	)

147 
	#SDMMC_ERROR_COM_CRC_FAILED
 ((
u√∂t32_t
)0x00001000U√ã

	)

148 
	#SDMMC_ERROR_ILLEGAL_CMD
 ((
u√∂t32_t
)0x00002000U√ã

	)

149 
	#SDMMC_ERROR_CARD_ECC_FAILED
 ((
u√∂t32_t
)0x00004000U√ã

	)

150 
	#SDMMC_ERROR_CC_ERR
 ((
u√∂t32_t
)0x00008000U√ã

	)

151 
	#SDMMC_ERROR_GENERAL_UNKNOWN_ERR
 ((
u√∂t32_t
)0x00010000U√ã

	)

152 
	#SDMMC_ERROR_STREAM_READ_UNDERRUN
 ((
u√∂t32_t
)0x00020000U√ã

	)

153 
	#SDMMC_ERROR_STREAM_WRITE_OVERRUN
 ((
u√∂t32_t
)0x00040000U√ã

	)

154 
	#SDMMC_ERROR_CID_CSD_OVERWRITE
 ((
u√∂t32_t
)0x00080000U√ã

	)

155 
	#SDMMC_ERROR_WP_ERASE_SKIP
 ((
u√∂t32_t
)0x00100000U√ã

	)

156 
	#SDMMC_ERROR_CARD_ECC_DISABLED
 ((
u√∂t32_t
)0x00200000U√ã

	)

157 
	#SDMMC_ERROR_ERASE_RESET
 ((
u√∂t32_t
)0x00400000U√ã

	)

159 
	#SDMMC_ERROR_AKE_SEQ_ERR
 ((
u√∂t32_t
)0x00800000U√ã

	)

160 
	#SDMMC_ERROR_INVALID_VOLTRANGE
 ((
u√∂t32_t
)0x01000000U√ã

	)

161 
	#SDMMC_ERROR_ADDR_OUT_OF_RANGE
 ((
u√∂t32_t
)0x02000000U√ã

	)

162 
	#SDMMC_ERROR_REQUEST_NOT_APPLICABLE
 ((
u√∂t32_t
)0x04000000U√ã

	)

163 
	#SDMMC_ERROR_INVALID_PARAMETER
 ((
u√∂t32_t
)0x08000000U√ã

	)

164 
	#SDMMC_ERROR_UNSUPPORTED_FEATURE
 ((
u√∂t32_t
)0x10000000U√ã

	)

165 
	#SDMMC_ERROR_BUSY
 ((
u√∂t32_t
)0x20000000U√ã

	)

166 
	#SDMMC_ERROR_DMA
 ((
u√∂t32_t
)0x40000000U√ã

	)

167 
	#SDMMC_ERROR_TIMEOUT
 ((
u√∂t32_t
)0x80000000U√ã

	)

172 
	#SDMMC_CMD_GO_IDLE_STATE
 ((
u√∂t8_t
)0U√ã

	)

173 
	#SDMMC_CMD_SEND_OP_COND
 ((
u√∂t8_t
)1U√ã

	)

174 
	#SDMMC_CMD_ALL_SEND_CID
 ((
u√∂t8_t
)2U√ã

	)

175 
	#SDMMC_CMD_SET_REL_ADDR
 ((
u√∂t8_t
)3U√ã

	)

176 
	#SDMMC_CMD_SET_DSR
 ((
u√∂t8_t
)4U√ã

	)

177 
	#SDMMC_CMD_SDMMC_SEN_OP_COND
 ((
u√∂t8_t
)5U√ã

	)

179 
	#SDMMC_CMD_HS_SWITCH
 ((
u√∂t8_t
)6U√ã

	)

180 
	#SDMMC_CMD_SEL_DESEL_CARD
 ((
u√∂t8_t
)7U√ã

	)

181 
	#SDMMC_CMD_HS_SEND_EXT_CSD
 ((
u√∂t8_t
)8U√ã

	)

183 
	#SDMMC_CMD_SEND_CSD
 ((
u√∂t8_t
)9U√ã

	)

184 
	#SDMMC_CMD_SEND_CID
 ((
u√∂t8_t
)10U√ã

	)

185 
	#SDMMC_CMD_READ_DAT_UNTIL_STOP
 ((
u√∂t8_t
)11U√ã

	)

186 
	#SDMMC_CMD_STOP_TRANSMISSION
 ((
u√∂t8_t
)12U√ã

	)

187 
	#SDMMC_CMD_SEND_STATUS
 ((
u√∂t8_t
)13U√ã

	)

188 
	#SDMMC_CMD_HS_BUSTEST_READ
 ((
u√∂t8_t
)14U√ã

	)

189 
	#SDMMC_CMD_GO_INACTIVE_STATE
 ((
u√∂t8_t
)15U√ã

	)

190 
	#SDMMC_CMD_SET_BLOCKLEN
 ((
u√∂t8_t
)16U√ã

	)

193 
	#SDMMC_CMD_READ_SINGLE_BLOCK
 ((
u√∂t8_t
)17U√ã

	)

195 
	#SDMMC_CMD_READ_MULT_BLOCK
 ((
u√∂t8_t
)18U√ã

	)

197 
	#SDMMC_CMD_HS_BUSTEST_WRITE
 ((
u√∂t8_t
)19U√ã

	)

198 
	#SDMMC_CMD_WRITE_DAT_UNTIL_STOP
 ((
u√∂t8_t
)20U√ã

	)

199 
	#SDMMC_CMD_SET_BLOCK_COUNT
 ((
u√∂t8_t
)23U√ã

	)

200 
	#SDMMC_CMD_WRITE_SINGLE_BLOCK
 ((
u√∂t8_t
)24U√ã

	)

202 
	#SDMMC_CMD_WRITE_MULT_BLOCK
 ((
u√∂t8_t
)25U√ã

	)

203 
	#SDMMC_CMD_PROG_CID
 ((
u√∂t8_t
)26U√ã

	)

204 
	#SDMMC_CMD_PROG_CSD
 ((
u√∂t8_t
)27U√ã

	)

205 
	#SDMMC_CMD_SET_WRITE_PROT
 ((
u√∂t8_t
)28U√ã

	)

206 
	#SDMMC_CMD_CLR_WRITE_PROT
 ((
u√∂t8_t
)29U√ã

	)

207 
	#SDMMC_CMD_SEND_WRITE_PROT
 ((
u√∂t8_t
)30U√ã

	)

208 
	#SDMMC_CMD_SD_ERASE_GRP_START
 ((
u√∂t8_t
)32U√ã

	)

209 
	#SDMMC_CMD_SD_ERASE_GRP_END
 ((
u√∂t8_t
)33U√ã

	)

210 
	#SDMMC_CMD_ERASE_GRP_START
 ((
u√∂t8_t
)35U√ã

	)

212 
	#SDMMC_CMD_ERASE_GRP_END
 ((
u√∂t8_t
)36U√ã

	)

214 
	#SDMMC_CMD_ERASE
 ((
u√∂t8_t
)38U√ã

	)

215 
	#SDMMC_CMD_FAST_IO
 ((
u√∂t8_t
)39U√ã

	)

216 
	#SDMMC_CMD_GO_IRQ_STATE
 ((
u√∂t8_t
)40U√ã

	)

217 
	#SDMMC_CMD_LOCK_UNLOCK
 ((
u√∂t8_t
)42U√ã

	)

219 
	#SDMMC_CMD_APP_CMD
 ((
u√∂t8_t
)55U√ã

	)

221 
	#SDMMC_CMD_GEN_CMD
 ((
u√∂t8_t
)56U√ã

	)

223 
	#SDMMC_CMD_NO_CMD
 ((
u√∂t8_t
)64U√ã

	)

229 
	#SDMMC_CMD_APP_SD_SET_BUSWIDTH
 ((
u√∂t8_t
)6U√ã

	)

231 
	#SDMMC_CMD_SD_APP_STATUS
 ((
u√∂t8_t
)13U√ã

	)

232 
	#SDMMC_CMD_SD_APP_SEND_NUM_WRITE_BLOCKS
 ((
u√∂t8_t
)22U√ã

	)

234 
	#SDMMC_CMD_SD_APP_OP_COND
 ((
u√∂t8_t
)41U√ã

	)

236 
	#SDMMC_CMD_SD_APP_SET_CLR_CARD_DETECT
 ((
u√∂t8_t
)42U√ã

	)

237 
	#SDMMC_CMD_SD_APP_SEND_SCR
 ((
u√∂t8_t
)51U√ã

	)

238 
	#SDMMC_CMD_SDMMC_RW_DIRECT
 ((
u√∂t8_t
)52U√ã

	)

239 
	#SDMMC_CMD_SDMMC_RW_EXTENDED
 ((
u√∂t8_t
)53U√ã

	)

245 
	#SDMMC_CMD_SD_APP_GET_MKB
 ((
u√∂t8_t
)43U)

	)

246 
	#SDMMC_CMD_SD_APP_GET_MID
 ((
u√∂t8_t
)44U)

	)

247 
	#SDMMC_CMD_SD_APP_SET_CER_RN1
 ((
u√∂t8_t
)45U)

	)

248 
	#SDMMC_CMD_SD_APP_GET_CER_RN2
 ((
u√∂t8_t
)46U)

	)

249 
	#SDMMC_CMD_SD_APP_SET_CER_RES2
 ((
u√∂t8_t
)47U)

	)

250 
	#SDMMC_CMD_SD_APP_GET_CER_RES1
 ((
u√∂t8_t
)48U)

	)

251 
	#SDMMC_CMD_SD_APP_SECURE_READ_MULTIPLE_BLOCK
 ((
u√∂t8_t
)18U)

	)

252 
	#SDMMC_CMD_SD_APP_SECURE_WRITE_MULTIPLE_BLOCK
 ((
u√∂t8_t
)25U)

	)

253 
	#SDMMC_CMD_SD_APP_SECURE_ERASE
 ((
u√∂t8_t
)38U)

	)

254 
	#SDMMC_CMD_SD_APP_CHANGE_SECURE_AREA
 ((
u√∂t8_t
)49U)

	)

255 
	#SDMMC_CMD_SD_APP_SECURE_WRITE_MKB
 ((
u√∂t8_t
)48U)

	)

260 
	#SDMMC_OCR_ADDR_OUT_OF_RANGE
 ((
u√∂t32_t
)0x80000000U)

	)

261 
	#SDMMC_OCR_ADDR_MISALIGNED
 ((
u√∂t32_t
)0x40000000U)

	)

262 
	#SDMMC_OCR_BLOCK_LEN_ERR
 ((
u√∂t32_t
)0x20000000U)

	)

263 
	#SDMMC_OCR_ERASE_SEQ_ERR
 ((
u√∂t32_t
)0x10000000U)

	)

264 
	#SDMMC_OCR_BAD_ERASE_PARAM
 ((
u√∂t32_t
)0x08000000U)

	)

265 
	#SDMMC_OCR_WRITE_PROT_VIOLATION
 ((
u√∂t32_t
)0x04000000U)

	)

266 
	#SDMMC_OCR_LOCK_UNLOCK_FAILED
 ((
u√∂t32_t
)0x01000000U)

	)

267 
	#SDMMC_OCR_COM_CRC_FAILED
 ((
u√∂t32_t
)0x00800000U)

	)

268 
	#SDMMC_OCR_ILLEGAL_CMD
 ((
u√∂t32_t
)0x00400000U)

	)

269 
	#SDMMC_OCR_CARD_ECC_FAILED
 ((
u√∂t32_t
)0x00200000U)

	)

270 
	#SDMMC_OCR_CC_ERROR
 ((
u√∂t32_t
)0x00100000U)

	)

271 
	#SDMMC_OCR_GENERAL_UNKNOWN_ERROR
 ((
u√∂t32_t
)0x00080000U)

	)

272 
	#SDMMC_OCR_STREAM_READ_UNDERRUN
 ((
u√∂t32_t
)0x00040000U)

	)

273 
	#SDMMC_OCR_STREAM_WRITE_OVERRUN
 ((
u√∂t32_t
)0x00020000U)

	)

274 
	#SDMMC_OCR_CID_CSD_OVERWRITE
 ((
u√∂t32_t
)0x00010000U)

	)

275 
	#SDMMC_OCR_WP_ERASE_SKIP
 ((
u√∂t32_t
)0x00008000U)

	)

276 
	#SDMMC_OCR_CARD_ECC_DISABLED
 ((
u√∂t32_t
)0x00004000U)

	)

277 
	#SDMMC_OCR_ERASE_RESET
 ((
u√∂t32_t
)0x00002000U)

	)

278 
	#SDMMC_OCR_AKE_SEQ_ERROR
 ((
u√∂t32_t
)0x00000008U)

	)

279 
	#SDMMC_OCR_ERRORBITS
 ((
u√∂t32_t
)0xFDFFE008U)

	)

284 
	#SDMMC_R6_GENERAL_UNKNOWN_ERROR
 ((
u√∂t32_t
)0x00002000U)

	)

285 
	#SDMMC_R6_ILLEGAL_CMD
 ((
u√∂t32_t
)0x00004000U)

	)

286 
	#SDMMC_R6_COM_CRC_FAILED
 ((
u√∂t32_t
)0x00008000U)

	)

288 
	#SDMMC_VOLTAGE_WINDOW_SD
 ((
u√∂t32_t
)0x80100000U)

	)

289 
	#SDMMC_HIGH_CAPACITY
 ((
u√∂t32_t
)0x40000000U)

	)

290 
	#SDMMC_STD_CAPACITY
 ((
u√∂t32_t
)0x00000000U)

	)

291 
	#SDMMC_CHECK_PATTERN
 ((
u√∂t32_t
)0x000001AAU)

	)

292 
	#SD_SWITCH_1_8V_CAPACITY
 ((
u√∂t32_t
)0x01000000U)

	)

294 
	#SDMMC_MAX_VOLT_TRIAL
 ((
u√∂t32_t
)0x0000FFFFU)

	)

296 
	#SDMMC_MAX_TRIAL
 ((
u√∂t32_t
)0x0000FFFFU)

	)

298 
	#SDMMC_ALLZERO
 ((
u√∂t32_t
)0x00000000U)

	)

300 
	#SDMMC_WIDE_BUS_SUPPORT
 ((
u√∂t32_t
)0x00040000U)

	)

301 
	#SDMMC_SINGLE_BUS_SUPPORT
 ((
u√∂t32_t
)0x00010000U)

	)

302 
	#SDMMC_CARD_LOCKED
 ((
u√∂t32_t
)0x02000000U)

	)

304 
	#SDMMC_DATATIMEOUT
 ((
u√∂t32_t
)0xFFFFFFFFU)

	)

306 
	#SDMMC_0TO7BITS
 ((
u√∂t32_t
)0x000000FFU)

	)

307 
	#SDMMC_8TO15BITS
 ((
u√∂t32_t
)0x0000FF00U)

	)

308 
	#SDMMC_16TO23BITS
 ((
u√∂t32_t
)0x00FF0000U)

	)

309 
	#SDMMC_24TO31BITS
 ((
u√∂t32_t
)0xFF000000U)

	)

310 
	#SDMMC_MAX_DATA_LENGTH
 ((
u√∂t32_t
)0x01FFFFFFU)

	)

312 
	#SDMMC_HALFFIFO
 ((
u√∂t32_t
)0x00000008U)

	)

313 
	#SDMMC_HALFFIFOBYTES
 ((
u√∂t32_t
)0x00000020U)

	)

318 
	#SDIO_CCCC_ERASE
 ((
u√∂t32_t
)0x00000020U)

	)

320 
	#SDIO_CMDTIMEOUT
 ((
u√∂t32_t
)5000U√ã

	)

321 
	#SDIO_MAXERASETIMEOUT
 ((
u√∂t32_t
)63000U√ã

	)

322 
	#SDIO_STOPTRANSFERTIMEOUT
 ((
u√∂t32_t
)100000000U√ã

	)

327 
	#SDIO_CLOCK_EDGE_RISING
 ((
u√∂t32_t
)0x00000000U)

	)

328 
	#SDIO_CLOCK_EDGE_FALLING
 
SDIO_CLKCR_NEGEDGE


	)

330 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
√ã(((EDGE√ã=Ô£ø
SDIO_CLOCK_EDGE_RISING
) || \

331 ((
EDGE
√ã=Ô£ø
SDIO_CLOCK_EDGE_FALLING
))

	)

339 
	#SDIO_CLOCK_BYPASS_DISABLE
 ((
u√∂t32_t
)0x00000000U)

	)

340 
	#SDIO_CLOCK_BYPASS_ENABLE
 
SDIO_CLKCR_BYPASS


	)

342 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
√ã(((BYPASS√ã=Ô£ø
SDIO_CLOCK_BYPASS_DISABLE
) || \

343 ((
BYPASS
√ã=Ô£ø
SDIO_CLOCK_BYPASS_ENABLE
))

	)

351 
	#SDIO_CLOCK_POWER_SAVE_DISABLE
 ((
u√∂t32_t
)0x00000000U)

	)

352 
	#SDIO_CLOCK_POWER_SAVE_ENABLE
 
SDIO_CLKCR_PWRSAV


	)

354 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
√ã(((SAVE√ã=Ô£ø
SDIO_CLOCK_POWER_SAVE_DISABLE
) || \

355 ((
SAVE
√ã=Ô£ø
SDIO_CLOCK_POWER_SAVE_ENABLE
))

	)

363 
	#SDIO_BUS_WIDE_1B
 ((
u√∂t32_t
)0x00000000U)

	)

364 
	#SDIO_BUS_WIDE_4B
 
SDIO_CLKCR_WIDBUS_0


	)

365 
	#SDIO_BUS_WIDE_8B
 
SDIO_CLKCR_WIDBUS_1


	)

367 
	#IS_SDIO_BUS_WIDE
(
WIDE
√ã(((WIDE√ã=Ô£ø
SDIO_BUS_WIDE_1B
) || \

368 ((
WIDE
√ã=Ô£ø
SDIO_BUS_WIDE_4B
) || \

369 ((
WIDE
√ã=Ô£ø
SDIO_BUS_WIDE_8B
))

	)

377 
	#SDIO_HARDWARE_FLOW_CONTROL_DISABLE
 ((
u√∂t32_t
)0x00000000U)

	)

378 
	#SDIO_HARDWARE_FLOW_CONTROL_ENABLE
 
SDIO_CLKCR_HWFC_EN


	)

380 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
√ã(((CONTROL√ã=Ô£ø
SDIO_HARDWARE_FLOW_CONTROL_DISABLE
) || \

381 ((
CONTROL
√ã=Ô£ø
SDIO_HARDWARE_FLOW_CONTROL_ENABLE
))

	)

389 
	#IS_SDIO_CLKDIV
(
DIV
√ã((DIV√ã<Ô£ø0xFFU)

	)

397 
	#IS_SDIO_CMD_INDEX
(
INDEX
√ã((INDEX√ã< 0x40U)

	)

405 
	#SDIO_RESPONSE_NO
 ((
u√∂t32_t
)0x00000000U)

	)

406 
	#SDIO_RESPONSE_SHORT
 
SDIO_CMD_WAITRESP_0


	)

407 
	#SDIO_RESPONSE_LONG
 
SDIO_CMD_WAITRESP


	)

409 
	#IS_SDIO_RESPONSE
(
RESPONSE
√ã(((RESPONSE√ã=Ô£ø
SDIO_RESPONSE_NO
) || \

410 ((
RESPONSE
√ã=Ô£ø
SDIO_RESPONSE_SHORT
) || \

411 ((
RESPONSE
√ã=Ô£ø
SDIO_RESPONSE_LONG
))

	)

419 
	#SDIO_WAIT_NO
 ((
u√∂t32_t
)0x00000000U)

	)

420 
	#SDIO_WAIT_IT
 
SDIO_CMD_WAITINT


	)

421 
	#SDIO_WAIT_PEND
 
SDIO_CMD_WAITPEND


	)

423 
	#IS_SDIO_WAIT
(
WAIT
√ã(((WAIT√ã=Ô£ø
SDIO_WAIT_NO
) || \

424 ((
WAIT
√ã=Ô£ø
SDIO_WAIT_IT
) || \

425 ((
WAIT
√ã=Ô£ø
SDIO_WAIT_PEND
))

	)

433 
	#SDIO_CPSM_DISABLE
 ((
u√∂t32_t
)0x00000000U)

	)

434 
	#SDIO_CPSM_ENABLE
 
SDIO_CMD_CPSMEN


	)

436 
	#IS_SDIO_CPSM
(
CPSM
√ã(((CPSM√ã=Ô£ø
SDIO_CPSM_DISABLE
) || \

437 ((
CPSM
√ã=Ô£ø
SDIO_CPSM_ENABLE
))

	)

445 
	#SDIO_RESP1
 ((
u√∂t32_t
)0x00000000U)

	)

446 
	#SDIO_RESP2
 ((
u√∂t32_t
)0x00000004U)

	)

447 
	#SDIO_RESP3
 ((
u√∂t32_t
)0x00000008U)

	)

448 
	#SDIO_RESP4
 ((
u√∂t32_t
)0x0000000CU)

	)

450 
	#IS_SDIO_RESP
(
RESP
√ã(((RESP√ã=Ô£ø
SDIO_RESP1
) || \

451 ((
RESP
√ã=Ô£ø
SDIO_RESP2
) || \

452 ((
RESP
√ã=Ô£ø
SDIO_RESP3
) || \

453 ((
RESP
√ã=Ô£ø
SDIO_RESP4
))

	)

461 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
√ã((LENGTH√ã<Ô£ø0x01FFFFFFU)

	)

469 
	#SDIO_DATABLOCK_SIZE_1B
 ((
u√∂t32_t
)0x00000000U)

	)

470 
	#SDIO_DATABLOCK_SIZE_2B
 
SDIO_DCTRL_DBLOCKSIZE_0


	)

471 
	#SDIO_DATABLOCK_SIZE_4B
 
SDIO_DCTRL_DBLOCKSIZE_1


	)

472 
	#SDIO_DATABLOCK_SIZE_8B
 (
SDIO_DCTRL_DBLOCKSIZE_0
|
SDIO_DCTRL_DBLOCKSIZE_1
)

	)

473 
	#SDIO_DATABLOCK_SIZE_16B
 
SDIO_DCTRL_DBLOCKSIZE_2


	)

474 
	#SDIO_DATABLOCK_SIZE_32B
 (
SDIO_DCTRL_DBLOCKSIZE_0
|
SDIO_DCTRL_DBLOCKSIZE_2
)

	)

475 
	#SDIO_DATABLOCK_SIZE_64B
 (
SDIO_DCTRL_DBLOCKSIZE_1
|
SDIO_DCTRL_DBLOCKSIZE_2
)

	)

476 
	#SDIO_DATABLOCK_SIZE_128B
 (
SDIO_DCTRL_DBLOCKSIZE_0
|
SDIO_DCTRL_DBLOCKSIZE_1
|
SDIO_DCTRL_DBLOCKSIZE_2
)

	)

477 
	#SDIO_DATABLOCK_SIZE_256B
 
SDIO_DCTRL_DBLOCKSIZE_3


	)

478 
	#SDIO_DATABLOCK_SIZE_512B
 (
SDIO_DCTRL_DBLOCKSIZE_0
|
SDIO_DCTRL_DBLOCKSIZE_3
)

	)

479 
	#SDIO_DATABLOCK_SIZE_1024B
 (
SDIO_DCTRL_DBLOCKSIZE_1
|
SDIO_DCTRL_DBLOCKSIZE_3
)

	)

480 
	#SDIO_DATABLOCK_SIZE_2048B
 (
SDIO_DCTRL_DBLOCKSIZE_0
|
SDIO_DCTRL_DBLOCKSIZE_1
|
SDIO_DCTRL_DBLOCKSIZE_3
)

	)

481 
	#SDIO_DATABLOCK_SIZE_4096B
 (
SDIO_DCTRL_DBLOCKSIZE_2
|
SDIO_DCTRL_DBLOCKSIZE_3
)

	)

482 
	#SDIO_DATABLOCK_SIZE_8192B
 (
SDIO_DCTRL_DBLOCKSIZE_0
|
SDIO_DCTRL_DBLOCKSIZE_2
|
SDIO_DCTRL_DBLOCKSIZE_3
)

	)

483 
	#SDIO_DATABLOCK_SIZE_16384B
 (
SDIO_DCTRL_DBLOCKSIZE_1
|
SDIO_DCTRL_DBLOCKSIZE_2
|
SDIO_DCTRL_DBLOCKSIZE_3
)

	)

485 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
√ã(((SIZE√ã=Ô£ø
SDIO_DATABLOCK_SIZE_1B
) || \

486 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_2B
) || \

487 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_4B
) || \

488 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_8B
) || \

489 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_16B
) || \

490 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_32B
) || \

491 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_64B
) || \

492 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_128B
) || \

493 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_256B
) || \

494 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_512B
) || \

495 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_1024B
) || \

496 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_2048B
) || \

497 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_4096B
) || \

498 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_8192B
) || \

499 ((
SIZE
√ã=Ô£ø
SDIO_DATABLOCK_SIZE_16384B
))

	)

507 
	#SDIO_TRANSFER_DIR_TO_CARD
 ((
u√∂t32_t
)0x00000000U)

	)

508 
	#SDIO_TRANSFER_DIR_TO_SDIO
 
SDIO_DCTRL_DTDIR


	)

510 
	#IS_SDIO_TRANSFER_DIR
(
DIR
√ã(((DIR√ã=Ô£ø
SDIO_TRANSFER_DIR_TO_CARD
) || \

511 ((
DIR
√ã=Ô£ø
SDIO_TRANSFER_DIR_TO_SDIO
))

	)

519 
	#SDIO_TRANSFER_MODE_BLOCK
 ((
u√∂t32_t
)0x00000000U)

	)

520 
	#SDIO_TRANSFER_MODE_STREAM
 
SDIO_DCTRL_DTMODE


	)

522 
	#IS_SDIO_TRANSFER_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
SDIO_TRANSFER_MODE_BLOCK
) || \

523 ((
MODE
√ã=Ô£ø
SDIO_TRANSFER_MODE_STREAM
))

	)

531 
	#SDIO_DPSM_DISABLE
 ((
u√∂t32_t
)0x00000000U)

	)

532 
	#SDIO_DPSM_ENABLE
 
SDIO_DCTRL_DTEN


	)

534 
	#IS_SDIO_DPSM
(
DPSM
√ã(((DPSM√ã=Ô£ø
SDIO_DPSM_DISABLE
) ||\

535 ((
DPSM
√ã=Ô£ø
SDIO_DPSM_ENABLE
))

	)

543 
	#SDIO_READ_WAIT_MODE_DATA2
 ((
u√∂t32_t
)0x00000000U)

	)

544 
	#SDIO_READ_WAIT_MODE_CLK
 (
SDIO_DCTRL_RWMOD
)

	)

546 
	#IS_SDIO_READWAIT_MODE
(
MODE
√ã(((MODE√ã=Ô£ø
SDIO_READ_WAIT_MODE_CLK
) || \

547 ((
MODE
√ã=Ô£ø
SDIO_READ_WAIT_MODE_DATA2
))

	)

555 
	#SDIO_IT_CCRCFAIL
 
SDIO_MASK_CCRCFAILIE


	)

556 
	#SDIO_IT_DCRCFAIL
 
SDIO_MASK_DCRCFAILIE


	)

557 
	#SDIO_IT_CTIMEOUT
 
SDIO_MASK_CTIMEOUTIE


	)

558 
	#SDIO_IT_DTIMEOUT
 
SDIO_MASK_DTIMEOUTIE


	)

559 
	#SDIO_IT_TXUNDERR
 
SDIO_MASK_TXUNDERRIE


	)

560 
	#SDIO_IT_RXOVERR
 
SDIO_MASK_RXOVERRIE


	)

561 
	#SDIO_IT_CMDREND
 
SDIO_MASK_CMDRENDIE


	)

562 
	#SDIO_IT_CMDSENT
 
SDIO_MASK_CMDSENTIE


	)

563 
	#SDIO_IT_DATAEND
 
SDIO_MASK_DATAENDIE


	)

564 
	#SDIO_IT_STBITERR
 
SDIO_MASK_STBITERRIE


	)

565 
	#SDIO_IT_DBCKEND
 
SDIO_MASK_DBCKENDIE


	)

566 
	#SDIO_IT_CMDACT
 
SDIO_MASK_CMDACTIE


	)

567 
	#SDIO_IT_TXACT
 
SDIO_MASK_TXACTIE


	)

568 
	#SDIO_IT_RXACT
 
SDIO_MASK_RXACTIE


	)

569 
	#SDIO_IT_TXFIFOHE
 
SDIO_MASK_TXFIFOHEIE


	)

570 
	#SDIO_IT_RXFIFOHF
 
SDIO_MASK_RXFIFOHFIE


	)

571 
	#SDIO_IT_TXFIFOF
 
SDIO_MASK_TXFIFOFIE


	)

572 
	#SDIO_IT_RXFIFOF
 
SDIO_MASK_RXFIFOFIE


	)

573 
	#SDIO_IT_TXFIFOE
 
SDIO_MASK_TXFIFOEIE


	)

574 
	#SDIO_IT_RXFIFOE
 
SDIO_MASK_RXFIFOEIE


	)

575 
	#SDIO_IT_TXDAVL
 
SDIO_MASK_TXDAVLIE


	)

576 
	#SDIO_IT_RXDAVL
 
SDIO_MASK_RXDAVLIE


	)

577 
	#SDIO_IT_SDIOIT
 
SDIO_MASK_SDIOITIE


	)

578 
	#SDIO_IT_CEATAEND
 
SDIO_MASK_CEATAENDIE


	)

586 
	#SDIO_FLAG_CCRCFAIL
 
SDIO_STA_CCRCFAIL


	)

587 
	#SDIO_FLAG_DCRCFAIL
 
SDIO_STA_DCRCFAIL


	)

588 
	#SDIO_FLAG_CTIMEOUT
 
SDIO_STA_CTIMEOUT


	)

589 
	#SDIO_FLAG_DTIMEOUT
 
SDIO_STA_DTIMEOUT


	)

590 
	#SDIO_FLAG_TXUNDERR
 
SDIO_STA_TXUNDERR


	)

591 
	#SDIO_FLAG_RXOVERR
 
SDIO_STA_RXOVERR


	)

592 
	#SDIO_FLAG_CMDREND
 
SDIO_STA_CMDREND


	)

593 
	#SDIO_FLAG_CMDSENT
 
SDIO_STA_CMDSENT


	)

594 
	#SDIO_FLAG_DATAEND
 
SDIO_STA_DATAEND


	)

595 
	#SDIO_FLAG_STBITERR
 
SDIO_STA_STBITERR


	)

596 
	#SDIO_FLAG_DBCKEND
 
SDIO_STA_DBCKEND


	)

597 
	#SDIO_FLAG_CMDACT
 
SDIO_STA_CMDACT


	)

598 
	#SDIO_FLAG_TXACT
 
SDIO_STA_TXACT


	)

599 
	#SDIO_FLAG_RXACT
 
SDIO_STA_RXACT


	)

600 
	#SDIO_FLAG_TXFIFOHE
 
SDIO_STA_TXFIFOHE


	)

601 
	#SDIO_FLAG_RXFIFOHF
 
SDIO_STA_RXFIFOHF


	)

602 
	#SDIO_FLAG_TXFIFOF
 
SDIO_STA_TXFIFOF


	)

603 
	#SDIO_FLAG_RXFIFOF
 
SDIO_STA_RXFIFOF


	)

604 
	#SDIO_FLAG_TXFIFOE
 
SDIO_STA_TXFIFOE


	)

605 
	#SDIO_FLAG_RXFIFOE
 
SDIO_STA_RXFIFOE


	)

606 
	#SDIO_FLAG_TXDAVL
 
SDIO_STA_TXDAVL


	)

607 
	#SDIO_FLAG_RXDAVL
 
SDIO_STA_RXDAVL


	)

608 
	#SDIO_FLAG_SDIOIT
 
SDIO_STA_SDIOIT


	)

609 
	#SDIO_FLAG_CEATAEND
 
SDIO_STA_CEATAEND


	)

610 
	#SDIO_STATIC_FLAGS
 ((
u√∂t32_t
)(
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_CTIMEOUT
 |\

611 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_RXOVERR
 |\

612 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CMDSENT
 | 
SDIO_FLAG_DATAEND
 |\

613 
SDIO_FLAG_DBCKEND
 | 
SDIO_FLAG_SDIOIT
))

	)

615 
	#SDIO_STATIC_CMD_FLAGS
 ((
u√∂t32_t
)(
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CTIMEOUT
 | 
SDIO_FLAG_CMDREND
 |\

616 
SDIO_FLAG_CMDSENT
))

	)

618 
	#SDIO_STATIC_DATA_FLAGS
 ((
u√∂t32_t
)(
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_TXUNDERR
 |\

619 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_DBCKEND
))

	)

637 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

641 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04U)

	)

642 
	#CLKEN_BITNUMBER
 0x08U

	)

643 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32U√ã+ (
CLKEN_BITNUMBER
 * 4U))

	)

647 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0CU)

	)

648 
	#SDIOSUSPEND_BITNUMBER
 0x0BU

	)

649 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32U√ã+ (
SDIOSUSPEND_BITNUMBER
 * 4U))

	)

652 
	#ENCMDCOMPL_BITNUMBER
 0x0CU

	)

653 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32U√ã+ (
ENCMDCOMPL_BITNUMBER
 * 4U))

	)

656 
	#NIEN_BITNUMBER
 0x0DU

	)

657 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32U√ã+ (
NIEN_BITNUMBER
 * 4U))

	)

660 
	#ATACMD_BITNUMBER
 0x0EU

	)

661 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32U√ã+ (
ATACMD_BITNUMBER
 * 4U))

	)

665 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2CU)

	)

666 
	#DMAEN_BITNUMBER
 0x03U

	)

667 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32U√ã+ (
DMAEN_BITNUMBER
 * 4U))

	)

670 
	#RWSTART_BITNUMBER
 0x08U

	)

671 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32U√ã+ (
RWSTART_BITNUMBER
 * 4U))

	)

674 
	#RWSTOP_BITNUMBER
 0x09U

	)

675 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32U√ã+ (
RWSTOP_BITNUMBER
 * 4U))

	)

678 
	#RWMOD_BITNUMBER
 0x0AU

	)

679 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32U√ã+ (
RWMOD_BITNUMBER
 * 4U))

	)

682 
	#SDIOEN_BITNUMBER
 0x0BU

	)

683 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32U√ã+ (
SDIOEN_BITNUMBER
 * 4U))

	)

695 
	#CLKCR_CLEAR_MASK
 ((
u√∂t32_t
)(
SDIO_CLKCR_CLKDIV
 | 
SDIO_CLKCR_PWRSAV
 |\

696 
SDIO_CLKCR_BYPASS
 | 
SDIO_CLKCR_WIDBUS
 |\

697 
SDIO_CLKCR_NEGEDGE
 | 
SDIO_CLKCR_HWFC_EN
))

	)

701 
	#DCTRL_CLEAR_MASK
 ((
u√∂t32_t
)(
SDIO_DCTRL_DTEN
 | 
SDIO_DCTRL_DTDIR
 |\

702 
SDIO_DCTRL_DTMODE
 | 
SDIO_DCTRL_DBLOCKSIZE
))

	)

706 
	#CMD_CLEAR_MASK
 ((
u√∂t32_t
)(
SDIO_CMD_CMDINDEX
 | 
SDIO_CMD_WAITRESP
 |\

707 
SDIO_CMD_WAITINT
 | 
SDIO_CMD_WAITPEND
 |\

708 
SDIO_CMD_CPSMEN
 | 
SDIO_CMD_SDIOSUSPEND
))

	)

711 
	#SDIO_INIT_CLK_DIV
 ((
u√∂t8_t
)0x76√ã

	)

714 
	#SDIO_TRANSFER_CLK_DIV
 ((
u√∂t8_t
)0x4)

	)

729 
	#__SDIO_ENABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *)
CLKCR_CLKEN_BB
 = 
ENABLE
)

	)

736 
	#__SDIO_DISABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *)
CLKCR_CLKEN_BB
 = 
DISABLE
)

	)

743 
	#__SDIO_DMA_ENABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *)
DCTRL_DMAEN_BB
 = 
ENABLE
)

	)

750 
	#__SDIO_DMA_DISABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *)
DCTRL_DMAEN_BB
 = 
DISABLE
)

	)

781 
	#__SDIO_ENABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
MASK
 |Ô£ø(__INTERRUPT__))

	)

812 
	#__SDIO_DISABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
MASK
 &Ô£ø~(__INTERRUPT__))

	)

843 
	#__SDIO_GET_FLAG
(
__INSTANCE__
, 
__FLAG__
√ã(((__INSTANCE__)->
STA
 &(__FLAG__)√ã!Ô£ø0U)

	)

864 
	#__SDIO_CLEAR_FLAG
(
__INSTANCE__
, 
__FLAG__
√ã((__INSTANCE__)->
ICR
 = (__FLAG__))

	)

895 
	#__SDIO_GET_IT
 (
__INSTANCE__
, 
__INTERRUPT__
√ã(((__INSTANCE__)->
STA
 &(__INTERRUPT__)√ã=Ô£ø(__INTERRUPT__))

	)

914 
	#__SDIO_CLEAR_IT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
ICR
 = (__INTERRUPT__))

	)

921 
	#__SDIO_START_READWAIT_ENABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
DCTRL_RWSTART_BB
 = 
ENABLE
)

	)

928 
	#__SDIO_START_READWAIT_DISABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
DCTRL_RWSTART_BB
 = 
DISABLE
)

	)

935 
	#__SDIO_STOP_READWAIT_ENABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
DCTRL_RWSTOP_BB
 = 
ENABLE
)

	)

942 
	#__SDIO_STOP_READWAIT_DISABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
DCTRL_RWSTOP_BB
 = 
DISABLE
)

	)

949 
	#__SDIO_OPERATION_ENABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
DCTRL_SDIOEN_BB
 = 
ENABLE
)

	)

956 
	#__SDIO_OPERATION_DISABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
DCTRL_SDIOEN_BB
 = 
DISABLE
)

	)

963 
	#__SDIO_SUSPEND_CMD_ENABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_SDIOSUSPEND_BB
 = 
ENABLE
)

	)

970 
	#__SDIO_SUSPEND_CMD_DISABLE
(
__INSTANCE__
√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_SDIOSUSPEND_BB
 = 
DISABLE
)

	)

976 
	#__SDIO_CEATA_CMD_COMPLETION_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_ENCMDCOMPL_BB
 = 
ENABLE
)

	)

982 
	#__SDIO_CEATA_CMD_COMPLETION_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_ENCMDCOMPL_BB
 = 
DISABLE
)

	)

988 
	#__SDIO_CEATA_ENABLE_IT
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_NIEN_BB
 = (u√∂t32_t)0U)

	)

994 
	#__SDIO_CEATA_DISABLE_IT
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_NIEN_BB
 = (u√∂t32_t)1U)

	)

1000 
	#__SDIO_CEATA_SENDCMD_ENABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_ATACMD_BB
 = 
ENABLE
)

	)

1006 
	#__SDIO_CEATA_SENDCMD_DISABLE
(√ã(*(
__IO
 
u√∂t32_t
 *√ã
CMD_ATACMD_BB
 = 
DISABLE
)

	)

1025 
HAL_S√®tusTy‚â•Def
 
SDIO_In√¥
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
SDIO_In√¥Ty‚â•Def
 
In√¥
);

1034 
u√∂t32_t
 
SDIO_R√≥dFIFO
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1035 
HAL_S√®tusTy‚â•Def
 
SDIO_Wr√¥eFIFO
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 *
pWr√¥eD¬©a
);

1044 
HAL_S√®tusTy‚â•Def
 
SDIO_Pow√ÆS√®√£_ON
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1045 
HAL_S√®tusTy‚â•Def
 
SDIO_Pow√ÆS√®√£_OFF
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1046 
u√∂t32_t
 
SDIO_G√´Pow√ÆS√®√£
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1049 
HAL_S√®tusTy‚â•Def
 
SDIO_S√≠dComm‚Ñ¢d
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
SDIO_CmdIn√¥Ty‚â•Def
 *
Comm‚Ñ¢d
);

1050 
u√∂t8_t
 
SDIO_G√´Comm‚Ñ¢dRe‚Ä¢‚ÅÑ¬£
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1051 
u√∂t32_t
 
SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Re‚Ä¢‚ÅÑ¬£
);

1054 
HAL_S√®tusTy‚â•Def
 
SDIO_C‚ÅÑfigD¬©a
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
SDIO_D¬©aIn√¥Ty‚â•Def
* 
D¬©a
);

1055 
u√∂t32_t
 
SDIO_G√´D¬©aCou¬°√Æ
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1056 
u√∂t32_t
 
SDIO_G√´FIFOCou¬°
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1059 
HAL_S√®tusTy‚â•Def
 
SDIO_S√´SDMMCR√≥dWa√¥Mode
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
SDIO_R√≥dWa√¥Mode
);

1062 
u√∂t32_t
 
SDMMC_CmdBlockL√≠gth
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
BlockSize
);

1063 
u√∂t32_t
 
SDMMC_CmdR√≥dS√∂g√ÄBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
R√≥dAdd
);

1064 
u√∂t32_t
 
SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
R√≥dAdd
);

1065 
u√∂t32_t
 
SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Wr√¥eAdd
);

1066 
u√∂t32_t
 
SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Wr√¥eAdd
);

1067 
u√∂t32_t
 
SDMMC_CmdE√∏¬£S√®œÄAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
S√®œÄAdd
);

1068 
u√∂t32_t
 
SDMMC_CmdSDE√∏¬£S√®œÄAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
S√®œÄAdd
);

1069 
u√∂t32_t
 
SDMMC_CmdE√∏¬£EndAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
EndAdd
);

1070 
u√∂t32_t
 
SDMMC_CmdSDE√∏¬£EndAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
EndAdd
);

1071 
u√∂t32_t
 
SDMMC_CmdE√∏¬£
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1072 
u√∂t32_t
 
SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1073 
u√∂t32_t
 
SDMMC_CmdS√±De¬£l
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t64_t
 
Addr
);

1074 
u√∂t32_t
 
SDMMC_CmdGoId√ÄS√®√£
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1075 
u√∂t32_t
 
SDMMC_CmdO‚â•rC‚ÅÑd
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1076 
u√∂t32_t
 
SDMMC_CmdA¬µComm‚Ñ¢d
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Argum√≠t
);

1077 
u√∂t32_t
 
SDMMC_CmdA¬µO‚â•rComm‚Ñ¢d
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Argum√≠t
);

1078 
u√∂t32_t
 
SDMMC_CmdBusWidth
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
BusWidth
);

1079 
u√∂t32_t
 
SDMMC_CmdS√≠dSCR
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1080 
u√∂t32_t
 
SDMMC_CmdS√≠dCID
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1081 
u√∂t32_t
 
SDMMC_CmdS√≠dCSD
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Argum√≠t
);

1082 
u√∂t32_t
 
SDMMC_CmdS√´R√±Add
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t16_t
 *
pRCA
);

1083 
u√∂t32_t
 
SDMMC_CmdS√≠dS√®tus
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Argum√≠t
);

1084 
u√∂t32_t
 
SDMMC_CmdS√®tusRegi¬∞√Æ
(
SDIO_Ty‚â•Def
 *
SDIOx
);

1085 
u√∂t32_t
 
SDMMC_CmdOpC‚ÅÑd√¥i‚ÅÑ
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Argum√≠t
);

1086 
u√∂t32_t
 
SDMMC_CmdSw√¥ch
(
SDIO_Ty‚â•Def
 *
SDIOx
, u√∂t32_√†
Argum√≠t
);

1106 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_spi.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_SPI_H


22 
	#STM32F1xx_LL_SPI_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
SPI1
√ã|| def√∂ed (
SPI2
√ã|| def√∂ed (
SPI3
)

46 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

56 
u√∂t32_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
;

61 
u√∂t32_t
 
Mode
;

66 
u√∂t32_t
 
D¬©aWidth
;

71 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
;

76 
u√∂t32_t
 
ClockPha¬£
;

81 
u√∂t32_t
 
NSS
;

86 
u√∂t32_t
 
BaudR¬©e
;

92 
u√∂t32_t
 
B√¥Ord√Æ
;

97 
u√∂t32_t
 
CRCC√Ücu≈ìti‚ÅÑ
;

102 
u√∂t32_t
 
CRCPÔ¨Åy
;

107 } 
	tLL_SPI_In√¥Ty‚â•Def
;

123 
	#LL_SPI_SR_RXNE
 
SPI_SR_RXNE


	)

124 
	#LL_SPI_SR_TXE
 
SPI_SR_TXE


	)

125 
	#LL_SPI_SR_BSY
 
SPI_SR_BSY


	)

126 
	#LL_SPI_SR_CRCERR
 
SPI_SR_CRCERR


	)

127 
	#LL_SPI_SR_MODF
 
SPI_SR_MODF


	)

128 
	#LL_SPI_SR_OVR
 
SPI_SR_OVR


	)

129 
	#LL_SPI_SR_FRE
 
SPI_SR_FRE


	)

138 
	#LL_SPI_CR2_RXNEIE
 
SPI_CR2_RXNEIE


	)

139 
	#LL_SPI_CR2_TXEIE
 
SPI_CR2_TXEIE


	)

140 
	#LL_SPI_CR2_ERRIE
 
SPI_CR2_ERRIE


	)

148 
	#LL_SPI_MODE_MASTER
 (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
√ã

	)

149 
	#LL_SPI_MODE_SLAVE
 0x00000000U

	)

158 
	#LL_SPI_PHASE_1EDGE
 0x00000000U

	)

159 
	#LL_SPI_PHASE_2EDGE
 (
SPI_CR1_CPHA
√ã

	)

167 
	#LL_SPI_POLARITY_LOW
 0x00000000U

	)

168 
	#LL_SPI_POLARITY_HIGH
 (
SPI_CR1_CPOL
√ã

	)

176 
	#LL_SPI_BAUDRATEPRESCALER_DIV2
 0x00000000U

	)

177 
	#LL_SPI_BAUDRATEPRESCALER_DIV4
 (
SPI_CR1_BR_0
√ã

	)

178 
	#LL_SPI_BAUDRATEPRESCALER_DIV8
 (
SPI_CR1_BR_1
√ã

	)

179 
	#LL_SPI_BAUDRATEPRESCALER_DIV16
 (
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
√ã

	)

180 
	#LL_SPI_BAUDRATEPRESCALER_DIV32
 (
SPI_CR1_BR_2
√ã

	)

181 
	#LL_SPI_BAUDRATEPRESCALER_DIV64
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_0
√ã

	)

182 
	#LL_SPI_BAUDRATEPRESCALER_DIV128
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
√ã

	)

183 
	#LL_SPI_BAUDRATEPRESCALER_DIV256
 (
SPI_CR1_BR_2
 | 
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
√ã

	)

191 
	#LL_SPI_LSB_FIRST
 (
SPI_CR1_LSBFIRST
√ã

	)

192 
	#LL_SPI_MSB_FIRST
 0x00000000U

	)

200 
	#LL_SPI_FULL_DUPLEX
 0x00000000U

	)

201 
	#LL_SPI_SIMPLEX_RX
 (
SPI_CR1_RXONLY
√ã

	)

202 
	#LL_SPI_HALF_DUPLEX_RX
 (
SPI_CR1_BIDIMODE
√ã

	)

203 
	#LL_SPI_HALF_DUPLEX_TX
 (
SPI_CR1_BIDIMODE
 | 
SPI_CR1_BIDIOE
√ã

	)

211 
	#LL_SPI_NSS_SOFT
 (
SPI_CR1_SSM
√ã

	)

212 
	#LL_SPI_NSS_HARD_INPUT
 0x00000000U

	)

213 
	#LL_SPI_NSS_HARD_OUTPUT
 (((
u√∂t32_t
)
SPI_CR2_SSOE
 << 16U)√ã

	)

221 
	#LL_SPI_DATAWIDTH_8BIT
 0x00000000U

	)

222 
	#LL_SPI_DATAWIDTH_16BIT
 (
SPI_CR1_DFF
√ã

	)

226 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

231 
	#LL_SPI_CRCCALCULATION_DISABLE
 0x00000000U

	)

232 
	#LL_SPI_CRCCALCULATION_ENABLE
 (
SPI_CR1_CRCEN
√ã

	)

258 
	#LL_SPI_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

266 
	#LL_SPI_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

290 
__STATIC_INLINE
 
LL_SPI_E¬´b√Ä
(
SPI_Ty‚â•Def
 *
SPIx
)

292 
SET_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
);

302 
__STATIC_INLINE
 
LL_SPI_Di√üb√Ä
(
SPI_Ty‚â•Def
 *
SPIx
)

304 
CLEAR_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
);

313 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√Äd
(
SPI_Ty‚â•Def
 *
SPIx
)

315  ((
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
) == (SPI_CR1_SPE)) ? 1UL : 0UL);

329 
__STATIC_INLINE
 
LL_SPI_S√´Mode
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
Mode
)

331 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
, 
Mode
);

343 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´Mode
(
SPI_Ty‚â•Def
 *
SPIx
)

345  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
));

360 
__STATIC_INLINE
 
LL_SPI_S√´ClockPha¬£
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
ClockPha¬£
)

362 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_CPHA
, 
ClockPha¬£
);

373 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´ClockPha¬£
(
SPI_Ty‚â•Def
 *
SPIx
)

375  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CPHA
));

389 
__STATIC_INLINE
 
LL_SPI_S√´ClockPÔ¨Å¬®√¥y
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
)

391 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_CPOL
, 
ClockPÔ¨Å¬®√¥y
);

402 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´ClockPÔ¨Å¬®√¥y
(
SPI_Ty‚â•Def
 *
SPIx
)

404  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CPOL
));

423 
__STATIC_INLINE
 
LL_SPI_S√´BaudR¬©eP¬™sÀá√Är
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
BaudR¬©e
)

425 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_BR
, 
BaudR¬©e
);

442 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´BaudR¬©eP¬™sÀá√Är
(
SPI_Ty‚â•Def
 *
SPIx
)

444  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_BR
));

457 
__STATIC_INLINE
 
LL_SPI_S√´T√∏ns‚ÄûrB√¥Ord√Æ
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
B√¥Ord√Æ
)

459 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_LSBFIRST
, 
B√¥Ord√Æ
);

470 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´T√∏ns‚ÄûrB√¥Ord√Æ
(
SPI_Ty‚â•Def
 *
SPIx
)

472  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_LSBFIRST
));

490 
__STATIC_INLINE
 
LL_SPI_S√´T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
)

492 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_RXONLY
 | 
SPI_CR1_BIDIMODE
 | 
SPI_CR1_BIDIOE
, 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
);

507 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
SPI_Ty‚â•Def
 *
SPIx
)

509  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_RXONLY
 | 
SPI_CR1_BIDIMODE
 | 
SPI_CR1_BIDIOE
));

521 
__STATIC_INLINE
 
LL_SPI_S√´D¬©aWidth
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
D¬©aWidth
)

523 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_DFF
, 
D¬©aWidth
);

534 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´D¬©aWidth
(
SPI_Ty‚â•Def
 *
SPIx
)

536  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_DFF
));

554 
__STATIC_INLINE
 
LL_SPI_E¬´b√ÄCRC
(
SPI_Ty‚â•Def
 *
SPIx
)

556 
SET_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCEN
);

566 
__STATIC_INLINE
 
LL_SPI_Di√üb√ÄCRC
(
SPI_Ty‚â•Def
 *
SPIx
)

568 
CLEAR_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCEN
);

578 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√ÄdCRC
(
SPI_Ty‚â•Def
 *
SPIx
)

580  ((
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCEN
) == (SPI_CR1_CRCEN)) ? 1UL : 0UL);

590 
__STATIC_INLINE
 
LL_SPI_S√´CRCNext
(
SPI_Ty‚â•Def
 *
SPIx
)

592 
SET_BIT
(
SPIx
->
CR1
, 
SPI_CR1_CRCNEXT
);

602 
__STATIC_INLINE
 
LL_SPI_S√´CRCPÔ¨Åynom√ºl
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
CRCPÔ¨Åy
)

604 
WRITE_REG
(
SPIx
->
CRCPR
, (
u√∂t16_t
)
CRCPÔ¨Åy
);

613 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´CRCPÔ¨Åynom√ºl
(
SPI_Ty‚â•Def
 *
SPIx
)

615  (
u√∂t32_t
)(
READ_REG
(
SPIx
->
CRCPR
));

624 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´RxCRC
(
SPI_Ty‚â•Def
 *
SPIx
)

626  (
u√∂t32_t
)(
READ_REG
(
SPIx
->
RXCRCR
));

635 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´TxCRC
(
SPI_Ty‚â•Def
 *
SPIx
)

637  (
u√∂t32_t
)(
READ_REG
(
SPIx
->
TXCRCR
));

660 
__STATIC_INLINE
 
LL_SPI_S√´NSSMode
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
NSS
)

662 
MODIFY_REG
(
SPIx
->
CR1
, 
SPI_CR1_SSM
, 
NSS
);

663 
MODIFY_REG
(
SPIx
->
CR2
, 
SPI_CR2_SSOE
, ((
u√∂t32_t
)(
NSS
 >> 16U)));

676 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_G√´NSSMode
(
SPI_Ty‚â•Def
 *
SPIx
)

678 
u√∂t32_t
 
Ssm
 = (
READ_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SSM
));

679 
u√∂t32_t
 
Ss‚Ç¨
 = (
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_SSOE
) << 16U);

680  (
Ssm
 | 
Ss‚Ç¨
);

697 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsAÀòiveF≈ìg_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

699  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_RXNE
) == (SPI_SR_RXNE)) ? 1UL : 0UL);

708 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsAÀòiveF≈ìg_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

710  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_TXE
) == (SPI_SR_TXE)) ? 1UL : 0UL);

719 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsAÀòiveF≈ìg_CRCERR
(
SPI_Ty‚â•Def
 *
SPIx
)

721  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_CRCERR
) == (SPI_SR_CRCERR)) ? 1UL : 0UL);

730 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsAÀòiveF≈ìg_MODF
(
SPI_Ty‚â•Def
 *
SPIx
)

732  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_MODF
) == (SPI_SR_MODF)) ? 1UL : 0UL);

741 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsAÀòiveF≈ìg_OVR
(
SPI_Ty‚â•Def
 *
SPIx
)

743  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_OVR
) == (SPI_SR_OVR)) ? 1UL : 0UL);

759 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsAÀòiveF≈ìg_BSY
(
SPI_Ty‚â•Def
 *
SPIx
)

761  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_BSY
) == (SPI_SR_BSY)) ? 1UL : 0UL);

771 
__STATIC_INLINE
 
LL_SPI_C√Ä¬®F≈ìg_CRCERR
(
SPI_Ty‚â•Def
 *
SPIx
)

773 
CLEAR_BIT
(
SPIx
->
SR
, 
SPI_SR_CRCERR
);

784 
__STATIC_INLINE
 
LL_SPI_C√Ä¬®F≈ìg_MODF
(
SPI_Ty‚â•Def
 *
SPIx
)

786 
__IO
 
u√∂t32_t
 
tm¬•eg_¬ß
;

787 
tm¬•eg_¬ß
 = 
SPIx
->
SR
;

788 (√ã
tm¬•eg_¬ß
;

789 
CLEAR_BIT
(
SPIx
->
CR1
, 
SPI_CR1_SPE
);

800 
__STATIC_INLINE
 
LL_SPI_C√Ä¬®F≈ìg_OVR
(
SPI_Ty‚â•Def
 *
SPIx
)

802 
__IO
 
u√∂t32_t
 
tm¬•eg
;

803 
tm¬•eg
 = 
SPIx
->
DR
;

804 (√ã
tm¬•eg
;

805 
tm¬•eg
 = 
SPIx
->
SR
;

806 (√ã
tm¬•eg
;

816 
__STATIC_INLINE
 
LL_SPI_C√Ä¬®F≈ìg_FRE
(
SPI_Ty‚â•Def
 *
SPIx
)

818 
__IO
 
u√∂t32_t
 
tm¬•eg
;

819 
tm¬•eg
 = 
SPIx
->
SR
;

820 (√ã
tm¬•eg
;

838 
__STATIC_INLINE
 
LL_SPI_E¬´b√ÄIT_ERR
(
SPI_Ty‚â•Def
 *
SPIx
)

840 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_ERRIE
);

849 
__STATIC_INLINE
 
LL_SPI_E¬´b√ÄIT_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

851 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXNEIE
);

860 
__STATIC_INLINE
 
LL_SPI_E¬´b√ÄIT_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

862 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXEIE
);

872 
__STATIC_INLINE
 
LL_SPI_Di√üb√ÄIT_ERR
(
SPI_Ty‚â•Def
 *
SPIx
)

874 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_ERRIE
);

883 
__STATIC_INLINE
 
LL_SPI_Di√üb√ÄIT_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

885 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXNEIE
);

894 
__STATIC_INLINE
 
LL_SPI_Di√üb√ÄIT_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

896 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXEIE
);

905 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√ÄdIT_ERR
(
SPI_Ty‚â•Def
 *
SPIx
)

907  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_ERRIE
) == (SPI_CR2_ERRIE)) ? 1UL : 0UL);

916 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√ÄdIT_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

918  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXNEIE
) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);

927 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√ÄdIT_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

929  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXEIE
) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);

946 
__STATIC_INLINE
 
LL_SPI_E¬´b√ÄDMAReq_RX
(
SPI_Ty‚â•Def
 *
SPIx
)

948 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXDMAEN
);

957 
__STATIC_INLINE
 
LL_SPI_Di√üb√ÄDMAReq_RX
(
SPI_Ty‚â•Def
 *
SPIx
)

959 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXDMAEN
);

968 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√ÄdDMAReq_RX
(
SPI_Ty‚â•Def
 *
SPIx
)

970  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_RXDMAEN
) == (SPI_CR2_RXDMAEN)) ? 1UL : 0UL);

979 
__STATIC_INLINE
 
LL_SPI_E¬´b√ÄDMAReq_TX
(
SPI_Ty‚â•Def
 *
SPIx
)

981 
SET_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXDMAEN
);

990 
__STATIC_INLINE
 
LL_SPI_Di√üb√ÄDMAReq_TX
(
SPI_Ty‚â•Def
 *
SPIx
)

992 
CLEAR_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXDMAEN
);

1001 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_IsE¬´b√ÄdDMAReq_TX
(
SPI_Ty‚â•Def
 *
SPIx
)

1003  ((
READ_BIT
(
SPIx
->
CR2
, 
SPI_CR2_TXDMAEN
) == (SPI_CR2_TXDMAEN)) ? 1UL : 0UL);

1012 
__STATIC_INLINE
 
u√∂t32_t
 
LL_SPI_DMA_G√´RegAddr
(
SPI_Ty‚â•Def
 *
SPIx
)

1014  (
u√∂t32_t
√ã&(
SPIx
->
DR
);

1031 
__STATIC_INLINE
 
u√∂t8_t
 
LL_SPI_ReÀöiveD¬©a8
(
SPI_Ty‚â•Def
 *
SPIx
)

1033  (
u√∂t8_t
)(
READ_REG
(
SPIx
->
DR
));

1042 
__STATIC_INLINE
 
u√∂t16_t
 
LL_SPI_ReÀöiveD¬©a16
(
SPI_Ty‚â•Def
 *
SPIx
)

1044  (
u√∂t16_t
)(
READ_REG
(
SPIx
->
DR
));

1054 
__STATIC_INLINE
 
LL_SPI_T√∏nsm√¥D¬©a8
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t8_t
 
TxD¬©a
)

1056 #i‚Ä°
def√∂ed
 (
__GNUC__
)

1057 
__IO
 
u√∂t8_t
 *
‚Ä¢idr
 = ((__IO u√∂t8_√†*)&
SPIx
->
DR
);

1058 *
‚Ä¢idr
 = 
TxD¬©a
;

1060 *((
__IO
 
u√∂t8_t
 *)&
SPIx
->
DR
√ãÔ£ø
TxD¬©a
;

1071 
__STATIC_INLINE
 
LL_SPI_T√∏nsm√¥D¬©a16
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t16_t
 
TxD¬©a
)

1073 #i‚Ä°
def√∂ed
 (
__GNUC__
)

1074 
__IO
 
u√∂t16_t
 *
‚Ä¢idr
 = ((__IO u√∂t16_√†*)&
SPIx
->
DR
);

1075 *
‚Ä¢idr
 = 
TxD¬©a
;

1077 
SPIx
->
DR
 = 
TxD¬©a
;

1084 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1089 
E¬∫‚ÄπS√®tus
 
LL_SPI_DeIn√¥
(
SPI_Ty‚â•Def
 *
SPIx
);

1090 
E¬∫‚ÄπS√®tus
 
LL_SPI_In√¥
(
SPI_Ty‚â•Def
 *
SPIx
, 
LL_SPI_In√¥Ty‚â•Def
 *
SPI_In√¥S√•uÀò
);

1091 
LL_SPI_S√•uÀòIn√¥
(
LL_SPI_In√¥Ty‚â•Def
 *
SPI_In√¥S√•uÀò
);

1105 #i‚Ä°
def√∂ed
(
SPI_I2S_SUPPORT
)

1115 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1126 
u√∂t32_t
 
Mode
;

1131 
u√∂t32_t
 
S√®nd¬®d
;

1137 
u√∂t32_t
 
D¬©aF‚Äπm¬©
;

1143 
u√∂t32_t
 
MCLKOu√ßut
;

1149 
u√∂t32_t
 
AudioF¬™q
;

1156 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
;

1161 } 
	tLL_I2S_In√¥Ty‚â•Def
;

1177 
	#LL_I2S_SR_RXNE
 
LL_SPI_SR_RXNE


	)

1178 
	#LL_I2S_SR_TXE
 
LL_SPI_SR_TXE


	)

1179 
	#LL_I2S_SR_BSY
 
LL_SPI_SR_BSY


	)

1180 
	#LL_I2S_SR_UDR
 
SPI_SR_UDR


	)

1181 
	#LL_I2S_SR_OVR
 
LL_SPI_SR_OVR


	)

1182 
	#LL_I2S_SR_FRE
 
LL_SPI_SR_FRE


	)

1191 
	#LL_I2S_CR2_RXNEIE
 
LL_SPI_CR2_RXNEIE


	)

1192 
	#LL_I2S_CR2_TXEIE
 
LL_SPI_CR2_TXEIE


	)

1193 
	#LL_I2S_CR2_ERRIE
 
LL_SPI_CR2_ERRIE


	)

1201 
	#LL_I2S_DATAFORMAT_16B
 0x00000000U

	)

1202 
	#LL_I2S_DATAFORMAT_16B_EXTENDED
 (
SPI_I2SCFGR_CHLEN
√ã

	)

1203 
	#LL_I2S_DATAFORMAT_24B
 (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_0
√ã

	)

1204 
	#LL_I2S_DATAFORMAT_32B
 (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_1
√ã

	)

1212 
	#LL_I2S_POLARITY_LOW
 0x00000000U

	)

1213 
	#LL_I2S_POLARITY_HIGH
 (
SPI_I2SCFGR_CKPOL
√ã

	)

1221 
	#LL_I2S_STANDARD_PHILIPS
 0x00000000U

	)

1222 
	#LL_I2S_STANDARD_MSB
 (
SPI_I2SCFGR_I2SSTD_0
√ã

	)

1223 
	#LL_I2S_STANDARD_LSB
 (
SPI_I2SCFGR_I2SSTD_1
√ã

	)

1224 
	#LL_I2S_STANDARD_PCM_SHORT
 (
SPI_I2SCFGR_I2SSTD_0
 | 
SPI_I2SCFGR_I2SSTD_1
√ã

	)

1225 
	#LL_I2S_STANDARD_PCM_LONG
 (
SPI_I2SCFGR_I2SSTD_0
 | 
SPI_I2SCFGR_I2SSTD_1
 | 
SPI_I2SCFGR_PCMSYNC
√ã

	)

1233 
	#LL_I2S_MODE_SLAVE_TX
 0x00000000U

	)

1234 
	#LL_I2S_MODE_SLAVE_RX
 (
SPI_I2SCFGR_I2SCFG_0
√ã

	)

1235 
	#LL_I2S_MODE_MASTER_TX
 (
SPI_I2SCFGR_I2SCFG_1
√ã

	)

1236 
	#LL_I2S_MODE_MASTER_RX
 (
SPI_I2SCFGR_I2SCFG_0
 | 
SPI_I2SCFGR_I2SCFG_1
√ã

	)

1244 
	#LL_I2S_PRESCALER_PARITY_EVEN
 0x00000000U

	)

1245 
	#LL_I2S_PRESCALER_PARITY_ODD
 (
SPI_I2SPR_ODD
 >> 8U√ã

	)

1250 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1255 
	#LL_I2S_MCLK_OUTPUT_DISABLE
 0x00000000U

	)

1256 
	#LL_I2S_MCLK_OUTPUT_ENABLE
 (
SPI_I2SPR_MCKOE
√ã

	)

1265 
	#LL_I2S_AUDIOFREQ_192K
 192000U

	)

1266 
	#LL_I2S_AUDIOFREQ_96K
 96000U

	)

1267 
	#LL_I2S_AUDIOFREQ_48K
 48000U

	)

1268 
	#LL_I2S_AUDIOFREQ_44K
 44100U

	)

1269 
	#LL_I2S_AUDIOFREQ_32K
 32000U

	)

1270 
	#LL_I2S_AUDIOFREQ_22K
 22050U

	)

1271 
	#LL_I2S_AUDIOFREQ_16K
 16000U

	)

1272 
	#LL_I2S_AUDIOFREQ_11K
 11025U

	)

1273 
	#LL_I2S_AUDIOFREQ_8K
 8000U

	)

1274 
	#LL_I2S_AUDIOFREQ_DEFAULT
 2U

	)

1300 
	#LL_I2S_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

1308 
	#LL_I2S_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

1335 
__STATIC_INLINE
 
LL_I2S_E¬´b√Ä
(
SPI_Ty‚â•Def
 *
SPIx
)

1337 
SET_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
 | 
SPI_I2SCFGR_I2SE
);

1346 
__STATIC_INLINE
 
LL_I2S_Di√üb√Ä
(
SPI_Ty‚â•Def
 *
SPIx
)

1348 
CLEAR_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
 | 
SPI_I2SCFGR_I2SE
);

1357 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√Äd
(
SPI_Ty‚â•Def
 *
SPIx
)

1359  ((
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
) == (SPI_I2SCFGR_I2SE)) ? 1UL : 0UL);

1374 
__STATIC_INLINE
 
LL_I2S_S√´D¬©aF‚Äπm¬©
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
D¬©aF‚Äπm¬©
)

1376 
MODIFY_REG
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
, 
D¬©aF‚Äπm¬©
);

1390 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_G√´D¬©aF‚Äπm¬©
(
SPI_Ty‚â•Def
 *
SPIx
)

1392  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
));

1404 
__STATIC_INLINE
 
LL_I2S_S√´ClockPÔ¨Å¬®√¥y
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
)

1406 
SET_BIT
(
SPIx
->
I2SCFGR
, 
ClockPÔ¨Å¬®√¥y
);

1417 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_G√´ClockPÔ¨Å¬®√¥y
(
SPI_Ty‚â•Def
 *
SPIx
)

1419  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_CKPOL
));

1435 
__STATIC_INLINE
 
LL_I2S_S√´S√®nd¬®d
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
S√®nd¬®d
)

1437 
MODIFY_REG
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
, 
S√®nd¬®d
);

1452 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_G√´S√®nd¬®d
(
SPI_Ty‚â•Def
 *
SPIx
)

1454  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
));

1468 
__STATIC_INLINE
 
LL_I2S_S√´T√∏ns‚ÄûrMode
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
Mode
)

1470 
MODIFY_REG
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SCFG
, 
Mode
);

1483 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_G√´T√∏ns‚ÄûrMode
(
SPI_Ty‚â•Def
 *
SPIx
)

1485  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SCFG
));

1495 
__STATIC_INLINE
 
LL_I2S_S√´P¬™sÀá√ÄrL√∂√≥r
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t8_t
 
P¬™sÀá√ÄrL√∂√≥r
)

1497 
MODIFY_REG
(
SPIx
->
I2SPR
, 
SPI_I2SPR_I2SDIV
, 
P¬™sÀá√ÄrL√∂√≥r
);

1506 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_G√´P¬™sÀá√ÄrL√∂√≥r
(
SPI_Ty‚â•Def
 *
SPIx
)

1508  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_I2SDIV
));

1520 
__STATIC_INLINE
 
LL_I2S_S√´P¬™sÀá√ÄrP¬®√¥y
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
P¬™sÀá√ÄrP¬®√¥y
)

1522 
MODIFY_REG
(
SPIx
->
I2SPR
, 
SPI_I2SPR_ODD
, 
P¬™sÀá√ÄrP¬®√¥y
 << 8U);

1533 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_G√´P¬™sÀá√ÄrP¬®√¥y
(
SPI_Ty‚â•Def
 *
SPIx
)

1535  (
u√∂t32_t
)(
READ_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_ODD
) >> 8U);

1544 
__STATIC_INLINE
 
LL_I2S_E¬´b√ÄMa¬∞√ÆClock
(
SPI_Ty‚â•Def
 *
SPIx
)

1546 
SET_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_MCKOE
);

1555 
__STATIC_INLINE
 
LL_I2S_Di√üb√ÄMa¬∞√ÆClock
(
SPI_Ty‚â•Def
 *
SPIx
)

1557 
CLEAR_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_MCKOE
);

1566 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√ÄdMa¬∞√ÆClock
(
SPI_Ty‚â•Def
 *
SPIx
)

1568  ((
READ_BIT
(
SPIx
->
I2SPR
, 
SPI_I2SPR_MCKOE
) == (SPI_I2SPR_MCKOE)) ? 1UL : 0UL);

1585 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsAÀòiveF≈ìg_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

1587  
LL_SPI_IsAÀòiveF≈ìg_RXNE
(
SPIx
);

1596 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsAÀòiveF≈ìg_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

1598  
LL_SPI_IsAÀòiveF≈ìg_TXE
(
SPIx
);

1607 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsAÀòiveF≈ìg_BSY
(
SPI_Ty‚â•Def
 *
SPIx
)

1609  
LL_SPI_IsAÀòiveF≈ìg_BSY
(
SPIx
);

1618 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsAÀòiveF≈ìg_OVR
(
SPI_Ty‚â•Def
 *
SPIx
)

1620  
LL_SPI_IsAÀòiveF≈ìg_OVR
(
SPIx
);

1629 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsAÀòiveF≈ìg_UDR
(
SPI_Ty‚â•Def
 *
SPIx
)

1631  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_UDR
) == (SPI_SR_UDR)) ? 1UL : 0UL);

1644 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsAÀòiveF≈ìg_CHSIDE
(
SPI_Ty‚â•Def
 *
SPIx
)

1646  ((
READ_BIT
(
SPIx
->
SR
, 
SPI_SR_CHSIDE
) == (SPI_SR_CHSIDE)) ? 1UL : 0UL);

1655 
__STATIC_INLINE
 
LL_I2S_C√Ä¬®F≈ìg_OVR
(
SPI_Ty‚â•Def
 *
SPIx
)

1657 
LL_SPI_C√Ä¬®F≈ìg_OVR
(
SPIx
);

1666 
__STATIC_INLINE
 
LL_I2S_C√Ä¬®F≈ìg_UDR
(
SPI_Ty‚â•Def
 *
SPIx
)

1668 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1669 
tm¬•eg
 = 
SPIx
->
SR
;

1670 ()
tm¬•eg
;

1679 
__STATIC_INLINE
 
LL_I2S_C√Ä¬®F≈ìg_FRE
(
SPI_Ty‚â•Def
 *
SPIx
)

1681 
LL_SPI_C√Ä¬®F≈ìg_FRE
(
SPIx
);

1699 
__STATIC_INLINE
 
LL_I2S_E¬´b√ÄIT_ERR
(
SPI_Ty‚â•Def
 *
SPIx
)

1701 
LL_SPI_E¬´b√ÄIT_ERR
(
SPIx
);

1710 
__STATIC_INLINE
 
LL_I2S_E¬´b√ÄIT_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

1712 
LL_SPI_E¬´b√ÄIT_RXNE
(
SPIx
);

1721 
__STATIC_INLINE
 
LL_I2S_E¬´b√ÄIT_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

1723 
LL_SPI_E¬´b√ÄIT_TXE
(
SPIx
);

1733 
__STATIC_INLINE
 
LL_I2S_Di√üb√ÄIT_ERR
(
SPI_Ty‚â•Def
 *
SPIx
)

1735 
LL_SPI_Di√üb√ÄIT_ERR
(
SPIx
);

1744 
__STATIC_INLINE
 
LL_I2S_Di√üb√ÄIT_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

1746 
LL_SPI_Di√üb√ÄIT_RXNE
(
SPIx
);

1755 
__STATIC_INLINE
 
LL_I2S_Di√üb√ÄIT_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

1757 
LL_SPI_Di√üb√ÄIT_TXE
(
SPIx
);

1766 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√ÄdIT_ERR
(
SPI_Ty‚â•Def
 *
SPIx
)

1768  
LL_SPI_IsE¬´b√ÄdIT_ERR
(
SPIx
);

1777 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√ÄdIT_RXNE
(
SPI_Ty‚â•Def
 *
SPIx
)

1779  
LL_SPI_IsE¬´b√ÄdIT_RXNE
(
SPIx
);

1788 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√ÄdIT_TXE
(
SPI_Ty‚â•Def
 *
SPIx
)

1790  
LL_SPI_IsE¬´b√ÄdIT_TXE
(
SPIx
);

1807 
__STATIC_INLINE
 
LL_I2S_E¬´b√ÄDMAReq_RX
(
SPI_Ty‚â•Def
 *
SPIx
)

1809 
LL_SPI_E¬´b√ÄDMAReq_RX
(
SPIx
);

1818 
__STATIC_INLINE
 
LL_I2S_Di√üb√ÄDMAReq_RX
(
SPI_Ty‚â•Def
 *
SPIx
)

1820 
LL_SPI_Di√üb√ÄDMAReq_RX
(
SPIx
);

1829 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√ÄdDMAReq_RX
(
SPI_Ty‚â•Def
 *
SPIx
)

1831  
LL_SPI_IsE¬´b√ÄdDMAReq_RX
(
SPIx
);

1840 
__STATIC_INLINE
 
LL_I2S_E¬´b√ÄDMAReq_TX
(
SPI_Ty‚â•Def
 *
SPIx
)

1842 
LL_SPI_E¬´b√ÄDMAReq_TX
(
SPIx
);

1851 
__STATIC_INLINE
 
LL_I2S_Di√üb√ÄDMAReq_TX
(
SPI_Ty‚â•Def
 *
SPIx
)

1853 
LL_SPI_Di√üb√ÄDMAReq_TX
(
SPIx
);

1862 
__STATIC_INLINE
 
u√∂t32_t
 
LL_I2S_IsE¬´b√ÄdDMAReq_TX
(
SPI_Ty‚â•Def
 *
SPIx
)

1864  
LL_SPI_IsE¬´b√ÄdDMAReq_TX
(
SPIx
);

1881 
__STATIC_INLINE
 
u√∂t16_t
 
LL_I2S_ReÀöiveD¬©a16
(
SPI_Ty‚â•Def
 *
SPIx
)

1883  
LL_SPI_ReÀöiveD¬©a16
(
SPIx
);

1893 
__STATIC_INLINE
 
LL_I2S_T√∏nsm√¥D¬©a16
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t16_t
 
TxD¬©a
)

1895 
LL_SPI_T√∏nsm√¥D¬©a16
(
SPIx
, 
TxD¬©a
);

1902 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

1907 
E¬∫‚ÄπS√®tus
 
LL_I2S_DeIn√¥
(
SPI_Ty‚â•Def
 *
SPIx
);

1908 
E¬∫‚ÄπS√®tus
 
LL_I2S_In√¥
(
SPI_Ty‚â•Def
 *
SPIx
, 
LL_I2S_In√¥Ty‚â•Def
 *
I2S_In√¥S√•uÀò
);

1909 
LL_I2S_S√•uÀòIn√¥
(
LL_I2S_In√¥Ty‚â•Def
 *
I2S_In√¥S√•uÀò
);

1910 
LL_I2S_C‚ÅÑfigP¬™sÀá√Är
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
P¬™sÀá√ÄrL√∂√≥r
, u√∂t32_√†
P¬™sÀá√ÄrP¬®√¥y
);

1932 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_system.h

33 #i‚Äöde‚Ä°
__STM32F1xx_LL_SYSTEM_H


34 
	#__STM32F1xx_LL_SYSTEM_H


	)

36 #ifde‚Ä°
__Àùlu‚Ä¢lus


41 
	~"¬∞m32f1xx.h
"

47 #i‚Ä°
def√∂ed
 (
FLASH
√ã|| def√∂ed (
DBGMCU
)

78 
	#LL_DBGMCU_TRACE_NONE
 0x00000000U

	)

79 
	#LL_DBGMCU_TRACE_ASYNCH
 
DBGMCU_CR_TRACE_IOEN


	)

80 
	#LL_DBGMCU_TRACE_SYNCH_SIZE1
 (
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE_0
√ã

	)

81 
	#LL_DBGMCU_TRACE_SYNCH_SIZE2
 (
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE_1
√ã

	)

82 
	#LL_DBGMCU_TRACE_SYNCH_SIZE4
 (
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE
√ã

	)

90 
	#LL_DBGMCU_APB1_GRP1_TIM2_STOP
 
DBGMCU_CR_DBG_TIM2_STOP


	)

91 
	#LL_DBGMCU_APB1_GRP1_TIM3_STOP
 
DBGMCU_CR_DBG_TIM3_STOP


	)

92 
	#LL_DBGMCU_APB1_GRP1_TIM4_STOP
 
DBGMCU_CR_DBG_TIM4_STOP


	)

93 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM5_STOP
)

94 
	#LL_DBGMCU_APB1_GRP1_TIM5_STOP
 
DBGMCU_CR_DBG_TIM5_STOP


	)

96 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM6_STOP
)

97 
	#LL_DBGMCU_APB1_GRP1_TIM6_STOP
 
DBGMCU_CR_DBG_TIM6_STOP


	)

99 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM7_STOP
)

100 
	#LL_DBGMCU_APB1_GRP1_TIM7_STOP
 
DBGMCU_CR_DBG_TIM7_STOP


	)

102 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM12_STOP
)

103 
	#LL_DBGMCU_APB1_GRP1_TIM12_STOP
 
DBGMCU_CR_DBG_TIM12_STOP


	)

105 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM13_STOP
)

106 
	#LL_DBGMCU_APB1_GRP1_TIM13_STOP
 
DBGMCU_CR_DBG_TIM13_STOP


	)

108 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM14_STOP
)

109 
	#LL_DBGMCU_APB1_GRP1_TIM14_STOP
 
DBGMCU_CR_DBG_TIM14_STOP


	)

111 
	#LL_DBGMCU_APB1_GRP1_WWDG_STOP
 
DBGMCU_CR_DBG_WWDG_STOP


	)

112 
	#LL_DBGMCU_APB1_GRP1_IWDG_STOP
 
DBGMCU_CR_DBG_IWDG_STOP


	)

113 
	#LL_DBGMCU_APB1_GRP1_I2C1_STOP
 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT


	)

114 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

115 
	#LL_DBGMCU_APB1_GRP1_I2C2_STOP
 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT


	)

117 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_CAN1_STOP
)

118 
	#LL_DBGMCU_APB1_GRP1_CAN1_STOP
 
DBGMCU_CR_DBG_CAN1_STOP


	)

120 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_CAN2_STOP
)

121 
	#LL_DBGMCU_APB1_GRP1_CAN2_STOP
 
DBGMCU_CR_DBG_CAN2_STOP


	)

130 
	#LL_DBGMCU_APB2_GRP1_TIM1_STOP
 
DBGMCU_CR_DBG_TIM1_STOP


	)

131 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM8_STOP
)

132 
	#LL_DBGMCU_APB2_GRP1_TIM8_STOP
 
DBGMCU_CR_DBG_TIM8_STOP


	)

134 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM9_STOP
)

135 
	#LL_DBGMCU_APB2_GRP1_TIM9_STOP
 
DBGMCU_CR_DBG_TIM9_STOP


	)

137 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM10_STOP
)

138 
	#LL_DBGMCU_APB2_GRP1_TIM10_STOP
 
DBGMCU_CR_DBG_TIM10_STOP


	)

140 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM11_STOP
)

141 
	#LL_DBGMCU_APB2_GRP1_TIM11_STOP
 
DBGMCU_CR_DBG_TIM11_STOP


	)

143 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM15_STOP
)

144 
	#LL_DBGMCU_APB2_GRP1_TIM15_STOP
 
DBGMCU_CR_DBG_TIM15_STOP


	)

146 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM16_STOP
)

147 
	#LL_DBGMCU_APB2_GRP1_TIM16_STOP
 
DBGMCU_CR_DBG_TIM16_STOP


	)

149 #i‚Ä°
def√∂ed
(
DBGMCU_CR_DBG_TIM17_STOP
)

150 
	#LL_DBGMCU_APB2_GRP1_TIM17_STOP
 
DBGMCU_CR_DBG_TIM17_STOP


	)

159 #i‚Ä°
def√∂ed
(
FLASH_ACR_LATENCY
)

160 
	#LL_FLASH_LATENCY_0
 0x00000000U

	)

161 
	#LL_FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_0


	)

162 
	#LL_FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_1


	)

196 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DBGMCU_G√´DeviÀöID
()

198  (
u√∂t32_t
)(
READ_BIT
(
DBGMCU
->
IDCODE
, 
DBGMCU_IDCODE_DEV_ID
));

212 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DBGMCU_G√´Revisi‚ÅÑID
()

214  (
u√∂t32_t
)(
READ_BIT
(
DBGMCU
->
IDCODE
, 
DBGMCU_IDCODE_REV_ID
√ã>> 
DBGMCU_IDCODE_REV_ID_Pos
);

222 
__STATIC_INLINE
 
LL_DBGMCU_E¬´b√ÄDBGS√Ä√ØMode
()

224 
SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

232 
__STATIC_INLINE
 
LL_DBGMCU_Di√üb√ÄDBGS√Ä√ØMode
()

234 
CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

242 
__STATIC_INLINE
 
LL_DBGMCU_E¬´b√ÄDBGSt‚Ä∫Mode
()

244 
SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

252 
__STATIC_INLINE
 
LL_DBGMCU_Di√üb√ÄDBGSt‚Ä∫Mode
()

254 
CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

262 
__STATIC_INLINE
 
LL_DBGMCU_E¬´b√ÄDBGS√®ndbyMode
()

264 
SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

272 
__STATIC_INLINE
 
LL_DBGMCU_Di√üb√ÄDBGS√®ndbyMode
()

274 
CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

289 
__STATIC_INLINE
 
LL_DBGMCU_S√´T√∏ÀöP√∂Assignm√≠t
(
u√∂t32_t
 
P√∂Assignm√≠t
)

291 
MODIFY_REG
(
DBGMCU
->
CR
, 
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE
, 
P√∂Assignm√≠t
);

305 
__STATIC_INLINE
 
u√∂t32_t
 
LL_DBGMCU_G√´T√∏ÀöP√∂Assignm√≠t
()

307  (
u√∂t32_t
)(
READ_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_TRACE_IOEN
 | 
DBGMCU_CR_TRACE_MODE
));

348 
__STATIC_INLINE
 
LL_DBGMCU_APB1_GRP1_F¬™ezeP√Æ√πh
(
u√∂t32_t
 
P√Æ√πhs
)

350 
SET_BIT
(
DBGMCU
->
CR
, 
P√Æ√πhs
);

392 
__STATIC_INLINE
 
LL_DBGMCU_APB1_GRP1_UnF¬™ezeP√Æ√πh
(
u√∂t32_t
 
P√Æ√πhs
)

394 
CLEAR_BIT
(
DBGMCU
->
CR
, 
P√Æ√πhs
);

420 
__STATIC_INLINE
 
LL_DBGMCU_APB2_GRP1_F¬™ezeP√Æ√πh
(
u√∂t32_t
 
P√Æ√πhs
)

422 
SET_BIT
(
DBGMCU
->
CR
, 
P√Æ√πhs
);

448 
__STATIC_INLINE
 
LL_DBGMCU_APB2_GRP1_UnF¬™ezeP√Æ√πh
(
u√∂t32_t
 
P√Æ√πhs
)

450 
CLEAR_BIT
(
DBGMCU
->
CR
, 
P√Æ√πhs
);

456 #i‚Ä°
def√∂ed
(
FLASH_ACR_LATENCY
)

470 
__STATIC_INLINE
 
LL_FLASH_S√´L¬©√≠cy
(
u√∂t32_t
 
L¬©√≠cy
)

472 
MODIFY_REG
(
FLASH
->
ACR
, 
FLASH_ACR_LATENCY
, 
L¬©√≠cy
);

483 
__STATIC_INLINE
 
u√∂t32_t
 
LL_FLASH_G√´L¬©√≠cy
()

485  (
u√∂t32_t
)(
READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_LATENCY
));

493 
__STATIC_INLINE
 
LL_FLASH_E¬´b√ÄP¬™‚Äûtch
()

495 
SET_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_PRFTBE
);

503 
__STATIC_INLINE
 
LL_FLASH_Di√üb√ÄP¬™‚Äûtch
()

505 
CLEAR_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_PRFTBE
);

513 
__STATIC_INLINE
 
u√∂t32_t
 
LL_FLASH_IsP¬™‚ÄûtchE¬´b√Äd
()

515  (
READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_PRFTBS
) == (FLASH_ACR_PRFTBS));

524 
__STATIC_INLINE
 
LL_FLASH_E¬´b√ÄH√ÜfCyÀõeAcÀöss
()

526 
SET_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_HLFCYA
);

534 
__STATIC_INLINE
 
LL_FLASH_Di√üb√ÄH√ÜfCyÀõeAcÀöss
()

536 
CLEAR_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_HLFCYA
);

544 
__STATIC_INLINE
 
u√∂t32_t
 
LL_FLASH_IsH√ÜfCyÀõeAcÀössE¬´b√Äd
()

546  (
READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_HLFCYA
) == (FLASH_ACR_HLFCYA));

568 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_tim.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_TIM_H


22 
	#__STM32F1xx_LL_TIM_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
TIM1
√ã|| def√∂ed (
TIM2
√ã|| def√∂ed (
TIM3
√ã|| def√∂ed (
TIM4
√ã|| def√∂ed (
TIM5
√ã|| def√∂ed (
TIM6
√ã|| def√∂ed (
TIM7
√ã|| def√∂ed (
TIM8
√ã|| def√∂ed (
TIM9
√ã|| def√∂ed (
TIM10
√ã|| def√∂ed (
TIM11
√ã|| def√∂ed (
TIM12
√ã|| def√∂ed (
TIM13
√ã|| def√∂ed (
TIM14
√ã|| def√∂ed (
TIM15
√ã|| def√∂ed (
TIM16
√ã|| def√∂ed (
TIM17
)

46 c‚ÅÑ¬∞ 
u√∂t8_t
 
OFFSET_TAB_CCMRx
[] =

57 c‚ÅÑ¬∞ 
u√∂t8_t
 
SHIFT_TAB_OCxx
[] =

68 c‚ÅÑ¬∞ 
u√∂t8_t
 
SHIFT_TAB_ICxx
[] =

79 c‚ÅÑ¬∞ 
u√∂t8_t
 
SHIFT_TAB_CCxP
[] =

90 c‚ÅÑ¬∞ 
u√∂t8_t
 
SHIFT_TAB_OISx
[] =

112 
	#DT_DELAY_1
 ((
u√∂t8_t
)0x7F)

	)

113 
	#DT_DELAY_2
 ((
u√∂t8_t
)0x3F)

	)

114 
	#DT_DELAY_3
 ((
u√∂t8_t
)0x1F)

	)

115 
	#DT_DELAY_4
 ((
u√∂t8_t
)0x1F)

	)

118 
	#DT_RANGE_1
 ((
u√∂t8_t
)0x00)

	)

119 
	#DT_RANGE_2
 ((
u√∂t8_t
)0x80)

	)

120 
	#DT_RANGE_3
 ((
u√∂t8_t
)0xC0)

	)

121 
	#DT_RANGE_4
 ((
u√∂t8_t
)0xE0)

	)

143 
	#TIM_GET_CHANNEL_INDEX
‚Äì
__CHANNEL__
) \

144 (((
__CHANNEL__
√ã=Ô£ø
LL_TIM_CHANNEL_CH1
) ? 0U :\

145 ((
__CHANNEL__
√ã=Ô£ø
LL_TIM_CHANNEL_CH1N
) ? 1U :\

146 ((
__CHANNEL__
√ã=Ô£ø
LL_TIM_CHANNEL_CH2
) ? 2U :\

147 ((
__CHANNEL__
√ã=Ô£ø
LL_TIM_CHANNEL_CH2N
) ? 3U :\

148 ((
__CHANNEL__
√ã=Ô£ø
LL_TIM_CHANNEL_CH3
) ? 4U :\

149 ((
__CHANNEL__
√ã=Ô£ø
LL_TIM_CHANNEL_CH3N
√ã? 5U : 6U)

	)

159 
	#TIM_CALC_DTS
(
__TIMCLK__
, 
__CKD__
) \

160 (((
__CKD__
√ã=Ô£ø
LL_TIM_CLOCKDIVISION_DIV1
√ã? ((
u√∂t64_t
)1000000000000U/(
__TIMCLK__
)) : \

161 ((
__CKD__
√ã=Ô£ø
LL_TIM_CLOCKDIVISION_DIV2
√ã? ((
u√∂t64_t
)1000000000000U/((
__TIMCLK__
) >> 1U)) : \

162 ((
u√∂t64_t
)1000000000000U/((
__TIMCLK__
√ã>> 2U)))

	)

169 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

179 
u√∂t16_t
 
P¬™sÀá√Är
;

184 
u√∂t32_t
 
Cou¬°√ÆMode
;

189 
u√∂t32_t
 
Aut‚Äπ√±Ô¨Çd
;

196 
u√∂t32_t
 
ClockDivisi‚ÅÑ
;

201 
u√∂t32_t
 
R√Ø√´√¥i‚ÅÑCou¬°√Æ
;

211 } 
	tLL_TIM_In√¥Ty‚â•Def
;

218 
u√∂t32_t
 
OCMode
;

223 
u√∂t32_t
 
OCS√®√£
;

228 
u√∂t32_t
 
OCNS√®√£
;

233 
u√∂t32_t
 
Com‚àë¬™V√Üue
;

238 
u√∂t32_t
 
OCPÔ¨Å¬®√¥y
;

243 
u√∂t32_t
 
OCNPÔ¨Å¬®√¥y
;

249 
u√∂t32_t
 
OCId√ÄS√®√£
;

254 
u√∂t32_t
 
OCNId√ÄS√®√£
;

258 } 
	tLL_TIM_OC_In√¥Ty‚â•Def
;

267 
u√∂t32_t
 
ICPÔ¨Å¬®√¥y
;

272 
u√∂t32_t
 
ICAÀòiveI‚âàut
;

277 
u√∂t32_t
 
ICP¬™sÀá√Är
;

282 
u√∂t32_t
 
ICF√ª√£r
;

286 } 
	tLL_TIM_IC_In√¥Ty‚â•Def
;

294 
u√∂t32_t
 
Encod√ÆMode
;

299 
u√∂t32_t
 
IC1PÔ¨Å¬®√¥y
;

304 
u√∂t32_t
 
IC1AÀòiveI‚âàut
;

309 
u√∂t32_t
 
IC1P¬™sÀá√Är
;

314 
u√∂t32_t
 
IC1F√ª√£r
;

319 
u√∂t32_t
 
IC2PÔ¨Å¬®√¥y
;

324 
u√∂t32_t
 
IC2AÀòiveI‚âàut
;

329 
u√∂t32_t
 
IC2P¬™sÀá√Är
;

334 
u√∂t32_t
 
IC2F√ª√£r
;

339 } 
	tLL_TIM_ENCODER_In√¥Ty‚â•Def
;

347 
u√∂t32_t
 
IC1PÔ¨Å¬®√¥y
;

352 
u√∂t32_t
 
IC1P¬™sÀá√Är
;

359 
u√∂t32_t
 
IC1F√ª√£r
;

364 
u√∂t32_t
 
Commu√®ti‚ÅÑD√±ay
;

370 } 
	tLL_TIM_HALLSENSOR_In√¥Ty‚â•Def
;

377 
u√∂t32_t
 
OSSRS√®√£
;

384 
u√∂t32_t
 
OSSIS√®√£
;

391 
u√∂t32_t
 
LockLev√±
;

397 
u√∂t8_t
 
D√≥dTime
;

405 
u√∂t16_t
 
B¬™akS√®√£
;

412 
u√∂t32_t
 
B¬™akPÔ¨Å¬®√¥y
;

419 
u√∂t32_t
 
Autom¬©icOu√ßut
;

425 } 
	tLL_TIM_BDTR_In√¥Ty‚â•Def
;

441 
	#LL_TIM_SR_UIF
 
TIM_SR_UIF


	)

442 
	#LL_TIM_SR_CC1IF
 
TIM_SR_CC1IF


	)

443 
	#LL_TIM_SR_CC2IF
 
TIM_SR_CC2IF


	)

444 
	#LL_TIM_SR_CC3IF
 
TIM_SR_CC3IF


	)

445 
	#LL_TIM_SR_CC4IF
 
TIM_SR_CC4IF


	)

446 
	#LL_TIM_SR_COMIF
 
TIM_SR_COMIF


	)

447 
	#LL_TIM_SR_TIF
 
TIM_SR_TIF


	)

448 
	#LL_TIM_SR_BIF
 
TIM_SR_BIF


	)

449 
	#LL_TIM_SR_CC1OF
 
TIM_SR_CC1OF


	)

450 
	#LL_TIM_SR_CC2OF
 
TIM_SR_CC2OF


	)

451 
	#LL_TIM_SR_CC3OF
 
TIM_SR_CC3OF


	)

452 
	#LL_TIM_SR_CC4OF
 
TIM_SR_CC4OF


	)

457 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

461 
	#LL_TIM_BREAK_DISABLE
 0x00000000U

	)

462 
	#LL_TIM_BREAK_ENABLE
 
TIM_BDTR_BKE


	)

470 
	#LL_TIM_AUTOMATICOUTPUT_DISABLE
 0x00000000U

	)

471 
	#LL_TIM_AUTOMATICOUTPUT_ENABLE
 
TIM_BDTR_AOE


	)

481 
	#LL_TIM_DIER_UIE
 
TIM_DIER_UIE


	)

482 
	#LL_TIM_DIER_CC1IE
 
TIM_DIER_CC1IE


	)

483 
	#LL_TIM_DIER_CC2IE
 
TIM_DIER_CC2IE


	)

484 
	#LL_TIM_DIER_CC3IE
 
TIM_DIER_CC3IE


	)

485 
	#LL_TIM_DIER_CC4IE
 
TIM_DIER_CC4IE


	)

486 
	#LL_TIM_DIER_COMIE
 
TIM_DIER_COMIE


	)

487 
	#LL_TIM_DIER_TIE
 
TIM_DIER_TIE


	)

488 
	#LL_TIM_DIER_BIE
 
TIM_DIER_BIE


	)

496 
	#LL_TIM_UPDATESOURCE_REGULAR
 0x00000000U

	)

497 
	#LL_TIM_UPDATESOURCE_COUNTER
 
TIM_CR1_URS


	)

505 
	#LL_TIM_ONEPULSEMODE_SINGLE
 
TIM_CR1_OPM


	)

506 
	#LL_TIM_ONEPULSEMODE_REPETITIVE
 0x00000000U

	)

514 
	#LL_TIM_COUNTERMODE_UP
 0x00000000U

	)

515 
	#LL_TIM_COUNTERMODE_DOWN
 
TIM_CR1_DIR


	)

516 
	#LL_TIM_COUNTERMODE_CENTER_DOWN
 
TIM_CR1_CMS_0


	)

517 
	#LL_TIM_COUNTERMODE_CENTER_UP
 
TIM_CR1_CMS_1


	)

518 
	#LL_TIM_COUNTERMODE_CENTER_UP_DOWN
 
TIM_CR1_CMS


	)

526 
	#LL_TIM_CLOCKDIVISION_DIV1
 0x00000000U

	)

527 
	#LL_TIM_CLOCKDIVISION_DIV2
 
TIM_CR1_CKD_0


	)

528 
	#LL_TIM_CLOCKDIVISION_DIV4
 
TIM_CR1_CKD_1


	)

536 
	#LL_TIM_COUNTERDIRECTION_UP
 0x00000000U

	)

537 
	#LL_TIM_COUNTERDIRECTION_DOWN
 
TIM_CR1_DIR


	)

545 
	#LL_TIM_CCUPDATESOURCE_COMG_ONLY
 0x00000000U

	)

546 
	#LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI
 
TIM_CR2_CCUS


	)

554 
	#LL_TIM_CCDMAREQUEST_CC
 0x00000000U

	)

555 
	#LL_TIM_CCDMAREQUEST_UPDATE
 
TIM_CR2_CCDS


	)

563 
	#LL_TIM_LOCKLEVEL_OFF
 0x00000000U

	)

564 
	#LL_TIM_LOCKLEVEL_1
 
TIM_BDTR_LOCK_0


	)

565 
	#LL_TIM_LOCKLEVEL_2
 
TIM_BDTR_LOCK_1


	)

566 
	#LL_TIM_LOCKLEVEL_3
 
TIM_BDTR_LOCK


	)

574 
	#LL_TIM_CHANNEL_CH1
 
TIM_CCER_CC1E


	)

575 
	#LL_TIM_CHANNEL_CH1N
 
TIM_CCER_CC1NE


	)

576 
	#LL_TIM_CHANNEL_CH2
 
TIM_CCER_CC2E


	)

577 
	#LL_TIM_CHANNEL_CH2N
 
TIM_CCER_CC2NE


	)

578 
	#LL_TIM_CHANNEL_CH3
 
TIM_CCER_CC3E


	)

579 
	#LL_TIM_CHANNEL_CH3N
 
TIM_CCER_CC3NE


	)

580 
	#LL_TIM_CHANNEL_CH4
 
TIM_CCER_CC4E


	)

585 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

589 
	#LL_TIM_OCSTATE_DISABLE
 0x00000000U

	)

590 
	#LL_TIM_OCSTATE_ENABLE
 
TIM_CCER_CC1E


	)

599 
	#LL_TIM_OCMODE_FROZEN
 0x00000000U

	)

600 
	#LL_TIM_OCMODE_ACTIVE
 
TIM_CCMR1_OC1M_0


	)

601 
	#LL_TIM_OCMODE_INACTIVE
 
TIM_CCMR1_OC1M_1


	)

602 
	#LL_TIM_OCMODE_TOGGLE
 (
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_0
√ã

	)

603 
	#LL_TIM_OCMODE_FORCED_INACTIVE
 
TIM_CCMR1_OC1M_2


	)

604 
	#LL_TIM_OCMODE_FORCED_ACTIVE
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_0
√ã

	)

605 
	#LL_TIM_OCMODE_PWM1
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_1
√ã

	)

606 
	#LL_TIM_OCMODE_PWM2
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_0
√ã

	)

614 
	#LL_TIM_OCPOLARITY_HIGH
 0x00000000U

	)

615 
	#LL_TIM_OCPOLARITY_LOW
 
TIM_CCER_CC1P


	)

623 
	#LL_TIM_OCIDLESTATE_LOW
 0x00000000U

	)

624 
	#LL_TIM_OCIDLESTATE_HIGH
 
TIM_CR2_OIS1


	)

633 
	#LL_TIM_ACTIVEINPUT_DIRECTTI
 (
TIM_CCMR1_CC1S_0
 << 16U√ã

	)

634 
	#LL_TIM_ACTIVEINPUT_INDIRECTTI
 (
TIM_CCMR1_CC1S_1
 << 16U√ã

	)

635 
	#LL_TIM_ACTIVEINPUT_TRC
 (
TIM_CCMR1_CC1S
 << 16U√ã

	)

643 
	#LL_TIM_ICPSC_DIV1
 0x00000000U

	)

644 
	#LL_TIM_ICPSC_DIV2
 (
TIM_CCMR1_IC1PSC_0
 << 16U√ã

	)

645 
	#LL_TIM_ICPSC_DIV4
 (
TIM_CCMR1_IC1PSC_1
 << 16U√ã

	)

646 
	#LL_TIM_ICPSC_DIV8
 (
TIM_CCMR1_IC1PSC
 << 16U√ã

	)

654 
	#LL_TIM_IC_FILTER_FDIV1
 0x00000000U

	)

655 
	#LL_TIM_IC_FILTER_FDIV1_N2
 (
TIM_CCMR1_IC1F_0
 << 16U√ã

	)

656 
	#LL_TIM_IC_FILTER_FDIV1_N4
 (
TIM_CCMR1_IC1F_1
 << 16U√ã

	)

657 
	#LL_TIM_IC_FILTER_FDIV1_N8
 ((
TIM_CCMR1_IC1F_1
 | 
TIM_CCMR1_IC1F_0
√ã<< 16U√ã

	)

658 
	#LL_TIM_IC_FILTER_FDIV2_N6
 (
TIM_CCMR1_IC1F_2
 << 16U√ã

	)

659 
	#LL_TIM_IC_FILTER_FDIV2_N8
 ((
TIM_CCMR1_IC1F_2
 | 
TIM_CCMR1_IC1F_0
√ã<< 16U√ã

	)

660 
	#LL_TIM_IC_FILTER_FDIV4_N6
 ((
TIM_CCMR1_IC1F_2
 | 
TIM_CCMR1_IC1F_1
√ã<< 16U√ã

	)

661 
	#LL_TIM_IC_FILTER_FDIV4_N8
 ((
TIM_CCMR1_IC1F_2
 | 
TIM_CCMR1_IC1F_1
 | 
TIM_CCMR1_IC1F_0
√ã<< 16U√ã

	)

662 
	#LL_TIM_IC_FILTER_FDIV8_N6
 (
TIM_CCMR1_IC1F_3
 << 16U√ã

	)

663 
	#LL_TIM_IC_FILTER_FDIV8_N8
 ((
TIM_CCMR1_IC1F_3
 | 
TIM_CCMR1_IC1F_0
√ã<< 16U√ã

	)

664 
	#LL_TIM_IC_FILTER_FDIV16_N5
 ((
TIM_CCMR1_IC1F_3
 | 
TIM_CCMR1_IC1F_1
√ã<< 16U√ã

	)

665 
	#LL_TIM_IC_FILTER_FDIV16_N6
 ((
TIM_CCMR1_IC1F_3
 | 
TIM_CCMR1_IC1F_1
 | 
TIM_CCMR1_IC1F_0
√ã<< 16U√ã

	)

666 
	#LL_TIM_IC_FILTER_FDIV16_N8
 ((
TIM_CCMR1_IC1F_3
 | 
TIM_CCMR1_IC1F_2
√ã<< 16U√ã

	)

667 
	#LL_TIM_IC_FILTER_FDIV32_N5
 ((
TIM_CCMR1_IC1F_3
 | 
TIM_CCMR1_IC1F_2
 | 
TIM_CCMR1_IC1F_0
√ã<< 16U√ã

	)

668 
	#LL_TIM_IC_FILTER_FDIV32_N6
 ((
TIM_CCMR1_IC1F_3
 | 
TIM_CCMR1_IC1F_2
 | 
TIM_CCMR1_IC1F_1
√ã<< 16U√ã

	)

669 
	#LL_TIM_IC_FILTER_FDIV32_N8
 (
TIM_CCMR1_IC1F
 << 16U√ã

	)

677 
	#LL_TIM_IC_POLARITY_RISING
 0x00000000U

	)

678 
	#LL_TIM_IC_POLARITY_FALLING
 
TIM_CCER_CC1P


	)

686 
	#LL_TIM_CLOCKSOURCE_INTERNAL
 0x00000000U

	)

687 
	#LL_TIM_CLOCKSOURCE_EXT_MODE1
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
√ã

	)

688 
	#LL_TIM_CLOCKSOURCE_EXT_MODE2
 
TIM_SMCR_ECE


	)

696 
	#LL_TIM_ENCODERMODE_X2_TI1
 
TIM_SMCR_SMS_0


	)

697 
	#LL_TIM_ENCODERMODE_X2_TI2
 
TIM_SMCR_SMS_1


	)

698 
	#LL_TIM_ENCODERMODE_X4_TI12
 (
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
√ã

	)

706 
	#LL_TIM_TRGO_RESET
 0x00000000U

	)

707 
	#LL_TIM_TRGO_ENABLE
 
TIM_CR2_MMS_0


	)

708 
	#LL_TIM_TRGO_UPDATE
 
TIM_CR2_MMS_1


	)

709 
	#LL_TIM_TRGO_CC1IF
 (
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
√ã

	)

710 
	#LL_TIM_TRGO_OC1REF
 
TIM_CR2_MMS_2


	)

711 
	#LL_TIM_TRGO_OC2REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_0
√ã

	)

712 
	#LL_TIM_TRGO_OC3REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
√ã

	)

713 
	#LL_TIM_TRGO_OC4REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
√ã

	)

722 
	#LL_TIM_SLAVEMODE_DISABLED
 0x00000000U

	)

723 
	#LL_TIM_SLAVEMODE_RESET
 
TIM_SMCR_SMS_2


	)

724 
	#LL_TIM_SLAVEMODE_GATED
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_0
√ã

	)

725 
	#LL_TIM_SLAVEMODE_TRIGGER
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_1
√ã

	)

733 
	#LL_TIM_TS_ITR0
 0x00000000U

	)

734 
	#LL_TIM_TS_ITR1
 
TIM_SMCR_TS_0


	)

735 
	#LL_TIM_TS_ITR2
 
TIM_SMCR_TS_1


	)

736 
	#LL_TIM_TS_ITR3
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
√ã

	)

737 
	#LL_TIM_TS_TI1F_ED
 
TIM_SMCR_TS_2


	)

738 
	#LL_TIM_TS_TI1FP1
 (
TIM_SMCR_TS_2
 | 
TIM_SMCR_TS_0
√ã

	)

739 
	#LL_TIM_TS_TI2FP2
 (
TIM_SMCR_TS_2
 | 
TIM_SMCR_TS_1
√ã

	)

740 
	#LL_TIM_TS_ETRF
 (
TIM_SMCR_TS_2
 | 
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_0
√ã

	)

748 
	#LL_TIM_ETR_POLARITY_NONINVERTED
 0x00000000U

	)

749 
	#LL_TIM_ETR_POLARITY_INVERTED
 
TIM_SMCR_ETP


	)

757 
	#LL_TIM_ETR_PRESCALER_DIV1
 0x00000000U

	)

758 
	#LL_TIM_ETR_PRESCALER_DIV2
 
TIM_SMCR_ETPS_0


	)

759 
	#LL_TIM_ETR_PRESCALER_DIV4
 
TIM_SMCR_ETPS_1


	)

760 
	#LL_TIM_ETR_PRESCALER_DIV8
 
TIM_SMCR_ETPS


	)

768 
	#LL_TIM_ETR_FILTER_FDIV1
 0x00000000U

	)

769 
	#LL_TIM_ETR_FILTER_FDIV1_N2
 
TIM_SMCR_ETF_0


	)

770 
	#LL_TIM_ETR_FILTER_FDIV1_N4
 
TIM_SMCR_ETF_1


	)

771 
	#LL_TIM_ETR_FILTER_FDIV1_N8
 (
TIM_SMCR_ETF_1
 | 
TIM_SMCR_ETF_0
√ã

	)

772 
	#LL_TIM_ETR_FILTER_FDIV2_N6
 
TIM_SMCR_ETF_2


	)

773 
	#LL_TIM_ETR_FILTER_FDIV2_N8
 (
TIM_SMCR_ETF_2
 | 
TIM_SMCR_ETF_0
√ã

	)

774 
	#LL_TIM_ETR_FILTER_FDIV4_N6
 (
TIM_SMCR_ETF_2
 | 
TIM_SMCR_ETF_1
√ã

	)

775 
	#LL_TIM_ETR_FILTER_FDIV4_N8
 (
TIM_SMCR_ETF_2
 | 
TIM_SMCR_ETF_1
 | 
TIM_SMCR_ETF_0
√ã

	)

776 
	#LL_TIM_ETR_FILTER_FDIV8_N6
 
TIM_SMCR_ETF_3


	)

777 
	#LL_TIM_ETR_FILTER_FDIV8_N8
 (
TIM_SMCR_ETF_3
 | 
TIM_SMCR_ETF_0
√ã

	)

778 
	#LL_TIM_ETR_FILTER_FDIV16_N5
 (
TIM_SMCR_ETF_3
 | 
TIM_SMCR_ETF_1
√ã

	)

779 
	#LL_TIM_ETR_FILTER_FDIV16_N6
 (
TIM_SMCR_ETF_3
 | 
TIM_SMCR_ETF_1
 | 
TIM_SMCR_ETF_0
√ã

	)

780 
	#LL_TIM_ETR_FILTER_FDIV16_N8
 (
TIM_SMCR_ETF_3
 | 
TIM_SMCR_ETF_2
√ã

	)

781 
	#LL_TIM_ETR_FILTER_FDIV32_N5
 (
TIM_SMCR_ETF_3
 | 
TIM_SMCR_ETF_2
 | 
TIM_SMCR_ETF_0
√ã

	)

782 
	#LL_TIM_ETR_FILTER_FDIV32_N6
 (
TIM_SMCR_ETF_3
 | 
TIM_SMCR_ETF_2
 | 
TIM_SMCR_ETF_1
√ã

	)

783 
	#LL_TIM_ETR_FILTER_FDIV32_N8
 
TIM_SMCR_ETF


	)

792 
	#LL_TIM_BREAK_POLARITY_LOW
 0x00000000U

	)

793 
	#LL_TIM_BREAK_POLARITY_HIGH
 
TIM_BDTR_BKP


	)

804 
	#LL_TIM_OSSI_DISABLE
 0x00000000U

	)

805 
	#LL_TIM_OSSI_ENABLE
 
TIM_BDTR_OSSI


	)

813 
	#LL_TIM_OSSR_DISABLE
 0x00000000U

	)

814 
	#LL_TIM_OSSR_ENABLE
 
TIM_BDTR_OSSR


	)

823 
	#LL_TIM_DMABURST_BASEADDR_CR1
 0x00000000U

	)

824 
	#LL_TIM_DMABURST_BASEADDR_CR2
 
TIM_DCR_DBA_0


	)

825 
	#LL_TIM_DMABURST_BASEADDR_SMCR
 
TIM_DCR_DBA_1


	)

826 
	#LL_TIM_DMABURST_BASEADDR_DIER
 (
TIM_DCR_DBA_1
 | 
TIM_DCR_DBA_0
√ã

	)

827 
	#LL_TIM_DMABURST_BASEADDR_SR
 
TIM_DCR_DBA_2


	)

828 
	#LL_TIM_DMABURST_BASEADDR_EGR
 (
TIM_DCR_DBA_2
 | 
TIM_DCR_DBA_0
√ã

	)

829 
	#LL_TIM_DMABURST_BASEADDR_CCMR1
 (
TIM_DCR_DBA_2
 | 
TIM_DCR_DBA_1
√ã

	)

830 
	#LL_TIM_DMABURST_BASEADDR_CCMR2
 (
TIM_DCR_DBA_2
 | 
TIM_DCR_DBA_1
 | 
TIM_DCR_DBA_0
√ã

	)

831 
	#LL_TIM_DMABURST_BASEADDR_CCER
 
TIM_DCR_DBA_3


	)

832 
	#LL_TIM_DMABURST_BASEADDR_CNT
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_0
√ã

	)

833 
	#LL_TIM_DMABURST_BASEADDR_PSC
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_1
√ã

	)

834 
	#LL_TIM_DMABURST_BASEADDR_ARR
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_1
 | 
TIM_DCR_DBA_0
√ã

	)

835 
	#LL_TIM_DMABURST_BASEADDR_RCR
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_2
√ã

	)

836 
	#LL_TIM_DMABURST_BASEADDR_CCR1
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_2
 | 
TIM_DCR_DBA_0
√ã

	)

837 
	#LL_TIM_DMABURST_BASEADDR_CCR2
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_2
 | 
TIM_DCR_DBA_1
√ã

	)

838 
	#LL_TIM_DMABURST_BASEADDR_CCR3
 (
TIM_DCR_DBA_3
 | 
TIM_DCR_DBA_2
 | 
TIM_DCR_DBA_1
 | 
TIM_DCR_DBA_0
√ã

	)

839 
	#LL_TIM_DMABURST_BASEADDR_CCR4
 
TIM_DCR_DBA_4


	)

840 
	#LL_TIM_DMABURST_BASEADDR_BDTR
 (
TIM_DCR_DBA_4
 | 
TIM_DCR_DBA_0
√ã

	)

848 
	#LL_TIM_DMABURST_LENGTH_1TRANSFER
 0x00000000U

	)

849 
	#LL_TIM_DMABURST_LENGTH_2TRANSFERS
 
TIM_DCR_DBL_0


	)

850 
	#LL_TIM_DMABURST_LENGTH_3TRANSFERS
 
TIM_DCR_DBL_1


	)

851 
	#LL_TIM_DMABURST_LENGTH_4TRANSFERS
 (
TIM_DCR_DBL_1
 | 
TIM_DCR_DBL_0
√ã

	)

852 
	#LL_TIM_DMABURST_LENGTH_5TRANSFERS
 
TIM_DCR_DBL_2


	)

853 
	#LL_TIM_DMABURST_LENGTH_6TRANSFERS
 (
TIM_DCR_DBL_2
 | 
TIM_DCR_DBL_0
√ã

	)

854 
	#LL_TIM_DMABURST_LENGTH_7TRANSFERS
 (
TIM_DCR_DBL_2
 | 
TIM_DCR_DBL_1
√ã

	)

855 
	#LL_TIM_DMABURST_LENGTH_8TRANSFERS
 (
TIM_DCR_DBL_2
 | 
TIM_DCR_DBL_1
 | 
TIM_DCR_DBL_0
√ã

	)

856 
	#LL_TIM_DMABURST_LENGTH_9TRANSFERS
 
TIM_DCR_DBL_3


	)

857 
	#LL_TIM_DMABURST_LENGTH_10TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_0
√ã

	)

858 
	#LL_TIM_DMABURST_LENGTH_11TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_1
√ã

	)

859 
	#LL_TIM_DMABURST_LENGTH_12TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_1
 | 
TIM_DCR_DBL_0
√ã

	)

860 
	#LL_TIM_DMABURST_LENGTH_13TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_2
√ã

	)

861 
	#LL_TIM_DMABURST_LENGTH_14TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_2
 | 
TIM_DCR_DBL_0
√ã

	)

862 
	#LL_TIM_DMABURST_LENGTH_15TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_2
 | 
TIM_DCR_DBL_1
√ã

	)

863 
	#LL_TIM_DMABURST_LENGTH_16TRANSFERS
 (
TIM_DCR_DBL_3
 | 
TIM_DCR_DBL_2
 | 
TIM_DCR_DBL_1
 | 
TIM_DCR_DBL_0
√ã

	)

864 
	#LL_TIM_DMABURST_LENGTH_17TRANSFERS
 
TIM_DCR_DBL_4


	)

865 
	#LL_TIM_DMABURST_LENGTH_18TRANSFERS
 (
TIM_DCR_DBL_4
 | 
TIM_DCR_DBL_0
√ã

	)

890 
	#LL_TIM_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
((__INSTANCE__)->__REG__, (__VALUE__))

	)

898 
	#LL_TIM_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
((__INSTANCE__)->__REG__)

	)

918 
	#__LL_TIM_CALC_DEADTIME
(
__TIMCLK__
, 
__CKD__
, 
__DT__
) \

919 ‚Äì(((
u√∂t64_t
)((
__DT__
)*1000U)√ã< ((
DT_DELAY_1
+1U√ã* 
	`TIM_CALC_DTS
((
__TIMCLK__
), (
__CKD__
)))√ã? (
u√∂t8_t
)(((uint64_t)((__DT__)*1000U) / TIM_CALC_DTS((__TIMCLK__), (__CKD__))) & DT_DELAY_1) : \

920 (((
u√∂t64_t
)((
__DT__
)*1000U)√ã< ((64U + (
DT_DELAY_2
+1U)√ã* 2U * 
	`TIM_CALC_DTS
((
__TIMCLK__
), (
__CKD__
)))√ã? (
u√∂t8_t
)(
DT_RANGE_2
 | ((uint8_t)((uint8_t)((((uint64_t)((__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 1U) - (uint8_t) 64) & DT_DELAY_2)) :\

921 (((
u√∂t64_t
)((
__DT__
)*1000U)√ã< ((32U + (
DT_DELAY_3
+1U)√ã* 8U * 
	`TIM_CALC_DTS
((
__TIMCLK__
), (
__CKD__
)))√ã? (
u√∂t8_t
)(
DT_RANGE_3
 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 3U) - (uint8_t) 32) & DT_DELAY_3)) :\

922 (((
u√∂t64_t
)((
__DT__
)*1000U)√ã< ((32U + (
DT_DELAY_4
+1U)√ã* 16U * 
	`TIM_CALC_DTS
((
__TIMCLK__
), (
__CKD__
)))√ã? (
u√∂t8_t
)(
DT_RANGE_4
 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 4U) - (uint8_t) 32) & DT_DELAY_4)) :\

923 0U)

	)

932 
	#__LL_TIM_CALC_PSC
(
__TIMCLK__
, 
__CNTCLK__
) \

933 (((
__TIMCLK__
√ã>Ô£ø(
__CNTCLK__
)√ã? (
u√∂t32_t
)(((__TIMCLK__)/(__CNTCLK__)√ã- 1U√ã: 0U)

	)

943 
	#__LL_TIM_CALC_ARR
(
__TIMCLK__
, 
__PSC__
, 
__FREQ__
) \

944 ((((
__TIMCLK__
)/((
__PSC__
√ã+ 1U)√ã>Ô£ø(
__FREQ__
)√ã? (((__TIMCLK__)/((__FREQ__√ã* ((__PSC__√ã+ 1U))√ã- 1U√ã: 0U)

	)

954 
	#__LL_TIM_CALC_DELAY
(
__TIMCLK__
, 
__PSC__
, 
__DELAY__
) \

955 ((
u√∂t32_t
)(((
u√∂t64_t
)(
__TIMCLK__
√ã* (u√∂t64_t)(
__DELAY__
)) \

956 / ((
u√∂t64_t
)1000000U * (u√∂t64_t)((
__PSC__
√ã+ 1U))))

	)

967 
	#__LL_TIM_CALC_PULSE
(
__TIMCLK__
, 
__PSC__
, 
__DELAY__
, 
__PULSE__
) \

968 ((
u√∂t32_t
)(
	`__LL_TIM_CALC_DELAY
((
__TIMCLK__
), (
__PSC__
), (
__PULSE__
)) \

969 + 
	`__LL_TIM_CALC_DELAY
((
__TIMCLK__
), (
__PSC__
), (
__DELAY__
))))

	)

981 
	#__LL_TIM_GET_ICPSC_RATIO
(
__ICPSC__
) \

982 ((
u√∂t32_t
)(0x01U << (((
__ICPSC__
√ã>> 16U√ã>> 
TIM_CCMR1_IC1PSC_Pos
)))

	)

1008 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄCou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
)

1010 
SET_BIT
(
TIMx
->
CR1
, 
TIM_CR1_CEN
);

1019 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄCou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
)

1021 
CLEAR_BIT
(
TIMx
->
CR1
, 
TIM_CR1_CEN
);

1030 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdCou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
)

1032  ((
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_CEN
) == (TIM_CR1_CEN)) ? 1UL : 0UL);

1041 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄUpd¬©eEv√≠t
(
TIM_Ty‚â•Def
 *
TIMx
)

1043 
CLEAR_BIT
(
TIMx
->
CR1
, 
TIM_CR1_UDIS
);

1052 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄUpd¬©eEv√≠t
(
TIM_Ty‚â•Def
 *
TIMx
)

1054 
SET_BIT
(
TIMx
->
CR1
, 
TIM_CR1_UDIS
);

1063 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdUpd¬©eEv√≠t
(
TIM_Ty‚â•Def
 *
TIMx
)

1065  ((
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_UDIS
√ã=Ô£ø(
u√∂t32_t
)
RESET
) ? 1UL : 0UL);

1084 
__STATIC_INLINE
 
LL_TIM_S√´Upd¬©eSourÀö
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Upd¬©eSourÀö
)

1086 
MODIFY_REG
(
TIMx
->
CR1
, 
TIM_CR1_URS
, 
Upd¬©eSourÀö
);

1097 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´Upd¬©eSourÀö
(
TIM_Ty‚â•Def
 *
TIMx
)

1099  (
u√∂t32_t
)(
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_URS
));

1111 
__STATIC_INLINE
 
LL_TIM_S√´O‚àöPul¬£Mode
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
O‚àöPul¬£Mode
)

1113 
MODIFY_REG
(
TIMx
->
CR1
, 
TIM_CR1_OPM
, 
O‚àöPul¬£Mode
);

1124 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´O‚àöPul¬£Mode
(
TIM_Ty‚â•Def
 *
TIMx
)

1126  (
u√∂t32_t
)(
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_OPM
));

1148 
__STATIC_INLINE
 
LL_TIM_S√´Cou¬°√ÆMode
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Cou¬°√ÆMode
)

1150 
MODIFY_REG
(
TIMx
->
CR1
, (
TIM_CR1_DIR
 | 
TIM_CR1_CMS
), 
Cou¬°√ÆMode
);

1168 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´Cou¬°√ÆMode
(
TIM_Ty‚â•Def
 *
TIMx
)

1170  (
u√∂t32_t
)(
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

1179 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄARRP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
)

1181 
SET_BIT
(
TIMx
->
CR1
, 
TIM_CR1_ARPE
);

1190 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄARRP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
)

1192 
CLEAR_BIT
(
TIMx
->
CR1
, 
TIM_CR1_ARPE
);

1201 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdARRP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
)

1203  ((
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_ARPE
) == (TIM_CR1_ARPE)) ? 1UL : 0UL);

1219 
__STATIC_INLINE
 
LL_TIM_S√´ClockDivisi‚ÅÑ
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
ClockDivisi‚ÅÑ
)

1221 
MODIFY_REG
(
TIMx
->
CR1
, 
TIM_CR1_CKD
, 
ClockDivisi‚ÅÑ
);

1236 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´ClockDivisi‚ÅÑ
(
TIM_Ty‚â•Def
 *
TIMx
)

1238  (
u√∂t32_t
)(
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_CKD
));

1248 
__STATIC_INLINE
 
LL_TIM_S√´Cou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Cou¬°√Æ
)

1250 
WRITE_REG
(
TIMx
->
CNT
, 
Cou¬°√Æ
);

1259 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´Cou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
)

1261  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CNT
));

1272 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´D√∫eÀòi‚ÅÑ
(
TIM_Ty‚â•Def
 *
TIMx
)

1274  (
u√∂t32_t
)(
READ_BIT
(
TIMx
->
CR1
, 
TIM_CR1_DIR
));

1288 
__STATIC_INLINE
 
LL_TIM_S√´P¬™sÀá√Är
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
P¬™sÀá√Är
)

1290 
WRITE_REG
(
TIMx
->
PSC
, 
P¬™sÀá√Är
);

1299 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´P¬™sÀá√Är
(
TIM_Ty‚â•Def
 *
TIMx
)

1301  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
PSC
));

1313 
__STATIC_INLINE
 
LL_TIM_S√´AutoR√±Ô¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
AutoR√±Ô¨Çd
)

1315 
WRITE_REG
(
TIMx
->
ARR
, 
AutoR√±Ô¨Çd
);

1324 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´AutoR√±Ô¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
)

1326  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
ARR
));

1338 
__STATIC_INLINE
 
LL_TIM_S√´R√Ø√´√¥i‚ÅÑCou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
R√Ø√´√¥i‚ÅÑCou¬°√Æ
)

1340 
WRITE_REG
(
TIMx
->
RCR
, 
R√Ø√´√¥i‚ÅÑCou¬°√Æ
);

1351 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_G√´R√Ø√´√¥i‚ÅÑCou¬°√Æ
(
TIM_Ty‚â•Def
 *
TIMx
)

1353  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
RCR
));

1374 
__STATIC_INLINE
 
LL_TIM_CC_E¬´b√ÄP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
)

1376 
SET_BIT
(
TIMx
->
CR2
, 
TIM_CR2_CCPC
);

1387 
__STATIC_INLINE
 
LL_TIM_CC_Di√üb√ÄP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
)

1389 
CLEAR_BIT
(
TIMx
->
CR2
, 
TIM_CR2_CCPC
);

1403 
__STATIC_INLINE
 
LL_TIM_CC_S√´Upd¬©e
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
CCUpd¬©eSourÀö
)

1405 
MODIFY_REG
(
TIMx
->
CR2
, 
TIM_CR2_CCUS
, 
CCUpd¬©eSourÀö
);

1417 
__STATIC_INLINE
 
LL_TIM_CC_S√´DMAReqTrigg√Æ
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
DMAReqTrigg√Æ
)

1419 
MODIFY_REG
(
TIMx
->
CR2
, 
TIM_CR2_CCDS
, 
DMAReqTrigg√Æ
);

1430 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_CC_G√´DMAReqTrigg√Æ
(
TIM_Ty‚â•Def
 *
TIMx
)

1432  (
u√∂t32_t
)(
READ_BIT
(
TIMx
->
CR2
, 
TIM_CR2_CCDS
));

1449 
__STATIC_INLINE
 
LL_TIM_CC_S√´LockLev√±
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
LockLev√±
)

1451 
MODIFY_REG
(
TIMx
->
BDTR
, 
TIM_BDTR_LOCK
, 
LockLev√±
);

1474 
__STATIC_INLINE
 
LL_TIM_CC_E¬´b√ÄCh‚Ñ¢‚àöl
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöls
)

1476 
SET_BIT
(
TIMx
->
CCER
, 
Ch‚Ñ¢‚àöls
);

1499 
__STATIC_INLINE
 
LL_TIM_CC_Di√üb√ÄCh‚Ñ¢‚àöl
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöls
)

1501 
CLEAR_BIT
(
TIMx
->
CCER
, 
Ch‚Ñ¢‚àöls
);

1524 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_CC_IsE¬´b√ÄdCh‚Ñ¢‚àöl
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöls
)

1526  ((
READ_BIT
(
TIMx
->
CCER
, 
Ch‚Ñ¢‚àöls
) == (Channels)) ? 1UL : 0UL);

1561 
__STATIC_INLINE
 
LL_TIM_OC_C‚ÅÑfigOu√ßut
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
C‚ÅÑfigu√∏ti‚ÅÑ
)

1563 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1564 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1565 
CLEAR_BIT
(*
pReg
, (
TIM_CCMR1_CC1S
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1566 
MODIFY_REG
(
TIMx
->
CCER
, (
TIM_CCER_CC1P
 << 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]),

1567 (
C‚ÅÑfigu√∏ti‚ÅÑ
 & 
TIM_CCER_CC1P
√ã<< 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]);

1568 
MODIFY_REG
(
TIMx
->
CR2
, (
TIM_CR2_OIS1
 << 
SHIFT_TAB_OISx
[
iCh‚Ñ¢‚àöl
]),

1569 (
C‚ÅÑfigu√∏ti‚ÅÑ
 & 
TIM_CR2_OIS1
√ã<< 
SHIFT_TAB_OISx
[
iCh‚Ñ¢‚àöl
]);

1596 
__STATIC_INLINE
 
LL_TIM_OC_S√´Mode
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Mode
)

1598 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1599 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1600 
MODIFY_REG
(*
pReg
, ((
TIM_CCMR1_OC1M
 | 
TIM_CCMR1_CC1S
√ã<< 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]), 
Mode
 << SHIFT_TAB_OCxx[iChannel]);

1625 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´Mode
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1627 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1628 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1629  (
READ_BIT
(*
pReg
, ((
TIM_CCMR1_OC1M
 | 
TIM_CCMR1_CC1S
√ã<< 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
])) >> SHIFT_TAB_OCxx[iChannel]);

1655 
__STATIC_INLINE
 
LL_TIM_OC_S√´PÔ¨Å¬®√¥y
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
PÔ¨Å¬®√¥y
)

1657 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1658 
MODIFY_REG
(
TIMx
->
CCER
, (
TIM_CCER_CC1P
 << 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]), 
PÔ¨Å¬®√¥y
 << SHIFT_TAB_CCxP[iChannel]);

1683 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´PÔ¨Å¬®√¥y
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1685 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1686  (
READ_BIT
(
TIMx
->
CCER
, (
TIM_CCER_CC1P
 << 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
])) >> SHIFT_TAB_CCxP[iChannel]);

1716 
__STATIC_INLINE
 
LL_TIM_OC_S√´Id√ÄS√®√£
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Id√ÄS√®√£
)

1718 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1719 
MODIFY_REG
(
TIMx
->
CR2
, (
TIM_CR2_OIS1
 << 
SHIFT_TAB_OISx
[
iCh‚Ñ¢‚àöl
]), 
Id√ÄS√®√£
 << SHIFT_TAB_OISx[iChannel]);

1744 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´Id√ÄS√®√£
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1746 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1747  (
READ_BIT
(
TIMx
->
CR2
, (
TIM_CR2_OIS1
 << 
SHIFT_TAB_OISx
[
iCh‚Ñ¢‚àöl
])) >> SHIFT_TAB_OISx[iChannel]);

1765 
__STATIC_INLINE
 
LL_TIM_OC_E¬´b√ÄFa¬∞
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1767 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1768 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1769 
SET_BIT
(*
pReg
, (
TIM_CCMR1_OC1FE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1787 
__STATIC_INLINE
 
LL_TIM_OC_Di√üb√ÄFa¬∞
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1789 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1790 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1791 
CLEAR_BIT
(*
pReg
, (
TIM_CCMR1_OC1FE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1809 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_IsE¬´b√ÄdFa¬∞
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1811 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1812 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1813 
u√∂t32_t
 
b√¥f√µld
 = 
TIM_CCMR1_OC1FE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
];

1814  ((
READ_BIT
(*
pReg
, 
b√¥f√µld
) == bitfield) ? 1UL : 0UL);

1831 
__STATIC_INLINE
 
LL_TIM_OC_E¬´b√ÄP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1833 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1834 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1835 
SET_BIT
(*
pReg
, (
TIM_CCMR1_OC1PE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1852 
__STATIC_INLINE
 
LL_TIM_OC_Di√üb√ÄP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1854 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1855 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1856 
CLEAR_BIT
(*
pReg
, (
TIM_CCMR1_OC1PE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1873 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_IsE¬´b√ÄdP¬™lÔ¨Çd
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1875 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1876 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1877 
u√∂t32_t
 
b√¥f√µld
 = 
TIM_CCMR1_OC1PE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
];

1878  ((
READ_BIT
(*
pReg
, 
b√¥f√µld
) == bitfield) ? 1UL : 0UL);

1898 
__STATIC_INLINE
 
LL_TIM_OC_E¬´b√ÄC√Ä¬®
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1900 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1901 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1902 
SET_BIT
(*
pReg
, (
TIM_CCMR1_OC1CE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1921 
__STATIC_INLINE
 
LL_TIM_OC_Di√üb√ÄC√Ä¬®
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1923 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1924 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1925 
CLEAR_BIT
(*
pReg
, (
TIM_CCMR1_OC1CE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
]));

1946 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_IsE¬´b√ÄdC√Ä¬®
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

1948 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

1949 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

1950 
u√∂t32_t
 
b√¥f√µld
 = 
TIM_CCMR1_OC1CE
 << 
SHIFT_TAB_OCxx
[
iCh‚Ñ¢‚àöl
];

1951  ((
READ_BIT
(*
pReg
, 
b√¥f√µld
) == bitfield) ? 1UL : 0UL);

1964 
__STATIC_INLINE
 
LL_TIM_OC_S√´D√≥dTime
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
D√≥dTime
)

1966 
MODIFY_REG
(
TIMx
->
BDTR
, 
TIM_BDTR_DTG
, 
D√≥dTime
);

1978 
__STATIC_INLINE
 
LL_TIM_OC_S√´Com‚àë¬™CH1
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Com‚àë¬™V√Üue
)

1980 
WRITE_REG
(
TIMx
->
CCR1
, 
Com‚àë¬™V√Üue
);

1992 
__STATIC_INLINE
 
LL_TIM_OC_S√´Com‚àë¬™CH2
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Com‚àë¬™V√Üue
)

1994 
WRITE_REG
(
TIMx
->
CCR2
, 
Com‚àë¬™V√Üue
);

2006 
__STATIC_INLINE
 
LL_TIM_OC_S√´Com‚àë¬™CH3
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Com‚àë¬™V√Üue
)

2008 
WRITE_REG
(
TIMx
->
CCR3
, 
Com‚àë¬™V√Üue
);

2020 
__STATIC_INLINE
 
LL_TIM_OC_S√´Com‚àë¬™CH4
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Com‚àë¬™V√Üue
)

2022 
WRITE_REG
(
TIMx
->
CCR4
, 
Com‚àë¬™V√Üue
);

2033 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´Com‚àë¬™CH1
(
TIM_Ty‚â•Def
 *
TIMx
)

2035  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR1
));

2046 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´Com‚àë¬™CH2
(
TIM_Ty‚â•Def
 *
TIMx
)

2048  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR2
));

2059 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´Com‚àë¬™CH3
(
TIM_Ty‚â•Def
 *
TIMx
)

2061  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR3
));

2072 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_OC_G√´Com‚àë¬™CH4
(
TIM_Ty‚â•Def
 *
TIMx
)

2074  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR4
));

2118 
__STATIC_INLINE
 
LL_TIM_IC_C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
C‚ÅÑfigu√∏ti‚ÅÑ
)

2120 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2121 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2122 
MODIFY_REG
(*
pReg
, ((
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC1PSC
 | 
TIM_CCMR1_CC1S
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
]),

2123 ((
C‚ÅÑfigu√∏ti‚ÅÑ
 >> 16U√ã& (
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC1PSC
 | 
TIM_CCMR1_CC1S
)√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
]);

2124 
MODIFY_REG
(
TIMx
->
CCER
, ((
TIM_CCER_CC1NP
 | 
TIM_CCER_CC1P
√ã<< 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]),

2125 (
C‚ÅÑfigu√∏ti‚ÅÑ
 & (
TIM_CCER_CC1NP
 | 
TIM_CCER_CC1P
)√ã<< 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]);

2146 
__STATIC_INLINE
 
LL_TIM_IC_S√´AÀòiveI‚âàut
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
ICAÀòiveI‚âàut
)

2148 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2149 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2150 
MODIFY_REG
(*
pReg
, ((
TIM_CCMR1_CC1S
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
]), (
ICAÀòiveI‚âàut
 >> 16U) << SHIFT_TAB_ICxx[iChannel]);

2170 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´AÀòiveI‚âàut
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2172 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2173 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2174  ((
READ_BIT
(*
pReg
, ((
TIM_CCMR1_CC1S
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);

2196 
__STATIC_INLINE
 
LL_TIM_IC_S√´P¬™sÀá√Är
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
ICP¬™sÀá√Är
)

2198 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2199 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2200 
MODIFY_REG
(*
pReg
, ((
TIM_CCMR1_IC1PSC
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
]), (
ICP¬™sÀá√Är
 >> 16U) << SHIFT_TAB_ICxx[iChannel]);

2221 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´P¬™sÀá√Är
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2223 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2224 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2225  ((
READ_BIT
(*
pReg
, ((
TIM_CCMR1_IC1PSC
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);

2259 
__STATIC_INLINE
 
LL_TIM_IC_S√´F√ª√£r
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
ICF√ª√£r
)

2261 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2262 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2263 
MODIFY_REG
(*
pReg
, ((
TIM_CCMR1_IC1F
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
]), (
ICF√ª√£r
 >> 16U) << SHIFT_TAB_ICxx[iChannel]);

2296 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´F√ª√£r
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2298 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2299 c‚ÅÑ¬∞ 
__IO
 
u√∂t32_t
 *
pReg
 = (__IO u√∂t32_√†*)((u√∂t32_t)((u√∂t32_t)(&
TIMx
->
CCMR1
√ã+ 
OFFSET_TAB_CCMRx
[
iCh‚Ñ¢‚àöl
]));

2300  ((
READ_BIT
(*
pReg
, ((
TIM_CCMR1_IC1F
√ã<< 
SHIFT_TAB_ICxx
[
iCh‚Ñ¢‚àöl
])) >> SHIFT_TAB_ICxx[iChannel]) << 16U);

2323 
__STATIC_INLINE
 
LL_TIM_IC_S√´PÔ¨Å¬®√¥y
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
ICPÔ¨Å¬®√¥y
)

2325 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2326 
MODIFY_REG
(
TIMx
->
CCER
, ((
TIM_CCER_CC1NP
 | 
TIM_CCER_CC1P
√ã<< 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]),

2327 
ICPÔ¨Å¬®√¥y
 << 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]);

2349 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´PÔ¨Å¬®√¥y
(
TIM_Ty‚â•Def
 *
TIMx
, u√∂t32_√†
Ch‚Ñ¢‚àöl
)

2351 
u√∂t8_t
 
iCh‚Ñ¢‚àöl
 = 
TIM_GET_CHANNEL_INDEX
(
Ch‚Ñ¢‚àöl
);

2352  (
READ_BIT
(
TIMx
->
CCER
, ((
TIM_CCER_CC1NP
 | 
TIM_CCER_CC1P
√ã<< 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
])) >>

2353 
SHIFT_TAB_CCxP
[
iCh‚Ñ¢‚àöl
]);

2364 
__STATIC_INLINE
 
LL_TIM_IC_E¬´b√ÄXORComb√∂¬©i‚ÅÑ
(
TIM_Ty‚â•Def
 *
TIMx
)

2366 
SET_BIT
(
TIMx
->
CR2
, 
TIM_CR2_TI1S
);

2377 
__STATIC_INLINE
 
LL_TIM_IC_Di√üb√ÄXORComb√∂¬©i‚ÅÑ
(
TIM_Ty‚â•Def
 *
TIMx
)

2379 
CLEAR_BIT
(
TIMx
->
CR2
, 
TIM_CR2_TI1S
);

2390 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_IsE¬´b√ÄdXORComb√∂¬©i‚ÅÑ
(
TIM_Ty‚â•Def
 *
TIMx
)

2392  ((
READ_BIT
(
TIMx
->
CR2
, 
TIM_CR2_TI1S
) == (TIM_CR2_TI1S)) ? 1UL : 0UL);

2403 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´C‚â†tu¬™CH1
(
TIM_Ty‚â•Def
 *
TIMx
)

2405  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR1
));

2416 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´C‚â†tu¬™CH2
(
TIM_Ty‚â•Def
 *
TIMx
)

2418  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR2
));

2429 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´C‚â†tu¬™CH3
(
TIM_Ty‚â•Def
 *
TIMx
)

2431  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR3
));

2442 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IC_G√´C‚â†tu¬™CH4
(
TIM_Ty‚â•Def
 *
TIMx
)

2444  (
u√∂t32_t
)(
READ_REG
(
TIMx
->
CCR4
));

2463 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄEx√£‚à´√ÜClock
(
TIM_Ty‚â•Def
 *
TIMx
)

2465 
SET_BIT
(
TIMx
->
SMCR
, 
TIM_SMCR_ECE
);

2476 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄEx√£‚à´√ÜClock
(
TIM_Ty‚â•Def
 *
TIMx
)

2478 
CLEAR_BIT
(
TIMx
->
SMCR
, 
TIM_SMCR_ECE
);

2489 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdEx√£‚à´√ÜClock
(
TIM_Ty‚â•Def
 *
TIMx
)

2491  ((
READ_BIT
(
TIMx
->
SMCR
, 
TIM_SMCR_ECE
) == (TIM_SMCR_ECE)) ? 1UL : 0UL);

2513 
__STATIC_INLINE
 
LL_TIM_S√´ClockSourÀö
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
ClockSourÀö
)

2515 
MODIFY_REG
(
TIMx
->
SMCR
, 
TIM_SMCR_SMS
 | 
TIM_SMCR_ECE
, 
ClockSourÀö
);

2530 
__STATIC_INLINE
 
LL_TIM_S√´Encod√ÆMode
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Encod√ÆMode
)

2532 
MODIFY_REG
(
TIMx
->
SMCR
, 
TIM_SMCR_SMS
, 
Encod√ÆMode
);

2559 
__STATIC_INLINE
 
LL_TIM_S√´Trigg√ÆOu√ßut
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Tim√ÆSynchr‚ÅÑiz¬©i‚ÅÑ
)

2561 
MODIFY_REG
(
TIMx
->
CR2
, 
TIM_CR2_MMS
, 
Tim√ÆSynchr‚ÅÑiz¬©i‚ÅÑ
);

2577 
__STATIC_INLINE
 
LL_TIM_S√´S≈ìveMode
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
S≈ìveMode
)

2579 
MODIFY_REG
(
TIMx
->
SMCR
, 
TIM_SMCR_SMS
, 
S≈ìveMode
);

2599 
__STATIC_INLINE
 
LL_TIM_S√´Trigg√ÆI‚âàut
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Trigg√ÆI‚âàut
)

2601 
MODIFY_REG
(
TIMx
->
SMCR
, 
TIM_SMCR_TS
, 
Trigg√ÆI‚âàut
);

2612 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄMa¬∞√ÆS≈ìveMode
(
TIM_Ty‚â•Def
 *
TIMx
)

2614 
SET_BIT
(
TIMx
->
SMCR
, 
TIM_SMCR_MSM
);

2625 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄMa¬∞√ÆS≈ìveMode
(
TIM_Ty‚â•Def
 *
TIMx
)

2627 
CLEAR_BIT
(
TIMx
->
SMCR
, 
TIM_SMCR_MSM
);

2638 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdMa¬∞√ÆS≈ìveMode
(
TIM_Ty‚â•Def
 *
TIMx
)

2640  ((
READ_BIT
(
TIMx
->
SMCR
, 
TIM_SMCR_MSM
) == (TIM_SMCR_MSM)) ? 1UL : 0UL);

2678 
__STATIC_INLINE
 
LL_TIM_C‚ÅÑfigETR
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
ETRPÔ¨Å¬®√¥y
, u√∂t32_√†
ETRP¬™sÀá√Är
,

2679 
u√∂t32_t
 
ETRF√ª√£r
)

2681 
MODIFY_REG
(
TIMx
->
SMCR
, 
TIM_SMCR_ETP
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ETF
, 
ETRPÔ¨Å¬®√¥y
 | 
ETRP¬™sÀá√Är
 | 
ETRF√ª√£r
);

2699 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄBRK
(
TIM_Ty‚â•Def
 *
TIMx
)

2701 
__IO
 
u√∂t32_t
 
tm¬•eg
;

2702 
SET_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_BKE
);

2704 
tm¬•eg
 = 
READ_REG
(
TIMx
->
BDTR
);

2705 ()(
tm¬•eg
);

2716 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄBRK
(
TIM_Ty‚â•Def
 *
TIMx
)

2718 
__IO
 
u√∂t32_t
 
tm¬•eg
;

2719 
CLEAR_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_BKE
);

2721 
tm¬•eg
 = 
READ_REG
(
TIMx
->
BDTR
);

2722 ()(
tm¬•eg
);

2736 
__STATIC_INLINE
 
LL_TIM_C‚ÅÑfigBRK
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
B¬™akPÔ¨Å¬®√¥y
)

2738 
__IO
 
u√∂t32_t
 
tm¬•eg
;

2739 
MODIFY_REG
(
TIMx
->
BDTR
, 
TIM_BDTR_BKP
, 
B¬™akPÔ¨Å¬®√¥y
);

2741 
tm¬•eg
 = 
READ_REG
(
TIMx
->
BDTR
);

2742 ()(
tm¬•eg
);

2760 
__STATIC_INLINE
 
LL_TIM_S√´OffS√®√£s
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
OffS√®√£Id√Ä
, u√∂t32_√†
OffS√®√£Run
)

2762 
MODIFY_REG
(
TIMx
->
BDTR
, 
TIM_BDTR_OSSI
 | 
TIM_BDTR_OSSR
, 
OffS√®√£Id√Ä
 | 
OffS√®√£Run
);

2773 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄAutom¬©icOu√ßut
(
TIM_Ty‚â•Def
 *
TIMx
)

2775 
SET_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_AOE
);

2786 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄAutom¬©icOu√ßut
(
TIM_Ty‚â•Def
 *
TIMx
)

2788 
CLEAR_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_AOE
);

2799 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdAutom¬©icOu√ßut
(
TIM_Ty‚â•Def
 *
TIMx
)

2801  ((
READ_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_AOE
) == (TIM_BDTR_AOE)) ? 1UL : 0UL);

2814 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄA≈íOu√ßuts
(
TIM_Ty‚â•Def
 *
TIMx
)

2816 
SET_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_MOE
);

2829 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄA≈íOu√ßuts
(
TIM_Ty‚â•Def
 *
TIMx
)

2831 
CLEAR_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_MOE
);

2842 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdA≈íOu√ßuts
(
TIM_Ty‚â•Def
 *
TIMx
)

2844  ((
READ_BIT
(
TIMx
->
BDTR
, 
TIM_BDTR_MOE
) == (TIM_BDTR_MOE)) ? 1UL : 0UL);

2901 
__STATIC_INLINE
 
LL_TIM_C‚ÅÑfigDMABur¬∞
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
DMABur¬∞Ba¬£Add¬™ss
, u√∂t32_√†
DMABur¬∞L√≠gth
)

2903 
MODIFY_REG
(
TIMx
->
DCR
, (
TIM_DCR_DBL
 | 
TIM_DCR_DBA
), (
DMABur¬∞Ba¬£Add¬™ss
 | 
DMABur¬∞L√≠gth
));

2924 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

2926 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_UIF
));

2935 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

2937  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_UIF
) == (TIM_SR_UIF)) ? 1UL : 0UL);

2946 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

2948 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC1IF
));

2957 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

2959  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC1IF
) == (TIM_SR_CC1IF)) ? 1UL : 0UL);

2968 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

2970 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC2IF
));

2979 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

2981  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC2IF
) == (TIM_SR_CC2IF)) ? 1UL : 0UL);

2990 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

2992 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC3IF
));

3001 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3003  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC3IF
) == (TIM_SR_CC3IF)) ? 1UL : 0UL);

3012 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3014 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC4IF
));

3023 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3025  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC4IF
) == (TIM_SR_CC4IF)) ? 1UL : 0UL);

3034 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3036 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_COMIF
));

3045 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3047  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_COMIF
) == (TIM_SR_COMIF)) ? 1UL : 0UL);

3056 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3058 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_TIF
));

3067 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3069  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_TIF
) == (TIM_SR_TIF)) ? 1UL : 0UL);

3078 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_BRK
(
TIM_Ty‚â•Def
 *
TIMx
)

3080 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_BIF
));

3089 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_BRK
(
TIM_Ty‚â•Def
 *
TIMx
)

3091  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_BIF
) == (TIM_SR_BIF)) ? 1UL : 0UL);

3100 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC1OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3102 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC1OF
));

3111 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC1OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3113  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC1OF
) == (TIM_SR_CC1OF)) ? 1UL : 0UL);

3122 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC2OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3124 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC2OF
));

3133 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC2OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3135  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC2OF
) == (TIM_SR_CC2OF)) ? 1UL : 0UL);

3144 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC3OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3146 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC3OF
));

3155 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC3OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3157  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC3OF
) == (TIM_SR_CC3OF)) ? 1UL : 0UL);

3166 
__STATIC_INLINE
 
LL_TIM_C√Ä¬®F≈ìg_CC4OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3168 
WRITE_REG
(
TIMx
->
SR
, ~(
TIM_SR_CC4OF
));

3177 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsAÀòiveF≈ìg_CC4OVR
(
TIM_Ty‚â•Def
 *
TIMx
)

3179  ((
READ_BIT
(
TIMx
->
SR
, 
TIM_SR_CC4OF
) == (TIM_SR_CC4OF)) ? 1UL : 0UL);

3195 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3197 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_UIE
);

3206 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3208 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_UIE
);

3217 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3219  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_UIE
) == (TIM_DIER_UIE)) ? 1UL : 0UL);

3228 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3230 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC1IE
);

3239 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3241 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC1IE
);

3250 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3252  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC1IE
) == (TIM_DIER_CC1IE)) ? 1UL : 0UL);

3261 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3263 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC2IE
);

3272 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3274 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC2IE
);

3283 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3285  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC2IE
) == (TIM_DIER_CC2IE)) ? 1UL : 0UL);

3294 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3296 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC3IE
);

3305 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3307 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC3IE
);

3316 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3318  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC3IE
) == (TIM_DIER_CC3IE)) ? 1UL : 0UL);

3327 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3329 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC4IE
);

3338 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3340 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC4IE
);

3349 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3351  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC4IE
) == (TIM_DIER_CC4IE)) ? 1UL : 0UL);

3360 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3362 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_COMIE
);

3371 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3373 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_COMIE
);

3382 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3384  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_COMIE
) == (TIM_DIER_COMIE)) ? 1UL : 0UL);

3393 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3395 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_TIE
);

3404 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3406 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_TIE
);

3415 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3417  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_TIE
) == (TIM_DIER_TIE)) ? 1UL : 0UL);

3426 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄIT_BRK
(
TIM_Ty‚â•Def
 *
TIMx
)

3428 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_BIE
);

3437 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄIT_BRK
(
TIM_Ty‚â•Def
 *
TIMx
)

3439 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_BIE
);

3448 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdIT_BRK
(
TIM_Ty‚â•Def
 *
TIMx
)

3450  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_BIE
) == (TIM_DIER_BIE)) ? 1UL : 0UL);

3466 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3468 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_UDE
);

3477 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3479 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_UDE
);

3488 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3490  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_UDE
) == (TIM_DIER_UDE)) ? 1UL : 0UL);

3499 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3501 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC1DE
);

3510 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3512 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC1DE
);

3521 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3523  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC1DE
) == (TIM_DIER_CC1DE)) ? 1UL : 0UL);

3532 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3534 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC2DE
);

3543 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3545 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC2DE
);

3554 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3556  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC2DE
) == (TIM_DIER_CC2DE)) ? 1UL : 0UL);

3565 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3567 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC3DE
);

3576 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3578 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC3DE
);

3587 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3589  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC3DE
) == (TIM_DIER_CC3DE)) ? 1UL : 0UL);

3598 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3600 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC4DE
);

3609 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3611 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC4DE
);

3620 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3622  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_CC4DE
) == (TIM_DIER_CC4DE)) ? 1UL : 0UL);

3631 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3633 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_COMDE
);

3642 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3644 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_COMDE
);

3653 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3655  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_COMDE
) == (TIM_DIER_COMDE)) ? 1UL : 0UL);

3664 
__STATIC_INLINE
 
LL_TIM_E¬´b√ÄDMAReq_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3666 
SET_BIT
(
TIMx
->
DIER
, 
TIM_DIER_TDE
);

3675 
__STATIC_INLINE
 
LL_TIM_Di√üb√ÄDMAReq_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3677 
CLEAR_BIT
(
TIMx
->
DIER
, 
TIM_DIER_TDE
);

3686 
__STATIC_INLINE
 
u√∂t32_t
 
LL_TIM_IsE¬´b√ÄdDMAReq_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3688  ((
READ_BIT
(
TIMx
->
DIER
, 
TIM_DIER_TDE
) == (TIM_DIER_TDE)) ? 1UL : 0UL);

3704 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_UPDATE
(
TIM_Ty‚â•Def
 *
TIMx
)

3706 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_UG
);

3715 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_CC1
(
TIM_Ty‚â•Def
 *
TIMx
)

3717 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_CC1G
);

3726 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_CC2
(
TIM_Ty‚â•Def
 *
TIMx
)

3728 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_CC2G
);

3737 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_CC3
(
TIM_Ty‚â•Def
 *
TIMx
)

3739 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_CC3G
);

3748 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_CC4
(
TIM_Ty‚â•Def
 *
TIMx
)

3750 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_CC4G
);

3759 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_COM
(
TIM_Ty‚â•Def
 *
TIMx
)

3761 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_COMG
);

3770 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_TRIG
(
TIM_Ty‚â•Def
 *
TIMx
)

3772 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_TG
);

3781 
__STATIC_INLINE
 
LL_TIM_G√≠√Æ¬©eEv√≠t_BRK
(
TIM_Ty‚â•Def
 *
TIMx
)

3783 
SET_BIT
(
TIMx
->
EGR
, 
TIM_EGR_BG
);

3790 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

3795 
E¬∫‚ÄπS√®tus
 
LL_TIM_DeIn√¥
(
TIM_Ty‚â•Def
 *
TIMx
);

3796 
LL_TIM_S√•uÀòIn√¥
(
LL_TIM_In√¥Ty‚â•Def
 *
TIM_In√¥S√•uÀò
);

3797 
E¬∫‚ÄπS√®tus
 
LL_TIM_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_In√¥Ty‚â•Def
 *
TIM_In√¥S√•uÀò
);

3798 
LL_TIM_OC_S√•uÀòIn√¥
(
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OC_In√¥S√•uÀò
);

3799 
E¬∫‚ÄπS√®tus
 
LL_TIM_OC_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OC_In√¥S√•uÀò
);

3800 
LL_TIM_IC_S√•uÀòIn√¥
(
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
);

3801 
E¬∫‚ÄπS√®tus
 
LL_TIM_IC_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_IC_In√¥S√•uÀò
);

3802 
LL_TIM_ENCODER_S√•uÀòIn√¥
(
LL_TIM_ENCODER_In√¥Ty‚â•Def
 *
TIM_Encod√ÆIn√¥S√•uÀò
);

3803 
E¬∫‚ÄπS√®tus
 
LL_TIM_ENCODER_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_ENCODER_In√¥Ty‚â•Def
 *
TIM_Encod√ÆIn√¥S√•uÀò
);

3804 
LL_TIM_HALLSENSOR_S√•uÀòIn√¥
(
LL_TIM_HALLSENSOR_In√¥Ty‚â•Def
 *
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
);

3805 
E¬∫‚ÄπS√®tus
 
LL_TIM_HALLSENSOR_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_HALLSENSOR_In√¥Ty‚â•Def
 *
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
);

3806 
LL_TIM_BDTR_S√•uÀòIn√¥
(
LL_TIM_BDTR_In√¥Ty‚â•Def
 *
TIM_BDTRIn√¥S√•uÀò
);

3807 
E¬∫‚ÄπS√®tus
 
LL_TIM_BDTR_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_BDTR_In√¥Ty‚â•Def
 *
TIM_BDTRIn√¥S√•uÀò
);

3827 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usart.h

21 #i‚Äöde‚Ä°
__STM32F1xx_LL_USART_H


22 
	#__STM32F1xx_LL_USART_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
USART1
√ã|| def√∂ed (
USART2
√ã|| def√∂ed (
USART3
√ã|| def√∂ed (
UART4
√ã|| def√∂ed (
UART5
)

50 
	#USART_POSITION_GTPR_GT
 
USART_GTPR_GT_Pos


	)

56 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

66 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

76 
u√∂t32_t
 
BaudR¬©e
;

80 
u√∂t32_t
 
D¬©aWidth
;

85 
u√∂t32_t
 
St‚Ä∫B√¥s
;

90 
u√∂t32_t
 
P¬®√¥y
;

95 
u√∂t32_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
;

100 
u√∂t32_t
 
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
;

105 
u√∂t32_t
 
Ov√ÆSam‚àÇ√∂g
;

110 } 
	tLL_USART_In√¥Ty‚â•Def
;

117 
u√∂t32_t
 
ClockOu√ßut
;

124 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
;

130 
u√∂t32_t
 
ClockPha¬£
;

136 
u√∂t32_t
 
La¬∞B√¥ClockPul¬£
;

143 } 
	tLL_USART_ClockIn√¥Ty‚â•Def
;

159 
	#LL_USART_SR_PE
 
USART_SR_PE


	)

160 
	#LL_USART_SR_FE
 
USART_SR_FE


	)

161 
	#LL_USART_SR_NE
 
USART_SR_NE


	)

162 
	#LL_USART_SR_ORE
 
USART_SR_ORE


	)

163 
	#LL_USART_SR_IDLE
 
USART_SR_IDLE


	)

164 
	#LL_USART_SR_RXNE
 
USART_SR_RXNE


	)

165 
	#LL_USART_SR_TC
 
USART_SR_TC


	)

166 
	#LL_USART_SR_TXE
 
USART_SR_TXE


	)

167 
	#LL_USART_SR_LBD
 
USART_SR_LBD


	)

168 
	#LL_USART_SR_CTS
 
USART_SR_CTS


	)

177 
	#LL_USART_CR1_IDLEIE
 
USART_CR1_IDLEIE


	)

178 
	#LL_USART_CR1_RXNEIE
 
USART_CR1_RXNEIE


	)

179 
	#LL_USART_CR1_TCIE
 
USART_CR1_TCIE


	)

180 
	#LL_USART_CR1_TXEIE
 
USART_CR1_TXEIE


	)

181 
	#LL_USART_CR1_PEIE
 
USART_CR1_PEIE


	)

182 
	#LL_USART_CR2_LBDIE
 
USART_CR2_LBDIE


	)

183 
	#LL_USART_CR3_EIE
 
USART_CR3_EIE


	)

184 
	#LL_USART_CR3_CTSIE
 
USART_CR3_CTSIE


	)

192 
	#LL_USART_DIRECTION_NONE
 0x00000000U

	)

193 
	#LL_USART_DIRECTION_RX
 
USART_CR1_RE


	)

194 
	#LL_USART_DIRECTION_TX
 
USART_CR1_TE


	)

195 
	#LL_USART_DIRECTION_TX_RX
 (
USART_CR1_TE
 |
USART_CR1_RE
√ã

	)

203 
	#LL_USART_PARITY_NONE
 0x00000000U

	)

204 
	#LL_USART_PARITY_EVEN
 
USART_CR1_PCE


	)

205 
	#LL_USART_PARITY_ODD
 (
USART_CR1_PCE
 | 
USART_CR1_PS
√ã

	)

213 
	#LL_USART_WAKEUP_IDLELINE
 0x00000000U

	)

214 
	#LL_USART_WAKEUP_ADDRESSMARK
 
USART_CR1_WAKE


	)

222 
	#LL_USART_DATAWIDTH_8B
 0x00000000U

	)

223 
	#LL_USART_DATAWIDTH_9B
 
USART_CR1_M


	)

231 
	#LL_USART_OVERSAMPLING_16
 0x00000000U

	)

232 #i‚Ä° 
def√∂ed
(
USART_CR1_OVER8
)

233 
	#LL_USART_OVERSAMPLING_8
 
USART_CR1_OVER8


	)

239 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

244 
	#LL_USART_CLOCK_DISABLE
 0x00000000U

	)

245 
	#LL_USART_CLOCK_ENABLE
 
USART_CR2_CLKEN


	)

254 
	#LL_USART_LASTCLKPULSE_NO_OUTPUT
 0x00000000U

	)

255 
	#LL_USART_LASTCLKPULSE_OUTPUT
 
USART_CR2_LBCL


	)

263 
	#LL_USART_PHASE_1EDGE
 0x00000000U

	)

264 
	#LL_USART_PHASE_2EDGE
 
USART_CR2_CPHA


	)

272 
	#LL_USART_POLARITY_LOW
 0x00000000U

	)

273 
	#LL_USART_POLARITY_HIGH
 
USART_CR2_CPOL


	)

281 
	#LL_USART_STOPBITS_0_5
 
USART_CR2_STOP_0


	)

282 
	#LL_USART_STOPBITS_1
 0x00000000U

	)

283 
	#LL_USART_STOPBITS_1_5
 (
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
√ã

	)

284 
	#LL_USART_STOPBITS_2
 
USART_CR2_STOP_1


	)

292 
	#LL_USART_HWCONTROL_NONE
 0x00000000U

	)

293 
	#LL_USART_HWCONTROL_RTS
 
USART_CR3_RTSE


	)

294 
	#LL_USART_HWCONTROL_CTS
 
USART_CR3_CTSE


	)

295 
	#LL_USART_HWCONTROL_RTS_CTS
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
√ã

	)

303 
	#LL_USART_IRDA_POWER_NORMAL
 0x00000000U

	)

304 
	#LL_USART_IRDA_POWER_LOW
 
USART_CR3_IRLP


	)

312 
	#LL_USART_LINBREAK_DETECT_10B
 0x00000000U

	)

313 
	#LL_USART_LINBREAK_DETECT_11B
 
USART_CR2_LBDL


	)

338 
	#LL_USART_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

346 
	#LL_USART_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

362 
	#__LL_USART_DIV_SAMPLING8_100
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(((__PERIPHCLK__)*25)/(2*(__BAUDRATE__)))

	)

363 
	#__LL_USART_DIVMANT_SAMPLING8
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(
	`__LL_USART_DIV_SAMPLING8_100
((__PERIPHCLK__), (__BAUDRATE__))/100)

	)

364 
	#__LL_USART_DIVFRAQ_SAMPLING8
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(((
	`__LL_USART_DIV_SAMPLING8_100
((__PERIPHCLK__), (__BAUDRATE__)√ã- (
	`__LL_USART_DIVMANT_SAMPLING8
((__PERIPHCLK__), (__BAUDRATE__)√ã* 100)√ã* 8 + 50√ã/ 100)

	)

367 
	#__LL_USART_DIV_SAMPLING8
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(((
	`__LL_USART_DIVMANT_SAMPLING8
((__PERIPHCLK__), (__BAUDRATE__)) << 4) + \

368 ((
	`__LL_USART_DIVFRAQ_SAMPLING8
((
__PERIPHCLK__
), (
__BAUDRATE__
)) & 0xF8) << 1)) + \

369 (
	`__LL_USART_DIVFRAQ_SAMPLING8
((
__PERIPHCLK__
), (
__BAUDRATE__
)√ã& 0x07))

	)

378 
	#__LL_USART_DIV_SAMPLING16_100
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(((__PERIPHCLK__)*25)/(4*(__BAUDRATE__)))

	)

379 
	#__LL_USART_DIVMANT_SAMPLING16
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(
	`__LL_USART_DIV_SAMPLING16_100
((__PERIPHCLK__), (__BAUDRATE__))/100)

	)

380 
	#__LL_USART_DIVFRAQ_SAMPLING16
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã((((
	`__LL_USART_DIV_SAMPLING16_100
((__PERIPHCLK__), (__BAUDRATE__)√ã- (
	`__LL_USART_DIVMANT_SAMPLING16
((__PERIPHCLK__), (__BAUDRATE__)√ã* 100)√ã* 16√ã+ 50√ã/ 100)

	)

383 
	#__LL_USART_DIV_SAMPLING16
(
__PERIPHCLK__
, 
__BAUDRATE__
√ã(((
	`__LL_USART_DIVMANT_SAMPLING16
((__PERIPHCLK__), (__BAUDRATE__)) << 4) + \

384 (
	`__LL_USART_DIVFRAQ_SAMPLING16
((
__PERIPHCLK__
), (
__BAUDRATE__
)) & 0xF0)) + \

385 (
	`__LL_USART_DIVFRAQ_SAMPLING16
((
__PERIPHCLK__
), (
__BAUDRATE__
)√ã& 0x0F))

	)

411 
__STATIC_INLINE
 
LL_USART_E¬´b√Ä
(
USART_Ty‚â•Def
 *
USARTx
)

413 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_UE
);

425 
__STATIC_INLINE
 
LL_USART_Di√üb√Ä
(
USART_Ty‚â•Def
 *
USARTx
)

427 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_UE
);

436 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√Äd
(
USART_Ty‚â•Def
 *
USARTx
)

438  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_UE
) == (USART_CR1_UE));

447 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄD√∫eÀòi‚ÅÑRx
(
USART_Ty‚â•Def
 *
USARTx
)

449 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_RE
);

458 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄD√∫eÀòi‚ÅÑRx
(
USART_Ty‚â•Def
 *
USARTx
)

460 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_RE
);

469 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄD√∫eÀòi‚ÅÑTx
(
USART_Ty‚â•Def
 *
USARTx
)

471 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_TE
);

480 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄD√∫eÀòi‚ÅÑTx
(
USART_Ty‚â•Def
 *
USARTx
)

482 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_TE
);

498 
__STATIC_INLINE
 
LL_USART_S√´T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
)

500 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_RE
 | 
USART_CR1_TE
, 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
);

514 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
(
USART_Ty‚â•Def
 *
USARTx
)

516  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_RE
 | 
USART_CR1_TE
));

533 
__STATIC_INLINE
 
LL_USART_S√´P¬®√¥y
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
P¬®√¥y
)

535 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_PS
 | 
USART_CR1_PCE
, 
P¬®√¥y
);

548 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´P¬®√¥y
(
USART_Ty‚â•Def
 *
USARTx
)

550  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_PS
 | 
USART_CR1_PCE
));

562 
__STATIC_INLINE
 
LL_USART_S√´WakeUpM√´hod
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
M√´hod
)

564 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_WAKE
, 
M√´hod
);

575 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´WakeUpM√´hod
(
USART_Ty‚â•Def
 *
USARTx
)

577  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_WAKE
));

589 
__STATIC_INLINE
 
LL_USART_S√´D¬©aWidth
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
D¬©aWidth
)

591 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_M
, 
D¬©aWidth
);

602 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´D¬©aWidth
(
USART_Ty‚â•Def
 *
USARTx
)

604  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_M
));

607 #i‚Ä°
def√∂ed
(
USART_CR1_OVER8
)

617 
__STATIC_INLINE
 
LL_USART_S√´Ov√ÆSam‚àÇ√∂g
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
Ov√ÆSam‚àÇ√∂g
)

619 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_OVER8
, 
Ov√ÆSam‚àÇ√∂g
);

630 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´Ov√ÆSam‚àÇ√∂g
(
USART_Ty‚â•Def
 *
USARTx
)

632  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_OVER8
));

647 
__STATIC_INLINE
 
LL_USART_S√´La¬∞ClkPul¬£Ou√ßut
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
La¬∞B√¥ClockPul¬£
)

649 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_LBCL
, 
La¬∞B√¥ClockPul¬£
);

663 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´La¬∞ClkPul¬£Ou√ßut
(
USART_Ty‚â•Def
 *
USARTx
)

665  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBCL
));

679 
__STATIC_INLINE
 
LL_USART_S√´ClockPha¬£
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
ClockPha¬£
)

681 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_CPHA
, 
ClockPha¬£
);

694 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´ClockPha¬£
(
USART_Ty‚â•Def
 *
USARTx
)

696  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_CPHA
));

710 
__STATIC_INLINE
 
LL_USART_S√´ClockPÔ¨Å¬®√¥y
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
ClockPÔ¨Å¬®√¥y
)

712 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_CPOL
, 
ClockPÔ¨Å¬®√¥y
);

725 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´ClockPÔ¨Å¬®√¥y
(
USART_Ty‚â•Def
 *
USARTx
)

727  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_CPOL
));

753 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigClock
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
Pha¬£
, u√∂t32_√†
PÔ¨Å¬®√¥y
, u√∂t32_√†
LBCPOu√ßut
)

755 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_LBCL
, 
Pha¬£
 | 
PÔ¨Å¬®√¥y
 | 
LBCPOu√ßut
);

766 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄSCLKOu√ßut
(
USART_Ty‚â•Def
 *
USARTx
)

768 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
);

779 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄSCLKOu√ßut
(
USART_Ty‚â•Def
 *
USARTx
)

781 
CLEAR_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
);

792 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdSCLKOu√ßut
(
USART_Ty‚â•Def
 *
USARTx
)

794  (
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
) == (USART_CR2_CLKEN));

808 
__STATIC_INLINE
 
LL_USART_S√´St‚Ä∫B√¥sL√≠gth
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
St‚Ä∫B√¥s
)

810 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_STOP
, 
St‚Ä∫B√¥s
);

823 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´St‚Ä∫B√¥sL√≠gth
(
USART_Ty‚â•Def
 *
USARTx
)

825  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_STOP
));

853 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigCh¬®aÀò√Æ
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
D¬©aWidth
, u√∂t32_√†
P¬®√¥y
,

854 
u√∂t32_t
 
St‚Ä∫B√¥s
)

856 
MODIFY_REG
(
USARTx
->
CR1
, 
USART_CR1_PS
 | 
USART_CR1_PCE
 | 
USART_CR1_M
, 
P¬®√¥y
 | 
D¬©aWidth
);

857 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_STOP
, 
St‚Ä∫B√¥s
);

869 
__STATIC_INLINE
 
LL_USART_S√´NodeAdd¬™ss
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
NodeAdd¬™ss
)

871 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_ADD
, (
NodeAdd¬™ss
 & USART_CR2_ADD));

881 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´NodeAdd¬™ss
(
USART_Ty‚â•Def
 *
USARTx
)

883  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_ADD
));

894 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄRTSHWFlowC√•l
(
USART_Ty‚â•Def
 *
USARTx
)

896 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_RTSE
);

907 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄRTSHWFlowC√•l
(
USART_Ty‚â•Def
 *
USARTx
)

909 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_RTSE
);

920 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄCTSHWFlowC√•l
(
USART_Ty‚â•Def
 *
USARTx
)

922 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSE
);

933 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄCTSHWFlowC√•l
(
USART_Ty‚â•Def
 *
USARTx
)

935 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSE
);

952 
__STATIC_INLINE
 
LL_USART_S√´HWFlowC√•l
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
)

954 
MODIFY_REG
(
USARTx
->
CR3
, 
USART_CR3_RTSE
 | 
USART_CR3_CTSE
, 
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
);

970 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´HWFlowC√•l
(
USART_Ty‚â•Def
 *
USARTx
)

972  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

975 #i‚Ä°
def√∂ed
(
USART_CR3_ONEBIT
)

982 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄO‚àöB√¥Samp
(
USART_Ty‚â•Def
 *
USARTx
)

984 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_ONEBIT
);

993 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄO‚àöB√¥Samp
(
USART_Ty‚â•Def
 *
USARTx
)

995 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_ONEBIT
);

1004 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdO‚àöB√¥Samp
(
USART_Ty‚â•Def
 *
USARTx
)

1006  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_ONEBIT
) == (USART_CR3_ONEBIT));

1010 #i‚Ä°
def√∂ed
(
USART_CR1_OVER8
)

1026 
__STATIC_INLINE
 
LL_USART_S√´BaudR¬©e
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
P√Æ√πhClk
, u√∂t32_√†
Ov√ÆSam‚àÇ√∂g
,

1027 
u√∂t32_t
 
BaudR¬©e
)

1029 i‚Ä°(
Ov√ÆSam‚àÇ√∂g
 =Ô£ø
LL_USART_OVERSAMPLING_8
)

1031 
USARTx
->
BRR
 = (
u√∂t16_t
)(
__LL_USART_DIV_SAMPLING8
(
P√Æ√πhClk
, 
BaudR¬©e
));

1035 
USARTx
->
BRR
 = (
u√∂t16_t
)(
__LL_USART_DIV_SAMPLING16
(
P√Æ√πhClk
, 
BaudR¬©e
));

1051 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´BaudR¬©e
(
USART_Ty‚â•Def
 *
USARTx
, u√∂t32_√†
P√Æ√πhClk
, u√∂t32_√†
Ov√ÆSam‚àÇ√∂g
)

1053 
u√∂t32_t
 
u√üœÄdiv
 = 0x0U;

1054 
u√∂t32_t
 
b¬∫¬™su‚Ä¶
 = 0x0U;

1056 
u√üœÄdiv
 = 
USARTx
->
BRR
;

1058 i‚Ä°(
Ov√ÆSam‚àÇ√∂g
 =Ô£ø
LL_USART_OVERSAMPLING_8
)

1060 i‚Ä°((
u√üœÄdiv
 & 0xFFF7U) != 0U)

1062 
u√üœÄdiv
 = (
u√∂t16_t
)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;

1063 
b¬∫¬™su‚Ä¶
 = (
P√Æ√πhClk
 * 2U√ã/ 
u√üœÄdiv
;

1068 i‚Ä°((
u√üœÄdiv
 & 0xFFFFU) != 0U)

1070 
b¬∫¬™su‚Ä¶
 = 
P√Æ√πhClk
 / 
u√üœÄdiv
;

1073  (
b¬∫¬™su‚Ä¶
);

1088 
__STATIC_INLINE
 
LL_USART_S√´BaudR¬©e
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
P√Æ√πhClk
, u√∂t32_√†
BaudR¬©e
)

1090 
USARTx
->
BRR
 = (
u√∂t16_t
)(
__LL_USART_DIV_SAMPLING16
(
P√Æ√πhClk
, 
BaudR¬©e
));

1102 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´BaudR¬©e
(
USART_Ty‚â•Def
 *
USARTx
, u√∂t32_√†
P√Æ√πhClk
)

1104 
u√∂t32_t
 
u√üœÄdiv
 = 0x0U;

1105 
u√∂t32_t
 
b¬∫¬™su‚Ä¶
 = 0x0U;

1107 
u√üœÄdiv
 = 
USARTx
->
BRR
;

1109 i‚Ä°((
u√üœÄdiv
 & 0xFFFFU) != 0U)

1111 
b¬∫¬™su‚Ä¶
 = 
P√Æ√πhClk
 / 
u√üœÄdiv
;

1113  (
b¬∫¬™su‚Ä¶
);

1133 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIrda
(
USART_Ty‚â•Def
 *
USARTx
)

1135 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
);

1146 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIrda
(
USART_Ty‚â•Def
 *
USARTx
)

1148 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
);

1159 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIrda
(
USART_Ty‚â•Def
 *
USARTx
)

1161  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
) == (USART_CR3_IREN));

1175 
__STATIC_INLINE
 
LL_USART_S√´IrdaPow√ÆMode
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
Pow√ÆMode
)

1177 
MODIFY_REG
(
USARTx
->
CR3
, 
USART_CR3_IRLP
, 
Pow√ÆMode
);

1190 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´IrdaPow√ÆMode
(
USART_Ty‚â•Def
 *
USARTx
)

1192  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_IRLP
));

1205 
__STATIC_INLINE
 
LL_USART_S√´IrdaP¬™sÀá√Är
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
P¬™sÀá√ÄrV√Üue
)

1207 
MODIFY_REG
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
, 
P¬™sÀá√ÄrV√Üue
);

1219 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´IrdaP¬™sÀá√Är
(
USART_Ty‚â•Def
 *
USARTx
)

1221  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
));

1240 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄSm¬®tÀárdNACK
(
USART_Ty‚â•Def
 *
USARTx
)

1242 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_NACK
);

1253 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄSm¬®tÀárdNACK
(
USART_Ty‚â•Def
 *
USARTx
)

1255 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_NACK
);

1266 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdSm¬®tÀárdNACK
(
USART_Ty‚â•Def
 *
USARTx
)

1268  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_NACK
) == (USART_CR3_NACK));

1279 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄSm¬®tÀárd
(
USART_Ty‚â•Def
 *
USARTx
)

1281 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
);

1292 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄSm¬®tÀárd
(
USART_Ty‚â•Def
 *
USARTx
)

1294 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
);

1305 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdSm¬®tÀárd
(
USART_Ty‚â•Def
 *
USARTx
)

1307  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
) == (USART_CR3_SCEN));

1320 
__STATIC_INLINE
 
LL_USART_S√´Sm¬®tÀárdP¬™sÀá√Är
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
P¬™sÀá√ÄrV√Üue
)

1322 
MODIFY_REG
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
, 
P¬™sÀá√ÄrV√Üue
);

1334 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´Sm¬®tÀárdP¬™sÀá√Är
(
USART_Ty‚â•Def
 *
USARTx
)

1336  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
GTPR
, 
USART_GTPR_PSC
));

1349 
__STATIC_INLINE
 
LL_USART_S√´Sm¬®tÀárdGu¬®dTime
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
Gu¬®dTime
)

1351 
MODIFY_REG
(
USARTx
->
GTPR
, 
USART_GTPR_GT
, 
Gu¬®dTime
 << 
USART_POSITION_GTPR_GT
);

1363 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´Sm¬®tÀárdGu¬®dTime
(
USART_Ty‚â•Def
 *
USARTx
)

1365  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
GTPR
, 
USART_GTPR_GT
√ã>> 
USART_POSITION_GTPR_GT
);

1384 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄH√ÜfDu‚àÇex
(
USART_Ty‚â•Def
 *
USARTx
)

1386 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
);

1397 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄH√ÜfDu‚àÇex
(
USART_Ty‚â•Def
 *
USARTx
)

1399 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
);

1410 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdH√ÜfDu‚àÇex
(
USART_Ty‚â•Def
 *
USARTx
)

1412  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
) == (USART_CR3_HDSEL));

1434 
__STATIC_INLINE
 
LL_USART_S√´LINBrkD√´eÀòi‚ÅÑL√≠
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t32_t
 
LINBDL√≠gth
)

1436 
MODIFY_REG
(
USARTx
->
CR2
, 
USART_CR2_LBDL
, 
LINBDL√≠gth
);

1449 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_G√´LINBrkD√´eÀòi‚ÅÑL√≠
(
USART_Ty‚â•Def
 *
USARTx
)

1451  (
u√∂t32_t
)(
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDL
));

1462 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄLIN
(
USART_Ty‚â•Def
 *
USARTx
)

1464 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
);

1475 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄLIN
(
USART_Ty‚â•Def
 *
USARTx
)

1477 
CLEAR_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
);

1488 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdLIN
(
USART_Ty‚â•Def
 *
USARTx
)

1490  (
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
) == (USART_CR2_LINEN));

1526 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigAsyncMode
(
USART_Ty‚â•Def
 *
USARTx
)

1531 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

1532 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

1562 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigSyncMode
(
USART_Ty‚â•Def
 *
USARTx
)

1567 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
));

1568 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

1570 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_CLKEN
);

1602 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigLINMode
(
USART_Ty‚â•Def
 *
USARTx
)

1607 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_CLKEN
 | 
USART_CR2_STOP
));

1608 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
));

1610 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_LINEN
);

1640 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigH√ÜfDu‚àÇexMode
(
USART_Ty‚â•Def
 *
USARTx
)

1645 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

1646 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_IREN
));

1648 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_HDSEL
);

1680 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigSm¬®tÀárdMode
(
USART_Ty‚â•Def
 *
USARTx
)

1685 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
));

1686 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

1689 
SET_BIT
(
USARTx
->
CR2
, (
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
 | 
USART_CR2_CLKEN
));

1691 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_SCEN
);

1723 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigIrdaMode
(
USART_Ty‚â•Def
 *
USARTx
)

1728 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
 | 
USART_CR2_STOP
));

1729 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
));

1731 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_IREN
);

1761 
__STATIC_INLINE
 
LL_USART_C‚ÅÑfigMu‚Ä¶iProÀössMode
(
USART_Ty‚â•Def
 *
USARTx
)

1766 
CLEAR_BIT
(
USARTx
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

1767 
CLEAR_BIT
(
USARTx
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

1784 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_PE
(
USART_Ty‚â•Def
 *
USARTx
)

1786  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_PE
) == (USART_SR_PE));

1795 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_FE
(
USART_Ty‚â•Def
 *
USARTx
)

1797  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_FE
) == (USART_SR_FE));

1806 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_NE
(
USART_Ty‚â•Def
 *
USARTx
)

1808  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_NE
) == (USART_SR_NE));

1817 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_ORE
(
USART_Ty‚â•Def
 *
USARTx
)

1819  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_ORE
) == (USART_SR_ORE));

1828 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_IDLE
(
USART_Ty‚â•Def
 *
USARTx
)

1830  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_IDLE
) == (USART_SR_IDLE));

1839 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_RXNE
(
USART_Ty‚â•Def
 *
USARTx
)

1841  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_RXNE
) == (USART_SR_RXNE));

1850 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_TC
(
USART_Ty‚â•Def
 *
USARTx
)

1852  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_TC
) == (USART_SR_TC));

1861 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_TXE
(
USART_Ty‚â•Def
 *
USARTx
)

1863  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_TXE
) == (USART_SR_TXE));

1874 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_LBD
(
USART_Ty‚â•Def
 *
USARTx
)

1876  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_LBD
) == (USART_SR_LBD));

1887 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_nCTS
(
USART_Ty‚â•Def
 *
USARTx
)

1889  (
READ_BIT
(
USARTx
->
SR
, 
USART_SR_CTS
) == (USART_SR_CTS));

1898 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_SBK
(
USART_Ty‚â•Def
 *
USARTx
)

1900  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_SBK
) == (USART_CR1_SBK));

1909 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsAÀòiveF≈ìg_RWU
(
USART_Ty‚â•Def
 *
USARTx
)

1911  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_RWU
) == (USART_CR1_RWU));

1924 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_PE
(
USART_Ty‚â•Def
 *
USARTx
)

1926 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1927 
tm¬•eg
 = 
USARTx
->
SR
;

1928 (√ã
tm¬•eg
;

1929 
tm¬•eg
 = 
USARTx
->
DR
;

1930 (√ã
tm¬•eg
;

1943 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_FE
(
USART_Ty‚â•Def
 *
USARTx
)

1945 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1946 
tm¬•eg
 = 
USARTx
->
SR
;

1947 (√ã
tm¬•eg
;

1948 
tm¬•eg
 = 
USARTx
->
DR
;

1949 (√ã
tm¬•eg
;

1962 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_NE
(
USART_Ty‚â•Def
 *
USARTx
)

1964 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1965 
tm¬•eg
 = 
USARTx
->
SR
;

1966 (√ã
tm¬•eg
;

1967 
tm¬•eg
 = 
USARTx
->
DR
;

1968 (√ã
tm¬•eg
;

1981 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_ORE
(
USART_Ty‚â•Def
 *
USARTx
)

1983 
__IO
 
u√∂t32_t
 
tm¬•eg
;

1984 
tm¬•eg
 = 
USARTx
->
SR
;

1985 (√ã
tm¬•eg
;

1986 
tm¬•eg
 = 
USARTx
->
DR
;

1987 (√ã
tm¬•eg
;

2000 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_IDLE
(
USART_Ty‚â•Def
 *
USARTx
)

2002 
__IO
 
u√∂t32_t
 
tm¬•eg
;

2003 
tm¬•eg
 = 
USARTx
->
SR
;

2004 (√ã
tm¬•eg
;

2005 
tm¬•eg
 = 
USARTx
->
DR
;

2006 (√ã
tm¬•eg
;

2015 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_TC
(
USART_Ty‚â•Def
 *
USARTx
)

2017 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_TC
));

2026 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_RXNE
(
USART_Ty‚â•Def
 *
USARTx
)

2028 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_RXNE
));

2039 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_LBD
(
USART_Ty‚â•Def
 *
USARTx
)

2041 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_LBD
));

2052 
__STATIC_INLINE
 
LL_USART_C√Ä¬®F≈ìg_nCTS
(
USART_Ty‚â•Def
 *
USARTx
)

2054 
WRITE_REG
(
USARTx
->
SR
, ~(
USART_SR_CTS
));

2071 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_IDLE
(
USART_Ty‚â•Def
 *
USARTx
)

2073 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_IDLEIE
);

2082 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_RXNE
(
USART_Ty‚â•Def
 *
USARTx
)

2084 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_RXNEIE
);

2093 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_TC
(
USART_Ty‚â•Def
 *
USARTx
)

2095 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_TCIE
);

2104 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_TXE
(
USART_Ty‚â•Def
 *
USARTx
)

2106 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_TXEIE
);

2115 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_PE
(
USART_Ty‚â•Def
 *
USARTx
)

2117 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_PEIE
);

2128 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_LBD
(
USART_Ty‚â•Def
 *
USARTx
)

2130 
SET_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDIE
);

2143 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_ERROR
(
USART_Ty‚â•Def
 *
USARTx
)

2145 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_EIE
);

2156 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄIT_CTS
(
USART_Ty‚â•Def
 *
USARTx
)

2158 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSIE
);

2167 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_IDLE
(
USART_Ty‚â•Def
 *
USARTx
)

2169 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_IDLEIE
);

2178 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_RXNE
(
USART_Ty‚â•Def
 *
USARTx
)

2180 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_RXNEIE
);

2189 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_TC
(
USART_Ty‚â•Def
 *
USARTx
)

2191 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_TCIE
);

2200 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_TXE
(
USART_Ty‚â•Def
 *
USARTx
)

2202 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_TXEIE
);

2211 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_PE
(
USART_Ty‚â•Def
 *
USARTx
)

2213 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_PEIE
);

2224 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_LBD
(
USART_Ty‚â•Def
 *
USARTx
)

2226 
CLEAR_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDIE
);

2239 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_ERROR
(
USART_Ty‚â•Def
 *
USARTx
)

2241 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_EIE
);

2252 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄIT_CTS
(
USART_Ty‚â•Def
 *
USARTx
)

2254 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSIE
);

2263 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_IDLE
(
USART_Ty‚â•Def
 *
USARTx
)

2265  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_IDLEIE
) == (USART_CR1_IDLEIE));

2274 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_RXNE
(
USART_Ty‚â•Def
 *
USARTx
)

2276  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_RXNEIE
) == (USART_CR1_RXNEIE));

2285 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_TC
(
USART_Ty‚â•Def
 *
USARTx
)

2287  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_TCIE
) == (USART_CR1_TCIE));

2296 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_TXE
(
USART_Ty‚â•Def
 *
USARTx
)

2298  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_TXEIE
) == (USART_CR1_TXEIE));

2307 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_PE
(
USART_Ty‚â•Def
 *
USARTx
)

2309  (
READ_BIT
(
USARTx
->
CR1
, 
USART_CR1_PEIE
) == (USART_CR1_PEIE));

2320 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_LBD
(
USART_Ty‚â•Def
 *
USARTx
)

2322  (
READ_BIT
(
USARTx
->
CR2
, 
USART_CR2_LBDIE
) == (USART_CR2_LBDIE));

2331 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_ERROR
(
USART_Ty‚â•Def
 *
USARTx
)

2333  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_EIE
) == (USART_CR3_EIE));

2344 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdIT_CTS
(
USART_Ty‚â•Def
 *
USARTx
)

2346  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_CTSIE
) == (USART_CR3_CTSIE));

2363 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄDMAReq_RX
(
USART_Ty‚â•Def
 *
USARTx
)

2365 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAR
);

2374 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄDMAReq_RX
(
USART_Ty‚â•Def
 *
USARTx
)

2376 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAR
);

2385 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdDMAReq_RX
(
USART_Ty‚â•Def
 *
USARTx
)

2387  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAR
) == (USART_CR3_DMAR));

2396 
__STATIC_INLINE
 
LL_USART_E¬´b√ÄDMAReq_TX
(
USART_Ty‚â•Def
 *
USARTx
)

2398 
SET_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAT
);

2407 
__STATIC_INLINE
 
LL_USART_Di√üb√ÄDMAReq_TX
(
USART_Ty‚â•Def
 *
USARTx
)

2409 
CLEAR_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAT
);

2418 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_IsE¬´b√ÄdDMAReq_TX
(
USART_Ty‚â•Def
 *
USARTx
)

2420  (
READ_BIT
(
USARTx
->
CR3
, 
USART_CR3_DMAT
) == (USART_CR3_DMAT));

2430 
__STATIC_INLINE
 
u√∂t32_t
 
LL_USART_DMA_G√´RegAddr
(
USART_Ty‚â•Def
 *
USARTx
)

2433  ((
u√∂t32_t
√ã& (
USARTx
->
DR
));

2450 
__STATIC_INLINE
 
u√∂t8_t
 
LL_USART_ReÀöiveD¬©a8
(
USART_Ty‚â•Def
 *
USARTx
)

2452  (
u√∂t8_t
)(
READ_BIT
(
USARTx
->
DR
, 
USART_DR_DR
));

2461 
__STATIC_INLINE
 
u√∂t16_t
 
LL_USART_ReÀöiveD¬©a9
(
USART_Ty‚â•Def
 *
USARTx
)

2463  (
u√∂t16_t
)(
READ_BIT
(
USARTx
->
DR
, 
USART_DR_DR
));

2473 
__STATIC_INLINE
 
LL_USART_T√∏nsm√¥D¬©a8
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t8_t
 
V√Üue
)

2475 
USARTx
->
DR
 = 
V√Üue
;

2485 
__STATIC_INLINE
 
LL_USART_T√∏nsm√¥D¬©a9
(
USART_Ty‚â•Def
 *
USARTx
, 
u√∂t16_t
 
V√Üue
)

2487 
USARTx
->
DR
 = 
V√Üue
 & 0x1FFU;

2504 
__STATIC_INLINE
 
LL_USART_Reque¬∞B¬™akS√≠d√∂g
(
USART_Ty‚â•Def
 *
USARTx
)

2506 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_SBK
);

2515 
__STATIC_INLINE
 
LL_USART_Reque¬∞E¬°√ÆMu√£Mode
(
USART_Ty‚â•Def
 *
USARTx
)

2517 
SET_BIT
(
USARTx
->
CR1
, 
USART_CR1_RWU
);

2526 
__STATIC_INLINE
 
LL_USART_Reque¬∞Ex√¥Mu√£Mode
(
USART_Ty‚â•Def
 *
USARTx
)

2528 
CLEAR_BIT
(
USARTx
->
CR1
, 
USART_CR1_RWU
);

2535 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

2539 
E¬∫‚ÄπS√®tus
 
LL_USART_DeIn√¥
(
USART_Ty‚â•Def
 *
USARTx
);

2540 
E¬∫‚ÄπS√®tus
 
LL_USART_In√¥
(
USART_Ty‚â•Def
 *
USARTx
, 
LL_USART_In√¥Ty‚â•Def
 *
USART_In√¥S√•uÀò
);

2541 
LL_USART_S√•uÀòIn√¥
(
LL_USART_In√¥Ty‚â•Def
 *
USART_In√¥S√•uÀò
);

2542 
E¬∫‚ÄπS√®tus
 
LL_USART_ClockIn√¥
(
USART_Ty‚â•Def
 *
USARTx
, 
LL_USART_ClockIn√¥Ty‚â•Def
 *
USART_ClockIn√¥S√•uÀò
);

2543 
LL_USART_ClockS√•uÀòIn√¥
(
LL_USART_ClockIn√¥Ty‚â•Def
 *
USART_ClockIn√¥S√•uÀò
);

2563 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usb.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_USB_H


22 
	#STM32F1xx_LL_USB_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx_h√Ü_def.h
"

31 #i‚Ä°
def√∂ed
 (
USB
√ã|| def√∂ed (
USB_OTG_FS
)

45 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

49 
USB_DEVICE_MODE
 = 0,

50 
USB_HOST_MODE
 = 1,

51 
USB_DRD_MODE
 = 2

52 } 
	tUSB_ModeTy‚â•Def
;

59 
URB_IDLE
 = 0,

60 
URB_DONE
,

61 
URB_NOTREADY
,

62 
URB_NYET
,

63 
URB_ERROR
,

64 
URB_STALL


65 } 
	tUSB_OTG_URBS√®√£Ty‚â•Def
;

72 
HC_IDLE
 = 0,

73 
HC_XFRC
,

74 
HC_HALTED
,

75 
HC_NAK
,

76 
HC_NYET
,

77 
HC_STALL
,

78 
HC_XACTERR
,

79 
HC_BBLERR
,

80 
HC_DATATGLERR


81 } 
	tUSB_OTG_HCS√®√£Ty‚â•Def
;

88 
u√∂t32_t
 
dev_√≠dpo√∂ts
;

92 
u√∂t32_t
 
Ho¬∞_ch‚Ñ¢‚àöls
;

96 
u√∂t32_t
 
‚Ä¢√¨d
;

99 
u√∂t32_t
 
dma_√≠ab√Ä
;

101 
u√∂t32_t
 
√Ø0_mps
;

103 
u√∂t32_t
 
phy_√¥√ÅÀö
;

106 
u√∂t32_t
 
Sof_√≠ab√Ä
;

108 
u√∂t32_t
 
low_pow√Æ_√≠ab√Ä
;

110 
u√∂t32_t
 
√ïm_√≠ab√Ä
;

112 
u√∂t32_t
 
b¬©√£ry_ch¬®g√∂g_√≠ab√Ä
;

114 
u√∂t32_t
 
vbus_¬£ns√∂g_√≠ab√Ä
;

116 
u√∂t32_t
 
u¬£_dediÀá√£d_√Ø1
;

118 
u√∂t32_t
 
u¬£_ex√£‚à´√Ü_vbus
;

120 } 
	tUSB_OTG_CfgTy‚â•Def
;

124 
u√∂t8_t
 
num
;

127 
u√∂t8_t
 
is_√∂
;

130 
u√∂t8_t
 
is_¬∞√Ül
;

133 
u√∂t8_t
 
ty‚â•
;

136 
u√∂t8_t
 
d¬©a_pid_¬∞¬®t
;

139 
u√∂t8_t
 
ev√≠_odd_‚Ä∞ame
;

142 
u√∂t16_t
 
tx_fifo_num
;

145 
u√∂t32_t
 
max‚àëck√´
;

148 
u√∂t8_t
 *
x‚Äûr_buff
;

150 
u√∂t32_t
 
dma_addr
;

152 
u√∂t32_t
 
x‚Äûr_√Än
;

154 
u√∂t32_t
 
x‚Äûr_cou¬°
;

155 } 
	tUSB_OTG_EPTy‚â•Def
;

159 
u√∂t8_t
 
dev_addr
;

162 
u√∂t8_t
 
ch_num
;

165 
u√∂t8_t
 
√Ø_num
;

168 
u√∂t8_t
 
√Ø_is_√∂
;

171 
u√∂t8_t
 
‚Ä¢√¨d
;

174 
u√∂t8_t
 
do_p√∂g
;

176 
u√∂t8_t
 
¬•oÀöss_p√∂g
;

178 
u√∂t8_t
 
√Ø_ty‚â•
;

181 
u√∂t16_t
 
max_‚àëck√´
;

184 
u√∂t8_t
 
d¬©a_pid
;

187 
u√∂t8_t
 *
x‚Äûr_buff
;

189 
u√∂t32_t
 
x‚Äûr_√Än
;

191 
u√∂t32_t
 
x‚Äûr_cou¬°
;

193 
u√∂t8_t
 
togg√Ä_√∂
;

196 
u√∂t8_t
 
togg√Ä_out
;

199 
u√∂t32_t
 
dma_addr
;

201 
u√∂t32_t
 
E¬∫C¬°
;

203 
USB_OTG_URBS√®√£Ty‚â•Def
 
urb_¬∞¬©e
;

206 
USB_OTG_HCS√®√£Ty‚â•Def
 
¬∞¬©e
;

208 } 
	tUSB_OTG_HCTy‚â•Def
;

211 #i‚Ä°
def√∂ed
 (
USB
)

215 
USB_DEVICE_MODE
 = 0

216 } 
	tUSB_ModeTy‚â•Def
;

223 
u√∂t32_t
 
dev_√≠dpo√∂ts
;

227 
u√∂t32_t
 
‚Ä¢√¨d
;

230 
u√∂t32_t
 
√Ø0_mps
;

232 
u√∂t32_t
 
phy_√¥√ÅÀö
;

235 
u√∂t32_t
 
Sof_√≠ab√Ä
;

237 
u√∂t32_t
 
low_pow√Æ_√≠ab√Ä
;

239 
u√∂t32_t
 
√ïm_√≠ab√Ä
;

241 
u√∂t32_t
 
b¬©√£ry_ch¬®g√∂g_√≠ab√Ä
;

242 } 
	tUSB_CfgTy‚â•Def
;

246 
u√∂t8_t
 
num
;

249 
u√∂t8_t
 
is_√∂
;

252 
u√∂t8_t
 
is_¬∞√Ül
;

255 
u√∂t8_t
 
ty‚â•
;

258 
u√∂t8_t
 
d¬©a_pid_¬∞¬®t
;

261 
u√∂t16_t
 
pm√òd¬™ss
;

264 
u√∂t16_t
 
pm√òddr0
;

267 
u√∂t16_t
 
pm√òddr1
;

270 
u√∂t8_t
 
doub√Äbuf‚Äûr
;

273 
u√∂t16_t
 
tx_fifo_num
;

277 
u√∂t32_t
 
max‚àëck√´
;

280 
u√∂t8_t
 *
x‚Äûr_buff
;

282 
u√∂t32_t
 
x‚Äûr_√Än
;

284 
u√∂t32_t
 
x‚Äûr_cou¬°
;

286 
u√∂t32_t
 
x‚Äûr_√Än_db
;

288 
u√∂t8_t
 
x‚Äûr_f√ªl_db
;

290 } 
	tUSB_EPTy‚â•Def
;

299 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

303 
	#USB_OTG_CORE_ID_300A
 0x4F54300AU

	)

304 
	#USB_OTG_CORE_ID_310A
 0x4F54310AU

	)

312 
	#USB_OTG_MODE_DEVICE
 0U

	)

313 
	#USB_OTG_MODE_HOST
 1U

	)

314 
	#USB_OTG_MODE_DRD
 2U

	)

322 
	#USBD_FS_SPEED
 2U

	)

323 
	#USBH_FSLS_SPEED
 1U

	)

331 
	#USB_OTG_SPEED_FULL
 3U

	)

339 
	#USB_OTG_ULPI_PHY
 1U

	)

340 
	#USB_OTG_EMBEDDED_PHY
 2U

	)

348 #i‚Äöde‚Ä°
USBD_FS_TRDT_VALUE


349 
	#USBD_FS_TRDT_VALUE
 5U

	)

350 
	#USBD_DEFAULT_TRDT_VALUE
 9U

	)

359 
	#USB_OTG_FS_MAX_PACKET_SIZE
 64U

	)

360 
	#USB_OTG_MAX_EP0_SIZE
 64U

	)

368 
	#DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
 (0U << 1)

	)

369 
	#DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
 (1U << 1)

	)

370 
	#DSTS_ENUMSPD_FS_PHY_48MHZ
 (3U << 1)

	)

378 
	#DCFG_FRAME_INTERVAL_80
 0U

	)

379 
	#DCFG_FRAME_INTERVAL_85
 1U

	)

380 
	#DCFG_FRAME_INTERVAL_90
 2U

	)

381 
	#DCFG_FRAME_INTERVAL_95
 3U

	)

389 
	#EP_MPS_64
 0U

	)

390 
	#EP_MPS_32
 1U

	)

391 
	#EP_MPS_16
 2U

	)

392 
	#EP_MPS_8
 3U

	)

400 
	#EP_SPEED_LOW
 0U

	)

401 
	#EP_SPEED_FULL
 1U

	)

402 
	#EP_SPEED_HIGH
 2U

	)

410 
	#EP_TYPE_CTRL
 0U

	)

411 
	#EP_TYPE_ISOC
 1U

	)

412 
	#EP_TYPE_BULK
 2U

	)

413 
	#EP_TYPE_INTR
 3U

	)

414 
	#EP_TYPE_MSK
 3U

	)

422 
	#STS_GOUT_NAK
 1U

	)

423 
	#STS_DATA_UPDT
 2U

	)

424 
	#STS_XFER_COMP
 3U

	)

425 
	#STS_SETUP_COMP
 4U

	)

426 
	#STS_SETUP_UPDT
 6U

	)

434 
	#HCFG_30_60_MHZ
 0U

	)

435 
	#HCFG_48_MHZ
 1U

	)

436 
	#HCFG_6_MHZ
 2U

	)

444 
	#HPRT0_PRTSPD_HIGH_SPEED
 0U

	)

445 
	#HPRT0_PRTSPD_FULL_SPEED
 1U

	)

446 
	#HPRT0_PRTSPD_LOW_SPEED
 2U

	)

451 
	#HCCHAR_CTRL
 0U

	)

452 
	#HCCHAR_ISOC
 1U

	)

453 
	#HCCHAR_BULK
 2U

	)

454 
	#HCCHAR_INTR
 3U

	)

456 
	#HC_PID_DATA0
 0U

	)

457 
	#HC_PID_DATA2
 1U

	)

458 
	#HC_PID_DATA1
 2U

	)

459 
	#HC_PID_SETUP
 3U

	)

461 
	#GRXSTS_PKTSTS_IN
 2U

	)

462 
	#GRXSTS_PKTSTS_IN_XFER_COMP
 3U

	)

463 
	#GRXSTS_PKTSTS_DATA_TOGGLE_ERR
 5U

	)

464 
	#GRXSTS_PKTSTS_CH_HALTED
 7U

	)

466 
	#USBx_PCGCCTL
 *(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)
USBx_BASE
 + 
USB_OTG_PCGCCTL_BASE
)

	)

467 
	#USBx_HPRT0
 *(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)
USBx_BASE
 + 
USB_OTG_HOST_PORT_BASE
)

	)

469 
	#USBx_DEVICE
 ((
USB_OTG_DeviÀöTy‚â•Def
 *)(
USBx_BASE
 + 
USB_OTG_DEVICE_BASE
))

	)

470 
	#USBx_INEP
(
i
√ã((
USB_OTG_INEndpo√∂tTy‚â•Def
 *)(
USBx_BASE
 + 
USB_OTG_IN_ENDPOINT_BASE
 + ((i√ã* 
USB_OTG_EP_REG_SIZE
)))

	)

471 
	#USBx_OUTEP
(
i
√ã((
USB_OTG_OUTEndpo√∂tTy‚â•Def
 *)(
USBx_BASE
 + 
USB_OTG_OUT_ENDPOINT_BASE
 + ((i√ã* 
USB_OTG_EP_REG_SIZE
)))

	)

472 
	#USBx_DFIFO
(
i
√ã*(
__IO
 
u√∂t32_t
 *)(
USBx_BASE
 + 
USB_OTG_FIFO_BASE
 + ((i√ã* 
USB_OTG_FIFO_SIZE
))

	)

474 
	#USBx_HOST
 ((
USB_OTG_Ho¬∞Ty‚â•Def
 *)(
USBx_BASE
 + 
USB_OTG_HOST_BASE
))

	)

475 
	#USBx_HC
(
i
√ã((
USB_OTG_Ho¬∞Ch‚Ñ¢‚àölTy‚â•Def
 *)(
USBx_BASE
 + 
USB_OTG_HOST_CHANNEL_BASE
 + ((i√ã* 
USB_OTG_HOST_CHANNEL_SIZE
)))

	)

478 #i‚Ä°
def√∂ed
 (
USB
)

482 
	#EP_MPS_64
 0U

	)

483 
	#EP_MPS_32
 1U

	)

484 
	#EP_MPS_16
 2U

	)

485 
	#EP_MPS_8
 3U

	)

493 
	#EP_TYPE_CTRL
 0U

	)

494 
	#EP_TYPE_ISOC
 1U

	)

495 
	#EP_TYPE_BULK
 2U

	)

496 
	#EP_TYPE_INTR
 3U

	)

497 
	#EP_TYPE_MSK
 3U

	)

505 
	#USBD_FS_SPEED
 2U

	)

510 
	#BTABLE_ADDRESS
 0x000U

	)

511 
	#PMA_ACCESS
 2U

	)

513 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

514 
	#EP_ADDR_MSK
 0xFU

	)

516 #i‚Ä°
def√∂ed
 (
USB
)

517 
	#EP_ADDR_MSK
 0x7U

	)

527 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

528 
	#USB_MASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
GINTMSK
 &Ô£ø~(__INTERRUPT__))

	)

529 
	#USB_UNMASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
√ã((__INSTANCE__)->
GINTMSK
 |Ô£ø(__INTERRUPT__))

	)

531 
	#CLEAR_IN_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
√ã(
	`USBx_INEP
(__EPNUM__)->
DIEPINT
 = (__INTERRUPT__))

	)

532 
	#CLEAR_OUT_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
√ã(
	`USBx_OUTEP
(__EPNUM__)->
DOEPINT
 = (__INTERRUPT__))

	)

542 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

543 
HAL_S√®tusTy‚â•Def
 
USB_C‚ÄπeIn√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_CfgTy‚â•Def
 
cfg
);

544 
HAL_S√®tusTy‚â•Def
 
USB_DevIn√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_CfgTy‚â•Def
 
cfg
);

545 
HAL_S√®tusTy‚â•Def
 
USB_E¬´b√ÄGlob√ÜI¬°
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

546 
HAL_S√®tusTy‚â•Def
 
USB_Di√üb√ÄGlob√ÜI¬°
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

547 
HAL_S√®tusTy‚â•Def
 
USB_S√´Tu‚à´¬®oundTime
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t32_t
 
hÀõk
, 
u√∂t8_t
 
‚Ä¢√¨d
);

548 
HAL_S√®tusTy‚â•Def
 
USB_S√´Cu¬∫√≠tMode
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_ModeTy‚â•Def
 
mode
);

549 
HAL_S√®tusTy‚â•Def
 
USB_S√´DevS‚â•ed
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
‚Ä¢√¨d
);

550 
HAL_S√®tusTy‚â•Def
 
USB_FlushRxFifo
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

551 
HAL_S√®tusTy‚â•Def
 
USB_FlushTxFifo
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t32_t
 
num
);

552 
HAL_S√®tusTy‚â•Def
 
USB_AÀòiv¬©eEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

553 
HAL_S√®tusTy‚â•Def
 
USB_D√≥Àòiv¬©eEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

554 
HAL_S√®tusTy‚â•Def
 
USB_AÀòiv¬©eDediÀá√£dEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

555 
HAL_S√®tusTy‚â•Def
 
USB_D√≥Àòiv¬©eDediÀá√£dEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

556 
HAL_S√®tusTy‚â•Def
 
USB_EPS√®œÄX‚Äûr
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

557 
HAL_S√®tusTy‚â•Def
 
USB_EP0S√®œÄX‚Äûr
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

558 
HAL_S√®tusTy‚â•Def
 
USB_Wr√¥ePack√´
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 *
¬ßc
,

559 
u√∂t8_t
 
ch_√Ø_num
, 
u√∂t16_t
 
√Än
);

561 *
USB_R√≥dPack√´
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 *
de¬∞
, 
u√∂t16_t
 
√Än
);

562 
HAL_S√®tusTy‚â•Def
 
USB_EPS√´S√®≈í
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

563 
HAL_S√®tusTy‚â•Def
 
USB_EPC√Ä¬®S√®≈í
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
);

564 
HAL_S√®tusTy‚â•Def
 
USB_S√´DevAdd¬™ss
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
add¬™ss
);

565 
HAL_S√®tusTy‚â•Def
 
USB_DevC‚ÅÑ‚àöÀò
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

566 
HAL_S√®tusTy‚â•Def
 
USB_DevDisc‚ÅÑ‚àöÀò
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

567 
HAL_S√®tusTy‚â•Def
 
USB_St‚Ä∫DeviÀö
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

568 
HAL_S√®tusTy‚â•Def
 
USB_AÀòiv¬©eS√´up
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

569 
HAL_S√®tusTy‚â•Def
 
USB_EP0_OutS√®œÄ
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 *
p¬£tup
);

570 
u√∂t8_t
 
USB_G√´DevS‚â•ed
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

571 
u√∂t32_t
 
USB_G√´Mode
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

572 
u√∂t32_t
 
USB_R√≥dI¬°√Æru¬±s
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

573 
u√∂t32_t
 
USB_R√≥dDevA≈íOutEpI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

574 
u√∂t32_t
 
USB_R√≥dDevOutEPI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
);

575 
u√∂t32_t
 
USB_R√≥dDevA≈íInEpI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

576 
u√∂t32_t
 
USB_R√≥dDevInEPI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
);

577 
USB_C√Ä¬®I¬°√Æru¬±s
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t32_t
 
√∂√£¬∫u¬±
);

579 
HAL_S√®tusTy‚â•Def
 
USB_Ho¬∞In√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_CfgTy‚â•Def
 
cfg
);

580 
HAL_S√®tusTy‚â•Def
 
USB_In√¥FSLSPClkS√±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
‚Ä∞eq
);

581 
HAL_S√®tusTy‚â•Def
 
USB_Re¬£tP‚Äπt
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

582 
HAL_S√®tusTy‚â•Def
 
USB_DriveVbus
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
¬∞¬©e
);

583 
u√∂t32_t
 
USB_G√´Ho¬∞S‚â•ed
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

584 
u√∂t32_t
 
USB_G√´Cu¬∫√≠tF√∏me
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

585 
HAL_S√®tusTy‚â•Def
 
USB_HC_In√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
ch_num
,

586 
u√∂t8_t
 
√Ønum
, u√∂t8_√†
dev_add¬™ss
, u√∂t8_√†
‚Ä¢√¨d
,

587 
u√∂t8_t
 
√Ø_ty‚â•
, 
u√∂t16_t
 
mps
);

588 
HAL_S√®tusTy‚â•Def
 
USB_HC_S√®œÄX‚Äûr
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
,

589 
USB_OTG_HCTy‚â•Def
 *
hc
);

591 
u√∂t32_t
 
USB_HC_R√≥dI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

592 
HAL_S√®tusTy‚â•Def
 
USB_HC_H√Üt
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
hc_num
);

593 
HAL_S√®tusTy‚â•Def
 
USB_DoP√∂g
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
ch_num
);

594 
HAL_S√®tusTy‚â•Def
 
USB_St‚Ä∫Ho¬∞
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

595 
HAL_S√®tusTy‚â•Def
 
USB_AÀòiv¬©eRem≈∏eWakeup
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

596 
HAL_S√®tusTy‚â•Def
 
USB_DeAÀòiv¬©eRem≈∏eWakeup
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

599 #i‚Ä°
def√∂ed
 (
USB
)

600 
HAL_S√®tusTy‚â•Def
 
USB_C‚ÄπeIn√¥
(
USB_Ty‚â•Def
 *
USBx
, 
USB_CfgTy‚â•Def
 
cfg
);

601 
HAL_S√®tusTy‚â•Def
 
USB_DevIn√¥
(
USB_Ty‚â•Def
 *
USBx
, 
USB_CfgTy‚â•Def
 
cfg
);

602 
HAL_S√®tusTy‚â•Def
 
USB_E¬´b√ÄGlob√ÜI¬°
(
USB_Ty‚â•Def
 *
USBx
);

603 
HAL_S√®tusTy‚â•Def
 
USB_Di√üb√ÄGlob√ÜI¬°
(
USB_Ty‚â•Def
 *
USBx
);

604 
HAL_S√®tusTy‚â•Def
 
USB_S√´Cu¬∫√≠tMode
(
USB_Ty‚â•Def
 *
USBx
, 
USB_ModeTy‚â•Def
 
mode
);

605 
HAL_S√®tusTy‚â•Def
 
USB_S√´DevS‚â•ed
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
‚Ä¢√¨d
);

606 
HAL_S√®tusTy‚â•Def
 
USB_FlushRxFifo
(
USB_Ty‚â•Def
 *
USBx
);

607 
HAL_S√®tusTy‚â•Def
 
USB_FlushTxFifo
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t32_t
 
num
);

608 
HAL_S√®tusTy‚â•Def
 
USB_AÀòiv¬©eEndpo√∂t
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
);

609 
HAL_S√®tusTy‚â•Def
 
USB_D√≥Àòiv¬©eEndpo√∂t
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
);

610 
HAL_S√®tusTy‚â•Def
 
USB_EPS√®œÄX‚Äûr
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
);

611 
HAL_S√®tusTy‚â•Def
 
USB_EPS√´S√®≈í
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
);

612 
HAL_S√®tusTy‚â•Def
 
USB_EPC√Ä¬®S√®≈í
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
);

613 
HAL_S√®tusTy‚â•Def
 
USB_S√´DevAdd¬™ss
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
add¬™ss
);

614 
HAL_S√®tusTy‚â•Def
 
USB_DevC‚ÅÑ‚àöÀò
(
USB_Ty‚â•Def
 *
USBx
);

615 
HAL_S√®tusTy‚â•Def
 
USB_DevDisc‚ÅÑ‚àöÀò
(
USB_Ty‚â•Def
 *
USBx
);

616 
HAL_S√®tusTy‚â•Def
 
USB_St‚Ä∫DeviÀö
(
USB_Ty‚â•Def
 *
USBx
);

617 
HAL_S√®tusTy‚â•Def
 
USB_EP0_OutS√®œÄ
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
p¬£tup
);

618 
HAL_S√®tusTy‚â•Def
 
USB_Wr√¥ePack√´
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
¬ßc
,

619 
u√∂t8_t
 
ch_√Ø_num
, 
u√∂t16_t
 
√Än
);

621 *
USB_R√≥dPack√´
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
de¬∞
, 
u√∂t16_t
 
√Än
);

623 
u√∂t32_t
 
USB_R√≥dI¬°√Æru¬±s
(
USB_Ty‚â•Def
 *
USBx
);

624 
u√∂t32_t
 
USB_R√≥dDevA≈íOutEpI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
);

625 
u√∂t32_t
 
USB_R√≥dDevOutEPI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
);

626 
u√∂t32_t
 
USB_R√≥dDevA≈íInEpI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
);

627 
u√∂t32_t
 
USB_R√≥dDevInEPI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
);

628 
USB_C√Ä¬®I¬°√Æru¬±s
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t32_t
 
√∂√£¬∫u¬±
);

629 
HAL_S√®tusTy‚â•Def
 
USB_AÀòiv¬©eRem≈∏eWakeup
(
USB_Ty‚â•Def
 *
USBx
);

630 
HAL_S√®tusTy‚â•Def
 
USB_DeAÀòiv¬©eRem≈∏eWakeup
(
USB_Ty‚â•Def
 *
USBx
);

632 
USB_Wr√¥ePMA
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
pbU¬ßBuf
,

633 
u√∂t16_t
 
wPMABufAddr
, u√∂t16_√†
wNBy√£s
);

635 
USB_R√≥dPMA
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
pbU¬ßBuf
,

636 
u√∂t16_t
 
wPMABufAddr
, u√∂t16_√†
wNBy√£s
);

655 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_utils.h

33 #i‚Äöde‚Ä°
__STM32F1xx_LL_UTILS_H


34 
	#__STM32F1xx_LL_UTILS_H


	)

36 #ifde‚Ä°
__Àùlu‚Ä¢lus


41 
	~"¬∞m32f1xx.h
"

60 
	#LL_MAX_DELAY
 0xFFFFFFFFU

	)

65 
	#UID_BASE_ADDRESS
 
UID_BASE


	)

70 
	#FLASHSIZE_BASE_ADDRESS
 
FLASHSIZE_BASE


	)

92 
u√∂t32_t
 
PLLMul
;

98 
u√∂t32_t
 
P¬™div
;

103 } 
	tLL_UTILS_PLLIn√¥Ty‚â•Def
;

110 
u√∂t32_t
 
AHBCLKDivid√Æ
;

116 
u√∂t32_t
 
APB1CLKDivid√Æ
;

122 
u√∂t32_t
 
APB2CLKDivid√Æ
;

128 } 
	tLL_UTILS_ClkIn√¥Ty‚â•Def
;

142 
	#LL_UTILS_HSEBYPASS_OFF
 0x00000000U

	)

143 
	#LL_UTILS_HSEBYPASS_ON
 0x00000001U

	)

167 
__STATIC_INLINE
 
u√∂t32_t
 
LL_G√´UID_W‚Äπd0
()

169  (
u√∂t32_t
)(
READ_REG
(*((u√∂t32_√†*)
UID_BASE_ADDRESS
)));

176 
__STATIC_INLINE
 
u√∂t32_t
 
LL_G√´UID_W‚Äπd1
()

178  (
u√∂t32_t
)(
READ_REG
(*((u√∂t32_√†*)(
UID_BASE_ADDRESS
 + 4U))));

185 
__STATIC_INLINE
 
u√∂t32_t
 
LL_G√´UID_W‚Äπd2
()

187  (
u√∂t32_t
)(
READ_REG
(*((u√∂t32_√†*)(
UID_BASE_ADDRESS
 + 8U))));

196 
__STATIC_INLINE
 
u√∂t32_t
 
LL_G√´F≈ìshSize
()

198  (
u√∂t16_t
)(
READ_REG
(*((
u√∂t32_t
 *)
FLASHSIZE_BASE_ADDRESS
)));

218 
__STATIC_INLINE
 
LL_In√¥Tick
(
u√∂t32_t
 
HCLKF¬™qu√≠cy
, u√∂t32_√†
Ticks
)

221 
SysTick
->
LOAD
 = (
u√∂t32_t
)((
HCLKF¬™qu√≠cy
 / 
Ticks
) - 1UL);

222 
SysTick
->
VAL
 = 0UL;

223 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

224 
SysTick_CTRL_ENABLE_Msk
;

227 
LL_In√¥1msTick
(
u√∂t32_t
 
HCLKF¬™qu√≠cy
);

228 
LL_mD√±ay
(
u√∂t32_t
 
D√±ay
);

238 
LL_S√´Sy¬∞emC‚ÄπeClock
(
u√∂t32_t
 
HCLKF¬™qu√≠cy
);

239 #i‚Ä°
def√∂ed
(
FLASH_ACR_LATENCY
)

240 
E¬∫‚ÄπS√®tus
 
LL_S√´F≈ìshL¬©√≠cy
(
u√∂t32_t
 
F¬™qu√≠cy
);

242 
E¬∫‚ÄπS√®tus
 
LL_PLL_C‚ÅÑfigSy¬∞emClock_HSI
(
LL_UTILS_PLLIn√¥Ty‚â•Def
 *
UTILS_PLLIn√¥S√•uÀò
,

243 
LL_UTILS_ClkIn√¥Ty‚â•Def
 *
UTILS_ClkIn√¥S√•uÀò
);

244 
E¬∫‚ÄπS√®tus
 
LL_PLL_C‚ÅÑfigSy¬∞emClock_HSE
(
u√∂t32_t
 
HSEF¬™qu√≠cy
, u√∂t32_√†
HSEBy‚àëss
,

245 
LL_UTILS_PLLIn√¥Ty‚â•Def
 *
UTILS_PLLIn√¥S√•uÀò
, 
LL_UTILS_ClkIn√¥Ty‚â•Def
 *
UTILS_ClkIn√¥S√•uÀò
);

263 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_wwdg.h

21 #i‚Äöde‚Ä°
STM32F1xx_LL_WWDG_H


22 
	#STM32F1xx_LL_WWDG_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


29 
	~"¬∞m32f1xx.h
"

35 #i‚Ä°
def√∂ed
 (
WWDG
)

55 
	#LL_WWDG_CFR_EWI
 
WWDG_CFR_EWI


	)

63 
	#LL_WWDG_PRESCALER_1
 0x00000000u

	)

64 
	#LL_WWDG_PRESCALER_2
 
WWDG_CFR_WDGTB_0


	)

65 
	#LL_WWDG_PRESCALER_4
 
WWDG_CFR_WDGTB_1


	)

66 
	#LL_WWDG_PRESCALER_8
 (
WWDG_CFR_WDGTB_0
 | 
WWDG_CFR_WDGTB_1
√ã

	)

89 
	#LL_WWDG_Wr√¥eReg
(
__INSTANCE__
, 
__REG__
, 
__VALUE__
√ã
	`WRITE_REG
(__INSTANCE__->__REG__, (__VALUE__))

	)

97 
	#LL_WWDG_R√≥dReg
(
__INSTANCE__
, 
__REG__
√ã
	`READ_REG
(__INSTANCE__->__REG__)

	)

124 
__STATIC_INLINE
 
LL_WWDG_E¬´b√Ä
(
WWDG_Ty‚â•Def
 *
WWDGx
)

126 
SET_BIT
(
WWDGx
->
CR
, 
WWDG_CR_WDGA
);

135 
__STATIC_INLINE
 
u√∂t32_t
 
LL_WWDG_IsE¬´b√Äd
(
WWDG_Ty‚â•Def
 *
WWDGx
)

137  ((
READ_BIT
(
WWDGx
->
CR
, 
WWDG_CR_WDGA
) == (WWDG_CR_WDGA)) ? 1UL : 0UL);

151 
__STATIC_INLINE
 
LL_WWDG_S√´Cou¬°√Æ
(
WWDG_Ty‚â•Def
 *
WWDGx
, 
u√∂t32_t
 
Cou¬°√Æ
)

153 
MODIFY_REG
(
WWDGx
->
CR
, 
WWDG_CR_T
, 
Cou¬°√Æ
);

162 
__STATIC_INLINE
 
u√∂t32_t
 
LL_WWDG_G√´Cou¬°√Æ
(
WWDG_Ty‚â•Def
 *
WWDGx
)

164  (
READ_BIT
(
WWDGx
->
CR
, 
WWDG_CR_T
));

180 
__STATIC_INLINE
 
LL_WWDG_S√´P¬™sÀá√Är
(
WWDG_Ty‚â•Def
 *
WWDGx
, 
u√∂t32_t
 
P¬™sÀá√Är
)

182 
MODIFY_REG
(
WWDGx
->
CFR
, 
WWDG_CFR_WDGTB
, 
P¬™sÀá√Är
);

195 
__STATIC_INLINE
 
u√∂t32_t
 
LL_WWDG_G√´P¬™sÀá√Är
(
WWDG_Ty‚â•Def
 *
WWDGx
)

197  (
READ_BIT
(
WWDGx
->
CFR
, 
WWDG_CFR_WDGTB
));

216 
__STATIC_INLINE
 
LL_WWDG_S√´W√∂dow
(
WWDG_Ty‚â•Def
 *
WWDGx
, 
u√∂t32_t
 
W√∂dow
)

218 
MODIFY_REG
(
WWDGx
->
CFR
, 
WWDG_CFR_W
, 
W√∂dow
);

227 
__STATIC_INLINE
 
u√∂t32_t
 
LL_WWDG_G√´W√∂dow
(
WWDG_Ty‚â•Def
 *
WWDGx
)

229  (
READ_BIT
(
WWDGx
->
CFR
, 
WWDG_CFR_W
));

248 
__STATIC_INLINE
 
u√∂t32_t
 
LL_WWDG_IsAÀòiveF≈ìg_EWKUP
(
WWDG_Ty‚â•Def
 *
WWDGx
)

250  ((
READ_BIT
(
WWDGx
->
SR
, 
WWDG_SR_EWIF
) == (WWDG_SR_EWIF)) ? 1UL : 0UL);

259 
__STATIC_INLINE
 
LL_WWDG_C√Ä¬®F≈ìg_EWKUP
(
WWDG_Ty‚â•Def
 *
WWDGx
)

261 
WRITE_REG
(
WWDGx
->
SR
, ~
WWDG_SR_EWIF
);

279 
__STATIC_INLINE
 
LL_WWDG_E¬´b√ÄIT_EWKUP
(
WWDG_Ty‚â•Def
 *
WWDGx
)

281 
SET_BIT
(
WWDGx
->
CFR
, 
WWDG_CFR_EWI
);

290 
__STATIC_INLINE
 
u√∂t32_t
 
LL_WWDG_IsE¬´b√ÄdIT_EWKUP
(
WWDG_Ty‚â•Def
 *
WWDGx
)

292  ((
READ_BIT
(
WWDGx
->
CFR
, 
WWDG_CFR_EWI
) == (WWDG_CFR_EWI)) ? 1UL : 0UL);

313 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\Legacy\stm32f1xx_hal_can.c

112 
	~"¬∞m32f1xx_h√Ü.h
"

123 #ifde‚Ä°
HAL_CAN_LEGACY_MODULE_ENABLED


125 #i‚Ä°
def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
) || \

126 
def√∂ed
(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| 
	$def√∂ed
(
STM32F107xC
)

127 #ifde‚Ä°
HAL_CAN_MODULE_ENABLED


141 
	#CAN_TIMEOUT_VALUE
 10U

	)

151 
HAL_S√®tusTy‚â•Def
 
	`CAN_ReÀöive_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
u√∂t8_t
 
FIFONumb√Æ
);

152 
HAL_S√®tusTy‚â•Def
 
	`CAN_T√∏nsm√¥_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
);

184 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

186 
u√∂t32_t
 
¬∞¬©us
 = 
CAN_INITSTATUS_FAILED
;

187 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

188 
u√∂t32_t
 
tmp_m¬∏
 = 0U;

191 if(
hÀán
 =Ô£ø
NULL
)

193  
HAL_ERROR
;

197 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_ALL_INSTANCE
(
hÀán
->
In¬∞‚Ñ¢Àö
));

198 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
TTCM
));

199 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
ABOM
));

200 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
AWUM
));

201 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
NART
));

202 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
RFLM
));

203 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
TXFP
));

204 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_MODE
(
hÀán
->
In√¥
.
Mode
));

205 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_SJW
(
hÀán
->
In√¥
.
SJW
));

206 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_BS1
(
hÀán
->
In√¥
.
BS1
));

207 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_BS2
(
hÀán
->
In√¥
.
BS2
));

208 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_PRESCALER
(
hÀán
->
In√¥
.
P¬™sÀá√Är
));

210 if(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_RESET
)

213 
hÀán
->
Lock
 = 
HAL_UNLOCKED
;

215 
	`HAL_CAN_M‚Ä¢In√¥
(
hÀán
);

219 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY
;

222 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_SLEEP
);

225 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_INRQ
);

228 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

231 
	`HAL_IS_BIT_CLR
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_INAK
))

233 if((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

235 
hÀán
->
S√®√£
Ô£ø
HAL_CAN_STATE_TIMEOUT
;

237 
	`__HAL_UNLOCK
(
hÀán
);

238  
HAL_TIMEOUT
;

243 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

246 i‚Ä°(
hÀán
->
In√¥
.
TTCM
 =Ô£ø
ENABLE
)

248 
	`SET_BIT
(
tmp_m¬∏
, 
CAN_MCR_TTCM
);

252 
	`CLEAR_BIT
(
tmp_m¬∏
, 
CAN_MCR_TTCM
);

256 i‚Ä°(
hÀán
->
In√¥
.
ABOM
 =Ô£ø
ENABLE
)

258 
	`SET_BIT
(
tmp_m¬∏
, 
CAN_MCR_ABOM
);

262 
	`CLEAR_BIT
(
tmp_m¬∏
, 
CAN_MCR_ABOM
);

266 i‚Ä°(
hÀán
->
In√¥
.
AWUM
 =Ô£ø
ENABLE
)

268 
	`SET_BIT
(
tmp_m¬∏
, 
CAN_MCR_AWUM
);

272 
	`CLEAR_BIT
(
tmp_m¬∏
, 
CAN_MCR_AWUM
);

275 i‚Ä°(
hÀán
->
In√¥
.
NART
 =Ô£ø
ENABLE
)

277 
	`SET_BIT
(
tmp_m¬∏
, 
CAN_MCR_NART
);

281 
	`CLEAR_BIT
(
tmp_m¬∏
, 
CAN_MCR_NART
);

285 i‚Ä°(
hÀán
->
In√¥
.
RFLM
 =Ô£ø
ENABLE
)

287 
	`SET_BIT
(
tmp_m¬∏
, 
CAN_MCR_RFLM
);

291 
	`CLEAR_BIT
(
tmp_m¬∏
, 
CAN_MCR_RFLM
);

294 i‚Ä°(
hÀán
->
In√¥
.
TXFP
 =Ô£ø
ENABLE
)

296 
	`SET_BIT
(
tmp_m¬∏
, 
CAN_MCR_TXFP
);

300 
	`CLEAR_BIT
(
tmp_m¬∏
, 
CAN_MCR_TXFP
);

304 
	`MODIFY_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
,

305 
CAN_MCR_TTCM
 |

306 
CAN_MCR_ABOM
 |

307 
CAN_MCR_AWUM
 |

308 
CAN_MCR_NART
 |

309 
CAN_MCR_RFLM
 |

310 
CAN_MCR_TXFP
,

311 
tmp_m¬∏
);

314 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
BTR
, (
u√∂t32_t
)(hÀán->
In√¥
.
Mode
 |

315 
hÀán
->
In√¥
.
SJW
 |

316 
hÀán
->
In√¥
.
BS1
 |

317 
hÀán
->
In√¥
.
BS2
 |

318 (
hÀán
->
In√¥
.
P¬™sÀá√Är
 - 1U)));

321 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_INRQ
);

324 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

327 
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_INAK
))

329 if((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

331 
hÀán
->
S√®√£
Ô£ø
HAL_CAN_STATE_TIMEOUT
;

334 
	`__HAL_UNLOCK
(
hÀán
);

336  
HAL_TIMEOUT
;

341 if(
	`HAL_IS_BIT_CLR
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_INAK
))

343 
¬∞¬©us
 = 
CAN_INITSTATUS_SUCCESS
;

347 if(
¬∞¬©us
 =Ô£ø
CAN_INITSTATUS_SUCCESS
)

350 
hÀán
->
E¬∫‚ÄπCode
 = 
HAL_CAN_ERROR_NONE
;

353 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

356  
HAL_OK
;

361 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

364  
HAL_ERROR
;

366 
	}
}

377 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_C‚ÅÑfigF√ª√£r
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
CAN_F√ª√£rC‚ÅÑfTy‚â•Def
* 
sF√ª√£rC‚ÅÑfig
)

379 
u√∂t32_t
 
f√ª√£‚à´brb√¥pos
 = 0U;

382 
	`UNUSED
(
hÀán
);

385 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_NUMBER
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rNumb√Æ
));

386 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_MODE
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMode
));

387 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_SCALE
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rSÀá√Ä
));

388 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_FIFO
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rFIFOAssignm√≠t
));

389 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rAÀòiv¬©i‚ÅÑ
));

390 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_BANKNUMBER
(
sF√ª√£rC‚ÅÑfig
->
B‚Ñ¢kNumb√Æ
));

392 
f√ª√£‚à´brb√¥pos
 = (1U√ã<< 
sF√ª√£rC‚ÅÑfig
->
F√ª√£rNumb√Æ
;

396 
	`MODIFY_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FMR
 ,

397 
CAN_FMR_CAN2SB
 ,

398 
CAN_FMR_FINIT
 |

399 (
u√∂t32_t
)(
sF√ª√£rC‚ÅÑfig
->
B‚Ñ¢kNumb√Æ
 << 8U) );

402 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FA1R
, 
f√ª√£‚à´brb√¥pos
);

405 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rSÀá√Ä
 =Ô£ø
CAN_FILTERSCALE_16BIT
)

408 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FS1R
, 
f√ª√£‚à´brb√¥pos
);

412 
hÀán
->
In¬∞‚Ñ¢Àö
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rNumb√Æ
].
FR1
 =

413 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdLow
) << 16U) |

414 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdLow
);

418 
hÀán
->
In¬∞‚Ñ¢Àö
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rNumb√Æ
].
FR2
 =

419 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdHigh
) << 16U) |

420 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdHigh
);

423 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rSÀá√Ä
 =Ô£ø
CAN_FILTERSCALE_32BIT
)

426 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FS1R
, 
f√ª√£‚à´brb√¥pos
);

428 
hÀán
->
In¬∞‚Ñ¢Àö
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rNumb√Æ
].
FR1
 =

429 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdHigh
) << 16U) |

430 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdLow
);

432 
hÀán
->
In¬∞‚Ñ¢Àö
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rNumb√Æ
].
FR2
 =

433 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdHigh
) << 16U) |

434 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdLow
);

438 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMode
 =Ô£ø
CAN_FILTERMODE_IDMASK
)

441 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FM1R
, 
f√ª√£‚à´brb√¥pos
);

446 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FM1R
, 
f√ª√£‚à´brb√¥pos
);

450 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rFIFOAssignm√≠t
 =Ô£ø
CAN_FILTER_FIFO0
)

453 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FFA1R
, 
f√ª√£‚à´brb√¥pos
);

458 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FFA1R
, 
f√ª√£‚à´brb√¥pos
);

462 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rAÀòiv¬©i‚ÅÑ
 =Ô£ø
ENABLE
)

464 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FA1R
, 
f√ª√£‚à´brb√¥pos
);

468 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
FMR
, ((
u√∂t32_t
)
CAN_FMR_FINIT
));

471  
HAL_OK
;

472 
	}
}

480 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

483 if(
hÀán
 =Ô£ø
NULL
)

485  
HAL_ERROR
;

489 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_ALL_INSTANCE
(
hÀán
->
In¬∞‚Ñ¢Àö
));

492 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY
;

495 
	`HAL_CAN_M‚Ä¢DeIn√¥
(
hÀán
);

498 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_RESET
;

501 
	`__HAL_UNLOCK
(
hÀán
);

504  
HAL_OK
;

505 
	}
}

513 
__w√≥k
 
	$HAL_CAN_M‚Ä¢In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

516 
	`UNUSED
(
hÀán
);

520 
	}
}

528 
__w√≥k
 
	$HAL_CAN_M‚Ä¢DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

531 
	`UNUSED
(
hÀán
);

535 
	}
}

565 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_T√∏nsm√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
u√∂t32_t
 
Timeout
)

567 
u√∂t32_t
 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXSTATUS_NOMAILBOX
;

568 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

571 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_IDTYPE
(
hÀán
->
pTxMsg
->
IDE
));

572 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_RTR
(
hÀán
->
pTxMsg
->
RTR
));

573 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_DLC
(
hÀán
->
pTxMsg
->
DLC
));

575 if(((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0) || \

576 ((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1) || \

577 ((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2))

580 
	`__HAL_LOCK
(
hÀán
);

583 
hÀán
->
S√®√£
)

585 (
HAL_CAN_STATE_BUSY_RX0
):

586 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0
;

588 (
HAL_CAN_STATE_BUSY_RX1
):

589 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX1
;

591 (
HAL_CAN_STATE_BUSY_RX0_RX1
):

592 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
;

595 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX
;

600 i‚Ä°(
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_TME0
))

602 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXMAILBOX_0
;

604 i‚Ä°(
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_TME1
))

606 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXMAILBOX_1
;

610 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXMAILBOX_2
;

614 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 &Ô£ø
CAN_TI0R_TXRQ
;

615 i‚Ä°(
hÀán
->
pTxMsg
->
IDE
 =Ô£ø
CAN_ID_STD
)

617 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_STDID
(
hÀán
->
pTxMsg
->
StdId
));

618 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 |Ô£ø((hÀán->
pTxMsg
->
StdId
 << 
CAN_TI0R_STID_Pos
) |

619 
hÀán
->
pTxMsg
->
RTR
);

623 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_EXTID
(
hÀán
->
pTxMsg
->
ExtId
));

624 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 |Ô£ø((hÀán->
pTxMsg
->
ExtId
 << 
CAN_TI0R_EXID_Pos
) |

625 
hÀán
->
pTxMsg
->
IDE
 |

626 
hÀán
->
pTxMsg
->
RTR
);

630 
hÀán
->
pTxMsg
->
DLC
 &Ô£ø(
u√∂t8_t
)0x0000000F;

631 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
 &= 0xFFFFFFF0U;

632 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
 |Ô£øhÀán->
pTxMsg
->
DLC
;

635 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDLR
, ((
u√∂t32_t
)hÀán->
pTxMsg
->
D¬©a
[3] << 
CAN_TDL0R_DATA3_Pos
) |

636 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[2] << 
CAN_TDL0R_DATA2_Pos
) |

637 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[1] << 
CAN_TDL0R_DATA1_Pos
) |

638 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[0] << 
CAN_TDL0R_DATA0_Pos
));

639 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDHR
, ((
u√∂t32_t
)hÀán->
pTxMsg
->
D¬©a
[7] << 
CAN_TDL0R_DATA3_Pos
) |

640 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[6] << 
CAN_TDL0R_DATA2_Pos
) |

641 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[5] << 
CAN_TDL0R_DATA1_Pos
) |

642 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[4] << 
CAN_TDL0R_DATA0_Pos
));

644 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
, 
CAN_TI0R_TXRQ
);

647 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

650 !(
	`__HAL_CAN_TRANSMIT_STATUS
(
hÀán
, 
√•‚Ñ¢sm√¥ma√ªbox
)))

653 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

655 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
()-
tick¬∞¬®t
) > Timeout))

657 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_TIMEOUT
;

660 
	`__HAL_CAN_CANCEL_TRANSMIT
(
hÀán
, 
√•‚Ñ¢sm√¥ma√ªbox
);

663 
	`__HAL_UNLOCK
(
hÀán
);

664  
HAL_TIMEOUT
;

669 
hÀán
->
S√®√£
)

671 (
HAL_CAN_STATE_BUSY_TX_RX0
):

672 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0
;

674 (
HAL_CAN_STATE_BUSY_TX_RX1
):

675 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX1
;

677 (
HAL_CAN_STATE_BUSY_TX_RX0_RX1
):

678 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0_RX1
;

681 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

686 
	`__HAL_UNLOCK
(
hÀán
);

689  
HAL_OK
;

694 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

697  
HAL_ERROR
;

699 
	}
}

707 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_T√∏nsm√¥_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

709 
u√∂t32_t
 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXSTATUS_NOMAILBOX
;

712 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_IDTYPE
(
hÀán
->
pTxMsg
->
IDE
));

713 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_RTR
(
hÀán
->
pTxMsg
->
RTR
));

714 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_DLC
(
hÀán
->
pTxMsg
->
DLC
));

716 if(((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0) || \

717 ((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1) || \

718 ((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2))

721 
	`__HAL_LOCK
(
hÀán
);

724 if(
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_TME0
))

726 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXMAILBOX_0
;

728 if(
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_TME1
))

730 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXMAILBOX_1
;

734 
√•‚Ñ¢sm√¥ma√ªbox
 = 
CAN_TXMAILBOX_2
;

738 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 &Ô£ø
CAN_TI0R_TXRQ
;

739 if(
hÀán
->
pTxMsg
->
IDE
 =Ô£ø
CAN_ID_STD
)

741 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_STDID
(
hÀán
->
pTxMsg
->
StdId
));

742 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 |Ô£ø((hÀán->
pTxMsg
->
StdId
 << 
CAN_TI0R_STID_Pos
) | \

743 
hÀán
->
pTxMsg
->
RTR
);

747 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_EXTID
(
hÀán
->
pTxMsg
->
ExtId
));

748 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 |Ô£ø((hÀán->
pTxMsg
->
ExtId
 << 
CAN_TI0R_EXID_Pos
) | \

749 
hÀán
->
pTxMsg
->
IDE
 |

750 
hÀán
->
pTxMsg
->
RTR
);

754 
hÀán
->
pTxMsg
->
DLC
 &Ô£ø(
u√∂t8_t
)0x0000000FU;

755 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
 &= 0xFFFFFFF0U;

756 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
 |Ô£øhÀán->
pTxMsg
->
DLC
;

759 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDLR
, ((
u√∂t32_t
)hÀán->
pTxMsg
->
D¬©a
[3U] << 
CAN_TDL0R_DATA3_Pos
) |

760 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[2U] << 
CAN_TDL0R_DATA2_Pos
) |

761 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[1U] << 
CAN_TDL0R_DATA1_Pos
) |

762 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[0U] << 
CAN_TDL0R_DATA0_Pos
));

763 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDHR
, ((
u√∂t32_t
)hÀán->
pTxMsg
->
D¬©a
[7U] << 
CAN_TDL0R_DATA3_Pos
) |

764 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[6U] << 
CAN_TDL0R_DATA2_Pos
) |

765 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[5U] << 
CAN_TDL0R_DATA1_Pos
) |

766 ((
u√∂t32_t
)
hÀán
->
pTxMsg
->
D¬©a
[4U] << 
CAN_TDL0R_DATA0_Pos
));

769 
hÀán
->
S√®√£
)

771 (
HAL_CAN_STATE_BUSY_RX0
):

772 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0
;

774 (
HAL_CAN_STATE_BUSY_RX1
):

775 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX1
;

777 (
HAL_CAN_STATE_BUSY_RX0_RX1
):

778 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
;

781 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX
;

786 
hÀán
->
E¬∫‚ÄπCode
 = 
HAL_CAN_ERROR_NONE
;

789 
	`__HAL_UNLOCK
(
hÀán
);

792 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 |Ô£ø
CAN_TI0R_TXRQ
;

801 
	`__HAL_CAN_ENABLE_IT
(
hÀán
, 
CAN_IT_EWG
 |

802 
CAN_IT_EPV
 |

803 
CAN_IT_BOF
 |

804 
CAN_IT_LEC
 |

805 
CAN_IT_ERR
 |

806 
CAN_IT_TME
 );

811 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

814  
HAL_ERROR
;

817  
HAL_OK
;

818 
	}
}

828 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_ReÀöive
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
u√∂t8_t
 
FIFONumb√Æ
, 
u√∂t32_t
 
Timeout
)

830 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

831 
C‚Ñ¢RxMsgTy‚â•Def
* 
pRxMsg
 = 
NULL
;

834 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FIFO
(
FIFONumb√Æ
));

837 i‚Ä°((
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
√ã&& ((
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0
) || \

838 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX0
) || \

839 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0_RX1
) || \

840 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX0_RX1
)))

842  
HAL_BUSY
;

846 i‚Ä°((
FIFONumb√Æ
 =Ô£ø
CAN_FIFO1
√ã&& ((
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX1
) || \

847 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX1
) || \

848 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0_RX1
) || \

849 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX0_RX1
)))

851  
HAL_BUSY
;

855 
	`__HAL_LOCK
(
hÀán
);

858 i‚Ä°(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

860 
hÀán
->
S√®√£
)

862 (
HAL_CAN_STATE_BUSY_TX
):

863 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0
;

865 (
HAL_CAN_STATE_BUSY_RX1
):

866 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0_RX1
;

868 (
HAL_CAN_STATE_BUSY_TX_RX1
):

869 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
;

872 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0
;

878 
hÀán
->
S√®√£
)

880 (
HAL_CAN_STATE_BUSY_TX
):

881 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX1
;

883 (
HAL_CAN_STATE_BUSY_RX0
):

884 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0_RX1
;

886 (
HAL_CAN_STATE_BUSY_TX_RX0
):

887 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
;

890 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX1
;

895 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

898 
	`__HAL_CAN_MSG_PENDING
(
hÀán
, 
FIFONumb√Æ
) == 0U)

901 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

903 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
()-
tick¬∞¬®t
) > Timeout))

905 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_TIMEOUT
;

907 
	`__HAL_UNLOCK
(
hÀán
);

908  
HAL_TIMEOUT
;

914 if(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

916 
pRxMsg
 = 
hÀán
->pRxMsg;

920 
pRxMsg
 = 
hÀán
->
pRx1Msg
;

924 
pRxMsg
->
IDE
 = (
u√∂t8_t
)
CAN_ID_EXT
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
;

925 i‚Ä°(
pRxMsg
->
IDE
 =Ô£ø
CAN_ID_STD
)

927 
pRxMsg
->
StdId
 = 0x000007FFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
 >> 21U);

931 
pRxMsg
->
ExtId
 = 0x1FFFFFFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
 >> 3U);

934 
pRxMsg
->
RTR
 = (
u√∂t8_t
)
CAN_RTR_REMOTE
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
;

936 
pRxMsg
->
DLC
 = (
u√∂t8_t
)0x0FU & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDTR
;

938 
pRxMsg
->
FMI
 = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDTR
 >> 8U);

940 
pRxMsg
->
FIFONumb√Æ
 = FIFONumber;

942 
pRxMsg
->
D¬©a
[0] = (
u√∂t8_t
)0xFFU & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
;

943 
pRxMsg
->
D¬©a
[1] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
 >> 8U);

944 
pRxMsg
->
D¬©a
[2] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
 >> 16U);

945 
pRxMsg
->
D¬©a
[3] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
 >> 24U);

946 
pRxMsg
->
D¬©a
[4] = (
u√∂t8_t
)0xFFU & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
;

947 
pRxMsg
->
D¬©a
[5] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
 >> 8U);

948 
pRxMsg
->
D¬©a
[6] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
 >> 16U);

949 
pRxMsg
->
D¬©a
[7] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
 >> 24U);

952 if(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

955 
	`__HAL_CAN_FIFO_RELEASE
(
hÀán
, 
CAN_FIFO0
);

960 
	`__HAL_CAN_FIFO_RELEASE
(
hÀán
, 
CAN_FIFO1
);

964 i‚Ä°(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

966 
hÀán
->
S√®√£
)

968 (
HAL_CAN_STATE_BUSY_TX_RX0
):

969 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX
;

971 (
HAL_CAN_STATE_BUSY_RX0_RX1
):

972 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX1
;

974 (
HAL_CAN_STATE_BUSY_TX_RX0_RX1
):

975 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX1
;

978 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

984 
hÀán
->
S√®√£
)

986 (
HAL_CAN_STATE_BUSY_TX_RX1
):

987 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX
;

989 (
HAL_CAN_STATE_BUSY_RX0_RX1
):

990 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0
;

992 (
HAL_CAN_STATE_BUSY_TX_RX0_RX1
):

993 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0
;

996 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1002 
	`__HAL_UNLOCK
(
hÀán
);

1005  
HAL_OK
;

1006 
	}
}

1015 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_ReÀöive_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
u√∂t8_t
 
FIFONumb√Æ
)

1018 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FIFO
(
FIFONumb√Æ
));

1021 if((
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
√ã&& ((
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0
) || \

1022 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX0
) || \

1023 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0_RX1
) || \

1024 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX0_RX1
)))

1026  
HAL_BUSY
;

1030 if((
FIFONumb√Æ
 =Ô£ø
CAN_FIFO1
√ã&& ((
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX1
) || \

1031 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX1
) || \

1032 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0_RX1
) || \

1033 (
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX_RX0_RX1
)))

1035  
HAL_BUSY
;

1039 
	`__HAL_LOCK
(
hÀán
);

1042 if(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

1044 
hÀán
->
S√®√£
)

1046 (
HAL_CAN_STATE_BUSY_TX
):

1047 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0
;

1049 (
HAL_CAN_STATE_BUSY_RX1
):

1050 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0_RX1
;

1052 (
HAL_CAN_STATE_BUSY_TX_RX1
):

1053 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
;

1056 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0
;

1062 
hÀán
->
S√®√£
)

1064 (
HAL_CAN_STATE_BUSY_TX
):

1065 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX1
;

1067 (
HAL_CAN_STATE_BUSY_RX0
):

1068 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0_RX1
;

1070 (
HAL_CAN_STATE_BUSY_TX_RX0
):

1071 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0_RX1
;

1074 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX1
;

1079 
hÀán
->
E¬∫‚ÄπCode
 = 
HAL_CAN_ERROR_NONE
;

1089 
	`__HAL_CAN_ENABLE_IT
(
hÀán
, 
CAN_IT_EWG
 |

1090 
CAN_IT_EPV
 |

1091 
CAN_IT_BOF
 |

1092 
CAN_IT_LEC
 |

1093 
CAN_IT_ERR
 |

1094 
CAN_IT_TME
 );

1097 
	`__HAL_UNLOCK
(
hÀán
);

1099 if(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

1102 
	`__HAL_CAN_ENABLE_IT
(
hÀán
, 
CAN_IT_FOV0
 | 
CAN_IT_FMP0
);

1107 
	`__HAL_CAN_ENABLE_IT
(
hÀán
, 
CAN_IT_FOV1
 | 
CAN_IT_FMP1
);

1111  
HAL_OK
;

1112 
	}
}

1120 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_S√Ä√Ø
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1122 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1125 
	`__HAL_LOCK
(
hÀán
);

1128 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY
;

1131 
	`MODIFY_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
,

1132 
CAN_MCR_INRQ
 ,

1133 
CAN_MCR_SLEEP
 );

1136 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_SLAK
) ||

1137 
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_INAK
) )

1140 
	`__HAL_UNLOCK
(
hÀán
);

1143  
HAL_ERROR
;

1147 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1150 
	`HAL_IS_BIT_CLR
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_SLAK
) ||

1151 
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_INAK
))

1153 if((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

1155 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_TIMEOUT
;

1158 
	`__HAL_UNLOCK
(
hÀán
);

1160  
HAL_TIMEOUT
;

1165 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1168 
	`__HAL_UNLOCK
(
hÀán
);

1171  
HAL_OK
;

1172 
	}
}

1181 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_WakeUp
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1183 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1186 
	`__HAL_LOCK
(
hÀán
);

1189 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY
;

1192 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_SLEEP
);

1195 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1198 (
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_SLAK
) == CAN_MSR_SLAK)

1200 if((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

1202 
hÀán
->
S√®√£
Ô£ø
HAL_CAN_STATE_TIMEOUT
;

1204 
	`__HAL_UNLOCK
(
hÀán
);

1205  
HAL_TIMEOUT
;

1208 if(
	`HAL_IS_BIT_SET
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
, 
CAN_MSR_SLAK
))

1211 
	`__HAL_UNLOCK
(
hÀán
);

1214  
HAL_ERROR
;

1218 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1221 
	`__HAL_UNLOCK
(
hÀán
);

1224  
HAL_OK
;

1225 
	}
}

1233 
	$HAL_CAN_IRQH‚Ñ¢d√Är
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1235 
u√∂t32_t
 
tmp1
 = 0U, 
tmp2
 = 0U, 
tmp3
 = 0U;

1236 
u√∂t32_t
 
√Ær‚Äπcode
 = 
HAL_CAN_ERROR_NONE
;

1239 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_FOV0
);

1240 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_FOV0
);

1241 if((
tmp1
 !Ô£ø0U√ã&& 
tmp2
)

1244 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_FOV0
;

1247 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_FOV0
);

1251 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_FOV1
);

1252 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_FOV1
);

1253 if((
tmp1
 !Ô£ø0U√ã&& 
tmp2
)

1256 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_FOV1
;

1259 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_FOV1
);

1263 if(
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_TME
))

1266 
tmp1
 = 
	`__HAL_CAN_TRANSMIT_STATUS
(
hÀán
, 
CAN_TXMAILBOX_0
);

1267 
tmp2
 = 
	`__HAL_CAN_TRANSMIT_STATUS
(
hÀán
, 
CAN_TXMAILBOX_1
);

1268 
tmp3
 = 
	`__HAL_CAN_TRANSMIT_STATUS
(
hÀán
, 
CAN_TXMAILBOX_2
);

1269 if(
tmp1
 || 
tmp2
 || 
tmp3
)

1271 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_TXOK0
);

1272 
tmp2
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_TXOK1
);

1273 
tmp3
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_TXOK2
);

1275 if((
tmp1
√ã|| (
tmp2
√ã|| (
tmp3
))

1278 
	`CAN_T√∏nsm√¥_IT
(
hÀán
);

1283 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TXFAIL
;

1287 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_RQCP0
 | 
CAN_TSR_RQCP1
 | 
CAN_TSR_RQCP2
 | \

1288 
CAN_FLAG_TXOK0
 | 
CAN_FLAG_TXOK1
 | 
CAN_FLAG_TXOK2
);

1292 
tmp1
 = 
	`__HAL_CAN_MSG_PENDING
(
hÀán
, 
CAN_FIFO0
);

1293 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_FMP0
);

1295 if((
tmp1
 !Ô£ø0U√ã&& 
tmp2
)

1298 
	`CAN_ReÀöive_IT
(
hÀán
, 
CAN_FIFO0
);

1301 
tmp1
 = 
	`__HAL_CAN_MSG_PENDING
(
hÀán
, 
CAN_FIFO1
);

1302 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_FMP1
);

1304 if((
tmp1
 !Ô£ø0U√ã&& 
tmp2
)

1307 
	`CAN_ReÀöive_IT
(
hÀán
, 
CAN_FIFO1
);

1311 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπcode
;

1313 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_EWG
);

1314 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_EWG
);

1315 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_ERR
);

1317 if(
tmp1
 && 
tmp2
 && 
tmp3
)

1320 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_EWG
;

1324 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_EPV
);

1325 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_EPV
);

1326 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_ERR
);

1328 if(
tmp1
 && 
tmp2
 && 
tmp3
)

1331 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_EPV
;

1335 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hÀán
, 
CAN_FLAG_BOF
);

1336 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_BOF
);

1337 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_ERR
);

1339 if(
tmp1
 && 
tmp2
 && 
tmp3
)

1342 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_BOF
;

1346 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hÀán
->
In¬∞‚Ñ¢Àö
->
ESR
, 
CAN_ESR_LEC
);

1347 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_LEC
);

1348 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hÀán
, 
CAN_IT_ERR
);

1350 if((!
tmp1
√ã&& 
tmp2
 && 
tmp3
)

1352 
tmp1
 = (
hÀán
->
In¬∞‚Ñ¢Àö
->
ESR
 & 
CAN_ESR_LEC
);

1353 
tmp1
)

1355 (
CAN_ESR_LEC_0
):

1357 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_STF
;

1359 (
CAN_ESR_LEC_1
):

1361 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_FOR
;

1363 (
CAN_ESR_LEC_1
 | 
CAN_ESR_LEC_0
):

1365 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_ACK
;

1367 (
CAN_ESR_LEC_2
):

1369 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_BR
;

1371 (
CAN_ESR_LEC_2
 | 
CAN_ESR_LEC_0
):

1373 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_BD
;

1375 (
CAN_ESR_LEC_2
 | 
CAN_ESR_LEC_1
):

1377 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_CRC
;

1384 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
ESR
, 
CAN_ESR_LEC
);

1388 if(
hÀán
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_CAN_ERROR_NONE
)

1391 
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 = 
CAN_MSR_ERRI
;

1393 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1406 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
CAN_IT_EWG
 |

1407 
CAN_IT_EPV
 |

1408 
CAN_IT_BOF
 |

1409 
CAN_IT_LEC
 |

1410 
CAN_IT_ERR
 |

1411 
CAN_IT_FMP0
|

1412 
CAN_IT_FOV0
|

1413 
CAN_IT_FMP1
|

1414 
CAN_IT_FOV1
|

1415 
CAN_IT_TME
 );

1418 
	`HAL_CAN_E¬∫‚ÄπC√Ülback
(
hÀán
);

1420 
	}
}

1428 
__w√≥k
 
	$HAL_CAN_TxC‚àÇtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1431 
	`UNUSED
(
hÀán
);

1435 
	}
}

1443 
__w√≥k
 
	$HAL_CAN_RxC‚àÇtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1446 
	`UNUSED
(
hÀán
);

1450 
	}
}

1458 
__w√≥k
 
	$HAL_CAN_E¬∫‚ÄπC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1461 
	`UNUSED
(
hÀán
);

1465 
	}
}

1493 
HAL_CAN_S√®√£Ty‚â•Def
 
	$HAL_CAN_G√´S√®√£
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1496  
hÀán
->
S√®√£
;

1497 
	}
}

1505 
u√∂t32_t
 
	$HAL_CAN_G√´E¬∫‚Äπ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1507  
hÀán
->
E¬∫‚ÄπCode
;

1508 
	}
}

1527 
HAL_S√®tusTy‚â•Def
 
	$CAN_T√∏nsm√¥_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
)

1530 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
CAN_IT_TME
);

1532 if(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_BUSY_TX
)

1540 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
CAN_IT_EWG
 |

1541 
CAN_IT_EPV
 |

1542 
CAN_IT_BOF
 |

1543 
CAN_IT_LEC
 |

1544 
CAN_IT_ERR
);

1548 
hÀán
->
S√®√£
)

1550 (
HAL_CAN_STATE_BUSY_TX_RX0
):

1551 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0
;

1553 (
HAL_CAN_STATE_BUSY_TX_RX1
):

1554 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX1
;

1556 (
HAL_CAN_STATE_BUSY_TX_RX0_RX1
):

1557 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0_RX1
;

1560 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1565 
	`HAL_CAN_TxC‚àÇtC√Ülback
(
hÀán
);

1567  
HAL_OK
;

1568 
	}
}

1578 
HAL_S√®tusTy‚â•Def
 
	$CAN_ReÀöive_IT
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
* 
hÀán
, 
u√∂t8_t
 
FIFONumb√Æ
)

1580 
u√∂t32_t
 
tmp1
 = 0U;

1581 
C‚Ñ¢RxMsgTy‚â•Def
* 
pRxMsg
 = 
NULL
;

1584 if(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

1586 
pRxMsg
 = 
hÀán
->pRxMsg;

1590 
pRxMsg
 = 
hÀán
->
pRx1Msg
;

1594 
pRxMsg
->
IDE
 = (
u√∂t8_t
)0x04U & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
;

1595 i‚Ä°(
pRxMsg
->
IDE
 =Ô£ø
CAN_ID_STD
)

1597 
pRxMsg
->
StdId
 = 0x000007FFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
 >> 21U);

1601 
pRxMsg
->
ExtId
 = 0x1FFFFFFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
 >> 3U);

1604 
pRxMsg
->
RTR
 = (
u√∂t8_t
)0x02U & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RIR
;

1606 
pRxMsg
->
DLC
 = (
u√∂t8_t
)0x0FU & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDTR
;

1608 
pRxMsg
->
FIFONumb√Æ
 = FIFONumber;

1610 
pRxMsg
->
FMI
 = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDTR
 >> 8U);

1612 
pRxMsg
->
D¬©a
[0] = (
u√∂t8_t
)0xFFU & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
;

1613 
pRxMsg
->
D¬©a
[1] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
 >> 8U);

1614 
pRxMsg
->
D¬©a
[2] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
 >> 16U);

1615 
pRxMsg
->
D¬©a
[3] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDLR
 >> 24U);

1616 
pRxMsg
->
D¬©a
[4] = (
u√∂t8_t
)0xFFU & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
;

1617 
pRxMsg
->
D¬©a
[5] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
 >> 8U);

1618 
pRxMsg
->
D¬©a
[6] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
 >> 16U);

1619 
pRxMsg
->
D¬©a
[7] = (
u√∂t8_t
)0xFFU & (
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
FIFONumb√Æ
].
RDHR
 >> 24U);

1622 i‚Ä°(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

1624 
	`__HAL_CAN_FIFO_RELEASE
(
hÀán
, 
CAN_FIFO0
);

1627 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
CAN_IT_FOV0
 | 
CAN_IT_FMP0
);

1632 
	`__HAL_CAN_FIFO_RELEASE
(
hÀán
, 
CAN_FIFO1
);

1635 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
CAN_IT_FOV1
 | 
CAN_IT_FMP1
);

1638 
tmp1
 = 
hÀán
->
S√®√£
;

1639 if((
tmp1
 =Ô£ø
HAL_CAN_STATE_BUSY_RX0
√ã|| (tmp1 =Ô£ø
HAL_CAN_STATE_BUSY_RX1
))

1647 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
CAN_IT_EWG
 |

1648 
CAN_IT_EPV
 |

1649 
CAN_IT_BOF
 |

1650 
CAN_IT_LEC
 |

1651 
CAN_IT_ERR
);

1655 i‚Ä°(
FIFONumb√Æ
 =Ô£ø
CAN_FIFO0
)

1657 
hÀán
->
S√®√£
)

1659 (
HAL_CAN_STATE_BUSY_TX_RX0
):

1660 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX
;

1662 (
HAL_CAN_STATE_BUSY_RX0_RX1
):

1663 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX1
;

1665 (
HAL_CAN_STATE_BUSY_TX_RX0_RX1
):

1666 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX1
;

1669 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1675 
hÀán
->
S√®√£
)

1677 (
HAL_CAN_STATE_BUSY_TX_RX1
):

1678 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX
;

1680 (
HAL_CAN_STATE_BUSY_RX0_RX1
):

1681 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_RX0
;

1683 (
HAL_CAN_STATE_BUSY_TX_RX0_RX1
):

1684 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_BUSY_TX_RX0
;

1687 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1693 
	`HAL_CAN_RxC‚àÇtC√Ülback
(
hÀán
);

1696  
HAL_OK
;

1697 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal.c

36 
	~"¬∞m32f1xx_h√Ü.h
"

47 #ifde‚Ä°
HAL_MODULE_ENABLED


58 
	#__STM32F1xx_HAL_VERSION_MAIN
 (0x01U√ã

	)

59 
	#__STM32F1xx_HAL_VERSION_SUB1
 (0x01U√ã

	)

60 
	#__STM32F1xx_HAL_VERSION_SUB2
 (0x07U√ã

	)

61 
	#__STM32F1xx_HAL_VERSION_RC
 (0x00U√ã

	)

62 
	#__STM32F1xx_HAL_VERSION
 ((
__STM32F1xx_HAL_VERSION_MAIN
 << 24)\

63 |(
__STM32F1xx_HAL_VERSION_SUB1
 << 16)\

64 |(
__STM32F1xx_HAL_VERSION_SUB2
 << 8 )\

65 |(
__STM32F1xx_HAL_VERSION_RC
))

	)

67 
	#IDCODE_DEVID_MASK
 0x00000FFFU

	)

79 
__IO
 
u√∂t32_t
 
	guwTick
;

80 
u√∂t32_t
 
	guwTickPrio
 = (1UL << 
__NVIC_PRIO_BITS
);

81 
HAL_TickF¬™qTy‚â•Def
 
	guwTickF¬™q
 = 
HAL_TICK_FREQ_DEFAULT
;

142 
HAL_S√®tusTy‚â•Def
 
	$HAL_In√¥
()

145 #i‚Ä°(
PREFETCH_ENABLE
 != 0)

146 #i‚Ä°
	`def√∂ed
(
STM32F101x6
√ã|| def√∂ed(
STM32F101xB
√ã|| def√∂ed(
STM32F101xE
√ã|| def√∂ed(
STM32F101xG
) || \

147 
	`def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
) || \

148 
	`def√∂ed
(
STM32F103x6
√ã|| def√∂ed(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
) || \

149 
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

152 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

157 
	`HAL_NVIC_S√´Pri‚Äπ√¥yGroup√∂g
(
NVIC_PRIORITYGROUP_2
);

160 
	`HAL_In√¥Tick
(
TICK_INT_PRIORITY
);

163 
	`HAL_M‚Ä¢In√¥
();

166  
HAL_OK
;

167 
	}
}

175 
HAL_S√®tusTy‚â•Def
 
	$HAL_DeIn√¥
()

178 
	`__HAL_RCC_APB1_FORCE_RESET
();

179 
	`__HAL_RCC_APB1_RELEASE_RESET
();

181 
	`__HAL_RCC_APB2_FORCE_RESET
();

182 
	`__HAL_RCC_APB2_RELEASE_RESET
();

184 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

185 
	`__HAL_RCC_AHB_FORCE_RESET
();

186 
	`__HAL_RCC_AHB_RELEASE_RESET
();

190 
	`HAL_M‚Ä¢DeIn√¥
();

193  
HAL_OK
;

194 
	}
}

200 
__w√≥k
 
	$HAL_M‚Ä¢In√¥
()

205 
	}
}

211 
__w√≥k
 
	$HAL_M‚Ä¢DeIn√¥
()

216 
	}
}

234 
__w√≥k
 
HAL_S√®tusTy‚â•Def
 
	$HAL_In√¥Tick
(
u√∂t32_t
 
TickPri‚Äπ√¥y
)

237 i‚Ä°(
	`HAL_SYSTICK_C‚ÅÑfig
(
Sy¬∞emC‚ÄπeClock
 / (1000U / 
uwTickF¬™q
)) > 0U)

239  
HAL_ERROR
;

243 i‚Ä°(
TickPri‚Äπ√¥y
 < (1UL << 
__NVIC_PRIO_BITS
))

245 
	`HAL_NVIC_S√´Pri‚Äπ√¥y
(
SysTick_IRQn
, 
TickPri‚Äπ√¥y
, 0U);

246 
uwTickPrio
 = 
TickPri‚Äπ√¥y
;

250  
HAL_ERROR
;

254  
HAL_OK
;

255 
	}
}

293 
__w√≥k
 
	$HAL_IncTick
()

295 
uwTick
 +Ô£ø
uwTickF¬™q
;

296 
	}
}

304 
__w√≥k
 
u√∂t32_t
 
	$HAL_G√´Tick
()

306  
uwTick
;

307 
	}
}

313 
u√∂t32_t
 
	$HAL_G√´TickPrio
()

315  
uwTickPrio
;

316 
	}
}

322 
HAL_S√®tusTy‚â•Def
 
	$HAL_S√´TickF¬™q
(
HAL_TickF¬™qTy‚â•Def
 
F¬™q
)

324 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

325 
HAL_TickF¬™qTy‚â•Def
 
¬•evTickF¬™q
;

327 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TICKFREQ
(
F¬™q
));

329 i‚Ä°(
uwTickF¬™q
 !Ô£ø
F¬™q
)

332 
¬•evTickF¬™q
 = 
uwTickF¬™q
;

335 
uwTickF¬™q
 = 
F¬™q
;

338 
¬∞¬©us
 = 
	`HAL_In√¥Tick
(
uwTickPrio
);

340 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

343 
uwTickF¬™q
 = 
¬•evTickF¬™q
;

347  
¬∞¬©us
;

348 
	}
}

354 
HAL_TickF¬™qTy‚â•Def
 
	$HAL_G√´TickF¬™q
()

356  
uwTickF¬™q
;

357 
	}
}

370 
__w√≥k
 
	$HAL_D√±ay
(
u√∂t32_t
 
D√±ay
)

372 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

373 
u√∂t32_t
 
wa√¥
 = 
D√±ay
;

376 i‚Ä°(
wa√¥
 < 
HAL_MAX_DELAY
)

378 
wa√¥
 +Ô£ø(
u√∂t32_t
)(
uwTickF¬™q
);

381 (
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã< 
wa√¥
)

384 
	}
}

396 
__w√≥k
 
	$HAL_Su‚Ä¢√≠dTick
()

399 
	`CLEAR_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

400 
	}
}

412 
__w√≥k
 
	$HAL_ResumeTick
()

415 
	`SET_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

416 
	}
}

422 
u√∂t32_t
 
	$HAL_G√´H√ÜV√Æsi‚ÅÑ
()

424  
__STM32F1xx_HAL_VERSION
;

425 
	}
}

438 
u√∂t32_t
 
	$HAL_G√´REVID
()

440  ((
DBGMCU
->
IDCODE
√ã>> 
DBGMCU_IDCODE_REV_ID_Pos
);

441 
	}
}

454 
u√∂t32_t
 
	$HAL_G√´DEVID
()

456  ((
DBGMCU
->
IDCODE
√ã& 
IDCODE_DEVID_MASK
);

457 
	}
}

463 
u√∂t32_t
 
	$HAL_G√´UIDw0
()

465 (
	`READ_REG
(*((
u√∂t32_t
 *)
UID_BASE
)));

466 
	}
}

472 
u√∂t32_t
 
	$HAL_G√´UIDw1
()

474 (
	`READ_REG
(*((
u√∂t32_t
 *)(
UID_BASE
 + 4U))));

475 
	}
}

481 
u√∂t32_t
 
	$HAL_G√´UIDw2
()

483 (
	`READ_REG
(*((
u√∂t32_t
 *)(
UID_BASE
 + 8U))));

484 
	}
}

490 
	$HAL_DBGMCU_E¬´b√ÄDBGS√Ä√ØMode
()

492 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

493 
	}
}

506 
	$HAL_DBGMCU_Di√üb√ÄDBGS√Ä√ØMode
()

508 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

509 
	}
}

536 
	$HAL_DBGMCU_E¬´b√ÄDBGSt‚Ä∫Mode
()

538 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

539 
	}
}

552 
	$HAL_DBGMCU_Di√üb√ÄDBGSt‚Ä∫Mode
()

554 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

555 
	}
}

568 
	$HAL_DBGMCU_E¬´b√ÄDBGS√®ndbyMode
()

570 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

571 
	}
}

584 
	$HAL_DBGMCU_Di√üb√ÄDBGS√®ndbyMode
()

586 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

587 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_adc.c

325 
	~"¬∞m32f1xx_h√Ü.h
"

336 #ifde‚Ä°
HAL_ADC_MODULE_ENABLED


350 
	#ADC_ENABLE_TIMEOUT
 2U

	)

351 
	#ADC_DISABLE_TIMEOUT
 2U

	)

356 
	#ADC_STAB_DELAY_US
 1U

	)

361 
	#ADC_TEMPSENSOR_DELAY_US
 10U

	)

421 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_In√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

423 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

424 
u√∂t32_t
 
tmp_¬∏1
 = 0U;

425 
u√∂t32_t
 
tmp_¬∏2
 = 0U;

426 
u√∂t32_t
 
tmp_sqr1
 = 0U;

429 if(
hadc
 =Ô£ø
NULL
)

431  
HAL_ERROR
;

435 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

436 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_DATA_ALIGN
(
hadc
->
In√¥
.
D¬©aAlign
));

437 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_SCAN_MODE
(
hadc
->
In√¥
.
SÀánC‚ÅÑvMode
));

438 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
));

439 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_EXTTRIG
(
hadc
->
In√¥
.
Ex√£‚à´√ÜTrigC‚ÅÑv
));

441 if(
hadc
->
In√¥
.
SÀánC‚ÅÑvMode
 !Ô£ø
ADC_SCAN_DISABLE
)

443 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_REGULAR_NB_CONV
(
hadc
->
In√¥
.
NbrOfC‚ÅÑv√Æsi‚ÅÑ
));

444 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
In√¥
.
Disc‚ÅÑt√∂uousC‚ÅÑvMode
));

445 if(
hadc
->
In√¥
.
Disc‚ÅÑt√∂uousC‚ÅÑvMode
 !Ô£ø
DISABLE
)

447 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_REGULAR_DISCONT_NUMBER
(
hadc
->
In√¥
.
NbrOfDiscC‚ÅÑv√Æsi‚ÅÑ
));

458 i‚Ä°(
hadc
->
S√®√£
 =Ô£ø
HAL_ADC_STATE_RESET
)

461 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

464 
hadc
->
Lock
 = 
HAL_UNLOCKED
;

466 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

468 
hadc
->
C‚ÅÑvC‚àÇtC√Ülback
 = 
HAL_ADC_C‚ÅÑvC‚àÇtC√Ülback
;

469 
hadc
->
C‚ÅÑvH√ÜfC‚àÇtC√Ülback
 = 
HAL_ADC_C‚ÅÑvH√ÜfC‚àÇtC√Ülback
;

470 
hadc
->
Lev√±OutOfW√∂dowC√Ülback
 = 
HAL_ADC_Lev√±OutOfW√∂dowC√Ülback
;

471 
hadc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_ADC_E¬∫‚ÄπC√Ülback
;

472 
hadc
->
InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
 = 
HAL_ADCEx_InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
;

474 i‚Ä°(
hadc
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

476 
hadc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_ADC_M‚Ä¢In√¥
;

480 
hadc
->
	`M‚Ä¢In√¥C√Ülback
(hadc);

483 
	`HAL_ADC_M‚Ä¢In√¥
(
hadc
);

492 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

497 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
) &&

498 (
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
) )

501 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

502 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

503 
HAL_ADC_STATE_BUSY_INTERNAL
);

517 
tmp_¬∏2
 |Ô£ø(
hadc
->
In√¥
.
D¬©aAlign
 |

518 
	`ADC_CFGR_EXTSEL
(
hadc
, hadc->
In√¥
.
Ex√£‚à´√ÜTrigC‚ÅÑv
) |

519 
	`ADC_CR2_CONTINUOUS
((
u√∂t32_t
)
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
) );

525 
tmp_¬∏1
 |Ô£ø(
	`ADC_CR1_SCAN_SET
(
hadc
->
In√¥
.
SÀánC‚ÅÑvMode
));

530 i‚Ä°(
hadc
->
In√¥
.
Disc‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
ENABLE
)

532 i‚Ä°(
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
DISABLE
)

536 
	`SET_BIT
(
tmp_¬∏1
, 
ADC_CR1_DISCEN
 |

537 
	`ADC_CR1_DISCONTINUOUS_NUM
(
hadc
->
In√¥
.
NbrOfDiscC‚ÅÑv√Æsi‚ÅÑ
) );

545 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

548 
	`SET_BIT
(
hadc
->
E¬∫‚ÄπCode
, 
HAL_ADC_ERROR_INTERNAL
);

553 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
,

554 
ADC_CR1_SCAN
 |

555 
ADC_CR1_DISCEN
 |

556 
ADC_CR1_DISCNUM
 ,

557 
tmp_¬∏1
 );

560 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
,

561 
ADC_CR2_ALIGN
 |

562 
ADC_CR2_EXTSEL
 |

563 
ADC_CR2_EXTTRIG
 |

564 
ADC_CR2_CONT
 ,

565 
tmp_¬∏2
 );

576 i‚Ä°(
	`ADC_CR1_SCAN_SET
(
hadc
->
In√¥
.
SÀánC‚ÅÑvMode
√ã=Ô£ø
ADC_SCAN_ENABLE
)

578 
tmp_sqr1
 = 
	`ADC_SQR1_L_SHIFT
(
hadc
->
In√¥
.
NbrOfC‚ÅÑv√Æsi‚ÅÑ
);

581 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR1
,

582 
ADC_SQR1_L
 ,

583 
tmp_sqr1
 );

591 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, ~(
ADC_CR2_ADON
 | 
ADC_CR2_DMA
 |

592 
ADC_CR2_SWSTART
 | 
ADC_CR2_JSWSTART
 |

593 
ADC_CR2_JEXTTRIG
 | 
ADC_CR2_JEXTSEL
 |

594 
ADC_CR2_TSVREFE
 ))

595 =Ô£ø
tmp_¬∏2
)

598 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

601 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

602 
HAL_ADC_STATE_BUSY_INTERNAL
,

603 
HAL_ADC_STATE_READY
);

608 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

609 
HAL_ADC_STATE_BUSY_INTERNAL
,

610 
HAL_ADC_STATE_ERROR_INTERNAL
);

613 
	`SET_BIT
(
hadc
->
E¬∫‚ÄπCode
, 
HAL_ADC_ERROR_INTERNAL
);

615 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

622 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

624 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

628  
tmp_h√Ü_¬∞¬©us
;

629 
	}
}

639 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_DeIn√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

641 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

644 if(
hadc
 =Ô£ø
NULL
)

646  
HAL_ERROR
;

650 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

653 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_BUSY_INTERNAL
);

657 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

662 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

670 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_AWD
 | 
ADC_FLAG_JEOC
 | 
ADC_FLAG_EOC
 |

671 
ADC_FLAG_JSTRT
 | 
ADC_FLAG_STRT
));

674 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_DISCNUM
 |

675 
ADC_CR1_JDISCEN
 | 
ADC_CR1_DISCEN
 | 
ADC_CR1_JAUTO
 |

676 
ADC_CR1_AWDSGL
 | 
ADC_CR1_SCAN
 | 
ADC_CR1_JEOCIE
 |

677 
ADC_CR1_AWDIE
 | 
ADC_CR1_EOCIE
 | 
ADC_CR1_AWDCH
 ));

680 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_TSVREFE
 | 
ADC_CR2_SWSTART
 | 
ADC_CR2_JSWSTART
 |

681 
ADC_CR2_EXTTRIG
 | 
ADC_CR2_EXTSEL
 | 
ADC_CR2_JEXTTRIG
 |

682 
ADC_CR2_JEXTSEL
 | 
ADC_CR2_ALIGN
 | 
ADC_CR2_DMA
 |

683 
ADC_CR2_RSTCAL
 | 
ADC_CR2_CAL
 | 
ADC_CR2_CONT
 |

684 
ADC_CR2_ADON
 ));

687 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
SMPR1
, (
ADC_SMPR1_SMP17
 | 
ADC_SMPR1_SMP16
 | 
ADC_SMPR1_SMP15
 |

688 
ADC_SMPR1_SMP14
 | 
ADC_SMPR1_SMP13
 | 
ADC_SMPR1_SMP12
 |

689 
ADC_SMPR1_SMP11
 | 
ADC_SMPR1_SMP10
 ));

692 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
SMPR2
, (
ADC_SMPR2_SMP9
 | 
ADC_SMPR2_SMP8
 | 
ADC_SMPR2_SMP7
 |

693 
ADC_SMPR2_SMP6
 | 
ADC_SMPR2_SMP5
 | 
ADC_SMPR2_SMP4
 |

694 
ADC_SMPR2_SMP3
 | 
ADC_SMPR2_SMP2
 | 
ADC_SMPR2_SMP1
 |

695 
ADC_SMPR2_SMP0
 ));

698 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR1
, 
ADC_JOFR1_JOFFSET1
);

700 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR2
, 
ADC_JOFR2_JOFFSET2
);

702 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR3
, 
ADC_JOFR3_JOFFSET3
);

704 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR4
, 
ADC_JOFR4_JOFFSET4
);

707 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
HTR
, 
ADC_HTR_HT
);

709 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
LTR
, 
ADC_LTR_LT
);

712 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR1
, 
ADC_SQR1_L
 |

713 
ADC_SQR1_SQ16
 | 
ADC_SQR1_SQ15
 |

714 
ADC_SQR1_SQ14
 | 
ADC_SQR1_SQ13
 );

717 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR1
, 
ADC_SQR1_L
 |

718 
ADC_SQR1_SQ16
 | 
ADC_SQR1_SQ15
 |

719 
ADC_SQR1_SQ14
 | 
ADC_SQR1_SQ13
 );

722 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR2
, 
ADC_SQR2_SQ12
 | 
ADC_SQR2_SQ11
 | 
ADC_SQR2_SQ10
 |

723 
ADC_SQR2_SQ9
 | 
ADC_SQR2_SQ8
 | 
ADC_SQR2_SQ7
 );

726 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR3
, 
ADC_SQR3_SQ6
 | 
ADC_SQR3_SQ5
 | 
ADC_SQR3_SQ4
 |

727 
ADC_SQR3_SQ3
 | 
ADC_SQR3_SQ2
 | 
ADC_SQR3_SQ1
 );

730 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
JSQR
, 
ADC_JSQR_JL
 |

731 
ADC_JSQR_JSQ4
 | 
ADC_JSQR_JSQ3
 |

732 
ADC_JSQR_JSQ2
 | 
ADC_JSQR_JSQ1
 );

735 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
JSQR
, 
ADC_JSQR_JL
 |

736 
ADC_JSQR_JSQ4
 | 
ADC_JSQR_JSQ3
 |

737 
ADC_JSQR_JSQ2
 | 
ADC_JSQR_JSQ1
 );

754 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

755 i‚Ä°(
hadc
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

757 
hadc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_ADC_M‚Ä¢DeIn√¥
;

761 
hadc
->
	`M‚Ä¢DeIn√¥C√Ülback
(hadc);

764 
	`HAL_ADC_M‚Ä¢DeIn√¥
(
hadc
);

768 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

771 
hadc
->
S√®√£
 = 
HAL_ADC_STATE_RESET
;

776 
	`__HAL_UNLOCK
(
hadc
);

779  
tmp_h√Ü_¬∞¬©us
;

780 
	}
}

787 
__w√≥k
 
	$HAL_ADC_M‚Ä¢In√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

790 
	`UNUSED
(
hadc
);

794 
	}
}

801 
__w√≥k
 
	$HAL_ADC_M‚Ä¢DeIn√¥
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

804 
	`UNUSED
(
hadc
);

808 
	}
}

810 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

830 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_Regi¬∞√ÆC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
, 
HAL_ADC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pADC_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

832 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

834 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

837 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

839  
HAL_ERROR
;

842 i‚Ä°((
hadc
->
S√®√£
 & 
HAL_ADC_STATE_READY
) != 0)

844 
C√ÜlbackID
)

846 
HAL_ADC_CONVERSION_COMPLETE_CB_ID
 :

847 
hadc
->
C‚ÅÑvC‚àÇtC√Ülback
 = 
pC√Ülback
;

850 
HAL_ADC_CONVERSION_HALF_CB_ID
 :

851 
hadc
->
C‚ÅÑvH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

854 
HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID
 :

855 
hadc
->
Lev√±OutOfW√∂dowC√Ülback
 = 
pC√Ülback
;

858 
HAL_ADC_ERROR_CB_ID
 :

859 
hadc
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

862 
HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID
 :

863 
hadc
->
InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
 = 
pC√Ülback
;

866 
HAL_ADC_MSPINIT_CB_ID
 :

867 
hadc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

870 
HAL_ADC_MSPDEINIT_CB_ID
 :

871 
hadc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

876 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

879 
¬∞¬©us
 = 
HAL_ERROR
;

883 i‚Ä°(
HAL_ADC_STATE_RESET
 =Ô£ø
hadc
->
S√®√£
)

885 
C√ÜlbackID
)

887 
HAL_ADC_MSPINIT_CB_ID
 :

888 
hadc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

891 
HAL_ADC_MSPDEINIT_CB_ID
 :

892 
hadc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

897 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

900 
¬∞¬©us
 = 
HAL_ERROR
;

907 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

910 
¬∞¬©us
 = 
HAL_ERROR
;

913  
¬∞¬©us
;

914 
	}
}

934 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_UnRegi¬∞√ÆC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
, 
HAL_ADC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

936 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

938 i‚Ä°((
hadc
->
S√®√£
 & 
HAL_ADC_STATE_READY
) != 0)

940 
C√ÜlbackID
)

942 
HAL_ADC_CONVERSION_COMPLETE_CB_ID
 :

943 
hadc
->
C‚ÅÑvC‚àÇtC√Ülback
 = 
HAL_ADC_C‚ÅÑvC‚àÇtC√Ülback
;

946 
HAL_ADC_CONVERSION_HALF_CB_ID
 :

947 
hadc
->
C‚ÅÑvH√ÜfC‚àÇtC√Ülback
 = 
HAL_ADC_C‚ÅÑvH√ÜfC‚àÇtC√Ülback
;

950 
HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID
 :

951 
hadc
->
Lev√±OutOfW√∂dowC√Ülback
 = 
HAL_ADC_Lev√±OutOfW√∂dowC√Ülback
;

954 
HAL_ADC_ERROR_CB_ID
 :

955 
hadc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_ADC_E¬∫‚ÄπC√Ülback
;

958 
HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID
 :

959 
hadc
->
InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
 = 
HAL_ADCEx_InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
;

962 
HAL_ADC_MSPINIT_CB_ID
 :

963 
hadc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_ADC_M‚Ä¢In√¥
;

966 
HAL_ADC_MSPDEINIT_CB_ID
 :

967 
hadc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_ADC_M‚Ä¢DeIn√¥
;

972 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

975 
¬∞¬©us
 = 
HAL_ERROR
;

979 i‚Ä°(
HAL_ADC_STATE_RESET
 =Ô£ø
hadc
->
S√®√£
)

981 
C√ÜlbackID
)

983 
HAL_ADC_MSPINIT_CB_ID
 :

984 
hadc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_ADC_M‚Ä¢In√¥
;

987 
HAL_ADC_MSPDEINIT_CB_ID
 :

988 
hadc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_ADC_M‚Ä¢DeIn√¥
;

993 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

996 
¬∞¬©us
 = 
HAL_ERROR
;

1003 
hadc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_ADC_ERROR_INVALID_CALLBACK
;

1006 
¬∞¬©us
 = 
HAL_ERROR
;

1009  
¬∞¬©us
;

1010 
	}
}

1046 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_S√®œÄ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1048 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1051 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1054 
	`__HAL_LOCK
(
hadc
);

1057 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(
hadc
);

1060 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1065 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

1066 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
,

1067 
HAL_ADC_STATE_REG_BUSY
);

1072 i‚Ä°(
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
))

1075 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

1079 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
√ã!Ô£ø
RESET
)

1081 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1087 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

1091 i‚Ä°(
	`ADC_MULTIMODE_AUTO_INJECTED
(
hadc
))

1093 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1098 i‚Ä°(
	`HAL_IS_BIT_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
))

1101 
	`CLEAR_BIT
(
hadc
->
E¬∫‚ÄπCode
, (
HAL_ADC_ERROR_OVR
 | 
HAL_ADC_ERROR_DMA
));

1106 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1112 
	`__HAL_UNLOCK
(
hadc
);

1116 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
);

1128 i‚Ä°(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1129 
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
) )

1132 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_SWSTART
 | 
ADC_CR2_EXTTRIG
));

1137 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_EXTTRIG
);

1143 
	`__HAL_UNLOCK
(
hadc
);

1147  
tmp_h√Ü_¬∞¬©us
;

1148 
	}
}

1159 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_St‚Ä∫
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1161 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1164 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1167 
	`__HAL_LOCK
(
hadc
);

1171 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

1174 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1177 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

1178 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

1179 
HAL_ADC_STATE_READY
);

1183 
	`__HAL_UNLOCK
(
hadc
);

1186  
tmp_h√Ü_¬∞¬©us
;

1187 
	}
}

1203 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_PÔ¨ÅlF‚ÄπC‚ÅÑv√Æsi‚ÅÑ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
Timeout
)

1205 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1209 
__IO
 
u√∂t32_t
 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões
 = 0U;

1210 
u√∂t32_t
 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões_max
 = 0U;

1213 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1216 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1221 i‚Ä°(
	`HAL_IS_BIT_SET
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_DMA
))

1224 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1227 
	`__HAL_UNLOCK
(
hadc
);

1229  
HAL_ERROR
;

1246 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_SCAN
) &&

1247 
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR1
, 
ADC_SQR1_L
) )

1250 
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
SR
, 
ADC_FLAG_EOC
))

1253 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1255 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
 ) > Timeout))

1258 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_TIMEOUT
);

1261 
	`__HAL_UNLOCK
(
hadc
);

1263  
HAL_TIMEOUT
;

1274 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões_max
 = ((
Sy¬∞emC‚ÄπeClock


1275 / 
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_ADC
))

1276 * 
	`ADC_CONVCYCLES_MAX_RANGE
(
hadc
) );

1278 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões
 < 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões_max
)

1281 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1283 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
) > Timeout))

1286 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_TIMEOUT
);

1289 
	`__HAL_UNLOCK
(
hadc
);

1291  
HAL_TIMEOUT
;

1294 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões
 ++;

1299 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_STRT
 | 
ADC_FLAG_EOC
);

1302 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_EOC
);

1309 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1310 (
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
DISABLE
) )

1313 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
);

1315 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
))

1317 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_READY
);

1322  
HAL_OK
;

1323 
	}
}

1334 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_PÔ¨ÅlF‚ÄπEv√≠t
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
Ev√≠tTy‚â•
, u√∂t32_√†
Timeout
)

1336 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1339 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1340 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_EVENT_TYPE
(
Ev√≠tTy‚â•
));

1343 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1346 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
Ev√≠tTy‚â•
√ã=Ô£ø
RESET
)

1349 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1351 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
 ) > Timeout))

1354 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_TIMEOUT
);

1357 
	`__HAL_UNLOCK
(
hadc
);

1359  
HAL_TIMEOUT
;

1366 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_AWD1
);

1369 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

1372  
HAL_OK
;

1373 
	}
}

1383 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_S√®œÄ_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1385 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1388 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1391 
	`__HAL_LOCK
(
hadc
);

1394 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(
hadc
);

1397 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1402 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

1403 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
 | 
HAL_ADC_STATE_REG_EOSMP
,

1404 
HAL_ADC_STATE_REG_BUSY
);

1409 i‚Ä°(
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
))

1412 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

1416 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
√ã!Ô£ø
RESET
)

1418 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1424 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

1428 i‚Ä°(
	`ADC_MULTIMODE_AUTO_INJECTED
(
hadc
))

1430 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1435 i‚Ä°(
	`HAL_IS_BIT_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
))

1438 
	`CLEAR_BIT
(
hadc
->
E¬∫‚ÄπCode
, (
HAL_ADC_ERROR_OVR
 | 
HAL_ADC_ERROR_DMA
));

1443 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1449 
	`__HAL_UNLOCK
(
hadc
);

1453 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
);

1456 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_EOC
);

1465 i‚Ä°(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1466 
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
) )

1469 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_SWSTART
 | 
ADC_CR2_EXTTRIG
));

1474 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_EXTTRIG
);

1480 
	`__HAL_UNLOCK
(
hadc
);

1484  
tmp_h√Ü_¬∞¬©us
;

1485 
	}
}

1494 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_St‚Ä∫_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1496 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1499 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1502 
	`__HAL_LOCK
(
hadc
);

1506 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

1509 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1512 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

1515 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

1516 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

1517 
HAL_ADC_STATE_READY
);

1521 
	`__HAL_UNLOCK
(
hadc
);

1524  
tmp_h√Ü_¬∞¬©us
;

1525 
	}
}

1551 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_S√®œÄ_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
* 
pD¬©a
, u√∂t32_√†
L√≠gth
)

1553 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1556 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_DMA_CAPABILITY_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1561 if(
	`ADC_MULTIMODE_IS_ENABLE
(
hadc
√ã=Ô£ø
RESET
)

1564 
	`__HAL_LOCK
(
hadc
);

1567 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(
hadc
);

1570 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1575 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

1576 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
 | 
HAL_ADC_STATE_REG_EOSMP
,

1577 
HAL_ADC_STATE_REG_BUSY
);

1582 i‚Ä°(
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
))

1585 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

1589 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
√ã!Ô£ø
RESET
)

1591 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1597 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

1601 i‚Ä°(
	`ADC_MULTIMODE_AUTO_INJECTED
(
hadc
))

1603 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1608 i‚Ä°(
	`HAL_IS_BIT_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
))

1611 
	`CLEAR_BIT
(
hadc
->
E¬∫‚ÄπCode
, (
HAL_ADC_ERROR_OVR
 | 
HAL_ADC_ERROR_DMA
));

1616 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1622 
	`__HAL_UNLOCK
(
hadc
);

1625 
hadc
->
DMA_H‚Ñ¢d√Ä
->
X‚ÄûrC‚àÇtC√Ülback
 = 
ADC_DMAC‚ÅÑvC‚àÇt
;

1628 
hadc
->
DMA_H‚Ñ¢d√Ä
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
ADC_DMAH√ÜfC‚ÅÑvC‚àÇt
;

1631 
hadc
->
DMA_H‚Ñ¢d√Ä
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
ADC_DMAE¬∫‚Äπ
;

1640 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
);

1643 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_DMA
);

1646 
	`HAL_DMA_S√®œÄ_IT
(
hadc
->
DMA_H‚Ñ¢d√Ä
, (
u√∂t32_t
)&hadc->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
);

1652 i‚Ä°(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
))

1655 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_SWSTART
 | 
ADC_CR2_EXTTRIG
));

1660 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_EXTTRIG
);

1666 
	`__HAL_UNLOCK
(
hadc
);

1671 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

1675  
tmp_h√Ü_¬∞¬©us
;

1676 
	}
}

1692 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_St‚Ä∫_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1694 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1697 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_DMA_CAPABILITY_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1700 
	`__HAL_LOCK
(
hadc
);

1704 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

1707 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1710 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_DMA
);

1714 i‚Ä°(
hadc
->
DMA_H‚Ñ¢d√Ä
->
S√®√£
 =Ô£ø
HAL_DMA_STATE_BUSY
)

1716 
tmp_h√Ü_¬∞¬©us
 = 
	`HAL_DMA_Ab‚Äπt
(
hadc
->
DMA_H‚Ñ¢d√Ä
);

1719 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

1722 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

1723 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

1724 
HAL_ADC_STATE_READY
);

1729 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_DMA
);

1735 
	`__HAL_UNLOCK
(
hadc
);

1738  
tmp_h√Ü_¬∞¬©us
;

1739 
	}
}

1760 
u√∂t32_t
 
	$HAL_ADC_G√´V√Üue
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1763 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1769  
hadc
->
In¬∞‚Ñ¢Àö
->
DR
;

1770 
	}
}

1777 
	$HAL_ADC_IRQH‚Ñ¢d√Är
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1780 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1781 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
));

1782 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_REGULAR_NB_CONV
(
hadc
->
In√¥
.
NbrOfC‚ÅÑv√Æsi‚ÅÑ
));

1786 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_EOC
))

1788 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOC
) )

1791 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
))

1794 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_EOC
);

1802 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1803 (
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
DISABLE
) )

1806 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

1809 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
);

1811 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
))

1813 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_READY
);

1818 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

1819 
hadc
->
	`C‚ÅÑvC‚àÇtC√Ülback
(hadc);

1821 
	`HAL_ADC_C‚ÅÑvC‚àÇtC√Ülback
(
hadc
);

1825 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_STRT
 | 
ADC_FLAG_EOC
);

1830 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_JEOC
))

1832 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_JEOC
))

1835 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
))

1838 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
);

1848 if(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) ||

1849 (
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
) &&

1850 (
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1851 (
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
DISABLE
) ) ) )

1854 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

1857 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
);

1859 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
))

1861 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_READY
);

1866 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

1867 
hadc
->
	`InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
(hadc);

1869 
	`HAL_ADCEx_InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
(
hadc
);

1873 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_JSTRT
 | 
ADC_FLAG_JEOC
));

1878 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_AWD
))

1880 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_AWD
))

1883 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_AWD1
);

1886 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

1887 
hadc
->
	`Lev√±OutOfW√∂dowC√Ülback
(hadc);

1889 
	`HAL_ADC_Lev√±OutOfW√∂dowC√Ülback
(
hadc
);

1893 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

1897 
	}
}

1904 
__w√≥k
 
	$HAL_ADC_C‚ÅÑvC‚àÇtC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1907 
	`UNUSED
(
hadc
);

1911 
	}
}

1918 
__w√≥k
 
	$HAL_ADC_C‚ÅÑvH√ÜfC‚àÇtC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1921 
	`UNUSED
(
hadc
);

1925 
	}
}

1932 
__w√≥k
 
	$HAL_ADC_Lev√±OutOfW√∂dowC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

1935 
	`UNUSED
(
hadc
);

1939 
	}
}

1947 
__w√≥k
 
	$HAL_ADC_E¬∫‚ÄπC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
)

1950 
	`UNUSED
(
hadc
);

1954 
	}
}

1995 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
ADC_Ch‚Ñ¢‚àölC‚ÅÑfTy‚â•Def
* 
sC‚ÅÑfig
)

1997 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1998 
__IO
 
u√∂t32_t
 
wa√¥_lo‚Ä∫_√∂dex
 = 0U;

2001 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

2002 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_CHANNEL
(
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
));

2003 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_REGULAR_RANK
(
sC‚ÅÑfig
->
R‚Ñ¢k
));

2004 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_SAMPLE_TIME
(
sC‚ÅÑfig
->
Sam‚àÇ√∂gTime
));

2007 
	`__HAL_LOCK
(
hadc
);

2012 i‚Ä°(
sC‚ÅÑfig
->
R‚Ñ¢k
 < 7U)

2014 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR3
 ,

2015 
	`ADC_SQR3_RK
(
ADC_SQR3_SQ1
, 
sC‚ÅÑfig
->
R‚Ñ¢k
) ,

2016 
	`ADC_SQR3_RK
(
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
, sC‚ÅÑfig->
R‚Ñ¢k
) );

2019 i‚Ä°(
sC‚ÅÑfig
->
R‚Ñ¢k
 < 13U)

2021 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR2
 ,

2022 
	`ADC_SQR2_RK
(
ADC_SQR2_SQ7
, 
sC‚ÅÑfig
->
R‚Ñ¢k
) ,

2023 
	`ADC_SQR2_RK
(
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
, sC‚ÅÑfig->
R‚Ñ¢k
) );

2028 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SQR1
 ,

2029 
	`ADC_SQR1_RK
(
ADC_SQR1_SQ13
, 
sC‚ÅÑfig
->
R‚Ñ¢k
) ,

2030 
	`ADC_SQR1_RK
(
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
, sC‚ÅÑfig->
R‚Ñ¢k
) );

2036 i‚Ä°(
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
 >Ô£ø
ADC_CHANNEL_10
)

2038 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SMPR1
 ,

2039 
	`ADC_SMPR1
(
ADC_SMPR1_SMP10
, 
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
) ,

2040 
	`ADC_SMPR1
(
sC‚ÅÑfig
->
Sam‚àÇ√∂gTime
, sC‚ÅÑfig->
Ch‚Ñ¢‚àöl
) );

2044 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SMPR2
 ,

2045 
	`ADC_SMPR2
(
ADC_SMPR2_SMP0
, 
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
) ,

2046 
	`ADC_SMPR2
(
sC‚ÅÑfig
->
Sam‚àÇ√∂gTime
, sC‚ÅÑfig->
Ch‚Ñ¢‚àöl
) );

2051 i‚Ä°((
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_TEMPSENSOR
) ||

2052 (
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_VREFINT
) )

2057 i‚Ä°(
hadc
->
In¬∞‚Ñ¢Àö
 =Ô£ø
ADC1
)

2059 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_TSVREFE
√ã=Ô£ø
RESET
)

2061 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_TSVREFE
);

2063 i‚Ä°((
sC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_TEMPSENSOR
))

2067 
wa√¥_lo‚Ä∫_√∂dex
 = (
ADC_TEMPSENSOR_DELAY_US
 * (
Sy¬∞emC‚ÄπeClock
 / 1000000U));

2068 
wa√¥_lo‚Ä∫_√∂dex
 != 0U)

2070 
wa√¥_lo‚Ä∫_√∂dex
--;

2078 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

2080 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

2085 
	`__HAL_UNLOCK
(
hadc
);

2088  
tmp_h√Ü_¬∞¬©us
;

2089 
	}
}

2105 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADC_A¬´logWDGC‚ÅÑfig
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
ADC_A¬´logWDGC‚ÅÑfTy‚â•Def
* 
A¬´logWDGC‚ÅÑfig
)

2108 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

2109 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ANALOG_WATCHDOG_MODE
(
A¬´logWDGC‚ÅÑfig
->
W¬©chdogMode
));

2110 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
A¬´logWDGC‚ÅÑfig
->
ITMode
));

2111 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_RANGE
(
A¬´logWDGC‚ÅÑfig
->
HighTh¬™shÔ¨Åd
));

2112 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_RANGE
(
A¬´logWDGC‚ÅÑfig
->
LowTh¬™shÔ¨Åd
));

2114 if((
A¬´logWDGC‚ÅÑfig
->
W¬©chdogMode
 =Ô£ø
ADC_ANALOGWATCHDOG_SINGLE_REG
) ||

2115 (
A¬´logWDGC‚ÅÑfig
->
W¬©chdogMode
 =Ô£ø
ADC_ANALOGWATCHDOG_SINGLE_INJEC
) ||

2116 (
A¬´logWDGC‚ÅÑfig
->
W¬©chdogMode
 =Ô£ø
ADC_ANALOGWATCHDOG_SINGLE_REGINJEC
) )

2118 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_CHANNEL
(
A¬´logWDGC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
));

2122 
	`__HAL_LOCK
(
hadc
);

2127 if(
A¬´logWDGC‚ÅÑfig
->
ITMode
 =Ô£ø
ENABLE
)

2130 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_AWD
);

2135 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_AWD
);

2143 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
 ,

2144 
ADC_CR1_AWDSGL
 |

2145 
ADC_CR1_JAWDEN
 |

2146 
ADC_CR1_AWDEN
 |

2147 
ADC_CR1_AWDCH
 ,

2148 
A¬´logWDGC‚ÅÑfig
->
W¬©chdogMode
 |

2149 
A¬´logWDGC‚ÅÑfig
->
Ch‚Ñ¢‚àöl
 );

2152 
	`WRITE_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
HTR
, 
A¬´logWDGC‚ÅÑfig
->
HighTh¬™shÔ¨Åd
);

2155 
	`WRITE_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
LTR
, 
A¬´logWDGC‚ÅÑfig
->
LowTh¬™shÔ¨Åd
);

2158 
	`__HAL_UNLOCK
(
hadc
);

2161  
HAL_OK
;

2162 
	}
}

2192 
u√∂t32_t
 
	$HAL_ADC_G√´S√®√£
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

2195  
hadc
->
S√®√£
;

2196 
	}
}

2203 
u√∂t32_t
 
	$HAL_ADC_G√´E¬∫‚Äπ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
 *
hadc
)

2205  
hadc
->
E¬∫‚ÄπCode
;

2206 
	}
}

2227 
HAL_S√®tusTy‚â•Def
 
	$ADC_E¬´b√Ä
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

2229 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

2230 
__IO
 
u√∂t32_t
 
wa√¥_lo‚Ä∫_√∂dex
 = 0U;

2236 i‚Ä°(
	`ADC_IS_ENABLE
(
hadc
√ã=Ô£ø
RESET
)

2239 
	`__HAL_ADC_ENABLE
(
hadc
);

2243 
wa√¥_lo‚Ä∫_√∂dex
 = (
ADC_STAB_DELAY_US
 * (
Sy¬∞emC‚ÄπeClock
 / 1000000U));

2244 
wa√¥_lo‚Ä∫_√∂dex
 != 0U)

2246 
wa√¥_lo‚Ä∫_√∂dex
--;

2250 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2253 
	`ADC_IS_ENABLE
(
hadc
√ã=Ô£ø
RESET
)

2255 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ADC_ENABLE_TIMEOUT
)

2258 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

2261 
	`SET_BIT
(
hadc
->
E¬∫‚ÄπCode
, 
HAL_ADC_ERROR_INTERNAL
);

2264 
	`__HAL_UNLOCK
(
hadc
);

2266  
HAL_ERROR
;

2272  
HAL_OK
;

2273 
	}
}

2282 
HAL_S√®tusTy‚â•Def
 
	$ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

2284 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

2287 i‚Ä°(
	`ADC_IS_ENABLE
(
hadc
√ã!Ô£ø
RESET
)

2290 
	`__HAL_ADC_DISABLE
(
hadc
);

2293 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2296 
	`ADC_IS_ENABLE
(
hadc
√ã!Ô£ø
RESET
)

2298 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ADC_DISABLE_TIMEOUT
)

2301 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

2304 
	`SET_BIT
(
hadc
->
E¬∫‚ÄπCode
, 
HAL_ADC_ERROR_INTERNAL
);

2306  
HAL_ERROR
;

2312  
HAL_OK
;

2313 
	}
}

2320 
	$ADC_DMAC‚ÅÑvC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2323 
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
 = ( ADC_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2326 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
 | 
HAL_ADC_STATE_ERROR_DMA
))

2329 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_EOC
);

2336 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

2337 (
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
DISABLE
) )

2340 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
);

2342 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
))

2344 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_READY
);

2349 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

2350 
hadc
->
	`C‚ÅÑvC‚àÇtC√Ülback
(hadc);

2352 
	`HAL_ADC_C‚ÅÑvC‚àÇtC√Ülback
(
hadc
);

2358 
hadc
->
DMA_H‚Ñ¢d√Ä
->
	`X‚ÄûrE¬∫‚ÄπC√Ülback
(
hdma
);

2360 
	}
}

2367 
	$ADC_DMAH√ÜfC‚ÅÑvC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2370 
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
 = ( ADC_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2373 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

2374 
hadc
->
	`C‚ÅÑvH√ÜfC‚àÇtC√Ülback
(hadc);

2376 
	`HAL_ADC_C‚ÅÑvH√ÜfC‚àÇtC√Ülback
(
hadc
);

2378 
	}
}

2385 
	$ADC_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2388 
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
 = ( ADC_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2391 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_DMA
);

2394 
	`SET_BIT
(
hadc
->
E¬∫‚ÄπCode
, 
HAL_ADC_ERROR_DMA
);

2397 #i‚Ä°(
USE_HAL_ADC_REGISTER_CALLBACKS
 == 1)

2398 
hadc
->
	`E¬∫‚ÄπC√Ülback
(hadc);

2400 
	`HAL_ADC_E¬∫‚ÄπC√Ülback
(
hadc
);

2402 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_adc_ex.c

39 
	~"¬∞m32f1xx_h√Ü.h
"

50 #ifde‚Ä°
HAL_ADC_MODULE_ENABLED


62 
	#ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES
 2U

	)

70 
	#ADC_CALIBRATION_TIMEOUT
 10U

	)

75 
	#ADC_TEMPSENSOR_DELAY_US
 10U

	)

126 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_C√Üib√∏ti‚ÅÑ_S√®œÄ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

128 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

129 
u√∂t32_t
 
tick¬∞¬®t
;

130 
__IO
 
u√∂t32_t
 
wa√¥_lo‚Ä∫_√∂dex
 = 0U;

133 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

136 
	`__HAL_LOCK
(
hadc
);

143 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

146 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

149 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

150 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

151 
HAL_ADC_STATE_BUSY_INTERNAL
);

156 
wa√¥_lo‚Ä∫_√∂dex
 = ((
Sy¬∞emC‚ÄπeClock


157 / 
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_ADC
))

158 * 
ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES
 );

160 
wa√¥_lo‚Ä∫_√∂dex
 != 0U)

162 
wa√¥_lo‚Ä∫_√∂dex
--;

166 
	`ADC_E¬´b√Ä
(
hadc
);

169 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_RSTCAL
);

171 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

174 
	`HAL_IS_BIT_SET
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_RSTCAL
))

176 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ADC_CALIBRATION_TIMEOUT
)

179 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

180 
HAL_ADC_STATE_BUSY_INTERNAL
,

181 
HAL_ADC_STATE_ERROR_INTERNAL
);

184 
	`__HAL_UNLOCK
(
hadc
);

186  
HAL_ERROR
;

192 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_CAL
);

194 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

197 
	`HAL_IS_BIT_SET
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_CAL
))

199 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ADC_CALIBRATION_TIMEOUT
)

202 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

203 
HAL_ADC_STATE_BUSY_INTERNAL
,

204 
HAL_ADC_STATE_ERROR_INTERNAL
);

207 
	`__HAL_UNLOCK
(
hadc
);

209  
HAL_ERROR
;

214 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

215 
HAL_ADC_STATE_BUSY_INTERNAL
,

216 
HAL_ADC_STATE_READY
);

220 
	`__HAL_UNLOCK
(
hadc
);

223  
tmp_h√Ü_¬∞¬©us
;

224 
	}
}

232 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_InjeÀòedS√®œÄ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

234 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

237 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

240 
	`__HAL_LOCK
(
hadc
);

243 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(
hadc
);

246 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

251 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

252 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_INJ_EOC
,

253 
HAL_ADC_STATE_INJ_BUSY
);

257 i‚Ä°(
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
))

259 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

263 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

270 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
))

273 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

279 
	`__HAL_UNLOCK
(
hadc
);

283 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_JEOC
);

294 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
))

296 i‚Ä°(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) &&

297 
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
) )

300 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_JSWSTART
 | 
ADC_CR2_JEXTTRIG
));

305 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_JEXTTRIG
);

312 
	`__HAL_UNLOCK
(
hadc
);

316  
tmp_h√Ü_¬∞¬©us
;

317 
	}
}

331 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_InjeÀòedSt‚Ä∫
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

333 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

336 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

339 
	`__HAL_LOCK
(
hadc
);

347 if(((
hadc
->
S√®√£
 & 
HAL_ADC_STATE_REG_BUSY
√ã=Ô£ø
RESET
) &&

348 
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
) )

352 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

355 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

358 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

359 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

360 
HAL_ADC_STATE_READY
);

366 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

368 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

372 
	`__HAL_UNLOCK
(
hadc
);

375  
tmp_h√Ü_¬∞¬©us
;

376 
	}
}

384 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_InjeÀòedPÔ¨ÅlF‚ÄπC‚ÅÑv√Æsi‚ÅÑ
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
Timeout
)

386 
u√∂t32_t
 
tick¬∞¬®t
;

390 
__IO
 
u√∂t32_t
 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões
 = 0U;

391 
u√∂t32_t
 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões_max
 = 0U;

394 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

397 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

415 i‚Ä°((
hadc
->
In¬∞‚Ñ¢Àö
->
JSQR
 & 
ADC_JSQR_JL
√ã=Ô£ø
RESET
)

418 
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
SR
, 
ADC_FLAG_JEOC
))

421 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

423 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
 ) > Timeout))

426 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_TIMEOUT
);

429 
	`__HAL_UNLOCK
(
hadc
);

431  
HAL_TIMEOUT
;

442 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões_max
 = ((
Sy¬∞emC‚ÄπeClock


443 / 
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_ADC
))

444 * 
	`ADC_CONVCYCLES_MAX_RANGE
(
hadc
) );

446 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões
 < 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões_max
)

449 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

451 if((
Timeout
 =Ô£ø0)||((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
 ) > Timeout))

454 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_TIMEOUT
);

457 
	`__HAL_UNLOCK
(
hadc
);

459  
HAL_TIMEOUT
;

462 
C‚ÅÑv√Æsi‚ÅÑ_Timeout_CPU_cyÀões
 ++;

469 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_JSTRT
 | 
ADC_FLAG_JEOC
 | 
ADC_FLAG_EOC
);

472 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
);

477 if(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) ||

478 (
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
) &&

479 (
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

480 (
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
DISABLE
) ) ) )

483 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_BUSY
);

485 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
))

487 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_READY
);

492  
HAL_OK
;

493 
	}
}

502 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_InjeÀòedS√®œÄ_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

504 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

507 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

510 
	`__HAL_LOCK
(
hadc
);

513 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(
hadc
);

516 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

521 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

522 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_INJ_EOC
,

523 
HAL_ADC_STATE_INJ_BUSY
);

527 i‚Ä°(
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
))

529 
	`CLEAR_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

533 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_MULTIMODE_SLAVE
);

540 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_REG_BUSY
))

543 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

549 
	`__HAL_UNLOCK
(
hadc
);

553 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_JEOC
);

556 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

564 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
))

566 i‚Ä°(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) &&

567 
	`ADC_NONMULTIMODE_OR_MULTIMODEMASTER
(
hadc
) )

570 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_JSWSTART
 | 
ADC_CR2_JEXTTRIG
));

575 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_JEXTTRIG
);

582 
	`__HAL_UNLOCK
(
hadc
);

586  
tmp_h√Ü_¬∞¬©us
;

587 
	}
}

601 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_InjeÀòedSt‚Ä∫_IT
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

603 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

606 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

609 
	`__HAL_LOCK
(
hadc
);

617 if(((
hadc
->
S√®√£
 & 
HAL_ADC_STATE_REG_BUSY
√ã=Ô£ø
RESET
) &&

618 
	`HAL_IS_BIT_CLR
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
) )

622 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

625 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

628 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

631 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

632 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

633 
HAL_ADC_STATE_READY
);

639 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

641 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

645 
	`__HAL_UNLOCK
(
hadc
);

648  
tmp_h√Ü_¬∞¬©us
;

649 
	}
}

651 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

670 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_Mu‚Ä¶iModeS√®œÄ_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
* 
pD¬©a
, u√∂t32_√†
L√≠gth
)

672 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

673 
ADC_H‚Ñ¢d√ÄTy‚â•Def
 
tmphadcS≈ìve
;

676 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_MULTIMODE_MASTER_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

677 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
In√¥
.
C‚ÅÑt√∂uousC‚ÅÑvMode
));

680 
	`__HAL_LOCK
(
hadc
);

683 
	`ADC_MULTI_SLAVE
(
hadc
, &
tmphadcS≈ìve
);

689 if(!
	`ADC_IS_SOFTWARE_START_REGULAR
(&
tmphadcS≈ìve
))

692 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

695 
	`__HAL_UNLOCK
(
hadc
);

697  
HAL_ERROR
;

702 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(
hadc
);

703 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

705 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_E¬´b√Ä
(&
tmphadcS≈ìve
);

709 i‚Ä°(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

714 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

715 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_MULTIMODE_SLAVE
,

716 
HAL_ADC_STATE_REG_BUSY
);

720 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
√ã!Ô£ø
RESET
)

722 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

728 
	`__HAL_UNLOCK
(
hadc
);

731 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

735 
hadc
->
DMA_H‚Ñ¢d√Ä
->
X‚ÄûrC‚àÇtC√Ülback
 = 
ADC_DMAC‚ÅÑvC‚àÇt
;

738 
hadc
->
DMA_H‚Ñ¢d√Ä
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
ADC_DMAH√ÜfC‚ÅÑvC‚àÇt
;

741 
hadc
->
DMA_H‚Ñ¢d√Ä
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
ADC_DMAE¬∫‚Äπ
;

749 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
);

752 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_DMA
);

755 
	`HAL_DMA_S√®œÄ_IT
(
hadc
->
DMA_H‚Ñ¢d√Ä
, (
u√∂t32_t
)&hadc->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
);

762 i‚Ä°(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
))

765 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
ADC_CR2_SWSTART
 | 
ADC_CR2_EXTTRIG
));

770 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_EXTTRIG
);

776 
	`__HAL_UNLOCK
(
hadc
);

780  
tmp_h√Ü_¬∞¬©us
;

781 
	}
}

796 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_Mu‚Ä¶iModeSt‚Ä∫_DMA
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

798 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

799 
ADC_H‚Ñ¢d√ÄTy‚â•Def
 
tmphadcS≈ìve
;

802 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_MULTIMODE_MASTER_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

805 
	`__HAL_LOCK
(
hadc
);

810 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(
hadc
);

813 if(
tmp_h√Ü_¬∞¬©us
 =Ô£ø
HAL_OK
)

816 
	`ADC_MULTI_SLAVE
(
hadc
, &
tmphadcS≈ìve
);

819 
tmp_h√Ü_¬∞¬©us
 = 
	`ADC_C‚ÅÑv√Æsi‚ÅÑSt‚Ä∫_Di√üb√Ä
(&
tmphadcS≈ìve
);

822 if(
tmp_h√Ü_¬∞¬©us
 !Ô£ø
HAL_OK
)

825 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

828 
	`__HAL_UNLOCK
(
hadc
);

830  
HAL_ERROR
;

834 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_DMA
);

837 
	`CLEAR_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_DUALMOD
);

841 
tmp_h√Ü_¬∞¬©us
 = 
	`HAL_DMA_Ab‚Äπt
(
hadc
->
DMA_H‚Ñ¢d√Ä
);

844 
	`ADC_STATE_CLR_SET
(
hadc
->
S√®√£
,

845 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

846 
HAL_ADC_STATE_READY
);

850 
	`__HAL_UNLOCK
(
hadc
);

853  
tmp_h√Ü_¬∞¬©us
;

854 
	}
}

885 
u√∂t32_t
 
	$HAL_ADCEx_InjeÀòedG√´V√Üue
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
u√∂t32_t
 
InjeÀòedR‚Ñ¢k
)

887 
u√∂t32_t
 
tmp_jdr
 = 0U;

890 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

891 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_INJECTED_RANK
(
InjeÀòedR‚Ñ¢k
));

894 
InjeÀòedR‚Ñ¢k
)

896 
ADC_INJECTED_RANK_4
:

897 
tmp_jdr
 = 
hadc
->
In¬∞‚Ñ¢Àö
->
JDR4
;

899 
ADC_INJECTED_RANK_3
:

900 
tmp_jdr
 = 
hadc
->
In¬∞‚Ñ¢Àö
->
JDR3
;

902 
ADC_INJECTED_RANK_2
:

903 
tmp_jdr
 = 
hadc
->
In¬∞‚Ñ¢Àö
->
JDR2
;

905 
ADC_INJECTED_RANK_1
:

907 
tmp_jdr
 = 
hadc
->
In¬∞‚Ñ¢Àö
->
JDR1
;

912  
tmp_jdr
;

913 
	}
}

915 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

922 
u√∂t32_t
 
	$HAL_ADCEx_Mu‚Ä¶iModeG√´V√Üue
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

924 
u√∂t32_t
 
tmpDR
 = 0U;

927 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_MULTIMODE_MASTER_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

930 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

937 
tmpDR
 = 
hadc
->
In¬∞‚Ñ¢Àö
->
DR
;

939 i‚Ä°(
	`HAL_IS_BIT_CLR
(
ADC1
->
CR2
, 
ADC_CR2_DMA
))

941 
tmpDR
 |Ô£ø(
ADC2
->
DR
 << 16U);

945  
tmpDR
;

946 
	}
}

954 
__w√≥k
 
	$HAL_ADCEx_InjeÀòedC‚ÅÑvC‚àÇtC√Ülback
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
)

957 
	`UNUSED
(
hadc
);

961 
	}
}

996 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_InjeÀòedC‚ÅÑfigCh‚Ñ¢‚àöl
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
ADC_InjeÀòi‚ÅÑC‚ÅÑfTy‚â•Def
* 
sC‚ÅÑfigInjeÀòed
)

998 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

999 
__IO
 
u√∂t32_t
 
wa√¥_lo‚Ä∫_√∂dex
 = 0U;

1002 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1003 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_CHANNEL
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
));

1004 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_SAMPLE_TIME
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedSam‚àÇ√∂gTime
));

1005 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
sC‚ÅÑfigInjeÀòed
->
AutoInjeÀòedC‚ÅÑv
));

1006 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_EXTTRIGINJEC
(
sC‚ÅÑfigInjeÀòed
->
Ex√£‚à´√ÜTrigInjecC‚ÅÑv
));

1007 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_RANGE
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedOff¬£t
));

1009 if(
hadc
->
In√¥
.
SÀánC‚ÅÑvMode
 !Ô£ø
ADC_SCAN_DISABLE
)

1011 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_INJECTED_RANK
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
));

1012 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_INJECTED_NB_CONV
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
));

1013 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedDisc‚ÅÑt√∂uousC‚ÅÑvMode
));

1017 
	`__HAL_LOCK
(
hadc
);

1028 i‚Ä°(
hadc
->
In√¥
.
SÀánC‚ÅÑvMode
 =Ô£ø
ADC_SCAN_DISABLE
)

1030 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
 =Ô£ø
ADC_INJECTED_RANK_1
)

1033 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JSQR
 ,

1034 
ADC_JSQR_JL
 |

1035 
ADC_JSQR_JSQ4
 |

1036 
ADC_JSQR_JSQ3
 |

1037 
ADC_JSQR_JSQ2
 |

1038 
ADC_JSQR_JSQ1
 ,

1039 
	`ADC_JSQR_RK_JL
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
,

1040 
ADC_INJECTED_RANK_1
,

1048 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1050 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

1058 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
 <Ô£øsC‚ÅÑfigInjeÀòed->
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
)

1062 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JSQR
 ,

1064 
ADC_JSQR_JL
 |

1065 
	`ADC_JSQR_RK_JL
(
ADC_JSQR_JSQ1
,

1066 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
,

1067 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
) ,

1069 
	`ADC_JSQR_JL_SHIFT
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
) |

1070 
	`ADC_JSQR_RK_JL
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
,

1071 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
,

1072 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
) );

1077 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JSQR
 ,

1079 
ADC_JSQR_JL
 |

1080 
	`ADC_JSQR_RK_JL
(
ADC_JSQR_JSQ1
,

1081 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
,

1082 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedNbrOfC‚ÅÑv√Æsi‚ÅÑ
) ,

1097 i‚Ä°(
	`ADC_IS_ENABLE
(
hadc
√ã=Ô£ø
RESET
)

1099 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
 ,

1100 
ADC_CR2_JEXTSEL
 |

1101 
ADC_CR2_ADON
 ,

1102 
	`ADC_CFGR_JEXTSEL
(
hadc
, 
sC‚ÅÑfigInjeÀòed
->
Ex√£‚à´√ÜTrigInjecC‚ÅÑv
) );

1112 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
AutoInjeÀòedC‚ÅÑv
 =Ô£ø
ENABLE
)

1114 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
Ex√£‚à´√ÜTrigInjecC‚ÅÑv
 =Ô£ø
ADC_INJECTED_SOFTWARE_START
)

1116 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JAUTO
);

1121 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1123 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

1129 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedDisc‚ÅÑt√∂uousC‚ÅÑvMode
 =Ô£ø
ENABLE
)

1131 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
AutoInjeÀòedC‚ÅÑv
 =Ô£ø
DISABLE
)

1133 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
ADC_CR1_JDISCEN
);

1138 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1140 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

1147 i‚Ä°(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
 >Ô£ø
ADC_CHANNEL_10
)

1149 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SMPR1
 ,

1150 
	`ADC_SMPR1
(
ADC_SMPR1_SMP10
, 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
) ,

1151 
	`ADC_SMPR1
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedSam‚àÇ√∂gTime
, sC‚ÅÑfigInjeÀòed->
InjeÀòedCh‚Ñ¢‚àöl
) );

1155 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
SMPR2
 ,

1156 
	`ADC_SMPR2
(
ADC_SMPR2_SMP0
, 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
) ,

1157 
	`ADC_SMPR2
(
sC‚ÅÑfigInjeÀòed
->
InjeÀòedSam‚àÇ√∂gTime
, sC‚ÅÑfigInjeÀòed->
InjeÀòedCh‚Ñ¢‚àöl
) );

1162 i‚Ä°((
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_TEMPSENSOR
) ||

1163 (
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_VREFINT
) )

1165 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_TSVREFE
);

1170 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedR‚Ñ¢k
)

1174 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR1
,

1175 
ADC_JOFR1_JOFFSET1
,

1176 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedOff¬£t
);

1180 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR2
,

1181 
ADC_JOFR2_JOFFSET2
,

1182 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedOff¬£t
);

1186 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR3
,

1187 
ADC_JOFR3_JOFFSET3
,

1188 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedOff¬£t
);

1192 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
JOFR4
,

1193 
ADC_JOFR4_JOFFSET4
,

1194 
sC‚ÅÑfigInjeÀòed
->
InjeÀòedOff¬£t
);

1200 i‚Ä°((
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_TEMPSENSOR
) ||

1201 (
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_VREFINT
) )

1206 i‚Ä°(
hadc
->
In¬∞‚Ñ¢Àö
 =Ô£ø
ADC1
)

1208 i‚Ä°(
	`READ_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_TSVREFE
√ã=Ô£ø
RESET
)

1210 
	`SET_BIT
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
ADC_CR2_TSVREFE
);

1212 i‚Ä°((
sC‚ÅÑfigInjeÀòed
->
InjeÀòedCh‚Ñ¢‚àöl
 =Ô£ø
ADC_CHANNEL_TEMPSENSOR
))

1216 
wa√¥_lo‚Ä∫_√∂dex
 = (
ADC_TEMPSENSOR_DELAY_US
 * (
Sy¬∞emC‚ÄπeClock
 / 1000000U));

1217 
wa√¥_lo‚Ä∫_√∂dex
 != 0U)

1219 
wa√¥_lo‚Ä∫_√∂dex
--;

1227 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1229 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

1234 
	`__HAL_UNLOCK
(
hadc
);

1237  
tmp_h√Ü_¬∞¬©us
;

1238 
	}
}

1240 #i‚Ä°
def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

1257 
HAL_S√®tusTy‚â•Def
 
	$HAL_ADCEx_Mu‚Ä¶iModeC‚ÅÑfigCh‚Ñ¢‚àöl
(
ADC_H‚Ñ¢d√ÄTy‚â•Def
* 
hadc
, 
ADC_Mu‚Ä¶iModeTy‚â•Def
* 
mu‚Ä¶imode
)

1259 
HAL_S√®tusTy‚â•Def
 
tmp_h√Ü_¬∞¬©us
 = 
HAL_OK
;

1260 
ADC_H‚Ñ¢d√ÄTy‚â•Def
 
tmphadcS≈ìve
;

1263 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_MULTIMODE_MASTER_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
));

1264 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_MODE
(
mu‚Ä¶imode
->
Mode
));

1267 
	`__HAL_LOCK
(
hadc
);

1270 
	`ADC_MULTI_SLAVE
(
hadc
, &
tmphadcS≈ìve
);

1280 i‚Ä°((
	`ADC_IS_ENABLE
(
hadc
√ã=Ô£ø
RESET
) &&

1281 (
	`ADC_IS_ENABLE
(&
tmphadcS≈ìve
√ã=Ô£ø
RESET
) &&

1282 (
	`IS_ADC_MULTIMODE_MASTER_INSTANCE
(
hadc
->
In¬∞‚Ñ¢Àö
)) )

1284 
	`MODIFY_REG
(
hadc
->
In¬∞‚Ñ¢Àö
->
CR1
,

1285 
ADC_CR1_DUALMOD
 ,

1286 
mu‚Ä¶imode
->
Mode
 );

1293 
	`SET_BIT
(
hadc
->
S√®√£
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1295 
tmp_h√Ü_¬∞¬©us
 = 
HAL_ERROR
;

1300 
	`__HAL_UNLOCK
(
hadc
);

1303  
tmp_h√Ü_¬∞¬©us
;

1304 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_can.c

213 
	~"¬∞m32f1xx_h√Ü.h
"

219 #i‚Ä°
def√∂ed
(
CAN1
)

226 #ifde‚Ä°
HAL_CAN_MODULE_ENABLED


228 #ifde‚Ä°
HAL_CAN_LEGACY_MODULE_ENABLED


237 
	#CAN_TIMEOUT_VALUE
 10U

	)

274 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

276 
u√∂t32_t
 
tick¬∞¬®t
;

279 i‚Ä°(
hÀán
 =Ô£ø
NULL
)

281  
HAL_ERROR
;

285 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_ALL_INSTANCE
(
hÀán
->
In¬∞‚Ñ¢Àö
));

286 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
TimeTrigg√ÆedMode
));

287 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
AutoBusOff
));

288 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
AutoWakeUp
));

289 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
AutoR√´√∏nsmissi‚ÅÑ
));

290 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
ReÀöiveFifoLocked
));

291 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
hÀán
->
In√¥
.
T√∏nsm√¥FifoPri‚Äπ√¥y
));

292 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_MODE
(
hÀán
->
In√¥
.
Mode
));

293 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_SJW
(
hÀán
->
In√¥
.
SyncJumpWidth
));

294 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_BS1
(
hÀán
->
In√¥
.
TimeSeg1
));

295 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_BS2
(
hÀán
->
In√¥
.
TimeSeg2
));

296 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_PRESCALER
(
hÀán
->
In√¥
.
P¬™sÀá√Är
));

298 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

299 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_RESET
)

302 
hÀán
->
RxFifo0MsgP√≠d√∂gC√Ülback
 = 
HAL_CAN_RxFifo0MsgP√≠d√∂gC√Ülback
;

303 
hÀán
->
RxFifo0Fu≈íC√Ülback
 = 
HAL_CAN_RxFifo0Fu≈íC√Ülback
;

304 
hÀán
->
RxFifo1MsgP√≠d√∂gC√Ülback
 = 
HAL_CAN_RxFifo1MsgP√≠d√∂gC√Ülback
;

305 
hÀán
->
RxFifo1Fu≈íC√Ülback
 = 
HAL_CAN_RxFifo1Fu≈íC√Ülback
;

306 
hÀán
->
TxMa√ªbox0Com‚àÇ√´eC√Ülback
 = 
HAL_CAN_TxMa√ªbox0Com‚àÇ√´eC√Ülback
;

307 
hÀán
->
TxMa√ªbox1Com‚àÇ√´eC√Ülback
 = 
HAL_CAN_TxMa√ªbox1Com‚àÇ√´eC√Ülback
;

308 
hÀán
->
TxMa√ªbox2Com‚àÇ√´eC√Ülback
 = 
HAL_CAN_TxMa√ªbox2Com‚àÇ√´eC√Ülback
;

309 
hÀán
->
TxMa√ªbox0Ab‚ÄπtC√Ülback
 = 
HAL_CAN_TxMa√ªbox0Ab‚ÄπtC√Ülback
;

310 
hÀán
->
TxMa√ªbox1Ab‚ÄπtC√Ülback
 = 
HAL_CAN_TxMa√ªbox1Ab‚ÄπtC√Ülback
;

311 
hÀán
->
TxMa√ªbox2Ab‚ÄπtC√Ülback
 = 
HAL_CAN_TxMa√ªbox2Ab‚ÄπtC√Ülback
;

312 
hÀán
->
S√Ä√ØC√Ülback
 = 
HAL_CAN_S√Ä√ØC√Ülback
;

313 
hÀán
->
WakeUpFromRxMsgC√Ülback
 = 
HAL_CAN_WakeUpFromRxMsgC√Ülback
;

314 
hÀán
->
E¬∫‚ÄπC√Ülback
 = 
HAL_CAN_E¬∫‚ÄπC√Ülback
;

316 i‚Ä°(
hÀán
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

318 
hÀán
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_CAN_M‚Ä¢In√¥
;

322 
hÀán
->
	`M‚Ä¢In√¥C√Ülback
(hcan);

326 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_RESET
)

329 
	`HAL_CAN_M‚Ä¢In√¥
(
hÀán
);

334 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_SLEEP
);

337 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

340 (
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_SLAK
) != 0U)

342 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

345 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_TIMEOUT
;

348 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

350  
HAL_ERROR
;

355 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_INRQ
);

358 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

361 (
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_INAK
) == 0U)

363 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

366 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_TIMEOUT
;

369 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

371  
HAL_ERROR
;

376 i‚Ä°(
hÀán
->
In√¥
.
TimeTrigg√ÆedMode
 =Ô£ø
ENABLE
)

378 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_TTCM
);

382 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_TTCM
);

386 i‚Ä°(
hÀán
->
In√¥
.
AutoBusOff
 =Ô£ø
ENABLE
)

388 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_ABOM
);

392 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_ABOM
);

396 i‚Ä°(
hÀán
->
In√¥
.
AutoWakeUp
 =Ô£ø
ENABLE
)

398 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_AWUM
);

402 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_AWUM
);

406 i‚Ä°(
hÀán
->
In√¥
.
AutoR√´√∏nsmissi‚ÅÑ
 =Ô£ø
ENABLE
)

408 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_NART
);

412 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_NART
);

416 i‚Ä°(
hÀán
->
In√¥
.
ReÀöiveFifoLocked
 =Ô£ø
ENABLE
)

418 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_RFLM
);

422 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_RFLM
);

426 i‚Ä°(
hÀán
->
In√¥
.
T√∏nsm√¥FifoPri‚Äπ√¥y
 =Ô£ø
ENABLE
)

428 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_TXFP
);

432 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_TXFP
);

436 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
BTR
, (
u√∂t32_t
)(hÀán->
In√¥
.
Mode
 |

437 
hÀán
->
In√¥
.
SyncJumpWidth
 |

438 
hÀán
->
In√¥
.
TimeSeg1
 |

439 
hÀán
->
In√¥
.
TimeSeg2
 |

440 (
hÀán
->
In√¥
.
P¬™sÀá√Är
 - 1U)));

443 
hÀán
->
E¬∫‚ÄπCode
 = 
HAL_CAN_ERROR_NONE
;

446 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

449  
HAL_OK
;

450 
	}
}

459 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

462 i‚Ä°(
hÀán
 =Ô£ø
NULL
)

464  
HAL_ERROR
;

468 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_ALL_INSTANCE
(
hÀán
->
In¬∞‚Ñ¢Àö
));

471 ()
	`HAL_CAN_St‚Ä∫
(
hÀán
);

473 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

474 i‚Ä°(
hÀán
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

476 
hÀán
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_CAN_M‚Ä¢DeIn√¥
;

480 
hÀán
->
	`M‚Ä¢DeIn√¥C√Ülback
(hcan);

484 
	`HAL_CAN_M‚Ä¢DeIn√¥
(
hÀán
);

488 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_RESET
);

491 
hÀán
->
E¬∫‚ÄπCode
 = 
HAL_CAN_ERROR_NONE
;

494 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_RESET
;

497  
HAL_OK
;

498 
	}
}

506 
__w√≥k
 
	$HAL_CAN_M‚Ä¢In√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

509 
	`UNUSED
(
hÀán
);

514 
	}
}

522 
__w√≥k
 
	$HAL_CAN_M‚Ä¢DeIn√¥
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

525 
	`UNUSED
(
hÀán
);

530 
	}
}

532 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

558 
HAL_S√®tusTy‚â•Def
 
HAL_CAN_Regi¬∞√ÆC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
HAL_CAN_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, (* 
pC√Ülback
)(CAN_H‚Ñ¢d√ÄTy‚â•De‚Ä°*
_hÀán
))

560 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

562 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

565 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

567  
HAL_ERROR
;

570 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_READY
)

572 
C√ÜlbackID
)

574 
HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID
 :

575 
hÀán
->
TxMa√ªbox0Com‚àÇ√´eC√Ülback
 = 
pC√Ülback
;

578 
HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID
 :

579 
hÀán
->
TxMa√ªbox1Com‚àÇ√´eC√Ülback
 = 
pC√Ülback
;

582 
HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID
 :

583 
hÀán
->
TxMa√ªbox2Com‚àÇ√´eC√Ülback
 = 
pC√Ülback
;

586 
HAL_CAN_TX_MAILBOX0_ABORT_CB_ID
 :

587 
hÀán
->
TxMa√ªbox0Ab‚ÄπtC√Ülback
 = 
pC√Ülback
;

590 
HAL_CAN_TX_MAILBOX1_ABORT_CB_ID
 :

591 
hÀán
->
TxMa√ªbox1Ab‚ÄπtC√Ülback
 = 
pC√Ülback
;

594 
HAL_CAN_TX_MAILBOX2_ABORT_CB_ID
 :

595 
hÀán
->
TxMa√ªbox2Ab‚ÄπtC√Ülback
 = 
pC√Ülback
;

598 
HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID
 :

599 
hÀán
->
RxFifo0MsgP√≠d√∂gC√Ülback
 = 
pC√Ülback
;

602 
HAL_CAN_RX_FIFO0_FULL_CB_ID
 :

603 
hÀán
->
RxFifo0Fu≈íC√Ülback
 = 
pC√Ülback
;

606 
HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID
 :

607 
hÀán
->
RxFifo1MsgP√≠d√∂gC√Ülback
 = 
pC√Ülback
;

610 
HAL_CAN_RX_FIFO1_FULL_CB_ID
 :

611 
hÀán
->
RxFifo1Fu≈íC√Ülback
 = 
pC√Ülback
;

614 
HAL_CAN_SLEEP_CB_ID
 :

615 
hÀán
->
S√Ä√ØC√Ülback
 = 
pC√Ülback
;

618 
HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID
 :

619 
hÀán
->
WakeUpFromRxMsgC√Ülback
 = 
pC√Ülback
;

622 
HAL_CAN_ERROR_CB_ID
 :

623 
hÀán
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

626 
HAL_CAN_MSPINIT_CB_ID
 :

627 
hÀán
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

630 
HAL_CAN_MSPDEINIT_CB_ID
 :

631 
hÀán
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

636 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

639 
¬∞¬©us
 = 
HAL_ERROR
;

643 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_RESET
)

645 
C√ÜlbackID
)

647 
HAL_CAN_MSPINIT_CB_ID
 :

648 
hÀán
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

651 
HAL_CAN_MSPDEINIT_CB_ID
 :

652 
hÀán
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

657 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

660 
¬∞¬©us
 = 
HAL_ERROR
;

667 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

670 
¬∞¬©us
 = 
HAL_ERROR
;

673  
¬∞¬©us
;

674 
	}
}

700 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_UnRegi¬∞√ÆC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
HAL_CAN_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

702 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

704 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_READY
)

706 
C√ÜlbackID
)

708 
HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID
 :

709 
hÀán
->
TxMa√ªbox0Com‚àÇ√´eC√Ülback
 = 
HAL_CAN_TxMa√ªbox0Com‚àÇ√´eC√Ülback
;

712 
HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID
 :

713 
hÀán
->
TxMa√ªbox1Com‚àÇ√´eC√Ülback
 = 
HAL_CAN_TxMa√ªbox1Com‚àÇ√´eC√Ülback
;

716 
HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID
 :

717 
hÀán
->
TxMa√ªbox2Com‚àÇ√´eC√Ülback
 = 
HAL_CAN_TxMa√ªbox2Com‚àÇ√´eC√Ülback
;

720 
HAL_CAN_TX_MAILBOX0_ABORT_CB_ID
 :

721 
hÀán
->
TxMa√ªbox0Ab‚ÄπtC√Ülback
 = 
HAL_CAN_TxMa√ªbox0Ab‚ÄπtC√Ülback
;

724 
HAL_CAN_TX_MAILBOX1_ABORT_CB_ID
 :

725 
hÀán
->
TxMa√ªbox1Ab‚ÄπtC√Ülback
 = 
HAL_CAN_TxMa√ªbox1Ab‚ÄπtC√Ülback
;

728 
HAL_CAN_TX_MAILBOX2_ABORT_CB_ID
 :

729 
hÀán
->
TxMa√ªbox2Ab‚ÄπtC√Ülback
 = 
HAL_CAN_TxMa√ªbox2Ab‚ÄπtC√Ülback
;

732 
HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID
 :

733 
hÀán
->
RxFifo0MsgP√≠d√∂gC√Ülback
 = 
HAL_CAN_RxFifo0MsgP√≠d√∂gC√Ülback
;

736 
HAL_CAN_RX_FIFO0_FULL_CB_ID
 :

737 
hÀán
->
RxFifo0Fu≈íC√Ülback
 = 
HAL_CAN_RxFifo0Fu≈íC√Ülback
;

740 
HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID
 :

741 
hÀán
->
RxFifo1MsgP√≠d√∂gC√Ülback
 = 
HAL_CAN_RxFifo1MsgP√≠d√∂gC√Ülback
;

744 
HAL_CAN_RX_FIFO1_FULL_CB_ID
 :

745 
hÀán
->
RxFifo1Fu≈íC√Ülback
 = 
HAL_CAN_RxFifo1Fu≈íC√Ülback
;

748 
HAL_CAN_SLEEP_CB_ID
 :

749 
hÀán
->
S√Ä√ØC√Ülback
 = 
HAL_CAN_S√Ä√ØC√Ülback
;

752 
HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID
 :

753 
hÀán
->
WakeUpFromRxMsgC√Ülback
 = 
HAL_CAN_WakeUpFromRxMsgC√Ülback
;

756 
HAL_CAN_ERROR_CB_ID
 :

757 
hÀán
->
E¬∫‚ÄπC√Ülback
 = 
HAL_CAN_E¬∫‚ÄπC√Ülback
;

760 
HAL_CAN_MSPINIT_CB_ID
 :

761 
hÀán
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_CAN_M‚Ä¢In√¥
;

764 
HAL_CAN_MSPDEINIT_CB_ID
 :

765 
hÀán
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_CAN_M‚Ä¢DeIn√¥
;

770 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

773 
¬∞¬©us
 = 
HAL_ERROR
;

777 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_RESET
)

779 
C√ÜlbackID
)

781 
HAL_CAN_MSPINIT_CB_ID
 :

782 
hÀán
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_CAN_M‚Ä¢In√¥
;

785 
HAL_CAN_MSPDEINIT_CB_ID
 :

786 
hÀán
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_CAN_M‚Ä¢DeIn√¥
;

791 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

794 
¬∞¬©us
 = 
HAL_ERROR
;

801 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INVALID_CALLBACK
;

804 
¬∞¬©us
 = 
HAL_ERROR
;

807  
¬∞¬©us
;

808 
	}
}

838 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_C‚ÅÑfigF√ª√£r
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
CAN_F√ª√£rTy‚â•Def
 *
sF√ª√£rC‚ÅÑfig
)

840 
u√∂t32_t
 
f√ª√£‚à´brb√¥pos
;

841 
CAN_Ty‚â•Def
 *
Àán_√π
 = 
hÀán
->
In¬∞‚Ñ¢Àö
;

842 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

844 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

845 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

848 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_ID_HALFWORD
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdHigh
));

849 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_ID_HALFWORD
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdLow
));

850 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_ID_HALFWORD
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdHigh
));

851 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_ID_HALFWORD
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdLow
));

852 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_MODE
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMode
));

853 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_SCALE
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rSÀá√Ä
));

854 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_FIFO
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rFIFOAssignm√≠t
));

855 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_ACTIVATION
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rAÀòiv¬©i‚ÅÑ
));

857 #i‚Ä° 
	`def√∂ed
(
CAN2
)

860 
Àán_√π
 = 
CAN1
;

863 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_BANK_DUAL
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
));

864 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_BANK_DUAL
(
sF√ª√£rC‚ÅÑfig
->
S≈ìveS√®œÄF√ª√£rB‚Ñ¢k
));

869 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_FILTER_BANK_SINGLE
(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
));

873 
	`SET_BIT
(
Àán_√π
->
FMR
, 
CAN_FMR_FINIT
);

875 #i‚Ä° 
	`def√∂ed
(
CAN2
)

877 
	`CLEAR_BIT
(
Àán_√π
->
FMR
, 
CAN_FMR_CAN2SB
);

878 
	`SET_BIT
(
Àán_√π
->
FMR
, 
sF√ª√£rC‚ÅÑfig
->
S≈ìveS√®œÄF√ª√£rB‚Ñ¢k
 << 
CAN_FMR_CAN2SB_Pos
);

882 
f√ª√£‚à´brb√¥pos
 = (
u√∂t32_t
)1 << (
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
 & 0x1FU);

885 
	`CLEAR_BIT
(
Àán_√π
->
FA1R
, 
f√ª√£‚à´brb√¥pos
);

888 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rSÀá√Ä
 =Ô£ø
CAN_FILTERSCALE_16BIT
)

891 
	`CLEAR_BIT
(
Àán_√π
->
FS1R
, 
f√ª√£‚à´brb√¥pos
);

895 
Àán_√π
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
].
FR1
 =

896 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdLow
) << 16U) |

897 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdLow
);

901 
Àán_√π
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
].
FR2
 =

902 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdHigh
) << 16U) |

903 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdHigh
);

906 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rSÀá√Ä
 =Ô£ø
CAN_FILTERSCALE_32BIT
)

909 
	`SET_BIT
(
Àán_√π
->
FS1R
, 
f√ª√£‚à´brb√¥pos
);

912 
Àán_√π
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
].
FR1
 =

913 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdHigh
) << 16U) |

914 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rIdLow
);

917 
Àán_√π
->
sF√ª√£rRegi¬∞√Æ
[
sF√ª√£rC‚ÅÑfig
->
F√ª√£rB‚Ñ¢k
].
FR2
 =

918 ((0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdHigh
) << 16U) |

919 (0x0000FFFFU & (
u√∂t32_t
)
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMaskIdLow
);

923 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rMode
 =Ô£ø
CAN_FILTERMODE_IDMASK
)

926 
	`CLEAR_BIT
(
Àán_√π
->
FM1R
, 
f√ª√£‚à´brb√¥pos
);

931 
	`SET_BIT
(
Àán_√π
->
FM1R
, 
f√ª√£‚à´brb√¥pos
);

935 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rFIFOAssignm√≠t
 =Ô£ø
CAN_FILTER_FIFO0
)

938 
	`CLEAR_BIT
(
Àán_√π
->
FFA1R
, 
f√ª√£‚à´brb√¥pos
);

943 
	`SET_BIT
(
Àán_√π
->
FFA1R
, 
f√ª√£‚à´brb√¥pos
);

947 i‚Ä°(
sF√ª√£rC‚ÅÑfig
->
F√ª√£rAÀòiv¬©i‚ÅÑ
 =Ô£ø
CAN_FILTER_ENABLE
)

949 
	`SET_BIT
(
Àán_√π
->
FA1R
, 
f√ª√£‚à´brb√¥pos
);

953 
	`CLEAR_BIT
(
Àán_√π
->
FMR
, 
CAN_FMR_FINIT
);

956  
HAL_OK
;

961 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

963  
HAL_ERROR
;

965 
	}
}

1004 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_S√®œÄ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1006 
u√∂t32_t
 
tick¬∞¬®t
;

1008 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_READY
)

1011 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_LISTENING
;

1014 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_INRQ
);

1017 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1020 (
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_INAK
) != 0U)

1023 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

1026 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_TIMEOUT
;

1029 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

1031  
HAL_ERROR
;

1036 
hÀán
->
E¬∫‚ÄπCode
 = 
HAL_CAN_ERROR_NONE
;

1039  
HAL_OK
;

1044 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_READY
;

1046  
HAL_ERROR
;

1048 
	}
}

1056 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_St‚Ä∫
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1058 
u√∂t32_t
 
tick¬∞¬®t
;

1060 i‚Ä°(
hÀán
->
S√®√£
 =Ô£ø
HAL_CAN_STATE_LISTENING
)

1063 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_INRQ
);

1066 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1069 (
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_INAK
) == 0U)

1072 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
CAN_TIMEOUT_VALUE
)

1075 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_TIMEOUT
;

1078 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_ERROR
;

1080  
HAL_ERROR
;

1085 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_SLEEP
);

1088 
hÀán
->
S√®√£
 = 
HAL_CAN_STATE_READY
;

1091  
HAL_OK
;

1096 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_STARTED
;

1098  
HAL_ERROR
;

1100 
	}
}

1111 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_Reque¬∞S√Ä√Ø
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1113 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1115 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1116 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1119 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_SLEEP
);

1122  
HAL_OK
;

1127 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1130  
HAL_ERROR
;

1132 
	}
}

1142 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_WakeUp
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1144 
__IO
 
u√∂t32_t
 
cou¬°
 = 0;

1145 
u√∂t32_t
 
timeout
 = 1000000U;

1146 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1148 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1149 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1152 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
, 
CAN_MCR_SLEEP
);

1158 
cou¬°
++;

1161 i‚Ä°(
cou¬°
 > 
timeout
)

1164 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_TIMEOUT
;

1166  
HAL_ERROR
;

1169 (
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_SLAK
) != 0U);

1172  
HAL_OK
;

1177 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1179  
HAL_ERROR
;

1181 
	}
}

1191 
u√∂t32_t
 
	$HAL_CAN_IsS√Ä√ØAÀòive
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1193 
u√∂t32_t
 
¬∞¬©us
 = 0U;

1194 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1196 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1197 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1200 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_SLAK
) != 0U)

1202 
¬∞¬©us
 = 1U;

1207  
¬∞¬©us
;

1208 
	}
}

1222 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_AddTxMes√üge
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
CAN_TxH√≥d√ÆTy‚â•Def
 *
pH√≥d√Æ
, 
u√∂t8_t
 
aD¬©a
[], 
u√∂t32_t
 *
pTxMa√ªbox
)

1224 
u√∂t32_t
 
√•‚Ñ¢sm√¥ma√ªbox
;

1225 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1226 
u√∂t32_t
 
t¬ß
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
);

1229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_IDTYPE
(
pH√≥d√Æ
->
IDE
));

1230 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_RTR
(
pH√≥d√Æ
->
RTR
));

1231 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_DLC
(
pH√≥d√Æ
->
DLC
));

1232 i‚Ä°(
pH√≥d√Æ
->
IDE
 =Ô£ø
CAN_ID_STD
)

1234 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_STDID
(
pH√≥d√Æ
->
StdId
));

1238 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_EXTID
(
pH√≥d√Æ
->
ExtId
));

1240 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
pH√≥d√Æ
->
T√∏nsm√¥Glob√ÜTime
));

1242 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1243 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1246 i‚Ä°(((
t¬ß
 & 
CAN_TSR_TME0
) != 0U) ||

1247 ((
t¬ß
 & 
CAN_TSR_TME1
) != 0U) ||

1248 ((
t¬ß
 & 
CAN_TSR_TME2
) != 0U))

1251 
√•‚Ñ¢sm√¥ma√ªbox
 = (
t¬ß
 & 
CAN_TSR_CODE
√ã>> 
CAN_TSR_CODE_Pos
;

1254 i‚Ä°(
√•‚Ñ¢sm√¥ma√ªbox
 > 2U)

1257 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_INTERNAL
;

1259  
HAL_ERROR
;

1263 *
pTxMa√ªbox
 = (
u√∂t32_t
)1 << 
√•‚Ñ¢sm√¥ma√ªbox
;

1266 i‚Ä°(
pH√≥d√Æ
->
IDE
 =Ô£ø
CAN_ID_STD
)

1268 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 = ((
pH√≥d√Æ
->
StdId
 << 
CAN_TI0R_STID_Pos
) |

1269 
pH√≥d√Æ
->
RTR
);

1273 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
 = ((
pH√≥d√Æ
->
ExtId
 << 
CAN_TI0R_EXID_Pos
) |

1274 
pH√≥d√Æ
->
IDE
 |

1275 
pH√≥d√Æ
->
RTR
);

1279 
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
 = (
pH√≥d√Æ
->
DLC
);

1282 i‚Ä°(
pH√≥d√Æ
->
T√∏nsm√¥Glob√ÜTime
 =Ô£ø
ENABLE
)

1284 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
, 
CAN_TDT0R_TGT
);

1288 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDHR
,

1289 ((
u√∂t32_t
)
aD¬©a
[7] << 
CAN_TDH0R_DATA7_Pos
) |

1290 ((
u√∂t32_t
)
aD¬©a
[6] << 
CAN_TDH0R_DATA6_Pos
) |

1291 ((
u√∂t32_t
)
aD¬©a
[5] << 
CAN_TDH0R_DATA5_Pos
) |

1292 ((
u√∂t32_t
)
aD¬©a
[4] << 
CAN_TDH0R_DATA4_Pos
));

1293 
	`WRITE_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDLR
,

1294 ((
u√∂t32_t
)
aD¬©a
[3] << 
CAN_TDL0R_DATA3_Pos
) |

1295 ((
u√∂t32_t
)
aD¬©a
[2] << 
CAN_TDL0R_DATA2_Pos
) |

1296 ((
u√∂t32_t
)
aD¬©a
[1] << 
CAN_TDL0R_DATA1_Pos
) |

1297 ((
u√∂t32_t
)
aD¬©a
[0] << 
CAN_TDL0R_DATA0_Pos
));

1300 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TIR
, 
CAN_TI0R_TXRQ
);

1303  
HAL_OK
;

1308 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_PARAM
;

1310  
HAL_ERROR
;

1316 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1318  
HAL_ERROR
;

1320 
	}
}

1330 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_Ab‚ÄπtTxReque¬∞
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
TxMa√ªboxes
)

1332 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1335 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_TX_MAILBOX_LIST
(
TxMa√ªboxes
));

1337 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1338 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1341 i‚Ä°((
TxMa√ªboxes
 & 
CAN_TX_MAILBOX0
) != 0U)

1344 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_ABRQ0
);

1348 i‚Ä°((
TxMa√ªboxes
 & 
CAN_TX_MAILBOX1
) != 0U)

1351 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_ABRQ1
);

1355 i‚Ä°((
TxMa√ªboxes
 & 
CAN_TX_MAILBOX2
) != 0U)

1358 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
, 
CAN_TSR_ABRQ2
);

1362  
HAL_OK
;

1367 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1369  
HAL_ERROR
;

1371 
	}
}

1379 
u√∂t32_t
 
	$HAL_CAN_G√´TxMa√ªboxesF¬™eLev√±
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1381 
u√∂t32_t
 
‚Ä∞√¨√Äv√±
 = 0U;

1382 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1384 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1385 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1388 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
 & 
CAN_TSR_TME0
) != 0U)

1390 
‚Ä∞√¨√Äv√±
++;

1394 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
 & 
CAN_TSR_TME1
) != 0U)

1396 
‚Ä∞√¨√Äv√±
++;

1400 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
 & 
CAN_TSR_TME2
) != 0U)

1402 
‚Ä∞√¨√Äv√±
++;

1407  
‚Ä∞√¨√Äv√±
;

1408 
	}
}

1422 
u√∂t32_t
 
	$HAL_CAN_IsTxMes√ügeP√≠d√∂g
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
TxMa√ªboxes
)

1424 
u√∂t32_t
 
¬∞¬©us
 = 0U;

1425 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1428 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_TX_MAILBOX_LIST
(
TxMa√ªboxes
));

1430 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1431 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1434 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
 & (
TxMa√ªboxes
 << 
CAN_TSR_TME0_Pos
)) != (TxMailboxes << CAN_TSR_TME0_Pos))

1436 
¬∞¬©us
 = 1U;

1441  
¬∞¬©us
;

1442 
	}
}

1454 
u√∂t32_t
 
	$HAL_CAN_G√´TxTime¬∞amp
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
TxMa√ªbox
)

1456 
u√∂t32_t
 
time¬∞amp
 = 0U;

1457 
u√∂t32_t
 
√•‚Ñ¢sm√¥ma√ªbox
;

1458 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1461 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_TX_MAILBOX
(
TxMa√ªbox
));

1463 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1464 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1467 
√•‚Ñ¢sm√¥ma√ªbox
 = 
	`POSITION_VAL
(
TxMa√ªbox
);

1470 
time¬∞amp
 = (
hÀán
->
In¬∞‚Ñ¢Àö
->
sTxMa√ªBox
[
√•‚Ñ¢sm√¥ma√ªbox
].
TDTR
 & 
CAN_TDT0R_TIME
√ã>> 
CAN_TDT0R_TIME_Pos
;

1474  
time¬∞amp
;

1475 
	}
}

1488 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_G√´RxMes√üge
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
RxFifo
, 
CAN_RxH√≥d√ÆTy‚â•Def
 *
pH√≥d√Æ
, 
u√∂t8_t
 
aD¬©a
[])

1490 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1492 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_RX_FIFO
(
RxFifo
));

1494 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1495 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1498 i‚Ä°(
RxFifo
 =Ô£ø
CAN_RX_FIFO0
)

1501 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
RF0R
 & 
CAN_RF0R_FMP0
) == 0U)

1504 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_PARAM
;

1506  
HAL_ERROR
;

1512 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
RF1R
 & 
CAN_RF1R_FMP1
) == 0U)

1515 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_PARAM
;

1517  
HAL_ERROR
;

1522 
pH√≥d√Æ
->
IDE
 = 
CAN_RI0R_IDE
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RIR
;

1523 i‚Ä°(
pH√≥d√Æ
->
IDE
 =Ô£ø
CAN_ID_STD
)

1525 
pH√≥d√Æ
->
StdId
 = (
CAN_RI0R_STID
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RIR
√ã>> 
CAN_TI0R_STID_Pos
;

1529 
pH√≥d√Æ
->
ExtId
 = ((
CAN_RI0R_EXID
 | 
CAN_RI0R_STID
√ã& 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RIR
√ã>> 
CAN_RI0R_EXID_Pos
;

1531 
pH√≥d√Æ
->
RTR
 = (
CAN_RI0R_RTR
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RIR
);

1532 
pH√≥d√Æ
->
DLC
 = (
CAN_RDT0R_DLC
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDTR
√ã>> 
CAN_RDT0R_DLC_Pos
;

1533 
pH√≥d√Æ
->
F√ª√£rM¬©chIndex
 = (
CAN_RDT0R_FMI
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDTR
√ã>> 
CAN_RDT0R_FMI_Pos
;

1534 
pH√≥d√Æ
->
Time¬∞amp
 = (
CAN_RDT0R_TIME
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDTR
√ã>> 
CAN_RDT0R_TIME_Pos
;

1537 
aD¬©a
[0] = (
u√∂t8_t
)((
CAN_RDL0R_DATA0
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDLR
√ã>> 
CAN_RDL0R_DATA0_Pos
);

1538 
aD¬©a
[1] = (
u√∂t8_t
)((
CAN_RDL0R_DATA1
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDLR
√ã>> 
CAN_RDL0R_DATA1_Pos
);

1539 
aD¬©a
[2] = (
u√∂t8_t
)((
CAN_RDL0R_DATA2
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDLR
√ã>> 
CAN_RDL0R_DATA2_Pos
);

1540 
aD¬©a
[3] = (
u√∂t8_t
)((
CAN_RDL0R_DATA3
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDLR
√ã>> 
CAN_RDL0R_DATA3_Pos
);

1541 
aD¬©a
[4] = (
u√∂t8_t
)((
CAN_RDH0R_DATA4
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDHR
√ã>> 
CAN_RDH0R_DATA4_Pos
);

1542 
aD¬©a
[5] = (
u√∂t8_t
)((
CAN_RDH0R_DATA5
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDHR
√ã>> 
CAN_RDH0R_DATA5_Pos
);

1543 
aD¬©a
[6] = (
u√∂t8_t
)((
CAN_RDH0R_DATA6
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDHR
√ã>> 
CAN_RDH0R_DATA6_Pos
);

1544 
aD¬©a
[7] = (
u√∂t8_t
)((
CAN_RDH0R_DATA7
 & 
hÀán
->
In¬∞‚Ñ¢Àö
->
sFIFOMa√ªBox
[
RxFifo
].
RDHR
√ã>> 
CAN_RDH0R_DATA7_Pos
);

1547 i‚Ä°(
RxFifo
 =Ô£ø
CAN_RX_FIFO0
)

1550 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
RF0R
, 
CAN_RF0R_RFOM0
);

1555 
	`SET_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
RF1R
, 
CAN_RF1R_RFOM1
);

1559  
HAL_OK
;

1564 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1566  
HAL_ERROR
;

1568 
	}
}

1578 
u√∂t32_t
 
	$HAL_CAN_G√´RxFifoF√ªlLev√±
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
RxFifo
)

1580 
u√∂t32_t
 
f√ª≈íev√±
 = 0U;

1581 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1584 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_RX_FIFO
(
RxFifo
));

1586 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1587 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1589 i‚Ä°(
RxFifo
 =Ô£ø
CAN_RX_FIFO0
)

1591 
f√ª≈íev√±
 = 
hÀán
->
In¬∞‚Ñ¢Àö
->
RF0R
 & 
CAN_RF0R_FMP0
;

1595 
f√ª≈íev√±
 = 
hÀán
->
In¬∞‚Ñ¢Àö
->
RF1R
 & 
CAN_RF1R_FMP1
;

1600  
f√ª≈íev√±
;

1601 
	}
}

1631 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_AÀòiv¬©eN≈∏ifiÀáti‚ÅÑ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
AÀòiveITs
)

1633 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1636 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_IT
(
AÀòiveITs
));

1638 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1639 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1642 
	`__HAL_CAN_ENABLE_IT
(
hÀán
, 
AÀòiveITs
);

1645  
HAL_OK
;

1650 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1652  
HAL_ERROR
;

1654 
	}
}

1664 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_D√≥Àòiv¬©eN≈∏ifiÀáti‚ÅÑ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
, 
u√∂t32_t
 
I¬´ÀòiveITs
)

1666 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

1669 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CAN_IT
(
I¬´ÀòiveITs
));

1671 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

1672 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

1675 
	`__HAL_CAN_DISABLE_IT
(
hÀán
, 
I¬´ÀòiveITs
);

1678  
HAL_OK
;

1683 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

1685  
HAL_ERROR
;

1687 
	}
}

1695 
	$HAL_CAN_IRQH‚Ñ¢d√Är
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

1697 
u√∂t32_t
 
√Ær‚Äπcode
 = 
HAL_CAN_ERROR_NONE
;

1698 
u√∂t32_t
 
√∂√£¬∫u¬±s
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
IER
);

1699 
u√∂t32_t
 
m¬ß√äags
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
);

1700 
u√∂t32_t
 
t¬ß√äags
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
TSR
);

1701 
u√∂t32_t
 
rf0r√äags
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
RF0R
);

1702 
u√∂t32_t
 
rf1r√äags
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
RF1R
);

1703 
u√∂t32_t
 
e¬ß√äags
 = 
	`READ_REG
(
hÀán
->
In¬∞‚Ñ¢Àö
->
ESR
);

1706 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_TX_MAILBOX_EMPTY
) != 0U)

1709 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_RQCP0
) != 0U)

1712 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_RQCP0
);

1714 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_TXOK0
) != 0U)

1717 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1719 
hÀán
->
	`TxMa√ªbox0Com‚àÇ√´eC√Ülback
(hcan);

1722 
	`HAL_CAN_TxMa√ªbox0Com‚àÇ√´eC√Ülback
(
hÀán
);

1727 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_ALST0
) != 0U)

1730 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TX_ALST0
;

1732 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_TERR0
) != 0U)

1735 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TX_TERR0
;

1740 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1742 
hÀán
->
	`TxMa√ªbox0Ab‚ÄπtC√Ülback
(hcan);

1745 
	`HAL_CAN_TxMa√ªbox0Ab‚ÄπtC√Ülback
(
hÀán
);

1752 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_RQCP1
) != 0U)

1755 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_RQCP1
);

1757 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_TXOK1
) != 0U)

1760 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1762 
hÀán
->
	`TxMa√ªbox1Com‚àÇ√´eC√Ülback
(hcan);

1765 
	`HAL_CAN_TxMa√ªbox1Com‚àÇ√´eC√Ülback
(
hÀán
);

1770 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_ALST1
) != 0U)

1773 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TX_ALST1
;

1775 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_TERR1
) != 0U)

1778 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TX_TERR1
;

1783 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1785 
hÀán
->
	`TxMa√ªbox1Ab‚ÄπtC√Ülback
(hcan);

1788 
	`HAL_CAN_TxMa√ªbox1Ab‚ÄπtC√Ülback
(
hÀán
);

1795 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_RQCP2
) != 0U)

1798 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_RQCP2
);

1800 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_TXOK2
) != 0U)

1803 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1805 
hÀán
->
	`TxMa√ªbox2Com‚àÇ√´eC√Ülback
(hcan);

1808 
	`HAL_CAN_TxMa√ªbox2Com‚àÇ√´eC√Ülback
(
hÀán
);

1813 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_ALST2
) != 0U)

1816 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TX_ALST2
;

1818 i‚Ä°((
t¬ß√äags
 & 
CAN_TSR_TERR2
) != 0U)

1821 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_TX_TERR2
;

1826 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1828 
hÀán
->
	`TxMa√ªbox2Ab‚ÄπtC√Ülback
(hcan);

1831 
	`HAL_CAN_TxMa√ªbox2Ab‚ÄπtC√Ülback
(
hÀán
);

1839 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_RX_FIFO0_OVERRUN
) != 0U)

1841 i‚Ä°((
rf0r√äags
 & 
CAN_RF0R_FOVR0
) != 0U)

1844 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_RX_FOV0
;

1847 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_FOV0
);

1852 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_RX_FIFO0_FULL
) != 0U)

1854 i‚Ä°((
rf0r√äags
 & 
CAN_RF0R_FULL0
) != 0U)

1857 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_FF0
);

1860 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1862 
hÀán
->
	`RxFifo0Fu≈íC√Ülback
(hcan);

1865 
	`HAL_CAN_RxFifo0Fu≈íC√Ülback
(
hÀán
);

1871 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_RX_FIFO0_MSG_PENDING
) != 0U)

1874 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
RF0R
 & 
CAN_RF0R_FMP0
) != 0U)

1877 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1879 
hÀán
->
	`RxFifo0MsgP√≠d√∂gC√Ülback
(hcan);

1882 
	`HAL_CAN_RxFifo0MsgP√≠d√∂gC√Ülback
(
hÀán
);

1888 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_RX_FIFO1_OVERRUN
) != 0U)

1890 i‚Ä°((
rf1r√äags
 & 
CAN_RF1R_FOVR1
) != 0U)

1893 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_RX_FOV1
;

1896 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_FOV1
);

1901 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_RX_FIFO1_FULL
) != 0U)

1903 i‚Ä°((
rf1r√äags
 & 
CAN_RF1R_FULL1
) != 0U)

1906 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_FF1
);

1909 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1911 
hÀán
->
	`RxFifo1Fu≈íC√Ülback
(hcan);

1914 
	`HAL_CAN_RxFifo1Fu≈íC√Ülback
(
hÀán
);

1920 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_RX_FIFO1_MSG_PENDING
) != 0U)

1923 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
RF1R
 & 
CAN_RF1R_FMP1
) != 0U)

1926 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1928 
hÀán
->
	`RxFifo1MsgP√≠d√∂gC√Ülback
(hcan);

1931 
	`HAL_CAN_RxFifo1MsgP√≠d√∂gC√Ülback
(
hÀán
);

1937 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_SLEEP_ACK
) != 0U)

1939 i‚Ä°((
m¬ß√äags
 & 
CAN_MSR_SLAKI
) != 0U)

1942 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_SLAKI
);

1945 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1947 
hÀán
->
	`S√Ä√ØC√Ülback
(hcan);

1950 
	`HAL_CAN_S√Ä√ØC√Ülback
(
hÀán
);

1956 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_WAKEUP
) != 0U)

1958 i‚Ä°((
m¬ß√äags
 & 
CAN_MSR_WKUI
) != 0U)

1961 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_WKU
);

1964 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

1966 
hÀán
->
	`WakeUpFromRxMsgC√Ülback
(hcan);

1969 
	`HAL_CAN_WakeUpFromRxMsgC√Ülback
(
hÀán
);

1975 i‚Ä°((
√∂√£¬∫u¬±s
 & 
CAN_IT_ERROR
) != 0U)

1977 i‚Ä°((
m¬ß√äags
 & 
CAN_MSR_ERRI
) != 0U)

1980 i‚Ä°(((
√∂√£¬∫u¬±s
 & 
CAN_IT_ERROR_WARNING
) != 0U) &&

1981 ((
e¬ß√äags
 & 
CAN_ESR_EWGF
) != 0U))

1984 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_EWG
;

1990 i‚Ä°(((
√∂√£¬∫u¬±s
 & 
CAN_IT_ERROR_PASSIVE
) != 0U) &&

1991 ((
e¬ß√äags
 & 
CAN_ESR_EPVF
) != 0U))

1994 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_EPV
;

2000 i‚Ä°(((
√∂√£¬∫u¬±s
 & 
CAN_IT_BUSOFF
) != 0U) &&

2001 ((
e¬ß√äags
 & 
CAN_ESR_BOFF
) != 0U))

2004 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_BOF
;

2010 i‚Ä°(((
√∂√£¬∫u¬±s
 & 
CAN_IT_LAST_ERROR_CODE
) != 0U) &&

2011 ((
e¬ß√äags
 & 
CAN_ESR_LEC
) != 0U))

2013 
e¬ß√äags
 & 
CAN_ESR_LEC
)

2015 (
CAN_ESR_LEC_0
):

2017 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_STF
;

2019 (
CAN_ESR_LEC_1
):

2021 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_FOR
;

2023 (
CAN_ESR_LEC_1
 | 
CAN_ESR_LEC_0
):

2025 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_ACK
;

2027 (
CAN_ESR_LEC_2
):

2029 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_BR
;

2031 (
CAN_ESR_LEC_2
 | 
CAN_ESR_LEC_0
):

2033 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_BD
;

2035 (
CAN_ESR_LEC_2
 | 
CAN_ESR_LEC_1
):

2037 
√Ær‚Äπcode
 |Ô£ø
HAL_CAN_ERROR_CRC
;

2044 
	`CLEAR_BIT
(
hÀán
->
In¬∞‚Ñ¢Àö
->
ESR
, 
CAN_ESR_LEC
);

2049 
	`__HAL_CAN_CLEAR_FLAG
(
hÀán
, 
CAN_FLAG_ERRI
);

2053 i‚Ä°(
√Ær‚Äπcode
 !Ô£ø
HAL_CAN_ERROR_NONE
)

2056 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπcode
;

2059 #i‚Ä°
USE_HAL_CAN_REGISTER_CALLBACKS
 == 1

2061 
hÀán
->
	`E¬∫‚ÄπC√Ülback
(hcan);

2064 
	`HAL_CAN_E¬∫‚ÄπC√Ülback
(
hÀán
);

2067 
	}
}

2106 
__w√≥k
 
	$HAL_CAN_TxMa√ªbox0Com‚àÇ√´eC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2109 
	`UNUSED
(
hÀán
);

2115 
	}
}

2123 
__w√≥k
 
	$HAL_CAN_TxMa√ªbox1Com‚àÇ√´eC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2126 
	`UNUSED
(
hÀán
);

2132 
	}
}

2140 
__w√≥k
 
	$HAL_CAN_TxMa√ªbox2Com‚àÇ√´eC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2143 
	`UNUSED
(
hÀán
);

2149 
	}
}

2157 
__w√≥k
 
	$HAL_CAN_TxMa√ªbox0Ab‚ÄπtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2160 
	`UNUSED
(
hÀán
);

2166 
	}
}

2174 
__w√≥k
 
	$HAL_CAN_TxMa√ªbox1Ab‚ÄπtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2177 
	`UNUSED
(
hÀán
);

2183 
	}
}

2191 
__w√≥k
 
	$HAL_CAN_TxMa√ªbox2Ab‚ÄπtC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2194 
	`UNUSED
(
hÀán
);

2200 
	}
}

2208 
__w√≥k
 
	$HAL_CAN_RxFifo0MsgP√≠d√∂gC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2211 
	`UNUSED
(
hÀán
);

2217 
	}
}

2225 
__w√≥k
 
	$HAL_CAN_RxFifo0Fu≈íC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2228 
	`UNUSED
(
hÀán
);

2234 
	}
}

2242 
__w√≥k
 
	$HAL_CAN_RxFifo1MsgP√≠d√∂gC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2245 
	`UNUSED
(
hÀán
);

2251 
	}
}

2259 
__w√≥k
 
	$HAL_CAN_RxFifo1Fu≈íC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2262 
	`UNUSED
(
hÀán
);

2268 
	}
}

2276 
__w√≥k
 
	$HAL_CAN_S√Ä√ØC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2279 
	`UNUSED
(
hÀán
);

2284 
	}
}

2292 
__w√≥k
 
	$HAL_CAN_WakeUpFromRxMsgC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2295 
	`UNUSED
(
hÀán
);

2301 
	}
}

2309 
__w√≥k
 
	$HAL_CAN_E¬∫‚ÄπC√Ülback
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2312 
	`UNUSED
(
hÀán
);

2317 
	}
}

2346 
HAL_CAN_S√®√£Ty‚â•Def
 
	$HAL_CAN_G√´S√®√£
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2348 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

2350 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

2351 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

2354 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
MSR
 & 
CAN_MSR_SLAK
) != 0U)

2357 
¬∞¬©e
 = 
HAL_CAN_STATE_SLEEP_ACTIVE
;

2360 i‚Ä°((
hÀán
->
In¬∞‚Ñ¢Àö
->
MCR
 & 
CAN_MCR_SLEEP
) != 0U)

2363 
¬∞¬©e
 = 
HAL_CAN_STATE_SLEEP_PENDING
;

2372  
¬∞¬©e
;

2373 
	}
}

2381 
u√∂t32_t
 
	$HAL_CAN_G√´E¬∫‚Äπ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2384  
hÀán
->
E¬∫‚ÄπCode
;

2385 
	}
}

2393 
HAL_S√®tusTy‚â•Def
 
	$HAL_CAN_Re¬£tE¬∫‚Äπ
(
CAN_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀán
)

2395 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

2396 
HAL_CAN_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
hÀán
->
S√®√£
;

2398 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_READY
) ||

2399 (
¬∞¬©e
 =Ô£ø
HAL_CAN_STATE_LISTENING
))

2402 
hÀán
->
E¬∫‚ÄπCode
 = 0U;

2407 
hÀán
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CAN_ERROR_NOT_INITIALIZED
;

2409 
¬∞¬©us
 = 
HAL_ERROR
;

2413  
¬∞¬©us
;

2414 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cec.c

110 
	~"¬∞m32f1xx_h√Ü.h
"

112 #ifde‚Ä°
HAL_CEC_MODULE_ENABLED


114 #i‚Ä°
def√∂ed
 (
CEC
)

130 
	#CEC_CFGR_FIELDS
 (
CEC_CFGR_BTEM
 | 
CEC_CFGR_BPEM
 )

	)

131 
	#CEC_FLAG_TRANSMIT_MASK
 (
CEC_FLAG_TSOM
|
CEC_FLAG_TEOM
|
CEC_FLAG_TBTRF
)

	)

132 
	#CEC_FLAG_RECEIVE_MASK
 (
CEC_FLAG_RSOM
|
CEC_FLAG_REOM
|
CEC_FLAG_RBTF
)

	)

133 
	#CEC_ESR_ALL_ERROR
 (
CEC_ESR_BTE
|
CEC_ESR_BPE
|
CEC_ESR_RBTFE
|
CEC_ESR_SBE
|
CEC_ESR_ACKE
|
CEC_ESR_LINE
|
CEC_ESR_TBTFE
)

	)

134 
	#CEC_RXXFERSIZE_INITIALIZE
 0xFFFF

	)

145 
HAL_S√®tusTy‚â•Def
 
CEC_T√∏nsm√¥_IT
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

146 
HAL_S√®tusTy‚â•Def
 
CEC_ReÀöive_IT
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
);

181 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_In√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

184 if((
hÀöc
 =Ô£ø
NULL
√ã||(hÀöc->
In√¥
.
RxBuf‚Äûr
 == NULL))

186  
HAL_ERROR
;

190 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_ALL_INSTANCE
(
hÀöc
->
In¬∞‚Ñ¢Àö
));

191 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_BIT_TIMING_ERROR_MODE
(
hÀöc
->
In√¥
.
Tim√∂gE¬∫‚ÄπF¬™e
));

192 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_BIT_PERIOD_ERROR_MODE
(
hÀöc
->
In√¥
.
P√ÆiodE¬∫‚ÄπF¬™e
));

193 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_ADDRESS
(
hÀöc
->
In√¥
.
OwnAdd¬™ss
));

194 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

195 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_RESET
)

198 
hÀöc
->
Lock
 = 
HAL_UNLOCKED
;

200 
hÀöc
->
TxC‚àÇtC√Ülback
 = 
HAL_CEC_TxC‚àÇtC√Ülback
;

201 
hÀöc
->
RxC‚àÇtC√Ülback
 = 
HAL_CEC_RxC‚àÇtC√Ülback
;

202 
hÀöc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_CEC_E¬∫‚ÄπC√Ülback
;

204 if(
hÀöc
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

206 
hÀöc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_CEC_M‚Ä¢In√¥
;

210 
hÀöc
->
	`M‚Ä¢In√¥C√Ülback
(hcec);

213 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_RESET
)

216 
hÀöc
->
Lock
 = 
HAL_UNLOCKED
;

218 
	`HAL_CEC_M‚Ä¢In√¥
(
hÀöc
);

222 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_BUSY
;

225 
	`__HAL_CEC_DISABLE
(
hÀöc
);

228 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CFGR
, 
CEC_CFGR_FIELDS
, hÀöc->
In√¥
.
Tim√∂gE¬∫‚ÄπF¬™e
 | hÀöc->In√¥.
P√ÆiodE¬∫‚ÄπF¬™e
);

231 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
OAR
, 
CEC_OAR_OA
, hÀöc->
In√¥
.
OwnAdd¬™ss
);

234 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
PRES
, 
CEC_PRES_PRES
, 50U * (
	`HAL_RCC_G√´PCLK1F¬™q
()/1000000U) - 1U);

237 
	`__HAL_CEC_ENABLE_IT
(
hÀöc
, 
CEC_IT_IE
);

240 
	`__HAL_CEC_ENABLE
(
hÀöc
);

242 
hÀöc
->
E¬∫‚ÄπCode
 = 
HAL_CEC_ERROR_NONE
;

243 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_READY
;

244 
hÀöc
->
RxS√®√£
 = 
HAL_CEC_STATE_READY
;

246  
HAL_OK
;

247 
	}
}

254 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_DeIn√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

257 if(
hÀöc
 =Ô£ø
NULL
)

259  
HAL_ERROR
;

263 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_ALL_INSTANCE
(
hÀöc
->
In¬∞‚Ñ¢Àö
));

265 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_BUSY
;

267 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

268 if(
hÀöc
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

270 
hÀöc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_CEC_M‚Ä¢DeIn√¥
;

274 
hÀöc
->
	`M‚Ä¢DeIn√¥C√Ülback
(hcec);

278 
	`HAL_CEC_M‚Ä¢DeIn√¥
(
hÀöc
);

281 
	`__HAL_RCC_CEC_FORCE_RESET
();

282 
	`__HAL_RCC_CEC_RELEASE_RESET
();

284 
hÀöc
->
E¬∫‚ÄπCode
 = 
HAL_CEC_ERROR_NONE
;

285 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_RESET
;

286 
hÀöc
->
RxS√®√£
 = 
HAL_CEC_STATE_RESET
;

289 
	`__HAL_UNLOCK
(
hÀöc
);

291  
HAL_OK
;

292 
	}
}

300 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_S√´DeviÀöAdd¬™ss
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t16_t
 
CEC_OwnAdd¬™ss
)

303 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_OWN_ADDRESS
(
CEC_OwnAdd¬™ss
));

305 i‚Ä°((
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_READY
√ã&& (hÀöc->
RxS√®√£
 == HAL_CEC_STATE_READY))

308 
	`__HAL_LOCK
(
hÀöc
);

310 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_BUSY
;

313 
	`__HAL_CEC_DISABLE
(
hÀöc
);

315 if(
CEC_OwnAdd¬™ss
 !Ô£ø
CEC_OWN_ADDRESS_NONE
)

317 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
OAR
, 
CEC_OAR_OA
, hÀöc->
In√¥
.
OwnAdd¬™ss
);

321 
	`CLEAR_BIT
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
OAR
, 
CEC_OAR_OA
);

324 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_READY
;

325 
hÀöc
->
E¬∫‚ÄπCode
 = 
HAL_CEC_ERROR_NONE
;

328 
	`__HAL_UNLOCK
(
hÀöc
);

331 
	`__HAL_CEC_ENABLE
(
hÀöc
);

333  
HAL_OK
;

337  
HAL_BUSY
;

339 
	}
}

346 
__w√≥k
 
	$HAL_CEC_M‚Ä¢In√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

349 
	`UNUSED
(
hÀöc
);

353 
	}
}

360 
__w√≥k
 
	$HAL_CEC_M‚Ä¢DeIn√¥
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

363 
	`UNUSED
(
hÀöc
);

367 
	}
}

369 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

383 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_Regi¬∞√ÆC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
HAL_CEC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pCEC_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

385 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

387 if(
pC√Ülback
 =Ô£ø
NULL
)

390 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

391  
HAL_ERROR
;

394 
	`__HAL_LOCK
(
hÀöc
);

396 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_READY
)

398 
C√ÜlbackID
)

400 
HAL_CEC_TX_CPLT_CB_ID
 :

401 
hÀöc
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

404 
HAL_CEC_ERROR_CB_ID
 :

405 
hÀöc
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

408 
HAL_CEC_MSPINIT_CB_ID
 :

409 
hÀöc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

412 
HAL_CEC_MSPDEINIT_CB_ID
 :

413 
hÀöc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

418 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

420 
¬∞¬©us
 = 
HAL_ERROR
;

424 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_RESET
)

426 
C√ÜlbackID
)

428 
HAL_CEC_MSPINIT_CB_ID
 :

429 
hÀöc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

432 
HAL_CEC_MSPDEINIT_CB_ID
 :

433 
hÀöc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

438 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

440 
¬∞¬©us
 = 
HAL_ERROR
;

447 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

449 
¬∞¬©us
 = 
HAL_ERROR
;

453 
	`__HAL_UNLOCK
(
hÀöc
);

455  
¬∞¬©us
;

456 
	}
}

470 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_UnRegi¬∞√ÆC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
HAL_CEC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

472 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

475 
	`__HAL_LOCK
(
hÀöc
);

477 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_READY
)

479 
C√ÜlbackID
)

481 
HAL_CEC_TX_CPLT_CB_ID
 :

482 
hÀöc
->
TxC‚àÇtC√Ülback
 = 
HAL_CEC_TxC‚àÇtC√Ülback
;

485 
HAL_CEC_ERROR_CB_ID
 :

486 
hÀöc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_CEC_E¬∫‚ÄπC√Ülback
;

489 
HAL_CEC_MSPINIT_CB_ID
 :

490 
hÀöc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_CEC_M‚Ä¢In√¥
;

493 
HAL_CEC_MSPDEINIT_CB_ID
 :

494 
hÀöc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_CEC_M‚Ä¢DeIn√¥
;

499 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

501 
¬∞¬©us
 = 
HAL_ERROR
;

505 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_RESET
)

507 
C√ÜlbackID
)

509 
HAL_CEC_MSPINIT_CB_ID
 :

510 
hÀöc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_CEC_M‚Ä¢In√¥
;

513 
HAL_CEC_MSPDEINIT_CB_ID
 :

514 
hÀöc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_CEC_M‚Ä¢DeIn√¥
;

519 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

521 
¬∞¬©us
 = 
HAL_ERROR
;

528 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

530 
¬∞¬©us
 = 
HAL_ERROR
;

534 
	`__HAL_UNLOCK
(
hÀöc
);

536  
¬∞¬©us
;

537 
	}
}

546 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_Regi¬∞√ÆRxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
pCEC_RxC√ÜlbackTy‚â•Def
 
pC√Ülback
)

548 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

550 if(
pC√Ülback
 =Ô£ø
NULL
)

553 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

554  
HAL_ERROR
;

557 
	`__HAL_LOCK
(
hÀöc
);

559 if(
HAL_CEC_STATE_READY
 =Ô£ø
hÀöc
->
RxS√®√£
)

561 
hÀöc
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

566 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

568 
¬∞¬©us
 = 
HAL_ERROR
;

572 
	`__HAL_UNLOCK
(
hÀöc
);

573  
¬∞¬©us
;

574 
	}
}

582 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_UnRegi¬∞√ÆRxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

584 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

587 
	`__HAL_LOCK
(
hÀöc
);

589 if(
HAL_CEC_STATE_READY
 =Ô£ø
hÀöc
->
RxS√®√£
)

591 
hÀöc
->
RxC‚àÇtC√Ülback
 = 
HAL_CEC_RxC‚àÇtC√Ülback
;

596 
hÀöc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_CEC_ERROR_INVALID_CALLBACK
;

598 
¬∞¬©us
 = 
HAL_ERROR
;

602 
	`__HAL_UNLOCK
(
hÀöc
);

603  
¬∞¬©us
;

604 
	}
}

657 
HAL_S√®tusTy‚â•Def
 
	$HAL_CEC_T√∏nsm√¥_IT
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t8_t
 
In√¥√ºt‚ÄπAdd¬™ss
,u√∂t8_√†
De¬∞√∂¬©i‚ÅÑAdd¬™ss
, u√∂t8_√†*
pD¬©a
, 
u√∂t32_t
 
Size
)

661 if(
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_READY
)

663 if((
pD¬©a
 =Ô£ø
NULL
 ) && (
Size
 > 0U))

665  
HAL_ERROR
;

668 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_ADDRESS
(
De¬∞√∂¬©i‚ÅÑAdd¬™ss
));

669 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_ADDRESS
(
In√¥√ºt‚ÄπAdd¬™ss
));

670 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CEC_MSGSIZE
(
Size
));

673 
	`__HAL_LOCK
(
hÀöc
);

674 
hÀöc
->
pTxBuffP√•
 = 
pD¬©a
;

675 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_BUSY_TX
;

676 
hÀöc
->
E¬∫‚ÄπCode
 = 
HAL_CEC_ERROR_NONE
;

680 
hÀöc
->
TxX‚ÄûrCou¬°
 = 
Size
;

683 
hÀöc
->
In¬∞‚Ñ¢Àö
->
TXD
 = (
u√∂t8_t
)((
u√∂t32_t
)
In√¥√ºt‚ÄπAdd¬™ss
 << 
CEC_INITIATOR_LSB_POS
√ã| 
De¬∞√∂¬©i‚ÅÑAdd¬™ss
;

686 
	`__HAL_UNLOCK
(
hÀöc
);

689 i‚Ä°(
Size
 != 0)

692 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_FLAG_TRANSMIT_MASK
, 
CEC_FLAG_TSOM
);

697 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_FLAG_TRANSMIT_MASK
, 
CEC_FLAG_TEOM
|
CEC_FLAG_TSOM
);

699  
HAL_OK
;

704  
HAL_BUSY
;

706 
	}
}

713 
u√∂t32_t
 
	$HAL_CEC_G√´La¬∞ReÀöivedF√∏meSize
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

715  
hÀöc
->
RxX‚ÄûrSize
;

716 
	}
}

725 
	$HAL_CEC_Ch‚Ñ¢geRxBuf‚Äûr
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t8_t
* 
Rxbuf‚Äûr
)

727 
hÀöc
->
In√¥
.
RxBuf‚Äûr
 = 
Rxbuf‚Äûr
;

728 
	}
}

735 
	$HAL_CEC_IRQH‚Ñ¢d√Är
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

738 
hÀöc
->
E¬∫‚ÄπCode
 = 
	`READ_BIT
(hÀöc->
In¬∞‚Ñ¢Àö
->
ESR
, 
CEC_ESR_ALL_ERROR
);

741 if(
	`__HAL_CEC_GET_FLAG
(
hÀöc
, 
CEC_FLAG_TERR
√ã!Ô£ø
RESET
)

744 
	`__HAL_CEC_CLEAR_FLAG
(
hÀöc
, 
CEC_FLAG_TERR
);

746 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_READY
;

750 if(
	`__HAL_CEC_GET_FLAG
(
hÀöc
, 
CEC_FLAG_RERR
√ã!Ô£ø
RESET
)

753 
	`__HAL_CEC_CLEAR_FLAG
(
hÀöc
, 
CEC_FLAG_RERR
);

754 
hÀöc
->
In√¥
.
RxBuf‚Äûr
-=hÀöc->
RxX‚ÄûrSize
;

755 
hÀöc
->
RxX‚ÄûrSize
 = 0U;

756 
hÀöc
->
RxS√®√£
 = 
HAL_CEC_STATE_READY
;

759 if((
hÀöc
->
E¬∫‚ÄπCode
 & 
CEC_ESR_ALL_ERROR
) != 0U)

762 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

763 
hÀöc
->
	`E¬∫‚ÄπC√Ülback
(hcec);

765 
	`HAL_CEC_E¬∫‚ÄπC√Ülback
(
hÀöc
);

770 if(
	`__HAL_CEC_GET_FLAG
(
hÀöc
, 
CEC_FLAG_TBTRF
√ã!Ô£ø
RESET
)

772 
	`CEC_T√∏nsm√¥_IT
(
hÀöc
);

776 if(
	`__HAL_CEC_GET_FLAG
(
hÀöc
, 
CEC_FLAG_RBTF
√ã!Ô£ø
RESET
)

778 if(
hÀöc
->
RxX‚ÄûrSize
 == 0U)

781 
hÀöc
->
RxS√®√£
 = 
HAL_CEC_STATE_BUSY_RX
;

783 
	`CEC_ReÀöive_IT
(
hÀöc
);

785 
	}
}

793 
__w√≥k
 
	$HAL_CEC_TxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

796 
	`UNUSED
(
hÀöc
);

800 
	}
}

808 
__w√≥k
 
	$HAL_CEC_RxC‚àÇtC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
, 
u√∂t32_t
 
RxF√∏meSize
)

811 
	`UNUSED
(
hÀöc
);

812 
	`UNUSED
(
RxF√∏meSize
);

816 
	}
}

823 
__w√≥k
 
	$HAL_CEC_E¬∫‚ÄπC√Ülback
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

826 
	`UNUSED
(
hÀöc
);

830 
	}
}

855 
HAL_CEC_S√®√£Ty‚â•Def
 
	$HAL_CEC_G√´S√®√£
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

857 
u√∂t32_t
 
√£mp1
Ô£ø0x00U, 
√£mp2
 = 0x00U;

858 
√£mp1
 = 
hÀöc
->
gS√®√£
;

859 
√£mp2
 = 
hÀöc
->
RxS√®√£
;

861  (
HAL_CEC_S√®√£Ty‚â•Def
)(
√£mp1
 | 
√£mp2
);

862 
	}
}

870 
u√∂t32_t
 
	$HAL_CEC_G√´E¬∫‚Äπ
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

872  
hÀöc
->
E¬∫‚ÄπCode
;

873 
	}
}

894 
HAL_S√®tusTy‚â•Def
 
	$CEC_T√∏nsm√¥_IT
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

898 if((
hÀöc
->
gS√®√£
 =Ô£ø
HAL_CEC_STATE_BUSY_TX
√ã|| (
	`__HAL_CEC_GET_TRANSMISSION_START_FLAG
(hÀöc√ã!Ô£ø
RESET
))

901 if(
hÀöc
->
TxX‚ÄûrCou¬°
 == 0U)

904 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_FLAG_TRANSMIT_MASK
, 0x00U);

906 
hÀöc
->
gS√®√£
 = 
HAL_CEC_STATE_READY
;

907 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

908 
hÀöc
->
	`TxC‚àÇtC√Ülback
(hcec);

910 
	`HAL_CEC_TxC‚àÇtC√Ülback
(
hÀöc
);

913  
HAL_OK
;

918 
hÀöc
->
TxX‚ÄûrCou¬°
--;

921 
hÀöc
->
In¬∞‚Ñ¢Àö
->
TXD
 = *hÀöc->
pTxBuffP√•
++;

924 if(
hÀöc
->
TxX‚ÄûrCou¬°
 == 0U)

927 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_FLAG_TRANSMIT_MASK
, 
CEC_FLAG_TEOM
);

932 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_FLAG_TRANSMIT_MASK
, 0x00U);

935  
HAL_OK
;

940  
HAL_BUSY
;

942 
	}
}

951 
HAL_S√®tusTy‚â•Def
 
	$CEC_ReÀöive_IT
(
CEC_H‚Ñ¢d√ÄTy‚â•Def
 *
hÀöc
)

953 
u√∂t32_t
 
√£mp
;

955 if(
hÀöc
->
RxS√®√£
 =Ô£ø
HAL_CEC_STATE_BUSY_RX
)

957 
√£mp
 = 
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
;

960 
hÀöc
->
RxX‚ÄûrSize
++;

961 *
hÀöc
->
In√¥
.
RxBuf‚Äûr
++ = hÀöc->
In¬∞‚Ñ¢Àö
->
RXD
;

964 
	`MODIFY_REG
(
hÀöc
->
In¬∞‚Ñ¢Àö
->
CSR
, 
CEC_FLAG_RECEIVE_MASK
, 0x00U);

967 if(
	`HAL_IS_BIT_SET
(
√£mp
, 
CEC_FLAG_REOM
))

970 
hÀöc
->
RxS√®√£
 = 
HAL_CEC_STATE_READY
;

971 #i‚Ä°(
USE_HAL_CEC_REGISTER_CALLBACKS
 == 1)

972 
hÀöc
->
	`RxC‚àÇtC√Ülback
(hÀöc, hÀöc->
RxX‚ÄûrSize
);

974 
	`HAL_CEC_RxC‚àÇtC√Ülback
(
hÀöc
, hÀöc->
RxX‚ÄûrSize
);

977  
HAL_OK
;

981  
HAL_BUSY
;

986  
HAL_BUSY
;

988 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c

83 
	~"¬∞m32f1xx_h√Ü.h
"

94 #ifde‚Ä°
HAL_CORTEX_MODULE_ENABLED


143 
	$HAL_NVIC_S√´Pri‚Äπ√¥yGroup√∂g
(
u√∂t32_t
 
Pri‚Äπ√¥yGroup
)

146 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‚Äπ√¥yGroup
));

149 
	`NVIC_S√´Pri‚Äπ√¥yGroup√∂g
(
Pri‚Äπ√¥yGroup
);

150 
	}
}

165 
	$HAL_NVIC_S√´Pri‚Äπ√¥y
(
IRQn_Ty‚â•
 
IRQn
, 
u√∂t32_t
 
P¬™em¬±Pri‚Äπ√¥y
, u√∂t32_√†
SubPri‚Äπ√¥y
)

167 
u√∂t32_t
 
¬•i‚Äπ√¥ygroup
 = 0x00U;

170 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_SUB_PRIORITY
(
SubPri‚Äπ√¥y
));

171 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
P¬™em¬±Pri‚Äπ√¥y
));

173 
¬•i‚Äπ√¥ygroup
 = 
	`NVIC_G√´Pri‚Äπ√¥yGroup√∂g
();

175 
	`NVIC_S√´Pri‚Äπ√¥y
(
IRQn
, 
	`NVIC_EncodePri‚Äπ√¥y
(
¬•i‚Äπ√¥ygroup
, 
P¬™em¬±Pri‚Äπ√¥y
, 
SubPri‚Äπ√¥y
));

176 
	}
}

187 
	$HAL_NVIC_E¬´b√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
)

190 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

193 
	`NVIC_E¬´b√ÄIRQ
(
IRQn
);

194 
	}
}

203 
	$HAL_NVIC_Di√üb√ÄIRQ
(
IRQn_Ty‚â•
 
IRQn
)

206 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

209 
	`NVIC_Di√üb√ÄIRQ
(
IRQn
);

210 
	}
}

216 
	$HAL_NVIC_Sy¬∞emRe¬£t
()

219 
	`NVIC_Sy¬∞emRe¬£t
();

220 
	}
}

229 
u√∂t32_t
 
	$HAL_SYSTICK_C‚ÅÑfig
(
u√∂t32_t
 
TicksNumb
)

231  
	`SysTick_C‚ÅÑfig
(
TicksNumb
);

232 
	}
}

253 #i‚Ä°(
__MPU_PRESENT
 == 1U)

258 
	$HAL_MPU_Di√üb√Ä
()

261 
	`__DMB
();

264 
SCB
->
SHCSR
 &Ô£ø~
SCB_SHCSR_MEMFAULTENA_Msk
;

267 
MPU
->
CTRL
 = 0U;

268 
	}
}

281 
	$HAL_MPU_E¬´b√Ä
(
u√∂t32_t
 
MPU_C‚ÅÑ√•Ô¨Å
)

284 
MPU
->
CTRL
 = 
MPU_C‚ÅÑ√•Ô¨Å
 | 
MPU_CTRL_ENABLE_Msk
;

287 
SCB
->
SHCSR
 |Ô£ø
SCB_SHCSR_MEMFAULTENA_Msk
;

290 
	`__DSB
();

291 
	`__ISB
();

292 
	}
}

300 
	$HAL_MPU_C‚ÅÑfigRegi‚ÅÑ
(
MPU_Regi‚ÅÑ_In√¥Ty‚â•Def
 *
MPU_In√¥
)

303 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_REGION_NUMBER
(
MPU_In√¥
->
Numb√Æ
));

304 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_REGION_ENABLE
(
MPU_In√¥
->
E¬´b√Ä
));

307 
MPU
->
RNR
 = 
MPU_In√¥
->
Numb√Æ
;

309 i‚Ä°((
MPU_In√¥
->
E¬´b√Ä
√ã!Ô£ø
RESET
)

312 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_In√¥
->
Di√üb√ÄExec
));

313 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_In√¥
->
AcÀössP√Æmissi‚ÅÑ
));

314 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_TEX_LEVEL
(
MPU_In√¥
->
Ty‚â•ExtF√µld
));

315 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_In√¥
->
IsSh¬®√≥b√Ä
));

316 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_In√¥
->
IsCach√≥b√Ä
));

317 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_In√¥
->
IsBuf‚Äû√∏b√Ä
));

318 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_In√¥
->
SubRegi‚ÅÑDi√üb√Ä
));

319 
	`as¬£œÄ_‚àë√∏m
(
	`IS_MPU_REGION_SIZE
(
MPU_In√¥
->
Size
));

321 
MPU
->
RBAR
 = 
MPU_In√¥
->
Ba¬£Add¬™ss
;

322 
MPU
->
RASR
 = ((
u√∂t32_t
)
MPU_In√¥
->
Di√üb√ÄExec
 << 
MPU_RASR_XN_Pos
) |

323 ((
u√∂t32_t
)
MPU_In√¥
->
AcÀössP√Æmissi‚ÅÑ
 << 
MPU_RASR_AP_Pos
) |

324 ((
u√∂t32_t
)
MPU_In√¥
->
Ty‚â•ExtF√µld
 << 
MPU_RASR_TEX_Pos
) |

325 ((
u√∂t32_t
)
MPU_In√¥
->
IsSh¬®√≥b√Ä
 << 
MPU_RASR_S_Pos
) |

326 ((
u√∂t32_t
)
MPU_In√¥
->
IsCach√≥b√Ä
 << 
MPU_RASR_C_Pos
) |

327 ((
u√∂t32_t
)
MPU_In√¥
->
IsBuf‚Äû√∏b√Ä
 << 
MPU_RASR_B_Pos
) |

328 ((
u√∂t32_t
)
MPU_In√¥
->
SubRegi‚ÅÑDi√üb√Ä
 << 
MPU_RASR_SRD_Pos
) |

329 ((
u√∂t32_t
)
MPU_In√¥
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

330 ((
u√∂t32_t
)
MPU_In√¥
->
E¬´b√Ä
 << 
MPU_RASR_ENABLE_Pos
);

334 
MPU
->
RBAR
 = 0x00U;

335 
MPU
->
RASR
 = 0x00U;

337 
	}
}

344 
u√∂t32_t
 
	$HAL_NVIC_G√´Pri‚Äπ√¥yGroup√∂g
()

347  
	`NVIC_G√´Pri‚Äπ√¥yGroup√∂g
();

348 
	}
}

371 
	$HAL_NVIC_G√´Pri‚Äπ√¥y
(
IRQn_Ty‚â•
 
IRQn
, 
u√∂t32_t
 
Pri‚Äπ√¥yGroup
, u√∂t32_√†*
pP¬™em¬±Pri‚Äπ√¥y
, u√∂t32_√†*
pSubPri‚Äπ√¥y
)

374 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‚Äπ√¥yGroup
));

376 
	`NVIC_DecodePri‚Äπ√¥y
(
	`NVIC_G√´Pri‚Äπ√¥y
(
IRQn
), 
Pri‚Äπ√¥yGroup
, 
pP¬™em¬±Pri‚Äπ√¥y
, 
pSubPri‚Äπ√¥y
);

377 
	}
}

386 
	$HAL_NVIC_S√´P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
)

389 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

392 
	`NVIC_S√´P√≠d√∂gIRQ
(
IRQn
);

393 
	}
}

404 
u√∂t32_t
 
	$HAL_NVIC_G√´P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
)

407 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

410  
	`NVIC_G√´P√≠d√∂gIRQ
(
IRQn
);

411 
	}
}

420 
	$HAL_NVIC_C√Ä¬®P√≠d√∂gIRQ
(
IRQn_Ty‚â•
 
IRQn
)

423 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

426 
	`NVIC_C√Ä¬®P√≠d√∂gIRQ
(
IRQn
);

427 
	}
}

437 
u√∂t32_t
 
	$HAL_NVIC_G√´AÀòive
(
IRQn_Ty‚â•
 
IRQn
)

440 
	`as¬£œÄ_‚àë√∏m
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

443  
	`NVIC_G√´AÀòive
(
IRQn
);

444 
	}
}

454 
	$HAL_SYSTICK_CLKSourÀöC‚ÅÑfig
(
u√∂t32_t
 
CLKSourÀö
)

457 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSourÀö
));

458 i‚Ä°(
CLKSourÀö
 =Ô£ø
SYSTICK_CLKSOURCE_HCLK
)

460 
SysTick
->
CTRL
 |Ô£ø
SYSTICK_CLKSOURCE_HCLK
;

464 
SysTick
->
CTRL
 &Ô£ø~
SYSTICK_CLKSOURCE_HCLK
;

466 
	}
}

472 
	$HAL_SYSTICK_IRQH‚Ñ¢d√Är
()

474 
	`HAL_SYSTICK_C√Ülback
();

475 
	}
}

481 
__w√≥k
 
	$HAL_SYSTICK_C√Ülback
()

486 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_crc.c

46 
	~"¬∞m32f1xx_h√Ü.h
"

57 #ifde‚Ä°
HAL_CRC_MODULE_ENABLED


95 
HAL_S√®tusTy‚â•Def
 
	$HAL_CRC_In√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
)

98 i‚Ä°(
h¬∏c
 =Ô£ø
NULL
)

100  
HAL_ERROR
;

104 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CRC_ALL_INSTANCE
(
h¬∏c
->
In¬∞‚Ñ¢Àö
));

106 i‚Ä°(
h¬∏c
->
S√®√£
 =Ô£ø
HAL_CRC_STATE_RESET
)

109 
h¬∏c
->
Lock
 = 
HAL_UNLOCKED
;

111 
	`HAL_CRC_M‚Ä¢In√¥
(
h¬∏c
);

115 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_READY
;

118  
HAL_OK
;

119 
	}
}

126 
HAL_S√®tusTy‚â•Def
 
	$HAL_CRC_DeIn√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
)

129 i‚Ä°(
h¬∏c
 =Ô£ø
NULL
)

131  
HAL_ERROR
;

135 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CRC_ALL_INSTANCE
(
h¬∏c
->
In¬∞‚Ñ¢Àö
));

138 i‚Ä°(
h¬∏c
->
S√®√£
 =Ô£ø
HAL_CRC_STATE_BUSY
)

140  
HAL_BUSY
;

144 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_BUSY
;

147 
	`__HAL_CRC_DR_RESET
(
h¬∏c
);

150 
	`CLEAR_BIT
(
h¬∏c
->
In¬∞‚Ñ¢Àö
->
IDR
, 
CRC_IDR_IDR
);

153 
	`HAL_CRC_M‚Ä¢DeIn√¥
(
h¬∏c
);

156 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_RESET
;

159 
	`__HAL_UNLOCK
(
h¬∏c
);

162  
HAL_OK
;

163 
	}
}

170 
__w√≥k
 
	$HAL_CRC_M‚Ä¢In√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
)

173 
	`UNUSED
(
h¬∏c
);

178 
	}
}

185 
__w√≥k
 
	$HAL_CRC_M‚Ä¢DeIn√¥
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
)

188 
	`UNUSED
(
h¬∏c
);

193 
	}
}

227 
u√∂t32_t
 
	$HAL_CRC_Accumu≈ì√£
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
, 
u√∂t32_t
 
pBuf‚Äûr
[], u√∂t32_√†
Buf‚ÄûrL√≠gth
)

229 
u√∂t32_t
 
√∂dex
;

230 
u√∂t32_t
 
√£mp
 = 0U;

233 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_BUSY
;

236 
√∂dex
 = 0U; index < 
Buf‚ÄûrL√≠gth
; index++)

238 
h¬∏c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
pBuf‚Äûr
[
√∂dex
];

240 
√£mp
 = 
h¬∏c
->
In¬∞‚Ñ¢Àö
->
DR
;

243 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_READY
;

246  
√£mp
;

247 
	}
}

257 
u√∂t32_t
 
	$HAL_CRC_C√Ücu≈ì√£
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
, 
u√∂t32_t
 
pBuf‚Äûr
[], u√∂t32_√†
Buf‚ÄûrL√≠gth
)

259 
u√∂t32_t
 
√∂dex
;

260 
u√∂t32_t
 
√£mp
 = 0U;

263 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_BUSY
;

267 
	`__HAL_CRC_DR_RESET
(
h¬∏c
);

270 
√∂dex
 = 0U; index < 
Buf‚ÄûrL√≠gth
; index++)

272 
h¬∏c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
pBuf‚Äûr
[
√∂dex
];

274 
√£mp
 = 
h¬∏c
->
In¬∞‚Ñ¢Àö
->
DR
;

277 
h¬∏c
->
S√®√£
 = 
HAL_CRC_STATE_READY
;

280  
√£mp
;

281 
	}
}

306 
HAL_CRC_S√®√£Ty‚â•Def
 
	$HAL_CRC_G√´S√®√£
(
CRC_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬∏c
)

309  
h¬∏c
->
S√®√£
;

310 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dac.c

250 
	~"¬∞m32f1xx_h√Ü.h
"

256 #ifde‚Ä°
HAL_DAC_MODULE_ENABLED


257 #i‚Ä°
def√∂ed
(
DAC
)

298 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_In√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

301 i‚Ä°(
hdac
 =Ô£ø
NULL
)

303  
HAL_ERROR
;

306 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALL_INSTANCE
(
hdac
->
In¬∞‚Ñ¢Àö
));

308 i‚Ä°(
hdac
->
S√®√£
 =Ô£ø
HAL_DAC_STATE_RESET
)

310 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

312 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh1
 = 
HAL_DAC_C‚ÅÑvC‚àÇtC√ÜlbackCh1
;

313 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
 = 
HAL_DAC_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
;

314 
hdac
->
E¬∫‚ÄπC√ÜlbackCh1
 = 
HAL_DAC_E¬∫‚ÄπC√ÜlbackCh1
;

315 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh1
 = 
HAL_DAC_DMAUnd√ÆrunC√ÜlbackCh1
;

317 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh2
 = 
HAL_DACEx_C‚ÅÑvC‚àÇtC√ÜlbackCh2
;

318 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
 = 
HAL_DACEx_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
;

319 
hdac
->
E¬∫‚ÄπC√ÜlbackCh2
 = 
HAL_DACEx_E¬∫‚ÄπC√ÜlbackCh2
;

320 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh2
 = 
HAL_DACEx_DMAUnd√ÆrunC√ÜlbackCh2
;

322 i‚Ä°(
hdac
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

324 
hdac
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢In√¥
;

329 
hdac
->
Lock
 = 
HAL_UNLOCKED
;

331 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

333 
hdac
->
	`M‚Ä¢In√¥C√Ülback
(hdac);

336 
	`HAL_DAC_M‚Ä¢In√¥
(
hdac
);

341 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

344 
hdac
->
E¬∫‚ÄπCode
 = 
HAL_DAC_ERROR_NONE
;

347 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

350  
HAL_OK
;

351 
	}
}

359 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_DeIn√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

362 i‚Ä°(
hdac
 =Ô£ø
NULL
)

364  
HAL_ERROR
;

368 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALL_INSTANCE
(
hdac
->
In¬∞‚Ñ¢Àö
));

371 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

373 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

374 i‚Ä°(
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

376 
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢DeIn√¥
;

379 
hdac
->
	`M‚Ä¢DeIn√¥C√Ülback
(hdac);

382 
	`HAL_DAC_M‚Ä¢DeIn√¥
(
hdac
);

386 
hdac
->
E¬∫‚ÄπCode
 = 
HAL_DAC_ERROR_NONE
;

389 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_RESET
;

392 
	`__HAL_UNLOCK
(
hdac
);

395  
HAL_OK
;

396 
	}
}

404 
__w√≥k
 
	$HAL_DAC_M‚Ä¢In√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

407 
	`UNUSED
(
hdac
);

412 
	}
}

420 
__w√≥k
 
	$HAL_DAC_M‚Ä¢DeIn√¥
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

423 
	`UNUSED
(
hdac
);

428 
	}
}

462 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_S√®œÄ
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

465 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

468 
	`__HAL_LOCK
(
hdac
);

471 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

474 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch‚Ñ¢‚àöl
);

476 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
DAC_CHANNEL_1
)

479 i‚Ä°((
hdac
->
In¬∞‚Ñ¢Àö
->
CR
 & (
DAC_CR_TEN1
 | 
DAC_CR_TSEL1
)√ã=Ô£ø
DAC_TRIGGER_SOFTWARE
)

482 
	`SET_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
SWTRIGR
, 
DAC_SWTRIGR_SWTRIG1
);

488 i‚Ä°((
hdac
->
In¬∞‚Ñ¢Àö
->
CR
 & (
DAC_CR_TEN2
 | 
DAC_CR_TSEL2
)√ã=Ô£ø(
DAC_TRIGGER_SOFTWARE
 << (
Ch‚Ñ¢‚àöl
 & 0x10UL)))

491 
	`SET_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
SWTRIGR
, 
DAC_SWTRIGR_SWTRIG2
);

496 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

499 
	`__HAL_UNLOCK
(
hdac
);

502  
HAL_OK
;

503 
	}
}

515 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_St‚Ä∫
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

518 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

521 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch‚Ñ¢‚àöl
);

524 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

527  
HAL_OK
;

528 
	}
}

547 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_S√®œÄ_DMA
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, u√∂t32_√†
L√≠gth
,

548 
u√∂t32_t
 
Alignm√≠t
)

550 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

551 
u√∂t32_t
 
tm¬•eg
 = 0U;

554 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

555 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALIGN
(
Alignm√≠t
));

558 
	`__HAL_LOCK
(
hdac
);

561 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

563 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
DAC_CHANNEL_1
)

566 
hdac
->
DMA_H‚Ñ¢d√Ä1
->
X‚ÄûrC‚àÇtC√Ülback
 = 
DAC_DMAC‚ÅÑvC‚àÇtCh1
;

569 
hdac
->
DMA_H‚Ñ¢d√Ä1
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
DAC_DMAH√ÜfC‚ÅÑvC‚àÇtCh1
;

572 
hdac
->
DMA_H‚Ñ¢d√Ä1
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
DAC_DMAE¬∫‚ÄπCh1
;

575 
	`SET_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, 
DAC_CR_DMAEN1
);

578 
Alignm√≠t
)

580 
DAC_ALIGN_12B_R
:

582 
tm¬•eg
 = (
u√∂t32_t
)&
hdac
->
In¬∞‚Ñ¢Àö
->
DHR12R1
;

584 
DAC_ALIGN_12B_L
:

586 
tm¬•eg
 = (
u√∂t32_t
)&
hdac
->
In¬∞‚Ñ¢Àö
->
DHR12L1
;

588 
DAC_ALIGN_8B_R
:

590 
tm¬•eg
 = (
u√∂t32_t
)&
hdac
->
In¬∞‚Ñ¢Àö
->
DHR8R1
;

599 
hdac
->
DMA_H‚Ñ¢d√Ä2
->
X‚ÄûrC‚àÇtC√Ülback
 = 
DAC_DMAC‚ÅÑvC‚àÇtCh2
;

602 
hdac
->
DMA_H‚Ñ¢d√Ä2
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
DAC_DMAH√ÜfC‚ÅÑvC‚àÇtCh2
;

605 
hdac
->
DMA_H‚Ñ¢d√Ä2
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
DAC_DMAE¬∫‚ÄπCh2
;

608 
	`SET_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, 
DAC_CR_DMAEN2
);

611 
Alignm√≠t
)

613 
DAC_ALIGN_12B_R
:

615 
tm¬•eg
 = (
u√∂t32_t
)&
hdac
->
In¬∞‚Ñ¢Àö
->
DHR12R2
;

617 
DAC_ALIGN_12B_L
:

619 
tm¬•eg
 = (
u√∂t32_t
)&
hdac
->
In¬∞‚Ñ¢Àö
->
DHR12L2
;

621 
DAC_ALIGN_8B_R
:

623 
tm¬•eg
 = (
u√∂t32_t
)&
hdac
->
In¬∞‚Ñ¢Àö
->
DHR8R2
;

631 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
DAC_CHANNEL_1
)

633 #i‚Ä°
	`def√∂ed
(
DAC_CR_DMAUDRIE1
)

635 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR1
);

638 
¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hdac
->
DMA_H‚Ñ¢d√Ä1
, (
u√∂t32_t
)
pD¬©a
, 
tm¬•eg
, 
L√≠gth
);

642 #i‚Ä°
	`def√∂ed
(
DAC_CR_DMAUDRIE2
)

644 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR2
);

647 
¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hdac
->
DMA_H‚Ñ¢d√Ä2
, (
u√∂t32_t
)
pD¬©a
, 
tm¬•eg
, 
L√≠gth
);

651 
	`__HAL_UNLOCK
(
hdac
);

653 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

656 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch‚Ñ¢‚àöl
);

660 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_DMA
;

664  
¬∞¬©us
;

665 
	}
}

677 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_St‚Ä∫_DMA
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

679 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

682 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

685 
hdac
->
In¬∞‚Ñ¢Àö
->
CR
 &Ô£ø~(
DAC_CR_DMAEN1
 << (
Ch‚Ñ¢‚àöl
 & 0x10UL));

688 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch‚Ñ¢‚àöl
);

693 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
DAC_CHANNEL_1
)

696 
¬∞¬©us
 = 
	`HAL_DMA_Ab‚Äπt
(
hdac
->
DMA_H‚Ñ¢d√Ä1
);

697 #i‚Ä°
	`def√∂ed
(
DAC_CR_DMAUDRIE1
)

699 
	`__HAL_DAC_DISABLE_IT
(
hdac
, 
DAC_IT_DMAUDR1
);

705 
¬∞¬©us
 = 
	`HAL_DMA_Ab‚Äπt
(
hdac
->
DMA_H‚Ñ¢d√Ä2
);

706 #i‚Ä°
	`def√∂ed
(
DAC_CR_DMAUDRIE2
)

708 
	`__HAL_DAC_DISABLE_IT
(
hdac
, 
DAC_IT_DMAUDR2
);

713 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

716 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_ERROR
;

721 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

725  
¬∞¬©us
;

726 
	}
}

736 
	$HAL_DAC_IRQH‚Ñ¢d√Är
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

738 #i‚Ä°
	`def√∂ed
(
DAC_SR_DMAUDR1
)

739 i‚Ä°(
	`__HAL_DAC_GET_IT_SOURCE
(
hdac
, 
DAC_IT_DMAUDR1
))

742 i‚Ä°(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR1
))

745 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_ERROR
;

748 
	`SET_BIT
(
hdac
->
E¬∫‚ÄπCode
, 
HAL_DAC_ERROR_DMAUNDERRUNCH1
);

751 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR1
);

754 
	`CLEAR_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, 
DAC_CR_DMAEN1
);

757 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

758 
hdac
->
	`DMAUnd√ÆrunC√ÜlbackCh1
(hdac);

760 
	`HAL_DAC_DMAUnd√ÆrunC√ÜlbackCh1
(
hdac
);

766 #i‚Ä°
	`def√∂ed
(
DAC_SR_DMAUDR2
)

767 i‚Ä°(
	`__HAL_DAC_GET_IT_SOURCE
(
hdac
, 
DAC_IT_DMAUDR2
))

770 i‚Ä°(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR2
))

773 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_ERROR
;

776 
	`SET_BIT
(
hdac
->
E¬∫‚ÄπCode
, 
HAL_DAC_ERROR_DMAUNDERRUNCH2
);

779 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR2
);

782 
	`CLEAR_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, 
DAC_CR_DMAEN2
);

785 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

786 
hdac
->
	`DMAUnd√ÆrunC√ÜlbackCh2
(hdac);

788 
	`HAL_DACEx_DMAUnd√ÆrunC√ÜlbackCh2
(
hdac
);

793 
	}
}

811 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_S√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Alignm√≠t
, u√∂t32_√†
D¬©a
)

813 
__IO
 
u√∂t32_t
 
tmp
 = 0;

816 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

817 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALIGN
(
Alignm√≠t
));

818 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_DATA
(
D¬©a
));

820 
tmp
 = (
u√∂t32_t
)
hdac
->
In¬∞‚Ñ¢Àö
;

821 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
DAC_CHANNEL_1
)

823 
tmp
 +Ô£ø
	`DAC_DHR12R1_ALIGNMENT
(
Alignm√≠t
);

827 
tmp
 +Ô£ø
	`DAC_DHR12R2_ALIGNMENT
(
Alignm√≠t
);

831 *(
__IO
 
u√∂t32_t
 *√ã
tmp
 = 
D¬©a
;

834  
HAL_OK
;

835 
	}
}

843 
__w√≥k
 
	$HAL_DAC_C‚ÅÑvC‚àÇtC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

846 
	`UNUSED
(
hdac
);

851 
	}
}

859 
__w√≥k
 
	$HAL_DAC_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

862 
	`UNUSED
(
hdac
);

867 
	}
}

875 
__w√≥k
 
	$HAL_DAC_E¬∫‚ÄπC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

878 
	`UNUSED
(
hdac
);

883 
	}
}

891 
__w√≥k
 
	$HAL_DAC_DMAUnd√ÆrunC√ÜlbackCh1
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

894 
	`UNUSED
(
hdac
);

899 
	}
}

930 
u√∂t32_t
 
	$HAL_DAC_G√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

933 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

936 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
DAC_CHANNEL_1
)

938  
hdac
->
In¬∞‚Ñ¢Àö
->
DOR1
;

942  
hdac
->
In¬∞‚Ñ¢Àö
->
DOR2
;

944 
	}
}

957 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
DAC_Ch‚Ñ¢‚àölC‚ÅÑfTy‚â•Def
 *
sC‚ÅÑfig
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

959 
u√∂t32_t
 
tm¬•eg1
;

960 
u√∂t32_t
 
tm¬•eg2
;

963 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_TRIGGER
(
sC‚ÅÑfig
->
DAC_Trigg√Æ
));

964 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
sC‚ÅÑfig
->
DAC_Ou√ßutBuf‚Äûr
));

965 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

968 
	`__HAL_LOCK
(
hdac
);

971 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

974 
tm¬•eg1
 = 
hdac
->
In¬∞‚Ñ¢Àö
->
CR
;

976 
tm¬•eg1
 &Ô£ø~(((
u√∂t32_t
)(
DAC_CR_MAMP1
 | 
DAC_CR_WAVE1
 | 
DAC_CR_TSEL1
 | 
DAC_CR_TEN1
 | 
DAC_CR_BOFF1
)√ã<< (
Ch‚Ñ¢‚àöl
 & 0x10UL));

980 
tm¬•eg2
 = (
sC‚ÅÑfig
->
DAC_Trigg√Æ
 | sC‚ÅÑfig->
DAC_Ou√ßutBuf‚Äûr
);

982 
tm¬•eg1
 |Ô£ø
tm¬•eg2
 << (
Ch‚Ñ¢‚àöl
 & 0x10UL);

984 
hdac
->
In¬∞‚Ñ¢Àö
->
CR
 = 
tm¬•eg1
;

986 
	`CLEAR_BIT
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, (
DAC_CR_WAVE1
 << (
Ch‚Ñ¢‚àöl
 & 0x10UL)));

988 
hdac
->
In¬∞‚Ñ¢Àö
->
CR
 &Ô£ø~(
DAC_CR_WAVE1
 << (
Ch‚Ñ¢‚àöl
 & 0x10UL));

991 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

994 
	`__HAL_UNLOCK
(
hdac
);

997  
HAL_OK
;

998 
	}
}

1026 
HAL_DAC_S√®√£Ty‚â•Def
 
	$HAL_DAC_G√´S√®√£
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

1029  
hdac
->
S√®√£
;

1030 
	}
}

1039 
u√∂t32_t
 
	$HAL_DAC_G√´E¬∫‚Äπ
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

1041  
hdac
->
E¬∫‚ÄπCode
;

1042 
	}
}

1059 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

1081 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_Regi¬∞√ÆC√Ülback
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
HAL_DAC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

1082 
pDAC_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

1084 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1086 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

1089 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1090  
HAL_ERROR
;

1094 
	`__HAL_LOCK
(
hdac
);

1096 i‚Ä°(
hdac
->
S√®√£
 =Ô£ø
HAL_DAC_STATE_READY
)

1098 
C√ÜlbackID
)

1100 
HAL_DAC_CH1_COMPLETE_CB_ID
 :

1101 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh1
 = 
pC√Ülback
;

1103 
HAL_DAC_CH1_HALF_COMPLETE_CB_ID
 :

1104 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
 = 
pC√Ülback
;

1106 
HAL_DAC_CH1_ERROR_ID
 :

1107 
hdac
->
E¬∫‚ÄπC√ÜlbackCh1
 = 
pC√Ülback
;

1109 
HAL_DAC_CH1_UNDERRUN_CB_ID
 :

1110 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh1
 = 
pC√Ülback
;

1112 
HAL_DAC_CH2_COMPLETE_CB_ID
 :

1113 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh2
 = 
pC√Ülback
;

1115 
HAL_DAC_CH2_HALF_COMPLETE_CB_ID
 :

1116 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
 = 
pC√Ülback
;

1118 
HAL_DAC_CH2_ERROR_ID
 :

1119 
hdac
->
E¬∫‚ÄπC√ÜlbackCh2
 = 
pC√Ülback
;

1121 
HAL_DAC_CH2_UNDERRUN_CB_ID
 :

1122 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh2
 = 
pC√Ülback
;

1124 
HAL_DAC_MSPINIT_CB_ID
 :

1125 
hdac
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1127 
HAL_DAC_MSPDEINIT_CB_ID
 :

1128 
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1132 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1134 
¬∞¬©us
 = 
HAL_ERROR
;

1138 i‚Ä°(
hdac
->
S√®√£
 =Ô£ø
HAL_DAC_STATE_RESET
)

1140 
C√ÜlbackID
)

1142 
HAL_DAC_MSPINIT_CB_ID
 :

1143 
hdac
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1145 
HAL_DAC_MSPDEINIT_CB_ID
 :

1146 
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1150 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1152 
¬∞¬©us
 = 
HAL_ERROR
;

1159 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1161 
¬∞¬©us
 = 
HAL_ERROR
;

1165 
	`__HAL_UNLOCK
(
hdac
);

1166  
¬∞¬©us
;

1167 
	}
}

1188 
HAL_S√®tusTy‚â•Def
 
	$HAL_DAC_UnRegi¬∞√ÆC√Ülback
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
HAL_DAC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

1190 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1193 
	`__HAL_LOCK
(
hdac
);

1195 i‚Ä°(
hdac
->
S√®√£
 =Ô£ø
HAL_DAC_STATE_READY
)

1197 
C√ÜlbackID
)

1199 
HAL_DAC_CH1_COMPLETE_CB_ID
 :

1200 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh1
 = 
HAL_DAC_C‚ÅÑvC‚àÇtC√ÜlbackCh1
;

1202 
HAL_DAC_CH1_HALF_COMPLETE_CB_ID
 :

1203 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
 = 
HAL_DAC_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
;

1205 
HAL_DAC_CH1_ERROR_ID
 :

1206 
hdac
->
E¬∫‚ÄπC√ÜlbackCh1
 = 
HAL_DAC_E¬∫‚ÄπC√ÜlbackCh1
;

1208 
HAL_DAC_CH1_UNDERRUN_CB_ID
 :

1209 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh1
 = 
HAL_DAC_DMAUnd√ÆrunC√ÜlbackCh1
;

1211 
HAL_DAC_CH2_COMPLETE_CB_ID
 :

1212 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh2
 = 
HAL_DACEx_C‚ÅÑvC‚àÇtC√ÜlbackCh2
;

1214 
HAL_DAC_CH2_HALF_COMPLETE_CB_ID
 :

1215 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
 = 
HAL_DACEx_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
;

1217 
HAL_DAC_CH2_ERROR_ID
 :

1218 
hdac
->
E¬∫‚ÄπC√ÜlbackCh2
 = 
HAL_DACEx_E¬∫‚ÄπC√ÜlbackCh2
;

1220 
HAL_DAC_CH2_UNDERRUN_CB_ID
 :

1221 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh2
 = 
HAL_DACEx_DMAUnd√ÆrunC√ÜlbackCh2
;

1223 
HAL_DAC_MSPINIT_CB_ID
 :

1224 
hdac
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢In√¥
;

1226 
HAL_DAC_MSPDEINIT_CB_ID
 :

1227 
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢DeIn√¥
;

1229 
HAL_DAC_ALL_CB_ID
 :

1230 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh1
 = 
HAL_DAC_C‚ÅÑvC‚àÇtC√ÜlbackCh1
;

1231 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
 = 
HAL_DAC_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
;

1232 
hdac
->
E¬∫‚ÄπC√ÜlbackCh1
 = 
HAL_DAC_E¬∫‚ÄπC√ÜlbackCh1
;

1233 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh1
 = 
HAL_DAC_DMAUnd√ÆrunC√ÜlbackCh1
;

1234 
hdac
->
C‚ÅÑvC‚àÇtC√ÜlbackCh2
 = 
HAL_DACEx_C‚ÅÑvC‚àÇtC√ÜlbackCh2
;

1235 
hdac
->
C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
 = 
HAL_DACEx_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
;

1236 
hdac
->
E¬∫‚ÄπC√ÜlbackCh2
 = 
HAL_DACEx_E¬∫‚ÄπC√ÜlbackCh2
;

1237 
hdac
->
DMAUnd√ÆrunC√ÜlbackCh2
 = 
HAL_DACEx_DMAUnd√ÆrunC√ÜlbackCh2
;

1238 
hdac
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢In√¥
;

1239 
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢DeIn√¥
;

1243 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1245 
¬∞¬©us
 = 
HAL_ERROR
;

1249 i‚Ä°(
hdac
->
S√®√£
 =Ô£ø
HAL_DAC_STATE_RESET
)

1251 
C√ÜlbackID
)

1253 
HAL_DAC_MSPINIT_CB_ID
 :

1254 
hdac
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢In√¥
;

1256 
HAL_DAC_MSPDEINIT_CB_ID
 :

1257 
hdac
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_DAC_M‚Ä¢DeIn√¥
;

1261 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1263 
¬∞¬©us
 = 
HAL_ERROR
;

1270 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_INVALID_CALLBACK
;

1272 
¬∞¬©us
 = 
HAL_ERROR
;

1276 
	`__HAL_UNLOCK
(
hdac
);

1277  
¬∞¬©us
;

1278 
	}
}

1299 
	$DAC_DMAC‚ÅÑvC‚àÇtCh1
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1301 
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
 = (DAC_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1303 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

1304 
hdac
->
	`C‚ÅÑvC‚àÇtC√ÜlbackCh1
(hdac);

1306 
	`HAL_DAC_C‚ÅÑvC‚àÇtC√ÜlbackCh1
(
hdac
);

1309 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

1310 
	}
}

1318 
	$DAC_DMAH√ÜfC‚ÅÑvC‚àÇtCh1
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1320 
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
 = (DAC_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1322 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

1323 
hdac
->
	`C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
(hdac);

1325 
	`HAL_DAC_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh1
(
hdac
);

1327 
	}
}

1335 
	$DAC_DMAE¬∫‚ÄπCh1
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1337 
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
 = (DAC_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1340 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_DMA
;

1342 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

1343 
hdac
->
	`E¬∫‚ÄπC√ÜlbackCh1
(hdac);

1345 
	`HAL_DAC_E¬∫‚ÄπC√ÜlbackCh1
(
hdac
);

1348 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

1349 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dac_ex.c

44 
	~"¬∞m32f1xx_h√Ü.h
"

50 #ifde‚Ä°
HAL_DAC_MODULE_ENABLED


52 #i‚Ä°
def√∂ed
(
DAC
)

113 
HAL_S√®tusTy‚â•Def
 
	$HAL_DACEx_Tr√ºng√ÄWaveG√≠√Æ¬©e
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Am‚àÇ√¥ude
)

116 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

117 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
Am‚àÇ√¥ude
));

120 
	`__HAL_LOCK
(
hdac
);

123 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

126 
	`MODIFY_REG
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, ((
DAC_CR_WAVE1
√ã| (
DAC_CR_MAMP1
)√ã<< (
Ch‚Ñ¢‚àöl
 & 0x10UL), (
DAC_CR_WAVE1_1
 | 
Am‚àÇ√¥ude
) << (Channel & 0x10UL));

129 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

132 
	`__HAL_UNLOCK
(
hdac
);

135  
HAL_OK
;

136 
	}
}

162 
HAL_S√®tusTy‚â•Def
 
	$HAL_DACEx_Noi¬£WaveG√≠√Æ¬©e
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Am‚àÇ√¥ude
)

165 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_CHANNEL
(
Ch‚Ñ¢‚àöl
));

166 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
Am‚àÇ√¥ude
));

169 
	`__HAL_LOCK
(
hdac
);

172 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_BUSY
;

175 
	`MODIFY_REG
(
hdac
->
In¬∞‚Ñ¢Àö
->
CR
, ((
DAC_CR_WAVE1
√ã| (
DAC_CR_MAMP1
)√ã<< (
Ch‚Ñ¢‚àöl
 & 0x10UL), (
DAC_CR_WAVE1_0
 | 
Am‚àÇ√¥ude
) << (Channel & 0x10UL));

178 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

181 
	`__HAL_UNLOCK
(
hdac
);

184  
HAL_OK
;

185 
	}
}

202 
HAL_S√®tusTy‚â•Def
 
	$HAL_DACEx_Du√ÜS√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
, 
u√∂t32_t
 
Alignm√≠t
, u√∂t32_√†
D¬©a1
, u√∂t32_√†
D¬©a2
)

204 
u√∂t32_t
 
d¬©a
;

205 
u√∂t32_t
 
tmp
;

208 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALIGN
(
Alignm√≠t
));

209 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_DATA
(
D¬©a1
));

210 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_DATA
(
D¬©a2
));

213 i‚Ä°(
Alignm√≠t
 =Ô£ø
DAC_ALIGN_8B_R
)

215 
d¬©a
 = ((
u√∂t32_t
)
D¬©a2
 << 8U√ã| 
D¬©a1
;

219 
d¬©a
 = ((
u√∂t32_t
)
D¬©a2
 << 16U√ã| 
D¬©a1
;

222 
tmp
 = (
u√∂t32_t
)
hdac
->
In¬∞‚Ñ¢Àö
;

223 
tmp
 +Ô£ø
	`DAC_DHR12RD_ALIGNMENT
(
Alignm√≠t
);

226 *(
__IO
 
u√∂t32_t
 *)
tmp
 = 
d¬©a
;

229  
HAL_OK
;

230 
	}
}

238 
__w√≥k
 
	$HAL_DACEx_C‚ÅÑvC‚àÇtC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

241 
	`UNUSED
(
hdac
);

246 
	}
}

254 
__w√≥k
 
	$HAL_DACEx_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

257 
	`UNUSED
(
hdac
);

262 
	}
}

270 
__w√≥k
 
	$HAL_DACEx_E¬∫‚ÄπC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

273 
	`UNUSED
(
hdac
);

278 
	}
}

286 
__w√≥k
 
	$HAL_DACEx_DMAUnd√ÆrunC√ÜlbackCh2
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

289 
	`UNUSED
(
hdac
);

294 
	}
}

320 
u√∂t32_t
 
	$HAL_DACEx_Du√ÜG√´V√Üue
(
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
)

322 
u√∂t32_t
 
tmp
 = 0U;

324 
tmp
 |Ô£ø
hdac
->
In¬∞‚Ñ¢Àö
->
DOR1
;

326 
tmp
 |Ô£ø
hdac
->
In¬∞‚Ñ¢Àö
->
DOR2
 << 16U;

329  
tmp
;

330 
	}
}

352 
	$DAC_DMAC‚ÅÑvC‚àÇtCh2
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

354 
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
 = (DAC_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

356 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

357 
hdac
->
	`C‚ÅÑvC‚àÇtC√ÜlbackCh2
(hdac);

359 
	`HAL_DACEx_C‚ÅÑvC‚àÇtC√ÜlbackCh2
(
hdac
);

362 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

363 
	}
}

371 
	$DAC_DMAH√ÜfC‚ÅÑvC‚àÇtCh2
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

373 
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
 = (DAC_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

375 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

376 
hdac
->
	`C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
(hdac);

378 
	`HAL_DACEx_C‚ÅÑvH√ÜfC‚àÇtC√ÜlbackCh2
(
hdac
);

380 
	}
}

388 
	$DAC_DMAE¬∫‚ÄπCh2
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

390 
DAC_H‚Ñ¢d√ÄTy‚â•Def
 *
hdac
 = (DAC_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

393 
hdac
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_DAC_ERROR_DMA
;

395 #i‚Ä°(
USE_HAL_DAC_REGISTER_CALLBACKS
 == 1)

396 
hdac
->
	`E¬∫‚ÄπC√ÜlbackCh2
(hdac);

398 
	`HAL_DACEx_E¬∫‚ÄπC√ÜlbackCh2
(
hdac
);

401 
hdac
->
S√®√£
 = 
HAL_DAC_STATE_READY
;

402 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c

85 
	~"¬∞m32f1xx_h√Ü.h
"

96 #ifde‚Ä°
HAL_DMA_MODULE_ENABLED


106 
DMA_S√´C‚ÅÑfig
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
SrcAdd¬™ss
, u√∂t32_√†
D¬∞Add¬™ss
, u√∂t32_√†
D¬©aL√≠gth
);

143 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_In√¥
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

145 
u√∂t32_t
 
tmp
 = 0U;

148 if(
hdma
 =Ô£ø
NULL
)

150  
HAL_ERROR
;

154 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In¬∞‚Ñ¢Àö
));

155 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_DIRECTION
(
hdma
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

156 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
hdma
->
In√¥
.
P√Æ√πhInc
));

157 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_MEMORY_INC_STATE
(
hdma
->
In√¥
.
MemInc
));

158 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
hdma
->
In√¥
.
P√Æ√πhD¬©aAlignm√≠t
));

159 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_MEMORY_DATA_SIZE
(
hdma
->
In√¥
.
MemD¬©aAlignm√≠t
));

160 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_MODE
(
hdma
->
In√¥
.
Mode
));

161 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_PRIORITY
(
hdma
->
In√¥
.
Pri‚Äπ√¥y
));

163 #i‚Ä°
	`def√∂ed
 (
DMA2
)

165 i‚Ä°((
u√∂t32_t
)(
hdma
->
In¬∞‚Ñ¢Àö
√ã< (u√∂t32_t)(
DMA2_Ch‚Ñ¢‚àöl1
))

168 
hdma
->
Ch‚Ñ¢‚àölIndex
 = (((
u√∂t32_t
)hdma->
In¬∞‚Ñ¢Àö
 - (u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
√ã/ ((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
 - (uint32_t)DMA1_Channel1)) << 2;

169 
hdma
->
DmaBa¬£Add¬™ss
 = 
DMA1
;

174 
hdma
->
Ch‚Ñ¢‚àölIndex
 = (((
u√∂t32_t
)hdma->
In¬∞‚Ñ¢Àö
 - (u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
√ã/ ((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
 - (uint32_t)DMA2_Channel1)) << 2;

175 
hdma
->
DmaBa¬£Add¬™ss
 = 
DMA2
;

179 
hdma
->
Ch‚Ñ¢‚àölIndex
 = (((
u√∂t32_t
)hdma->
In¬∞‚Ñ¢Àö
 - (u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
√ã/ ((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
 - (uint32_t)DMA1_Channel1)) << 2;

180 
hdma
->
DmaBa¬£Add¬™ss
 = 
DMA1
;

184 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_BUSY
;

187 
tmp
 = 
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
;

190 
tmp
 &Ô£ø((
u√∂t32_t
)~(
DMA_CCR_PL
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PSIZE
 | \

191 
DMA_CCR_MINC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_CIRC
 | \

192 
DMA_CCR_DIR
));

195 
tmp
 |Ô£ø
hdma
->
In√¥
.
D√∫eÀòi‚ÅÑ
 |

196 
hdma
->
In√¥
.
P√Æ√πhInc
 | hdma->In√¥.
MemInc
 |

197 
hdma
->
In√¥
.
P√Æ√πhD¬©aAlignm√≠t
 | hdma->In√¥.
MemD¬©aAlignm√≠t
 |

198 
hdma
->
In√¥
.
Mode
 | hdma->In√¥.
Pri‚Äπ√¥y
;

201 
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 = 
tmp
;

204 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NONE
;

207 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

209 
hdma
->
Lock
 = 
HAL_UNLOCKED
;

211  
HAL_OK
;

212 
	}
}

220 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_DeIn√¥
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

223 if(
hdma
 =Ô£ø
NULL
)

225  
HAL_ERROR
;

229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In¬∞‚Ñ¢Àö
));

232 
	`__HAL_DMA_DISABLE
(
hdma
);

235 
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 = 0U;

238 
hdma
->
In¬∞‚Ñ¢Àö
->
CNDTR
 = 0U;

241 
hdma
->
In¬∞‚Ñ¢Àö
->
CPAR
 = 0U;

244 
hdma
->
In¬∞‚Ñ¢Àö
->
CMAR
 = 0U;

246 #i‚Ä°
	`def√∂ed
 (
DMA2
)

248 i‚Ä°((
u√∂t32_t
)(
hdma
->
In¬∞‚Ñ¢Àö
√ã< (u√∂t32_t)(
DMA2_Ch‚Ñ¢‚àöl1
))

251 
hdma
->
Ch‚Ñ¢‚àölIndex
 = (((
u√∂t32_t
)hdma->
In¬∞‚Ñ¢Àö
 - (u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
√ã/ ((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
 - (uint32_t)DMA1_Channel1)) << 2;

252 
hdma
->
DmaBa¬£Add¬™ss
 = 
DMA1
;

257 
hdma
->
Ch‚Ñ¢‚àölIndex
 = (((
u√∂t32_t
)hdma->
In¬∞‚Ñ¢Àö
 - (u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl1
√ã/ ((u√∂t32_t)
DMA2_Ch‚Ñ¢‚àöl2
 - (uint32_t)DMA2_Channel1)) << 2;

258 
hdma
->
DmaBa¬£Add¬™ss
 = 
DMA2
;

262 
hdma
->
Ch‚Ñ¢‚àölIndex
 = (((
u√∂t32_t
)hdma->
In¬∞‚Ñ¢Àö
 - (u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl1
√ã/ ((u√∂t32_t)
DMA1_Ch‚Ñ¢‚àöl2
 - (uint32_t)DMA1_Channel1)) << 2;

263 
hdma
->
DmaBa¬£Add¬™ss
 = 
DMA1
;

267 
hdma
->
DmaBa¬£Add¬™ss
->
IFCR
 = (
DMA_ISR_GIF1
 << (hdma->
Ch‚Ñ¢‚àölIndex
));

270 
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

271 
hdma
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

272 
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
NULL
;

273 
hdma
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

276 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NONE
;

279 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_RESET
;

282 
	`__HAL_UNLOCK
(
hdma
);

284  
HAL_OK
;

285 
	}
}

319 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_S√®œÄ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
SrcAdd¬™ss
, u√∂t32_√†
D¬∞Add¬™ss
, u√∂t32_√†
D¬©aL√≠gth
)

321 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

324 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_BUFFER_SIZE
(
D¬©aL√≠gth
));

327 
	`__HAL_LOCK
(
hdma
);

329 if(
HAL_DMA_STATE_READY
 =Ô£ø
hdma
->
S√®√£
)

332 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_BUSY
;

333 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NONE
;

336 
	`__HAL_DMA_DISABLE
(
hdma
);

339 
	`DMA_S√´C‚ÅÑfig
(
hdma
, 
SrcAdd¬™ss
, 
D¬∞Add¬™ss
, 
D¬©aL√≠gth
);

342 
	`__HAL_DMA_ENABLE
(
hdma
);

347 
	`__HAL_UNLOCK
(
hdma
);

348 
¬∞¬©us
 = 
HAL_BUSY
;

350  
¬∞¬©us
;

351 
	}
}

362 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_S√®œÄ_IT
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
SrcAdd¬™ss
, u√∂t32_√†
D¬∞Add¬™ss
, u√∂t32_√†
D¬©aL√≠gth
)

364 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

367 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DMA_BUFFER_SIZE
(
D¬©aL√≠gth
));

370 
	`__HAL_LOCK
(
hdma
);

372 if(
HAL_DMA_STATE_READY
 =Ô£ø
hdma
->
S√®√£
)

375 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_BUSY
;

376 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NONE
;

379 
	`__HAL_DMA_DISABLE
(
hdma
);

382 
	`DMA_S√´C‚ÅÑfig
(
hdma
, 
SrcAdd¬™ss
, 
D¬∞Add¬™ss
, 
D¬©aL√≠gth
);

386 if(
NULL
 !Ô£ø
hdma
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
)

389 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

393 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

394 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_TE
));

397 
	`__HAL_DMA_ENABLE
(
hdma
);

402 
	`__HAL_UNLOCK
(
hdma
);

405 
¬∞¬©us
 = 
HAL_BUSY
;

407  
¬∞¬©us
;

408 
	}
}

416 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_Ab‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

418 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

420 if(
hdma
->
S√®√£
 !Ô£ø
HAL_DMA_STATE_BUSY
)

423 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NO_XFER
;

426 
	`__HAL_UNLOCK
(
hdma
);

428  
HAL_ERROR
;

434 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

437 
	`__HAL_DMA_DISABLE
(
hdma
);

440 
hdma
->
DmaBa¬£Add¬™ss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch‚Ñ¢‚àölIndex
);

443 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

446 
	`__HAL_UNLOCK
(
hdma
);

448  
¬∞¬©us
;

449 
	}
}

457 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_Ab‚Äπt_IT
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

459 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

461 if(
HAL_DMA_STATE_BUSY
 !Ô£ø
hdma
->
S√®√£
)

464 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NO_XFER
;

466 
¬∞¬©us
 = 
HAL_ERROR
;

471 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

474 
	`__HAL_DMA_DISABLE
(
hdma
);

477 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_GI_FLAG_INDEX
(hdma));

480 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

483 
	`__HAL_UNLOCK
(
hdma
);

486 if(
hdma
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

488 
hdma
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hdma);

491  
¬∞¬©us
;

492 
	}
}

502 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_PÔ¨ÅlF‚ÄπT√∏ns‚Äûr
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
Com‚àÇ√´eLev√±
, u√∂t32_√†
Timeout
)

504 
u√∂t32_t
 
√£mp
;

505 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

507 if(
HAL_DMA_STATE_BUSY
 !Ô£ø
hdma
->
S√®√£
)

510 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NO_XFER
;

511 
	`__HAL_UNLOCK
(
hdma
);

512  
HAL_ERROR
;

516 i‚Ä°(
RESET
 !Ô£ø(
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
))

518 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NOT_SUPPORTED
;

519  
HAL_ERROR
;

523 if(
Com‚àÇ√´eLev√±
 =Ô£ø
HAL_DMA_FULL_TRANSFER
)

526 
√£mp
 = 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(
hdma
);

531 
√£mp
 = 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(
hdma
);

535 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

537 
	`__HAL_DMA_GET_FLAG
(
hdma
, 
√£mp
√ã=Ô£ø
RESET
)

539 if((
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma)√ã!Ô£ø
RESET
))

544 
hdma
->
DmaBa¬£Add¬™ss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch‚Ñ¢‚àölIndex
);

547 
	`SET_BIT
(
hdma
->
E¬∫‚ÄπCode
, 
HAL_DMA_ERROR_TE
);

550 
hdma
->
S√®√£
Ô£ø
HAL_DMA_STATE_READY
;

553 
	`__HAL_UNLOCK
(
hdma
);

555  
HAL_ERROR
;

558 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

560 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
) > Timeout))

563 
	`SET_BIT
(
hdma
->
E¬∫‚ÄπCode
, 
HAL_DMA_ERROR_TIMEOUT
);

566 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

569 
	`__HAL_UNLOCK
(
hdma
);

571  
HAL_ERROR
;

576 if(
Com‚àÇ√´eLev√±
 =Ô£ø
HAL_DMA_FULL_TRANSFER
)

579 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

583 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

588 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

592 
	`__HAL_UNLOCK
(
hdma
);

594  
HAL_OK
;

595 
	}
}

603 
	$HAL_DMA_IRQH‚Ñ¢d√Är
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

605 
u√∂t32_t
 
√äag_√¥
 = 
hdma
->
DmaBa¬£Add¬™ss
->
ISR
;

606 
u√∂t32_t
 
sourÀö_√¥
 = 
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
;

609 i‚Ä°(((
√äag_√¥
 & (
DMA_FLAG_HT1
 << 
hdma
->
Ch‚Ñ¢‚àölIndex
)√ã!Ô£ø
RESET
√ã&& ((
sourÀö_√¥
 & 
DMA_IT_HT
) != RESET))

612 if((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

615 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

618 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

623 if(
hdma
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 !Ô£ø
NULL
)

626 
hdma
->
	`X‚ÄûrH√ÜfC‚àÇtC√Ülback
(hdma);

631 i‚Ä°(((
√äag_√¥
 & (
DMA_FLAG_TC1
 << 
hdma
->
Ch‚Ñ¢‚àölIndex
)√ã!Ô£ø
RESET
√ã&& ((
sourÀö_√¥
 & 
DMA_IT_TC
) != RESET))

633 if((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

636 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TE
 | 
DMA_IT_TC
);

639 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

642 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

645 
	`__HAL_UNLOCK
(
hdma
);

647 if(
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 !Ô£ø
NULL
)

650 
hdma
->
	`X‚ÄûrC‚àÇtC√Ülback
(hdma);

655 i‚Ä°(‚Äì
RESET
 !Ô£ø(
√äag_√¥
 & (
DMA_FLAG_TE1
 << 
hdma
->
Ch‚Ñ¢‚àölIndex
))√ã&& (RESET !Ô£ø(
sourÀö_√¥
 & 
DMA_IT_TE
)))

660 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

663 
hdma
->
DmaBa¬£Add¬™ss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch‚Ñ¢‚àölIndex
);

666 
hdma
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_TE
;

669 
hdma
->
S√®√£
 = 
HAL_DMA_STATE_READY
;

672 
	`__HAL_UNLOCK
(
hdma
);

674 i‚Ä°(
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 !Ô£ø
NULL
)

677 
hdma
->
	`X‚ÄûrE¬∫‚ÄπC√Ülback
(hdma);

681 
	}
}

693 
HAL_S√®tusTy‚â•Def
 
HAL_DMA_Regi¬∞√ÆC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
HAL_DMA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, (* 
pC√Ülback
)‚ÄìDMA_H‚Ñ¢d√ÄTy‚â•De‚Ä°* 
_hdma
))

695 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

698 
	`__HAL_LOCK
(
hdma
);

700 if(
HAL_DMA_STATE_READY
 =Ô£ø
hdma
->
S√®√£
)

702 
C√ÜlbackID
)

704 
HAL_DMA_XFER_CPLT_CB_ID
:

705 
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
pC√Ülback
;

708 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

709 
hdma
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

712 
HAL_DMA_XFER_ERROR_CB_ID
:

713 
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

716 
HAL_DMA_XFER_ABORT_CB_ID
:

717 
hdma
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
pC√Ülback
;

721 
¬∞¬©us
 = 
HAL_ERROR
;

727 
¬∞¬©us
 = 
HAL_ERROR
;

731 
	`__HAL_UNLOCK
(
hdma
);

733  
¬∞¬©us
;

734 
	}
}

744 
HAL_S√®tusTy‚â•Def
 
	$HAL_DMA_UnRegi¬∞√ÆC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
HAL_DMA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

746 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

749 
	`__HAL_LOCK
(
hdma
);

751 if(
HAL_DMA_STATE_READY
 =Ô£ø
hdma
->
S√®√£
)

753 
C√ÜlbackID
)

755 
HAL_DMA_XFER_CPLT_CB_ID
:

756 
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

759 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

760 
hdma
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

763 
HAL_DMA_XFER_ERROR_CB_ID
:

764 
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
NULL
;

767 
HAL_DMA_XFER_ABORT_CB_ID
:

768 
hdma
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

771 
HAL_DMA_XFER_ALL_CB_ID
:

772 
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

773 
hdma
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

774 
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
NULL
;

775 
hdma
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

779 
¬∞¬©us
 = 
HAL_ERROR
;

785 
¬∞¬©us
 = 
HAL_ERROR
;

789 
	`__HAL_UNLOCK
(
hdma
);

791  
¬∞¬©us
;

792 
	}
}

820 
HAL_DMA_S√®√£Ty‚â•Def
 
	$HAL_DMA_G√´S√®√£
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

823  
hdma
->
S√®√£
;

824 
	}
}

832 
u√∂t32_t
 
	$HAL_DMA_G√´E¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

834  
hdma
->
E¬∫‚ÄπCode
;

835 
	}
}

858 
	$DMA_S√´C‚ÅÑfig
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
, 
u√∂t32_t
 
SrcAdd¬™ss
, u√∂t32_√†
D¬∞Add¬™ss
, u√∂t32_√†
D¬©aL√≠gth
)

861 
hdma
->
DmaBa¬£Add¬™ss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch‚Ñ¢‚àölIndex
);

864 
hdma
->
In¬∞‚Ñ¢Àö
->
CNDTR
 = 
D¬©aL√≠gth
;

867 if((
hdma
->
In√¥
.
D√∫eÀòi‚ÅÑ
√ã=Ô£ø
DMA_MEMORY_TO_PERIPH
)

870 
hdma
->
In¬∞‚Ñ¢Àö
->
CPAR
 = 
D¬∞Add¬™ss
;

873 
hdma
->
In¬∞‚Ñ¢Àö
->
CMAR
 = 
SrcAdd¬™ss
;

879 
hdma
->
In¬∞‚Ñ¢Àö
->
CPAR
 = 
SrcAdd¬™ss
;

882 
hdma
->
In¬∞‚Ñ¢Àö
->
CMAR
 = 
D¬∞Add¬™ss
;

884 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_eth.c

132 
	~"¬∞m32f1xx_h√Ü.h
"

143 #ifde‚Ä°
HAL_ETH_MODULE_ENABLED


145 #i‚Ä°
def√∂ed
 (
ETH
)

152 
	#ETH_TIMEOUT_SWRESET
 500U

	)

153 
	#ETH_TIMEOUT_LINKED_STATE
 5000U

	)

154 
	#ETH_TIMEOUT_AUTONEGO_COMPLETED
 5000U

	)

165 
ETH_MACDMAC‚ÅÑfig
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t32_t
 
√Ær
);

166 
ETH_MACAdd¬™ssC‚ÅÑfig
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t32_t
 
MacAddr
, 
u√∂t8_t
 *
Addr
);

167 
ETH_MACReÀö¬±i‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

168 
ETH_MACReÀö¬±i‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

169 
ETH_MACT√∏nsmissi‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

170 
ETH_MACT√∏nsmissi‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

171 
ETH_DMAT√∏nsmissi‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

172 
ETH_DMAT√∏nsmissi‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

173 
ETH_DMAReÀö¬±i‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

174 
ETH_DMAReÀö¬±i‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

175 
ETH_FlushT√∏nsm√¥FIFO
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

176 
ETH_D√±ay
(
u√∂t32_t
 
md√±ay
);

177 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

178 
ETH_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
);

212 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

214 
u√∂t32_t
 
tm¬•eg1
 = 0U, 
phy¬™g
 = 0U;

215 
u√∂t32_t
 
hÀõk
 = 60000000U;

216 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

217 
u√∂t32_t
 
√Ær
 = 
ETH_SUCCESS
;

220 i‚Ä°(
h√´h
 =Ô£ø
NULL
)

222  
HAL_ERROR
;

226 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_AUTONEGOTIATION
(
h√´h
->
In√¥
.
AutoNeg≈∏√ºti‚ÅÑ
));

227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RX_MODE
(
h√´h
->
In√¥
.
RxMode
));

228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_CHECKSUM_MODE
(
h√´h
->
In√¥
.
ChecksumMode
));

229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_MEDIA_INTERFACE
(
h√´h
->
In√¥
.
Med√ºI¬°√Æ√ÅÀö
));

231 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_RESET
)

234 
h√´h
->
Lock
 = 
HAL_UNLOCKED
;

235 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

236 
	`ETH_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
h√´h
);

238 i‚Ä°(
h√´h
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

241 
h√´h
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_ETH_M‚Ä¢In√¥
;

243 
h√´h
->
	`M‚Ä¢In√¥C√Ülback
(heth);

247 
	`HAL_ETH_M‚Ä¢In√¥
(
h√´h
);

252 
AFIO
->
MAPR
 &Ô£ø~(
AFIO_MAPR_MII_RMII_SEL
);

253 
AFIO
->
MAPR
 |Ô£ø(
u√∂t32_t
)
h√´h
->
In√¥
.
Med√ºI¬°√Æ√ÅÀö
;

258 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
 |Ô£ø
ETH_DMABMR_SR
;

261 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

264 ((
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
 & 
ETH_DMABMR_SR
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

267 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ETH_TIMEOUT_SWRESET
)

269 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_TIMEOUT
;

272 
	`__HAL_UNLOCK
(
h√´h
);

276  
HAL_TIMEOUT
;

282 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACMIIAR
;

284 
tm¬•eg1
 &Ô£ø
ETH_MACMIIAR_CR_MASK
;

287 
hÀõk
 = 
	`HAL_RCC_G√´HCLKF¬™q
();

290 i‚Ä°((
hÀõk
 >= 20000000U) && (hclk < 35000000U))

293 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)
ETH_MACMIIAR_CR_DIV16
;

295 i‚Ä°((
hÀõk
 >= 35000000U) && (hclk < 60000000U))

298 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)
ETH_MACMIIAR_CR_DIV26
;

303 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)
ETH_MACMIIAR_CR_DIV42
;

307 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACMIIAR
 = (
u√∂t32_t
)
tm¬•eg1
;

311 i‚Ä°((
	`HAL_ETH_Wr√¥ePHYRegi¬∞√Æ
(
h√´h
, 
PHY_BCR
, 
PHY_RESET
)√ã!Ô£ø
HAL_OK
)

314 
√Ær
 = 
ETH_ERROR
;

317 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

320 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

323  
HAL_ERROR
;

327 
	`HAL_D√±ay
(
PHY_RESET_DELAY
);

329 i‚Ä°((
h√´h
->
In√¥
).
AutoNeg≈∏√ºti‚ÅÑ
 !Ô£ø
ETH_AUTONEGOTIATION_DISABLE
)

332 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

337 
	`HAL_ETH_R√≥dPHYRegi¬∞√Æ
(
h√´h
, 
PHY_BSR
, &
phy¬™g
);

340 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ETH_TIMEOUT_LINKED_STATE
)

343 
√Ær
 = 
ETH_ERROR
;

346 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

348 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

351 
	`__HAL_UNLOCK
(
h√´h
);

353  
HAL_TIMEOUT
;

356 ((
phy¬™g
 & 
PHY_LINKED_STATUS
) != PHY_LINKED_STATUS));

360 i‚Ä°((
	`HAL_ETH_Wr√¥ePHYRegi¬∞√Æ
(
h√´h
, 
PHY_BCR
, 
PHY_AUTONEGOTIATION
)√ã!Ô£ø
HAL_OK
)

363 
√Ær
 = 
ETH_ERROR
;

366 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

369 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

372  
HAL_ERROR
;

376 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

381 
	`HAL_ETH_R√≥dPHYRegi¬∞√Æ
(
h√´h
, 
PHY_BSR
, &
phy¬™g
);

384 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
ETH_TIMEOUT_AUTONEGO_COMPLETED
)

387 
√Ær
 = 
ETH_ERROR
;

390 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

392 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

395 
	`__HAL_UNLOCK
(
h√´h
);

397  
HAL_TIMEOUT
;

401 ((
phy¬™g
 & 
PHY_AUTONEGO_COMPLETE
) != PHY_AUTONEGO_COMPLETE));

404 i‚Ä°((
	`HAL_ETH_R√≥dPHYRegi¬∞√Æ
(
h√´h
, 
PHY_SR
, &
phy¬™g
)√ã!Ô£ø
HAL_OK
)

407 
√Ær
 = 
ETH_ERROR
;

410 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

413 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

416  
HAL_ERROR
;

420 i‚Ä°((
phy¬™g
 & 
PHY_DUPLEX_STATUS
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

423 (
h√´h
->
In√¥
).
Du‚àÇexMode
 = 
ETH_MODE_FULLDUPLEX
;

428 (
h√´h
->
In√¥
).
Du‚àÇexMode
 = 
ETH_MODE_HALFDUPLEX
;

431 i‚Ä°((
phy¬™g
 & 
PHY_SPEED_STATUS
) == PHY_SPEED_STATUS)

434 (
h√´h
->
In√¥
).
S‚â•ed
 = 
ETH_SPEED_10M
;

439 (
h√´h
->
In√¥
).
S‚â•ed
 = 
ETH_SPEED_100M
;

445 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_SPEED
(
h√´h
->
In√¥
.
S‚â•ed
));

446 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DUPLEX_MODE
(
h√´h
->
In√¥
.
Du‚àÇexMode
));

449 i‚Ä°(
	`HAL_ETH_Wr√¥ePHYRegi¬∞√Æ
(
h√´h
, 
PHY_BCR
, ((
u√∂t16_t
)((h√´h->
In√¥
).
Du‚àÇexMode
 >> 3U) |

450 (
u√∂t16_t
)((
h√´h
->
In√¥
).
S‚â•ed
 >> 1U))√ã!Ô£ø
HAL_OK
)

453 
√Ær
 = 
ETH_ERROR
;

456 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

459 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

462  
HAL_ERROR
;

466 
	`HAL_D√±ay
(
PHY_CONFIG_DELAY
);

470 
	`ETH_MACDMAC‚ÅÑfig
(
h√´h
, 
√Ær
);

473 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

476  
HAL_OK
;

477 
	}
}

485 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_DeIn√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

488 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

490 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

491 i‚Ä°(
h√´h
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

493 
h√´h
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_ETH_M‚Ä¢DeIn√¥
;

496 
h√´h
->
	`M‚Ä¢DeIn√¥C√Ülback
(heth);

499 
	`HAL_ETH_M‚Ä¢DeIn√¥
(
h√´h
);

503 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_RESET
;

506 
	`__HAL_UNLOCK
(
h√´h
);

509  
HAL_OK
;

510 
	}
}

521 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_DMATxDescLi¬∞In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_DMADescTy‚â•Def
 *
DMATxDescTab
, 
u√∂t8_t
 *
TxBuff
, 
u√∂t32_t
 
TxBuffCou¬°
)

523 
u√∂t32_t
 
i
 = 0U;

524 
ETH_DMADescTy‚â•Def
 *
dm¬©xdesc
;

527 
	`__HAL_LOCK
(
h√´h
);

530 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

533 
h√´h
->
TxDesc
 = 
DMATxDescTab
;

536 
i
 = 0U; i < 
TxBuffCou¬°
; i++)

539 
dm¬©xdesc
 = 
DMATxDescTab
 + 
i
;

542 
dm¬©xdesc
->
S√®tus
 = 
ETH_DMATXDESC_TCH
;

545 
dm¬©xdesc
->
Buf‚Äûr1Addr
 = (
u√∂t32_t
)(&
TxBuff
[
i
 * 
ETH_TX_BUF_SIZE
]);

547 i‚Ä°((
h√´h
->
In√¥
).
ChecksumMode
 =Ô£ø
ETH_CHECKSUM_BY_HARDWARE
)

550 
dm¬©xdesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL
;

554 i‚Ä°(
i
 < (
TxBuffCou¬°
 - 1U))

557 
dm¬©xdesc
->
Buf‚Äûr2NextDescAddr
 = (
u√∂t32_t
)(
DMATxDescTab
 + 
i
 + 1U);

562 
dm¬©xdesc
->
Buf‚Äûr2NextDescAddr
 = (
u√∂t32_t
√ã
DMATxDescTab
;

567 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMATDLAR
 = (
u√∂t32_t
√ã
DMATxDescTab
;

570 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

573 
	`__HAL_UNLOCK
(
h√´h
);

576  
HAL_OK
;

577 
	}
}

588 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_DMARxDescLi¬∞In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_DMADescTy‚â•Def
 *
DMARxDescTab
, 
u√∂t8_t
 *
RxBuff
, 
u√∂t32_t
 
RxBuffCou¬°
)

590 
u√∂t32_t
 
i
 = 0U;

591 
ETH_DMADescTy‚â•Def
 *
DMARxDesc
;

594 
	`__HAL_LOCK
(
h√´h
);

597 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

600 
h√´h
->
RxDesc
 = 
DMARxDescTab
;

603 
i
 = 0U; i < 
RxBuffCou¬°
; i++)

606 
DMARxDesc
 = 
DMARxDescTab
 + 
i
;

609 
DMARxDesc
->
S√®tus
 = 
ETH_DMARXDESC_OWN
;

612 
DMARxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 = 
ETH_DMARXDESC_RCH
 | 
ETH_RX_BUF_SIZE
;

615 
DMARxDesc
->
Buf‚Äûr1Addr
 = (
u√∂t32_t
)(&
RxBuff
[
i
 * 
ETH_RX_BUF_SIZE
]);

617 i‚Ä°((
h√´h
->
In√¥
).
RxMode
 =Ô£ø
ETH_RXINTERRUPT_MODE
)

620 
DMARxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 &Ô£ø~
ETH_DMARXDESC_DIC
;

624 i‚Ä°(
i
 < (
RxBuffCou¬°
 - 1U))

627 
DMARxDesc
->
Buf‚Äûr2NextDescAddr
 = (
u√∂t32_t
)(
DMARxDescTab
 + 
i
 + 1U);

632 
DMARxDesc
->
Buf‚Äûr2NextDescAddr
 = (
u√∂t32_t
)(
DMARxDescTab
);

637 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMARDLAR
 = (
u√∂t32_t
√ã
DMARxDescTab
;

640 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

643 
	`__HAL_UNLOCK
(
h√´h
);

646  
HAL_OK
;

647 
	}
}

655 
__w√≥k
 
	$HAL_ETH_M‚Ä¢In√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

658 
	`UNUSED
(
h√´h
);

662 
	}
}

670 
__w√≥k
 
	$HAL_ETH_M‚Ä¢DeIn√¥
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

673 
	`UNUSED
(
h√´h
);

677 
	}
}

679 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

694 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_Regi¬∞√ÆC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
HAL_ETH_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pETH_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

696 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

698 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

700  
HAL_ERROR
;

703 
	`__HAL_LOCK
(
h√´h
);

705 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_READY
)

707 
C√ÜlbackID
)

709 
HAL_ETH_TX_COMPLETE_CB_ID
 :

710 
h√´h
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

713 
HAL_ETH_RX_COMPLETE_CB_ID
 :

714 
h√´h
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

717 
HAL_ETH_DMA_ERROR_CB_ID
 :

718 
h√´h
->
DMAE¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

721 
HAL_ETH_MSPINIT_CB_ID
 :

722 
h√´h
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

725 
HAL_ETH_MSPDEINIT_CB_ID
 :

726 
h√´h
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

731 
¬∞¬©us
 = 
HAL_ERROR
;

735 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_RESET
)

737 
C√ÜlbackID
)

739 
HAL_ETH_MSPINIT_CB_ID
 :

740 
h√´h
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

743 
HAL_ETH_MSPDEINIT_CB_ID
 :

744 
h√´h
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

749 
¬∞¬©us
 = 
HAL_ERROR
;

756 
¬∞¬©us
 = 
HAL_ERROR
;

760 
	`__HAL_UNLOCK
(
h√´h
);

762  
¬∞¬©us
;

763 
	}
}

778 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_UnRegi¬∞√ÆC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
HAL_ETH_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

780 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

783 
	`__HAL_LOCK
(
h√´h
);

785 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_READY
)

787 
C√ÜlbackID
)

789 
HAL_ETH_TX_COMPLETE_CB_ID
 :

790 
h√´h
->
TxC‚àÇtC√Ülback
 = 
HAL_ETH_TxC‚àÇtC√Ülback
;

793 
HAL_ETH_RX_COMPLETE_CB_ID
 :

794 
h√´h
->
RxC‚àÇtC√Ülback
 = 
HAL_ETH_RxC‚àÇtC√Ülback
;

797 
HAL_ETH_DMA_ERROR_CB_ID
 :

798 
h√´h
->
DMAE¬∫‚ÄπC√Ülback
 = 
HAL_ETH_E¬∫‚ÄπC√Ülback
;

801 
HAL_ETH_MSPINIT_CB_ID
 :

802 
h√´h
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_ETH_M‚Ä¢In√¥
;

805 
HAL_ETH_MSPDEINIT_CB_ID
 :

806 
h√´h
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_ETH_M‚Ä¢DeIn√¥
;

811 
¬∞¬©us
 = 
HAL_ERROR
;

815 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_RESET
)

817 
C√ÜlbackID
)

819 
HAL_ETH_MSPINIT_CB_ID
 :

820 
h√´h
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_ETH_M‚Ä¢In√¥
;

823 
HAL_ETH_MSPDEINIT_CB_ID
 :

824 
h√´h
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_ETH_M‚Ä¢DeIn√¥
;

829 
¬∞¬©us
 = 
HAL_ERROR
;

836 
¬∞¬©us
 = 
HAL_ERROR
;

840 
	`__HAL_UNLOCK
(
h√´h
);

842  
¬∞¬©us
;

843 
	}
}

880 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_T√∏nsm√¥F√∏me
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t32_t
 
F√∏meL√≠gth
)

882 
u√∂t32_t
 
bufcou¬°
 = 0U, 
size
 = 0U, 
i
 = 0U;

885 
	`__HAL_LOCK
(
h√´h
);

888 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

890 i‚Ä°(
F√∏meL√≠gth
 == 0U)

893 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

896 
	`__HAL_UNLOCK
(
h√´h
);

898  
HAL_ERROR
;

902 i‚Ä°(((
h√´h
->
TxDesc
)->
S√®tus
 & 
ETH_DMATXDESC_OWN
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

905 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY_TX
;

908 
	`__HAL_UNLOCK
(
h√´h
);

910  
HAL_ERROR
;

914 i‚Ä°(
F√∏meL√≠gth
 > 
ETH_TX_BUF_SIZE
)

916 
bufcou¬°
 = 
F√∏meL√≠gth
 / 
ETH_TX_BUF_SIZE
;

917 i‚Ä°(
F√∏meL√≠gth
 % 
ETH_TX_BUF_SIZE
)

919 
bufcou¬°
++;

924 
bufcou¬°
 = 1U;

926 i‚Ä°(
bufcou¬°
 == 1U)

929 
h√´h
->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_FS
 | 
ETH_DMATXDESC_LS
;

931 
h√´h
->
TxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 = (
F√∏meL√≠gth
 & 
ETH_DMATXDESC_TBS1
);

933 
h√´h
->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_OWN
;

935 
h√´h
->
TxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->TxDesc->
Buf‚Äûr2NextDescAddr
);

939 
i
 = 0U; i < 
bufcou¬°
; i++)

942 
h√´h
->
TxDesc
->
S√®tus
 &Ô£ø~(
ETH_DMATXDESC_FS
 | 
ETH_DMATXDESC_LS
);

944 i‚Ä°(
i
 == 0U)

947 
h√´h
->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_FS
;

951 
h√´h
->
TxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 = (
ETH_TX_BUF_SIZE
 & 
ETH_DMATXDESC_TBS1
);

953 i‚Ä°(
i
 =Ô£ø(
bufcou¬°
 - 1U))

956 
h√´h
->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_LS
;

957 
size
 = 
F√∏meL√≠gth
 - (
bufcou¬°
 - 1U√ã* 
ETH_TX_BUF_SIZE
;

958 
h√´h
->
TxDesc
->
C‚ÅÑ√•Ô¨ÅBuf‚ÄûrSize
 = (
size
 & 
ETH_DMATXDESC_TBS1
);

962 
h√´h
->
TxDesc
->
S√®tus
 |Ô£ø
ETH_DMATXDESC_OWN
;

964 
h√´h
->
TxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->TxDesc->
Buf‚Äûr2NextDescAddr
);

969 i‚Ä°(((
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMASR
 & 
ETH_DMASR_TBUS
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

972 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMASR
 = 
ETH_DMASR_TBUS
;

974 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMATPDR
 = 0U;

978 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

981 
	`__HAL_UNLOCK
(
h√´h
);

984  
HAL_OK
;

985 
	}
}

993 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_G√´ReÀöivedF√∏me
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

995 
u√∂t32_t
 
‚Ä∞am√±√≠gth
 = 0U;

998 
	`__HAL_LOCK
(
h√´h
);

1001 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

1005 i‚Ä°(((
h√´h
->
RxDesc
->
S√®tus
 & 
ETH_DMARXDESC_OWN
√ã=Ô£ø(
u√∂t32_t
)
RESET
))

1008 i‚Ä°(((
h√´h
->
RxDesc
->
S√®tus
 & 
ETH_DMARXDESC_LS
√ã!Ô£ø(
u√∂t32_t
)
RESET
))

1011 (
h√´h
->
RxF√∏meInfos
).
SegCou¬°
++;

1014 i‚Ä°((
h√´h
->
RxF√∏meInfos
).
SegCou¬°
 == 1U)

1016 (
h√´h
->
RxF√∏meInfos
).
FSRxDesc
 = h√´h->
RxDesc
;

1019 
h√´h
->
RxF√∏meInfos
.
LSRxDesc
 = h√´h->
RxDesc
;

1022 
‚Ä∞am√±√≠gth
 = (((
h√´h
->
RxDesc
)->
S√®tus
 & 
ETH_DMARXDESC_FL
√ã>> 
ETH_DMARXDESC_FRAMELENGTHSHIFT
) - 4U;

1023 
h√´h
->
RxF√∏meInfos
.
√Ängth
 = 
‚Ä∞am√±√≠gth
;

1026 
h√´h
->
RxF√∏meInfos
.
buf‚Äûr
 = ((h√´h->RxF√∏meInfos).
FSRxDesc
)->
Buf‚Äûr1Addr
;

1028 
h√´h
->
RxDesc
 = (
ETH_DMADescTy‚â•Def
 *)((h√´h->RxDesc)->
Buf‚Äûr2NextDescAddr
);

1031 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1034 
	`__HAL_UNLOCK
(
h√´h
);

1037  
HAL_OK
;

1040 i‚Ä°((
h√´h
->
RxDesc
->
S√®tus
 & 
ETH_DMARXDESC_FS
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

1042 (
h√´h
->
RxF√∏meInfos
).
FSRxDesc
 = h√´h->
RxDesc
;

1043 (
h√´h
->
RxF√∏meInfos
).
LSRxDesc
 = 
NULL
;

1044 (
h√´h
->
RxF√∏meInfos
).
SegCou¬°
 = 1U;

1046 
h√´h
->
RxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->RxDesc->
Buf‚Äûr2NextDescAddr
);

1051 (
h√´h
->
RxF√∏meInfos
).
SegCou¬°
++;

1053 
h√´h
->
RxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->RxDesc->
Buf‚Äûr2NextDescAddr
);

1058 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1061 
	`__HAL_UNLOCK
(
h√´h
);

1064  
HAL_ERROR
;

1065 
	}
}

1073 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_G√´ReÀöivedF√∏me_IT
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1075 
u√∂t32_t
 
des¬∏√πt‚ÄπsÀáncou¬°√Æ
 = 0U;

1078 
	`__HAL_LOCK
(
h√´h
);

1081 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

1084 ((
h√´h
->
RxDesc
->
S√®tus
 & 
ETH_DMARXDESC_OWN
√ã=Ô£ø(
u√∂t32_t
)
RESET
√ã&& (
des¬∏√πt‚ÄπsÀáncou¬°√Æ
 < 
ETH_RXBUFNB
))

1087 
des¬∏√πt‚ÄπsÀáncou¬°√Æ
++;

1091 i‚Ä°((
h√´h
->
RxDesc
->
S√®tus
 & (
ETH_DMARXDESC_FS
 | 
ETH_DMARXDESC_LS
)√ã=Ô£ø(
u√∂t32_t
)ETH_DMARXDESC_FS)

1093 
h√´h
->
RxF√∏meInfos
.
FSRxDesc
 = h√´h->
RxDesc
;

1094 
h√´h
->
RxF√∏meInfos
.
SegCou¬°
 = 1U;

1096 
h√´h
->
RxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->RxDesc->
Buf‚Äûr2NextDescAddr
);

1100 i‚Ä°((
h√´h
->
RxDesc
->
S√®tus
 & (
ETH_DMARXDESC_LS
 | 
ETH_DMARXDESC_FS
)√ã=Ô£ø(
u√∂t32_t
)
RESET
)

1103 (
h√´h
->
RxF√∏meInfos
.
SegCou¬°
)++;

1105 
h√´h
->
RxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->RxDesc->
Buf‚Äûr2NextDescAddr
);

1111 
h√´h
->
RxF√∏meInfos
.
LSRxDesc
 = h√´h->
RxDesc
;

1114 (
h√´h
->
RxF√∏meInfos
.
SegCou¬°
)++;

1117 i‚Ä°((
h√´h
->
RxF√∏meInfos
.
SegCou¬°
) == 1U)

1119 
h√´h
->
RxF√∏meInfos
.
FSRxDesc
 = h√´h->
RxDesc
;

1123 
h√´h
->
RxF√∏meInfos
.
√Ängth
 = (((h√´h->
RxDesc
)->
S√®tus
 & 
ETH_DMARXDESC_FL
√ã>> 
ETH_DMARXDESC_FRAMELENGTHSHIFT
) - 4U;

1126 
h√´h
->
RxF√∏meInfos
.
buf‚Äûr
 = ((h√´h->RxF√∏meInfos).
FSRxDesc
)->
Buf‚Äûr1Addr
;

1129 
h√´h
->
RxDesc
 = (
ETH_DMADescTy‚â•Def
 *)(h√´h->RxDesc->
Buf‚Äûr2NextDescAddr
);

1132 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1135 
	`__HAL_UNLOCK
(
h√´h
);

1138  
HAL_OK
;

1143 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1146 
	`__HAL_UNLOCK
(
h√´h
);

1149  
HAL_ERROR
;

1150 
	}
}

1158 
	$HAL_ETH_IRQH‚Ñ¢d√Är
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1161 i‚Ä°(
	`__HAL_ETH_DMA_GET_FLAG
(
h√´h
, 
ETH_DMA_FLAG_R
))

1163 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

1165 
h√´h
->
	`RxC‚àÇtC√Ülback
(heth);

1168 
	`HAL_ETH_RxC‚àÇtC√Ülback
(
h√´h
);

1172 
	`__HAL_ETH_DMA_CLEAR_IT
(
h√´h
, 
ETH_DMA_IT_R
);

1175 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1178 
	`__HAL_UNLOCK
(
h√´h
);

1182 i‚Ä°(
	`__HAL_ETH_DMA_GET_FLAG
(
h√´h
, 
ETH_DMA_FLAG_T
))

1184 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

1186 
h√´h
->
	`TxC‚àÇtC√Ülback
(heth);

1189 
	`HAL_ETH_TxC‚àÇtC√Ülback
(
h√´h
);

1193 
	`__HAL_ETH_DMA_CLEAR_IT
(
h√´h
, 
ETH_DMA_IT_T
);

1196 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1199 
	`__HAL_UNLOCK
(
h√´h
);

1203 
	`__HAL_ETH_DMA_CLEAR_IT
(
h√´h
, 
ETH_DMA_IT_NIS
);

1206 i‚Ä°(
	`__HAL_ETH_DMA_GET_FLAG
(
h√´h
, 
ETH_DMA_FLAG_AIS
))

1208 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

1209 
h√´h
->
	`DMAE¬∫‚ÄπC√Ülback
(heth);

1212 
	`HAL_ETH_E¬∫‚ÄπC√Ülback
(
h√´h
);

1216 
	`__HAL_ETH_DMA_CLEAR_IT
(
h√´h
, 
ETH_DMA_FLAG_AIS
);

1219 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1222 
	`__HAL_UNLOCK
(
h√´h
);

1224 
	}
}

1232 
__w√≥k
 
	$HAL_ETH_TxC‚àÇtC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1235 
	`UNUSED
(
h√´h
);

1239 
	}
}

1247 
__w√≥k
 
	$HAL_ETH_RxC‚àÇtC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1250 
	`UNUSED
(
h√´h
);

1254 
	}
}

1262 
__w√≥k
 
	$HAL_ETH_E¬∫‚ÄπC√Ülback
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1265 
	`UNUSED
(
h√´h
);

1269 
	}
}

1283 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_R√≥dPHYRegi¬∞√Æ
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t16_t
 
PHYReg
, 
u√∂t32_t
 *
RegV√Üue
)

1285 
u√∂t32_t
 
tm¬•eg1
 = 0U;

1286 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1289 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_PHY_ADDRESS
(
h√´h
->
In√¥
.
PhyAdd¬™ss
));

1292 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_BUSY_RD
)

1294  
HAL_BUSY
;

1297 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY_RD
;

1300 
tm¬•eg1
 = 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIAR
;

1303 
tm¬•eg1
 &Ô£ø~
ETH_MACMIIAR_CR_MASK
;

1306 
tm¬•eg1
 |Ô£ø(((
u√∂t32_t
)
h√´h
->
In√¥
.
PhyAdd¬™ss
 << 11U√ã& 
ETH_MACMIIAR_PA
);

1307 
tm¬•eg1
 |Ô£ø(((
u√∂t32_t
)
PHYReg
 << 6U√ã& 
ETH_MACMIIAR_MR
);

1308 
tm¬•eg1
 &Ô£ø~
ETH_MACMIIAR_MW
;

1309 
tm¬•eg1
 |Ô£ø
ETH_MACMIIAR_MB
;

1312 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIAR
 = 
tm¬•eg1
;

1315 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1318 (
tm¬•eg1
 & 
ETH_MACMIIAR_MB
) == ETH_MACMIIAR_MB)

1321 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PHY_READ_TO
)

1323 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1326 
	`__HAL_UNLOCK
(
h√´h
);

1328  
HAL_TIMEOUT
;

1331 
tm¬•eg1
 = 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIAR
;

1335 *
RegV√Üue
 = (
u√∂t16_t
)(
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIDR
);

1338 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1341  
HAL_OK
;

1342 
	}
}

1355 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_Wr√¥ePHYRegi¬∞√Æ
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t16_t
 
PHYReg
, 
u√∂t32_t
 
RegV√Üue
)

1357 
u√∂t32_t
 
tm¬•eg1
 = 0U;

1358 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1361 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_PHY_ADDRESS
(
h√´h
->
In√¥
.
PhyAdd¬™ss
));

1364 i‚Ä°(
h√´h
->
S√®√£
 =Ô£ø
HAL_ETH_STATE_BUSY_WR
)

1366  
HAL_BUSY
;

1369 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY_WR
;

1372 
tm¬•eg1
 = 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIAR
;

1375 
tm¬•eg1
 &Ô£ø~
ETH_MACMIIAR_CR_MASK
;

1378 
tm¬•eg1
 |Ô£ø(((
u√∂t32_t
)
h√´h
->
In√¥
.
PhyAdd¬™ss
 << 11U√ã& 
ETH_MACMIIAR_PA
);

1379 
tm¬•eg1
 |Ô£ø(((
u√∂t32_t
)
PHYReg
 << 6U√ã& 
ETH_MACMIIAR_MR
);

1380 
tm¬•eg1
 |Ô£ø
ETH_MACMIIAR_MW
;

1381 
tm¬•eg1
 |Ô£ø
ETH_MACMIIAR_MB
;

1384 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIDR
 = (
u√∂t16_t
)
RegV√Üue
;

1387 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIAR
 = 
tm¬•eg1
;

1390 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1393 (
tm¬•eg1
 & 
ETH_MACMIIAR_MB
) == ETH_MACMIIAR_MB)

1396 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PHY_WRITE_TO
)

1398 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1401 
	`__HAL_UNLOCK
(
h√´h
);

1403  
HAL_TIMEOUT
;

1406 
tm¬•eg1
 = 
h√´h
->
In¬∞‚Ñ¢Àö
->
MACMIIAR
;

1410 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1413  
HAL_OK
;

1414 
	}
}

1447 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_S√®œÄ
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1450 
	`__HAL_LOCK
(
h√´h
);

1453 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

1456 
	`ETH_MACT√∏nsmissi‚ÅÑE¬´b√Ä
(
h√´h
);

1459 
	`ETH_MACReÀö¬±i‚ÅÑE¬´b√Ä
(
h√´h
);

1462 
	`ETH_FlushT√∏nsm√¥FIFO
(
h√´h
);

1465 
	`ETH_DMAT√∏nsmissi‚ÅÑE¬´b√Ä
(
h√´h
);

1468 
	`ETH_DMAReÀö¬±i‚ÅÑE¬´b√Ä
(
h√´h
);

1471 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1474 
	`__HAL_UNLOCK
(
h√´h
);

1477  
HAL_OK
;

1478 
	}
}

1486 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_St‚Ä∫
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1489 
	`__HAL_LOCK
(
h√´h
);

1492 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

1495 
	`ETH_DMAT√∏nsmissi‚ÅÑDi√üb√Ä
(
h√´h
);

1498 
	`ETH_DMAReÀö¬±i‚ÅÑDi√üb√Ä
(
h√´h
);

1501 
	`ETH_MACReÀö¬±i‚ÅÑDi√üb√Ä
(
h√´h
);

1504 
	`ETH_FlushT√∏nsm√¥FIFO
(
h√´h
);

1507 
	`ETH_MACT√∏nsmissi‚ÅÑDi√üb√Ä
(
h√´h
);

1510 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1513 
	`__HAL_UNLOCK
(
h√´h
);

1516  
HAL_OK
;

1517 
	}
}

1526 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_C‚ÅÑfigMAC
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_MACIn√¥Ty‚â•Def
 *
macc‚ÅÑf
)

1528 
u√∂t32_t
 
tm¬•eg1
 = 0U;

1531 
	`__HAL_LOCK
(
h√´h
);

1534 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

1536 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_SPEED
(
h√´h
->
In√¥
.
S‚â•ed
));

1537 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DUPLEX_MODE
(
h√´h
->
In√¥
.
Du‚àÇexMode
));

1539 i‚Ä°(
macc‚ÅÑf
 !Ô£ø
NULL
)

1542 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_WATCHDOG
(
macc‚ÅÑf
->
W¬©chdog
));

1543 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_JABBER
(
macc‚ÅÑf
->
Jabb√Æ
));

1544 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_INTER_FRAME_GAP
(
macc‚ÅÑf
->
I¬°√ÆF√∏meG‚â†
));

1545 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_CARRIER_SENSE
(
macc‚ÅÑf
->
C¬®r√µrS√≠¬£
));

1546 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RECEIVE_OWN
(
macc‚ÅÑf
->
ReÀöiveOwn
));

1547 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_LOOPBACK_MODE
(
macc‚ÅÑf
->
Lo‚Ä∫backMode
));

1548 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_CHECKSUM_OFFLOAD
(
macc‚ÅÑf
->
ChecksumOf√äÔ¨Çd
));

1549 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RETRY_TRANSMISSION
(
macc‚ÅÑf
->
R√´ryT√∏nsmissi‚ÅÑ
));

1550 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_AUTOMATIC_PADCRC_STRIP
(
macc‚ÅÑf
->
Autom¬©icPadCRCS√•√π
));

1551 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_BACKOFF_LIMIT
(
macc‚ÅÑf
->
BackOffLim√¥
));

1552 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DEFERRAL_CHECK
(
macc‚ÅÑf
->
De‚Äû¬∫√ÜCheck
));

1553 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RECEIVE_ALL
(
macc‚ÅÑf
->
ReÀöiveA≈í
));

1554 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_SOURCE_ADDR_FILTER
(
macc‚ÅÑf
->
SourÀöAddrF√ª√£r
));

1555 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_CONTROL_FRAMES
(
macc‚ÅÑf
->
PassC‚ÅÑ√•Ô¨ÅF√∏mes
));

1556 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_BROADCAST_FRAMES_RECEPTION
(
macc‚ÅÑf
->
BrÔ¨ÇdÀá¬∞F√∏mesReÀö¬±i‚ÅÑ
));

1557 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DESTINATION_ADDR_FILTER
(
macc‚ÅÑf
->
De¬∞√∂¬©i‚ÅÑAddrF√ª√£r
));

1558 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_PROMISCUOUS_MODE
(
macc‚ÅÑf
->
PromiscuousMode
));

1559 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_MULTICAST_FRAMES_FILTER
(
macc‚ÅÑf
->
Mu‚Ä¶iÀá¬∞F√∏mesF√ª√£r
));

1560 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_UNICAST_FRAMES_FILTER
(
macc‚ÅÑf
->
UniÀá¬∞F√∏mesF√ª√£r
));

1561 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_PAUSE_TIME
(
macc‚ÅÑf
->
Pau¬£Time
));

1562 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_ZEROQUANTA_PAUSE
(
macc‚ÅÑf
->
Z√ÆoQu‚Ñ¢√®Pau¬£
));

1563 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_PAUSE_LOW_THRESHOLD
(
macc‚ÅÑf
->
Pau¬£LowTh¬™shÔ¨Åd
));

1564 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_UNICAST_PAUSE_FRAME_DETECT
(
macc‚ÅÑf
->
UniÀá¬∞Pau¬£F√∏meD√´eÀò
));

1565 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RECEIVE_FLOWCONTROL
(
macc‚ÅÑf
->
ReÀöiveFlowC‚ÅÑ√•Ô¨Å
));

1566 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_TRANSMIT_FLOWCONTROL
(
macc‚ÅÑf
->
T√∏nsm√¥FlowC‚ÅÑ√•Ô¨Å
));

1567 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_VLAN_TAG_COMPARISON
(
macc‚ÅÑf
->
VLANTagCom‚àëris‚ÅÑ
));

1568 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_VLAN_TAG_IDENTIFIER
(
macc‚ÅÑf
->
VLANTagId√≠tif√µr
));

1572 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

1574 
tm¬•eg1
 &Ô£ø
ETH_MACCR_CLEAR_MASK
;

1576 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)(
macc‚ÅÑf
->
W¬©chdog
 |

1577 
macc‚ÅÑf
->
Jabb√Æ
 |

1578 
macc‚ÅÑf
->
I¬°√ÆF√∏meG‚â†
 |

1579 
macc‚ÅÑf
->
C¬®r√µrS√≠¬£
 |

1580 (
h√´h
->
In√¥
).
S‚â•ed
 |

1581 
macc‚ÅÑf
->
ReÀöiveOwn
 |

1582 
macc‚ÅÑf
->
Lo‚Ä∫backMode
 |

1583 (
h√´h
->
In√¥
).
Du‚àÇexMode
 |

1584 
macc‚ÅÑf
->
ChecksumOf√äÔ¨Çd
 |

1585 
macc‚ÅÑf
->
R√´ryT√∏nsmissi‚ÅÑ
 |

1586 
macc‚ÅÑf
->
Autom¬©icPadCRCS√•√π
 |

1587 
macc‚ÅÑf
->
BackOffLim√¥
 |

1588 
macc‚ÅÑf
->
De‚Äû¬∫√ÜCheck
);

1591 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = (
u√∂t32_t
)
tm¬•eg1
;

1595 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

1596 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1597 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

1601 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFFR
 = (
u√∂t32_t
)(
macc‚ÅÑf
->
ReÀöiveA≈í
 |

1602 
macc‚ÅÑf
->
SourÀöAddrF√ª√£r
 |

1603 
macc‚ÅÑf
->
PassC‚ÅÑ√•Ô¨ÅF√∏mes
 |

1604 
macc‚ÅÑf
->
BrÔ¨ÇdÀá¬∞F√∏mesReÀö¬±i‚ÅÑ
 |

1605 
macc‚ÅÑf
->
De¬∞√∂¬©i‚ÅÑAddrF√ª√£r
 |

1606 
macc‚ÅÑf
->
PromiscuousMode
 |

1607 
macc‚ÅÑf
->
Mu‚Ä¶iÀá¬∞F√∏mesF√ª√£r
 |

1608 
macc‚ÅÑf
->
UniÀá¬∞F√∏mesF√ª√£r
);

1612 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFFR
;

1613 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1614 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFFR
 = 
tm¬•eg1
;

1618 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACHTHR
 = (
u√∂t32_t
)
macc‚ÅÑf
->
HashTab√ÄHigh
;

1621 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACHTLR
 = (
u√∂t32_t
)
macc‚ÅÑf
->
HashTab√ÄLow
;

1625 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
;

1627 
tm¬•eg1
 &Ô£ø
ETH_MACFCR_CLEAR_MASK
;

1629 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)((
macc‚ÅÑf
->
Pau¬£Time
 << 16U) |

1630 
macc‚ÅÑf
->
Z√ÆoQu‚Ñ¢√®Pau¬£
 |

1631 
macc‚ÅÑf
->
Pau¬£LowTh¬™shÔ¨Åd
 |

1632 
macc‚ÅÑf
->
UniÀá¬∞Pau¬£F√∏meD√´eÀò
 |

1633 
macc‚ÅÑf
->
ReÀöiveFlowC‚ÅÑ√•Ô¨Å
 |

1634 
macc‚ÅÑf
->
T√∏nsm√¥FlowC‚ÅÑ√•Ô¨Å
);

1637 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
 = (
u√∂t32_t
)
tm¬•eg1
;

1641 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
;

1642 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1643 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
 = 
tm¬•eg1
;

1646 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACVLANTR
 = (
u√∂t32_t
)(
macc‚ÅÑf
->
VLANTagCom‚àëris‚ÅÑ
 |

1647 
macc‚ÅÑf
->
VLANTagId√≠tif√µr
);

1651 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACVLANTR
;

1652 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1653 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACVLANTR
 = 
tm¬•eg1
;

1659 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

1662 
tm¬•eg1
 &= ~(0x00004800U);

1664 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)(
h√´h
->
In√¥
.
S‚â•ed
 | h√´h->In√¥.
Du‚àÇexMode
);

1667 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = (
u√∂t32_t
)
tm¬•eg1
;

1671 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

1672 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1673 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

1677 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1680 
	`__HAL_UNLOCK
(
h√´h
);

1683  
HAL_OK
;

1684 
	}
}

1693 
HAL_S√®tusTy‚â•Def
 
	$HAL_ETH_C‚ÅÑfigDMA
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
ETH_DMAIn√¥Ty‚â•Def
 *
dmac‚ÅÑf
)

1695 
u√∂t32_t
 
tm¬•eg1
 = 0U;

1698 
	`__HAL_LOCK
(
h√´h
);

1701 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_BUSY
;

1704 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DROP_TCPIP_CHECKSUM_FRAME
(
dmac‚ÅÑf
->
Dr‚Ä∫TCPIPChecksumE¬∫‚ÄπF√∏me
));

1705 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RECEIVE_STORE_FORWARD
(
dmac‚ÅÑf
->
ReÀöiveSt‚ÄπeF‚Äπw¬®d
));

1706 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_FLUSH_RECEIVE_FRAME
(
dmac‚ÅÑf
->
FlushReÀöivedF√∏me
));

1707 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_TRANSMIT_STORE_FORWARD
(
dmac‚ÅÑf
->
T√∏nsm√¥St‚ÄπeF‚Äπw¬®d
));

1708 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_TRANSMIT_THRESHOLD_CONTROL
(
dmac‚ÅÑf
->
T√∏nsm√¥Th¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
));

1709 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_FORWARD_ERROR_FRAMES
(
dmac‚ÅÑf
->
F‚Äπw¬®dE¬∫‚ÄπF√∏mes
));

1710 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_FORWARD_UNDERSIZED_GOOD_FRAMES
(
dmac‚ÅÑf
->
F‚Äπw¬®dUnd√ÆsizedGoodF√∏mes
));

1711 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RECEIVE_THRESHOLD_CONTROL
(
dmac‚ÅÑf
->
ReÀöiveTh¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
));

1712 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_SECOND_FRAME_OPERATE
(
dmac‚ÅÑf
->
Sec‚ÅÑdF√∏meO‚â•√∏√£
));

1713 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_ADDRESS_ALIGNED_BEATS
(
dmac‚ÅÑf
->
Add¬™ssAlig‚àödB√≥ts
));

1714 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_FIXED_BURST
(
dmac‚ÅÑf
->
FixedBur¬∞
));

1715 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_RXDMA_BURST_LENGTH
(
dmac‚ÅÑf
->
RxDMABur¬∞L√≠gth
));

1716 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_TXDMA_BURST_LENGTH
(
dmac‚ÅÑf
->
TxDMABur¬∞L√≠gth
));

1717 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DMA_DESC_SKIP_LENGTH
(
dmac‚ÅÑf
->
Des¬∏√πt‚ÄπSk√πL√≠gth
));

1718 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX
(
dmac‚ÅÑf
->
DMAArb√¥√∏ti‚ÅÑ
));

1722 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
;

1724 
tm¬•eg1
 &Ô£ø
ETH_DMAOMR_CLEAR_MASK
;

1726 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)(
dmac‚ÅÑf
->
Dr‚Ä∫TCPIPChecksumE¬∫‚ÄπF√∏me
 |

1727 
dmac‚ÅÑf
->
ReÀöiveSt‚ÄπeF‚Äπw¬®d
 |

1728 
dmac‚ÅÑf
->
FlushReÀöivedF√∏me
 |

1729 
dmac‚ÅÑf
->
T√∏nsm√¥St‚ÄπeF‚Äπw¬®d
 |

1730 
dmac‚ÅÑf
->
T√∏nsm√¥Th¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
 |

1731 
dmac‚ÅÑf
->
F‚Äπw¬®dE¬∫‚ÄπF√∏mes
 |

1732 
dmac‚ÅÑf
->
F‚Äπw¬®dUnd√ÆsizedGoodF√∏mes
 |

1733 
dmac‚ÅÑf
->
ReÀöiveTh¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
 |

1734 
dmac‚ÅÑf
->
Sec‚ÅÑdF√∏meO‚â•√∏√£
);

1737 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 = (
u√∂t32_t
)
tm¬•eg1
;

1741 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
;

1742 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1743 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 = 
tm¬•eg1
;

1746 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
 = (
u√∂t32_t
)(
dmac‚ÅÑf
->
Add¬™ssAlig‚àödB√≥ts
 |

1747 
dmac‚ÅÑf
->
FixedBur¬∞
 |

1748 
dmac‚ÅÑf
->
RxDMABur¬∞L√≠gth
 |

1749 
dmac‚ÅÑf
->
TxDMABur¬∞L√≠gth
 |

1750 (
dmac‚ÅÑf
->
Des¬∏√πt‚ÄπSk√πL√≠gth
 << 2U) |

1751 
dmac‚ÅÑf
->
DMAArb√¥√∏ti‚ÅÑ
 |

1752 
ETH_DMABMR_USP
);

1756 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
;

1757 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1758 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
 = 
tm¬•eg1
;

1761 
h√´h
->
S√®√£
 = 
HAL_ETH_STATE_READY
;

1764 
	`__HAL_UNLOCK
(
h√´h
);

1767  
HAL_OK
;

1768 
	}
}

1798 
HAL_ETH_S√®√£Ty‚â•Def
 
	$HAL_ETH_G√´S√®√£
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

1801  
h√´h
->
S√®√£
;

1802 
	}
}

1823 
	$ETH_MACDMAC‚ÅÑfig
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t32_t
 
√Ær
)

1825 
ETH_MACIn√¥Ty‚â•Def
 
mac√∂√¥
;

1826 
ETH_DMAIn√¥Ty‚â•Def
 
dma√∂√¥
;

1827 
u√∂t32_t
 
tm¬•eg1
 = 0U;

1829 i‚Ä°(
√Ær
 !Ô£ø
ETH_SUCCESS
)

1832 (
h√´h
->
In√¥
).
Du‚àÇexMode
 = 
ETH_MODE_FULLDUPLEX
;

1835 (
h√´h
->
In√¥
).
S‚â•ed
 = 
ETH_SPEED_100M
;

1839 
mac√∂√¥
.
W¬©chdog
 = 
ETH_WATCHDOG_ENABLE
;

1840 
mac√∂√¥
.
Jabb√Æ
 = 
ETH_JABBER_ENABLE
;

1841 
mac√∂√¥
.
I¬°√ÆF√∏meG‚â†
 = 
ETH_INTERFRAMEGAP_96BIT
;

1842 
mac√∂√¥
.
C¬®r√µrS√≠¬£
 = 
ETH_CARRIERSENCE_ENABLE
;

1843 
mac√∂√¥
.
ReÀöiveOwn
 = 
ETH_RECEIVEOWN_ENABLE
;

1844 
mac√∂√¥
.
Lo‚Ä∫backMode
 = 
ETH_LOOPBACKMODE_DISABLE
;

1845 i‚Ä°(
h√´h
->
In√¥
.
ChecksumMode
 =Ô£ø
ETH_CHECKSUM_BY_HARDWARE
)

1847 
mac√∂√¥
.
ChecksumOf√äÔ¨Çd
 = 
ETH_CHECKSUMOFFLAOD_ENABLE
;

1851 
mac√∂√¥
.
ChecksumOf√äÔ¨Çd
 = 
ETH_CHECKSUMOFFLAOD_DISABLE
;

1853 
mac√∂√¥
.
R√´ryT√∏nsmissi‚ÅÑ
 = 
ETH_RETRYTRANSMISSION_DISABLE
;

1854 
mac√∂√¥
.
Autom¬©icPadCRCS√•√π
 = 
ETH_AUTOMATICPADCRCSTRIP_DISABLE
;

1855 
mac√∂√¥
.
BackOffLim√¥
 = 
ETH_BACKOFFLIMIT_10
;

1856 
mac√∂√¥
.
De‚Äû¬∫√ÜCheck
 = 
ETH_DEFFERRALCHECK_DISABLE
;

1857 
mac√∂√¥
.
ReÀöiveA≈í
 = 
ETH_RECEIVEA≈í_DISABLE
;

1858 
mac√∂√¥
.
SourÀöAddrF√ª√£r
 = 
ETH_SOURCEADDRFILTER_DISABLE
;

1859 
mac√∂√¥
.
PassC‚ÅÑ√•Ô¨ÅF√∏mes
 = 
ETH_PASSCONTROLFRAMES_BLOCKALL
;

1860 
mac√∂√¥
.
BrÔ¨ÇdÀá¬∞F√∏mesReÀö¬±i‚ÅÑ
 = 
ETH_BROADCASTFRAMESRECEPTION_ENABLE
;

1861 
mac√∂√¥
.
De¬∞√∂¬©i‚ÅÑAddrF√ª√£r
 = 
ETH_DESTINATIONADDRFILTER_NORMAL
;

1862 
mac√∂√¥
.
PromiscuousMode
 = 
ETH_PROMISCUOUS_MODE_DISABLE
;

1863 
mac√∂√¥
.
Mu‚Ä¶iÀá¬∞F√∏mesF√ª√£r
 = 
ETH_MULTICASTFRAMESFILTER_PERFECT
;

1864 
mac√∂√¥
.
UniÀá¬∞F√∏mesF√ª√£r
 = 
ETH_UNICASTFRAMESFILTER_PERFECT
;

1865 
mac√∂√¥
.
HashTab√ÄHigh
 = 0x0U;

1866 
mac√∂√¥
.
HashTab√ÄLow
 = 0x0U;

1867 
mac√∂√¥
.
Pau¬£Time
 = 0x0U;

1868 
mac√∂√¥
.
Z√ÆoQu‚Ñ¢√®Pau¬£
 = 
ETH_ZEROQUANTAPAUSE_DISABLE
;

1869 
mac√∂√¥
.
Pau¬£LowTh¬™shÔ¨Åd
 = 
ETH_PAUSELOWTHRESHOLD_MINUS4
;

1870 
mac√∂√¥
.
UniÀá¬∞Pau¬£F√∏meD√´eÀò
 = 
ETH_UNICASTPAUSEFRAMEDETECT_DISABLE
;

1871 
mac√∂√¥
.
ReÀöiveFlowC‚ÅÑ√•Ô¨Å
 = 
ETH_RECEIVEFLOWCONTROL_DISABLE
;

1872 
mac√∂√¥
.
T√∏nsm√¥FlowC‚ÅÑ√•Ô¨Å
 = 
ETH_TRANSMITFLOWCONTROL_DISABLE
;

1873 
mac√∂√¥
.
VLANTagCom‚àëris‚ÅÑ
 = 
ETH_VLANTAGCOMPARISON_16BIT
;

1874 
mac√∂√¥
.
VLANTagId√≠tif√µr
 = 0x0U;

1878 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

1880 
tm¬•eg1
 &Ô£ø
ETH_MACCR_CLEAR_MASK
;

1894 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)(
mac√∂√¥
.
W¬©chdog
 |

1895 
mac√∂√¥
.
Jabb√Æ
 |

1896 
mac√∂√¥
.
I¬°√ÆF√∏meG‚â†
 |

1897 
mac√∂√¥
.
C¬®r√µrS√≠¬£
 |

1898 (
h√´h
->
In√¥
).
S‚â•ed
 |

1899 
mac√∂√¥
.
ReÀöiveOwn
 |

1900 
mac√∂√¥
.
Lo‚Ä∫backMode
 |

1901 (
h√´h
->
In√¥
).
Du‚àÇexMode
 |

1902 
mac√∂√¥
.
ChecksumOf√äÔ¨Çd
 |

1903 
mac√∂√¥
.
R√´ryT√∏nsmissi‚ÅÑ
 |

1904 
mac√∂√¥
.
Autom¬©icPadCRCS√•√π
 |

1905 
mac√∂√¥
.
BackOffLim√¥
 |

1906 
mac√∂√¥
.
De‚Äû¬∫√ÜCheck
);

1909 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = (
u√∂t32_t
)
tm¬•eg1
;

1913 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

1914 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1915 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

1927 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFFR
 = (
u√∂t32_t
)(
mac√∂√¥
.
ReÀöiveA≈í
 |

1928 
mac√∂√¥
.
SourÀöAddrF√ª√£r
 |

1929 
mac√∂√¥
.
PassC‚ÅÑ√•Ô¨ÅF√∏mes
 |

1930 
mac√∂√¥
.
BrÔ¨ÇdÀá¬∞F√∏mesReÀö¬±i‚ÅÑ
 |

1931 
mac√∂√¥
.
De¬∞√∂¬©i‚ÅÑAddrF√ª√£r
 |

1932 
mac√∂√¥
.
PromiscuousMode
 |

1933 
mac√∂√¥
.
Mu‚Ä¶iÀá¬∞F√∏mesF√ª√£r
 |

1934 
mac√∂√¥
.
UniÀá¬∞F√∏mesF√ª√£r
);

1938 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFFR
;

1939 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1940 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFFR
 = 
tm¬•eg1
;

1944 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACHTHR
 = (
u√∂t32_t
)
mac√∂√¥
.
HashTab√ÄHigh
;

1947 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACHTLR
 = (
u√∂t32_t
)
mac√∂√¥
.
HashTab√ÄLow
;

1951 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
;

1953 
tm¬•eg1
 &Ô£ø
ETH_MACFCR_CLEAR_MASK
;

1961 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)((
mac√∂√¥
.
Pau¬£Time
 << 16U) |

1962 
mac√∂√¥
.
Z√ÆoQu‚Ñ¢√®Pau¬£
 |

1963 
mac√∂√¥
.
Pau¬£LowTh¬™shÔ¨Åd
 |

1964 
mac√∂√¥
.
UniÀá¬∞Pau¬£F√∏meD√´eÀò
 |

1965 
mac√∂√¥
.
ReÀöiveFlowC‚ÅÑ√•Ô¨Å
 |

1966 
mac√∂√¥
.
T√∏nsm√¥FlowC‚ÅÑ√•Ô¨Å
);

1969 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
 = (
u√∂t32_t
)
tm¬•eg1
;

1973 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
;

1974 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1975 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACFCR
 = 
tm¬•eg1
;

1980 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACVLANTR
 = (
u√∂t32_t
)(
mac√∂√¥
.
VLANTagCom‚àëris‚ÅÑ
 |

1981 
mac√∂√¥
.
VLANTagId√≠tif√µr
);

1985 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACVLANTR
;

1986 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

1987 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACVLANTR
 = 
tm¬•eg1
;

1990 
dma√∂√¥
.
Dr‚Ä∫TCPIPChecksumE¬∫‚ÄπF√∏me
 = 
ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE
;

1991 
dma√∂√¥
.
ReÀöiveSt‚ÄπeF‚Äπw¬®d
 = 
ETH_RECEIVESTOREFORWARD_ENABLE
;

1992 
dma√∂√¥
.
FlushReÀöivedF√∏me
 = 
ETH_FLUSHRECEIVEDFRAME_ENABLE
;

1993 
dma√∂√¥
.
T√∏nsm√¥St‚ÄπeF‚Äπw¬®d
 = 
ETH_TRANSMITSTOREFORWARD_ENABLE
;

1994 
dma√∂√¥
.
T√∏nsm√¥Th¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
 = 
ETH_TRANSMITTHRESHOLDCONTROL_64BYTES
;

1995 
dma√∂√¥
.
F‚Äπw¬®dE¬∫‚ÄπF√∏mes
 = 
ETH_FORWARDERRORFRAMES_DISABLE
;

1996 
dma√∂√¥
.
F‚Äπw¬®dUnd√ÆsizedGoodF√∏mes
 = 
ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE
;

1997 
dma√∂√¥
.
ReÀöiveTh¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
 = 
ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES
;

1998 
dma√∂√¥
.
Sec‚ÅÑdF√∏meO‚â•√∏√£
 = 
ETH_SECONDFRAMEOPERARTE_ENABLE
;

1999 
dma√∂√¥
.
Add¬™ssAlig‚àödB√≥ts
 = 
ETH_ADDRESSALIGNEDBEATS_ENABLE
;

2000 
dma√∂√¥
.
FixedBur¬∞
 = 
ETH_FIXEDBURST_ENABLE
;

2001 
dma√∂√¥
.
RxDMABur¬∞L√≠gth
 = 
ETH_RXDMABURSTLENGTH_32BEAT
;

2002 
dma√∂√¥
.
TxDMABur¬∞L√≠gth
 = 
ETH_TXDMABURSTLENGTH_32BEAT
;

2003 
dma√∂√¥
.
Des¬∏√πt‚ÄπSk√πL√≠gth
 = 0x0U;

2004 
dma√∂√¥
.
DMAArb√¥√∏ti‚ÅÑ
 = 
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1
;

2007 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
;

2009 
tm¬•eg1
 &Ô£ø
ETH_DMAOMR_CLEAR_MASK
;

2020 
tm¬•eg1
 |Ô£ø(
u√∂t32_t
)(
dma√∂√¥
.
Dr‚Ä∫TCPIPChecksumE¬∫‚ÄπF√∏me
 |

2021 
dma√∂√¥
.
ReÀöiveSt‚ÄπeF‚Äπw¬®d
 |

2022 
dma√∂√¥
.
FlushReÀöivedF√∏me
 |

2023 
dma√∂√¥
.
T√∏nsm√¥St‚ÄπeF‚Äπw¬®d
 |

2024 
dma√∂√¥
.
T√∏nsm√¥Th¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
 |

2025 
dma√∂√¥
.
F‚Äπw¬®dE¬∫‚ÄπF√∏mes
 |

2026 
dma√∂√¥
.
F‚Äπw¬®dUnd√ÆsizedGoodF√∏mes
 |

2027 
dma√∂√¥
.
ReÀöiveTh¬™shÔ¨ÅdC‚ÅÑ√•Ô¨Å
 |

2028 
dma√∂√¥
.
Sec‚ÅÑdF√∏meO‚â•√∏√£
);

2031 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 = (
u√∂t32_t
)
tm¬•eg1
;

2035 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
;

2036 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

2037 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 = 
tm¬•eg1
;

2046 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
 = (
u√∂t32_t
)(
dma√∂√¥
.
Add¬™ssAlig‚àödB√≥ts
 |

2047 
dma√∂√¥
.
FixedBur¬∞
 |

2048 
dma√∂√¥
.
RxDMABur¬∞L√≠gth
 |

2049 
dma√∂√¥
.
TxDMABur¬∞L√≠gth
 |

2050 (
dma√∂√¥
.
Des¬∏√πt‚ÄπSk√πL√≠gth
 << 2U) |

2051 
dma√∂√¥
.
DMAArb√¥√∏ti‚ÅÑ
 |

2052 
ETH_DMABMR_USP
);

2056 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
;

2057 
	`HAL_D√±ay
(
ETH_REG_WRITE_DELAY
);

2058 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMABMR
 = 
tm¬•eg1
;

2060 i‚Ä°((
h√´h
->
In√¥
).
RxMode
 =Ô£ø
ETH_RXINTERRUPT_MODE
)

2063 
	`__HAL_ETH_DMA_ENABLE_IT
((
h√´h
), 
ETH_DMA_IT_NIS
 | 
ETH_DMA_IT_R
);

2067 
	`ETH_MACAdd¬™ssC‚ÅÑfig
(
h√´h
, 
ETH_MAC_ADDRESS0
, h√´h->
In√¥
.
MACAddr
);

2068 
	}
}

2083 
	$ETH_MACAdd¬™ssC‚ÅÑfig
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
, 
u√∂t32_t
 
MacAddr
, 
u√∂t8_t
 *
Addr
)

2085 
u√∂t32_t
 
tm¬•eg1
;

2088 
	`UNUSED
(
h√´h
);

2091 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ETH_MAC_ADDRESS0123
(
MacAddr
));

2094 
tm¬•eg1
 = ((
u√∂t32_t
)
Addr
[5U] << 8U) | (uint32_t)Addr[4U];

2096 (*(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)(
ETH_MAC_ADDR_HBASE
 + 
MacAddr
))√ãÔ£ø
tm¬•eg1
;

2098 
tm¬•eg1
 = ((
u√∂t32_t
)
Addr
[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];

2101 (*(
__IO
 
u√∂t32_t
 *)((u√∂t32_t)(
ETH_MAC_ADDR_LBASE
 + 
MacAddr
))√ãÔ£ø
tm¬•eg1
;

2102 
	}
}

2110 
	$ETH_MACT√∏nsmissi‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2112 
__IO
 
u√∂t32_t
 
tm¬•eg1
 = 0U;

2115 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 |Ô£ø
ETH_MACCR_TE
;

2119 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

2120 
	`ETH_D√±ay
(
ETH_REG_WRITE_DELAY
);

2121 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

2122 
	}
}

2130 
	$ETH_MACT√∏nsmissi‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2132 
__IO
 
u√∂t32_t
 
tm¬•eg1
 = 0U;

2135 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 &Ô£ø~
ETH_MACCR_TE
;

2139 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

2140 
	`ETH_D√±ay
(
ETH_REG_WRITE_DELAY
);

2141 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

2142 
	}
}

2150 
	$ETH_MACReÀö¬±i‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2152 
__IO
 
u√∂t32_t
 
tm¬•eg1
 = 0U;

2155 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 |Ô£ø
ETH_MACCR_RE
;

2159 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

2160 
	`ETH_D√±ay
(
ETH_REG_WRITE_DELAY
);

2161 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

2162 
	}
}

2170 
	$ETH_MACReÀö¬±i‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2172 
__IO
 
u√∂t32_t
 
tm¬•eg1
 = 0U;

2175 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 &Ô£ø~
ETH_MACCR_RE
;

2179 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
;

2180 
	`ETH_D√±ay
(
ETH_REG_WRITE_DELAY
);

2181 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
MACCR
 = 
tm¬•eg1
;

2182 
	}
}

2190 
	$ETH_DMAT√∏nsmissi‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2193 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 |Ô£ø
ETH_DMAOMR_ST
;

2194 
	}
}

2202 
	$ETH_DMAT√∏nsmissi‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2205 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 &Ô£ø~
ETH_DMAOMR_ST
;

2206 
	}
}

2214 
	$ETH_DMAReÀö¬±i‚ÅÑE¬´b√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2217 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 |Ô£ø
ETH_DMAOMR_SR
;

2218 
	}
}

2226 
	$ETH_DMAReÀö¬±i‚ÅÑDi√üb√Ä
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2229 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 &Ô£ø~
ETH_DMAOMR_SR
;

2230 
	}
}

2238 
	$ETH_FlushT√∏nsm√¥FIFO
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2240 
__IO
 
u√∂t32_t
 
tm¬•eg1
 = 0U;

2243 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 |Ô£ø
ETH_DMAOMR_FTF
;

2247 
tm¬•eg1
 = (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
;

2248 
	`ETH_D√±ay
(
ETH_REG_WRITE_DELAY
);

2249 (
h√´h
->
In¬∞‚Ñ¢Àö
)->
DMAOMR
 = 
tm¬•eg1
;

2250 
	}
}

2257 
	$ETH_D√±ay
(
u√∂t32_t
 
md√±ay
)

2259 
__IO
 
u√∂t32_t
 
D√±ay
 = 
md√±ay
 * (
Sy¬∞emC‚ÄπeClock
 / 8U / 1000U);

2262 
	`__NOP
();

2264 
D√±ay
 --);

2265 
	}
}

2267 #i‚Ä°(
USE_HAL_ETH_REGISTER_CALLBACKS
 == 1)

2268 
	$ETH_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
ETH_H‚Ñ¢d√ÄTy‚â•Def
 *
h√´h
)

2271 
h√´h
->
TxC‚àÇtC√Ülback
 = 
HAL_ETH_TxC‚àÇtC√Ülback
;

2272 
h√´h
->
RxC‚àÇtC√Ülback
 = 
HAL_ETH_RxC‚àÇtC√Ülback
;

2273 
h√´h
->
DMAE¬∫‚ÄπC√Ülback
 = 
HAL_ETH_E¬∫‚ÄπC√Ülback
;

2274 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_exti.c

87 
	~"¬∞m32f1xx_h√Ü.h
"

104 #ifde‚Ä°
HAL_EXTI_MODULE_ENABLED


143 
HAL_S√®tusTy‚â•Def
 
	$HAL_EXTI_S√´C‚ÅÑfigL√∂e
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
EXTI_C‚ÅÑfigTy‚â•Def
 *
pExtiC‚ÅÑfig
)

145 
u√∂t32_t
 
¬™gv√Ü
;

146 
u√∂t32_t
 
l√∂√Øos
;

147 
u√∂t32_t
 
maskl√∂e
;

150 i‚Ä°((
hexti
 =Ô£ø
NULL
√ã|| (
pExtiC‚ÅÑfig
 == NULL))

152  
HAL_ERROR
;

156 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
pExtiC‚ÅÑfig
->
L√∂e
));

157 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_MODE
(
pExtiC‚ÅÑfig
->
Mode
));

160 
hexti
->
L√∂e
 = 
pExtiC‚ÅÑfig
->Line;

163 
l√∂√Øos
 = (
pExtiC‚ÅÑfig
->
L√∂e
 & 
EXTI_PIN_MASK
);

164 
maskl√∂e
 = (1uL << 
l√∂√Øos
);

167 i‚Ä°((
pExtiC‚ÅÑfig
->
L√∂e
 & 
EXTI_CONFIG
) != 0x00u)

169 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_TRIGGER
(
pExtiC‚ÅÑfig
->
Trigg√Æ
));

173 i‚Ä°((
pExtiC‚ÅÑfig
->
Trigg√Æ
 & 
EXTI_TRIGGER_RISING
) != 0x00u)

175 
EXTI
->
RTSR
 |Ô£ø
maskl√∂e
;

179 
EXTI
->
RTSR
 &Ô£ø~
maskl√∂e
;

184 i‚Ä°((
pExtiC‚ÅÑfig
->
Trigg√Æ
 & 
EXTI_TRIGGER_FALLING
) != 0x00u)

186 
EXTI
->
FTSR
 |Ô£ø
maskl√∂e
;

190 
EXTI
->
FTSR
 &Ô£ø~
maskl√∂e
;

195 i‚Ä°((
pExtiC‚ÅÑfig
->
L√∂e
 & 
EXTI_GPIO
) == EXTI_GPIO)

197 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_GPIO_PORT
(
pExtiC‚ÅÑfig
->
GPIOS√±
));

198 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_GPIO_PIN
(
l√∂√Øos
));

200 
¬™gv√Ü
 = 
AFIO
->
EXTICR
[
l√∂√Øos
 >> 2u];

201 
¬™gv√Ü
 &Ô£ø~(
AFIO_EXTICR1_EXTI0
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
l√∂√Øos
 & 0x03u)));

202 
¬™gv√Ü
 |Ô£ø(
pExtiC‚ÅÑfig
->
GPIOS√±
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
l√∂√Øos
 & 0x03u)));

203 
AFIO
->
EXTICR
[
l√∂√Øos
 >> 2u] = 
¬™gv√Ü
;

209 i‚Ä°((
pExtiC‚ÅÑfig
->
Mode
 & 
EXTI_MODE_INTERRUPT
) != 0x00u)

211 
EXTI
->
IMR
 |Ô£ø
maskl√∂e
;

215 
EXTI
->
IMR
 &Ô£ø~
maskl√∂e
;

220 i‚Ä°((
pExtiC‚ÅÑfig
->
Mode
 & 
EXTI_MODE_EVENT
) != 0x00u)

222 
EXTI
->
EMR
 |Ô£ø
maskl√∂e
;

226 
EXTI
->
EMR
 &Ô£ø~
maskl√∂e
;

229  
HAL_OK
;

230 
	}
}

238 
HAL_S√®tusTy‚â•Def
 
	$HAL_EXTI_G√´C‚ÅÑfigL√∂e
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
EXTI_C‚ÅÑfigTy‚â•Def
 *
pExtiC‚ÅÑfig
)

240 
u√∂t32_t
 
¬™gv√Ü
;

241 
u√∂t32_t
 
l√∂√Øos
;

242 
u√∂t32_t
 
maskl√∂e
;

245 i‚Ä°((
hexti
 =Ô£ø
NULL
√ã|| (
pExtiC‚ÅÑfig
 == NULL))

247  
HAL_ERROR
;

251 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
hexti
->
L√∂e
));

254 
pExtiC‚ÅÑfig
->
L√∂e
 = 
hexti
->Line;

257 
l√∂√Øos
 = (
pExtiC‚ÅÑfig
->
L√∂e
 & 
EXTI_PIN_MASK
);

258 
maskl√∂e
 = (1uL << 
l√∂√Øos
);

263 i‚Ä°((
EXTI
->
IMR
 & 
maskl√∂e
) != 0x00u)

265 
pExtiC‚ÅÑfig
->
Mode
 = 
EXTI_MODE_INTERRUPT
;

269 
pExtiC‚ÅÑfig
->
Mode
 = 
EXTI_MODE_NONE
;

274 i‚Ä°((
EXTI
->
EMR
 & 
maskl√∂e
) != 0x00u)

276 
pExtiC‚ÅÑfig
->
Mode
 |Ô£ø
EXTI_MODE_EVENT
;

280 i‚Ä°((
pExtiC‚ÅÑfig
->
L√∂e
 & 
EXTI_CONFIG
) != 0x00u)

283 i‚Ä°((
EXTI
->
RTSR
 & 
maskl√∂e
) != 0x00u)

285 
pExtiC‚ÅÑfig
->
Trigg√Æ
 = 
EXTI_TRIGGER_RISING
;

289 
pExtiC‚ÅÑfig
->
Trigg√Æ
 = 
EXTI_TRIGGER_NONE
;

294 i‚Ä°((
EXTI
->
FTSR
 & 
maskl√∂e
) != 0x00u)

296 
pExtiC‚ÅÑfig
->
Trigg√Æ
 |Ô£ø
EXTI_TRIGGER_FALLING
;

300 i‚Ä°((
pExtiC‚ÅÑfig
->
L√∂e
 & 
EXTI_GPIO
) == EXTI_GPIO)

302 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_GPIO_PIN
(
l√∂√Øos
));

304 
¬™gv√Ü
 = 
AFIO
->
EXTICR
[
l√∂√Øos
 >> 2u];

305 
pExtiC‚ÅÑfig
->
GPIOS√±
 = ((
¬™gv√Ü
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (3uL - (
l√∂√Øos
 & 0x03u)))) >> 24);

309 
pExtiC‚ÅÑfig
->
GPIOS√±
 = 0x00u;

315 
pExtiC‚ÅÑfig
->
Trigg√Æ
 = 
EXTI_TRIGGER_NONE
;

316 
pExtiC‚ÅÑfig
->
GPIOS√±
 = 0x00u;

319  
HAL_OK
;

320 
	}
}

327 
HAL_S√®tusTy‚â•Def
 
	$HAL_EXTI_C√Ä¬®C‚ÅÑfigL√∂e
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
)

329 
u√∂t32_t
 
¬™gv√Ü
;

330 
u√∂t32_t
 
l√∂√Øos
;

331 
u√∂t32_t
 
maskl√∂e
;

334 i‚Ä°(
hexti
 =Ô£ø
NULL
)

336  
HAL_ERROR
;

340 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
hexti
->
L√∂e
));

343 
l√∂√Øos
 = (
hexti
->
L√∂e
 & 
EXTI_PIN_MASK
);

344 
maskl√∂e
 = (1uL << 
l√∂√Øos
);

347 
EXTI
->
IMR
 = (EXTI->IMR & ~
maskl√∂e
);

350 
EXTI
->
EMR
 = (EXTI->EMR & ~
maskl√∂e
);

353 i‚Ä°((
hexti
->
L√∂e
 & 
EXTI_CONFIG
) != 0x00u)

355 
EXTI
->
RTSR
 = (EXTI->RTSR & ~
maskl√∂e
);

356 
EXTI
->
FTSR
 = (EXTI->FTSR & ~
maskl√∂e
);

359 i‚Ä°((
hexti
->
L√∂e
 & 
EXTI_GPIO
) == EXTI_GPIO)

361 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_GPIO_PIN
(
l√∂√Øos
));

363 
¬™gv√Ü
 = 
AFIO
->
EXTICR
[
l√∂√Øos
 >> 2u];

364 
¬™gv√Ü
 &Ô£ø~(
AFIO_EXTICR1_EXTI0
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
l√∂√Øos
 & 0x03u)));

365 
AFIO
->
EXTICR
[
l√∂√Øos
 >> 2u] = 
¬™gv√Ü
;

369  
HAL_OK
;

370 
	}
}

380 
HAL_S√®tusTy‚â•Def
 
HAL_EXTI_Regi¬∞√ÆC√Ülback
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
EXTI_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, (*
pP√≠d√∂gCb‚Äö
)())

382 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

384 
C√ÜlbackID
)

386 
HAL_EXTI_COMMON_CB_ID
:

387 
hexti
->
P√≠d√∂gC√Ülback
 = 
pP√≠d√∂gCb‚Äö
;

391 
¬∞¬©us
 = 
HAL_ERROR
;

395  
¬∞¬©us
;

396 
	}
}

405 
HAL_S√®tusTy‚â•Def
 
	$HAL_EXTI_G√´H‚Ñ¢d√Ä
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
u√∂t32_t
 
ExtiL√∂e
)

408 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
ExtiL√∂e
));

411 i‚Ä°(
hexti
 =Ô£ø
NULL
)

413  
HAL_ERROR
;

418 
hexti
->
L√∂e
 = 
ExtiL√∂e
;

420  
HAL_OK
;

422 
	}
}

445 
	$HAL_EXTI_IRQH‚Ñ¢d√Är
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
)

447 
u√∂t32_t
 
¬™gv√Ü
;

448 
u√∂t32_t
 
maskl√∂e
;

451 
maskl√∂e
 = (1uL << (
hexti
->
L√∂e
 & 
EXTI_PIN_MASK
));

454 
¬™gv√Ü
 = (
EXTI
->
PR
 & 
maskl√∂e
);

455 i‚Ä°(
¬™gv√Ü
 != 0x00u)

458 
EXTI
->
PR
 = 
maskl√∂e
;

461 i‚Ä°(
hexti
->
P√≠d√∂gC√Ülback
 !Ô£ø
NULL
)

463 
hexti
->
	`P√≠d√∂gC√Ülback
();

466 
	}
}

477 
u√∂t32_t
 
	$HAL_EXTI_G√´P√≠d√∂g
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
u√∂t32_t
 
Edge
)

479 
u√∂t32_t
 
¬™gv√Ü
;

480 
u√∂t32_t
 
maskl√∂e
;

481 
u√∂t32_t
 
l√∂√Øos
;

484 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
hexti
->
L√∂e
));

485 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
L√∂e
));

486 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_PENDING_EDGE
(
Edge
));

489 
l√∂√Øos
 = (
hexti
->
L√∂e
 & 
EXTI_PIN_MASK
);

490 
maskl√∂e
 = (1uL << 
l√∂√Øos
);

493 
¬™gv√Ü
 = ((
EXTI
->
PR
 & 
maskl√∂e
√ã>> 
l√∂√Øos
);

494  
¬™gv√Ü
;

495 
	}
}

506 
	$HAL_EXTI_C√Ä¬®P√≠d√∂g
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
, 
u√∂t32_t
 
Edge
)

508 
u√∂t32_t
 
maskl√∂e
;

511 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
hexti
->
L√∂e
));

512 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
L√∂e
));

513 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_PENDING_EDGE
(
Edge
));

516 
maskl√∂e
 = (1uL << (
hexti
->
L√∂e
 & 
EXTI_PIN_MASK
));

519 
EXTI
->
PR
 = 
maskl√∂e
;

520 
	}
}

527 
	$HAL_EXTI_G√≠√Æ¬©eSWI
(
EXTI_H‚Ñ¢d√ÄTy‚â•Def
 *
hexti
)

529 
u√∂t32_t
 
maskl√∂e
;

532 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_LINE
(
hexti
->
L√∂e
));

533 
	`as¬£œÄ_‚àë√∏m
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
L√∂e
));

536 
maskl√∂e
 = (1uL << (
hexti
->
L√∂e
 & 
EXTI_PIN_MASK
));

539 
EXTI
->
SWIER
 = 
maskl√∂e
;

540 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c

85 
	~"¬∞m32f1xx_h√Ü.h
"

91 #ifde‚Ä°
HAL_FLASH_MODULE_ENABLED


121 
FLASH_ProÀössTy‚â•Def
 
	gpF≈ìsh
;

130 
FLASH_Prog√∏m_H√ÜfW‚Äπd
(
u√∂t32_t
 
Add¬™ss
, 
u√∂t16_t
 
D¬©a
);

131 
FLASH_S√´E¬∫‚ÄπCode
();

132 
FLASH_PageE√∏¬£
(
u√∂t32_t
 
PageAdd¬™ss
);

168 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASH_Prog√∏m
(
u√∂t32_t
 
Ty‚â•Prog√∏m
, u√∂t32_√†
Add¬™ss
, 
u√∂t64_t
 
D¬©a
)

170 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_ERROR
;

171 
u√∂t8_t
 
√∂dex
 = 0;

172 
u√∂t8_t
 
nb√¥√Æ¬©i‚ÅÑs
 = 0;

175 
	`__HAL_LOCK
(&
pF≈ìsh
);

178 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_TYPEPROGRAM
(
Ty‚â•Prog√∏m
));

179 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Add¬™ss
));

181 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

182 if(
Add¬™ss
 <Ô£ø
FLASH_BANK1_END
)

186 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
(
FLASH_TIMEOUT_VALUE
);

187 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

192 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
(
FLASH_TIMEOUT_VALUE
);

196 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

198 if(
Ty‚â•Prog√∏m
 =Ô£ø
FLASH_TYPEPROGRAM_HALFWORD
)

201 
nb√¥√Æ¬©i‚ÅÑs
 = 1U;

203 if(
Ty‚â•Prog√∏m
 =Ô£ø
FLASH_TYPEPROGRAM_WORD
)

206 
nb√¥√Æ¬©i‚ÅÑs
 = 2U;

211 
nb√¥√Æ¬©i‚ÅÑs
 = 4U;

214 
√∂dex
 = 0U; index < 
nb√¥√Æ¬©i‚ÅÑs
; index++)

216 
	`FLASH_Prog√∏m_H√ÜfW‚Äπd
((
Add¬™ss
 + (2U*
√∂dex
)), (
u√∂t16_t
)(
D¬©a
 >> (16U*index)));

218 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

219 if(
Add¬™ss
 <Ô£ø
FLASH_BANK1_END
)

223 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
(
FLASH_TIMEOUT_VALUE
);

226 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

227 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

232 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
(
FLASH_TIMEOUT_VALUE
);

235 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

239 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

247 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

249  
¬∞¬©us
;

250 
	}
}

267 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASH_Prog√∏m_IT
(
u√∂t32_t
 
Ty‚â•Prog√∏m
, u√∂t32_√†
Add¬™ss
, 
u√∂t64_t
 
D¬©a
)

269 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

272 
	`__HAL_LOCK
(&
pF≈ìsh
);

275 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_TYPEPROGRAM
(
Ty‚â•Prog√∏m
));

276 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Add¬™ss
));

278 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

280 i‚Ä°(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 !Ô£ø
FLASH_PROC_NONE
)

282  
HAL_ERROR
;

285 if(
Add¬™ss
 <Ô£ø
FLASH_BANK1_END
)

288 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
);

293 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

297 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

300 
pF≈ìsh
.
Add¬™ss
 = Address;

301 
pF≈ìsh
.
D¬©a
 = Data;

303 if(
Ty‚â•Prog√∏m
 =Ô£ø
FLASH_TYPEPROGRAM_HALFWORD
)

305 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_PROGRAMHALFWORD
;

307 
pF≈ìsh
.
D¬©aRema√∂√∂g
 = 1U;

309 if(
Ty‚â•Prog√∏m
 =Ô£ø
FLASH_TYPEPROGRAM_WORD
)

311 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_PROGRAMWORD
;

313 
pF≈ìsh
.
D¬©aRema√∂√∂g
 = 2U;

317 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_PROGRAMDOUBLEWORD
;

319 
pF≈ìsh
.
D¬©aRema√∂√∂g
 = 4U;

323 
	`FLASH_Prog√∏m_H√ÜfW‚Äπd
(
Add¬™ss
, (
u√∂t16_t
)
D¬©a
);

325  
¬∞¬©us
;

326 
	}
}

332 
	$HAL_FLASH_IRQH‚Ñ¢d√Är
()

334 
u√∂t32_t
 
add¬™s¬∞mp
 = 0U;

337 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

338 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK1
√ã|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK1
) || \

339 (
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
√ã|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
)))

341 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
√ã||__HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR
))

345 
add¬™s¬∞mp
 = 
pF≈ìsh
.
Add¬™ss
;

347 
pF≈ìsh
.
Add¬™ss
 = 0xFFFFFFFFU;

350 
	`FLASH_S√´E¬∫‚ÄπCode
();

353 
	`HAL_FLASH_O‚â•√∏ti‚ÅÑE¬∫‚ÄπC√Ülback
(
add¬™s¬∞mp
);

356 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

360 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

361 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK1
))

364 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK1
);

366 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

369 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

373 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 !Ô£ø
FLASH_PROC_NONE
)

375 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_PAGEERASE
)

378 
pF≈ìsh
.
D¬©aRema√∂√∂g
--;

381 if(
pF≈ìsh
.
D¬©aRema√∂√∂g
 != 0U)

383 
add¬™s¬∞mp
 = 
pF≈ìsh
.
Add¬™ss
;

385 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
add¬™s¬∞mp
);

388 
add¬™s¬∞mp
 = 
pF≈ìsh
.
Add¬™ss
 + 
FLASH_PAGE_SIZE
;

389 
pF≈ìsh
.
Add¬™ss
 = 
add¬™s¬∞mp
;

392 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

394 
	`FLASH_PageE√∏¬£
(
add¬™s¬∞mp
);

400 
pF≈ìsh
.
Add¬™ss
 = 
add¬™s¬∞mp
 = 0xFFFFFFFFU;

401 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

403 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
add¬™s¬∞mp
);

406 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_MASSERASE
)

409 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

411 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

413 i‚Ä°(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR2
, 
FLASH_CR2_MER
))

418 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(0U);

421 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

423 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

429 
pF≈ìsh
.
D¬©aRema√∂√∂g
--;

432 if(
pF≈ìsh
.
D¬©aRema√∂√∂g
 != 0U)

435 
pF≈ìsh
.
Add¬™ss
 += 2U;

436 
add¬™s¬∞mp
 = 
pF≈ìsh
.
Add¬™ss
;

439 
pF≈ìsh
.
D¬©a
 = (pFlash.Data >> 16U);

442 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

445 
	`FLASH_Prog√∏m_H√ÜfW‚Äπd
(
add¬™s¬∞mp
, (
u√∂t16_t
)
pF≈ìsh
.
D¬©a
);

451 i‚Ä°(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_PROGRAMHALFWORD
)

453 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
);

455 i‚Ä°(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_PROGRAMWORD
)

457 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
 - 2U);

461 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
 - 6U);

465 
pF≈ìsh
.
Add¬™ss
 = 0xFFFFFFFFU;

466 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

472 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

474 if(
	`__HAL_FLASH_GET_FLAG
‚Äì
FLASH_FLAG_EOP_BANK2
))

477 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

480 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 !Ô£ø
FLASH_PROC_NONE
)

482 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_PAGEERASE
)

485 
pF≈ìsh
.
D¬©aRema√∂√∂g
--;

488 if(
pF≈ìsh
.
D¬©aRema√∂√∂g
 != 0U)

491 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
);

494 
pF≈ìsh
.
Add¬™ss
 +Ô£ø
FLASH_PAGE_SIZE
;

495 
add¬™s¬∞mp
 = 
pF≈ìsh
.
Add¬™ss
;

498 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

500 
	`FLASH_PageE√∏¬£
(
add¬™s¬∞mp
);

507 
pF≈ìsh
.
Add¬™ss
 = 0xFFFFFFFFU;

508 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

511 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
);

514 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_MASSERASE
)

517 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

519 i‚Ä°(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_MER
))

523 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(0U);

525 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

531 
pF≈ìsh
.
D¬©aRema√∂√∂g
--;

534 if(
pF≈ìsh
.
D¬©aRema√∂√∂g
 != 0U)

537 
pF≈ìsh
.
Add¬™ss
 += 2U;

538 
add¬™s¬∞mp
 = 
pF≈ìsh
.
Add¬™ss
;

541 
pF≈ìsh
.
D¬©a
 = (pFlash.Data >> 16U);

544 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

547 
	`FLASH_Prog√∏m_H√ÜfW‚Äπd
(
add¬™s¬∞mp
, (
u√∂t16_t
)
pF≈ìsh
.
D¬©a
);

553 i‚Ä°(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_PROGRAMHALFWORD
)

555 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
);

557 i‚Ä°(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_PROGRAMWORD
)

559 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
-2U);

563 
	`HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
pF≈ìsh
.
Add¬™ss
-6U);

567 
pF≈ìsh
.
Add¬™ss
 = 0xFFFFFFFFU;

568 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_NONE
;

575 if(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 =Ô£ø
FLASH_PROC_NONE
)

577 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

579 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

580 
	`CLEAR_BIT
(
FLASH
->
CR2
, (
FLASH_CR2_PG
 | 
FLASH_CR2_PER
 | 
FLASH_CR2_MER
));

583 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
 | 
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

586 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

589 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

593 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

595 
	}
}

606 
__w√≥k
 
	$HAL_FLASH_EndOfO‚â•√∏ti‚ÅÑC√Ülback
(
u√∂t32_t
 
R√´u‚à´V√Üue
)

609 
	`UNUSED
(
R√´u‚à´V√Üue
);

614 
	}
}

624 
__w√≥k
 
	$HAL_FLASH_O‚â•√∏ti‚ÅÑE¬∫‚ÄπC√Ülback
(
u√∂t32_t
 
R√´u‚à´V√Üue
)

627 
	`UNUSED
(
R√´u‚à´V√Üue
);

632 
	}
}

657 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASH_U‚àÜock
()

659 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

661 if(
	`READ_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
√ã!Ô£ø
RESET
)

664 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY1
);

665 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY2
);

668 if(
	`READ_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
√ã!Ô£ø
RESET
)

670 
¬∞¬©us
 = 
HAL_ERROR
;

673 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

674 if(
	`READ_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
√ã!Ô£ø
RESET
)

677 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY1
);

678 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY2
);

681 if(
	`READ_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
√ã!Ô£ø
RESET
)

683 
¬∞¬©us
 = 
HAL_ERROR
;

688  
¬∞¬©us
;

689 
	}
}

695 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASH_Lock
()

698 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
);

700 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

702 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
);

705  
HAL_OK
;

706 
	}
}

712 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASH_OB_U‚àÜock
()

714 i‚Ä°(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
))

717 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY1
);

718 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY2
);

722  
HAL_ERROR
;

725  
HAL_OK
;

726 
	}
}

732 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASH_OB_Lock
()

735 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
);

737  
HAL_OK
;

738 
	}
}

745 
	$HAL_FLASH_OB_Launch
()

748 
	`HAL_NVIC_Sy¬∞emRe¬£t
();

749 
	}
}

774 
u√∂t32_t
 
	$HAL_FLASH_G√´E¬∫‚Äπ
()

776  
pF≈ìsh
.
E¬∫‚ÄπCode
;

777 
	}
}

797 
	$FLASH_Prog√∏m_H√ÜfW‚Äπd
(
u√∂t32_t
 
Add¬™ss
, 
u√∂t16_t
 
D¬©a
)

800 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

802 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

803 if(
Add¬™ss
 <Ô£ø
FLASH_BANK1_END
)

807 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

808 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

813 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

818 *(
__IO
 
u√∂t16_t
*)
Add¬™ss
 = 
D¬©a
;

819 
	}
}

826 
HAL_S√®tusTy‚â•Def
 
	$FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
(
u√∂t32_t
 
Timeout
)

832 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

834 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
))

836 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

838 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
()-
tick¬∞¬®t
) > Timeout))

840  
HAL_TIMEOUT
;

846 i‚Ä°(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

849 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

852 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

853 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

854 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

857 
	`FLASH_S√´E¬∫‚ÄπCode
();

858  
HAL_ERROR
;

862  
HAL_OK
;

863 
	}
}

865 #i‚Ä°
def√∂ed
(
FLASH_BANK2_END
)

871 
HAL_S√®tusTy‚â•Def
 
	$FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
(
u√∂t32_t
 
Timeout
)

877 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

879 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY_BANK2
))

881 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

883 if((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
()-
tick¬∞¬®t
) > Timeout))

885  
HAL_TIMEOUT
;

891 i‚Ä°(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK2
))

894 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

897 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
√ã|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

900 
	`FLASH_S√´E¬∫‚ÄπCode
();

901  
HAL_ERROR
;

905  
HAL_OK
;

907 
	}
}

914 
	$FLASH_S√´E¬∫‚ÄπCode
()

916 
u√∂t32_t
 
√äags
 = 0U;

918 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

919 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
√ã|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_WRPERR_BANK2
))

921 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
))

924 
pF≈ìsh
.
E¬∫‚ÄπCode
 |Ô£ø
HAL_FLASH_ERROR_WRP
;

925 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

926 
√äags
 |Ô£ø
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_WRPERR_BANK2
;

928 
√äags
 |Ô£ø
FLASH_FLAG_WRPERR
;

931 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

932 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
√ã|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

934 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

937 
pF≈ìsh
.
E¬∫‚ÄπCode
 |Ô£ø
HAL_FLASH_ERROR_PROG
;

938 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

939 
√äags
 |Ô£ø
FLASH_FLAG_PGERR
 | 
FLASH_FLAG_PGERR_BANK2
;

941 
√äags
 |Ô£ø
FLASH_FLAG_PGERR
;

944 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
))

946 
pF≈ìsh
.
E¬∫‚ÄπCode
 |Ô£ø
HAL_FLASH_ERROR_OPTV
;

947 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_OPTVERR
);

951 
	`__HAL_FLASH_CLEAR_FLAG
(
√äags
);

952 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c

43 
	~"¬∞m32f1xx_h√Ü.h
"

48 #ifde‚Ä°
HAL_FLASH_MODULE_ENABLED


57 
FLASH_ProÀössTy‚â•Def
 
pF≈ìsh
;

76 
	#FLASH_POSITION_IWDGSW_BIT
 
FLASH_OBR_IWDG_SW_Pos


	)

77 
	#FLASH_POSITION_OB_USERDATA0_BIT
 
FLASH_OBR_DATA0_Pos


	)

78 
	#FLASH_POSITION_OB_USERDATA1_BIT
 
FLASH_OBR_DATA1_Pos


	)

97 
FLASH_MassE√∏¬£
(
u√∂t32_t
 
B‚Ñ¢ks
);

98 
FLASH_PageE√∏¬£
(
u√∂t32_t
 
PageAdd¬™ss
);

101 
HAL_S√®tusTy‚â•Def
 
FLASH_OB_E¬´b√ÄWRP
(
u√∂t32_t
 
Wr√¥ePr≈∏eÀòPage
);

102 
HAL_S√®tusTy‚â•Def
 
FLASH_OB_Di√üb√ÄWRP
(
u√∂t32_t
 
Wr√¥ePr≈∏eÀòPage
);

103 
HAL_S√®tusTy‚â•Def
 
FLASH_OB_RDP_Lev√±C‚ÅÑfig
(
u√∂t8_t
 
R√≥dPr≈∏eÀòLev√±
);

104 
HAL_S√®tusTy‚â•Def
 
FLASH_OB_U¬£rC‚ÅÑfig
(
u√∂t8_t
 
U¬£rC‚ÅÑfig
);

105 
HAL_S√®tusTy‚â•Def
 
FLASH_OB_Prog√∏mD¬©a
(
u√∂t32_t
 
Add¬™ss
, 
u√∂t8_t
 
D¬©a
);

106 
u√∂t32_t
 
FLASH_OB_G√´WRP
();

107 
u√∂t32_t
 
FLASH_OB_G√´RDP
();

108 
u√∂t8_t
 
FLASH_OB_G√´U¬£r
();

159 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASHEx_E√∏¬£
(
FLASH_E√∏¬£In√¥Ty‚â•Def
 *
pE√∏¬£In√¥
, 
u√∂t32_t
 *
PageE¬∫‚Äπ
)

161 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_ERROR
;

162 
u√∂t32_t
 
add¬™ss
 = 0U;

165 
	`__HAL_LOCK
(&
pF≈ìsh
);

168 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_TYPEERASE
(
pE√∏¬£In√¥
->
Ty‚â•E√∏¬£
));

170 i‚Ä°(
pE√∏¬£In√¥
->
Ty‚â•E√∏¬£
 =Ô£ø
FLASH_TYPEERASE_MASSERASE
)

172 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

173 i‚Ä°(
pE√∏¬£In√¥
->
B‚Ñ¢ks
 =Ô£ø
FLASH_BANK_BOTH
)

177 i‚Ä°((
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
) && \

178 (
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
))

181 
	`FLASH_MassE√∏¬£
(
FLASH_BANK_BOTH
);

184 i‚Ä°((
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
) && \

185 (
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
))

187 
¬∞¬©us
 = 
HAL_OK
;

191 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

192 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

195 i‚Ä°(
pE√∏¬£In√¥
->
B‚Ñ¢ks
 =Ô£ø
FLASH_BANK_2
)

199 i‚Ä°(
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
)

202 
	`FLASH_MassE√∏¬£
(
FLASH_BANK_2
);

205 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

208 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

216 i‚Ä°(
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
)

219 
	`FLASH_MassE√∏¬£
(
FLASH_BANK_1
);

222 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

225 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

233 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pE√∏¬£In√¥
->
PageAdd¬™ss
));

234 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_NB_PAGES
(
pE√∏¬£In√¥
->
PageAdd¬™ss
,√ñE√∏¬£In√¥->
NbPages
));

236 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

238 if(
pE√∏¬£In√¥
->
PageAdd¬™ss
 > 
FLASH_BANK1_END
)

241 i‚Ä°(
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
)

244 *
PageE¬∫‚Äπ
 = 0xFFFFFFFFU;

247 
add¬™ss
 = 
pE√∏¬£In√¥
->
PageAdd¬™ss
;

248 
add¬™ss
 < (
pE√∏¬£In√¥
->
PageAdd¬™ss
 + (pE√∏¬£In√¥->
NbPages
)*
FLASH_PAGE_SIZE
);

249 
add¬™ss
 +Ô£ø
FLASH_PAGE_SIZE
)

251 
	`FLASH_PageE√∏¬£
(
add¬™ss
);

254 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑB‚Ñ¢k2
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

257 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

259 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

262 *
PageE¬∫‚Äπ
 = 
add¬™ss
;

273 i‚Ä°(
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
√ã=Ô£ø
HAL_OK
)

276 *
PageE¬∫‚Äπ
 = 0xFFFFFFFFU;

279 
add¬™ss
 = 
pE√∏¬£In√¥
->
PageAdd¬™ss
;

280 
add¬™ss
 < ((
pE√∏¬£In√¥
->
NbPages
 * 
FLASH_PAGE_SIZE
√ã+√ñE√∏¬£In√¥->
PageAdd¬™ss
);

281 
add¬™ss
 +Ô£ø
FLASH_PAGE_SIZE
)

283 
	`FLASH_PageE√∏¬£
(
add¬™ss
);

286 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

289 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

291 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

294 *
PageE¬∫‚Äπ
 = 
add¬™ss
;

303 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

305  
¬∞¬©us
;

306 
	}
}

319 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASHEx_E√∏¬£_IT
(
FLASH_E√∏¬£In√¥Ty‚â•Def
 *
pE√∏¬£In√¥
)

321 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

324 
	`__HAL_LOCK
(&
pF≈ìsh
);

327 i‚Ä°(
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 !Ô£ø
FLASH_PROC_NONE
)

329  
HAL_ERROR
;

333 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_TYPEERASE
(
pE√∏¬£In√¥
->
Ty‚â•E√∏¬£
));

336 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

338 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

340 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

343 i‚Ä°(
pE√∏¬£In√¥
->
Ty‚â•E√∏¬£
 =Ô£ø
FLASH_TYPEERASE_MASSERASE
)

346 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_MASSERASE
;

347 
	`FLASH_MassE√∏¬£
(
pE√∏¬£In√¥
->
B‚Ñ¢ks
);

354 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pE√∏¬£In√¥
->
PageAdd¬™ss
));

355 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_NB_PAGES
(
pE√∏¬£In√¥
->
PageAdd¬™ss
,√ñE√∏¬£In√¥->
NbPages
));

357 
pF≈ìsh
.
ProÀödu¬™OnGo√∂g
 = 
FLASH_PROC_PAGEERASE
;

358 
pF≈ìsh
.
D¬©aRema√∂√∂g
 = 
pE√∏¬£In√¥
->
NbPages
;

359 
pF≈ìsh
.
Add¬™ss
 = 
pE√∏¬£In√¥
->
PageAdd¬™ss
;

362 
	`FLASH_PageE√∏¬£
(
pE√∏¬£In√¥
->
PageAdd¬™ss
);

365  
¬∞¬©us
;

366 
	}
}

397 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASHEx_OBE√∏¬£
()

399 
u√∂t8_t
 
rd¬±mp
 = 
OB_RDP_LEVEL_0
;

400 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_ERROR
;

403 
rd¬±mp
 = 
	`FLASH_OB_G√´RDP
();

406 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

408 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

411 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

414 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

415 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

418 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

421 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

423 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

426 
¬∞¬©us
 = 
	`FLASH_OB_RDP_Lev√±C‚ÅÑfig
(
rd¬±mp
);

431  
¬∞¬©us
;

432 
	}
}

446 
HAL_S√®tusTy‚â•Def
 
	$HAL_FLASHEx_OBProg√∏m
(
FLASH_OBProg√∏mIn√¥Ty‚â•Def
 *
pOBIn√¥
)

448 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_ERROR
;

451 
	`__HAL_LOCK
(&
pF≈ìsh
);

454 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OPTIONBYTE
(
pOBIn√¥
->
O¬±i‚ÅÑTy‚â•
));

457 if((
pOBIn√¥
->
O¬±i‚ÅÑTy‚â•
 & 
OPTIONBYTE_WRP
) == OPTIONBYTE_WRP)

459 
	`as¬£œÄ_‚àë√∏m
(
	`IS_WRPSTATE
(
pOBIn√¥
->
WRPS√®√£
));

460 i‚Ä°(
pOBIn√¥
->
WRPS√®√£
 =Ô£ø
OB_WRPSTATE_ENABLE
)

463 
¬∞¬©us
 = 
	`FLASH_OB_E¬´b√ÄWRP
(
pOBIn√¥
->
WRPPage
);

468 
¬∞¬©us
 = 
	`FLASH_OB_Di√üb√ÄWRP
(
pOBIn√¥
->
WRPPage
);

470 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

473 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

474  
¬∞¬©us
;

479 if((
pOBIn√¥
->
O¬±i‚ÅÑTy‚â•
 & 
OPTIONBYTE_RDP
) == OPTIONBYTE_RDP)

481 
¬∞¬©us
 = 
	`FLASH_OB_RDP_Lev√±C‚ÅÑfig
(
pOBIn√¥
->
RDPLev√±
);

482 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

485 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

486  
¬∞¬©us
;

491 if((
pOBIn√¥
->
O¬±i‚ÅÑTy‚â•
 & 
OPTIONBYTE_USER
) == OPTIONBYTE_USER)

493 
¬∞¬©us
 = 
	`FLASH_OB_U¬£rC‚ÅÑfig
(
pOBIn√¥
->
USERC‚ÅÑfig
);

494 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

497 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

498  
¬∞¬©us
;

503 if((
pOBIn√¥
->
O¬±i‚ÅÑTy‚â•
 & 
OPTIONBYTE_DATA
) == OPTIONBYTE_DATA)

505 
¬∞¬©us
 = 
	`FLASH_OB_Prog√∏mD¬©a
(
pOBIn√¥
->
DATAAdd¬™ss
,√ñOBIn√¥->
DATAD¬©a
);

506 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_OK
)

509 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

510  
¬∞¬©us
;

515 
	`__HAL_UNLOCK
(&
pF≈ìsh
);

517  
¬∞¬©us
;

518 
	}
}

527 
	$HAL_FLASHEx_OBG√´C‚ÅÑfig
(
FLASH_OBProg√∏mIn√¥Ty‚â•Def
 *
pOBIn√¥
)

529 
pOBIn√¥
->
O¬±i‚ÅÑTy‚â•
 = 
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
;

532 
pOBIn√¥
->
WRPPage
 = 
	`FLASH_OB_G√´WRP
();

535 
pOBIn√¥
->
RDPLev√±
 = 
	`FLASH_OB_G√´RDP
();

538 
pOBIn√¥
->
USERC‚ÅÑfig
 = 
	`FLASH_OB_G√´U¬£r
();

539 
	}
}

549 
u√∂t32_t
 
	$HAL_FLASHEx_OBG√´U¬£rD¬©a
(
u√∂t32_t
 
DATAAd¬™ss
)

551 
u√∂t32_t
 
v√Üue
 = 0;

553 i‚Ä°(
DATAAd¬™ss
 =Ô£ø
OB_DATA_ADDRESS_DATA0
)

556 
v√Üue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA0
√ã>> 
FLASH_POSITION_OB_USERDATA0_BIT
;

561 
v√Üue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA1
√ã>> 
FLASH_POSITION_OB_USERDATA1_BIT
;

564  
v√Üue
;

565 
	}
}

595 
	$FLASH_MassE√∏¬£
(
u√∂t32_t
 
B‚Ñ¢ks
)

598 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_BANK
(
B‚Ñ¢ks
));

601 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

603 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

604 if(
B‚Ñ¢ks
 =Ô£ø
FLASH_BANK_BOTH
)

607 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

608 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

609 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

610 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

612 if(
B‚Ñ¢ks
 =Ô£ø
FLASH_BANK_2
)

615 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

616 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

621 #i‚Ä°!
	`def√∂ed
(
FLASH_BANK2_END
)

623 
	`UNUSED
(
B‚Ñ¢ks
);

626 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

627 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

628 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

631 
	}
}

644 
HAL_S√®tusTy‚â•Def
 
	$FLASH_OB_E¬´b√ÄWRP
(
u√∂t32_t
 
Wr√¥ePr≈∏eÀòPage
)

646 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

647 
u√∂t16_t
 
WRP0_D¬©a
 = 0xFFFF;

648 #i‚Ä°
	`def√∂ed
(
FLASH_WRP1_WRP1
)

649 
u√∂t16_t
 
WRP1_D¬©a
 = 0xFFFF;

651 #i‚Ä°
	`def√∂ed
(
FLASH_WRP2_WRP2
)

652 
u√∂t16_t
 
WRP2_D¬©a
 = 0xFFFF;

654 #i‚Ä°
	`def√∂ed
(
FLASH_WRP3_WRP3
)

655 
u√∂t16_t
 
WRP3_D¬©a
 = 0xFFFF;

659 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_WRP
(
Wr√¥ePr≈∏eÀòPage
));

662 
Wr√¥ePr≈∏eÀòPage
 = (
u√∂t32_t
)(~((~
	`FLASH_OB_G√´WRP
()) | WriteProtectPage));

664 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES0TO15MASK
)

665 
WRP0_D¬©a
 = (
u√∂t16_t
)(
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES0TO15MASK
);

666 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES0TO31MASK
)

667 
WRP0_D¬©a
 = (
u√∂t16_t
)(
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES0TO31MASK
);

670 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES16TO31MASK
)

671 
WRP1_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES16TO31MASK
) >> 8U);

672 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES32TO63MASK
)

673 
WRP1_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES32TO63MASK
) >> 8U);

676 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES64TO95MASK
)

677 
WRP2_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES64TO95MASK
) >> 16U);

679 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES32TO47MASK
)

680 
WRP2_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES32TO47MASK
) >> 16U);

683 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES96TO127MASK
)

684 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES96TO127MASK
) >> 24U);

685 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES48TO255MASK
)

686 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES48TO255MASK
) >> 24U);

687 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES48TO511MASK
)

688 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES48TO511MASK
) >> 24U);

689 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES48TO127MASK
)

690 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES48TO127MASK
) >> 24U);

694 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

696 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

699 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

702 
¬∞¬©us
 = 
	`HAL_FLASHEx_OBE√∏¬£
();

703 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

706 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

708 #i‚Ä°
	`def√∂ed
(
FLASH_WRP0_WRP0
)

709 if(
WRP0_D¬©a
 != 0xFFU)

711 
OB
->
WRP0
 &Ô£ø
WRP0_D¬©a
;

714 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

718 #i‚Ä°
	`def√∂ed
(
FLASH_WRP1_WRP1
)

719 if((
¬∞¬©us
 =Ô£ø
HAL_OK
√ã&& (
WRP1_D¬©a
 != 0xFFU))

721 
OB
->
WRP1
 &Ô£ø
WRP1_D¬©a
;

724 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

728 #i‚Ä°
	`def√∂ed
(
FLASH_WRP2_WRP2
)

729 if((
¬∞¬©us
 =Ô£ø
HAL_OK
√ã&& (
WRP2_D¬©a
 != 0xFFU))

731 
OB
->
WRP2
 &Ô£ø
WRP2_D¬©a
;

734 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

738 #i‚Ä°
	`def√∂ed
(
FLASH_WRP3_WRP3
)

739 if((
¬∞¬©us
 =Ô£ø
HAL_OK
√ã&& (
WRP3_D¬©a
 != 0xFFU))

741 
OB
->
WRP3
 &Ô£ø
WRP3_D¬©a
;

744 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

749 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

753  
¬∞¬©us
;

754 
	}
}

767 
HAL_S√®tusTy‚â•Def
 
	$FLASH_OB_Di√üb√ÄWRP
(
u√∂t32_t
 
Wr√¥ePr≈∏eÀòPage
)

769 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

770 
u√∂t16_t
 
WRP0_D¬©a
 = 0xFFFF;

771 #i‚Ä°
	`def√∂ed
(
FLASH_WRP1_WRP1
)

772 
u√∂t16_t
 
WRP1_D¬©a
 = 0xFFFF;

774 #i‚Ä°
	`def√∂ed
(
FLASH_WRP2_WRP2
)

775 
u√∂t16_t
 
WRP2_D¬©a
 = 0xFFFF;

777 #i‚Ä°
	`def√∂ed
(
FLASH_WRP3_WRP3
)

778 
u√∂t16_t
 
WRP3_D¬©a
 = 0xFFFF;

782 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_WRP
(
Wr√¥ePr≈∏eÀòPage
));

785 
Wr√¥ePr≈∏eÀòPage
 = (
	`FLASH_OB_G√´WRP
() | WriteProtectPage);

787 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES0TO15MASK
)

788 
WRP0_D¬©a
 = (
u√∂t16_t
)(
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES0TO15MASK
);

789 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES0TO31MASK
)

790 
WRP0_D¬©a
 = (
u√∂t16_t
)(
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES0TO31MASK
);

793 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES16TO31MASK
)

794 
WRP1_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES16TO31MASK
) >> 8U);

795 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES32TO63MASK
)

796 
WRP1_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES32TO63MASK
) >> 8U);

799 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES64TO95MASK
)

800 
WRP2_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES64TO95MASK
) >> 16U);

802 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES32TO47MASK
)

803 
WRP2_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES32TO47MASK
) >> 16U);

806 #i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES96TO127MASK
)

807 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES96TO127MASK
) >> 24U);

808 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES48TO255MASK
)

809 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES48TO255MASK
) >> 24U);

810 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES48TO511MASK
)

811 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES48TO511MASK
) >> 24U);

812 #√±i‚Ä°
	`def√∂ed
(
OB_WRP_PAGES48TO127MASK
)

813 
WRP3_D¬©a
 = (
u√∂t16_t
)((
Wr√¥ePr≈∏eÀòPage
 & 
OB_WRP_PAGES48TO127MASK
) >> 24U);

818 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

820 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

823 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

826 
¬∞¬©us
 = 
	`HAL_FLASHEx_OBE√∏¬£
();

827 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

829 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

831 #i‚Ä°
	`def√∂ed
(
FLASH_WRP0_WRP0
)

832 if(
WRP0_D¬©a
 != 0xFFU)

834 
OB
->
WRP0
 |Ô£ø
WRP0_D¬©a
;

837 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

841 #i‚Ä°
	`def√∂ed
(
FLASH_WRP1_WRP1
)

842 if((
¬∞¬©us
 =Ô£ø
HAL_OK
√ã&& (
WRP1_D¬©a
 != 0xFFU))

844 
OB
->
WRP1
 |Ô£ø
WRP1_D¬©a
;

847 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

851 #i‚Ä°
	`def√∂ed
(
FLASH_WRP2_WRP2
)

852 if((
¬∞¬©us
 =Ô£ø
HAL_OK
√ã&& (
WRP2_D¬©a
 != 0xFFU))

854 
OB
->
WRP2
 |Ô£ø
WRP2_D¬©a
;

857 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

861 #i‚Ä°
	`def√∂ed
(
FLASH_WRP3_WRP3
)

862 if((
¬∞¬©us
 =Ô£ø
HAL_OK
√ã&& (
WRP3_D¬©a
 != 0xFFU))

864 
OB
->
WRP3
 |Ô£ø
WRP3_D¬©a
;

867 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

872 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

875  
¬∞¬©us
;

876 
	}
}

886 
HAL_S√®tusTy‚â•Def
 
	$FLASH_OB_RDP_Lev√±C‚ÅÑfig
(
u√∂t8_t
 
R√≥dPr≈∏eÀòLev√±
)

888 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

891 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_RDP_LEVEL
(
R√≥dPr≈∏eÀòLev√±
));

894 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

896 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

899 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

902 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

903 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

906 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

909 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

911 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

914 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

916 
	`WRITE_REG
(
OB
->
RDP
, 
R√≥dPr≈∏eÀòLev√±
);

919 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

922 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

926  
¬∞¬©us
;

927 
	}
}

937 
HAL_S√®tusTy‚â•Def
 
	$FLASH_OB_U¬£rC‚ÅÑfig
(
u√∂t8_t
 
U¬£rC‚ÅÑfig
)

939 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

942 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_IWDG_SOURCE
((
U¬£rC‚ÅÑfig
&
OB_IWDG_SW
)));

943 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_STOP_SOURCE
((
U¬£rC‚ÅÑfig
&
OB_STOP_NO_RST
)));

944 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_STDBY_SOURCE
((
U¬£rC‚ÅÑfig
&
OB_STDBY_NO_RST
)));

945 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

946 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_BOOT1
((
U¬£rC‚ÅÑfig
&
OB_BOOT1_SET
)));

950 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

952 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

955 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

958 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

960 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

961 
OB
->
USER
 = (
U¬£rC‚ÅÑfig
 | 0xF0U);

963 
OB
->
USER
 = (
U¬£rC‚ÅÑfig
 | 0x88U);

967 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

970 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

973  
¬∞¬©us
;

974 
	}
}

988 
HAL_S√®tusTy‚â•Def
 
	$FLASH_OB_Prog√∏mD¬©a
(
u√∂t32_t
 
Add¬™ss
, 
u√∂t8_t
 
D¬©a
)

990 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_ERROR
;

993 
	`as¬£œÄ_‚àë√∏m
(
	`IS_OB_DATA_ADDRESS
(
Add¬™ss
));

996 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

998 if(
¬∞¬©us
 =Ô£ø
HAL_OK
)

1001 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

1004 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1005 *(
__IO
 
u√∂t16_t
*)
Add¬™ss
 = 
D¬©a
;

1008 
¬∞¬©us
 = 
	`FLASH_Wa√¥F‚ÄπLa¬∞O‚â•√∏ti‚ÅÑ
((
u√∂t32_t
)
FLASH_TIMEOUT_VALUE
);

1011 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1014  
¬∞¬©us
;

1015 
	}
}

1021 
u√∂t32_t
 
	$FLASH_OB_G√´WRP
()

1024  (
u√∂t32_t
)(
	`READ_REG
(
FLASH
->
WRPR
));

1025 
	}
}

1034 
u√∂t32_t
 
	$FLASH_OB_G√´RDP
()

1036 
u√∂t32_t
 
¬™ad¬∞¬©us
 = 
OB_RDP_LEVEL_0
;

1037 
u√∂t32_t
 
tmp_¬™g
 = 0U;

1040 
tmp_¬™g
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_RDPRT
);

1042 i‚Ä°(
tmp_¬™g
 =Ô£ø
FLASH_OBR_RDPRT
)

1044 
¬™ad¬∞¬©us
 = 
OB_RDP_LEVEL_1
;

1048 
¬™ad¬∞¬©us
 = 
OB_RDP_LEVEL_0
;

1051  
¬™ad¬∞¬©us
;

1052 
	}
}

1060 
u√∂t8_t
 
	$FLASH_OB_G√´U¬£r
()

1063  (
u√∂t8_t
)((
	`READ_REG
(
FLASH
->
OBR
√ã& 
FLASH_OBR_USER
√ã>> 
FLASH_POSITION_IWDGSW_BIT
);

1064 
	}
}

1089 
	$FLASH_PageE√∏¬£
(
u√∂t32_t
 
PageAdd¬™ss
)

1092 
pF≈ìsh
.
E¬∫‚ÄπCode
 = 
HAL_FLASH_ERROR_NONE
;

1094 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

1095 if(
PageAdd¬™ss
 > 
FLASH_BANK1_END
)

1098 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

1099 
	`WRITE_REG
(
FLASH
->
AR2
, 
PageAdd¬™ss
);

1100 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

1106 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

1107 
	`WRITE_REG
(
FLASH
->
AR
, 
PageAdd¬™ss
);

1108 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

1109 #i‚Ä°
	`def√∂ed
(
FLASH_BANK2_END
)

1112 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c

105 
	~"¬∞m32f1xx_h√Ü.h
"

116 #ifde‚Ä°
HAL_GPIO_MODULE_ENABLED


123 
	#GPIO_MODE
 0x00000003u

	)

124 
	#EXTI_MODE
 0x10000000u

	)

125 
	#GPIO_MODE_IT
 0x00010000u

	)

126 
	#GPIO_MODE_EVT
 0x00020000u

	)

127 
	#RISING_EDGE
 0x00100000u

	)

128 
	#FALLING_EDGE
 0x00200000u

	)

129 
	#GPIO_OUTPUT_TYPE
 0x00000010u

	)

131 
	#GPIO_NUMBER
 16u

	)

134 
	#GPIO_CR_MODE_INPUT
 0x00000000u

	)

135 
	#GPIO_CR_CNF_ANALOG
 0x00000000u

	)

136 
	#GPIO_CR_CNF_INPUT_FLOATING
 0x00000004u

	)

137 
	#GPIO_CR_CNF_INPUT_PU_PD
 0x00000008u

	)

138 
	#GPIO_CR_CNF_GP_OUTPUT_PP
 0x00000000u

	)

139 
	#GPIO_CR_CNF_GP_OUTPUT_OD
 0x00000004u

	)

140 
	#GPIO_CR_CNF_AF_OUTPUT_PP
 0x00000008u

	)

141 
	#GPIO_CR_CNF_AF_OUTPUT_OD
 0x0000000Cu

	)

178 
	$HAL_GPIO_In√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
GPIO_In√¥Ty‚â•Def
 *
GPIO_In√¥
)

180 
u√∂t32_t
 
pos√¥i‚ÅÑ
 = 0x00u;

181 
u√∂t32_t
 
i‚Ä∫os√¥i‚ÅÑ
;

182 
u√∂t32_t
 
iocu¬∫√≠t
;

183 
u√∂t32_t
 
√£mp
;

184 
u√∂t32_t
 
c‚ÅÑfig
 = 0x00u;

185 
__IO
 
u√∂t32_t
 *
c‚ÅÑfig¬™gi¬∞√Æ
;

186 
u√∂t32_t
 
¬™gi¬∞√Æoff¬£t
;

189 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

190 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN
(
GPIO_In√¥
->
P√∂
));

191 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_MODE
(
GPIO_In√¥
->
Mode
));

194 ((
GPIO_In√¥
->
P√∂
√ã>> 
pos√¥i‚ÅÑ
) != 0x00u)

197 
i‚Ä∫os√¥i‚ÅÑ
 = (0x01uL << 
pos√¥i‚ÅÑ
);

200 
iocu¬∫√≠t
 = (
u√∂t32_t
)(
GPIO_In√¥
->
P√∂
√ã& 
i‚Ä∫os√¥i‚ÅÑ
;

202 i‚Ä°(
iocu¬∫√≠t
 =Ô£ø
i‚Ä∫os√¥i‚ÅÑ
)

205 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_AF_INSTANCE
(
GPIOx
));

208 
GPIO_In√¥
->
Mode
)

211 
GPIO_MODE_OUTPUT_PP
:

213 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_SPEED
(
GPIO_In√¥
->
S‚â•ed
));

214 
c‚ÅÑfig
 = 
GPIO_In√¥
->
S‚â•ed
 + 
GPIO_CR_CNF_GP_OUTPUT_PP
;

218 
GPIO_MODE_OUTPUT_OD
:

220 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_SPEED
(
GPIO_In√¥
->
S‚â•ed
));

221 
c‚ÅÑfig
 = 
GPIO_In√¥
->
S‚â•ed
 + 
GPIO_CR_CNF_GP_OUTPUT_OD
;

225 
GPIO_MODE_AF_PP
:

227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_SPEED
(
GPIO_In√¥
->
S‚â•ed
));

228 
c‚ÅÑfig
 = 
GPIO_In√¥
->
S‚â•ed
 + 
GPIO_CR_CNF_AF_OUTPUT_PP
;

232 
GPIO_MODE_AF_OD
:

234 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_SPEED
(
GPIO_In√¥
->
S‚â•ed
));

235 
c‚ÅÑfig
 = 
GPIO_In√¥
->
S‚â•ed
 + 
GPIO_CR_CNF_AF_OUTPUT_OD
;

239 
GPIO_MODE_INPUT
:

240 
GPIO_MODE_IT_RISING
:

241 
GPIO_MODE_IT_FALLING
:

242 
GPIO_MODE_IT_RISING_FALLING
:

243 
GPIO_MODE_EVT_RISING
:

244 
GPIO_MODE_EVT_FALLING
:

245 
GPIO_MODE_EVT_RISING_FALLING
:

247 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PULL
(
GPIO_In√¥
->
Pu≈í
));

248 i‚Ä°(
GPIO_In√¥
->
Pu≈í
 =Ô£ø
GPIO_NOPULL
)

250 
c‚ÅÑfig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_FLOATING
;

252 i‚Ä°(
GPIO_In√¥
->
Pu≈í
 =Ô£ø
GPIO_PULLUP
)

254 
c‚ÅÑfig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

257 
GPIOx
->
BSRR
 = 
i‚Ä∫os√¥i‚ÅÑ
;

261 
c‚ÅÑfig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

264 
GPIOx
->
BRR
 = 
i‚Ä∫os√¥i‚ÅÑ
;

269 
GPIO_MODE_ANALOG
:

270 
c‚ÅÑfig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_ANALOG
;

280 
c‚ÅÑfig¬™gi¬∞√Æ
 = (
iocu¬∫√≠t
 < 
GPIO_PIN_8
√ã? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

281 
¬™gi¬∞√Æoff¬£t
 = (
iocu¬∫√≠t
 < 
GPIO_PIN_8
√ã? (
pos√¥i‚ÅÑ
 << 2u) : ((position - 8u) << 2u);

284 
	`MODIFY_REG
((*
c‚ÅÑfig¬™gi¬∞√Æ
), ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
√ã<< 
¬™gi¬∞√Æoff¬£t
), (
c‚ÅÑfig
 <<√ëegisteroffset));

288 i‚Ä°((
GPIO_In√¥
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

291 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

292 
√£mp
 = 
AFIO
->
EXTICR
[
pos√¥i‚ÅÑ
 >> 2u];

293 
	`CLEAR_BIT
(
√£mp
, (0x0Fu√ã<< (4u * (
pos√¥i‚ÅÑ
 & 0x03u)));

294 
	`SET_BIT
(
√£mp
, (
	`GPIO_GET_INDEX
(
GPIOx
)√ã<< (4u * (
pos√¥i‚ÅÑ
 & 0x03u)));

295 
AFIO
->
EXTICR
[
pos√¥i‚ÅÑ
 >> 2u] = 
√£mp
;

299 i‚Ä°((
GPIO_In√¥
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

301 
	`SET_BIT
(
EXTI
->
IMR
, 
iocu¬∫√≠t
);

305 
	`CLEAR_BIT
(
EXTI
->
IMR
, 
iocu¬∫√≠t
);

309 i‚Ä°((
GPIO_In√¥
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

311 
	`SET_BIT
(
EXTI
->
EMR
, 
iocu¬∫√≠t
);

315 
	`CLEAR_BIT
(
EXTI
->
EMR
, 
iocu¬∫√≠t
);

319 i‚Ä°((
GPIO_In√¥
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

321 
	`SET_BIT
(
EXTI
->
RTSR
, 
iocu¬∫√≠t
);

325 
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
iocu¬∫√≠t
);

329 i‚Ä°((
GPIO_In√¥
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

331 
	`SET_BIT
(
EXTI
->
FTSR
, 
iocu¬∫√≠t
);

335 
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
iocu¬∫√≠t
);

340 
pos√¥i‚ÅÑ
++;

342 
	}
}

351 
	$HAL_GPIO_DeIn√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t32_t
 
GPIO_P√∂
)

353 
u√∂t32_t
 
pos√¥i‚ÅÑ
 = 0x00u;

354 
u√∂t32_t
 
iocu¬∫√≠t
;

355 
u√∂t32_t
 
tmp
;

356 
__IO
 
u√∂t32_t
 *
c‚ÅÑfig¬™gi¬∞√Æ
;

357 
u√∂t32_t
 
¬™gi¬∞√Æoff¬£t
;

360 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

361 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN
(
GPIO_P√∂
));

364 (
GPIO_P√∂
 >> 
pos√¥i‚ÅÑ
) != 0u)

367 
iocu¬∫√≠t
 = (
GPIO_P√∂
√ã& (1uL << 
pos√¥i‚ÅÑ
);

369 i‚Ä°(
iocu¬∫√≠t
)

374 
tmp
 = 
AFIO
->
EXTICR
[
pos√¥i‚ÅÑ
 >> 2u];

375 
tmp
 &Ô£ø0x0FuL << (4u * (
pos√¥i‚ÅÑ
 & 0x03u));

376 i‚Ä°(
tmp
 =Ô£ø(
	`GPIO_GET_INDEX
(
GPIOx
√ã<< (4u * (
pos√¥i‚ÅÑ
 & 0x03u))))

378 
tmp
 = 0x0FuL << (4u * (
pos√¥i‚ÅÑ
 & 0x03u));

379 
	`CLEAR_BIT
(
AFIO
->
EXTICR
[
pos√¥i‚ÅÑ
 >> 2u], 
tmp
);

382 
	`CLEAR_BIT
(
EXTI
->
IMR
, (
u√∂t32_t
)
iocu¬∫√≠t
);

383 
	`CLEAR_BIT
(
EXTI
->
EMR
, (
u√∂t32_t
)
iocu¬∫√≠t
);

386 
	`CLEAR_BIT
(
EXTI
->
RTSR
, (
u√∂t32_t
)
iocu¬∫√≠t
);

387 
	`CLEAR_BIT
(
EXTI
->
FTSR
, (
u√∂t32_t
)
iocu¬∫√≠t
);

392 
c‚ÅÑfig¬™gi¬∞√Æ
 = (
iocu¬∫√≠t
 < 
GPIO_PIN_8
√ã? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

393 
¬™gi¬∞√Æoff¬£t
 = (
iocu¬∫√≠t
 < 
GPIO_PIN_8
√ã? (
pos√¥i‚ÅÑ
 << 2u) : ((position - 8u) << 2u);

396 
	`MODIFY_REG
(*
c‚ÅÑfig¬™gi¬∞√Æ
, ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
√ã<< 
¬™gi¬∞√Æoff¬£t
), 
GPIO_CRL_CNF0_0
 <<√ëegisteroffset);

399 
	`CLEAR_BIT
(
GPIOx
->
ODR
, 
iocu¬∫√≠t
);

402 
pos√¥i‚ÅÑ
++;

404 
	}
}

431 
GPIO_P√∂S√®√£
 
	$HAL_GPIO_R√≥dP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
)

433 
GPIO_P√∂S√®√£
 
b√¥¬∞¬©us
;

436 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN
(
GPIO_P√∂
));

438 i‚Ä°((
GPIOx
->
IDR
 & 
GPIO_P√∂
√ã!Ô£ø(
u√∂t32_t
)
GPIO_PIN_RESET
)

440 
b√¥¬∞¬©us
 = 
GPIO_PIN_SET
;

444 
b√¥¬∞¬©us
 = 
GPIO_PIN_RESET
;

446  
b√¥¬∞¬©us
;

447 
	}
}

465 
	$HAL_GPIO_Wr√¥eP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
, 
GPIO_P√∂S√®√£
 
P√∂S√®√£
)

468 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN
(
GPIO_P√∂
));

469 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN_ACTION
(
P√∂S√®√£
));

471 i‚Ä°(
P√∂S√®√£
 !Ô£ø
GPIO_PIN_RESET
)

473 
GPIOx
->
BSRR
 = 
GPIO_P√∂
;

477 
GPIOx
->
BSRR
 = (
u√∂t32_t
)
GPIO_P√∂
 << 16u;

479 
	}
}

487 
	$HAL_GPIO_Togg√ÄP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
)

489 
u√∂t32_t
 
odr
;

492 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN
(
GPIO_P√∂
));

495 
odr
 = 
GPIOx
->
ODR
;

498 
GPIOx
->
BSRR
 = ((
odr
 & 
GPIO_P√∂
√ã<< 
GPIO_NUMBER
) | (~odr & GPIO_Pin);

499 
	}
}

511 
HAL_S√®tusTy‚â•Def
 
	$HAL_GPIO_LockP√∂
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
u√∂t16_t
 
GPIO_P√∂
)

513 
__IO
 
u√∂t32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

516 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_LOCK_INSTANCE
(
GPIOx
));

517 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_PIN
(
GPIO_P√∂
));

520 
	`SET_BIT
(
tmp
, 
GPIO_P√∂
);

522 
GPIOx
->
LCKR
 = 
tmp
;

524 
GPIOx
->
LCKR
 = 
GPIO_P√∂
;

526 
GPIOx
->
LCKR
 = 
tmp
;

528 
tmp
 = 
GPIOx
->
LCKR
;

531 i‚Ä°((
u√∂t32_t
)(
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
))

533  
HAL_OK
;

537  
HAL_ERROR
;

539 
	}
}

546 
	$HAL_GPIO_EXTI_IRQH‚Ñ¢d√Är
(
u√∂t16_t
 
GPIO_P√∂
)

549 i‚Ä°(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_P√∂
) != 0x00u)

551 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_P√∂
);

552 
	`HAL_GPIO_EXTI_C√Ülback
(
GPIO_P√∂
);

554 
	}
}

561 
__w√≥k
 
	$HAL_GPIO_EXTI_C√Ülback
(
u√∂t16_t
 
GPIO_P√∂
)

564 
	`UNUSED
(
GPIO_P√∂
);

568 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio_ex.c

40 
	~"¬∞m32f1xx_h√Ü.h
"

51 #ifde‚Ä°
HAL_GPIO_MODULE_ENABLED


81 
	$HAL_GPIOEx_C‚ÅÑfigEv√≠tout
(
u√∂t32_t
 
GPIO_P‚ÄπtSourÀö
, u√∂t32_√†
GPIO_P√∂SourÀö
)

84 
	`as¬£œÄ_‚àë√∏m
(
	`IS_AFIO_EVENTOUT_PORT
(
GPIO_P‚ÄπtSourÀö
));

85 
	`as¬£œÄ_‚àë√∏m
(
	`IS_AFIO_EVENTOUT_PIN
(
GPIO_P√∂SourÀö
));

88 
	`MODIFY_REG
(
AFIO
->
EVCR
, (
AFIO_EVCR_PORT
√ã| (
AFIO_EVCR_PIN
), (
GPIO_P‚ÄπtSourÀö
√ã| (
GPIO_P√∂SourÀö
));

89 
	}
}

95 
	$HAL_GPIOEx_E¬´b√ÄEv√≠tout
()

97 
	`SET_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

98 
	}
}

104 
	$HAL_GPIOEx_Di√üb√ÄEv√≠tout
()

106 
	`CLEAR_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

107 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_hcd.c

54 
	~"¬∞m32f1xx_h√Ü.h
"

60 #ifde‚Ä°
HAL_HCD_MODULE_ENABLED


62 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

77 
HCD_HC_IN_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
);

78 
HCD_HC_OUT_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
);

79 
HCD_RXQLVL_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

80 
HCD_P‚Äπt_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
);

108 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_In√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

110 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
;

113 i‚Ä°(
hhcd
 =Ô£ø
NULL
)

115  
HAL_ERROR
;

119 
	`as¬£œÄ_‚àë√∏m
(
	`IS_HCD_ALL_INSTANCE
(
hhcd
->
In¬∞‚Ñ¢Àö
));

121 
USBx
 = 
hhcd
->
In¬∞‚Ñ¢Àö
;

123 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_RESET
)

126 
hhcd
->
Lock
 = 
HAL_UNLOCKED
;

128 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

129 
hhcd
->
SOFC√Ülback
 = 
HAL_HCD_SOF_C√Ülback
;

130 
hhcd
->
C‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_HCD_C‚ÅÑ‚àöÀò_C√Ülback
;

131 
hhcd
->
Disc‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_HCD_Disc‚ÅÑ‚àöÀò_C√Ülback
;

132 
hhcd
->
P‚ÄπtE¬´b√ÄdC√Ülback
 = 
HAL_HCD_P‚ÄπtE¬´b√Äd_C√Ülback
;

133 
hhcd
->
P‚ÄπtDi√üb√ÄdC√Ülback
 = 
HAL_HCD_P‚ÄπtDi√üb√Äd_C√Ülback
;

134 
hhcd
->
HC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
 = 
HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
;

136 i‚Ä°(
hhcd
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

138 
hhcd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_HCD_M‚Ä¢In√¥
;

142 
hhcd
->
	`M‚Ä¢In√¥C√Ülback
(hhcd);

145 
	`HAL_HCD_M‚Ä¢In√¥
(
hhcd
);

149 
hhcd
->
S√®√£
 = 
HAL_HCD_STATE_BUSY
;

152 i‚Ä°((
USBx
->
CID
 & (0x1U << 8)) == 0U)

154 
hhcd
->
In√¥
.
dma_√≠ab√Ä
 = 0U;

158 
	`__HAL_HCD_DISABLE
(
hhcd
);

161 ()
	`USB_C‚ÄπeIn√¥
(
hhcd
->
In¬∞‚Ñ¢Àö
, hhcd->
In√¥
);

164 ()
	`USB_S√´Cu¬∫√≠tMode
(
hhcd
->
In¬∞‚Ñ¢Àö
, 
USB_HOST_MODE
);

167 ()
	`USB_Ho¬∞In√¥
(
hhcd
->
In¬∞‚Ñ¢Àö
, hhcd->
In√¥
);

169 
hhcd
->
S√®√£
 = 
HAL_HCD_STATE_READY
;

171  
HAL_OK
;

172 
	}
}

197 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_HC_In√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

198 
u√∂t8_t
 
ch_num
,

199 
u√∂t8_t
 
√Ønum
,

200 
u√∂t8_t
 
dev_add¬™ss
,

201 
u√∂t8_t
 
‚Ä¢√¨d
,

202 
u√∂t8_t
 
√Ø_ty‚â•
,

203 
u√∂t16_t
 
mps
)

205 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

207 
	`__HAL_LOCK
(
hhcd
);

208 
hhcd
->
hc
[
ch_num
].
do_p√∂g
 = 0U;

209 
hhcd
->
hc
[
ch_num
].
dev_addr
 = 
dev_add¬™ss
;

210 
hhcd
->
hc
[
ch_num
].
max_‚àëck√´
 = 
mps
;

211 
hhcd
->
hc
[
ch_num
].ch_num = ch_num;

212 
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =√âp_type;

213 
hhcd
->
hc
[
ch_num
].
√Ø_num
 = 
√Ønum
 & 0x7FU;

215 i‚Ä°((
√Ønum
 & 0x80U) == 0x80U)

217 
hhcd
->
hc
[
ch_num
].
√Ø_is_√∂
 = 1U;

221 
hhcd
->
hc
[
ch_num
].
√Ø_is_√∂
 = 0U;

224 
hhcd
->
hc
[
ch_num
].
‚Ä¢√¨d
 = speed;

226 
¬∞¬©us
 = 
	`USB_HC_In√¥
(
hhcd
->
In¬∞‚Ñ¢Àö
,

227 
ch_num
,

228 
√Ønum
,

229 
dev_add¬™ss
,

230 
‚Ä¢√¨d
,

231 
√Ø_ty‚â•
,

232 
mps
);

233 
	`__HAL_UNLOCK
(
hhcd
);

235  
¬∞¬©us
;

236 
	}
}

245 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_HC_H√Üt
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
ch_num
)

247 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

249 
	`__HAL_LOCK
(
hhcd
);

250 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

251 
	`__HAL_UNLOCK
(
hhcd
);

253  
¬∞¬©us
;

254 
	}
}

261 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_DeIn√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

264 i‚Ä°(
hhcd
 =Ô£ø
NULL
)

266  
HAL_ERROR
;

269 
hhcd
->
S√®√£
 = 
HAL_HCD_STATE_BUSY
;

271 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

272 i‚Ä°(
hhcd
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

274 
hhcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_HCD_M‚Ä¢DeIn√¥
;

278 
hhcd
->
	`M‚Ä¢DeIn√¥C√Ülback
(hhcd);

281 
	`HAL_HCD_M‚Ä¢DeIn√¥
(
hhcd
);

284 
	`__HAL_HCD_DISABLE
(
hhcd
);

286 
hhcd
->
S√®√£
 = 
HAL_HCD_STATE_RESET
;

288  
HAL_OK
;

289 
	}
}

296 
__w√≥k
 
	$HAL_HCD_M‚Ä¢In√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

299 
	`UNUSED
(
hhcd
);

304 
	}
}

311 
__w√≥k
 
	$HAL_HCD_M‚Ä¢DeIn√¥
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

314 
	`UNUSED
(
hhcd
);

319 
	}
}

363 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_HC_Subm√¥Reque¬∞
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

364 
u√∂t8_t
 
ch_num
,

365 
u√∂t8_t
 
d√∫eÀòi‚ÅÑ
,

366 
u√∂t8_t
 
√Ø_ty‚â•
,

367 
u√∂t8_t
 
tok√≠
,

368 
u√∂t8_t
 *
pbuff
,

369 
u√∂t16_t
 
√Ängth
,

370 
u√∂t8_t
 
do_p√∂g
)

372 
hhcd
->
hc
[
ch_num
].
√Ø_is_√∂
 = 
d√∫eÀòi‚ÅÑ
;

373 
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =√âp_type;

375 i‚Ä°(
tok√≠
 == 0U)

377 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_SETUP
;

378 
hhcd
->
hc
[
ch_num
].
do_p√∂g
 = do_ping;

382 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA1
;

386 
√Ø_ty‚â•
)

388 
EP_TYPE_CTRL
:

389 i‚Ä°((
tok√≠
 =Ô£ø1U√ã&& (
d√∫eÀòi‚ÅÑ
 == 0U))

391 i‚Ä°(
√Ängth
 == 0U)

394 
hhcd
->
hc
[
ch_num
].
togg√Ä_out
 = 1U;

398 i‚Ä°(
hhcd
->
hc
[
ch_num
].
togg√Ä_out
 == 0U)

401 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA0
;

406 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA1
;

411 
EP_TYPE_BULK
:

412 i‚Ä°(
d√∫eÀòi‚ÅÑ
 == 0U)

415 i‚Ä°(
hhcd
->
hc
[
ch_num
].
togg√Ä_out
 == 0U)

418 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA0
;

423 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA1
;

428 i‚Ä°(
hhcd
->
hc
[
ch_num
].
togg√Ä_√∂
 == 0U)

430 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA0
;

434 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA1
;

439 
EP_TYPE_INTR
:

440 i‚Ä°(
d√∫eÀòi‚ÅÑ
 == 0U)

443 i‚Ä°(
hhcd
->
hc
[
ch_num
].
togg√Ä_out
 == 0U)

446 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA0
;

451 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA1
;

456 i‚Ä°(
hhcd
->
hc
[
ch_num
].
togg√Ä_√∂
 == 0U)

458 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA0
;

462 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA1
;

467 
EP_TYPE_ISOC
:

468 
hhcd
->
hc
[
ch_num
].
d¬©a_pid
 = 
HC_PID_DATA0
;

475 
hhcd
->
hc
[
ch_num
].
x‚Äûr_buff
 = 
pbuff
;

476 
hhcd
->
hc
[
ch_num
].
x‚Äûr_√Än
 = 
√Ängth
;

477 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_IDLE
;

478 
hhcd
->
hc
[
ch_num
].
x‚Äûr_cou¬°
 = 0U;

479 
hhcd
->
hc
[
ch_num
].ch_num = ch_num;

480 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_IDLE
;

482  
	`USB_HC_S√®œÄX‚Äûr
(
hhcd
->
In¬∞‚Ñ¢Àö
, &hhcd->
hc
[
ch_num
]);

483 
	}
}

490 
	$HAL_HCD_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

492 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hhcd
->
In¬∞‚Ñ¢Àö
;

493 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

494 
u√∂t32_t
 
i
, 
√∂√£¬∫u¬±
;

497 i‚Ä°(
	`USB_G√´Mode
(
hhcd
->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
USB_OTG_MODE_HOST
)

500 i‚Ä°(
	`__HAL_HCD_IS_INVALID_INTERRUPT
(
hhcd
))

505 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
))

508 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
);

511 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_IISOIXFR
))

514 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_IISOIXFR
);

517 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PTXFE
))

520 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PTXFE
);

523 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_MMIS
))

526 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_MMIS
);

530 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_DISCINT
))

532 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_DISCINT
);

534 i‚Ä°((
USBx_HPRT0
 & 
USB_OTG_HPRT_PCSTS
) == 0U)

537 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

538 
hhcd
->
	`Disc‚ÅÑ‚àöÀòC√Ülback
(hhcd);

540 
	`HAL_HCD_Disc‚ÅÑ‚àöÀò_C√Ülback
(
hhcd
);

543 ()
	`USB_In√¥FSLSPClkS√±
(
hhcd
->
In¬∞‚Ñ¢Àö
, 
HCFG_48_MHZ
);

548 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_HPRTINT
))

550 
	`HCD_P‚Äπt_IRQH‚Ñ¢d√Är
(
hhcd
);

554 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_SOF
))

556 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

557 
hhcd
->
	`SOFC√Ülback
(hhcd);

559 
	`HAL_HCD_SOF_C√Ülback
(
hhcd
);

562 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_SOF
);

566 i‚Ä°(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_HCINT
))

568 
√∂√£¬∫u¬±
 = 
	`USB_HC_R√≥dI¬°√Æru¬±
(
hhcd
->
In¬∞‚Ñ¢Àö
);

569 
i
 = 0U; i < 
hhcd
->
In√¥
.
Ho¬∞_ch‚Ñ¢‚àöls
; i++)

571 i‚Ä°((
√∂√£¬∫u¬±
 & (1UL << (
i
 & 0xFU))) != 0U)

573 i‚Ä°((
	`USBx_HC
(
i
)->
HCCHAR
 & 
USB_OTG_HCCHAR_EPDIR
) == USB_OTG_HCCHAR_EPDIR)

575 
	`HCD_HC_IN_IRQH‚Ñ¢d√Är
(
hhcd
, (
u√∂t8_t
)
i
);

579 
	`HCD_HC_OUT_IRQH‚Ñ¢d√Är
(
hhcd
, (
u√∂t8_t
)
i
);

583 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_HCINT
);

587 i‚Ä°((
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_RXFLVL
)) != 0U)

589 
	`USB_MASK_INTERRUPT
(
hhcd
->
In¬∞‚Ñ¢Àö
, 
USB_OTG_GINTSTS_RXFLVL
);

591 
	`HCD_RXQLVL_IRQH‚Ñ¢d√Är
(
hhcd
);

593 
	`USB_UNMASK_INTERRUPT
(
hhcd
->
In¬∞‚Ñ¢Àö
, 
USB_OTG_GINTSTS_RXFLVL
);

596 
	}
}

604 
	$HAL_HCD_WKUP_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

606 
	`UNUSED
(
hhcd
);

607 
	}
}

615 
__w√≥k
 
	$HAL_HCD_SOF_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

618 
	`UNUSED
(
hhcd
);

623 
	}
}

630 
__w√≥k
 
	$HAL_HCD_C‚ÅÑ‚àöÀò_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

633 
	`UNUSED
(
hhcd
);

638 
	}
}

645 
__w√≥k
 
	$HAL_HCD_Disc‚ÅÑ‚àöÀò_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

648 
	`UNUSED
(
hhcd
);

653 
	}
}

660 
__w√≥k
 
	$HAL_HCD_P‚ÄπtE¬´b√Äd_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

663 
	`UNUSED
(
hhcd
);

668 
	}
}

675 
__w√≥k
 
	$HAL_HCD_P‚ÄπtDi√üb√Äd_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

678 
	`UNUSED
(
hhcd
);

683 
	}
}

700 
__w√≥k
 
	$HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
, 
HCD_URBS√®√£Ty‚â•Def
 
urb_¬∞¬©e
)

703 
	`UNUSED
(
hhcd
);

704 
	`UNUSED
(
chnum
);

705 
	`UNUSED
(
urb_¬∞¬©e
);

710 
	}
}

712 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

729 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_Regi¬∞√ÆC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

730 
HAL_HCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

731 
pHCD_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

733 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

735 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

738 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

739  
HAL_ERROR
;

742 
	`__HAL_LOCK
(
hhcd
);

744 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_READY
)

746 
C√ÜlbackID
)

748 
HAL_HCD_SOF_CB_ID
 :

749 
hhcd
->
SOFC√Ülback
 = 
pC√Ülback
;

752 
HAL_HCD_CONNECT_CB_ID
 :

753 
hhcd
->
C‚ÅÑ‚àöÀòC√Ülback
 = 
pC√Ülback
;

756 
HAL_HCD_DISCONNECT_CB_ID
 :

757 
hhcd
->
Disc‚ÅÑ‚àöÀòC√Ülback
 = 
pC√Ülback
;

760 
HAL_HCD_PORT_ENABLED_CB_ID
 :

761 
hhcd
->
P‚ÄπtE¬´b√ÄdC√Ülback
 = 
pC√Ülback
;

764 
HAL_HCD_PORT_DISABLED_CB_ID
 :

765 
hhcd
->
P‚ÄπtDi√üb√ÄdC√Ülback
 = 
pC√Ülback
;

768 
HAL_HCD_MSPINIT_CB_ID
 :

769 
hhcd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

772 
HAL_HCD_MSPDEINIT_CB_ID
 :

773 
hhcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

778 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

780 
¬∞¬©us
 = 
HAL_ERROR
;

784 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_RESET
)

786 
C√ÜlbackID
)

788 
HAL_HCD_MSPINIT_CB_ID
 :

789 
hhcd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

792 
HAL_HCD_MSPDEINIT_CB_ID
 :

793 
hhcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

798 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

800 
¬∞¬©us
 = 
HAL_ERROR
;

807 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

809 
¬∞¬©us
 = 
HAL_ERROR
;

813 
	`__HAL_UNLOCK
(
hhcd
);

814  
¬∞¬©us
;

815 
	}
}

832 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_UnRegi¬∞√ÆC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
HAL_HCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

834 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

837 
	`__HAL_LOCK
(
hhcd
);

840 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_READY
)

842 
C√ÜlbackID
)

844 
HAL_HCD_SOF_CB_ID
 :

845 
hhcd
->
SOFC√Ülback
 = 
HAL_HCD_SOF_C√Ülback
;

848 
HAL_HCD_CONNECT_CB_ID
 :

849 
hhcd
->
C‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_HCD_C‚ÅÑ‚àöÀò_C√Ülback
;

852 
HAL_HCD_DISCONNECT_CB_ID
 :

853 
hhcd
->
Disc‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_HCD_Disc‚ÅÑ‚àöÀò_C√Ülback
;

856 
HAL_HCD_PORT_ENABLED_CB_ID
 :

857 
hhcd
->
P‚ÄπtE¬´b√ÄdC√Ülback
 = 
HAL_HCD_P‚ÄπtE¬´b√Äd_C√Ülback
;

860 
HAL_HCD_PORT_DISABLED_CB_ID
 :

861 
hhcd
->
P‚ÄπtDi√üb√ÄdC√Ülback
 = 
HAL_HCD_P‚ÄπtDi√üb√Äd_C√Ülback
;

864 
HAL_HCD_MSPINIT_CB_ID
 :

865 
hhcd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_HCD_M‚Ä¢In√¥
;

868 
HAL_HCD_MSPDEINIT_CB_ID
 :

869 
hhcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_HCD_M‚Ä¢DeIn√¥
;

874 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

877 
¬∞¬©us
 = 
HAL_ERROR
;

881 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_RESET
)

883 
C√ÜlbackID
)

885 
HAL_HCD_MSPINIT_CB_ID
 :

886 
hhcd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_HCD_M‚Ä¢In√¥
;

889 
HAL_HCD_MSPDEINIT_CB_ID
 :

890 
hhcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_HCD_M‚Ä¢DeIn√¥
;

895 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

898 
¬∞¬©us
 = 
HAL_ERROR
;

905 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

908 
¬∞¬©us
 = 
HAL_ERROR
;

912 
	`__HAL_UNLOCK
(
hhcd
);

913  
¬∞¬©us
;

914 
	}
}

923 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_Regi¬∞√ÆHC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
,

924 
pHCD_HC_N≈∏ifyURBCh‚Ñ¢geC√ÜlbackTy‚â•Def
 
pC√Ülback
)

926 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

928 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

931 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

933  
HAL_ERROR
;

937 
	`__HAL_LOCK
(
hhcd
);

939 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_READY
)

941 
hhcd
->
HC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
 = 
pC√Ülback
;

946 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

949 
¬∞¬©us
 = 
HAL_ERROR
;

953 
	`__HAL_UNLOCK
(
hhcd
);

955  
¬∞¬©us
;

956 
	}
}

964 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_UnRegi¬∞√ÆHC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

966 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

969 
	`__HAL_LOCK
(
hhcd
);

971 i‚Ä°(
hhcd
->
S√®√£
 =Ô£ø
HAL_HCD_STATE_READY
)

973 
hhcd
->
HC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
 = 
HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
;

978 
hhcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_HCD_ERROR_INVALID_CALLBACK
;

981 
¬∞¬©us
 = 
HAL_ERROR
;

985 
	`__HAL_UNLOCK
(
hhcd
);

987  
¬∞¬©us
;

988 
	}
}

1015 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_S√®œÄ
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1017 
	`__HAL_LOCK
(
hhcd
);

1018 
	`__HAL_HCD_ENABLE
(
hhcd
);

1019 ()
	`USB_DriveVbus
(
hhcd
->
In¬∞‚Ñ¢Àö
, 1U);

1020 
	`__HAL_UNLOCK
(
hhcd
);

1022  
HAL_OK
;

1023 
	}
}

1031 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_St‚Ä∫
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1033 
	`__HAL_LOCK
(
hhcd
);

1034 ()
	`USB_St‚Ä∫Ho¬∞
(
hhcd
->
In¬∞‚Ñ¢Àö
);

1035 
	`__HAL_UNLOCK
(
hhcd
);

1037  
HAL_OK
;

1038 
	}
}

1045 
HAL_S√®tusTy‚â•Def
 
	$HAL_HCD_Re¬£tP‚Äπt
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1047  (
	`USB_Re¬£tP‚Äπt
(
hhcd
->
In¬∞‚Ñ¢Àö
));

1048 
	}
}

1074 
HCD_S√®√£Ty‚â•Def
 
	$HAL_HCD_G√´S√®√£
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1076  
hhcd
->
S√®√£
;

1077 
	}
}

1093 
HCD_URBS√®√£Ty‚â•Def
 
	$HAL_HCD_HC_G√´URBS√®√£
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
)

1095  
hhcd
->
hc
[
chnum
].
urb_¬∞¬©e
;

1096 
	}
}

1106 
u√∂t32_t
 
	$HAL_HCD_HC_G√´X‚ÄûrCou¬°
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
)

1108  
hhcd
->
hc
[
chnum
].
x‚Äûr_cou¬°
;

1109 
	}
}

1128 
HCD_HCS√®√£Ty‚â•Def
 
	$HAL_HCD_HC_G√´S√®√£
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
)

1130  
hhcd
->
hc
[
chnum
].
¬∞¬©e
;

1131 
	}
}

1138 
u√∂t32_t
 
	$HAL_HCD_G√´Cu¬∫√≠tF√∏me
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1140  (
	`USB_G√´Cu¬∫√≠tF√∏me
(
hhcd
->
In¬∞‚Ñ¢Àö
));

1141 
	}
}

1148 
u√∂t32_t
 
	$HAL_HCD_G√´Cu¬∫√≠tS‚â•ed
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1150  (
	`USB_G√´Ho¬∞S‚â•ed
(
hhcd
->
In¬∞‚Ñ¢Àö
));

1151 
	}
}

1171 
	$HCD_HC_IN_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
)

1173 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hhcd
->
In¬∞‚Ñ¢Àö
;

1174 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1175 
u√∂t32_t
 
ch_num
 = (u√∂t32_t)
chnum
;

1177 
u√∂t32_t
 
tm¬•eg
;

1179 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_AHBERR
) == USB_OTG_HCINT_AHBERR)

1181 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_AHBERR
);

1182 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1184 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_BBERR
) == USB_OTG_HCINT_BBERR)

1186 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_BBERR
);

1187 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_BBLERR
;

1188 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1189 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1191 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_ACK
) == USB_OTG_HCINT_ACK)

1193 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_ACK
);

1195 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_STALL
) == USB_OTG_HCINT_STALL)

1197 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1198 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_STALL
;

1199 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NAK
);

1200 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_STALL
);

1201 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1203 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_DTERR
) == USB_OTG_HCINT_DTERR)

1205 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1206 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1207 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NAK
);

1208 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_DATATGLERR
;

1209 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_DTERR
);

1216 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_FRMOR
) == USB_OTG_HCINT_FRMOR)

1218 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1219 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1220 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_FRMOR
);

1222 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_XFRC
) == USB_OTG_HCINT_XFRC)

1224 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_XFRC
;

1225 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1226 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_XFRC
);

1228 i‚Ä°((
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_CTRL
) ||

1229 (
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_BULK
))

1231 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1232 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1233 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NAK
);

1235 i‚Ä°(
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_INTR
)

1237 
	`USBx_HC
(
ch_num
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_ODDFRM
;

1238 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_DONE
;

1240 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

1241 
hhcd
->
	`HC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
(hhcd, (
u√∂t8_t
)
ch_num
, hhcd->
hc
[ch_num].
urb_¬∞¬©e
);

1243 
	`HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
(
hhcd
, (
u√∂t8_t
)
ch_num
, hhcd->
hc
[ch_num].
urb_¬∞¬©e
);

1246 i‚Ä°(
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_ISOC
)

1248 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_DONE
;

1249 
hhcd
->
hc
[
ch_num
].
togg√Ä_√∂
 ^= 1U;

1251 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

1252 
hhcd
->
	`HC_N≈∏ifyURBCh‚Ñ¢geC√Ülback
(hhcd, (
u√∂t8_t
)
ch_num
, hhcd->
hc
[ch_num].
urb_¬∞¬©e
);

1254 
	`HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
(
hhcd
, (
u√∂t8_t
)
ch_num
, hhcd->
hc
[ch_num].
urb_¬∞¬©e
);

1261 
hhcd
->
hc
[
ch_num
].
togg√Ä_√∂
 ^= 1U;

1264 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_CHH
) == USB_OTG_HCINT_CHH)

1266 
	`__HAL_HCD_MASK_HALT_HC_INT
(
ch_num
);

1268 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_XFRC
)

1270 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_DONE
;

1272 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_STALL
)

1274 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_STALL
;

1276 i‚Ä°((
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_XACTERR
) ||

1277 (
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_DATATGLERR
))

1279 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
++;

1280 i‚Ä°(
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 > 3U)

1282 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1283 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_ERROR
;

1287 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_NOTREADY
;

1291 
tm¬•eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1292 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_CHDIS
;

1293 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1294 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¬•eg
;

1296 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_NAK
)

1298 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_NOTREADY
;

1300 
tm¬•eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1301 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_CHDIS
;

1302 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1303 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¬•eg
;

1305 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_BBLERR
)

1307 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
++;

1308 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_ERROR
;

1314 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_CHH
);

1315 
	`HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
(
hhcd
, (
u√∂t8_t
)
ch_num
, hhcd->
hc
[ch_num].
urb_¬∞¬©e
);

1317 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_TXERR
) == USB_OTG_HCINT_TXERR)

1319 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1320 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
++;

1321 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_XACTERR
;

1322 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1323 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_TXERR
);

1325 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_NAK
) == USB_OTG_HCINT_NAK)

1327 i‚Ä°(
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_INTR
)

1329 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1330 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1331 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1333 i‚Ä°((
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_CTRL
) ||

1334 (
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_BULK
))

1336 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1337 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_NAK
;

1338 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1339 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1345 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NAK
);

1351 
	}
}

1360 
	$HCD_HC_OUT_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
, 
u√∂t8_t
 
chnum
)

1362 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hhcd
->
In¬∞‚Ñ¢Àö
;

1363 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1364 
u√∂t32_t
 
ch_num
 = (u√∂t32_t)
chnum
;

1365 
u√∂t32_t
 
tm¬•eg
;

1367 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_AHBERR
) == USB_OTG_HCINT_AHBERR)

1369 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_AHBERR
);

1370 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1372 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_ACK
) == USB_OTG_HCINT_ACK)

1374 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_ACK
);

1376 i‚Ä°(
hhcd
->
hc
[
ch_num
].
do_p√∂g
 == 1U)

1378 
hhcd
->
hc
[
ch_num
].
do_p√∂g
 = 0U;

1379 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_NOTREADY
;

1380 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1381 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1384 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_NYET
) == USB_OTG_HCINT_NYET)

1386 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_NYET
;

1387 
hhcd
->
hc
[
ch_num
].
do_p√∂g
 = 1U;

1388 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1389 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1390 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1391 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NYET
);

1393 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_FRMOR
) == USB_OTG_HCINT_FRMOR)

1395 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1396 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1397 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_FRMOR
);

1399 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_XFRC
) == USB_OTG_HCINT_XFRC)

1401 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1402 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1403 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1404 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_XFRC
);

1405 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_XFRC
;

1407 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_STALL
) == USB_OTG_HCINT_STALL)

1409 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_STALL
);

1410 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1411 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1412 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_STALL
;

1414 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_NAK
) == USB_OTG_HCINT_NAK)

1416 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1417 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_NAK
;

1419 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1420 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1421 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NAK
);

1423 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_TXERR
) == USB_OTG_HCINT_TXERR)

1425 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1426 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1427 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_XACTERR
;

1428 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_TXERR
);

1430 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_DTERR
) == USB_OTG_HCINT_DTERR)

1432 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
ch_num
);

1433 ()
	`USB_HC_H√Üt
(
hhcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
ch_num
);

1434 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_NAK
);

1435 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_DTERR
);

1436 
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 = 
HC_DATATGLERR
;

1438 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCINT
 & 
USB_OTG_HCINT_CHH
) == USB_OTG_HCINT_CHH)

1440 
	`__HAL_HCD_MASK_HALT_HC_INT
(
ch_num
);

1442 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_XFRC
)

1444 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_DONE
;

1445 i‚Ä°((
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_BULK
) ||

1446 (
hhcd
->
hc
[
ch_num
].
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_INTR
))

1448 
hhcd
->
hc
[
ch_num
].
togg√Ä_out
 ^= 1U;

1451 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_NAK
)

1453 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_NOTREADY
;

1455 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_NYET
)

1457 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_NOTREADY
;

1459 i‚Ä°(
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_STALL
)

1461 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_STALL
;

1463 i‚Ä°((
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_XACTERR
) ||

1464 (
hhcd
->
hc
[
ch_num
].
¬∞¬©e
 =Ô£ø
HC_DATATGLERR
))

1466 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
++;

1467 i‚Ä°(
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 > 3U)

1469 
hhcd
->
hc
[
ch_num
].
E¬∫C¬°
 = 0U;

1470 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_ERROR
;

1474 
hhcd
->
hc
[
ch_num
].
urb_¬∞¬©e
 = 
URB_NOTREADY
;

1478 
tm¬•eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1479 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_CHDIS
;

1480 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1481 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¬•eg
;

1488 
	`__HAL_HCD_CLEAR_HC_INT
(
ch_num
, 
USB_OTG_HCINT_CHH
);

1489 
	`HAL_HCD_HC_N≈∏ifyURBCh‚Ñ¢ge_C√Ülback
(
hhcd
, (
u√∂t8_t
)
ch_num
, hhcd->
hc
[ch_num].
urb_¬∞¬©e
);

1495 
	}
}

1502 
	$HCD_RXQLVL_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1504 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hhcd
->
In¬∞‚Ñ¢Àö
;

1505 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1506 
u√∂t32_t
 
pkt¬∞s
;

1507 
u√∂t32_t
 
pktÀôt
;

1508 
u√∂t32_t
 
√£mp
;

1509 
u√∂t32_t
 
tm¬•eg
;

1510 
u√∂t32_t
 
ch_num
;

1512 
√£mp
 = 
hhcd
->
In¬∞‚Ñ¢Àö
->
GRXSTSP
;

1513 
ch_num
 = 
√£mp
 & 
USB_OTG_GRXSTSP_EPNUM
;

1514 
pkt¬∞s
 = (
√£mp
 & 
USB_OTG_GRXSTSP_PKTSTS
) >> 17;

1515 
pktÀôt
 = (
√£mp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

1517 
pkt¬∞s
)

1519 
GRXSTS_PKTSTS_IN
:

1521 i‚Ä°((
pktÀôt
 > 0U√ã&& (
hhcd
->
hc
[
ch_num
].
x‚Äûr_buff
 != (*)0))

1523 ()
	`USB_R√≥dPack√´
(
hhcd
->
In¬∞‚Ñ¢Àö
, hhcd->
hc
[
ch_num
].
x‚Äûr_buff
, (
u√∂t16_t
)
pktÀôt
);

1526 
hhcd
->
hc
[
ch_num
].
x‚Äûr_buff
 +Ô£ø
pktÀôt
;

1527 
hhcd
->
hc
[
ch_num
].
x‚Äûr_cou¬°
 +Ô£ø
pktÀôt
;

1529 i‚Ä°((
	`USBx_HC
(
ch_num
)->
HCTSIZ
 & 
USB_OTG_HCTSIZ_PKTCNT
) > 0U)

1532 
tm¬•eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1533 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_CHDIS
;

1534 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1535 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¬•eg
;

1536 
hhcd
->
hc
[
ch_num
].
togg√Ä_√∂
 ^= 1U;

1541 
GRXSTS_PKTSTS_DATA_TOGGLE_ERR
:

1544 
GRXSTS_PKTSTS_IN_XFER_COMP
:

1545 
GRXSTS_PKTSTS_CH_HALTED
:

1549 
	}
}

1556 
	$HCD_P‚Äπt_IRQH‚Ñ¢d√Är
(
HCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hhcd
)

1558 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hhcd
->
In¬∞‚Ñ¢Àö
;

1559 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1560 
__IO
 
u√∂t32_t
 
h¬•t0
, 
h¬•t0_dup
;

1563 
h¬•t0
 = 
USBx_HPRT0
;

1564 
h¬•t0_dup
 = 
USBx_HPRT0
;

1566 
h¬•t0_dup
 &Ô£ø~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 | \

1567 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
);

1570 i‚Ä°((
h¬•t0
 & 
USB_OTG_HPRT_PCDET
) == USB_OTG_HPRT_PCDET)

1572 i‚Ä°((
h¬•t0
 & 
USB_OTG_HPRT_PCSTS
) == USB_OTG_HPRT_PCSTS)

1574 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

1575 
hhcd
->
	`C‚ÅÑ‚àöÀòC√Ülback
(hhcd);

1577 
	`HAL_HCD_C‚ÅÑ‚àöÀò_C√Ülback
(
hhcd
);

1580 
h¬•t0_dup
 |Ô£ø
USB_OTG_HPRT_PCDET
;

1584 i‚Ä°((
h¬•t0
 & 
USB_OTG_HPRT_PENCHNG
) == USB_OTG_HPRT_PENCHNG)

1586 
h¬•t0_dup
 |Ô£ø
USB_OTG_HPRT_PENCHNG
;

1588 i‚Ä°((
h¬•t0
 & 
USB_OTG_HPRT_PENA
) == USB_OTG_HPRT_PENA)

1590 i‚Ä°(
hhcd
->
In√¥
.
phy_√¥√ÅÀö
 =Ô£ø
USB_OTG_EMBEDDED_PHY
)

1592 i‚Ä°((
h¬•t0
 & 
USB_OTG_HPRT_PSPD
√ã=Ô£ø(
HPRT0_PRTSPD_LOW_SPEED
 << 17))

1594 ()
	`USB_In√¥FSLSPClkS√±
(
hhcd
->
In¬∞‚Ñ¢Àö
, 
HCFG_6_MHZ
);

1598 ()
	`USB_In√¥FSLSPClkS√±
(
hhcd
->
In¬∞‚Ñ¢Àö
, 
HCFG_48_MHZ
);

1603 i‚Ä°(
hhcd
->
In√¥
.
‚Ä¢√¨d
 =Ô£ø
HCD_SPEED_FULL
)

1605 
USBx_HOST
->
HFIR
 = 60000U;

1608 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

1609 
hhcd
->
	`P‚ÄπtE¬´b√ÄdC√Ülback
(hhcd);

1611 
	`HAL_HCD_P‚ÄπtE¬´b√Äd_C√Ülback
(
hhcd
);

1617 #i‚Ä°(
USE_HAL_HCD_REGISTER_CALLBACKS
 == 1U)

1618 
hhcd
->
	`P‚ÄπtDi√üb√ÄdC√Ülback
(hhcd);

1620 
	`HAL_HCD_P‚ÄπtDi√üb√Äd_C√Ülback
(
hhcd
);

1626 i‚Ä°((
h¬•t0
 & 
USB_OTG_HPRT_POCCHNG
) == USB_OTG_HPRT_POCCHNG)

1628 
h¬•t0_dup
 |Ô£ø
USB_OTG_HPRT_POCCHNG
;

1632 
USBx_HPRT0
 = 
h¬•t0_dup
;

1633 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_i2c.c

320 
	~"¬∞m32f1xx_h√Ü.h
"

331 #ifde‚Ä°
HAL_I2C_MODULE_ENABLED


338 
	#I2C_TIMEOUT_FLAG
 35U

	)

339 
	#I2C_TIMEOUT_BUSY_FLAG
 25U

	)

340 
	#I2C_TIMEOUT_STOP_FLAG
 5U

	)

341 
	#I2C_NO_OPTION_FRAME
 0xFFFF0000U

	)

344 
	#I2C_STATE_MSK
 ((
u√∂t32_t
)((u√∂t32_t)((u√∂t32_t)
HAL_I2C_STATE_BUSY_TX
 | (u√∂t32_t)
HAL_I2C_STATE_BUSY_RX
√ã& (u√∂t32_t)(~((u√∂t32_t)
HAL_I2C_STATE_READY
)))√ã

	)

345 
	#I2C_STATE_NONE
 ((
u√∂t32_t
)(
HAL_I2C_MODE_NONE
)√ã

	)

346 
	#I2C_STATE_MASTER_BUSY_TX
 ((
u√∂t32_t
)(((u√∂t32_t)
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
√ã| (u√∂t32_t)
HAL_I2C_MODE_MASTER
)√ã

	)

347 
	#I2C_STATE_MASTER_BUSY_RX
 ((
u√∂t32_t
)(((u√∂t32_t)
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
√ã| (u√∂t32_t)
HAL_I2C_MODE_MASTER
)√ã

	)

348 
	#I2C_STATE_SLAVE_BUSY_TX
 ((
u√∂t32_t
)(((u√∂t32_t)
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
√ã| (u√∂t32_t)
HAL_I2C_MODE_SLAVE
)√ã

	)

349 
	#I2C_STATE_SLAVE_BUSY_RX
 ((
u√∂t32_t
)(((u√∂t32_t)
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
√ã| (u√∂t32_t)
HAL_I2C_MODE_SLAVE
)√ã

	)

363 
I2C_DMAX‚ÄûrC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

364 
I2C_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

365 
I2C_DMAAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

367 
I2C_ITE¬∫‚Äπ
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

369 
HAL_S√®tusTy‚â•Def
 
I2C_Ma¬∞√ÆReque¬∞Wr√¥e
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

370 
HAL_S√®tusTy‚â•Def
 
I2C_Ma¬∞√ÆReque¬∞R√≥d
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

371 
HAL_S√®tusTy‚â•Def
 
I2C_Reque¬∞Mem‚ÄπyWr√¥e
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

372 
HAL_S√®tusTy‚â•Def
 
I2C_Reque¬∞Mem‚ÄπyR√≥d
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

375 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

376 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
F≈ìg
, u√∂t32_√†
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

377 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

378 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnBTFF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

379 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

380 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnSTOPF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

381 
HAL_S√®tusTy‚â•Def
 
I2C_Wa√¥OnSTOPReque¬∞ThroughIT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

382 
HAL_S√®tusTy‚â•Def
 
I2C_IsAcknow√ÄdgeFa√ªed
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

385 
I2C_Ma¬∞√ÆT√∏nsm√¥_TXE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

386 
I2C_Ma¬∞√ÆT√∏nsm√¥_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

387 
I2C_Ma¬∞√ÆReÀöive_RXNE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

388 
I2C_Ma¬∞√ÆReÀöive_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

389 
I2C_Ma¬∞√Æ_SB
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

390 
I2C_Ma¬∞√Æ_ADD10
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

391 
I2C_Ma¬∞√Æ_ADDR
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

393 
I2C_S≈ìveT√∏nsm√¥_TXE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

394 
I2C_S≈ìveT√∏nsm√¥_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

395 
I2C_S≈ìveReÀöive_RXNE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

396 
I2C_S≈ìveReÀöive_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

397 
I2C_S≈ìve_ADDR
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
IT2F≈ìgs
);

398 
I2C_S≈ìve_STOPF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

399 
I2C_S≈ìve_AF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

401 
I2C_Mem‚ÄπyT√∏nsm√¥_TXE_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

404 
I2C_C‚ÅÑv√ÆtOth√ÆX‚ÄûrO¬±i‚ÅÑs
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
);

453 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_In√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

455 
u√∂t32_t
 
‚Ä∞eq√∏nge
;

456 
u√∂t32_t
 
pÀõk1
;

459 i‚Ä°(
hi2c
 =Ô£ø
NULL
)

461  
HAL_ERROR
;

465 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In¬∞‚Ñ¢Àö
));

466 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_CLOCK_SPEED
(
hi2c
->
In√¥
.
ClockS‚â•ed
));

467 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_DUTY_CYCLE
(
hi2c
->
In√¥
.
DutyCyÀõe
));

468 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_OWN_ADDRESS1
(
hi2c
->
In√¥
.
OwnAdd¬™ss1
));

469 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_ADDRESSING_MODE
(
hi2c
->
In√¥
.
Add¬™ss√∂gMode
));

470 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_DUAL_ADDRESS
(
hi2c
->
In√¥
.
Du√ÜAdd¬™ssMode
));

471 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_OWN_ADDRESS2
(
hi2c
->
In√¥
.
OwnAdd¬™ss2
));

472 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_GENERAL_CALL
(
hi2c
->
In√¥
.
G√≠√Æ√ÜC√ÜlMode
));

473 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_NO_STRETCH
(
hi2c
->
In√¥
.
NoS√•√´chMode
));

475 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_RESET
)

478 
hi2c
->
Lock
 = 
HAL_UNLOCKED
;

480 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

482 
hi2c
->
Ma¬∞√ÆTxC‚àÇtC√Ülback
 = 
HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
;

483 
hi2c
->
Ma¬∞√ÆRxC‚àÇtC√Ülback
 = 
HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
;

484 
hi2c
->
S≈ìveTxC‚àÇtC√Ülback
 = 
HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
;

485 
hi2c
->
S≈ìveRxC‚àÇtC√Ülback
 = 
HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
;

486 
hi2c
->
Li¬∞√≠C‚àÇtC√Ülback
 = 
HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
;

487 
hi2c
->
MemTxC‚àÇtC√Ülback
 = 
HAL_I2C_MemTxC‚àÇtC√Ülback
;

488 
hi2c
->
MemRxC‚àÇtC√Ülback
 = 
HAL_I2C_MemRxC‚àÇtC√Ülback
;

489 
hi2c
->
E¬∫‚ÄπC√Ülback
 = 
HAL_I2C_E¬∫‚ÄπC√Ülback
;

490 
hi2c
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_I2C_Ab‚ÄπtC‚àÇtC√Ülback
;

491 
hi2c
->
AddrC√Ülback
 = 
HAL_I2C_AddrC√Ülback
;

493 i‚Ä°(
hi2c
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

495 
hi2c
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_I2C_M‚Ä¢In√¥
;

499 
hi2c
->
	`M‚Ä¢In√¥C√Ülback
(hi2c);

502 
	`HAL_I2C_M‚Ä¢In√¥
(
hi2c
);

506 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY
;

509 
	`__HAL_I2C_DISABLE
(
hi2c
);

512 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø
I2C_CR1_SWRST
;

513 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~
I2C_CR1_SWRST
;

516 
pÀõk1
 = 
	`HAL_RCC_G√´PCLK1F¬™q
();

519 i‚Ä°(
	`I2C_MIN_PCLK_FREQ
(
pÀõk1
, 
hi2c
->
In√¥
.
ClockS‚â•ed
) == 1U)

521  
HAL_ERROR
;

525 
‚Ä∞eq√∏nge
 = 
	`I2C_FREQRANGE
(
pÀõk1
);

529 
	`MODIFY_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_FREQ
, 
‚Ä∞eq√∏nge
);

533 
	`MODIFY_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
TRISE
, 
I2C_TRISE_TRISE
, 
	`I2C_RISE_TIME
(
‚Ä∞eq√∏nge
, hi2c->
In√¥
.
ClockS‚â•ed
));

537 
	`MODIFY_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CCR
, (
I2C_CCR_FS
 | 
I2C_CCR_DUTY
 | 
I2C_CCR_CCR
), 
	`I2C_SPEED
(
pÀõk1
, hi2c->
In√¥
.
ClockS‚â•ed
, hi2c->In√¥.
DutyCyÀõe
));

541 
	`MODIFY_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, (
I2C_CR1_ENGC
 | 
I2C_CR1_NOSTRETCH
), (hi2c->
In√¥
.
G√≠√Æ√ÜC√ÜlMode
 | hi2c->In√¥.
NoS√•√´chMode
));

545 
	`MODIFY_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
OAR1
, (
I2C_OAR1_ADDMODE
 | 
I2C_OAR1_ADD8_9
 | 
I2C_OAR1_ADD1_7
 | 
I2C_OAR1_ADD0
), (hi2c->
In√¥
.
Add¬™ss√∂gMode
 | hi2c->In√¥.
OwnAdd¬™ss1
));

549 
	`MODIFY_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
OAR2
, (
I2C_OAR2_ENDUAL
 | 
I2C_OAR2_ADD2
), (hi2c->
In√¥
.
Du√ÜAdd¬™ssMode
 | hi2c->In√¥.
OwnAdd¬™ss2
));

552 
	`__HAL_I2C_ENABLE
(
hi2c
);

554 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

555 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

556 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

557 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

559  
HAL_OK
;

560 
	}
}

568 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_DeIn√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

571 i‚Ä°(
hi2c
 =Ô£ø
NULL
)

573  
HAL_ERROR
;

577 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In¬∞‚Ñ¢Àö
));

579 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY
;

582 
	`__HAL_I2C_DISABLE
(
hi2c
);

584 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

585 i‚Ä°(
hi2c
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

587 
hi2c
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_I2C_M‚Ä¢DeIn√¥
;

591 
hi2c
->
	`M‚Ä¢DeIn√¥C√Ülback
(hi2c);

594 
	`HAL_I2C_M‚Ä¢DeIn√¥
(
hi2c
);

597 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

598 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_RESET
;

599 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

600 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

603 
	`__HAL_UNLOCK
(
hi2c
);

605  
HAL_OK
;

606 
	}
}

614 
__w√≥k
 
	$HAL_I2C_M‚Ä¢In√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

617 
	`UNUSED
(
hi2c
);

622 
	}
}

630 
__w√≥k
 
	$HAL_I2C_M‚Ä¢DeIn√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

633 
	`UNUSED
(
hi2c
);

638 
	}
}

640 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

662 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Regi¬∞√ÆC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
HAL_I2C_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pI2C_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

664 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

666 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

669 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

671  
HAL_ERROR
;

674 
	`__HAL_LOCK
(
hi2c
);

676 i‚Ä°(
HAL_I2C_STATE_READY
 =Ô£ø
hi2c
->
S√®√£
)

678 
C√ÜlbackID
)

680 
HAL_I2C_MASTER_TX_COMPLETE_CB_ID
 :

681 
hi2c
->
Ma¬∞√ÆTxC‚àÇtC√Ülback
 = 
pC√Ülback
;

684 
HAL_I2C_MASTER_RX_COMPLETE_CB_ID
 :

685 
hi2c
->
Ma¬∞√ÆRxC‚àÇtC√Ülback
 = 
pC√Ülback
;

688 
HAL_I2C_SLAVE_TX_COMPLETE_CB_ID
 :

689 
hi2c
->
S≈ìveTxC‚àÇtC√Ülback
 = 
pC√Ülback
;

692 
HAL_I2C_SLAVE_RX_COMPLETE_CB_ID
 :

693 
hi2c
->
S≈ìveRxC‚àÇtC√Ülback
 = 
pC√Ülback
;

696 
HAL_I2C_LISTEN_COMPLETE_CB_ID
 :

697 
hi2c
->
Li¬∞√≠C‚àÇtC√Ülback
 = 
pC√Ülback
;

700 
HAL_I2C_MEM_TX_COMPLETE_CB_ID
 :

701 
hi2c
->
MemTxC‚àÇtC√Ülback
 = 
pC√Ülback
;

704 
HAL_I2C_MEM_RX_COMPLETE_CB_ID
 :

705 
hi2c
->
MemRxC‚àÇtC√Ülback
 = 
pC√Ülback
;

708 
HAL_I2C_ERROR_CB_ID
 :

709 
hi2c
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

712 
HAL_I2C_ABORT_CB_ID
 :

713 
hi2c
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

716 
HAL_I2C_MSPINIT_CB_ID
 :

717 
hi2c
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

720 
HAL_I2C_MSPDEINIT_CB_ID
 :

721 
hi2c
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

726 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

729 
¬∞¬©us
 = 
HAL_ERROR
;

733 i‚Ä°(
HAL_I2C_STATE_RESET
 =Ô£ø
hi2c
->
S√®√£
)

735 
C√ÜlbackID
)

737 
HAL_I2C_MSPINIT_CB_ID
 :

738 
hi2c
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

741 
HAL_I2C_MSPDEINIT_CB_ID
 :

742 
hi2c
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

747 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

750 
¬∞¬©us
 = 
HAL_ERROR
;

757 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

760 
¬∞¬©us
 = 
HAL_ERROR
;

764 
	`__HAL_UNLOCK
(
hi2c
);

765  
¬∞¬©us
;

766 
	}
}

789 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_UnRegi¬∞√ÆC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
HAL_I2C_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

791 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

794 
	`__HAL_LOCK
(
hi2c
);

796 i‚Ä°(
HAL_I2C_STATE_READY
 =Ô£ø
hi2c
->
S√®√£
)

798 
C√ÜlbackID
)

800 
HAL_I2C_MASTER_TX_COMPLETE_CB_ID
 :

801 
hi2c
->
Ma¬∞√ÆTxC‚àÇtC√Ülback
 = 
HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
;

804 
HAL_I2C_MASTER_RX_COMPLETE_CB_ID
 :

805 
hi2c
->
Ma¬∞√ÆRxC‚àÇtC√Ülback
 = 
HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
;

808 
HAL_I2C_SLAVE_TX_COMPLETE_CB_ID
 :

809 
hi2c
->
S≈ìveTxC‚àÇtC√Ülback
 = 
HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
;

812 
HAL_I2C_SLAVE_RX_COMPLETE_CB_ID
 :

813 
hi2c
->
S≈ìveRxC‚àÇtC√Ülback
 = 
HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
;

816 
HAL_I2C_LISTEN_COMPLETE_CB_ID
 :

817 
hi2c
->
Li¬∞√≠C‚àÇtC√Ülback
 = 
HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
;

820 
HAL_I2C_MEM_TX_COMPLETE_CB_ID
 :

821 
hi2c
->
MemTxC‚àÇtC√Ülback
 = 
HAL_I2C_MemTxC‚àÇtC√Ülback
;

824 
HAL_I2C_MEM_RX_COMPLETE_CB_ID
 :

825 
hi2c
->
MemRxC‚àÇtC√Ülback
 = 
HAL_I2C_MemRxC‚àÇtC√Ülback
;

828 
HAL_I2C_ERROR_CB_ID
 :

829 
hi2c
->
E¬∫‚ÄπC√Ülback
 = 
HAL_I2C_E¬∫‚ÄπC√Ülback
;

832 
HAL_I2C_ABORT_CB_ID
 :

833 
hi2c
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_I2C_Ab‚ÄπtC‚àÇtC√Ülback
;

836 
HAL_I2C_MSPINIT_CB_ID
 :

837 
hi2c
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_I2C_M‚Ä¢In√¥
;

840 
HAL_I2C_MSPDEINIT_CB_ID
 :

841 
hi2c
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_I2C_M‚Ä¢DeIn√¥
;

846 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

849 
¬∞¬©us
 = 
HAL_ERROR
;

853 i‚Ä°(
HAL_I2C_STATE_RESET
 =Ô£ø
hi2c
->
S√®√£
)

855 
C√ÜlbackID
)

857 
HAL_I2C_MSPINIT_CB_ID
 :

858 
hi2c
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_I2C_M‚Ä¢In√¥
;

861 
HAL_I2C_MSPDEINIT_CB_ID
 :

862 
hi2c
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_I2C_M‚Ä¢DeIn√¥
;

867 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

870 
¬∞¬©us
 = 
HAL_ERROR
;

877 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

880 
¬∞¬©us
 = 
HAL_ERROR
;

884 
	`__HAL_UNLOCK
(
hi2c
);

885  
¬∞¬©us
;

886 
	}
}

896 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Regi¬∞√ÆAddrC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
pI2C_AddrC√ÜlbackTy‚â•Def
 
pC√Ülback
)

898 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

900 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

903 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

905  
HAL_ERROR
;

908 
	`__HAL_LOCK
(
hi2c
);

910 i‚Ä°(
HAL_I2C_STATE_READY
 =Ô£ø
hi2c
->
S√®√£
)

912 
hi2c
->
AddrC√Ülback
 = 
pC√Ülback
;

917 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

920 
¬∞¬©us
 = 
HAL_ERROR
;

924 
	`__HAL_UNLOCK
(
hi2c
);

925  
¬∞¬©us
;

926 
	}
}

935 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_UnRegi¬∞√ÆAddrC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

937 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

940 
	`__HAL_LOCK
(
hi2c
);

942 i‚Ä°(
HAL_I2C_STATE_READY
 =Ô£ø
hi2c
->
S√®√£
)

944 
hi2c
->
AddrC√Ülback
 = 
HAL_I2C_AddrC√Ülback
;

949 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_INVALID_CALLBACK
;

952 
¬∞¬©us
 = 
HAL_ERROR
;

956 
	`__HAL_UNLOCK
(
hi2c
);

957  
¬∞¬©us
;

958 
	}
}

1050 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_T√∏nsm√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
)

1053 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1055 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1058 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1060  
HAL_BUSY
;

1064 
	`__HAL_LOCK
(
hi2c
);

1067 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1070 
	`__HAL_I2C_ENABLE
(
hi2c
);

1074 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1076 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

1077 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1078 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1081 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1082 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1083 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1084 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1087 i‚Ä°(
	`I2C_Ma¬∞√ÆReque¬∞Wr√¥e
(
hi2c
, 
DevAdd¬™ss
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1089  
HAL_ERROR
;

1093 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1095 
hi2c
->
X‚ÄûrSize
 > 0U)

1098 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1100 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

1103 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1105  
HAL_ERROR
;

1109 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

1112 
hi2c
->
pBuffP√•
++;

1115 
hi2c
->
X‚ÄûrCou¬°
--;

1116 
hi2c
->
X‚ÄûrSize
--;

1118 i‚Ä°((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
√ã&& (hi2c->
X‚ÄûrSize
 != 0U))

1121 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

1124 
hi2c
->
pBuffP√•
++;

1127 
hi2c
->
X‚ÄûrCou¬°
--;

1128 
hi2c
->
X‚ÄûrSize
--;

1132 i‚Ä°(
	`I2C_Wa√¥OnBTFF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1134 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

1137 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1139  
HAL_ERROR
;

1144 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1146 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1147 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1150 
	`__HAL_UNLOCK
(
hi2c
);

1152  
HAL_OK
;

1156  
HAL_BUSY
;

1158 
	}
}

1171 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_ReÀöive
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
)

1173 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

1176 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1178 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1181 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1183  
HAL_BUSY
;

1187 
	`__HAL_LOCK
(
hi2c
);

1190 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1193 
	`__HAL_I2C_ENABLE
(
hi2c
);

1197 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1199 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

1200 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1201 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1204 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1205 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1206 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1207 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1210 i‚Ä°(
	`I2C_Ma¬∞√ÆReque¬∞R√≥d
(
hi2c
, 
DevAdd¬™ss
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1212  
HAL_ERROR
;

1215 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 0U)

1218 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1221 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1223 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 1U)

1226 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1230 
	`__di√üb√Ä_√∫q
();

1233 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1236 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1239 
	`__√≠ab√Ä_√∫q
();

1241 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 2U)

1244 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1248 
	`__di√üb√Ä_√∫q
();

1251 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1254 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1257 
	`__√≠ab√Ä_√∫q
();

1262 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1265 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1268 
hi2c
->
X‚ÄûrSize
 > 0U)

1270 i‚Ä°(
hi2c
->
X‚ÄûrSize
 <= 3U)

1273 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 1U)

1276 i‚Ä°(
	`I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1278  
HAL_ERROR
;

1282 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1285 
hi2c
->
pBuffP√•
++;

1288 
hi2c
->
X‚ÄûrSize
--;

1289 
hi2c
->
X‚ÄûrCou¬°
--;

1292 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 2U)

1295 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1297  
HAL_ERROR
;

1302 
	`__di√üb√Ä_√∫q
();

1305 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1308 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1311 
hi2c
->
pBuffP√•
++;

1314 
hi2c
->
X‚ÄûrSize
--;

1315 
hi2c
->
X‚ÄûrCou¬°
--;

1318 
	`__√≠ab√Ä_√∫q
();

1321 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1324 
hi2c
->
pBuffP√•
++;

1327 
hi2c
->
X‚ÄûrSize
--;

1328 
hi2c
->
X‚ÄûrCou¬°
--;

1334 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1336  
HAL_ERROR
;

1340 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1344 
	`__di√üb√Ä_√∫q
();

1347 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1350 
hi2c
->
pBuffP√•
++;

1353 
hi2c
->
X‚ÄûrSize
--;

1354 
hi2c
->
X‚ÄûrCou¬°
--;

1357 
cou¬°
 = 
I2C_TIMEOUT_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

1360 
cou¬°
--;

1361 i‚Ä°(
cou¬°
 == 0U)

1363 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

1364 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1365 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1366 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

1369 
	`__√≠ab√Ä_√∫q
();

1372 
	`__HAL_UNLOCK
(
hi2c
);

1374  
HAL_ERROR
;

1377 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
RESET
);

1380 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

1383 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1386 
hi2c
->
pBuffP√•
++;

1389 
hi2c
->
X‚ÄûrSize
--;

1390 
hi2c
->
X‚ÄûrCou¬°
--;

1393 
	`__√≠ab√Ä_√∫q
();

1396 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1399 
hi2c
->
pBuffP√•
++;

1402 
hi2c
->
X‚ÄûrSize
--;

1403 
hi2c
->
X‚ÄûrCou¬°
--;

1409 i‚Ä°(
	`I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1411  
HAL_ERROR
;

1415 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1418 
hi2c
->
pBuffP√•
++;

1421 
hi2c
->
X‚ÄûrSize
--;

1422 
hi2c
->
X‚ÄûrCou¬°
--;

1424 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
)

1427 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1430 
hi2c
->
pBuffP√•
++;

1433 
hi2c
->
X‚ÄûrSize
--;

1434 
hi2c
->
X‚ÄûrCou¬°
--;

1439 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1440 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1443 
	`__HAL_UNLOCK
(
hi2c
);

1445  
HAL_OK
;

1449  
HAL_BUSY
;

1451 
	}
}

1462 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_T√∏nsm√¥
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

1465 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1467 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1469 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1471  
HAL_ERROR
;

1475 
	`__HAL_LOCK
(
hi2c
);

1478 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1481 
	`__HAL_I2C_ENABLE
(
hi2c
);

1485 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1487 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

1488 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1489 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1492 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1493 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1494 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1495 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1498 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1501 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1503  
HAL_ERROR
;

1507 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1510 i‚Ä°(
hi2c
->
In√¥
.
Add¬™ss√∂gMode
 =Ô£ø
I2C_ADDRESSINGMODE_10BIT
)

1513 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1515  
HAL_ERROR
;

1519 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1522 
hi2c
->
X‚ÄûrSize
 > 0U)

1525 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1528 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1530  
HAL_ERROR
;

1534 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

1537 
hi2c
->
pBuffP√•
++;

1540 
hi2c
->
X‚ÄûrCou¬°
--;

1541 
hi2c
->
X‚ÄûrSize
--;

1543 i‚Ä°((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
√ã&& (hi2c->
X‚ÄûrSize
 != 0U))

1546 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

1549 
hi2c
->
pBuffP√•
++;

1552 
hi2c
->
X‚ÄûrCou¬°
--;

1553 
hi2c
->
X‚ÄûrSize
--;

1558 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_AF
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1560  
HAL_ERROR
;

1564 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

1567 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1569 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1570 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1573 
	`__HAL_UNLOCK
(
hi2c
);

1575  
HAL_OK
;

1579  
HAL_BUSY
;

1581 
	}
}

1592 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_ReÀöive
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

1595 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1597 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1599 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 =Ô£ø(
u√∂t16_t
)0))

1601  
HAL_ERROR
;

1605 
	`__HAL_LOCK
(
hi2c
);

1608 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1611 
	`__HAL_I2C_ENABLE
(
hi2c
);

1615 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1617 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

1618 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1619 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1622 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1623 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1624 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1625 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1628 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1631 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1633  
HAL_ERROR
;

1637 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1639 
hi2c
->
X‚ÄûrSize
 > 0U)

1642 i‚Ä°(
	`I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1645 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1647  
HAL_ERROR
;

1651 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1654 
hi2c
->
pBuffP√•
++;

1657 
hi2c
->
X‚ÄûrSize
--;

1658 
hi2c
->
X‚ÄûrCou¬°
--;

1660 i‚Ä°((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
√ã&& (hi2c->
X‚ÄûrSize
 != 0U))

1663 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

1666 
hi2c
->
pBuffP√•
++;

1669 
hi2c
->
X‚ÄûrSize
--;

1670 
hi2c
->
X‚ÄûrCou¬°
--;

1675 i‚Ä°(
	`I2C_Wa√¥OnSTOPF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1678 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1680  
HAL_ERROR
;

1684 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

1687 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1689 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1690 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1693 
	`__HAL_UNLOCK
(
hi2c
);

1695  
HAL_OK
;

1699  
HAL_BUSY
;

1701 
	}
}

1713 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

1715 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

1717 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1720 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

1723 
cou¬°
--;

1724 i‚Ä°(
cou¬°
 == 0U)

1726 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

1727 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1728 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1729 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

1732 
	`__HAL_UNLOCK
(
hi2c
);

1734  
HAL_ERROR
;

1737 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

1740 
	`__HAL_LOCK
(
hi2c
);

1743 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1746 
	`__HAL_I2C_ENABLE
(
hi2c
);

1750 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1752 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

1753 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1754 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1757 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1758 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1759 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1760 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1761 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

1764 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

1767 
	`__HAL_UNLOCK
(
hi2c
);

1773 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1775  
HAL_OK
;

1779  
HAL_BUSY
;

1781 
	}
}

1793 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

1795 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

1797 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1800 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

1803 
cou¬°
--;

1804 i‚Ä°(
cou¬°
 == 0U)

1806 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

1807 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

1808 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1809 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

1812 
	`__HAL_UNLOCK
(
hi2c
);

1814  
HAL_ERROR
;

1817 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

1820 
	`__HAL_LOCK
(
hi2c
);

1823 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1826 
	`__HAL_I2C_ENABLE
(
hi2c
);

1830 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1832 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

1833 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1834 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1837 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1838 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1839 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1840 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1841 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

1844 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1847 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

1850 
	`__HAL_UNLOCK
(
hi2c
);

1857 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1859  
HAL_OK
;

1863  
HAL_BUSY
;

1865 
	}
}

1875 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1878 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1880 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1882  
HAL_ERROR
;

1886 
	`__HAL_LOCK
(
hi2c
);

1889 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1892 
	`__HAL_I2C_ENABLE
(
hi2c
);

1896 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1898 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

1899 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1900 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1903 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1904 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1905 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1906 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1909 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1912 
	`__HAL_UNLOCK
(
hi2c
);

1919 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1921  
HAL_OK
;

1925  
HAL_BUSY
;

1927 
	}
}

1937 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1940 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

1942 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1944  
HAL_ERROR
;

1948 
	`__HAL_LOCK
(
hi2c
);

1951 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1954 
	`__HAL_I2C_ENABLE
(
hi2c
);

1958 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

1960 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

1961 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1962 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

1965 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

1966 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

1967 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

1968 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

1971 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

1974 
	`__HAL_UNLOCK
(
hi2c
);

1981 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1983  
HAL_OK
;

1987  
HAL_BUSY
;

1989 
	}
}

2001 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

2003 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2004 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

2006 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2009 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

2012 
cou¬°
--;

2013 i‚Ä°(
cou¬°
 == 0U)

2015 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

2016 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2017 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2018 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

2021 
	`__HAL_UNLOCK
(
hi2c
);

2023  
HAL_ERROR
;

2026 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

2029 
	`__HAL_LOCK
(
hi2c
);

2032 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2035 
	`__HAL_I2C_ENABLE
(
hi2c
);

2039 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2041 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

2042 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2043 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2046 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2047 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2048 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2049 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2050 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

2052 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

2055 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

2058 
hi2c
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

2061 
hi2c
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

2062 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2065 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬©x
, (
u√∂t32_t
)hi2c->
pBuffP√•
, (u√∂t32_t)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, hi2c->
X‚ÄûrSize
);

2067 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

2070 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2073 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

2076 
	`__HAL_UNLOCK
(
hi2c
);

2083 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2086 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

2091 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2092 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2095 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

2098 
	`__HAL_UNLOCK
(
hi2c
);

2100  
HAL_ERROR
;

2106 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2109 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

2112 
	`__HAL_UNLOCK
(
hi2c
);

2119 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2122  
HAL_OK
;

2126  
HAL_BUSY
;

2128 
	}
}

2140 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

2142 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2143 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

2145 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2148 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

2151 
cou¬°
--;

2152 i‚Ä°(
cou¬°
 == 0U)

2154 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

2155 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2156 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2157 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

2160 
	`__HAL_UNLOCK
(
hi2c
);

2162  
HAL_ERROR
;

2165 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

2168 
	`__HAL_LOCK
(
hi2c
);

2171 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2174 
	`__HAL_I2C_ENABLE
(
hi2c
);

2178 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2180 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

2181 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2182 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2185 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2186 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2187 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2188 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2189 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

2191 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

2194 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

2197 
hi2c
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

2200 
hi2c
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

2201 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2204 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬®x
, (
u√∂t32_t
)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)hi2c->
pBuffP√•
, hi2c->
X‚ÄûrSize
);

2206 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

2209 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2212 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

2215 
	`__HAL_UNLOCK
(
hi2c
);

2222 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2225 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

2230 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2231 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2234 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

2237 
	`__HAL_UNLOCK
(
hi2c
);

2239  
HAL_ERROR
;

2245 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2248 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

2251 
	`__HAL_UNLOCK
(
hi2c
);

2258 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2261  
HAL_OK
;

2265  
HAL_BUSY
;

2267 
	}
}

2277 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

2279 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

2281 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2283 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

2285  
HAL_ERROR
;

2289 
	`__HAL_LOCK
(
hi2c
);

2292 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2295 
	`__HAL_I2C_ENABLE
(
hi2c
);

2299 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2301 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

2302 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2303 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2306 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2307 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2308 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2309 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2312 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

2315 
hi2c
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

2318 
hi2c
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

2319 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2322 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬©x
, (
u√∂t32_t
)hi2c->
pBuffP√•
, (u√∂t32_t)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, hi2c->
X‚ÄûrSize
);

2324 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

2327 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2330 
	`__HAL_UNLOCK
(
hi2c
);

2336 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2339 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
I2C_CR2_DMAEN
;

2341  
HAL_OK
;

2346 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2347 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2350 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

2353 
	`__HAL_UNLOCK
(
hi2c
);

2355  
HAL_ERROR
;

2360  
HAL_BUSY
;

2362 
	}
}

2372 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

2374 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

2376 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2378 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

2380  
HAL_ERROR
;

2384 
	`__HAL_LOCK
(
hi2c
);

2387 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2390 
	`__HAL_I2C_ENABLE
(
hi2c
);

2394 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2396 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

2397 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2398 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2401 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2402 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2403 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2404 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2407 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

2410 
hi2c
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

2413 
hi2c
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

2414 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2417 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬®x
, (
u√∂t32_t
)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)hi2c->
pBuffP√•
, hi2c->
X‚ÄûrSize
);

2419 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

2422 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2425 
	`__HAL_UNLOCK
(
hi2c
);

2431 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2434 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

2436  
HAL_OK
;

2441 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2442 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2445 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

2448 
	`__HAL_UNLOCK
(
hi2c
);

2450  
HAL_ERROR
;

2455  
HAL_BUSY
;

2457 
	}
}

2472 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Mem_Wr√¥e
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
)

2475 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2478 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2480 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2483 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2485  
HAL_BUSY
;

2489 
	`__HAL_LOCK
(
hi2c
);

2492 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2495 
	`__HAL_I2C_ENABLE
(
hi2c
);

2499 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2501 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

2502 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2503 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2506 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2507 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2508 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2509 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2512 i‚Ä°(
	`I2C_Reque¬∞Mem‚ÄπyWr√¥e
(
hi2c
, 
DevAdd¬™ss
, 
MemAdd¬™ss
, 
MemAddSize
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2514  
HAL_ERROR
;

2517 
hi2c
->
X‚ÄûrSize
 > 0U)

2520 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2522 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

2525 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2527  
HAL_ERROR
;

2531 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

2534 
hi2c
->
pBuffP√•
++;

2537 
hi2c
->
X‚ÄûrSize
--;

2538 
hi2c
->
X‚ÄûrCou¬°
--;

2540 i‚Ä°((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
√ã&& (hi2c->
X‚ÄûrSize
 != 0U))

2543 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

2546 
hi2c
->
pBuffP√•
++;

2549 
hi2c
->
X‚ÄûrSize
--;

2550 
hi2c
->
X‚ÄûrCou¬°
--;

2555 i‚Ä°(
	`I2C_Wa√¥OnBTFF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2557 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

2560 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2562  
HAL_ERROR
;

2566 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2568 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2569 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2572 
	`__HAL_UNLOCK
(
hi2c
);

2574  
HAL_OK
;

2578  
HAL_BUSY
;

2580 
	}
}

2595 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Mem_R√≥d
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
)

2597 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2600 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2603 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2605 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2608 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2610  
HAL_BUSY
;

2614 
	`__HAL_LOCK
(
hi2c
);

2617 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2620 
	`__HAL_I2C_ENABLE
(
hi2c
);

2624 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2626 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

2627 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2628 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2631 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2632 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2633 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2634 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2637 i‚Ä°(
	`I2C_Reque¬∞Mem‚ÄπyR√≥d
(
hi2c
, 
DevAdd¬™ss
, 
MemAdd¬™ss
, 
MemAddSize
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2639  
HAL_ERROR
;

2642 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 0U)

2645 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2648 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2650 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 1U)

2653 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2657 
	`__di√üb√Ä_√∫q
();

2660 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2663 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2666 
	`__√≠ab√Ä_√∫q
();

2668 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 2U)

2671 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2675 
	`__di√üb√Ä_√∫q
();

2678 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2681 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2684 
	`__√≠ab√Ä_√∫q
();

2689 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2691 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2694 
hi2c
->
X‚ÄûrSize
 > 0U)

2696 i‚Ä°(
hi2c
->
X‚ÄûrSize
 <= 3U)

2699 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 1U)

2702 i‚Ä°(
	`I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2704  
HAL_ERROR
;

2708 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2711 
hi2c
->
pBuffP√•
++;

2714 
hi2c
->
X‚ÄûrSize
--;

2715 
hi2c
->
X‚ÄûrCou¬°
--;

2718 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 2U)

2721 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2723  
HAL_ERROR
;

2728 
	`__di√üb√Ä_√∫q
();

2731 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2734 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2737 
hi2c
->
pBuffP√•
++;

2740 
hi2c
->
X‚ÄûrSize
--;

2741 
hi2c
->
X‚ÄûrCou¬°
--;

2744 
	`__√≠ab√Ä_√∫q
();

2747 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2750 
hi2c
->
pBuffP√•
++;

2753 
hi2c
->
X‚ÄûrSize
--;

2754 
hi2c
->
X‚ÄûrCou¬°
--;

2760 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2762  
HAL_ERROR
;

2766 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

2770 
	`__di√üb√Ä_√∫q
();

2773 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2776 
hi2c
->
pBuffP√•
++;

2779 
hi2c
->
X‚ÄûrSize
--;

2780 
hi2c
->
X‚ÄûrCou¬°
--;

2783 
cou¬°
 = 
I2C_TIMEOUT_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

2786 
cou¬°
--;

2787 i‚Ä°(
cou¬°
 == 0U)

2789 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

2790 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2791 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2792 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

2795 
	`__√≠ab√Ä_√∫q
();

2798 
	`__HAL_UNLOCK
(
hi2c
);

2800  
HAL_ERROR
;

2803 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
RESET
);

2806 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

2809 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2812 
hi2c
->
pBuffP√•
++;

2815 
hi2c
->
X‚ÄûrSize
--;

2816 
hi2c
->
X‚ÄûrCou¬°
--;

2819 
	`__√≠ab√Ä_√∫q
();

2822 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2825 
hi2c
->
pBuffP√•
++;

2828 
hi2c
->
X‚ÄûrSize
--;

2829 
hi2c
->
X‚ÄûrCou¬°
--;

2835 i‚Ä°(
	`I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2837  
HAL_ERROR
;

2841 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2844 
hi2c
->
pBuffP√•
++;

2847 
hi2c
->
X‚ÄûrSize
--;

2848 
hi2c
->
X‚ÄûrCou¬°
--;

2850 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
)

2853 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

2856 
hi2c
->
pBuffP√•
++;

2859 
hi2c
->
X‚ÄûrSize
--;

2860 
hi2c
->
X‚ÄûrCou¬°
--;

2865 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2866 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2869 
	`__HAL_UNLOCK
(
hi2c
);

2871  
HAL_OK
;

2875  
HAL_BUSY
;

2877 
	}
}

2891 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Mem_Wr√¥e_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

2893 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2896 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2898 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2901 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

2904 
cou¬°
--;

2905 i‚Ä°(
cou¬°
 == 0U)

2907 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

2908 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2909 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2910 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

2913 
	`__HAL_UNLOCK
(
hi2c
);

2915  
HAL_ERROR
;

2918 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

2921 
	`__HAL_LOCK
(
hi2c
);

2924 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2927 
	`__HAL_I2C_ENABLE
(
hi2c
);

2931 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

2933 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

2934 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2935 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

2938 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

2939 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

2940 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

2941 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

2942 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

2943 
hi2c
->
Memadd¬™ss
 = 
MemAdd¬™ss
;

2944 
hi2c
->
MemaddSize
 = 
MemAddSize
;

2945 
hi2c
->
Ev√≠tCou¬°
 = 0U;

2948 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

2951 
	`__HAL_UNLOCK
(
hi2c
);

2958 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2960  
HAL_OK
;

2964  
HAL_BUSY
;

2966 
	}
}

2979 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Mem_R√≥d_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

2981 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2984 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2986 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

2989 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

2992 
cou¬°
--;

2993 i‚Ä°(
cou¬°
 == 0U)

2995 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

2996 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

2997 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2998 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3001 
	`__HAL_UNLOCK
(
hi2c
);

3003  
HAL_ERROR
;

3006 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3009 
	`__HAL_LOCK
(
hi2c
);

3012 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3015 
	`__HAL_I2C_ENABLE
(
hi2c
);

3019 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3021 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

3022 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3023 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3026 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3027 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

3028 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

3029 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

3030 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

3031 
hi2c
->
Memadd¬™ss
 = 
MemAdd¬™ss
;

3032 
hi2c
->
MemaddSize
 = 
MemAddSize
;

3033 
hi2c
->
Ev√≠tCou¬°
 = 0U;

3036 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3039 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

3042 
	`__HAL_UNLOCK
(
hi2c
);

3044 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

3051 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3053  
HAL_OK
;

3057  
HAL_BUSY
;

3059 
	}
}

3073 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Mem_Wr√¥e_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

3075 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

3076 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

3079 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3082 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

3084 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3087 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

3090 
cou¬°
--;

3091 i‚Ä°(
cou¬°
 == 0U)

3093 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

3094 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3095 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3096 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3099 
	`__HAL_UNLOCK
(
hi2c
);

3101  
HAL_ERROR
;

3104 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3107 
	`__HAL_LOCK
(
hi2c
);

3110 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3113 
	`__HAL_I2C_ENABLE
(
hi2c
);

3117 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3119 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

3120 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3121 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3124 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3125 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

3126 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

3127 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

3129 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

3132 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

3135 
hi2c
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

3138 
hi2c
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

3139 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

3142 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬©x
, (
u√∂t32_t
)hi2c->
pBuffP√•
, (u√∂t32_t)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, hi2c->
X‚ÄûrSize
);

3144 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

3147 i‚Ä°(
	`I2C_Reque¬∞Mem‚ÄπyWr√¥e
(
hi2c
, 
DevAdd¬™ss
, 
MemAdd¬™ss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3150 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬©x
);

3153 
	`UNUSED
(
dmax‚Äûr¬∞¬©us
);

3156 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

3158 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

3162 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3164 
hi2c
->
X‚ÄûrSize
 = 0U;

3165 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

3168 
	`__HAL_I2C_DISABLE
(
hi2c
);

3170  
HAL_ERROR
;

3174 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3177 
	`__HAL_UNLOCK
(
hi2c
);

3183 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_ERR
);

3186 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

3188  
HAL_OK
;

3193 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3194 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3197 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

3200 
	`__HAL_UNLOCK
(
hi2c
);

3202  
HAL_ERROR
;

3208 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3209 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3212 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_SIZE
;

3215 
	`__HAL_UNLOCK
(
hi2c
);

3217  
HAL_ERROR
;

3222  
HAL_BUSY
;

3224 
	}
}

3238 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Mem_R√≥d_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
)

3241 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3242 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

3243 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

3246 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

3248 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3251 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

3254 
cou¬°
--;

3255 i‚Ä°(
cou¬°
 == 0U)

3257 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

3258 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3259 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3260 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3263 
	`__HAL_UNLOCK
(
hi2c
);

3265  
HAL_ERROR
;

3268 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3271 
	`__HAL_LOCK
(
hi2c
);

3274 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3277 
	`__HAL_I2C_ENABLE
(
hi2c
);

3281 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3283 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

3284 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3285 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3288 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3289 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

3290 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

3291 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

3293 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

3296 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

3299 
hi2c
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

3302 
hi2c
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

3303 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

3306 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬®x
, (
u√∂t32_t
)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)hi2c->
pBuffP√•
, hi2c->
X‚ÄûrSize
);

3308 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

3311 i‚Ä°(
	`I2C_Reque¬∞Mem‚ÄπyR√≥d
(
hi2c
, 
DevAdd¬™ss
, 
MemAdd¬™ss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3314 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬®x
);

3317 
	`UNUSED
(
dmax‚Äûr¬∞¬©us
);

3320 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

3322 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

3326 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3328 
hi2c
->
X‚ÄûrSize
 = 0U;

3329 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

3332 
	`__HAL_I2C_DISABLE
(
hi2c
);

3334  
HAL_ERROR
;

3337 i‚Ä°(
hi2c
->
X‚ÄûrSize
 == 1U)

3340 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3345 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

3349 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3352 
	`__HAL_UNLOCK
(
hi2c
);

3358 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_ERR
);

3361 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
I2C_CR2_DMAEN
;

3366 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3367 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3370 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

3373 
	`__HAL_UNLOCK
(
hi2c
);

3375  
HAL_ERROR
;

3381 i‚Ä°(
	`I2C_Reque¬∞Mem‚ÄπyR√≥d
(
hi2c
, 
DevAdd¬™ss
, 
MemAdd¬™ss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3383  
HAL_ERROR
;

3387 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3390 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

3392 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3395 
	`__HAL_UNLOCK
(
hi2c
);

3398  
HAL_OK
;

3402  
HAL_BUSY
;

3404 
	}
}

3417 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_IsDeviÀöR√≥dy
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t32_t
 
Tr√ºls
, u√∂t32_√†
Timeout
)

3420 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3421 
u√∂t32_t
 
I2C_Tr√ºls
 = 1U;

3422 
F≈ìgS√®tus
 
tmp1
;

3423 
F≈ìgS√®tus
 
tmp2
;

3425 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3428 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3430  
HAL_BUSY
;

3434 
	`__HAL_LOCK
(
hi2c
);

3437 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3440 
	`__HAL_I2C_ENABLE
(
hi2c
);

3444 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3446 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY
;

3447 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3448 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

3453 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

3456 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3458 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

3460 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

3462  
HAL_TIMEOUT
;

3466 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAdd¬™ss
);

3470 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3472 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3473 
tmp2
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3474 (
hi2c
->
S√®√£
 !Ô£ø
HAL_I2C_STATE_TIMEOUT
√ã&& (
tmp1
 =Ô£ø
RESET
√ã&& (
tmp2
 == RESET))

3476 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

3478 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_TIMEOUT
;

3480 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3481 
tmp2
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3484 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3487 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
√ã=Ô£ø
SET
)

3490 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

3493 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3496 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3498  
HAL_ERROR
;

3501 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3504 
	`__HAL_UNLOCK
(
hi2c
);

3506  
HAL_OK
;

3511 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

3514 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3517 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3519  
HAL_ERROR
;

3524 
I2C_Tr√ºls
++;

3526 
I2C_Tr√ºls
 < 
Tr√ºls
);

3528 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3531 
	`__HAL_UNLOCK
(
hi2c
);

3533  
HAL_ERROR
;

3537  
HAL_BUSY
;

3539 
	}
}

3553 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

3555 
__IO
 
u√∂t32_t
 
P¬™v_S√®√£
 = 0x00U;

3556 
__IO
 
u√∂t32_t
 
cou¬°
 = 0x00U;

3559 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

3561 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3564 i‚Ä°((
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
√ã=Ô£øI2C_CR1_STOP√ã|| (
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
))

3567 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

3570 
cou¬°
--;

3571 i‚Ä°(
cou¬°
 == 0U)

3573 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

3574 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3575 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3576 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3579 
	`__HAL_UNLOCK
(
hi2c
);

3581  
HAL_ERROR
;

3584 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3588 
	`__HAL_LOCK
(
hi2c
);

3591 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3594 
	`__HAL_I2C_ENABLE
(
hi2c
);

3598 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3600 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

3601 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3602 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3605 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3606 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

3607 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

3608 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

3609 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

3611 
P¬™v_S√®√£
 = 
hi2c
->
P¬™viousS√®√£
;

3615 i‚Ä°((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_TX
√ã|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
) == 1))

3618 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

3622 
	`__HAL_UNLOCK
(
hi2c
);

3629 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3631  
HAL_OK
;

3635  
HAL_BUSY
;

3637 
	}
}

3651 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_Seq_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

3653 
__IO
 
u√∂t32_t
 
P¬™v_S√®√£
 = 0x00U;

3654 
__IO
 
u√∂t32_t
 
cou¬°
 = 0x00U;

3655 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

3658 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

3660 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3663 i‚Ä°((
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
√ã=Ô£øI2C_CR1_STOP√ã|| (
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
))

3666 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

3669 
cou¬°
--;

3670 i‚Ä°(
cou¬°
 == 0U)

3672 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

3673 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3674 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3675 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3678 
	`__HAL_UNLOCK
(
hi2c
);

3680  
HAL_ERROR
;

3683 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3687 
	`__HAL_LOCK
(
hi2c
);

3690 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3693 
	`__HAL_I2C_ENABLE
(
hi2c
);

3697 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3699 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX
;

3700 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3701 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3704 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3705 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

3706 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

3707 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

3708 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

3710 
P¬™v_S√®√£
 = 
hi2c
->
P¬™viousS√®√£
;

3712 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

3715 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

3718 
hi2c
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

3721 
hi2c
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

3722 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

3725 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬©x
, (
u√∂t32_t
)hi2c->
pBuffP√•
, (u√∂t32_t)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, hi2c->
X‚ÄûrSize
);

3727 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

3730 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3734 i‚Ä°((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_TX
√ã|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
) == 1))

3737 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

3741 
	`__HAL_UNLOCK
(
hi2c
);

3749 i‚Ä°((
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NEXT_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
))

3752 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

3756 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

3761 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3762 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3765 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

3768 
	`__HAL_UNLOCK
(
hi2c
);

3770  
HAL_ERROR
;

3776 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3780 i‚Ä°((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_TX
√ã|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
) == 1))

3783 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

3787 
	`__HAL_UNLOCK
(
hi2c
);

3794 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3797  
HAL_OK
;

3801  
HAL_BUSY
;

3803 
	}
}

3817 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_Seq_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

3819 
__IO
 
u√∂t32_t
 
P¬™v_S√®√£
 = 0x00U;

3820 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

3821 
u√∂t32_t
 
√≠ab√ÄIT
 = (
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3824 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

3826 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3829 i‚Ä°((
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
√ã=Ô£øI2C_CR1_STOP√ã|| (
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
))

3832 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

3835 
cou¬°
--;

3836 i‚Ä°(
cou¬°
 == 0U)

3838 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

3839 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3840 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3841 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3844 
	`__HAL_UNLOCK
(
hi2c
);

3846  
HAL_ERROR
;

3849 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3853 
	`__HAL_LOCK
(
hi2c
);

3856 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3859 
	`__HAL_I2C_ENABLE
(
hi2c
);

3863 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3865 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

3866 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3867 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3870 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3871 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

3872 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

3873 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

3874 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

3876 
P¬™v_S√®√£
 = 
hi2c
->
P¬™viousS√®√£
;

3878 i‚Ä°((
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø2U√ã&& ((
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
)))

3880 i‚Ä°(
P¬™v_S√®√£
 =Ô£ø
I2C_STATE_MASTER_BUSY_RX
)

3883 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3886 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3889 
√≠ab√ÄIT
 &Ô£ø~
I2C_IT_BUF
;

3894 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3900 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

3905 i‚Ä°((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_RX
√ã|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
) == 1))

3908 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

3912 
	`__HAL_UNLOCK
(
hi2c
);

3919 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
√≠ab√ÄIT
);

3921  
HAL_OK
;

3925  
HAL_BUSY
;

3927 
	}
}

3941 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_Seq_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t8_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

3943 
__IO
 
u√∂t32_t
 
P¬™v_S√®√£
 = 0x00U;

3944 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

3945 
u√∂t32_t
 
√≠ab√ÄIT
 = (
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3946 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

3949 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

3951 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

3954 i‚Ä°((
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
√ã=Ô£øI2C_CR1_STOP√ã|| (
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
))

3957 
cou¬°
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

3960 
cou¬°
--;

3961 i‚Ä°(
cou¬°
 == 0U)

3963 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

3964 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

3965 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3966 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

3969 
	`__HAL_UNLOCK
(
hi2c
);

3971  
HAL_ERROR
;

3974 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
);

3978 
	`__HAL_LOCK
(
hi2c
);

3981 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3984 
	`__HAL_I2C_ENABLE
(
hi2c
);

3988 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

3991 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

3993 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX
;

3994 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

3995 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

3998 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

3999 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

4000 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

4001 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

4002 
hi2c
->
Devadd¬™ss
 = 
DevAdd¬™ss
;

4004 
P¬™v_S√®√£
 = 
hi2c
->
P¬™viousS√®√£
;

4006 i‚Ä°(
hi2c
->
X‚ÄûrSize
 > 0U)

4008 i‚Ä°((
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø2U√ã&& ((
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
)))

4010 i‚Ä°(
P¬™v_S√®√£
 =Ô£ø
I2C_STATE_MASTER_BUSY_RX
)

4013 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4016 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

4019 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

4024 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4030 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4032 i‚Ä°((
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_OTHER_AND_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
))

4035 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

4040 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

4043 
hi2c
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

4046 
hi2c
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

4047 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

4050 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬®x
, (
u√∂t32_t
)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)hi2c->
pBuffP√•
, hi2c->
X‚ÄûrSize
);

4052 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

4056 i‚Ä°((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_RX
√ã|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
) == 1))

4059 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

4062 
√≠ab√ÄIT
 = (
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4067 
√≠ab√ÄIT
 = 
I2C_IT_ERR
;

4071 
	`__HAL_UNLOCK
(
hi2c
);

4079 i‚Ä°((
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NEXT_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME
√ã|| (X‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
))

4082 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

4086 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
√≠ab√ÄIT
);

4091 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

4092 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4095 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

4098 
	`__HAL_UNLOCK
(
hi2c
);

4100  
HAL_ERROR
;

4106 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4110 i‚Ä°((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_RX
√ã|| (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
) == 1))

4113 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

4117 
	`__HAL_UNLOCK
(
hi2c
);

4124 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
√≠ab√ÄIT
);

4126  
HAL_OK
;

4130  
HAL_BUSY
;

4132 
	}
}

4144 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_Seq_T√∏nsm√¥_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

4147 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

4149 i‚Ä°(((
u√∂t32_t
)
hi2c
->
S√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4151 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

4153  
HAL_ERROR
;

4157 
	`__HAL_LOCK
(
hi2c
);

4160 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4163 
	`__HAL_I2C_ENABLE
(
hi2c
);

4167 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

4169 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX_LISTEN
;

4170 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4171 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

4174 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

4175 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

4176 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

4177 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

4180 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4183 
	`__HAL_UNLOCK
(
hi2c
);

4190 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4192  
HAL_OK
;

4196  
HAL_BUSY
;

4198 
	}
}

4210 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_Seq_T√∏nsm√¥_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

4212 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

4215 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

4217 i‚Ä°(((
u√∂t32_t
)
hi2c
->
S√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4219 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

4221  
HAL_ERROR
;

4225 
	`__HAL_LOCK
(
hi2c
);

4228 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4232 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX_LISTEN
)

4234 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4237 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

4239 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

4243 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

4246 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

4249 
hi2c
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmarx);

4254 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX_LISTEN
)

4256 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4258 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

4261 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

4265 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

4268 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

4271 
hi2c
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmatx);

4282 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4285 
	`__HAL_I2C_ENABLE
(
hi2c
);

4289 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

4291 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_TX_LISTEN
;

4292 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4293 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

4296 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

4297 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

4298 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

4299 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

4302 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

4305 
hi2c
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

4308 
hi2c
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

4309 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

4312 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬©x
, (
u√∂t32_t
)hi2c->
pBuffP√•
, (u√∂t32_t)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, hi2c->
X‚ÄûrSize
);

4314 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

4317 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4320 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4323 
	`__HAL_UNLOCK
(
hi2c
);

4329 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4332 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
I2C_CR2_DMAEN
;

4334  
HAL_OK
;

4339 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

4340 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4343 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

4346 
	`__HAL_UNLOCK
(
hi2c
);

4348  
HAL_ERROR
;

4353  
HAL_BUSY
;

4355 
	}
}

4367 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_Seq_ReÀöive_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

4370 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

4372 i‚Ä°(((
u√∂t32_t
)
hi2c
->
S√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4374 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

4376  
HAL_ERROR
;

4380 
	`__HAL_LOCK
(
hi2c
);

4383 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4386 
	`__HAL_I2C_ENABLE
(
hi2c
);

4390 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

4392 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX_LISTEN
;

4393 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4394 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

4397 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

4398 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

4399 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

4400 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

4403 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4406 
	`__HAL_UNLOCK
(
hi2c
);

4413 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4415  
HAL_OK
;

4419  
HAL_BUSY
;

4421 
	}
}

4433 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_S≈ìve_Seq_ReÀöive_DMA
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
X‚ÄûrO¬±i‚ÅÑs
)

4435 
HAL_S√®tusTy‚â•Def
 
dmax‚Äûr¬∞¬©us
;

4438 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X‚ÄûrO¬±i‚ÅÑs
));

4440 i‚Ä°(((
u√∂t32_t
)
hi2c
->
S√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

4442 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

4444  
HAL_ERROR
;

4448 
	`__HAL_LOCK
(
hi2c
);

4451 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4455 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX_LISTEN
)

4457 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4460 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

4462 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

4466 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

4469 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

4472 
hi2c
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmarx);

4477 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX_LISTEN
)

4479 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4481 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

4484 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

4488 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

4491 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

4494 
hi2c
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmatx);

4505 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4508 
	`__HAL_I2C_ENABLE
(
hi2c
);

4512 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

4514 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_BUSY_RX_LISTEN
;

4515 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

4516 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

4519 
hi2c
->
pBuffP√•
 = 
pD¬©a
;

4520 
hi2c
->
X‚ÄûrCou¬°
 = 
Size
;

4521 
hi2c
->
X‚ÄûrSize
 = hi2c->
X‚ÄûrCou¬°
;

4522 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = XferOptions;

4525 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2C_DMAX‚ÄûrC‚àÇt
;

4528 
hi2c
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2C_DMAE¬∫‚Äπ
;

4531 
hi2c
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

4532 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

4535 
dmax‚Äûr¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
hi2c
->
hdm¬®x
, (
u√∂t32_t
)&hi2c->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)hi2c->
pBuffP√•
, hi2c->
X‚ÄûrSize
);

4537 i‚Ä°(
dmax‚Äûr¬∞¬©us
 =Ô£ø
HAL_OK
)

4540 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4543 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4546 
	`__HAL_UNLOCK
(
hi2c
);

4549 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

4555 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4557  
HAL_OK
;

4562 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

4563 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4566 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

4569 
	`__HAL_UNLOCK
(
hi2c
);

4571  
HAL_ERROR
;

4576  
HAL_BUSY
;

4578 
	}
}

4586 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_E¬´b√ÄLi¬∞√≠_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4588 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_READY
)

4590 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

4593 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

4596 
	`__HAL_I2C_ENABLE
(
hi2c
);

4600 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4603 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4605  
HAL_OK
;

4609  
HAL_BUSY
;

4611 
	}
}

4619 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Di√üb√ÄLi¬∞√≠_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4622 
u√∂t32_t
 
tmp
;

4625 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_LISTEN
)

4627 
tmp
 = (
u√∂t32_t
)(
hi2c
->
S√®√£
√ã& 
I2C_STATE_MSK
;

4628 
hi2c
->
P¬™viousS√®√£
 = 
tmp
 | (
u√∂t32_t
)(hi2c->
Mode
);

4629 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

4630 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4633 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4636 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4638  
HAL_OK
;

4642  
HAL_BUSY
;

4644 
	}
}

4654 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2C_Ma¬∞√Æ_Ab‚Äπt_IT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
)

4657 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

4660 
	`UNUSED
(
DevAdd¬™ss
);

4663 i‚Ä°((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
√ã!Ô£ø
RESET
√ã&& (
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MASTER
))

4666 
	`__HAL_LOCK
(
hi2c
);

4668 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

4669 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_ABORT
;

4672 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

4675 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

4677 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

4680 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4683 
	`__HAL_UNLOCK
(
hi2c
);

4686 
	`I2C_ITE¬∫‚Äπ
(
hi2c
);

4688  
HAL_OK
;

4695  
HAL_ERROR
;

4697 
	}
}

4713 
	$HAL_I2C_EV_IRQH‚Ñ¢d√Är
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4715 
u√∂t32_t
 
¬ß1√¥√äags
;

4716 
u√∂t32_t
 
¬ß2√¥√äags
 = 0U;

4717 
u√∂t32_t
 
√¥sourÀös
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
);

4718 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

4719 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

4720 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

4723 i‚Ä°((
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MASTER
√ã|| (Cu¬∫√≠tMod√™=Ô£ø
HAL_I2C_MODE_MEM
))

4725 
¬ß2√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR2
);

4726 
¬ß1√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR1
);

4729 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_SB
√ã=Ô£ø
RESET
√ã&& (
	`IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST
(
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
) == 1U))

4735 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_SB
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4738 
	`I2C_C‚ÅÑv√ÆtOth√ÆX‚ÄûrO¬±i‚ÅÑs
(
hi2c
);

4740 
	`I2C_Ma¬∞√Æ_SB
(
hi2c
);

4743 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_ADD10
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4745 
	`I2C_Ma¬∞√Æ_ADD10
(
hi2c
);

4748 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_ADDR
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4750 
	`I2C_Ma¬∞√Æ_ADDR
(
hi2c
);

4753 i‚Ä°(
	`I2C_CHECK_FLAG
(
¬ß2√¥√äags
, 
I2C_FLAG_TRA
√ã!Ô£ø
RESET
)

4756 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
) != I2C_CR2_DMAEN)

4759 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_TXE
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_BUF
√ã!Ô£øRESET√ã&& (I2C_CHECK_FLAG(¬ß1√¥√äags, 
I2C_FLAG_BTF
) == RESET))

4761 
	`I2C_Ma¬∞√ÆT√∏nsm√¥_TXE
(
hi2c
);

4764 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_BTF
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4766 i‚Ä°(
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MASTER
)

4768 
	`I2C_Ma¬∞√ÆT√∏nsm√¥_BTF
(
hi2c
);

4772 
	`I2C_Mem‚ÄπyT√∏nsm√¥_TXE_BTF
(
hi2c
);

4785 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
) != I2C_CR2_DMAEN)

4788 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_RXNE
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_BUF
√ã!Ô£øRESET√ã&& (I2C_CHECK_FLAG(¬ß1√¥√äags, 
I2C_FLAG_BTF
) == RESET))

4790 
	`I2C_Ma¬∞√ÆReÀöive_RXNE
(
hi2c
);

4793 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_BTF
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4795 
	`I2C_Ma¬∞√ÆReÀöive_BTF
(
hi2c
);

4809 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_I2C_ERROR_NONE
)

4811 
¬ß1√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR1
);

4815 
¬ß2√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR2
);

4816 
¬ß1√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR1
);

4820 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_ADDR
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4823 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_I2C_ERROR_NONE
)

4825 
¬ß2√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR2
);

4827 
	`I2C_S≈ìve_ADDR
(
hi2c
, 
¬ß2√¥√äags
);

4830 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_STOPF
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4832 
	`I2C_S≈ìve_STOPF
(
hi2c
);

4835 i‚Ä°((
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
√ã|| (Cu¬∫√≠tS√®√£ =Ô£ø
HAL_I2C_STATE_BUSY_TX_LISTEN
))

4838 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_TXE
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_BUF
√ã!Ô£øRESET√ã&& (I2C_CHECK_FLAG(¬ß1√¥√äags, 
I2C_FLAG_BTF
) == RESET))

4840 
	`I2C_S≈ìveT√∏nsm√¥_TXE
(
hi2c
);

4843 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_BTF
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4845 
	`I2C_S≈ìveT√∏nsm√¥_BTF
(
hi2c
);

4856 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_RXNE
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_BUF
√ã!Ô£øRESET√ã&& (I2C_CHECK_FLAG(¬ß1√¥√äags, 
I2C_FLAG_BTF
) == RESET))

4858 
	`I2C_S≈ìveReÀöive_RXNE
(
hi2c
);

4861 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_BTF
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_EVT
) != RESET))

4863 
	`I2C_S≈ìveReÀöive_BTF
(
hi2c
);

4871 
	}
}

4879 
	$HAL_I2C_ER_IRQH‚Ñ¢d√Är
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4881 
HAL_I2C_ModeTy‚â•Def
 
tmp1
;

4882 
u√∂t32_t
 
tmp2
;

4883 
HAL_I2C_S√®√£Ty‚â•Def
 
tmp3
;

4884 
u√∂t32_t
 
tmp4
;

4885 
u√∂t32_t
 
¬ß1√¥√äags
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
SR1
);

4886 
u√∂t32_t
 
√¥sourÀös
 = 
	`READ_REG
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
);

4887 
u√∂t32_t
 
√Ær‚Äπ
 = 
HAL_I2C_ERROR_NONE
;

4888 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

4891 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_BERR
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_ERR
) != RESET))

4893 
√Ær‚Äπ
 |Ô£ø
HAL_I2C_ERROR_BERR
;

4896 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_BERR
);

4899 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_SWRST
);

4903 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_ARLO
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_ERR
) != RESET))

4905 
√Ær‚Äπ
 |Ô£ø
HAL_I2C_ERROR_ARLO
;

4908 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ARLO
);

4912 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_AF
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_ERR
) != RESET))

4914 
tmp1
 = 
Cu¬∫√≠tMode
;

4915 
tmp2
 = 
hi2c
->
X‚ÄûrCou¬°
;

4916 
tmp3
 = 
hi2c
->
S√®√£
;

4917 
tmp4
 = 
hi2c
->
P¬™viousS√®√£
;

4918 i‚Ä°((
tmp1
 =Ô£ø
HAL_I2C_MODE_SLAVE
√ã&& (
tmp2
 == 0U) && \

4919 ((
tmp3
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
√ã|| (tmp3 =Ô£ø
HAL_I2C_STATE_BUSY_TX_LISTEN
) || \

4920 ((
tmp3
 =Ô£ø
HAL_I2C_STATE_LISTEN
√ã&& (
tmp4
 =Ô£ø
I2C_STATE_SLAVE_BUSY_TX
))))

4922 
	`I2C_S≈ìve_AF
(
hi2c
);

4927 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

4929 
√Ær‚Äπ
 |Ô£ø
HAL_I2C_ERROR_AF
;

4932 i‚Ä°((
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MASTER
√ã|| (Cu¬∫√≠tMod√™=Ô£ø
HAL_I2C_MODE_MEM
))

4935 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

4941 i‚Ä°((
	`I2C_CHECK_FLAG
(
¬ß1√¥√äags
, 
I2C_FLAG_OVR
√ã!Ô£ø
RESET
√ã&& (
	`I2C_CHECK_IT_SOURCE
(
√¥sourÀös
, 
I2C_IT_ERR
) != RESET))

4943 
√Ær‚Äπ
 |Ô£ø
HAL_I2C_ERROR_OVR
;

4945 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_OVR
);

4949 i‚Ä°(
√Ær‚Äπ
 !Ô£ø
HAL_I2C_ERROR_NONE
)

4951 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ
;

4952 
	`I2C_ITE¬∫‚Äπ
(
hi2c
);

4954 
	}
}

4962 
__w√≥k
 
	$HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4965 
	`UNUSED
(
hi2c
);

4970 
	}
}

4978 
__w√≥k
 
	$HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4981 
	`UNUSED
(
hi2c
);

4986 
	}
}

4993 
__w√≥k
 
	$HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

4996 
	`UNUSED
(
hi2c
);

5001 
	}
}

5009 
__w√≥k
 
	$HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5012 
	`UNUSED
(
hi2c
);

5017 
	}
}

5027 
__w√≥k
 
	$HAL_I2C_AddrC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t8_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
, 
u√∂t16_t
 
AddrM¬©chCode
)

5030 
	`UNUSED
(
hi2c
);

5031 
	`UNUSED
(
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
);

5032 
	`UNUSED
(
AddrM¬©chCode
);

5037 
	}
}

5045 
__w√≥k
 
	$HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5048 
	`UNUSED
(
hi2c
);

5053 
	}
}

5061 
__w√≥k
 
	$HAL_I2C_MemTxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5064 
	`UNUSED
(
hi2c
);

5069 
	}
}

5077 
__w√≥k
 
	$HAL_I2C_MemRxC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5080 
	`UNUSED
(
hi2c
);

5085 
	}
}

5093 
__w√≥k
 
	$HAL_I2C_E¬∫‚ÄπC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5096 
	`UNUSED
(
hi2c
);

5101 
	}
}

5109 
__w√≥k
 
	$HAL_I2C_Ab‚ÄπtC‚àÇtC√Ülback
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5112 
	`UNUSED
(
hi2c
);

5117 
	}
}

5144 
HAL_I2C_S√®√£Ty‚â•Def
 
	$HAL_I2C_G√´S√®√£
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5147  
hi2c
->
S√®√£
;

5148 
	}
}

5156 
HAL_I2C_ModeTy‚â•Def
 
	$HAL_I2C_G√´Mode
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5158  
hi2c
->
Mode
;

5159 
	}
}

5167 
u√∂t32_t
 
	$HAL_I2C_G√´E¬∫‚Äπ
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5169  
hi2c
->
E¬∫‚ÄπCode
;

5170 
	}
}

5190 
	$I2C_Ma¬∞√ÆT√∏nsm√¥_TXE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5193 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

5194 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

5195 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

5197 i‚Ä°((
hi2c
->
X‚ÄûrSize
 =Ô£ø0U√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
))

5200 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_LAST_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_NO_OPTION_FRAME
))

5202 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5204 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_MASTER_BUSY_TX
;

5205 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5206 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5208 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5209 
hi2c
->
	`Ma¬∞√ÆTxC‚àÇtC√Ülback
(hi2c);

5211 
	`HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
(
hi2c
);

5217 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5220 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5222 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

5223 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5225 i‚Ä°(
hi2c
->
Mode
 =Ô£ø
HAL_I2C_MODE_MEM
)

5227 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5228 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5229 
hi2c
->
	`MemTxC‚àÇtC√Ülback
(hi2c);

5231 
	`HAL_I2C_MemTxC‚àÇtC√Ülback
(
hi2c
);

5236 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5237 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5238 
hi2c
->
	`Ma¬∞√ÆTxC‚àÇtC√Ülback
(hi2c);

5240 
	`HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
(
hi2c
);

5245 i‚Ä°((
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
) || \

5246 ((
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MEM
√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
)))

5248 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 0U)

5251 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5255 i‚Ä°(
hi2c
->
Mode
 =Ô£ø
HAL_I2C_MODE_MEM
)

5257 
	`I2C_Mem‚ÄπyT√∏nsm√¥_TXE_BTF
(
hi2c
);

5262 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

5265 
hi2c
->
pBuffP√•
++;

5268 
hi2c
->
X‚ÄûrCou¬°
--;

5276 
	}
}

5284 
	$I2C_Ma¬∞√ÆT√∏nsm√¥_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5287 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

5289 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
)

5291 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

5294 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

5297 
hi2c
->
pBuffP√•
++;

5300 
hi2c
->
X‚ÄûrCou¬°
--;

5305 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_LAST_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_NO_OPTION_FRAME
))

5307 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5309 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_MASTER_BUSY_TX
;

5310 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5311 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5313 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5314 
hi2c
->
	`Ma¬∞√ÆTxC‚àÇtC√Ülback
(hi2c);

5316 
	`HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
(
hi2c
);

5322 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5325 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5327 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

5328 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5329 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5331 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5332 
hi2c
->
	`Ma¬∞√ÆTxC‚àÇtC√Ülback
(hi2c);

5334 
	`HAL_I2C_Ma¬∞√ÆTxC‚àÇtC√Ülback
(
hi2c
);

5343 
	}
}

5351 
	$I2C_Mem‚ÄπyT√∏nsm√¥_TXE_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5354 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

5356 i‚Ä°(
hi2c
->
Ev√≠tCou¬°
 == 0U)

5359 i‚Ä°(
hi2c
->
MemaddSize
 =Ô£ø
I2C_MEMADD_SIZE_8BIT
)

5362 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_LSB
(hi2c->
Memadd¬™ss
);

5364 
hi2c
->
Ev√≠tCou¬°
 += 2U;

5370 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_MSB
(hi2c->
Memadd¬™ss
);

5372 
hi2c
->
Ev√≠tCou¬°
++;

5375 i‚Ä°(
hi2c
->
Ev√≠tCou¬°
 == 1U)

5378 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_LSB
(hi2c->
Memadd¬™ss
);

5380 
hi2c
->
Ev√≠tCou¬°
++;

5382 i‚Ä°(
hi2c
->
Ev√≠tCou¬°
 == 2U)

5384 i‚Ä°(
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
)

5387 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø
I2C_CR1_START
;

5389 i‚Ä°((
hi2c
->
X‚ÄûrCou¬°
 > 0U√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
))

5392 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

5395 
hi2c
->
pBuffP√•
++;

5398 
hi2c
->
X‚ÄûrCou¬°
--;

5400 i‚Ä°((
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø0U√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
))

5404 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5407 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5409 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

5410 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5411 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5412 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5413 
hi2c
->
	`MemTxC‚àÇtC√Ülback
(hi2c);

5415 
	`HAL_I2C_MemTxC‚àÇtC√Ülback
(
hi2c
);

5427 
	}
}

5435 
	$I2C_Ma¬∞√ÆReÀöive_RXNE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5437 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
)

5439 
u√∂t32_t
 
tmp
;

5441 
tmp
 = 
hi2c
->
X‚ÄûrCou¬°
;

5442 i‚Ä°(
tmp
 > 3U)

5445 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5448 
hi2c
->
pBuffP√•
++;

5451 
hi2c
->
X‚ÄûrCou¬°
--;

5453 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø(
u√∂t16_t
)3)

5458 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5461 i‚Ä°((
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_FIRST_AND_NEXT_FRAME
√ã&& ((
tmp
 == 1U) || (tmp == 0U)))

5463 i‚Ä°(
	`I2C_Wa√¥OnSTOPReque¬∞ThroughIT
(
hi2c
√ã=Ô£ø
HAL_OK
)

5466 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5469 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5472 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5475 
hi2c
->
pBuffP√•
++;

5478 
hi2c
->
X‚ÄûrCou¬°
--;

5480 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5482 i‚Ä°(
hi2c
->
Mode
 =Ô£ø
HAL_I2C_MODE_MEM
)

5484 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5485 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

5487 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5488 
hi2c
->
	`MemRxC‚àÇtC√Ülback
(hi2c);

5490 
	`HAL_I2C_MemRxC‚àÇtC√Ülback
(
hi2c
);

5495 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5496 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_MASTER_BUSY_RX
;

5498 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5499 
hi2c
->
	`Ma¬∞√ÆRxC‚àÇtC√Ülback
(hi2c);

5501 
	`HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
(
hi2c
);

5508 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

5511 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5514 
hi2c
->
pBuffP√•
++;

5517 
hi2c
->
X‚ÄûrCou¬°
--;

5519 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5520 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5523 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5524 
hi2c
->
	`E¬∫‚ÄπC√Ülback
(hi2c);

5526 
	`HAL_I2C_E¬∫‚ÄπC√Ülback
(
hi2c
);

5535 
	}
}

5543 
	$I2C_Ma¬∞√ÆReÀöive_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5546 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

5548 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 4U)

5552 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5555 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5558 
hi2c
->
pBuffP√•
++;

5561 
hi2c
->
X‚ÄûrCou¬°
--;

5563 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 3U)

5567 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5569 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_NEXT_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_FIRST_AND_NEXT_FRAME
))

5572 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5576 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5579 
hi2c
->
pBuffP√•
++;

5582 
hi2c
->
X‚ÄûrCou¬°
--;

5584 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 2U)

5587 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
))

5590 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5592 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NEXT_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_AND_NEXT_FRAME
))

5595 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5597 i‚Ä°(
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_LAST_FRAME_NO_STOP
)

5600 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5608 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5611 
hi2c
->
pBuffP√•
++;

5614 
hi2c
->
X‚ÄûrCou¬°
--;

5617 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5620 
hi2c
->
pBuffP√•
++;

5623 
hi2c
->
X‚ÄûrCou¬°
--;

5626 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

5628 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

5629 i‚Ä°(
hi2c
->
Mode
 =Ô£ø
HAL_I2C_MODE_MEM
)

5631 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5632 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

5633 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5634 
hi2c
->
	`MemRxC‚àÇtC√Ülback
(hi2c);

5636 
	`HAL_I2C_MemRxC‚àÇtC√Ülback
(
hi2c
);

5641 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5642 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_MASTER_BUSY_RX
;

5643 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5644 
hi2c
->
	`Ma¬∞√ÆRxC‚àÇtC√Ülback
(hi2c);

5646 
	`HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
(
hi2c
);

5653 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5656 
hi2c
->
pBuffP√•
++;

5659 
hi2c
->
X‚ÄûrCou¬°
--;

5661 
	}
}

5669 
	$I2C_Ma¬∞√Æ_SB
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5671 i‚Ä°(
hi2c
->
Mode
 =Ô£ø
HAL_I2C_MODE_MEM
)

5673 i‚Ä°(
hi2c
->
Ev√≠tCou¬°
 == 0U)

5676 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(hi2c->
Devadd¬™ss
);

5680 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_READ
(hi2c->
Devadd¬™ss
);

5685 i‚Ä°(
hi2c
->
In√¥
.
Add¬™ss√∂gMode
 =Ô£ø
I2C_ADDRESSINGMODE_7BIT
)

5688 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
)

5690 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(hi2c->
Devadd¬™ss
);

5694 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_READ
(hi2c->
Devadd¬™ss
);

5697 i‚Ä°(((
hi2c
->
hdm¬©x
 !Ô£ø
NULL
√ã&& (hi2c->hdm¬©x->
X‚ÄûrC‚àÇtC√Ülback
 != NULL))

5698 || ((
hi2c
->
hdm¬®x
 !Ô£ø
NULL
√ã&& (hi2c->hdm¬®x->
X‚ÄûrC‚àÇtC√Ülback
 != NULL)))

5701 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

5706 i‚Ä°(
hi2c
->
Ev√≠tCou¬°
 == 0U)

5709 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(hi2c->
Devadd¬™ss
);

5711 i‚Ä°(
hi2c
->
Ev√≠tCou¬°
 == 1U)

5714 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(hi2c->
Devadd¬™ss
);

5722 
	}
}

5730 
	$I2C_Ma¬∞√Æ_ADD10
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5733 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_ADDRESS
(hi2c->
Devadd¬™ss
);

5735 i‚Ä°((
hi2c
->
hdm¬©x
 !Ô£ø
NULL
√ã|| (hi2c->
hdm¬®x
 != NULL))

5737 i‚Ä°((
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 !Ô£ø
NULL
√ã|| (hi2c->
hdm¬®x
->XferCpltCallback != NULL))

5740 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

5743 
	}
}

5751 
	$I2C_Ma¬∞√Æ_ADDR
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5754 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

5755 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

5756 
u√∂t32_t
 
P¬™v_S√®√£
 = 
hi2c
->
P¬™viousS√®√£
;

5758 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
)

5760 i‚Ä°((
hi2c
->
Ev√≠tCou¬°
 =Ô£ø0U√ã&& (
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MEM
))

5763 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5765 i‚Ä°((
hi2c
->
Ev√≠tCou¬°
 =Ô£ø0U√ã&& (hi2c->
In√¥
.
Add¬™ss√∂gMode
 =Ô£ø
I2C_ADDRESSINGMODE_10BIT
))

5768 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5771 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

5773 
hi2c
->
Ev√≠tCou¬°
++;

5777 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 0U)

5780 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5783 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5785 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 1U)

5787 i‚Ä°(
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NO_OPTION_FRAME
)

5790 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5792 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

5795 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5798 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5803 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5806 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5810 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_LAST_FRAME
) \

5811 && ((
P¬™v_S√®√£
 !Ô£ø
I2C_STATE_MASTER_BUSY_RX
√ã|| (
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_FRAME
)))

5813 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_NEXT_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_FIRST_AND_NEXT_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_LAST_FRAME_NO_STOP
))

5816 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5821 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5825 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5830 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5833 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5836 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

5839 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 == 2U)

5841 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 !Ô£ø
I2C_NEXT_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_FIRST_AND_NEXT_FRAME
√ã&& (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†!Ô£ø
I2C_LAST_FRAME_NO_STOP
))

5844 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_POS
);

5847 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5850 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5855 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5858 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5861 i‚Ä°(((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
√ã=Ô£øI2C_CR2_DMAEN√ã&& ((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NO_OPTION_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME
)))

5864 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

5870 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

5872 i‚Ä°(((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
√ã=Ô£øI2C_CR2_DMAEN√ã&& ((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NO_OPTION_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME_NO_STOP
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME
)))

5875 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

5879 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5883 
hi2c
->
Ev√≠tCou¬°
 = 0U;

5889 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

5891 
	}
}

5899 
	$I2C_S≈ìveT√∏nsm√¥_TXE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5902 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

5904 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

5907 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

5910 
hi2c
->
pBuffP√•
++;

5913 
hi2c
->
X‚ÄûrCou¬°
--;

5915 i‚Ä°((
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø0U√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX_LISTEN
))

5918 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5921 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_SLAVE_BUSY_TX
;

5922 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

5925 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5926 
hi2c
->
	`S≈ìveTxC‚àÇtC√Ülback
(hi2c);

5928 
	`HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
(
hi2c
);

5932 
	}
}

5940 
	$I2C_S≈ìveT√∏nsm√¥_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5942 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

5945 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = *hi2c->
pBuffP√•
;

5948 
hi2c
->
pBuffP√•
++;

5951 
hi2c
->
X‚ÄûrCou¬°
--;

5953 
	}
}

5961 
	$I2C_S≈ìveReÀöive_RXNE
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

5964 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

5966 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

5969 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

5972 
hi2c
->
pBuffP√•
++;

5975 
hi2c
->
X‚ÄûrCou¬°
--;

5977 i‚Ä°((
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø0U√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX_LISTEN
))

5980 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

5983 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_SLAVE_BUSY_RX
;

5984 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

5987 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

5988 
hi2c
->
	`S≈ìveRxC‚àÇtC√Ülback
(hi2c);

5990 
	`HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
(
hi2c
);

5994 
	}
}

6002 
	$I2C_S≈ìveReÀöive_BTF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

6004 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

6007 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

6010 
hi2c
->
pBuffP√•
++;

6013 
hi2c
->
X‚ÄûrCou¬°
--;

6015 
	}
}

6024 
	$I2C_S≈ìve_ADDR
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
IT2F≈ìgs
)

6026 
u√∂t8_t
 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
 = 
I2C_DIRECTION_RECEIVE
;

6027 
u√∂t16_t
 
S≈ìveAddrCode
;

6029 i‚Ä°(((
u√∂t32_t
)
hi2c
->
S√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

6032 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, (
I2C_IT_BUF
));

6035 i‚Ä°(
	`I2C_CHECK_FLAG
(
IT2F≈ìgs
, 
I2C_FLAG_TRA
√ã=Ô£ø
RESET
)

6037 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
 = 
I2C_DIRECTION_TRANSMIT
;

6040 i‚Ä°(
	`I2C_CHECK_FLAG
(
IT2F≈ìgs
, 
I2C_FLAG_DUALF
√ã=Ô£ø
RESET
)

6042 
S≈ìveAddrCode
 = (
u√∂t16_t
)
hi2c
->
In√¥
.
OwnAdd¬™ss1
;

6046 
S≈ìveAddrCode
 = (
u√∂t16_t
)
hi2c
->
In√¥
.
OwnAdd¬™ss2
;

6050 
	`__HAL_UNLOCK
(
hi2c
);

6053 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6054 
hi2c
->
	`AddrC√Ülback
(hi2c, 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
, 
S≈ìveAddrCode
);

6056 
	`HAL_I2C_AddrC√Ülback
(
hi2c
, 
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
, 
S≈ìveAddrCode
);

6062 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

6065 
	`__HAL_UNLOCK
(
hi2c
);

6067 
	}
}

6075 
	$I2C_S≈ìve_STOPF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

6078 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

6081 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6084 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

6087 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6090 i‚Ä°((
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

6092 i‚Ä°((
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
√ã|| (Cu¬∫√≠tS√®√£ =Ô£ø
HAL_I2C_STATE_BUSY_RX_LISTEN
))

6094 
hi2c
->
X‚ÄûrCou¬°
 = (
u√∂t16_t
)(
	`__HAL_DMA_GET_COUNTER
(hi2c->
hdm¬®x
));

6096 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

6099 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_AF
;

6103 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

6106 i‚Ä°(
	`HAL_DMA_G√´S√®√£
(
hi2c
->
hdm¬®x
√ã!Ô£ø
HAL_DMA_STATE_READY
)

6110 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

6113 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

6116 
hi2c
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmarx);

6122 
hi2c
->
X‚ÄûrCou¬°
 = (
u√∂t16_t
)(
	`__HAL_DMA_GET_COUNTER
(hi2c->
hdm¬©x
));

6124 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

6127 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_AF
;

6131 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

6134 i‚Ä°(
	`HAL_DMA_G√´S√®√£
(
hi2c
->
hdm¬©x
√ã!Ô£ø
HAL_DMA_STATE_READY
)

6138 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

6141 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

6144 
hi2c
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmatx);

6151 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

6154 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
SET
)

6157 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

6160 
hi2c
->
pBuffP√•
++;

6163 
hi2c
->
X‚ÄûrCou¬°
--;

6167 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
√ã=Ô£ø
SET
)

6170 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

6173 
hi2c
->
pBuffP√•
++;

6176 
hi2c
->
X‚ÄûrCou¬°
--;

6179 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 != 0U)

6182 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_AF
;

6186 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_I2C_ERROR_NONE
)

6189 
	`I2C_ITE¬∫‚Äπ
(
hi2c
);

6193 i‚Ä°(
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX_LISTEN
)

6196 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6197 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

6200 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6201 
hi2c
->
	`S≈ìveRxC‚àÇtC√Ülback
(hi2c);

6203 
	`HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
(
hi2c
);

6207 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_LISTEN
)

6209 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

6210 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6211 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6212 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6215 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6216 
hi2c
->
	`Li¬∞√≠C‚àÇtC√Ülback
(hi2c);

6218 
	`HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
(
hi2c
);

6223 i‚Ä°((
hi2c
->
P¬™viousS√®√£
 =Ô£ø
I2C_STATE_SLAVE_BUSY_RX
√ã|| (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
))

6225 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6226 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6227 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6229 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6230 
hi2c
->
	`S≈ìveRxC‚àÇtC√Ülback
(hi2c);

6232 
	`HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
(
hi2c
);

6237 
	}
}

6244 
	$I2C_S≈ìve_AF
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

6247 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

6248 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

6250 i‚Ä°(((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME
)) && \

6251 (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_LISTEN
))

6253 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

6256 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6259 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

6262 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6264 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6265 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6266 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6269 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6270 
hi2c
->
	`Li¬∞√≠C‚àÇtC√Ülback
(hi2c);

6272 
	`HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
(
hi2c
);

6275 i‚Ä°(
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX
)

6277 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

6278 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_SLAVE_BUSY_TX
;

6279 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6280 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6283 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6286 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

6289 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6291 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6292 
hi2c
->
	`S≈ìveTxC‚àÇtC√Ülback
(hi2c);

6294 
	`HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
(
hi2c
);

6301 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

6303 
	}
}

6310 
	$I2C_ITE¬∫‚Äπ
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

6313 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

6314 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

6315 
u√∂t32_t
 
Cu¬∫√≠tE¬∫‚Äπ
;

6317 i‚Ä°(((
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_MASTER
√ã|| (Cu¬∫√≠tMod√™=Ô£ø
HAL_I2C_MODE_MEM
)√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX
))

6320 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~
I2C_CR1_POS
;

6323 i‚Ä°(((
u√∂t32_t
)
Cu¬∫√≠tS√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

6326 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6327 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

6333 i‚Ä°((
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
√ã!Ô£øI2C_CR2_DMAEN√ã&& (
Cu¬∫√≠tS√®√£
 !Ô£ø
HAL_I2C_STATE_ABORT
))

6335 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6336 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6338 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6342 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

6344 
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~
I2C_CR2_DMAEN
;

6346 i‚Ä°(
hi2c
->
hdm¬©x
->
S√®√£
 !Ô£ø
HAL_DMA_STATE_READY
)

6350 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

6352 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

6355 
	`__HAL_I2C_DISABLE
(
hi2c
);

6357 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6360 
hi2c
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmatx);

6367 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
I2C_DMAAb‚Äπt
;

6369 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hi2c
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

6372 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
√ã=Ô£ø
SET
)

6375 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

6378 
hi2c
->
pBuffP√•
++;

6382 
	`__HAL_I2C_DISABLE
(
hi2c
);

6384 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6387 
hi2c
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hi2c->hdmarx);

6391 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_ABORT
)

6393 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6394 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

6397 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
√ã=Ô£ø
SET
)

6400 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

6403 
hi2c
->
pBuffP√•
++;

6407 
	`__HAL_I2C_DISABLE
(
hi2c
);

6410 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6411 
hi2c
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hi2c);

6413 
	`HAL_I2C_Ab‚ÄπtC‚àÇtC√Ülback
(
hi2c
);

6419 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
√ã=Ô£ø
SET
)

6422 *
hi2c
->
pBuffP√•
 = (
u√∂t8_t
)hi2c->
In¬∞‚Ñ¢Àö
->
DR
;

6425 
hi2c
->
pBuffP√•
++;

6429 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6430 
hi2c
->
	`E¬∫‚ÄπC√Ülback
(hi2c);

6432 
	`HAL_I2C_E¬∫‚ÄπC√Ülback
(
hi2c
);

6437 
Cu¬∫√≠tE¬∫‚Äπ
 = 
hi2c
->
E¬∫‚ÄπCode
;

6439 i‚Ä°(((
Cu¬∫√≠tE¬∫‚Äπ
 & 
HAL_I2C_ERROR_BERR
) == HAL_I2C_ERROR_BERR) || \

6440 ((
Cu¬∫√≠tE¬∫‚Äπ
 & 
HAL_I2C_ERROR_ARLO
) == HAL_I2C_ERROR_ARLO) || \

6441 ((
Cu¬∫√≠tE¬∫‚Äπ
 & 
HAL_I2C_ERROR_AF
) == HAL_I2C_ERROR_AF) || \

6442 ((
Cu¬∫√≠tE¬∫‚Äπ
 & 
HAL_I2C_ERROR_OVR
) == HAL_I2C_ERROR_OVR))

6445 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

6450 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

6451 i‚Ä°(((
hi2c
->
E¬∫‚ÄπCode
 & 
HAL_I2C_ERROR_AF
√ã=Ô£øHAL_I2C_ERROR_AF√ã&& (
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_LISTEN
))

6453 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_NO_OPTION_FRAME
;

6454 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6455 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6456 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6459 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6460 
hi2c
->
	`Li¬∞√≠C‚àÇtC√Ülback
(hi2c);

6462 
	`HAL_I2C_Li¬∞√≠C‚àÇtC√Ülback
(
hi2c
);

6465 
	}
}

6476 
HAL_S√®tusTy‚â•Def
 
	$I2C_Ma¬∞√ÆReque¬∞Wr√¥e
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

6479 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

6482 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_NO_OPTION_FRAME
))

6485 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6487 i‚Ä°(
hi2c
->
P¬™viousS√®√£
 =Ô£ø
I2C_STATE_MASTER_BUSY_RX
)

6490 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6498 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6500 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6502 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

6504  
HAL_TIMEOUT
;

6507 i‚Ä°(
hi2c
->
In√¥
.
Add¬™ss√∂gMode
 =Ô£ø
I2C_ADDRESSINGMODE_7BIT
)

6510 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAdd¬™ss
);

6515 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAdd¬™ss
);

6518 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6520  
HAL_ERROR
;

6524 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAdd¬™ss
);

6528 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6530  
HAL_ERROR
;

6533  
HAL_OK
;

6534 
	}
}

6546 
HAL_S√®tusTy‚â•Def
 
	$I2C_Ma¬∞√ÆReque¬∞R√≥d
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

6549 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

6552 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6555 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_NO_OPTION_FRAME
))

6558 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6560 i‚Ä°(
hi2c
->
P¬™viousS√®√£
 =Ô£ø
I2C_STATE_MASTER_BUSY_TX
)

6563 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6571 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6573 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6575 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

6577  
HAL_TIMEOUT
;

6580 i‚Ä°(
hi2c
->
In√¥
.
Add¬™ss√∂gMode
 =Ô£ø
I2C_ADDRESSINGMODE_7BIT
)

6583 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAdd¬™ss
);

6588 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAdd¬™ss
);

6591 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6593  
HAL_ERROR
;

6597 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAdd¬™ss
);

6600 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6602  
HAL_ERROR
;

6606 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6609 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6612 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6614 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6616 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

6618  
HAL_TIMEOUT
;

6622 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(
DevAdd¬™ss
);

6626 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6628  
HAL_ERROR
;

6631  
HAL_OK
;

6632 
	}
}

6646 
HAL_S√®tusTy‚â•Def
 
	$I2C_Reque¬∞Mem‚ÄπyWr√¥e
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

6649 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6652 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6654 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6656 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

6658  
HAL_TIMEOUT
;

6662 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAdd¬™ss
);

6665 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6667  
HAL_ERROR
;

6671 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6674 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6676 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

6679 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

6681  
HAL_ERROR
;

6685 i‚Ä°(
MemAddSize
 =Ô£ø
I2C_MEMADD_SIZE_8BIT
)

6688 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAdd¬™ss
);

6694 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAdd¬™ss
);

6697 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6699 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

6702 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

6704  
HAL_ERROR
;

6708 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAdd¬™ss
);

6711  
HAL_OK
;

6712 
	}
}

6726 
HAL_S√®tusTy‚â•Def
 
	$I2C_Reque¬∞Mem‚ÄπyR√≥d
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t16_t
 
DevAdd¬™ss
, u√∂t16_√†
MemAdd¬™ss
, u√∂t16_√†
MemAddSize
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

6729 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6732 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6735 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6737 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6739 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

6741  
HAL_TIMEOUT
;

6745 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAdd¬™ss
);

6748 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6750  
HAL_ERROR
;

6754 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

6757 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6759 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

6762 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

6764  
HAL_ERROR
;

6768 i‚Ä°(
MemAddSize
 =Ô£ø
I2C_MEMADD_SIZE_8BIT
)

6771 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAdd¬™ss
);

6777 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAdd¬™ss
);

6780 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6782 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

6785 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

6787  
HAL_ERROR
;

6791 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAdd¬™ss
);

6795 i‚Ä°(
	`I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
hi2c
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6797 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_I2C_ERROR_AF
)

6800 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

6802  
HAL_ERROR
;

6806 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
);

6809 i‚Ä°(
	`I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6811 i‚Ä°(
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_START
) == I2C_CR1_START)

6813 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_WRONG_START
;

6815  
HAL_TIMEOUT
;

6819 
hi2c
->
In¬∞‚Ñ¢Àö
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAdd¬™ss
);

6822 i‚Ä°(
	`I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

6824  
HAL_ERROR
;

6827  
HAL_OK
;

6828 
	}
}

6835 
	$I2C_DMAX‚ÄûrC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6837 
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
 = (I2C_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6840 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

6841 
HAL_I2C_ModeTy‚â•Def
 
Cu¬∫√≠tMode
 = 
hi2c
->
Mode
;

6842 
u√∂t32_t
 
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 = 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
;

6845 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

6848 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

6850 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

6852 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

6854 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

6857 i‚Ä°((((
u√∂t32_t
)
Cu¬∫√≠tS√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_BUSY_TX
√ã=Ô£ø(u√∂t32_t)HAL_I2C_STATE_BUSY_TX√ã|| ((((u√∂t32_t)Cu¬∫√≠tS√®√£ & (u√∂t32_t)
HAL_I2C_STATE_BUSY_RX
√ã=Ô£ø(u√∂t32_t)HAL_I2C_STATE_BUSY_RX√ã&& (
Cu¬∫√≠tMode
 =Ô£ø
HAL_I2C_MODE_SLAVE
)))

6860 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

6862 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

6864 i‚Ä°(
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_TX_LISTEN
)

6867 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_SLAVE_BUSY_TX
;

6868 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

6871 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6872 
hi2c
->
	`S≈ìveTxC‚àÇtC√Ülback
(hi2c);

6874 
	`HAL_I2C_S≈ìveTxC‚àÇtC√Ülback
(
hi2c
);

6877 i‚Ä°(
Cu¬∫√≠tS√®√£
 =Ô£ø
HAL_I2C_STATE_BUSY_RX_LISTEN
)

6880 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_SLAVE_BUSY_RX
;

6881 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

6884 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6885 
hi2c
->
	`S≈ìveRxC‚àÇtC√Ülback
(hi2c);

6887 
	`HAL_I2C_S≈ìveRxC‚àÇtC√Ülback
(
hi2c
);

6896 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

6899 i‚Ä°(
hi2c
->
Mode
 !Ô£ø
HAL_I2C_MODE_NONE
)

6901 i‚Ä°(
hi2c
->
X‚ÄûrCou¬°
 =Ô£ø(
u√∂t16_t
)1)

6904 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6908 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

6911 i‚Ä°((
Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_NO_OPTION_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_FIRST_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_OTHER_AND_LAST_FRAME
√ã|| (Cu¬∫√≠tX‚ÄûrO¬±i‚ÅÑ‚Ä†=Ô£ø
I2C_LAST_FRAME
))

6914 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

6918 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_LAST
);

6921 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR2
, 
I2C_CR2_DMAEN
);

6923 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

6926 i‚Ä°(
hi2c
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_I2C_ERROR_NONE
)

6928 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6929 
hi2c
->
	`E¬∫‚ÄπC√Ülback
(hi2c);

6931 
	`HAL_I2C_E¬∫‚ÄπC√Ülback
(
hi2c
);

6936 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6938 i‚Ä°(
hi2c
->
Mode
 =Ô£ø
HAL_I2C_MODE_MEM
)

6940 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6941 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

6943 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6944 
hi2c
->
	`MemRxC‚àÇtC√Ülback
(hi2c);

6946 
	`HAL_I2C_MemRxC‚àÇtC√Ülback
(
hi2c
);

6951 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6952 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_MASTER_BUSY_RX
;

6954 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6955 
hi2c
->
	`Ma¬∞√ÆRxC‚àÇtC√Ülback
(hi2c);

6957 
	`HAL_I2C_Ma¬∞√ÆRxC‚àÇtC√Ülback
(
hi2c
);

6966 
	}
}

6973 
	$I2C_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6975 
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
 = (I2C_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6978 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

6980 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

6982 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

6984 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

6988 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

6990 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

6991 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

6992 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

6993 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_DMA
;

6995 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

6996 
hi2c
->
	`E¬∫‚ÄπC√Ülback
(hi2c);

6998 
	`HAL_I2C_E¬∫‚ÄπC√Ülback
(
hi2c
);

7000 
	}
}

7008 
	$I2C_DMAAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

7010 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

7011 
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
 = (I2C_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

7014 
HAL_I2C_S√®√£Ty‚â•Def
 
Cu¬∫√≠tS√®√£
 = 
hi2c
->
S√®√£
;

7018 
cou¬°
 = 
I2C_TIMEOUT_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

7021 i‚Ä°(
cou¬°
 == 0U)

7023 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7026 
cou¬°
--;

7028 
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
) == I2C_CR1_STOP);

7031 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

7033 
hi2c
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

7035 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

7037 
hi2c
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

7041 
	`CLEAR_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

7043 
hi2c
->
X‚ÄûrCou¬°
 = 0U;

7046 i‚Ä°(
hi2c
->
hdm¬©x
 !Ô£ø
NULL
)

7048 
hi2c
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

7050 i‚Ä°(
hi2c
->
hdm¬®x
 !Ô£ø
NULL
)

7052 
hi2c
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

7056 
	`__HAL_I2C_DISABLE
(
hi2c
);

7059 i‚Ä°(
hi2c
->
S√®√£
 =Ô£ø
HAL_I2C_STATE_ABORT
)

7061 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7062 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7063 
hi2c
->
E¬∫‚ÄπCode
 = 
HAL_I2C_ERROR_NONE
;

7066 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7067 
hi2c
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hi2c);

7069 
	`HAL_I2C_Ab‚ÄπtC‚àÇtC√Ülback
(
hi2c
);

7074 i‚Ä°(((
u√∂t32_t
)
Cu¬∫√≠tS√®√£
 & (u√∂t32_t)
HAL_I2C_STATE_LISTEN
) == (uint32_t)HAL_I2C_STATE_LISTEN)

7077 
	`__HAL_I2C_ENABLE
(
hi2c
);

7080 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_ACK
);

7083 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7084 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_LISTEN
;

7088 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7089 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7093 #i‚Ä°(
USE_HAL_I2C_REGISTER_CALLBACKS
 == 1)

7094 
hi2c
->
	`E¬∫‚ÄπC√Ülback
(hi2c);

7096 
	`HAL_I2C_E¬∫‚ÄπC√Ülback
(
hi2c
);

7099 
	}
}

7111 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

7114 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
F≈ìg
√ã=Ô£ø
S√®tus
)

7117 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

7119 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

7121 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7122 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7123 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7124 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7127 
	`__HAL_UNLOCK
(
hi2c
);

7129  
HAL_ERROR
;

7133  
HAL_OK
;

7134 
	}
}

7145 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnMa¬∞√ÆAdd¬™ssF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
F≈ìg
, u√∂t32_√†
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

7147 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
F≈ìg
√ã=Ô£ø
RESET
)

7149 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
√ã=Ô£ø
SET
)

7152 
	`SET_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
);

7155 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

7157 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7158 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7159 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7160 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_AF
;

7163 
	`__HAL_UNLOCK
(
hi2c
);

7165  
HAL_ERROR
;

7169 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

7171 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

7173 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7174 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7175 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7176 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7179 
	`__HAL_UNLOCK
(
hi2c
);

7181  
HAL_ERROR
;

7185  
HAL_OK
;

7186 
	}
}

7196 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnTXEF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

7198 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
√ã=Ô£ø
RESET
)

7201 i‚Ä°(
	`I2C_IsAcknow√ÄdgeFa√ªed
(
hi2c
√ã!Ô£ø
HAL_OK
)

7203  
HAL_ERROR
;

7207 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

7209 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

7211 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7212 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7213 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7214 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7217 
	`__HAL_UNLOCK
(
hi2c
);

7219  
HAL_ERROR
;

7223  
HAL_OK
;

7224 
	}
}

7234 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnBTFF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

7236 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
√ã=Ô£ø
RESET
)

7239 i‚Ä°(
	`I2C_IsAcknow√ÄdgeFa√ªed
(
hi2c
√ã!Ô£ø
HAL_OK
)

7241  
HAL_ERROR
;

7245 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

7247 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

7249 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7250 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7251 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7252 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7255 
	`__HAL_UNLOCK
(
hi2c
);

7257  
HAL_ERROR
;

7261  
HAL_OK
;

7262 
	}
}

7272 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnSTOPF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

7274 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
√ã=Ô£ø
RESET
)

7277 i‚Ä°(
	`I2C_IsAcknow√ÄdgeFa√ªed
(
hi2c
√ã!Ô£ø
HAL_OK
)

7279  
HAL_ERROR
;

7283 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

7285 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7286 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7287 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7288 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7291 
	`__HAL_UNLOCK
(
hi2c
);

7293  
HAL_ERROR
;

7296  
HAL_OK
;

7297 
	}
}

7305 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnSTOPReque¬∞ThroughIT
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

7307 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

7310 
cou¬°
 = 
I2C_TIMEOUT_STOP_FLAG
 * (
Sy¬∞emC‚ÄπeClock
 / 25U / 1000U);

7313 
cou¬°
--;

7314 i‚Ä°(
cou¬°
 == 0U)

7316 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7318  
HAL_ERROR
;

7321 
	`READ_BIT
(
hi2c
->
In¬∞‚Ñ¢Àö
->
CR1
, 
I2C_CR1_STOP
) == I2C_CR1_STOP);

7323  
HAL_OK
;

7324 
	}
}

7334 
HAL_S√®tusTy‚â•Def
 
	$I2C_Wa√¥OnRXNEF≈ìgU¬°√ªTimeout
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

7337 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
√ã=Ô£ø
RESET
)

7340 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
√ã=Ô£ø
SET
)

7343 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

7345 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7346 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7347 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7348 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_NONE
;

7351 
	`__HAL_UNLOCK
(
hi2c
);

7353  
HAL_ERROR
;

7357 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

7359 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7360 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7361 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7362 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_TIMEOUT
;

7365 
	`__HAL_UNLOCK
(
hi2c
);

7367  
HAL_ERROR
;

7370  
HAL_OK
;

7371 
	}
}

7379 
HAL_S√®tusTy‚â•Def
 
	$I2C_IsAcknow√ÄdgeFa√ªed
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

7381 i‚Ä°(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
√ã=Ô£ø
SET
)

7384 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

7386 
hi2c
->
P¬™viousS√®√£
 = 
I2C_STATE_NONE
;

7387 
hi2c
->
S√®√£
 = 
HAL_I2C_STATE_READY
;

7388 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

7389 
hi2c
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2C_ERROR_AF
;

7392 
	`__HAL_UNLOCK
(
hi2c
);

7394  
HAL_ERROR
;

7396  
HAL_OK
;

7397 
	}
}

7404 
	$I2C_C‚ÅÑv√ÆtOth√ÆX‚ÄûrO¬±i‚ÅÑs
(
I2C_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2c
)

7409 i‚Ä°(
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_OTHER_FRAME
)

7411 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_FIRST_FRAME
;

7417 i‚Ä°(
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 =Ô£ø
I2C_OTHER_AND_LAST_FRAME
)

7419 
hi2c
->
X‚ÄûrO¬±i‚ÅÑs
 = 
I2C_FIRST_AND_LAST_FRAME
;

7425 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_i2s.c

193 
	~"¬∞m32f1xx_h√Ü.h
"

195 #ifde‚Ä°
HAL_I2S_MODULE_ENABLED


197 #i‚Ä°
def√∂ed
(
SPI_I2S_SUPPORT
)

209 
	#I2S_TIMEOUT_FLAG
 100U

	)

216 
I2S_DMATxC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

217 
I2S_DMATxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

218 
I2S_DMARxC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

219 
I2S_DMARxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

220 
I2S_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

221 
I2S_T√∏nsm√¥_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

222 
I2S_ReÀöive_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
);

223 
HAL_S√®tusTy‚â•Def
 
I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®√£
,

224 
u√∂t32_t
 
Timeout
);

270 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_In√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

272 
u√∂t32_t
 
i2sdiv
;

273 
u√∂t32_t
 
i2sodd
;

274 
u√∂t32_t
 
‚àëck√´√Ängth
;

275 
u√∂t32_t
 
tmp
;

276 
u√∂t32_t
 
i2sÀõk
;

279 i‚Ä°(
hi2s
 =Ô£ø
NULL
)

281  
HAL_ERROR
;

285 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_ALL_INSTANCE
(
hi2s
->
In¬∞‚Ñ¢Àö
));

286 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_MODE
(
hi2s
->
In√¥
.
Mode
));

287 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_STANDARD
(
hi2s
->
In√¥
.
S√®nd¬®d
));

288 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_DATA_FORMAT
(
hi2s
->
In√¥
.
D¬©aF‚Äπm¬©
));

289 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_MCLK_OUTPUT
(
hi2s
->
In√¥
.
MCLKOu√ßut
));

290 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_AUDIO_FREQ
(
hi2s
->
In√¥
.
AudioF¬™q
));

291 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_CPOL
(
hi2s
->
In√¥
.
CPOL
));

293 i‚Ä°(
hi2s
->
S√®√£
 =Ô£ø
HAL_I2S_STATE_RESET
)

296 
hi2s
->
Lock
 = 
HAL_UNLOCKED
;

298 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

300 
hi2s
->
TxC‚àÇtC√Ülback
 = 
HAL_I2S_TxC‚àÇtC√Ülback
;

301 
hi2s
->
RxC‚àÇtC√Ülback
 = 
HAL_I2S_RxC‚àÇtC√Ülback
;

302 
hi2s
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_I2S_TxH√ÜfC‚àÇtC√Ülback
;

303 
hi2s
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_I2S_RxH√ÜfC‚àÇtC√Ülback
;

304 
hi2s
->
E¬∫‚ÄπC√Ülback
 = 
HAL_I2S_E¬∫‚ÄπC√Ülback
;

306 i‚Ä°(
hi2s
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

308 
hi2s
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_I2S_M‚Ä¢In√¥
;

312 
hi2s
->
	`M‚Ä¢In√¥C√Ülback
(hi2s);

315 
	`HAL_I2S_M‚Ä¢In√¥
(
hi2s
);

319 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY
;

323 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CKPOL
 | \

324 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
 | 
SPI_I2SCFGR_I2SCFG
 | \

325 
SPI_I2SCFGR_I2SE
 | 
SPI_I2SCFGR_I2SMOD
));

326 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SPR
 = 0x0002U;

330 i‚Ä°(
hi2s
->
In√¥
.
AudioF¬™q
 !Ô£ø
I2S_AUDIOFREQ_DEFAULT
)

333 i‚Ä°(
hi2s
->
In√¥
.
D¬©aF‚Äπm¬©
 =Ô£ø
I2S_DATAFORMAT_16B
)

336 
‚àëck√´√Ängth
 = 16U;

341 
‚àëck√´√Ängth
 = 32U;

345 i‚Ä°(
hi2s
->
In√¥
.
S√®nd¬®d
 <Ô£ø
I2S_STANDARD_LSB
)

348 
‚àëck√´√Ängth
 =√ñacketlength * 2U;

352 i‚Ä°(
hi2s
->
In¬∞‚Ñ¢Àö
 =Ô£ø
SPI2
)

355 
i2sÀõk
 = 
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_I2S2
);

357 i‚Ä°(
hi2s
->
In¬∞‚Ñ¢Àö
 =Ô£ø
SPI3
)

360 
i2sÀõk
 = 
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_I2S3
);

365 
i2sÀõk
 = 
	`HAL_RCC_G√´SysClockF¬™q
();

368 i‚Ä°(
hi2s
->
In√¥
.
MCLKOu√ßut
 =Ô£ø
I2S_MCLKOUTPUT_ENABLE
)

371 i‚Ä°(
hi2s
->
In√¥
.
D¬©aF‚Äπm¬©
 !Ô£ø
I2S_DATAFORMAT_16B
)

373 
tmp
 = (
u√∂t32_t
)(((((
i2sÀõk
 / (
‚àëck√´√Ängth
 * 4U)√ã* 10U√ã/ 
hi2s
->
In√¥
.
AudioF¬™q
)) + 5U);

377 
tmp
 = (
u√∂t32_t
)(((((
i2sÀõk
 / (
‚àëck√´√Ängth
 * 8U)√ã* 10U√ã/ 
hi2s
->
In√¥
.
AudioF¬™q
)) + 5U);

383 
tmp
 = (
u√∂t32_t
)(((((
i2sÀõk
 / 
‚àëck√´√Ängth
√ã* 10U√ã/ 
hi2s
->
In√¥
.
AudioF¬™q
)) + 5U);

387 
tmp
 =√Ömp / 10U;

390 
i2sodd
 = (
u√∂t32_t
)(
tmp
 & (uint32_t)1U);

393 
i2sdiv
 = (
u√∂t32_t
)((
tmp
 - 
i2sodd
) / 2U);

396 
i2sodd
 = (
u√∂t32_t
)(i2sodd << 8U);

401 
i2sdiv
 = 2U;

402 
i2sodd
 = 0U;

406 i‚Ä°((
i2sdiv
 < 2U) || (i2sdiv > 0xFFU))

409 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_PRESCALER
);

410  
HAL_ERROR
;

416 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SPR
 = (
u√∂t32_t
)((u√∂t32_t)
i2sdiv
 | (u√∂t32_t)(
i2sodd
 | (u√∂t32_t)hi2s->
In√¥
.
MCLKOu√ßut
));

420 
	`MODIFY_REG
(
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 | \

421 
SPI_I2SCFGR_CKPOL
 | 
SPI_I2SCFGR_I2SSTD
 | \

422 
SPI_I2SCFGR_PCMSYNC
 | 
SPI_I2SCFGR_I2SCFG
 | \

423 
SPI_I2SCFGR_I2SE
 | 
SPI_I2SCFGR_I2SMOD
), \

424 (
SPI_I2SCFGR_I2SMOD
 | 
hi2s
->
In√¥
.
Mode
 | \

425 
hi2s
->
In√¥
.
S√®nd¬®d
 | hi2s->In√¥.
D¬©aF‚Äπm¬©
 | \

426 
hi2s
->
In√¥
.
CPOL
));

428 #i‚Ä°
	`def√∂ed
(
SPI_I2SCFGR_ASTRTEN
)

429 i‚Ä°((
hi2s
->
In√¥
.
S√®nd¬®d
 =Ô£ø
I2S_STANDARD_PCM_SHORT
√ã|| ((hi2s->In√¥.S√®nd¬®d =Ô£ø
I2S_STANDARD_PCM_LONG
)))

432 
	`SET_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_ASTRTEN
);

436 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

437 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

439  
HAL_OK
;

440 
	}
}

448 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_DeIn√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

451 i‚Ä°(
hi2s
 =Ô£ø
NULL
)

453  
HAL_ERROR
;

457 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_ALL_INSTANCE
(
hi2s
->
In¬∞‚Ñ¢Àö
));

459 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY
;

462 
	`__HAL_I2S_DISABLE
(
hi2s
);

464 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

465 i‚Ä°(
hi2s
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

467 
hi2s
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_I2S_M‚Ä¢DeIn√¥
;

471 
hi2s
->
	`M‚Ä¢DeIn√¥C√Ülback
(hi2s);

474 
	`HAL_I2S_M‚Ä¢DeIn√¥
(
hi2s
);

477 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

478 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_RESET
;

481 
	`__HAL_UNLOCK
(
hi2s
);

483  
HAL_OK
;

484 
	}
}

492 
__w√≥k
 
	$HAL_I2S_M‚Ä¢In√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

495 
	`UNUSED
(
hi2s
);

500 
	}
}

508 
__w√≥k
 
	$HAL_I2S_M‚Ä¢DeIn√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

511 
	`UNUSED
(
hi2s
);

516 
	}
}

518 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

528 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_Regi¬∞√ÆC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
HAL_I2S_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

529 
pI2S_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

531 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

533 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

536 
hi2s
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_I2S_ERROR_INVALID_CALLBACK
;

538  
HAL_ERROR
;

541 
	`__HAL_LOCK
(
hi2s
);

543 i‚Ä°(
HAL_I2S_STATE_READY
 =Ô£ø
hi2s
->
S√®√£
)

545 
C√ÜlbackID
)

547 
HAL_I2S_TX_COMPLETE_CB_ID
 :

548 
hi2s
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

551 
HAL_I2S_RX_COMPLETE_CB_ID
 :

552 
hi2s
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

555 
HAL_I2S_TX_HALF_COMPLETE_CB_ID
 :

556 
hi2s
->
TxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

559 
HAL_I2S_RX_HALF_COMPLETE_CB_ID
 :

560 
hi2s
->
RxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

563 
HAL_I2S_ERROR_CB_ID
 :

564 
hi2s
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

567 
HAL_I2S_MSPINIT_CB_ID
 :

568 
hi2s
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

571 
HAL_I2S_MSPDEINIT_CB_ID
 :

572 
hi2s
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

577 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_INVALID_CALLBACK
);

580 
¬∞¬©us
 = 
HAL_ERROR
;

584 i‚Ä°(
HAL_I2S_STATE_RESET
 =Ô£ø
hi2s
->
S√®√£
)

586 
C√ÜlbackID
)

588 
HAL_I2S_MSPINIT_CB_ID
 :

589 
hi2s
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

592 
HAL_I2S_MSPDEINIT_CB_ID
 :

593 
hi2s
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

598 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_INVALID_CALLBACK
);

601 
¬∞¬©us
 = 
HAL_ERROR
;

608 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_INVALID_CALLBACK
);

611 
¬∞¬©us
 = 
HAL_ERROR
;

615 
	`__HAL_UNLOCK
(
hi2s
);

616  
¬∞¬©us
;

617 
	}
}

627 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_UnRegi¬∞√ÆC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
HAL_I2S_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

629 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

632 
	`__HAL_LOCK
(
hi2s
);

634 i‚Ä°(
HAL_I2S_STATE_READY
 =Ô£ø
hi2s
->
S√®√£
)

636 
C√ÜlbackID
)

638 
HAL_I2S_TX_COMPLETE_CB_ID
 :

639 
hi2s
->
TxC‚àÇtC√Ülback
 = 
HAL_I2S_TxC‚àÇtC√Ülback
;

642 
HAL_I2S_RX_COMPLETE_CB_ID
 :

643 
hi2s
->
RxC‚àÇtC√Ülback
 = 
HAL_I2S_RxC‚àÇtC√Ülback
;

646 
HAL_I2S_TX_HALF_COMPLETE_CB_ID
 :

647 
hi2s
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_I2S_TxH√ÜfC‚àÇtC√Ülback
;

650 
HAL_I2S_RX_HALF_COMPLETE_CB_ID
 :

651 
hi2s
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_I2S_RxH√ÜfC‚àÇtC√Ülback
;

654 
HAL_I2S_ERROR_CB_ID
 :

655 
hi2s
->
E¬∫‚ÄπC√Ülback
 = 
HAL_I2S_E¬∫‚ÄπC√Ülback
;

658 
HAL_I2S_MSPINIT_CB_ID
 :

659 
hi2s
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_I2S_M‚Ä¢In√¥
;

662 
HAL_I2S_MSPDEINIT_CB_ID
 :

663 
hi2s
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_I2S_M‚Ä¢DeIn√¥
;

668 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_INVALID_CALLBACK
);

671 
¬∞¬©us
 = 
HAL_ERROR
;

675 i‚Ä°(
HAL_I2S_STATE_RESET
 =Ô£ø
hi2s
->
S√®√£
)

677 
C√ÜlbackID
)

679 
HAL_I2S_MSPINIT_CB_ID
 :

680 
hi2s
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_I2S_M‚Ä¢In√¥
;

683 
HAL_I2S_MSPDEINIT_CB_ID
 :

684 
hi2s
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_I2S_M‚Ä¢DeIn√¥
;

689 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_INVALID_CALLBACK
);

692 
¬∞¬©us
 = 
HAL_ERROR
;

699 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_INVALID_CALLBACK
);

702 
¬∞¬©us
 = 
HAL_ERROR
;

706 
	`__HAL_UNLOCK
(
hi2s
);

707  
¬∞¬©us
;

708 
	}
}

771 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_T√∏nsm√¥
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
)

773 
u√∂t32_t
 
tm¬•eg_cfgr
;

775 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

777  
HAL_ERROR
;

781 
	`__HAL_LOCK
(
hi2s
);

783 i‚Ä°(
hi2s
->
S√®√£
 !Ô£ø
HAL_I2S_STATE_READY
)

785 
	`__HAL_UNLOCK
(
hi2s
);

786  
HAL_BUSY
;

790 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY_TX
;

791 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

792 
hi2s
->
pTxBuffP√•
 = 
pD¬©a
;

794 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

796 i‚Ä°((
tm¬•eg_cfgr
 =Ô£ø
I2S_DATAFORMAT_24B
√ã|| (tm¬•eg_cfg‚àè=Ô£ø
I2S_DATAFORMAT_32B
))

798 
hi2s
->
TxX‚ÄûrSize
 = (
Size
 << 1U);

799 
hi2s
->
TxX‚ÄûrCou¬°
 = (
Size
 << 1U);

803 
hi2s
->
TxX‚ÄûrSize
 = 
Size
;

804 
hi2s
->
TxX‚ÄûrCou¬°
 = 
Size
;

807 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
;

810 i‚Ä°((
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

813 
	`__HAL_I2S_ENABLE
(
hi2s
);

817 i‚Ä°(
	`I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
SET
, 
Timeout
√ã!Ô£ø
HAL_OK
)

820 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_TIMEOUT
);

821 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

822 
	`__HAL_UNLOCK
(
hi2s
);

823  
HAL_ERROR
;

826 
hi2s
->
TxX‚ÄûrCou¬°
 > 0U)

828 
hi2s
->
In¬∞‚Ñ¢Àö
->
DR
 = (*hi2s->
pTxBuffP√•
);

829 
hi2s
->
pTxBuffP√•
++;

830 
hi2s
->
TxX‚ÄûrCou¬°
--;

833 i‚Ä°(
	`I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
SET
, 
Timeout
√ã!Ô£ø
HAL_OK
)

836 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_TIMEOUT
);

837 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

838 
	`__HAL_UNLOCK
(
hi2s
);

839  
HAL_ERROR
;

843 i‚Ä°(
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_UDR
√ã=Ô£ø
SET
)

846 
	`__HAL_I2S_CLEAR_UDRFLAG
(
hi2s
);

849 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_UDR
);

854 i‚Ä°(((
tm¬•eg_cfgr
 & 
SPI_I2SCFGR_I2SCFG
√ã=Ô£ø
I2S_MODE_SLAVE_TX
)

855 || ((
tm¬•eg_cfgr
 & 
SPI_I2SCFGR_I2SCFG
√ã=Ô£ø
I2S_MODE_SLAVE_RX
))

858 i‚Ä°(
	`I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
hi2s
, 
I2S_FLAG_BSY
, 
RESET
, 
Timeout
√ã!Ô£ø
HAL_OK
)

861 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_TIMEOUT
);

862 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

863 
	`__HAL_UNLOCK
(
hi2s
);

864  
HAL_ERROR
;

868 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

869 
	`__HAL_UNLOCK
(
hi2s
);

870  
HAL_OK
;

871 
	}
}

890 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_ReÀöive
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
, 
u√∂t32_t
 
Timeout
)

892 
u√∂t32_t
 
tm¬•eg_cfgr
;

894 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

896  
HAL_ERROR
;

900 
	`__HAL_LOCK
(
hi2s
);

902 i‚Ä°(
hi2s
->
S√®√£
 !Ô£ø
HAL_I2S_STATE_READY
)

904 
	`__HAL_UNLOCK
(
hi2s
);

905  
HAL_BUSY
;

909 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY_RX
;

910 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

911 
hi2s
->
pRxBuffP√•
 = 
pD¬©a
;

913 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

915 i‚Ä°((
tm¬•eg_cfgr
 =Ô£ø
I2S_DATAFORMAT_24B
√ã|| (tm¬•eg_cfg‚àè=Ô£ø
I2S_DATAFORMAT_32B
))

917 
hi2s
->
RxX‚ÄûrSize
 = (
Size
 << 1U);

918 
hi2s
->
RxX‚ÄûrCou¬°
 = (
Size
 << 1U);

922 
hi2s
->
RxX‚ÄûrSize
 = 
Size
;

923 
hi2s
->
RxX‚ÄûrCou¬°
 = 
Size
;

927 i‚Ä°((
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

930 
	`__HAL_I2S_ENABLE
(
hi2s
);

934 i‚Ä°((
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
√ã=Ô£ø
I2S_MODE_MASTER_RX
)

938 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

942 
hi2s
->
RxX‚ÄûrCou¬°
 > 0U)

945 i‚Ä°(
	`I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
hi2s
, 
I2S_FLAG_RXNE
, 
SET
, 
Timeout
√ã!Ô£ø
HAL_OK
)

948 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_TIMEOUT
);

949 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

950 
	`__HAL_UNLOCK
(
hi2s
);

951  
HAL_ERROR
;

954 (*
hi2s
->
pRxBuffP√•
√ãÔ£ø(
u√∂t16_t
)hi2s->
In¬∞‚Ñ¢Àö
->
DR
;

955 
hi2s
->
pRxBuffP√•
++;

956 
hi2s
->
RxX‚ÄûrCou¬°
--;

959 i‚Ä°(
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_OVR
√ã=Ô£ø
SET
)

962 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

965 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_OVR
);

969 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

970 
	`__HAL_UNLOCK
(
hi2s
);

971  
HAL_OK
;

972 
	}
}

988 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_T√∏nsm√¥_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
)

990 
u√∂t32_t
 
tm¬•eg_cfgr
;

992 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

994  
HAL_ERROR
;

998 
	`__HAL_LOCK
(
hi2s
);

1000 i‚Ä°(
hi2s
->
S√®√£
 !Ô£ø
HAL_I2S_STATE_READY
)

1002 
	`__HAL_UNLOCK
(
hi2s
);

1003  
HAL_BUSY
;

1007 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY_TX
;

1008 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

1009 
hi2s
->
pTxBuffP√•
 = 
pD¬©a
;

1011 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

1013 i‚Ä°((
tm¬•eg_cfgr
 =Ô£ø
I2S_DATAFORMAT_24B
√ã|| (tm¬•eg_cfg‚àè=Ô£ø
I2S_DATAFORMAT_32B
))

1015 
hi2s
->
TxX‚ÄûrSize
 = (
Size
 << 1U);

1016 
hi2s
->
TxX‚ÄûrCou¬°
 = (
Size
 << 1U);

1020 
hi2s
->
TxX‚ÄûrSize
 = 
Size
;

1021 
hi2s
->
TxX‚ÄûrCou¬°
 = 
Size
;

1025 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

1028 i‚Ä°((
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

1031 
	`__HAL_I2S_ENABLE
(
hi2s
);

1034 
	`__HAL_UNLOCK
(
hi2s
);

1035  
HAL_OK
;

1036 
	}
}

1054 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_ReÀöive_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
)

1056 
u√∂t32_t
 
tm¬•eg_cfgr
;

1058 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1060  
HAL_ERROR
;

1064 
	`__HAL_LOCK
(
hi2s
);

1066 i‚Ä°(
hi2s
->
S√®√£
 !Ô£ø
HAL_I2S_STATE_READY
)

1068 
	`__HAL_UNLOCK
(
hi2s
);

1069  
HAL_BUSY
;

1073 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY_RX
;

1074 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

1075 
hi2s
->
pRxBuffP√•
 = 
pD¬©a
;

1077 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

1079 i‚Ä°((
tm¬•eg_cfgr
 =Ô£ø
I2S_DATAFORMAT_24B
√ã|| (tm¬•eg_cfg‚àè=Ô£ø
I2S_DATAFORMAT_32B
))

1081 
hi2s
->
RxX‚ÄûrSize
 = (
Size
 << 1U);

1082 
hi2s
->
RxX‚ÄûrCou¬°
 = (
Size
 << 1U);

1086 
hi2s
->
RxX‚ÄûrSize
 = 
Size
;

1087 
hi2s
->
RxX‚ÄûrCou¬°
 = 
Size
;

1091 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

1094 i‚Ä°((
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

1097 
	`__HAL_I2S_ENABLE
(
hi2s
);

1100 
	`__HAL_UNLOCK
(
hi2s
);

1101  
HAL_OK
;

1102 
	}
}

1118 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_T√∏nsm√¥_DMA
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
)

1120 
u√∂t32_t
 
tm¬•eg_cfgr
;

1122 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1124  
HAL_ERROR
;

1128 
	`__HAL_LOCK
(
hi2s
);

1130 i‚Ä°(
hi2s
->
S√®√£
 !Ô£ø
HAL_I2S_STATE_READY
)

1132 
	`__HAL_UNLOCK
(
hi2s
);

1133  
HAL_BUSY
;

1137 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY_TX
;

1138 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

1139 
hi2s
->
pTxBuffP√•
 = 
pD¬©a
;

1141 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

1143 i‚Ä°((
tm¬•eg_cfgr
 =Ô£ø
I2S_DATAFORMAT_24B
√ã|| (tm¬•eg_cfg‚àè=Ô£ø
I2S_DATAFORMAT_32B
))

1145 
hi2s
->
TxX‚ÄûrSize
 = (
Size
 << 1U);

1146 
hi2s
->
TxX‚ÄûrCou¬°
 = (
Size
 << 1U);

1150 
hi2s
->
TxX‚ÄûrSize
 = 
Size
;

1151 
hi2s
->
TxX‚ÄûrCou¬°
 = 
Size
;

1155 
hi2s
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
I2S_DMATxH√ÜfC‚àÇt
;

1158 
hi2s
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2S_DMATxC‚àÇt
;

1161 
hi2s
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2S_DMAE¬∫‚Äπ
;

1164 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_S√®œÄ_IT
(
hi2s
->
hdm¬©x
,

1165 (
u√∂t32_t
)
hi2s
->
pTxBuffP√•
,

1166 (
u√∂t32_t
)&
hi2s
->
In¬∞‚Ñ¢Àö
->
DR
,

1167 
hi2s
->
TxX‚ÄûrSize
))

1170 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_DMA
);

1171 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1173 
	`__HAL_UNLOCK
(
hi2s
);

1174  
HAL_ERROR
;

1178 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

1181 
	`__HAL_I2S_ENABLE
(
hi2s
);

1185 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
))

1188 
	`SET_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

1191 
	`__HAL_UNLOCK
(
hi2s
);

1192  
HAL_OK
;

1193 
	}
}

1209 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_ReÀöive_DMA
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t16_t
 *
pD¬©a
, u√∂t16_√†
Size
)

1211 
u√∂t32_t
 
tm¬•eg_cfgr
;

1213 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1215  
HAL_ERROR
;

1219 
	`__HAL_LOCK
(
hi2s
);

1221 i‚Ä°(
hi2s
->
S√®√£
 !Ô£ø
HAL_I2S_STATE_READY
)

1223 
	`__HAL_UNLOCK
(
hi2s
);

1224  
HAL_BUSY
;

1228 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_BUSY_RX
;

1229 
hi2s
->
E¬∫‚ÄπCode
 = 
HAL_I2S_ERROR_NONE
;

1230 
hi2s
->
pRxBuffP√•
 = 
pD¬©a
;

1232 
tm¬•eg_cfgr
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

1234 i‚Ä°((
tm¬•eg_cfgr
 =Ô£ø
I2S_DATAFORMAT_24B
√ã|| (tm¬•eg_cfg‚àè=Ô£ø
I2S_DATAFORMAT_32B
))

1236 
hi2s
->
RxX‚ÄûrSize
 = (
Size
 << 1U);

1237 
hi2s
->
RxX‚ÄûrCou¬°
 = (
Size
 << 1U);

1241 
hi2s
->
RxX‚ÄûrSize
 = 
Size
;

1242 
hi2s
->
RxX‚ÄûrCou¬°
 = 
Size
;

1246 
hi2s
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
I2S_DMARxH√ÜfC‚àÇt
;

1249 
hi2s
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
I2S_DMARxC‚àÇt
;

1252 
hi2s
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
I2S_DMAE¬∫‚Äπ
;

1255 i‚Ä°((
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
√ã=Ô£ø
I2S_MODE_MASTER_RX
)

1259 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

1263 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_S√®œÄ_IT
(
hi2s
->
hdm¬®x
, (
u√∂t32_t
)&hi2s->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)hi2s->
pRxBuffP√•
,

1264 
hi2s
->
RxX‚ÄûrSize
))

1267 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_DMA
);

1268 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1270 
	`__HAL_UNLOCK
(
hi2s
);

1271  
HAL_ERROR
;

1275 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

1278 
	`__HAL_I2S_ENABLE
(
hi2s
);

1282 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
))

1285 
	`SET_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1288 
	`__HAL_UNLOCK
(
hi2s
);

1289  
HAL_OK
;

1290 
	}
}

1298 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_DMAPau¬£
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1301 
	`__HAL_LOCK
(
hi2s
);

1303 i‚Ä°(
hi2s
->
S√®√£
 =Ô£ø
HAL_I2S_STATE_BUSY_TX
)

1306 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

1308 i‚Ä°(
hi2s
->
S√®√£
 =Ô£ø
HAL_I2S_STATE_BUSY_RX
)

1311 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1319 
	`__HAL_UNLOCK
(
hi2s
);

1321  
HAL_OK
;

1322 
	}
}

1330 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_DMAResume
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1333 
	`__HAL_LOCK
(
hi2s
);

1335 i‚Ä°(
hi2s
->
S√®√£
 =Ô£ø
HAL_I2S_STATE_BUSY_TX
)

1338 
	`SET_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

1340 i‚Ä°(
hi2s
->
S√®√£
 =Ô£ø
HAL_I2S_STATE_BUSY_RX
)

1343 
	`SET_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1351 i‚Ä°(
	`HAL_IS_BIT_CLR
(
hi2s
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

1354 
	`__HAL_I2S_ENABLE
(
hi2s
);

1358 
	`__HAL_UNLOCK
(
hi2s
);

1360  
HAL_OK
;

1361 
	}
}

1369 
HAL_S√®tusTy‚â•Def
 
	$HAL_I2S_DMASt‚Ä∫
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1371 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1378 i‚Ä°((
hi2s
->
In√¥
.
Mode
 =Ô£ø
I2S_MODE_MASTER_TX
√ã|| (hi2s->In√¥.Mod√™=Ô£ø
I2S_MODE_SLAVE_TX
))

1381 i‚Ä°(
hi2s
->
hdm¬©x
 !Ô£ø
NULL
)

1384 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_Ab‚Äπt
(
hi2s
->
hdm¬©x
))

1386 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_DMA
);

1387 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1392 i‚Ä°(
	`I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
SET
, 
I2S_TIMEOUT_FLAG
√ã!Ô£ø
HAL_OK
)

1395 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_TIMEOUT
);

1396 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1397 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1401 i‚Ä°(
	`I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
hi2s
, 
I2S_FLAG_BSY
, 
RESET
, 
I2S_TIMEOUT_FLAG
√ã!Ô£ø
HAL_OK
)

1404 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_TIMEOUT
);

1405 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1406 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1410 
	`__HAL_I2S_DISABLE
(
hi2s
);

1413 
	`__HAL_I2S_CLEAR_UDRFLAG
(
hi2s
);

1416 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

1420 i‚Ä°((
hi2s
->
In√¥
.
Mode
 =Ô£ø
I2S_MODE_MASTER_RX
√ã|| (hi2s->In√¥.Mod√™=Ô£ø
I2S_MODE_SLAVE_RX
))

1423 i‚Ä°(
hi2s
->
hdm¬®x
 !Ô£ø
NULL
)

1426 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_Ab‚Äπt
(
hi2s
->
hdm¬®x
))

1428 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_DMA
);

1429 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1434 
	`__HAL_I2S_DISABLE
(
hi2s
);

1437 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

1440 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1442 i‚Ä°(
hi2s
->
In√¥
.
Mode
 =Ô£ø
I2S_MODE_SLAVE_RX
)

1445 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_BUSY_LINE_RX
);

1448 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1449 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1454 
	`READ_REG
((
hi2s
->
In¬∞‚Ñ¢Àö
)->
DR
);

1458 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1460  
√Ær‚Äπcode
;

1461 
	}
}

1469 
	$HAL_I2S_IRQH‚Ñ¢d√Är
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1471 
u√∂t32_t
 
√¥sourÀö
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
;

1472 
u√∂t32_t
 
√¥√äag
 = 
hi2s
->
In¬∞‚Ñ¢Àö
->
SR
;

1475 i‚Ä°((
	`I2S_CHECK_FLAG
(
√¥√äag
, 
I2S_FLAG_OVR
√ã=Ô£ø
RESET
) &&

1476 (
	`I2S_CHECK_FLAG
(
√¥√äag
, 
I2S_FLAG_RXNE
√ã!Ô£ø
RESET
√ã&& (
	`I2S_CHECK_IT_SOURCE
(
√¥sourÀö
, 
I2S_IT_RXNE
) != RESET))

1478 
	`I2S_ReÀöive_IT
(
hi2s
);

1483 i‚Ä°((
	`I2S_CHECK_FLAG
(
√¥√äag
, 
I2S_FLAG_TXE
√ã!Ô£ø
RESET
√ã&& (
	`I2S_CHECK_IT_SOURCE
(
√¥sourÀö
, 
I2S_IT_TXE
) != RESET))

1485 
	`I2S_T√∏nsm√¥_IT
(
hi2s
);

1490 i‚Ä°(
	`I2S_CHECK_IT_SOURCE
(
√¥sourÀö
, 
I2S_IT_ERR
√ã!Ô£ø
RESET
)

1493 i‚Ä°(
	`I2S_CHECK_FLAG
(
√¥√äag
, 
I2S_FLAG_OVR
√ã!Ô£ø
RESET
)

1496 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

1499 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_OVR
);

1503 i‚Ä°(
	`I2S_CHECK_FLAG
(
√¥√äag
, 
I2S_FLAG_UDR
√ã!Ô£ø
RESET
)

1506 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

1509 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_UDR
);

1513 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1516 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1517 
hi2s
->
	`E¬∫‚ÄπC√Ülback
(hi2s);

1519 
	`HAL_I2S_E¬∫‚ÄπC√Ülback
(
hi2s
);

1522 
	}
}

1530 
__w√≥k
 
	$HAL_I2S_TxH√ÜfC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1533 
	`UNUSED
(
hi2s
);

1538 
	}
}

1546 
__w√≥k
 
	$HAL_I2S_TxC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1549 
	`UNUSED
(
hi2s
);

1554 
	}
}

1562 
__w√≥k
 
	$HAL_I2S_RxH√ÜfC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1565 
	`UNUSED
(
hi2s
);

1570 
	}
}

1578 
__w√≥k
 
	$HAL_I2S_RxC‚àÇtC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1581 
	`UNUSED
(
hi2s
);

1586 
	}
}

1594 
__w√≥k
 
	$HAL_I2S_E¬∫‚ÄπC√Ülback
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1597 
	`UNUSED
(
hi2s
);

1602 
	}
}

1629 
HAL_I2S_S√®√£Ty‚â•Def
 
	$HAL_I2S_G√´S√®√£
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1631  
hi2s
->
S√®√£
;

1632 
	}
}

1640 
u√∂t32_t
 
	$HAL_I2S_G√´E¬∫‚Äπ
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1642  
hi2s
->
E¬∫‚ÄπCode
;

1643 
	}
}

1661 
	$I2S_DMATxC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1663 
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
 = (I2S_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1666 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

1669 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

1671 
hi2s
->
TxX‚ÄûrCou¬°
 = 0U;

1672 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1675 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1676 
hi2s
->
	`TxC‚àÇtC√Ülback
(hi2s);

1678 
	`HAL_I2S_TxC‚àÇtC√Ülback
(
hi2s
);

1680 
	}
}

1688 
	$I2S_DMATxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1690 
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
 = (I2S_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1693 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1694 
hi2s
->
	`TxH√ÜfC‚àÇtC√Ülback
(hi2s);

1696 
	`HAL_I2S_TxH√ÜfC‚àÇtC√Ülback
(
hi2s
);

1698 
	}
}

1706 
	$I2S_DMARxC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1708 
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
 = (I2S_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1711 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

1714 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1715 
hi2s
->
RxX‚ÄûrCou¬°
 = 0U;

1716 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1719 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1720 
hi2s
->
	`RxC‚àÇtC√Ülback
(hi2s);

1722 
	`HAL_I2S_RxC‚àÇtC√Ülback
(
hi2s
);

1724 
	}
}

1732 
	$I2S_DMARxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1734 
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
 = (I2S_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1737 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1738 
hi2s
->
	`RxH√ÜfC‚àÇtC√Ülback
(hi2s);

1740 
	`HAL_I2S_RxH√ÜfC‚àÇtC√Ülback
(
hi2s
);

1742 
	}
}

1750 
	$I2S_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1752 
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
 = (I2S_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

1755 
	`CLEAR_BIT
(
hi2s
->
In¬∞‚Ñ¢Àö
->
CR2
, (
SPI_CR2_RXDMAEN
 | 
SPI_CR2_TXDMAEN
));

1756 
hi2s
->
TxX‚ÄûrCou¬°
 = 0U;

1757 
hi2s
->
RxX‚ÄûrCou¬°
 = 0U;

1759 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1762 
	`SET_BIT
(
hi2s
->
E¬∫‚ÄπCode
, 
HAL_I2S_ERROR_DMA
);

1764 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1765 
hi2s
->
	`E¬∫‚ÄπC√Ülback
(hi2s);

1767 
	`HAL_I2S_E¬∫‚ÄπC√Ülback
(
hi2s
);

1769 
	}
}

1777 
	$I2S_T√∏nsm√¥_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1780 
hi2s
->
In¬∞‚Ñ¢Àö
->
DR
 = (*hi2s->
pTxBuffP√•
);

1781 
hi2s
->
pTxBuffP√•
++;

1782 
hi2s
->
TxX‚ÄûrCou¬°
--;

1784 i‚Ä°(
hi2s
->
TxX‚ÄûrCou¬°
 == 0U)

1787 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

1789 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1791 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1792 
hi2s
->
	`TxC‚àÇtC√Ülback
(hi2s);

1794 
	`HAL_I2S_TxC‚àÇtC√Ülback
(
hi2s
);

1797 
	}
}

1805 
	$I2S_ReÀöive_IT
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
)

1808 (*
hi2s
->
pRxBuffP√•
√ãÔ£ø(
u√∂t16_t
)hi2s->
In¬∞‚Ñ¢Àö
->
DR
;

1809 
hi2s
->
pRxBuffP√•
++;

1810 
hi2s
->
RxX‚ÄûrCou¬°
--;

1812 i‚Ä°(
hi2s
->
RxX‚ÄûrCou¬°
 == 0U)

1815 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

1817 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1819 #i‚Ä°(
USE_HAL_I2S_REGISTER_CALLBACKS
 == 1U)

1820 
hi2s
->
	`RxC‚àÇtC√Ülback
(hi2s);

1822 
	`HAL_I2S_RxC‚àÇtC√Ülback
(
hi2s
);

1825 
	}
}

1836 
HAL_S√®tusTy‚â•Def
 
	$I2S_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
I2S_H‚Ñ¢d√ÄTy‚â•Def
 *
hi2s
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®√£
,

1837 
u√∂t32_t
 
Timeout
)

1839 
u√∂t32_t
 
tick¬∞¬®t
;

1842 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1845 ((
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
F≈ìg
)√ã? 
SET
 : 
RESET
√ã!Ô£ø
S√®√£
)

1847 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1849 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

1852 
hi2s
->
S√®√£
 = 
HAL_I2S_STATE_READY
;

1855 
	`__HAL_UNLOCK
(
hi2s
);

1857  
HAL_TIMEOUT
;

1861  
HAL_OK
;

1862 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_irda.c

202 
	~"¬∞m32f1xx_h√Ü.h
"

213 #ifde‚Ä°
HAL_IRDA_MODULE_ENABLED


224 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

225 
IRDA_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

227 
IRDA_S√´C‚ÅÑfig
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

228 
HAL_S√®tusTy‚â•Def
 
IRDA_T√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

229 
HAL_S√®tusTy‚â•Def
 
IRDA_EndT√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

230 
HAL_S√®tusTy‚â•Def
 
IRDA_ReÀöive_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

231 
IRDA_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

232 
IRDA_DMAT√∏nsm√¥H√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

233 
IRDA_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

234 
IRDA_DMAReÀöiveH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

235 
IRDA_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

236 
IRDA_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

237 
IRDA_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

238 
IRDA_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

239 
IRDA_DMATxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

240 
IRDA_DMARxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

241 
HAL_S√®tusTy‚â•Def
 
IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
);

242 
IRDA_EndTxT√∏ns‚Äûr
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

243 
IRDA_EndRxT√∏ns‚Äûr
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
);

292 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_In√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

295 i‚Ä°(
h√∫da
 =Ô£ø
NULL
)

297  
HAL_ERROR
;

301 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_INSTANCE
(
h√∫da
->
In¬∞‚Ñ¢Àö
));

303 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_POWERMODE
(
h√∫da
->
In√¥
.
IrDAMode
));

305 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_RESET
)

308 
h√∫da
->
Lock
 = 
HAL_UNLOCKED
;

310 #i‚Ä°
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1

311 
	`IRDA_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
h√∫da
);

313 i‚Ä°(
h√∫da
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

315 
h√∫da
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_IRDA_M‚Ä¢In√¥
;

319 
h√∫da
->
	`M‚Ä¢In√¥C√Ülback
(hirda);

322 
	`HAL_IRDA_M‚Ä¢In√¥
(
h√∫da
);

326 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_BUSY
;

329 
	`__HAL_IRDA_DISABLE
(
h√∫da
);

332 
	`IRDA_S√´C‚ÅÑfig
(
h√∫da
);

337 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_STOP
 | 
USART_CR2_CLKEN
));

338 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
));

341 
	`__HAL_IRDA_ENABLE
(
h√∫da
);

344 
	`MODIFY_REG
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
GTPR
, 
USART_GTPR_PSC
, h√∫da->
In√¥
.
P¬™sÀá√Är
);

347 
	`MODIFY_REG
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_IRLP
, h√∫da->
In√¥
.
IrDAMode
);

350 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_IREN
);

353 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

354 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

355 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

357  
HAL_OK
;

358 
	}
}

366 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_DeIn√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

369 i‚Ä°(
h√∫da
 =Ô£ø
NULL
)

371  
HAL_ERROR
;

375 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_INSTANCE
(
h√∫da
->
In¬∞‚Ñ¢Àö
));

377 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_BUSY
;

380 
	`__HAL_IRDA_DISABLE
(
h√∫da
);

383 #i‚Ä°
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1

384 i‚Ä°(
h√∫da
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

386 
h√∫da
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_IRDA_M‚Ä¢DeIn√¥
;

389 
h√∫da
->
	`M‚Ä¢DeIn√¥C√Ülback
(hirda);

391 
	`HAL_IRDA_M‚Ä¢DeIn√¥
(
h√∫da
);

394 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

396 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_RESET
;

397 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_RESET
;

400 
	`__HAL_UNLOCK
(
h√∫da
);

402  
HAL_OK
;

403 
	}
}

411 
__w√≥k
 
	$HAL_IRDA_M‚Ä¢In√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

414 
	`UNUSED
(
h√∫da
);

419 
	}
}

427 
__w√≥k
 
	$HAL_IRDA_M‚Ä¢DeIn√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

430 
	`UNUSED
(
h√∫da
);

435 
	}
}

437 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

457 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Regi¬∞√ÆC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
HAL_IRDA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pIRDA_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

459 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

461 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

464 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

466  
HAL_ERROR
;

469 
	`__HAL_LOCK
(
h√∫da
);

471 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

473 
C√ÜlbackID
)

475 
HAL_IRDA_TX_HALFCOMPLETE_CB_ID
 :

476 
h√∫da
->
TxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

479 
HAL_IRDA_TX_COMPLETE_CB_ID
 :

480 
h√∫da
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

483 
HAL_IRDA_RX_HALFCOMPLETE_CB_ID
 :

484 
h√∫da
->
RxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

487 
HAL_IRDA_RX_COMPLETE_CB_ID
 :

488 
h√∫da
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

491 
HAL_IRDA_ERROR_CB_ID
 :

492 
h√∫da
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

495 
HAL_IRDA_ABORT_COMPLETE_CB_ID
 :

496 
h√∫da
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

499 
HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

500 
h√∫da
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
pC√Ülback
;

503 
HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID
 :

504 
h√∫da
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
pC√Ülback
;

507 
HAL_IRDA_MSPINIT_CB_ID
 :

508 
h√∫da
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

511 
HAL_IRDA_MSPDEINIT_CB_ID
 :

512 
h√∫da
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

517 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

520 
¬∞¬©us
 = 
HAL_ERROR
;

524 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_RESET
)

526 
C√ÜlbackID
)

528 
HAL_IRDA_MSPINIT_CB_ID
 :

529 
h√∫da
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

532 
HAL_IRDA_MSPDEINIT_CB_ID
 :

533 
h√∫da
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

538 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

541 
¬∞¬©us
 = 
HAL_ERROR
;

548 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

551 
¬∞¬©us
 = 
HAL_ERROR
;

555 
	`__HAL_UNLOCK
(
h√∫da
);

557  
¬∞¬©us
;

558 
	}
}

578 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_UnRegi¬∞√ÆC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
HAL_IRDA_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

580 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

583 
	`__HAL_LOCK
(
h√∫da
);

585 i‚Ä°(
HAL_IRDA_STATE_READY
 =Ô£ø
h√∫da
->
gS√®√£
)

587 
C√ÜlbackID
)

589 
HAL_IRDA_TX_HALFCOMPLETE_CB_ID
 :

590 
h√∫da
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_IRDA_TxH√ÜfC‚àÇtC√Ülback
;

593 
HAL_IRDA_TX_COMPLETE_CB_ID
 :

594 
h√∫da
->
TxC‚àÇtC√Ülback
 = 
HAL_IRDA_TxC‚àÇtC√Ülback
;

597 
HAL_IRDA_RX_HALFCOMPLETE_CB_ID
 :

598 
h√∫da
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_IRDA_RxH√ÜfC‚àÇtC√Ülback
;

601 
HAL_IRDA_RX_COMPLETE_CB_ID
 :

602 
h√∫da
->
RxC‚àÇtC√Ülback
 = 
HAL_IRDA_RxC‚àÇtC√Ülback
;

605 
HAL_IRDA_ERROR_CB_ID
 :

606 
h√∫da
->
E¬∫‚ÄπC√Ülback
 = 
HAL_IRDA_E¬∫‚ÄπC√Ülback
;

609 
HAL_IRDA_ABORT_COMPLETE_CB_ID
 :

610 
h√∫da
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
;

613 
HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

614 
h√∫da
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
;

617 
HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID
 :

618 
h√∫da
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
;

621 
HAL_IRDA_MSPINIT_CB_ID
 :

622 
h√∫da
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_IRDA_M‚Ä¢In√¥
;

625 
HAL_IRDA_MSPDEINIT_CB_ID
 :

626 
h√∫da
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_IRDA_M‚Ä¢DeIn√¥
;

631 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

634 
¬∞¬©us
 = 
HAL_ERROR
;

638 i‚Ä°(
HAL_IRDA_STATE_RESET
 =Ô£ø
h√∫da
->
gS√®√£
)

640 
C√ÜlbackID
)

642 
HAL_IRDA_MSPINIT_CB_ID
 :

643 
h√∫da
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_IRDA_M‚Ä¢In√¥
;

646 
HAL_IRDA_MSPDEINIT_CB_ID
 :

647 
h√∫da
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_IRDA_M‚Ä¢DeIn√¥
;

652 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

655 
¬∞¬©us
 = 
HAL_ERROR
;

662 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_INVALID_CALLBACK
;

665 
¬∞¬©us
 = 
HAL_ERROR
;

669 
	`__HAL_UNLOCK
(
h√∫da
);

671  
¬∞¬©us
;

672 
	}
}

770 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_T√∏nsm√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

772 
u√∂t16_t
 *
tmp
;

773 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

776 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

778 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

780  
HAL_ERROR
;

784 
	`__HAL_LOCK
(
h√∫da
);

786 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

787 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_BUSY_TX
;

790 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

792 
h√∫da
->
TxX‚ÄûrSize
 = 
Size
;

793 
h√∫da
->
TxX‚ÄûrCou¬°
 = 
Size
;

794 
h√∫da
->
TxX‚ÄûrCou¬°
 > 0U)

796 
h√∫da
->
TxX‚ÄûrCou¬°
--;

797 i‚Ä°(
h√∫da
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
IRDA_WORDLENGTH_9B
)

799 i‚Ä°(
	`IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
h√∫da
, 
IRDA_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

801  
HAL_TIMEOUT
;

803 
tmp
 = (
u√∂t16_t
 *√ã
pD¬©a
;

804 
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 = (*
tmp
 & (
u√∂t16_t
)0x01FF);

805 i‚Ä°(
h√∫da
->
In√¥
.
P¬®√¥y
 =Ô£ø
IRDA_PARITY_NONE
)

807 
pD¬©a
 += 2U;

811 
pD¬©a
 += 1U;

816 i‚Ä°(
	`IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
h√∫da
, 
IRDA_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

818  
HAL_TIMEOUT
;

820 
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 = (*
pD¬©a
++ & (
u√∂t8_t
)0xFF);

824 i‚Ä°(
	`IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
h√∫da
, 
IRDA_FLAG_TC
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

826  
HAL_TIMEOUT
;

830 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

833 
	`__HAL_UNLOCK
(
h√∫da
);

835  
HAL_OK
;

839  
HAL_BUSY
;

841 
	}
}

855 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_ReÀöive
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

857 
u√∂t16_t
 *
tmp
;

858 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

861 i‚Ä°(
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

863 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

865  
HAL_ERROR
;

869 
	`__HAL_LOCK
(
h√∫da
);

871 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

872 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_BUSY_RX
;

875 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

877 
h√∫da
->
RxX‚ÄûrSize
 = 
Size
;

878 
h√∫da
->
RxX‚ÄûrCou¬°
 = 
Size
;

881 
h√∫da
->
RxX‚ÄûrCou¬°
 > 0U)

883 
h√∫da
->
RxX‚ÄûrCou¬°
--;

885 i‚Ä°(
h√∫da
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
IRDA_WORDLENGTH_9B
)

887 i‚Ä°(
	`IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
h√∫da
, 
IRDA_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

889  
HAL_TIMEOUT
;

891 
tmp
 = (
u√∂t16_t
 *√ã
pD¬©a
 ;

892 i‚Ä°(
h√∫da
->
In√¥
.
P¬®√¥y
 =Ô£ø
IRDA_PARITY_NONE
)

894 *
tmp
 = (
u√∂t16_t
)(
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x01FF);

895 
pD¬©a
 += 2U;

899 *
tmp
 = (
u√∂t16_t
)(
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x00FF);

900 
pD¬©a
 += 1U;

905 i‚Ä°(
	`IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
h√∫da
, 
IRDA_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

907  
HAL_TIMEOUT
;

909 i‚Ä°(
h√∫da
->
In√¥
.
P¬®√¥y
 =Ô£ø
IRDA_PARITY_NONE
)

911 *
pD¬©a
++ = (
u√∂t8_t
)(
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

915 *
pD¬©a
++ = (
u√∂t8_t
)(
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

921 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

924 
	`__HAL_UNLOCK
(
h√∫da
);

926  
HAL_OK
;

930  
HAL_BUSY
;

932 
	}
}

945 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_T√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

948 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

950 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

952  
HAL_ERROR
;

956 
	`__HAL_LOCK
(
h√∫da
);

958 
h√∫da
->
pTxBuffP√•
 = 
pD¬©a
;

959 
h√∫da
->
TxX‚ÄûrSize
 = 
Size
;

960 
h√∫da
->
TxX‚ÄûrCou¬°
 = 
Size
;

962 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

963 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_BUSY_TX
;

966 
	`__HAL_UNLOCK
(
h√∫da
);

969 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

971  
HAL_OK
;

975  
HAL_BUSY
;

977 
	}
}

990 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_ReÀöive_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

993 i‚Ä°(
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

995 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

997  
HAL_ERROR
;

1001 
	`__HAL_LOCK
(
h√∫da
);

1003 
h√∫da
->
pRxBuffP√•
 = 
pD¬©a
;

1004 
h√∫da
->
RxX‚ÄûrSize
 = 
Size
;

1005 
h√∫da
->
RxX‚ÄûrCou¬°
 = 
Size
;

1007 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

1008 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_BUSY_RX
;

1011 
	`__HAL_UNLOCK
(
h√∫da
);

1014 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
 | 
USART_CR1_RXNEIE
);

1017 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1019  
HAL_OK
;

1023  
HAL_BUSY
;

1025 
	}
}

1038 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_T√∏nsm√¥_DMA
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1040 
u√∂t32_t
 *
tmp
;

1043 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

1045 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1047  
HAL_ERROR
;

1051 
	`__HAL_LOCK
(
h√∫da
);

1053 
h√∫da
->
pTxBuffP√•
 = 
pD¬©a
;

1054 
h√∫da
->
TxX‚ÄûrSize
 = 
Size
;

1055 
h√∫da
->
TxX‚ÄûrCou¬°
 = 
Size
;

1057 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

1058 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_BUSY_TX
;

1061 
h√∫da
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
IRDA_DMAT√∏nsm√¥C‚àÇt
;

1064 
h√∫da
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
IRDA_DMAT√∏nsm√¥H√ÜfC‚àÇt
;

1067 
h√∫da
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
IRDA_DMAE¬∫‚Äπ
;

1070 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1073 
tmp
 = (
u√∂t32_t
 *)&
pD¬©a
;

1074 
	`HAL_DMA_S√®œÄ_IT
(
h√∫da
->
hdm¬©x
, *(
u√∂t32_t
 *)
tmp
, (u√∂t32_t)&h√∫da->
In¬∞‚Ñ¢Àö
->
DR
, 
Size
);

1077 
	`__HAL_IRDA_CLEAR_FLAG
(
h√∫da
, 
IRDA_FLAG_TC
);

1080 
	`__HAL_UNLOCK
(
h√∫da
);

1084 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1086  
HAL_OK
;

1090  
HAL_BUSY
;

1092 
	}
}

1106 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_ReÀöive_DMA
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1108 
u√∂t32_t
 *
tmp
;

1111 i‚Ä°(
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_READY
)

1113 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1115  
HAL_ERROR
;

1119 
	`__HAL_LOCK
(
h√∫da
);

1121 
h√∫da
->
pRxBuffP√•
 = 
pD¬©a
;

1122 
h√∫da
->
RxX‚ÄûrSize
 = 
Size
;

1124 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

1125 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_BUSY_RX
;

1128 
h√∫da
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
IRDA_DMAReÀöiveC‚àÇt
;

1131 
h√∫da
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
IRDA_DMAReÀöiveH√ÜfC‚àÇt
;

1134 
h√∫da
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
IRDA_DMAE¬∫‚Äπ
;

1137 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1140 
tmp
 = (
u√∂t32_t
 *)&
pD¬©a
;

1141 
	`HAL_DMA_S√®œÄ_IT
(
h√∫da
->
hdm¬®x
, (
u√∂t32_t
)&h√∫da->
In¬∞‚Ñ¢Àö
->
DR
, *(u√∂t32_√†*)
tmp
, 
Size
);

1144 
	`__HAL_IRDA_CLEAR_OREFLAG
(
h√∫da
);

1147 
	`__HAL_UNLOCK
(
h√∫da
);

1150 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1153 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1157 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1159  
HAL_OK
;

1163  
HAL_BUSY
;

1165 
	}
}

1173 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_DMAPau¬£
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1175 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1178 
	`__HAL_LOCK
(
h√∫da
);

1180 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1181 i‚Ä°((
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

1184 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1187 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1188 i‚Ä°((
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

1191 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1192 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1195 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1199 
	`__HAL_UNLOCK
(
h√∫da
);

1201  
HAL_OK
;

1202 
	}
}

1210 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_DMAResume
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1213 
	`__HAL_LOCK
(
h√∫da
);

1215 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_TX
)

1218 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1221 i‚Ä°(
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_RX
)

1224 
	`__HAL_IRDA_CLEAR_OREFLAG
(
h√∫da
);

1227 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1228 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1231 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1235 
	`__HAL_UNLOCK
(
h√∫da
);

1237  
HAL_OK
;

1238 
	}
}

1246 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_DMASt‚Ä∫
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1248 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1256 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1257 i‚Ä°((
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

1259 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1262 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

1264 
	`HAL_DMA_Ab‚Äπt
(
h√∫da
->
hdm¬©x
);

1266 
	`IRDA_EndTxT√∏ns‚Äûr
(
h√∫da
);

1270 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1271 i‚Ä°((
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

1273 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1276 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1278 
	`HAL_DMA_Ab‚Äπt
(
h√∫da
->
hdm¬®x
);

1280 
	`IRDA_EndRxT√∏ns‚Äûr
(
h√∫da
);

1283  
HAL_OK
;

1284 
	}
}

1298 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Ab‚Äπt
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1301 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1302 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1305 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1307 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1310 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

1314 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1316 
	`HAL_DMA_Ab‚Äπt
(
h√∫da
->
hdm¬©x
);

1321 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1323 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1326 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1330 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1332 
	`HAL_DMA_Ab‚Äπt
(
h√∫da
->
hdm¬®x
);

1337 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

1338 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

1341 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

1344 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

1345 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

1347  
HAL_OK
;

1348 
	}
}

1362 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Ab‚ÄπtT√∏nsm√¥
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1365 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1368 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1370 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1373 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

1377 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1379 
	`HAL_DMA_Ab‚Äπt
(
h√∫da
->
hdm¬©x
);

1384 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

1387 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

1389  
HAL_OK
;

1390 
	}
}

1404 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Ab‚ÄπtReÀöive
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1407 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1408 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1411 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1413 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1416 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1420 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1422 
	`HAL_DMA_Ab‚Äπt
(
h√∫da
->
hdm¬®x
);

1427 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

1430 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

1432  
HAL_OK
;

1433 
	}
}

1449 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Ab‚Äπt_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1451 
u√∂t32_t
 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1454 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1455 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1460 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

1464 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1466 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
IRDA_DMATxAb‚ÄπtC√Ülback
;

1470 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1474 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1478 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1480 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
IRDA_DMARxAb‚ÄπtC√Ülback
;

1484 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1489 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1492 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1495 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

1501 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h√∫da
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1503 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1507 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1513 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1515 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1518 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1524 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h√∫da
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1526 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1527 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1531 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1537 i‚Ä°(
Ab‚ÄπtC‚àÇt
 == 0x01U)

1540 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

1541 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

1544 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

1547 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

1548 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

1551 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1553 
h√∫da
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hirda);

1556 
	`HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
(
h√∫da
);

1560  
HAL_OK
;

1561 
	}
}

1577 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Ab‚ÄπtT√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1580 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1583 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1585 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1588 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

1592 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
IRDA_DMATxO‚àÜyAb‚ÄπtC√Ülback
;

1595 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h√∫da
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1598 
h√∫da
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hirda->hdmatx);

1604 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

1607 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

1610 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1612 
h√∫da
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(hirda);

1615 
	`HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
h√∫da
);

1622 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

1625 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

1628 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1630 
h√∫da
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(hirda);

1633 
	`HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
h√∫da
);

1637  
HAL_OK
;

1638 
	}
}

1654 
HAL_S√®tusTy‚â•Def
 
	$HAL_IRDA_Ab‚ÄπtReÀöive_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1657 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1658 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1661 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1663 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1666 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1670 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
IRDA_DMARxO‚àÜyAb‚ÄπtC√Ülback
;

1673 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h√∫da
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1676 
h√∫da
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hirda->hdmarx);

1682 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

1685 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

1688 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1690 
h√∫da
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(hirda);

1693 
	`HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
h√∫da
);

1700 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

1703 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

1706 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1708 
h√∫da
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(hirda);

1711 
	`HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
h√∫da
);

1715  
HAL_OK
;

1716 
	}
}

1724 
	$HAL_IRDA_IRQH‚Ñ¢d√Är
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1726 
u√∂t32_t
 
i¬ß√äags
 = 
	`READ_REG
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
SR
);

1727 
u√∂t32_t
 
¬∏1√¥s
 = 
	`READ_REG
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
);

1728 
u√∂t32_t
 
¬∏3√¥s
 = 
	`READ_REG
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
);

1729 
u√∂t32_t
 
√Ær‚Äπ√äags
 = 0x00U;

1730 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1733 
√Ær‚Äπ√äags
 = (
i¬ß√äags
 & (
u√∂t32_t
)(
USART_SR_PE
 | 
USART_SR_FE
 | 
USART_SR_ORE
 | 
USART_SR_NE
));

1734 i‚Ä°(
√Ær‚Äπ√äags
 =Ô£ø
RESET
)

1737 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

1739 
	`IRDA_ReÀöive_IT
(
h√∫da
);

1745 i‚Ä°((
√Ær‚Äπ√äags
 !Ô£ø
RESET
√ã&& (((
¬∏3√¥s
 & 
USART_CR3_EIE
√ã!Ô£øRESET√ã|| ((
¬∏1√¥s
 & (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
)) != RESET)))

1748 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_PE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_PEIE
) != RESET))

1750 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_PE
;

1754 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_NE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1756 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_NE
;

1760 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_FE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1762 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_FE
;

1766 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_ORE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1768 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_ORE
;

1771 i‚Ä°(
h√∫da
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_IRDA_ERROR_NONE
)

1774 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

1776 
	`IRDA_ReÀöive_IT
(
h√∫da
);

1781 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1782 i‚Ä°(((
h√∫da
->
E¬∫‚ÄπCode
 & 
HAL_IRDA_ERROR_ORE
√ã!Ô£ø
RESET
√ã|| 
dm¬®eque¬∞
)

1787 
	`IRDA_EndRxT√∏ns‚Äûr
(
h√∫da
);

1790 i‚Ä°(
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1792 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1795 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

1799 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
IRDA_DMAAb‚ÄπtOnE¬∫‚Äπ
;

1802 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h√∫da
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1805 
h√∫da
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hirda->hdmarx);

1810 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1812 
h√∫da
->
	`E¬∫‚ÄπC√Ülback
(hirda);

1815 
	`HAL_IRDA_E¬∫‚ÄπC√Ülback
(
h√∫da
);

1821 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1823 
h√∫da
->
	`E¬∫‚ÄπC√Ülback
(hirda);

1826 
	`HAL_IRDA_E¬∫‚ÄπC√Ülback
(
h√∫da
);

1834 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

1836 
h√∫da
->
	`E¬∫‚ÄπC√Ülback
(hirda);

1839 
	`HAL_IRDA_E¬∫‚ÄπC√Ülback
(
h√∫da
);

1842 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

1849 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_TXE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TXEIE
) != RESET))

1851 
	`IRDA_T√∏nsm√¥_IT
(
h√∫da
);

1856 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_TC
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TCIE
) != RESET))

1858 
	`IRDA_EndT√∏nsm√¥_IT
(
h√∫da
);

1861 
	}
}

1869 
__w√≥k
 
	$HAL_IRDA_TxC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1872 
	`UNUSED
(
h√∫da
);

1877 
	}
}

1885 
__w√≥k
 
	$HAL_IRDA_TxH√ÜfC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1888 
	`UNUSED
(
h√∫da
);

1893 
	}
}

1901 
__w√≥k
 
	$HAL_IRDA_RxC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1904 
	`UNUSED
(
h√∫da
);

1909 
	}
}

1917 
__w√≥k
 
	$HAL_IRDA_RxH√ÜfC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1920 
	`UNUSED
(
h√∫da
);

1925 
	}
}

1933 
__w√≥k
 
	$HAL_IRDA_E¬∫‚ÄπC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1936 
	`UNUSED
(
h√∫da
);

1941 
	}
}

1949 
__w√≥k
 
	$HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1952 
	`UNUSED
(
h√∫da
);

1957 
	}
}

1965 
__w√≥k
 
	$HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1968 
	`UNUSED
(
h√∫da
);

1973 
	}
}

1981 
__w√≥k
 
	$HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

1984 
	`UNUSED
(
h√∫da
);

1989 
	}
}

2018 
HAL_IRDA_S√®√£Ty‚â•Def
 
	$HAL_IRDA_G√´S√®√£
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2020 
u√∂t32_t
 
√£mp1
 = 0x00U, 
√£mp2
 = 0x00U;

2021 
√£mp1
 = 
h√∫da
->
gS√®√£
;

2022 
√£mp2
 = 
h√∫da
->
RxS√®√£
;

2024  (
HAL_IRDA_S√®√£Ty‚â•Def
)(
√£mp1
 | 
√£mp2
);

2025 
	}
}

2033 
u√∂t32_t
 
	$HAL_IRDA_G√´E¬∫‚Äπ
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2035  
h√∫da
->
E¬∫‚ÄπCode
;

2036 
	}
}

2050 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2056 
	$IRDA_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2059 
h√∫da
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_IRDA_TxH√ÜfC‚àÇtC√Ülback
;

2060 
h√∫da
->
TxC‚àÇtC√Ülback
 = 
HAL_IRDA_TxC‚àÇtC√Ülback
;

2061 
h√∫da
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_IRDA_RxH√ÜfC‚àÇtC√Ülback
;

2062 
h√∫da
->
RxC‚àÇtC√Ülback
 = 
HAL_IRDA_RxC‚àÇtC√Ülback
;

2063 
h√∫da
->
E¬∫‚ÄπC√Ülback
 = 
HAL_IRDA_E¬∫‚ÄπC√Ülback
;

2064 
h√∫da
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
;

2065 
h√∫da
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
;

2066 
h√∫da
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
;

2068 
	}
}

2077 
	$IRDA_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2079 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2081 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2083 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0U;

2087 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2090 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2095 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2097 
h√∫da
->
	`TxC‚àÇtC√Ülback
(hirda);

2100 
	`HAL_IRDA_TxC‚àÇtC√Ülback
(
h√∫da
);

2103 
	}
}

2111 
	$IRDA_DMAT√∏nsm√¥H√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2113 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2115 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2117 
h√∫da
->
	`TxH√ÜfC‚àÇtC√Ülback
(hirda);

2120 
	`HAL_IRDA_TxH√ÜfC‚àÇtC√Ülback
(
h√∫da
);

2122 
	}
}

2130 
	$IRDA_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2132 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2135 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2137 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0U;

2140 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2141 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2145 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2148 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2151 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2153 
h√∫da
->
	`RxC‚àÇtC√Ülback
(hirda);

2156 
	`HAL_IRDA_RxC‚àÇtC√Ülback
(
h√∫da
);

2158 
	}
}

2166 
	$IRDA_DMAReÀöiveH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2168 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2170 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2172 
h√∫da
->
	`RxH√ÜfC‚àÇtC√Ülback
(hirda);

2175 
	`HAL_IRDA_RxH√ÜfC‚àÇtC√Ülback
(
h√∫da
);

2177 
	}
}

2185 
	$IRDA_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2187 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

2188 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2191 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2192 i‚Ä°((
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

2194 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0U;

2195 
	`IRDA_EndTxT√∏ns‚Äûr
(
h√∫da
);

2199 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2200 i‚Ä°((
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

2202 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0U;

2203 
	`IRDA_EndRxT√∏ns‚Äûr
(
h√∫da
);

2206 
h√∫da
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_IRDA_ERROR_DMA
;

2208 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2210 
h√∫da
->
	`E¬∫‚ÄπC√Ülback
(hirda);

2213 
	`HAL_IRDA_E¬∫‚ÄπC√Ülback
(
h√∫da
);

2215 
	}
}

2227 
HAL_S√®tusTy‚â•Def
 
	$IRDA_Wa√¥OnF≈ìgU¬°√ªTimeout
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
)

2230 (
	`__HAL_IRDA_GET_FLAG
(
h√∫da
, 
F≈ìg
√ã? 
SET
 : 
RESET
√ã=Ô£ø
S√®tus
)

2233 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

2235 i‚Ä°((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
) > Timeout))

2238 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
));

2239 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2241 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

2242 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2245 
	`__HAL_UNLOCK
(
h√∫da
);

2247  
HAL_TIMEOUT
;

2251  
HAL_OK
;

2252 
	}
}

2259 
	$IRDA_EndTxT√∏ns‚Äûr
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2262 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

2265 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

2266 
	}
}

2273 
	$IRDA_EndRxT√∏ns‚Äûr
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2276 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2277 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2280 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2281 
	}
}

2289 
	$IRDA_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2291 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2292 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

2293 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

2295 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2297 
h√∫da
->
	`E¬∫‚ÄπC√Ülback
(hirda);

2300 
	`HAL_IRDA_E¬∫‚ÄπC√Ülback
(
h√∫da
);

2302 
	}
}

2312 
	$IRDA_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2314 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2316 
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2319 i‚Ä°(
h√∫da
->
hdm¬®x
 !Ô£ø
NULL
)

2321 i‚Ä°(
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2328 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

2329 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

2332 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

2335 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

2336 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2339 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2341 
h√∫da
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hirda);

2344 
	`HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
(
h√∫da
);

2346 
	}
}

2356 
	$IRDA_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2358 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2360 
h√∫da
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2363 i‚Ä°(
h√∫da
->
hdm¬©x
 !Ô£ø
NULL
)

2365 i‚Ä°(
h√∫da
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2372 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

2373 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

2376 
h√∫da
->
E¬∫‚ÄπCode
 = 
HAL_IRDA_ERROR_NONE
;

2379 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

2380 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2383 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2385 
h√∫da
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hirda);

2388 
	`HAL_IRDA_Ab‚ÄπtC‚àÇtC√Ülback
(
h√∫da
);

2390 
	}
}

2400 
	$IRDA_DMATxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2402 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2404 
h√∫da
->
TxX‚ÄûrCou¬°
 = 0x00U;

2407 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

2410 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2412 
h√∫da
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(hirda);

2415 
	`HAL_IRDA_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
h√∫da
);

2417 
	}
}

2427 
	$IRDA_DMARxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2429 
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
 = (IRDA_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2431 
h√∫da
->
RxX‚ÄûrCou¬°
 = 0x00U;

2434 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2437 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2439 
h√∫da
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(hirda);

2442 
	`HAL_IRDA_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
h√∫da
);

2444 
	}
}

2452 
HAL_S√®tusTy‚â•Def
 
	$IRDA_T√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2454 
u√∂t16_t
 *
tmp
;

2457 i‚Ä°(
h√∫da
->
gS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_TX
)

2459 i‚Ä°(
h√∫da
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
IRDA_WORDLENGTH_9B
)

2461 
tmp
 = (
u√∂t16_t
 *√ã
h√∫da
->
pTxBuffP√•
;

2462 
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t16_t
)(*
tmp
 & (uint16_t)0x01FF);

2463 i‚Ä°(
h√∫da
->
In√¥
.
P¬®√¥y
 =Ô£ø
IRDA_PARITY_NONE
)

2465 
h√∫da
->
pTxBuffP√•
 += 2U;

2469 
h√∫da
->
pTxBuffP√•
 += 1U;

2474 
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*h√∫da->
pTxBuffP√•
++ & (uint8_t)0x00FF);

2477 i‚Ä°(--
h√∫da
->
TxX‚ÄûrCou¬°
 == 0U)

2480 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

2483 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2486  
HAL_OK
;

2490  
HAL_BUSY
;

2492 
	}
}

2500 
HAL_S√®tusTy‚â•Def
 
	$IRDA_EndT√∏nsm√¥_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2503 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2506 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2509 
h√∫da
->
gS√®√£
 = 
HAL_IRDA_STATE_READY
;

2511 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2513 
h√∫da
->
	`TxC‚àÇtC√Ülback
(hirda);

2516 
	`HAL_IRDA_TxC‚àÇtC√Ülback
(
h√∫da
);

2519  
HAL_OK
;

2520 
	}
}

2528 
HAL_S√®tusTy‚â•Def
 
	$IRDA_ReÀöive_IT
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2530 
u√∂t16_t
 *
tmp
;

2531 
u√∂t16_t
 
uhd¬©a
;

2534 i‚Ä°(
h√∫da
->
RxS√®√£
 =Ô£ø
HAL_IRDA_STATE_BUSY_RX
)

2536 
uhd¬©a
 = (
u√∂t16_t
√ã
	`READ_REG
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
DR
);

2537 i‚Ä°(
h√∫da
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
IRDA_WORDLENGTH_9B
)

2539 
tmp
 = (
u√∂t16_t
 *√ã
h√∫da
->
pRxBuffP√•
;

2540 i‚Ä°(
h√∫da
->
In√¥
.
P¬®√¥y
 =Ô£ø
IRDA_PARITY_NONE
)

2542 *
tmp
 = (
u√∂t16_t
)(
uhd¬©a
 & (uint16_t)0x01FF);

2543 
h√∫da
->
pRxBuffP√•
 += 2U;

2547 *
tmp
 = (
u√∂t16_t
)(
uhd¬©a
 & (uint16_t)0x00FF);

2548 
h√∫da
->
pRxBuffP√•
 += 1U;

2553 i‚Ä°(
h√∫da
->
In√¥
.
P¬®√¥y
 =Ô£ø
IRDA_PARITY_NONE
)

2555 *
h√∫da
->
pRxBuffP√•
++ = (
u√∂t8_t
)(
uhd¬©a
 & (uint8_t)0x00FF);

2559 *
h√∫da
->
pRxBuffP√•
++ = (
u√∂t8_t
)(
uhd¬©a
 & (uint8_t)0x007F);

2563 i‚Ä°(--
h√∫da
->
RxX‚ÄûrCou¬°
 == 0U)

2566 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

2569 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2572 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2575 
h√∫da
->
RxS√®√£
 = 
HAL_IRDA_STATE_READY
;

2577 #i‚Ä°(
USE_HAL_IRDA_REGISTER_CALLBACKS
 == 1)

2579 
h√∫da
->
	`RxC‚àÇtC√Ülback
(hirda);

2582 
	`HAL_IRDA_RxC‚àÇtC√Ülback
(
h√∫da
);

2585  
HAL_OK
;

2587  
HAL_OK
;

2591  
HAL_BUSY
;

2593 
	}
}

2601 
	$IRDA_S√´C‚ÅÑfig
(
IRDA_H‚Ñ¢d√ÄTy‚â•Def
 *
h√∫da
)

2603 
u√∂t32_t
 
pÀõk
;

2606 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_INSTANCE
(
h√∫da
->
In¬∞‚Ñ¢Àö
));

2607 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_BAUDRATE
(
h√∫da
->
In√¥
.
BaudR¬©e
));

2608 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_WORD_LENGTH
(
h√∫da
->
In√¥
.
W‚ÄπdL√≠gth
));

2609 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_PARITY
(
h√∫da
->
In√¥
.
P¬®√¥y
));

2610 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_MODE
(
h√∫da
->
In√¥
.
Mode
));

2611 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IRDA_POWERMODE
(
h√∫da
->
In√¥
.
IrDAMode
));

2615 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_STOP
);

2619 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
));

2626 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR1
, (h√∫da->
In√¥
.
W‚ÄπdL√≠gth
 | h√∫da->In√¥.
P¬®√¥y
 | h√∫da->In√¥.
Mode
));

2630 
	`CLEAR_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

2633 if(
h√∫da
->
In¬∞‚Ñ¢Àö
 =Ô£ø
USART1
)

2635 
pÀõk
 = 
	`HAL_RCC_G√´PCLK2F¬™q
();

2636 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
BRR
, 
	`IRDA_BRR
(
pÀõk
, h√∫da->
In√¥
.
BaudR¬©e
));

2640 
pÀõk
 = 
	`HAL_RCC_G√´PCLK1F¬™q
();

2641 
	`SET_BIT
(
h√∫da
->
In¬∞‚Ñ¢Àö
->
BRR
, 
	`IRDA_BRR
(
pÀõk
, h√∫da->
In√¥
.
BaudR¬©e
));

2643 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_iwdg.c

98 
	~"¬∞m32f1xx_h√Ü.h
"

104 #ifde‚Ä°
HAL_IWDG_MODULE_ENABLED


122 
	#HAL_IWDG_DEFAULT_TIMEOUT
 ((6UL * 256UL * 1000UL√ã/ 
LSI_VALUE
)

	)

161 
HAL_S√®tusTy‚â•Def
 
	$HAL_IWDG_In√¥
(
IWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hiwdg
)

163 
u√∂t32_t
 
tick¬∞¬®t
;

166 i‚Ä°(
hiwdg
 =Ô£ø
NULL
)

168  
HAL_ERROR
;

172 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IWDG_ALL_INSTANCE
(
hiwdg
->
In¬∞‚Ñ¢Àö
));

173 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IWDG_PRESCALER
(
hiwdg
->
In√¥
.
P¬™sÀá√Är
));

174 
	`as¬£œÄ_‚àë√∏m
(
	`IS_IWDG_RELOAD
(
hiwdg
->
In√¥
.
R√±Ô¨Çd
));

177 
	`__HAL_IWDG_START
(
hiwdg
);

181 
	`IWDG_ENABLE_WRITE_ACCESS
(
hiwdg
);

184 
hiwdg
->
In¬∞‚Ñ¢Àö
->
PR
 = hiwdg->
In√¥
.
P¬™sÀá√Är
;

185 
hiwdg
->
In¬∞‚Ñ¢Àö
->
RLR
 = hiwdg->
In√¥
.
R√±Ô¨Çd
;

188 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

191 
hiwdg
->
In¬∞‚Ñ¢Àö
->
SR
 != 0x00u)

193 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HAL_IWDG_DEFAULT_TIMEOUT
)

195  
HAL_TIMEOUT
;

200 
	`__HAL_IWDG_RELOAD_COUNTER
(
hiwdg
);

203  
HAL_OK
;

204 
	}
}

232 
HAL_S√®tusTy‚â•Def
 
	$HAL_IWDG_Re‚Ä∞esh
(
IWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hiwdg
)

235 
	`__HAL_IWDG_RELOAD_COUNTER
(
hiwdg
);

238  
HAL_OK
;

239 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_mmc.c

255 
	~"¬∞m32f1xx_h√Ü.h
"

266 #ifde‚Ä°
HAL_MMC_MODULE_ENABLED


268 #i‚Ä°
def√∂ed
(
SDIO
)

287 
u√∂t32_t
 
MMC_In√¥C¬®d
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

288 
u√∂t32_t
 
MMC_Pow√ÆON
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

289 
u√∂t32_t
 
MMC_S√≠dS√®tus
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, u√∂t32_√†*
pC¬®dS√®tus
);

290 
MMC_Pow√ÆOFF
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

291 
MMC_Wr√¥e_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

292 
MMC_R√≥d_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
);

293 
MMC_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

294 
MMC_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

295 
MMC_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

296 
MMC_DMATxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

297 
MMC_DMARxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

327 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_In√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

330 if(
hmmc
 =Ô£ø
NULL
)

332  
HAL_ERROR
;

336 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_ALL_INSTANCE
(
hmmc
->
In¬∞‚Ñ¢Àö
));

337 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_EDGE
(
hmmc
->
In√¥
.
ClockEdge
));

338 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_BYPASS
(
hmmc
->
In√¥
.
ClockBy‚àëss
));

339 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
hmmc
->
In√¥
.
ClockPow√ÆSave
));

340 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_BUS_WIDE
(
hmmc
->
In√¥
.
BusWide
));

341 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
hmmc
->
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
));

342 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLKDIV
(
hmmc
->
In√¥
.
ClockDiv
));

344 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_RESET
)

347 
hmmc
->
Lock
 = 
HAL_UNLOCKED
;

348 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

350 
hmmc
->
TxC‚àÇtC√Ülback
 = 
HAL_MMC_TxC‚àÇtC√Ülback
;

351 
hmmc
->
RxC‚àÇtC√Ülback
 = 
HAL_MMC_RxC‚àÇtC√Ülback
;

352 
hmmc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_MMC_E¬∫‚ÄπC√Ülback
;

353 
hmmc
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_MMC_Ab‚ÄπtC√Ülback
;

355 if(
hmmc
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

357 
hmmc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_MMC_M‚Ä¢In√¥
;

361 
hmmc
->
	`M‚Ä¢In√¥C√Ülback
(hmmc);

364 
	`HAL_MMC_M‚Ä¢In√¥
(
hmmc
);

368 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

371 if(
	`HAL_MMC_In√¥C¬®d
(
hmmc
√ã=Ô£ø
HAL_ERROR
)

373  
HAL_ERROR
;

377 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NONE
;

380 
hmmc
->
C‚ÅÑ√£xt
 = 
MMC_CONTEXT_NONE
;

383 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

385  
HAL_OK
;

386 
	}
}

395 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_In√¥C¬®d
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

397 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

398 
MMC_In√¥Ty‚â•Def
 
In√¥
;

399 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

402 
In√¥
.
ClockEdge
 = 
SDIO_CLOCK_EDGE_RISING
;

403 
In√¥
.
ClockBy‚àëss
 = 
SDIO_CLOCK_BYPASS_DISABLE
;

404 
In√¥
.
ClockPow√ÆSave
 = 
SDIO_CLOCK_POWER_SAVE_DISABLE
;

405 
In√¥
.
BusWide
 = 
SDIO_BUS_WIDE_1B
;

406 
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 = 
SDIO_HARDWARE_FLOW_CONTROL_DISABLE
;

407 
In√¥
.
ClockDiv
 = 
SDIO_INIT_CLK_DIV
;

410 
¬∞¬©us
 = 
	`SDIO_In√¥
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
In√¥
);

411 if(
¬∞¬©us
 =Ô£ø
HAL_ERROR
)

413  
HAL_ERROR
;

417 
	`__HAL_MMC_DISABLE
(
hmmc
);

420 
¬∞¬©us
 = 
	`SDIO_Pow√ÆS√®√£_ON
(
hmmc
->
In¬∞‚Ñ¢Àö
);

421 if(
¬∞¬©us
 =Ô£ø
HAL_ERROR
)

423  
HAL_ERROR
;

427 
	`__HAL_MMC_ENABLE
(
hmmc
);

430 
√Ær‚Äπ¬∞¬©e
 = 
	`MMC_Pow√ÆON
(
hmmc
);

431 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

433 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

434 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

435  
HAL_ERROR
;

439 
√Ær‚Äπ¬∞¬©e
 = 
	`MMC_In√¥C¬®d
(
hmmc
);

440 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

442 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

443 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

444  
HAL_ERROR
;

447  
HAL_OK
;

448 
	}
}

455 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_DeIn√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

458 if(
hmmc
 =Ô£ø
NULL
)

460  
HAL_ERROR
;

464 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_ALL_INSTANCE
(
hmmc
->
In¬∞‚Ñ¢Àö
));

466 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

469 
	`MMC_Pow√ÆOFF
(
hmmc
);

471 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

472 if(
hmmc
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

474 
hmmc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_MMC_M‚Ä¢DeIn√¥
;

478 
hmmc
->
	`M‚Ä¢DeIn√¥C√Ülback
(hmmc);

481 
	`HAL_MMC_M‚Ä¢DeIn√¥
(
hmmc
);

484 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

485 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_RESET
;

487  
HAL_OK
;

488 
	}
}

496 
__w√≥k
 
	$HAL_MMC_M‚Ä¢In√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

499 
	`UNUSED
(
hmmc
);

504 
	}
}

511 
__w√≥k
 
	$HAL_MMC_M‚Ä¢DeIn√¥
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

514 
	`UNUSED
(
hmmc
);

519 
	}
}

552 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_R√≥dBlocks
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
)

554 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

555 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

556 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

557 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

558 
u√∂t32_t
 
add
 = 
BlockAdd
;

559 
u√∂t8_t
 *
√£mpbuff
 = 
pD¬©a
;

561 if(
NULL
 =Ô£ø
pD¬©a
)

563 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

564  
HAL_ERROR
;

567 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

569 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

571 if((
BlockAdd
 + 
Numb√ÆOfBlocks
√ã> (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

573 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

574  
HAL_ERROR
;

577 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

580 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

582 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

584 
add
 *= 512U;

588 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
MMC_BLOCKSIZE
);

589 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

592 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

593 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

594 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

595  
HAL_ERROR
;

599 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

600 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
Numb√ÆOfBlocks
 * 
MMC_BLOCKSIZE
;

601 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

602 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

603 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

604 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

605 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

608 if(
Numb√ÆOfBlocks
 > 1U)

610 
hmmc
->
C‚ÅÑ√£xt
 = 
MMC_CONTEXT_READ_MULTIPLE_BLOCK
;

613 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

617 
hmmc
->
C‚ÅÑ√£xt
 = 
MMC_CONTEXT_READ_SINGLE_BLOCK
;

620 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dS√∂g√ÄBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

622 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

625 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

626 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

627 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

628  
HAL_ERROR
;

632 
d¬©¬®ema√∂√∂g
 = 
c‚ÅÑfig
.
D¬©aL√≠gth
;

633 !
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_STBITERR
))

635 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_RXFIFOHF
√ã&& (
d¬©¬®ema√∂√∂g
 > 0U))

638 
cou¬°
 = 0U; count < 8U; count++)

640 
d¬©a
 = 
	`SDIO_R√≥dFIFO
(
hmmc
->
In¬∞‚Ñ¢Àö
);

641 *
√£mpbuff
 = (
u√∂t8_t
)(
d¬©a
 & 0xFFU);

642 
√£mpbuff
++;

643 
d¬©¬®ema√∂√∂g
--;

644 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 8U) & 0xFFU);

645 
√£mpbuff
++;

646 
d¬©¬®ema√∂√∂g
--;

647 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 16U) & 0xFFU);

648 
√£mpbuff
++;

649 
d¬©¬®ema√∂√∂g
--;

650 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 24U) & 0xFFU);

651 
√£mpbuff
++;

652 
d¬©¬®ema√∂√∂g
--;

656 if(((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

659 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

660 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_TIMEOUT
;

661 
hmmc
->
S√®√£
Ô£ø
HAL_MMC_STATE_READY
;

662  
HAL_TIMEOUT
;

667 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DATAEND
√ã&& (
Numb√ÆOfBlocks
 > 1U))

670 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hmmc
->
In¬∞‚Ñ¢Àö
);

671 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

674 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

675 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

676 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

677  
HAL_ERROR
;

682 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DTIMEOUT
))

685 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

686 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_TIMEOUT
;

687 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

688  
HAL_ERROR
;

690 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DCRCFAIL
))

693 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

694 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_CRC_FAIL
;

695 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

696  
HAL_ERROR
;

698 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_RXOVERR
))

701 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

702 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_RX_OVERRUN
;

703 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

704  
HAL_ERROR
;

712 (
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_RXDAVL
)√ã&& (
d¬©¬®ema√∂√∂g
 > 0U))

714 
d¬©a
 = 
	`SDIO_R√≥dFIFO
(
hmmc
->
In¬∞‚Ñ¢Àö
);

715 *
√£mpbuff
 = (
u√∂t8_t
)(
d¬©a
 & 0xFFU);

716 
√£mpbuff
++;

717 
d¬©¬®ema√∂√∂g
--;

718 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 8U) & 0xFFU);

719 
√£mpbuff
++;

720 
d¬©¬®ema√∂√∂g
--;

721 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 16U) & 0xFFU);

722 
√£mpbuff
++;

723 
d¬©¬®ema√∂√∂g
--;

724 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 24U) & 0xFFU);

725 
√£mpbuff
++;

726 
d¬©¬®ema√∂√∂g
--;

728 if(((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

731 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

732 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_TIMEOUT
;

733 
hmmc
->
S√®√£
Ô£ø
HAL_MMC_STATE_READY
;

734  
HAL_ERROR
;

739 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
);

741 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

743  
HAL_OK
;

747 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_BUSY
;

748  
HAL_ERROR
;

750 
	}
}

764 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_Wr√¥eBlocks
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
)

766 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

767 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

768 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

769 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

770 
u√∂t32_t
 
add
 = 
BlockAdd
;

771 
u√∂t8_t
 *
√£mpbuff
 = 
pD¬©a
;

773 if(
NULL
 =Ô£ø
pD¬©a
)

775 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

776  
HAL_ERROR
;

779 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

781 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

783 if((
BlockAdd
 + 
Numb√ÆOfBlocks
√ã> (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

785 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

786  
HAL_ERROR
;

789 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

792 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

794 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

796 
add
 *= 512U;

800 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
MMC_BLOCKSIZE
);

801 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

804 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

805 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

806 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

807  
HAL_ERROR
;

811 if(
Numb√ÆOfBlocks
 > 1U)

813 
hmmc
->
C‚ÅÑ√£xt
 = 
MMC_CONTEXT_WRITE_MULTIPLE_BLOCK
;

816 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

820 
hmmc
->
C‚ÅÑ√£xt
 = 
MMC_CONTEXT_WRITE_SINGLE_BLOCK
;

823 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

825 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

828 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

829 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

830 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

831  
HAL_ERROR
;

835 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

836 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
Numb√ÆOfBlocks
 * 
MMC_BLOCKSIZE
;

837 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

838 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

839 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

840 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

841 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

844 
d¬©¬®ema√∂√∂g
 = 
c‚ÅÑfig
.
D¬©aL√≠gth
;

845 !
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_STBITERR
))

847 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_TXFIFOHE
√ã&& (
d¬©¬®ema√∂√∂g
 > 0U))

850 
cou¬°
 = 0U; count < 8U; count++)

852 
d¬©a
 = (
u√∂t32_t
)(*
√£mpbuff
);

853 
√£mpbuff
++;

854 
d¬©¬®ema√∂√∂g
--;

855 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
√£mpbuff
) << 8U);

856 
√£mpbuff
++;

857 
d¬©¬®ema√∂√∂g
--;

858 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
√£mpbuff
) << 16U);

859 
√£mpbuff
++;

860 
d¬©¬®ema√∂√∂g
--;

861 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
√£mpbuff
) << 24U);

862 
√£mpbuff
++;

863 
d¬©¬®ema√∂√∂g
--;

864 ()
	`SDIO_Wr√¥eFIFO
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
d¬©a
);

868 if(((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

871 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

872 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

873 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

874  
HAL_TIMEOUT
;

879 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DATAEND
√ã&& (
Numb√ÆOfBlocks
 > 1U))

882 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hmmc
->
In¬∞‚Ñ¢Àö
);

883 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

886 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

887 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

888 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

889  
HAL_ERROR
;

894 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DTIMEOUT
))

897 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

898 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_TIMEOUT
;

899 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

900  
HAL_ERROR
;

902 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DCRCFAIL
))

905 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

906 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_CRC_FAIL
;

907 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

908  
HAL_ERROR
;

910 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_TXUNDERR
))

913 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

914 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_TX_UNDERRUN
;

915 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

916  
HAL_ERROR
;

924 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
);

926 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

928  
HAL_OK
;

932 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_BUSY
;

933  
HAL_ERROR
;

935 
	}
}

950 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_R√≥dBlocks_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

952 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

953 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

954 
u√∂t32_t
 
add
 = 
BlockAdd
;

956 if(
NULL
 =Ô£ø
pD¬©a
)

958 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

959  
HAL_ERROR
;

962 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

964 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

966 if((
BlockAdd
 + 
Numb√ÆOfBlocks
√ã> (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

968 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

969  
HAL_ERROR
;

972 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

975 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

977 
hmmc
->
pRxBuffP√•
 = 
pD¬©a
;

978 
hmmc
->
RxX‚ÄûrSize
 = 
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

980 
	`__HAL_MMC_ENABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
 | 
SDIO_FLAG_RXFIFOHF
 | 
SDIO_IT_STBITERR
));

982 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

984 
add
 *= 512U;

988 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
MMC_BLOCKSIZE
);

989 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

992 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

993 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

994 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

995  
HAL_ERROR
;

999 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1000 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1001 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1002 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

1003 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1004 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1005 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1008 if(
Numb√ÆOfBlocks
 > 1U)

1010 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_READ_MULTIPLE_BLOCK
 | 
MMC_CONTEXT_IT
);

1013 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1017 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_READ_SINGLE_BLOCK
 | 
MMC_CONTEXT_IT
);

1020 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dS√∂g√ÄBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1023 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1026 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1027 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1028 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1029  
HAL_ERROR
;

1032  
HAL_OK
;

1036  
HAL_BUSY
;

1038 
	}
}

1053 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_Wr√¥eBlocks_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

1055 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

1056 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1057 
u√∂t32_t
 
add
 = 
BlockAdd
;

1059 if(
NULL
 =Ô£ø
pD¬©a
)

1061 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

1062  
HAL_ERROR
;

1065 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

1067 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

1069 if((
BlockAdd
 + 
Numb√ÆOfBlocks
√ã> (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

1071 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

1072  
HAL_ERROR
;

1075 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

1078 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1080 
hmmc
->
pTxBuffP√•
 = 
pD¬©a
;

1081 
hmmc
->
TxX‚ÄûrSize
 = 
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1084 
	`__HAL_MMC_ENABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_DATAEND
 | 
SDIO_FLAG_TXFIFOHE
 | 
SDIO_IT_STBITERR
));

1086 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

1088 
add
 *= 512U;

1092 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
MMC_BLOCKSIZE
);

1093 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1096 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1097 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1098 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1099  
HAL_ERROR
;

1103 if(
Numb√ÆOfBlocks
 > 1U)

1105 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_WRITE_MULTIPLE_BLOCK
| 
MMC_CONTEXT_IT
);

1108 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1112 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_WRITE_SINGLE_BLOCK
 | 
MMC_CONTEXT_IT
);

1115 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1117 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1120 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1121 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1122 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1123  
HAL_ERROR
;

1127 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1128 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1129 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1130 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

1131 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1132 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1133 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1135  
HAL_OK
;

1139  
HAL_BUSY
;

1141 
	}
}

1156 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_R√≥dBlocks_DMA
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

1158 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

1159 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1160 
u√∂t32_t
 
add
 = 
BlockAdd
;

1162 if(
NULL
 =Ô£ø
pD¬©a
)

1164 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

1165  
HAL_ERROR
;

1168 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

1170 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_DMA_ERROR_NONE
;

1172 if((
BlockAdd
 + 
Numb√ÆOfBlocks
√ã> (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

1174 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

1175  
HAL_ERROR
;

1178 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

1181 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1183 
	`__HAL_MMC_ENABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
 | 
SDIO_IT_STBITERR
));

1186 
hmmc
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
MMC_DMAReÀöiveC‚àÇt
;

1189 
hmmc
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
MMC_DMAE¬∫‚Äπ
;

1192 
hmmc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1194 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

1196 
add
 *= 512U;

1200 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
MMC_BLOCKSIZE
);

1201 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1204 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1205 
hmmc
->
E¬∫‚ÄπCode
 = 
√Ær‚Äπ¬∞¬©e
;

1206 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1207  
HAL_ERROR
;

1211 if(
	`HAL_DMA_S√®œÄ_IT
(
hmmc
->
hdm¬®x
, (
u√∂t32_t
)&hmmc->
In¬∞‚Ñ¢Àö
->
FIFO
, (u√∂t32_t)
pD¬©a
, (u√∂t32_t)(
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
)/4√ã!Ô£ø
HAL_OK
)

1213 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
));

1214 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1215 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_DMA
;

1216 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1217  
HAL_ERROR
;

1222 
	`__HAL_MMC_DMA_ENABLE
(
hmmc
);

1225 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1226 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1227 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1228 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

1229 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1230 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1231 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1234 if(
Numb√ÆOfBlocks
 > 1U)

1236 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_READ_MULTIPLE_BLOCK
 | 
MMC_CONTEXT_DMA
);

1239 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1243 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_READ_SINGLE_BLOCK
 | 
MMC_CONTEXT_DMA
);

1246 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dS√∂g√ÄBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1248 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1251 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1252 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
));

1253 
hmmc
->
E¬∫‚ÄπCode
 = 
√Ær‚Äπ¬∞¬©e
;

1254 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1255  
HAL_ERROR
;

1258  
HAL_OK
;

1263  
HAL_BUSY
;

1265 
	}
}

1280 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_Wr√¥eBlocks_DMA
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

1282 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

1283 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1284 
u√∂t32_t
 
add
 = 
BlockAdd
;

1286 if(
NULL
 =Ô£ø
pD¬©a
)

1288 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

1289  
HAL_ERROR
;

1292 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

1294 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

1296 if((
BlockAdd
 + 
Numb√ÆOfBlocks
√ã> (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

1298 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

1299  
HAL_ERROR
;

1302 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

1305 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1308 
	`__HAL_MMC_ENABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_STBITERR
));

1311 
hmmc
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
MMC_DMAT√∏nsm√¥C‚àÇt
;

1314 
hmmc
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
MMC_DMAE¬∫‚Äπ
;

1317 
hmmc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1319 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

1321 
add
 *= 512U;

1325 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
MMC_BLOCKSIZE
);

1326 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1329 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1330 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1331 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1332  
HAL_ERROR
;

1336 if(
Numb√ÆOfBlocks
 > 1U)

1338 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_WRITE_MULTIPLE_BLOCK
 | 
MMC_CONTEXT_DMA
);

1341 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1345 
hmmc
->
C‚ÅÑ√£xt
 = (
MMC_CONTEXT_WRITE_SINGLE_BLOCK
 | 
MMC_CONTEXT_DMA
);

1348 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
add
);

1350 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1353 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1354 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_DATAEND
));

1355 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1356 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1357  
HAL_ERROR
;

1361 
	`__HAL_MMC_DMA_ENABLE
(
hmmc
);

1364 if(
	`HAL_DMA_S√®œÄ_IT
(
hmmc
->
hdm¬©x
, (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&hmmc->
In¬∞‚Ñ¢Àö
->
FIFO
, (u√∂t32_t)(
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
)/4√ã!Ô£ø
HAL_OK
)

1366 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_DATAEND
));

1367 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1368 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DMA
;

1369 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1370  
HAL_ERROR
;

1375 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1376 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
MMC_BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1377 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1378 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

1379 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1380 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1381 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1383  
HAL_OK
;

1388  
HAL_BUSY
;

1390 
	}
}

1401 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_E√∏¬£
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t32_t
 
BlockS√®œÄAdd
, u√∂t32_√†
BlockEndAdd
)

1403 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1404 
u√∂t32_t
 
¬∞¬®t_add
 = 
BlockS√®œÄAdd
;

1405 
u√∂t32_t
 
√≠d_add
 = 
BlockEndAdd
;

1407 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

1409 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

1411 if(
√≠d_add
 < 
¬∞¬®t_add
)

1413 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

1414  
HAL_ERROR
;

1417 if(
√≠d_add
 > (
hmmc
->
MmcC¬®d
.
LogBlockNbr
))

1419 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_ADDR_OUT_OF_RANGE
;

1420  
HAL_ERROR
;

1423 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

1426 if(((
hmmc
->
MmcC¬®d
.
C≈ìss
√ã& 
SDIO_CCCC_ERASE
) == 0U)

1429 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1430 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE
;

1431 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1432  
HAL_ERROR
;

1435 if((
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
√ã& 
SDMMC_CARD_LOCKED
) == SDMMC_CARD_LOCKED)

1438 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1439 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_LOCK_UNLOCK_FAILED
;

1440 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1441  
HAL_ERROR
;

1444 i‚Ä°((
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
√ã!Ô£ø
MMC_HIGH_CAPACITY_CARD
)

1446 
¬∞¬®t_add
 *= 512U;

1447 
√≠d_add
 *= 512U;

1451 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdE√∏¬£S√®œÄAdd
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
¬∞¬®t_add
);

1452 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1455 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1456 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1457 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1458  
HAL_ERROR
;

1462 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdE√∏¬£EndAdd
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
√≠d_add
);

1463 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1466 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1467 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1468 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1469  
HAL_ERROR
;

1473 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdE√∏¬£
(
hmmc
->
In¬∞‚Ñ¢Àö
);

1474 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1477 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

1478 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1479 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1480  
HAL_ERROR
;

1483 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1485  
HAL_OK
;

1489  
HAL_BUSY
;

1491 
	}
}

1498 
	$HAL_MMC_IRQH‚Ñ¢d√Är
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1500 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1501 
u√∂t32_t
 
c‚ÅÑ√£xt
 = 
hmmc
->
C‚ÅÑ√£xt
;

1504 if((
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_RXFIFOHF
√ã!Ô£ø
RESET
√ã&& ((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_IT
) != 0U))

1506 
	`MMC_R√≥d_IT
(
hmmc
);

1509 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DATAEND
√ã!Ô£ø
RESET
)

1511 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_FLAG_DATAEND
);

1513 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

1514 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
 | 
SDIO_IT_STBITERR
);

1516 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø~(
SDIO_DCTRL_DTEN
);

1518 if((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_DMA
) != 0U)

1520 if((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U)

1522 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hmmc
->
In¬∞‚Ñ¢Àö
);

1523 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1525 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1526 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1527 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

1529 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

1533 if(((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_READ_SINGLE_BLOCK
√ã=Ô£ø0U√ã&& ((c‚ÅÑ√£x√†& 
MMC_CONTEXT_READ_MULTIPLE_BLOCK
) == 0U))

1537 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

1539 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1541 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1542 
hmmc
->
	`TxC‚àÇtC√Ülback
(hmmc);

1544 
	`HAL_MMC_TxC‚àÇtC√Ülback
(
hmmc
);

1548 if((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_IT
) != 0U)

1551 if(((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_READ_MULTIPLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
MMC_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U))

1553 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hmmc
->
In¬∞‚Ñ¢Àö
);

1554 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

1556 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1557 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1558 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

1560 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

1566 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
);

1568 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1569 if(((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_READ_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
MMC_CONTEXT_READ_MULTIPLE_BLOCK
) != 0U))

1571 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1572 
hmmc
->
	`RxC‚àÇtC√Ülback
(hmmc);

1574 
	`HAL_MMC_RxC‚àÇtC√Ülback
(
hmmc
);

1579 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1580 
hmmc
->
	`TxC‚àÇtC√Ülback
(hmmc);

1582 
	`HAL_MMC_TxC‚àÇtC√Ülback
(
hmmc
);

1592 if((
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_TXFIFOHE
√ã!Ô£ø
RESET
√ã&& ((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_IT
) != 0U))

1594 
	`MMC_Wr√¥e_IT
(
hmmc
);

1597 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_STBITERR
√ã!Ô£ø
RESET
)

1600 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DCRCFAIL
√ã!Ô£ø
RESET
)

1602 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_CRC_FAIL
;

1604 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_DTIMEOUT
√ã!Ô£ø
RESET
)

1606 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_TIMEOUT
;

1608 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_RXOVERR
√ã!Ô£ø
RESET
)

1610 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_RX_OVERRUN
;

1612 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_TXUNDERR
√ã!Ô£ø
RESET
)

1614 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_TX_UNDERRUN
;

1616 if(
	`__HAL_MMC_GET_FLAG
(
hmmc
, 
SDIO_FLAG_STBITERR
√ã!Ô£ø
RESET
)

1618 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DATA_TIMEOUT
;

1622 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
 | 
SDIO_FLAG_STBITERR
);

1625 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

1626 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
 | 
SDIO_IT_STBITERR
);

1628 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hmmc->
In¬∞‚Ñ¢Àö
);

1630 if((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_IT
) != 0U)

1633 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1634 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1635 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

1637 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

1640 if((
c‚ÅÑ√£xt
 & 
MMC_CONTEXT_DMA
) != 0U)

1643 if(
hmmc
->
hdm¬©x
 !Ô£ø
NULL
)

1646 
hmmc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
MMC_DMATxAb‚Äπt
;

1648 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hmmc
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1650 
	`MMC_DMATxAb‚Äπt
(
hmmc
->
hdm¬©x
);

1653 if(
hmmc
->
hdm¬®x
 !Ô£ø
NULL
)

1656 
hmmc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
MMC_DMARxAb‚Äπt
;

1658 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hmmc
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1660 
	`MMC_DMARxAb‚Äπt
(
hmmc
->
hdm¬®x
);

1665 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

1666 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

1667 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1668 
hmmc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hmmc);

1670 
	`HAL_MMC_Ab‚ÄπtC√Ülback
(
hmmc
);

1684 
	}
}

1691 
HAL_MMC_S√®√£Ty‚â•Def
 
	$HAL_MMC_G√´S√®√£
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1693  
hmmc
->
S√®√£
;

1694 
	}
}

1702 
u√∂t32_t
 
	$HAL_MMC_G√´E¬∫‚Äπ
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1704  
hmmc
->
E¬∫‚ÄπCode
;

1705 
	}
}

1712 
__w√≥k
 
	$HAL_MMC_TxC‚àÇtC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1715 
	`UNUSED
(
hmmc
);

1720 
	}
}

1727 
__w√≥k
 
	$HAL_MMC_RxC‚àÇtC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1730 
	`UNUSED
(
hmmc
);

1735 
	}
}

1742 
__w√≥k
 
	$HAL_MMC_E¬∫‚ÄπC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1745 
	`UNUSED
(
hmmc
);

1750 
	}
}

1757 
__w√≥k
 
	$HAL_MMC_Ab‚ÄπtC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

1760 
	`UNUSED
(
hmmc
);

1765 
	}
}

1767 #i‚Ä°
def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

1783 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_Regi¬∞√ÆC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
, 
pMMC_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

1785 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1787 if(
pC√Ülback
 =Ô£ø
NULL
)

1790 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1791  
HAL_ERROR
;

1795 
	`__HAL_LOCK
(
hmmc
);

1797 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

1799 
C√ÜlbackId
)

1801 
HAL_MMC_TX_CPLT_CB_ID
 :

1802 
hmmc
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

1804 
HAL_MMC_RX_CPLT_CB_ID
 :

1805 
hmmc
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

1807 
HAL_MMC_ERROR_CB_ID
 :

1808 
hmmc
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

1810 
HAL_MMC_ABORT_CB_ID
 :

1811 
hmmc
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

1813 
HAL_MMC_MSP_INIT_CB_ID
 :

1814 
hmmc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1816 
HAL_MMC_MSP_DEINIT_CB_ID
 :

1817 
hmmc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1821 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1823 
¬∞¬©us
 = 
HAL_ERROR
;

1827 i‚Ä°(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_RESET
)

1829 
C√ÜlbackId
)

1831 
HAL_MMC_MSP_INIT_CB_ID
 :

1832 
hmmc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1834 
HAL_MMC_MSP_DEINIT_CB_ID
 :

1835 
hmmc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1839 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1841 
¬∞¬©us
 = 
HAL_ERROR
;

1848 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1850 
¬∞¬©us
 = 
HAL_ERROR
;

1854 
	`__HAL_UNLOCK
(
hmmc
);

1855  
¬∞¬©us
;

1856 
	}
}

1872 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_UnRegi¬∞√ÆC√Ülback
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
)

1874 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1877 
	`__HAL_LOCK
(
hmmc
);

1879 if(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_READY
)

1881 
C√ÜlbackId
)

1883 
HAL_MMC_TX_CPLT_CB_ID
 :

1884 
hmmc
->
TxC‚àÇtC√Ülback
 = 
HAL_MMC_TxC‚àÇtC√Ülback
;

1886 
HAL_MMC_RX_CPLT_CB_ID
 :

1887 
hmmc
->
RxC‚àÇtC√Ülback
 = 
HAL_MMC_RxC‚àÇtC√Ülback
;

1889 
HAL_MMC_ERROR_CB_ID
 :

1890 
hmmc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_MMC_E¬∫‚ÄπC√Ülback
;

1892 
HAL_MMC_ABORT_CB_ID
 :

1893 
hmmc
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_MMC_Ab‚ÄπtC√Ülback
;

1895 
HAL_MMC_MSP_INIT_CB_ID
 :

1896 
hmmc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_MMC_M‚Ä¢In√¥
;

1898 
HAL_MMC_MSP_DEINIT_CB_ID
 :

1899 
hmmc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_MMC_M‚Ä¢DeIn√¥
;

1903 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1905 
¬∞¬©us
 = 
HAL_ERROR
;

1909 i‚Ä°(
hmmc
->
S√®√£
 =Ô£ø
HAL_MMC_STATE_RESET
)

1911 
C√ÜlbackId
)

1913 
HAL_MMC_MSP_INIT_CB_ID
 :

1914 
hmmc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_MMC_M‚Ä¢In√¥
;

1916 
HAL_MMC_MSP_DEINIT_CB_ID
 :

1917 
hmmc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_MMC_M‚Ä¢DeIn√¥
;

1921 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1923 
¬∞¬©us
 = 
HAL_ERROR
;

1930 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_INVALID_CALLBACK
;

1932 
¬∞¬©us
 = 
HAL_ERROR
;

1936 
	`__HAL_UNLOCK
(
hmmc
);

1937  
¬∞¬©us
;

1938 
	}
}

1968 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_G√´C¬®dCID
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C¬®dCIDTy‚â•Def
 *
pCID
)

1970 
pCID
->
M‚Ñ¢u√ÅÀòu¬™rID
 = (
u√∂t8_t
)((
hmmc
->
CID
[0] & 0xFF000000U) >> 24U);

1972 
pCID
->
OEM_A¬µliID
 = (
u√∂t16_t
)((
hmmc
->
CID
[0] & 0x00FFFF00U) >> 8U);

1974 
pCID
->
ProdName1
 = (((
hmmc
->
CID
[0] & 0x000000FFU) << 24U) | ((hmmc->CID[1] & 0xFFFFFF00U) >> 8U));

1976 
pCID
->
ProdName2
 = (
u√∂t8_t
)(
hmmc
->
CID
[1] & 0x000000FFU);

1978 
pCID
->
ProdRev
 = (
u√∂t8_t
)((
hmmc
->
CID
[2] & 0xFF000000U) >> 24U);

1980 
pCID
->
ProdSN
 = (((
hmmc
->
CID
[2] & 0x00FFFFFFU) << 8U) | ((hmmc->CID[3] & 0xFF000000U) >> 24U));

1982 
pCID
->
Re¬£rved1
 = (
u√∂t8_t
)((
hmmc
->
CID
[3] & 0x00F00000U) >> 20U);

1984 
pCID
->
M‚Ñ¢u√ÅÀòD¬©e
 = (
u√∂t16_t
)((
hmmc
->
CID
[3] & 0x000FFF00U) >> 8U);

1986 
pCID
->
CID_CRC
 = (
u√∂t8_t
)((
hmmc
->
CID
[3] & 0x000000FEU) >> 1U);

1988 
pCID
->
Re¬£rved2
 = 1U;

1990  
HAL_OK
;

1991 
	}
}

2001 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_G√´C¬®dCSD
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C¬®dCSDTy‚â•Def
 *
pCSD
)

2003 
pCSD
->
CSDS√•uÀò
 = (
u√∂t8_t
)((
hmmc
->
CSD
[0] & 0xC0000000U) >> 30U);

2005 
pCSD
->
SysS‚â•cV√Æsi‚ÅÑ
 = (
u√∂t8_t
)((
hmmc
->
CSD
[0] & 0x3C000000U) >> 26U);

2007 
pCSD
->
Re¬£rved1
 = (
u√∂t8_t
)((
hmmc
->
CSD
[0] & 0x03000000U) >> 24U);

2009 
pCSD
->
TAAC
 = (
u√∂t8_t
)((
hmmc
->
CSD
[0] & 0x00FF0000U) >> 16U);

2011 
pCSD
->
NSAC
 = (
u√∂t8_t
)((
hmmc
->
CSD
[0] & 0x0000FF00U) >> 8U);

2013 
pCSD
->
MaxBusClkF¬™c
 = (
u√∂t8_t
)(
hmmc
->
CSD
[0] & 0x000000FFU);

2015 
pCSD
->
C¬®dComdC≈ìs¬£s
 = (
u√∂t16_t
)((
hmmc
->
CSD
[1] & 0xFFF00000U) >> 20U);

2017 
pCSD
->
RdBlockL√≠
 = (
u√∂t8_t
)((
hmmc
->
CSD
[1] & 0x000F0000U) >> 16U);

2019 
pCSD
->
P¬®tBlockR√≥d
 = (
u√∂t8_t
)((
hmmc
->
CSD
[1] & 0x00008000U) >> 15U);

2021 
pCSD
->
WrBlockMi√ülign
 = (
u√∂t8_t
)((
hmmc
->
CSD
[1] & 0x00004000U) >> 14U);

2023 
pCSD
->
RdBlockMi√ülign
 = (
u√∂t8_t
)((
hmmc
->
CSD
[1] & 0x00002000U) >> 13U);

2025 
pCSD
->
DSRIm‚àÇ
 = (
u√∂t8_t
)((
hmmc
->
CSD
[1] & 0x00001000U) >> 12U);

2027 
pCSD
->
Re¬£rved2
 = 0U;

2029 
pCSD
->
DeviÀöSize
 = (((
hmmc
->
CSD
[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));

2031 
pCSD
->
MaxRdCu¬∫√≠tVDDM√∂
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x38000000U) >> 27U);

2033 
pCSD
->
MaxRdCu¬∫√≠tVDDMax
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x07000000U) >> 24U);

2035 
pCSD
->
MaxWrCu¬∫√≠tVDDM√∂
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x00E00000U) >> 21U);

2037 
pCSD
->
MaxWrCu¬∫√≠tVDDMax
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x001C0000U) >> 18U);

2039 
pCSD
->
DeviÀöSizeMul
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x00038000U) >> 15U);

2041 
hmmc
->
MmcC¬®d
.
BlockNbr
 = (
pCSD
->
DeviÀöSize
 + 1U) ;

2042 
hmmc
->
MmcC¬®d
.
BlockNbr
 *Ô£ø(1UL << ((
pCSD
->
DeviÀöSizeMul
 & 0x07U) + 2U));

2043 
hmmc
->
MmcC¬®d
.
BlockSize
 = (1UL << (
pCSD
->
RdBlockL√≠
 & 0x0FU));

2045 
hmmc
->
MmcC¬®d
.
LogBlockNbr
 = (hmmc->MmcC¬®d.
BlockNbr
√ã* ((hmmc->MmcC¬®d.
BlockSize
) / 512U);

2046 
hmmc
->
MmcC¬®d
.
LogBlockSize
 = 512U;

2048 
pCSD
->
E√∏¬£GrSize
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x00004000U) >> 14U);

2050 
pCSD
->
E√∏¬£GrMul
 = (
u√∂t8_t
)((
hmmc
->
CSD
[2] & 0x00003F80U) >> 7U);

2052 
pCSD
->
WrPr≈∏eÀòGrSize
 = (
u√∂t8_t
)(
hmmc
->
CSD
[2] & 0x0000007FU);

2054 
pCSD
->
WrPr≈∏eÀòGrE¬´b√Ä
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x80000000U) >> 31U);

2056 
pCSD
->
M‚Ñ¢De√äECC
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x60000000U) >> 29U);

2058 
pCSD
->
WrS‚â•edFaÀò
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x1C000000U) >> 26U);

2060 
pCSD
->
MaxWrBlockL√≠
Ô£ø(
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x03C00000U) >> 22U);

2062 
pCSD
->
Wr√¥eBlockPaP¬®t√ºl
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00200000U) >> 21U);

2064 
pCSD
->
Re¬£rved3
 = 0;

2066 
pCSD
->
C‚ÅÑ√£¬°Pr≈∏eÀòA¬µli
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00010000U) >> 16U);

2068 
pCSD
->
F√ªeF‚Äπm¬©Group
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00008000U) >> 15U);

2070 
pCSD
->
C‚Ä∫yF≈ìg
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00004000U) >> 14U);

2072 
pCSD
->
P√ÆmWrPr≈∏eÀò
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00002000U) >> 13U);

2074 
pCSD
->
TempWrPr≈∏eÀò
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00001000U) >> 12U);

2076 
pCSD
->
F√ªeF‚Äπm¬©
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00000C00U) >> 10U);

2078 
pCSD
->
ECC
Ô£ø(
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x00000300U) >> 8U);

2080 
pCSD
->
CSD_CRC
 = (
u√∂t8_t
)((
hmmc
->
CSD
[3] & 0x000000FEU) >> 1U);

2082 
pCSD
->
Re¬£rved4
 = 1;

2084  
HAL_OK
;

2085 
	}
}

2094 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_G√´C¬®dInfo
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
HAL_MMC_C¬®dInfoTy‚â•Def
 *
pC¬®dInfo
)

2096 
pC¬®dInfo
->
C¬®dTy‚â•
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.CardType);

2097 
pC¬®dInfo
->
C≈ìss
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.Class);

2098 
pC¬®dInfo
->
R√±C¬®dAdd
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.RelCardAdd);

2099 
pC¬®dInfo
->
BlockNbr
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.BlockNbr);

2100 
pC¬®dInfo
->
BlockSize
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.BlockSize);

2101 
pC¬®dInfo
->
LogBlockNbr
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.LogBlockNbr);

2102 
pC¬®dInfo
->
LogBlockSize
 = (
u√∂t32_t
)(
hmmc
->
MmcC¬®d
.LogBlockSize);

2104  
HAL_OK
;

2105 
	}
}

2118 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_C‚ÅÑfigWideBusO‚â•√∏ti‚ÅÑ
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t32_t
 
WideMode
)

2120 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2121 
SDIO_In√¥Ty‚â•Def
 
In√¥
;

2122 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2123 
u√∂t32_t
 
¬™‚Ä¢‚ÅÑ¬£
 = 0U, 
busy
 = 0U;

2126 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_BUS_WIDE
(
WideMode
));

2129 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_BUSY
;

2132 
In√¥
.
ClockEdge
 = 
SDIO_CLOCK_EDGE_RISING
;

2133 
In√¥
.
ClockBy‚àëss
 = 
SDIO_CLOCK_BYPASS_DISABLE
;

2134 
In√¥
.
ClockPow√ÆSave
 = 
SDIO_CLOCK_POWER_SAVE_DISABLE
;

2135 
In√¥
.
BusWide
 = 
WideMode
;

2136 
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 = 
SDIO_HARDWARE_FLOW_CONTROL_DISABLE
;

2137 
In√¥
.
ClockDiv
 = 
SDIO_INIT_CLK_DIV
;

2139 ()
	`SDIO_In√¥
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
In√¥
);

2141 if(
WideMode
 =Ô£ø
SDIO_BUS_WIDE_8B
)

2143 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSw√¥ch
(
hmmc
->
In¬∞‚Ñ¢Àö
, 0x03B70200U);

2144 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2146 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2149 if(
WideMode
 =Ô£ø
SDIO_BUS_WIDE_4B
)

2151 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSw√¥ch
(
hmmc
->
In¬∞‚Ñ¢Àö
, 0x03B70100U);

2152 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2154 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2157 if(
WideMode
 =Ô£ø
SDIO_BUS_WIDE_1B
)

2159 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSw√¥ch
(
hmmc
->
In¬∞‚Ñ¢Àö
, 0x03B70000U);

2160 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2162 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2168 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_PARAM
;

2172 
busy
 == 0U)

2174 if(
cou¬°
 =Ô£ø
SDMMC_MAX_TRIAL
)

2176 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2177 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE
;

2178  
HAL_ERROR
;

2180 
cou¬°
++;

2183 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dS√®tus
(
hmmc
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(((u√∂t32_t)hmmc->
MmcC¬®d
.
R√±C¬®dAdd
) << 16U));

2184 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2186 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2190 
¬™‚Ä¢‚ÅÑ¬£
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2193 
busy
 = (((
¬™‚Ä¢‚ÅÑ¬£
 >> 7U) == 1U) ? 0U : 1U);

2197 
cou¬°
 = 
SDMMC_DATATIMEOUT
;

2198 (
¬™‚Ä¢‚ÅÑ¬£
 & 0x00000100U) == 0U)

2200 if(
cou¬°
 == 0U)

2202 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2203 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE
;

2204  
HAL_ERROR
;

2206 
cou¬°
--;

2209 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dS√®tus
(
hmmc
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(((u√∂t32_t)hmmc->
MmcC¬®d
.
R√±C¬®dAdd
) << 16U));

2210 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2212 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2216 
¬™‚Ä¢‚ÅÑ¬£
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2219 if(
hmmc
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2222 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

2223 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2224  
HAL_ERROR
;

2229 
In√¥
.
ClockEdge
 = 
hmmc
->Init.ClockEdge;

2230 
In√¥
.
ClockBy‚àëss
 = 
hmmc
->Init.ClockBypass;

2231 
In√¥
.
ClockPow√ÆSave
 = 
hmmc
->Init.ClockPowerSave;

2232 
In√¥
.
BusWide
 = 
WideMode
;

2233 
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 = 
hmmc
->Init.HardwareFlowControl;

2234 
In√¥
.
ClockDiv
 = 
hmmc
->Init.ClockDiv;

2235 ()
	`SDIO_In√¥
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
In√¥
);

2239 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2241  
HAL_OK
;

2242 
	}
}

2249 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
	$HAL_MMC_G√´C¬®dS√®√£
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2251 
u√∂t32_t
 
Àárd¬∞¬©e
;

2252 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2253 
u√∂t32_t
 
¬™‚Ä¢1
 = 0U;

2255 
√Ær‚Äπ¬∞¬©e
 = 
	`MMC_S√≠dS√®tus
(
hmmc
, &
¬™‚Ä¢1
);

2256 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2258 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2261 
Àárd¬∞¬©e
 = ((
¬™‚Ä¢1
 >> 9U) & 0x0FU);

2263  (
HAL_MMC_C¬®dS√®√£Ty‚â•Def
)
Àárd¬∞¬©e
;

2264 
	}
}

2272 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_Ab‚Äπt
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2274 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2277 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

2278 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
);

2281 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
);

2283 if((
hmmc
->
hdm¬©x
 !Ô£ø
NULL
√ã|| (hmmc->
hdm¬®x
 != NULL))

2286 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

2289 if(
hmmc
->
hdm¬©x
 !Ô£ø
NULL
)

2291 if(
	`HAL_DMA_Ab‚Äπt
(
hmmc
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

2293 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DMA
;

2297 if(
hmmc
->
hdm¬®x
 !Ô£ø
NULL
)

2299 if(
	`HAL_DMA_Ab‚Äπt
(
hmmc
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2301 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DMA
;

2306 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2309 
hmmc
->
C‚ÅÑ√£xt
 = 
MMC_CONTEXT_NONE
;

2311 
C¬®dS√®√£
 = 
	`HAL_MMC_G√´C¬®dS√®√£
(
hmmc
);

2312 if((
C¬®dS√®√£
 =Ô£ø
HAL_MMC_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_MMC_CARD_SENDING
))

2314 
hmmc
->
E¬∫‚ÄπCode
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hmmc->
In¬∞‚Ñ¢Àö
);

2316 if(
hmmc
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2318  
HAL_ERROR
;

2320  
HAL_OK
;

2321 
	}
}

2329 
HAL_S√®tusTy‚â•Def
 
	$HAL_MMC_Ab‚Äπt_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2331 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2334 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

2335 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
);

2338 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
);

2340 if((
hmmc
->
hdm¬©x
 !Ô£ø
NULL
√ã|| (hmmc->
hdm¬®x
 != NULL))

2343 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

2346 if(
hmmc
->
hdm¬©x
 !Ô£ø
NULL
)

2348 
hmmc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
MMC_DMATxAb‚Äπt
;

2349 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hmmc
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

2351 
hmmc
->
hdm¬©x
 = 
NULL
;

2355 if(
hmmc
->
hdm¬®x
 !Ô£ø
NULL
)

2357 
hmmc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
MMC_DMARxAb‚Äπt
;

2358 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hmmc
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2360 
hmmc
->
hdm¬®x
 = 
NULL
;

2366 if((
hmmc
->
hdm¬©x
 =Ô£ø
NULL
√ã&& (hmmc->
hdm¬®x
 == NULL))

2368 
C¬®dS√®√£
 = 
	`HAL_MMC_G√´C¬®dS√®√£
(
hmmc
);

2369 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2371 if((
C¬®dS√®√£
 =Ô£ø
HAL_MMC_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_MMC_CARD_SENDING
))

2373 
hmmc
->
E¬∫‚ÄπCode
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hmmc->
In¬∞‚Ñ¢Àö
);

2375 if(
hmmc
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2377  
HAL_ERROR
;

2381 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2382 
hmmc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hmmc);

2384 
	`HAL_MMC_Ab‚ÄπtC√Ülback
(
hmmc
);

2389  
HAL_OK
;

2390 
	}
}

2410 
	$MMC_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2412 
MMC_H‚Ñ¢d√ÄTy‚â•Def
* 
hmmc
 = (MMC_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2415 
	`__HAL_MMC_ENABLE_IT
(
hmmc
, (
SDIO_IT_DATAEND
));

2416 
	}
}

2423 
	$MMC_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2425 
MMC_H‚Ñ¢d√ÄTy‚â•Def
* 
hmmc
 = (MMC_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2426 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2429 if(
hmmc
->
C‚ÅÑ√£xt
 =Ô£ø(
MMC_CONTEXT_READ_MULTIPLE_BLOCK
 | 
MMC_CONTEXT_DMA
))

2431 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hmmc
->
In¬∞‚Ñ¢Àö
);

2432 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2434 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2435 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2436 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

2438 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

2445 
hmmc
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

2448 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_DATA_FLAGS
);

2450 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2452 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2453 
hmmc
->
	`RxC‚àÇtC√Ülback
(hmmc);

2455 
	`HAL_MMC_RxC‚àÇtC√Ülback
(
hmmc
);

2457 
	}
}

2464 
	$MMC_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2466 
MMC_H‚Ñ¢d√ÄTy‚â•Def
* 
hmmc
 = (MMC_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2467 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2468 
u√∂t32_t
 
RxE¬∫‚ÄπCode
, 
TxE¬∫‚ÄπCode
;

2470 
RxE¬∫‚ÄπCode
 = 
hmmc
->
hdm¬®x
->
E¬∫‚ÄπCode
;

2471 
TxE¬∫‚ÄπCode
 = 
hmmc
->
hdm¬©x
->
E¬∫‚ÄπCode
;

2472 if((
RxE¬∫‚ÄπCode
 =Ô£ø
HAL_DMA_ERROR_TE
√ã|| (
TxE¬∫‚ÄπCode
 == HAL_DMA_ERROR_TE))

2475 
	`__HAL_MMC_CLEAR_FLAG
(
hmmc
, 
SDIO_STATIC_FLAGS
);

2478 
	`__HAL_MMC_DISABLE_IT
(
hmmc
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

2479 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
);

2481 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_MMC_ERROR_DMA
;

2482 
C¬®dS√®√£
 = 
	`HAL_MMC_G√´C¬®dS√®√£
(
hmmc
);

2483 if((
C¬®dS√®√£
 =Ô£ø
HAL_MMC_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_MMC_CARD_SENDING
))

2485 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hmmc->
In¬∞‚Ñ¢Àö
);

2488 
hmmc
->
S√®√£
Ô£ø
HAL_MMC_STATE_READY
;

2491 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2492 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

2494 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

2496 
	}
}

2503 
	$MMC_DMATxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2505 
MMC_H‚Ñ¢d√ÄTy‚â•Def
* 
hmmc
 = (MMC_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2506 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2508 if(
hmmc
->
hdm¬©x
 !Ô£ø
NULL
)

2510 
hmmc
->
hdm¬©x
 = 
NULL
;

2514 if(
hmmc
->
hdm¬®x
 =Ô£ø
NULL
)

2516 
C¬®dS√®√£
 = 
	`HAL_MMC_G√´C¬®dS√®√£
(
hmmc
);

2517 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

2518 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2519 if((
C¬®dS√®√£
 =Ô£ø
HAL_MMC_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_MMC_CARD_SENDING
))

2521 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hmmc->
In¬∞‚Ñ¢Àö
);

2523 if(
hmmc
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2525 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2526 
hmmc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hmmc);

2528 
	`HAL_MMC_Ab‚ÄπtC√Ülback
(
hmmc
);

2533 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2534 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

2536 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

2541 
	}
}

2548 
	$MMC_DMARxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2550 
MMC_H‚Ñ¢d√ÄTy‚â•Def
* 
hmmc
 = (MMC_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2551 
HAL_MMC_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2553 if(
hmmc
->
hdm¬®x
 !Ô£ø
NULL
)

2555 
hmmc
->
hdm¬®x
 = 
NULL
;

2559 if(
hmmc
->
hdm¬©x
 =Ô£ø
NULL
)

2561 
C¬®dS√®√£
 = 
	`HAL_MMC_G√´C¬®dS√®√£
(
hmmc
);

2562 
hmmc
->
E¬∫‚ÄπCode
 = 
HAL_MMC_ERROR_NONE
;

2563 
hmmc
->
S√®√£
 = 
HAL_MMC_STATE_READY
;

2564 if((
C¬®dS√®√£
 =Ô£ø
HAL_MMC_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_MMC_CARD_SENDING
))

2566 
hmmc
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hmmc->
In¬∞‚Ñ¢Àö
);

2568 if(
hmmc
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2570 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2571 
hmmc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hmmc);

2573 
	`HAL_MMC_Ab‚ÄπtC√Ülback
(
hmmc
);

2578 #i‚Ä°
	`def√∂ed
 (
USE_HAL_MMC_REGISTER_CALLBACKS
) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)

2579 
hmmc
->
	`E¬∫‚ÄπC√Ülback
(hmmc);

2581 
	`HAL_MMC_E¬∫‚ÄπC√Ülback
(
hmmc
);

2586 
	}
}

2593 
u√∂t32_t
 
	$MMC_In√¥C¬®d
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2595 
HAL_MMC_C¬®dCSDTy‚â•Def
 
CSD
;

2596 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2597 
u√∂t16_t
 
mmc_rÀá
 = 1U;

2600 if(
	`SDIO_G√´Pow√ÆS√®√£
(
hmmc
->
In¬∞‚Ñ¢Àö
) == 0U)

2603  
HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE
;

2607 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dCID
(
hmmc
->
In¬∞‚Ñ¢Àö
);

2608 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2610  
√Ær‚Äπ¬∞¬©e
;

2615 
hmmc
->
CID
[0U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2616 
hmmc
->
CID
[1U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP2
);

2617 
hmmc
->
CID
[2U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP3
);

2618 
hmmc
->
CID
[3U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP4
);

2623 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√´R√±Add
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
mmc_rÀá
);

2624 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2626  
√Ær‚Äπ¬∞¬©e
;

2630 
hmmc
->
MmcC¬®d
.
R√±C¬®dAdd
 = 
mmc_rÀá
;

2633 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dCSD
(
hmmc
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hmmc->
MmcC¬®d
.
R√±C¬®dAdd
 << 16U));

2634 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2636  
√Ær‚Äπ¬∞¬©e
;

2641 
hmmc
->
CSD
[0U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2642 
hmmc
->
CSD
[1U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP2
);

2643 
hmmc
->
CSD
[2U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP3
);

2644 
hmmc
->
CSD
[3U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP4
);

2648 
hmmc
->
MmcC¬®d
.
C≈ìss
 = (
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hmmc->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP2
) >> 20U);

2651 i‚Ä°(
	`HAL_MMC_G√´C¬®dCSD
(
hmmc
, &
CSD
√ã!Ô£ø
HAL_OK
)

2653  
hmmc
->
E¬∫‚ÄπCode
;

2657 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√±De¬£l
(
hmmc
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(((u√∂t32_t)hmmc->
MmcC¬®d
.
R√±C¬®dAdd
) << 16U));

2658 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2660  
√Ær‚Äπ¬∞¬©e
;

2664 ()
	`SDIO_In√¥
(
hmmc
->
In¬∞‚Ñ¢Àö
, hmmc->
In√¥
);

2667  
HAL_MMC_ERROR_NONE
;

2668 
	}
}

2677 
u√∂t32_t
 
	$MMC_Pow√ÆON
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2679 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2680 
u√∂t32_t
 
¬™‚Ä¢‚ÅÑ¬£
 = 0U, 
v√ÜidvÔ¨Å√®ge
 = 0U;

2681 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2684 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdGoId√ÄS√®√£
(
hmmc
->
In¬∞‚Ñ¢Àö
);

2685 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2687  
√Ær‚Äπ¬∞¬©e
;

2690 
v√ÜidvÔ¨Å√®ge
 == 0U)

2692 if(
cou¬°
++ =Ô£ø
SDMMC_MAX_VOLT_TRIAL
)

2694  
HAL_MMC_ERROR_INVALID_VOLTRANGE
;

2698 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdOpC‚ÅÑd√¥i‚ÅÑ
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
eMMC_HIGH_VOLTAGE_RANGE
);

2699 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2701  
HAL_MMC_ERROR_UNSUPPORTED_FEATURE
;

2705 
¬™‚Ä¢‚ÅÑ¬£
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2708 
v√ÜidvÔ¨Å√®ge
 = (((
¬™‚Ä¢‚ÅÑ¬£
 >> 31U) == 1U) ? 1U : 0U);

2712 i‚Ä°(((
¬™‚Ä¢‚ÅÑ¬£
 & (0xFF000000U)) >> 24) == 0xC0U)

2714 
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
 = 
MMC_HIGH_CAPACITY_CARD
;

2718 
hmmc
->
MmcC¬®d
.
C¬®dTy‚â•
 = 
MMC_LOW_CAPACITY_CARD
;

2721  
HAL_MMC_ERROR_NONE
;

2722 
	}
}

2729 
	$MMC_Pow√ÆOFF
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2732 ()
	`SDIO_Pow√ÆS√®√£_OFF
(
hmmc
->
In¬∞‚Ñ¢Àö
);

2733 
	}
}

2742 
u√∂t32_t
 
	$MMC_S√≠dS√®tus
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
, 
u√∂t32_t
 *
pC¬®dS√®tus
)

2744 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2746 if(
pC¬®dS√®tus
 =Ô£ø
NULL
)

2748  
HAL_MMC_ERROR_PARAM
;

2752 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dS√®tus
(
hmmc
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hmmc->
MmcC¬®d
.
R√±C¬®dAdd
 << 16U));

2753 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_MMC_ERROR_NONE
)

2755  
√Ær‚Äπ¬∞¬©e
;

2759 *
pC¬®dS√®tus
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hmmc
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2761  
HAL_MMC_ERROR_NONE
;

2762 
	}
}

2770 
	$MMC_R√≥d_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2772 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

2773 
u√∂t8_t
* 
tmp
;

2775 
tmp
 = 
hmmc
->
pRxBuffP√•
;

2776 
d¬©¬®ema√∂√∂g
 = 
hmmc
->
RxX‚ÄûrSize
;

2778 i‚Ä°(
d¬©¬®ema√∂√∂g
 > 0U)

2781 
cou¬°
 = 0U; count < 8U; count++)

2783 
d¬©a
 = 
	`SDIO_R√≥dFIFO
(
hmmc
->
In¬∞‚Ñ¢Àö
);

2784 *
tmp
 = (
u√∂t8_t
)(
d¬©a
 & 0xFFU);

2785 
tmp
++;

2786 
d¬©¬®ema√∂√∂g
--;

2787 *
tmp
 = (
u√∂t8_t
)((
d¬©a
 >> 8U) & 0xFFU);

2788 
tmp
++;

2789 
d¬©¬®ema√∂√∂g
--;

2790 *
tmp
 = (
u√∂t8_t
)((
d¬©a
 >> 16U) & 0xFFU);

2791 
tmp
++;

2792 
d¬©¬®ema√∂√∂g
--;

2793 *
tmp
 = (
u√∂t8_t
)((
d¬©a
 >> 24U) & 0xFFU);

2794 
tmp
++;

2795 
d¬©¬®ema√∂√∂g
--;

2798 
hmmc
->
pRxBuffP√•
 = 
tmp
;

2799 
hmmc
->
RxX‚ÄûrSize
 = 
d¬©¬®ema√∂√∂g
;

2801 
	}
}

2809 
	$MMC_Wr√¥e_IT
(
MMC_H‚Ñ¢d√ÄTy‚â•Def
 *
hmmc
)

2811 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

2812 
u√∂t8_t
* 
tmp
;

2814 
tmp
 = 
hmmc
->
pTxBuffP√•
;

2815 
d¬©¬®ema√∂√∂g
 = 
hmmc
->
TxX‚ÄûrSize
;

2817 i‚Ä°(
d¬©¬®ema√∂√∂g
 > 0U)

2820 
cou¬°
 = 0U; count < 8U; count++)

2822 
d¬©a
 = (
u√∂t32_t
)(*
tmp
);

2823 
tmp
++;

2824 
d¬©¬®ema√∂√∂g
--;

2825 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
tmp
) << 8U);

2826 
tmp
++;

2827 
d¬©¬®ema√∂√∂g
--;

2828 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
tmp
) << 16U);

2829 
tmp
++;

2830 
d¬©¬®ema√∂√∂g
--;

2831 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
tmp
) << 24U);

2832 
tmp
++;

2833 
d¬©¬®ema√∂√∂g
--;

2834 ()
	`SDIO_Wr√¥eFIFO
(
hmmc
->
In¬∞‚Ñ¢Àö
, &
d¬©a
);

2837 
hmmc
->
pTxBuffP√•
 = 
tmp
;

2838 
hmmc
->
TxX‚ÄûrSize
 = 
d¬©¬®ema√∂√∂g
;

2840 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_msp_template.c

23 
	~"¬∞m32f1xx_h√Ü.h
"

49 
	$HAL_M‚Ä¢In√¥
()

52 
	}
}

58 
	$HAL_M‚Ä¢DeIn√¥
()

61 
	}
}

67 
	$HAL_PPP_M‚Ä¢In√¥
()

70 
	}
}

76 
	$HAL_PPP_M‚Ä¢DeIn√¥
()

79 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_nand.c

110 
	~"¬∞m32f1xx_h√Ü.h
"

112 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

118 #ifde‚Ä°
HAL_NAND_MODULE_ENABLED


159 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_In√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
ComS‚àëÀö_Tim√∂g
,

160 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
A√¢S‚àëÀö_Tim√∂g
)

163 i‚Ä°(
h¬´nd
 =Ô£ø
NULL
)

165  
HAL_ERROR
;

168 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_RESET
)

171 
h¬´nd
->
Lock
 = 
HAL_UNLOCKED
;

173 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

174 i‚Ä°(
h¬´nd
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

176 
h¬´nd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_NAND_M‚Ä¢In√¥
;

178 
h¬´nd
->
ItC√Ülback
 = 
HAL_NAND_ITC√Ülback
;

181 
h¬´nd
->
	`M‚Ä¢In√¥C√Ülback
(hnand);

184 
	`HAL_NAND_M‚Ä¢In√¥
(
h¬´nd
);

189 ()
	`FSMC_NAND_In√¥
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, &(h¬´nd->
In√¥
));

192 ()
	`FSMC_NAND_Comm‚ÅÑS‚àëÀö_Tim√∂g_In√¥
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, 
ComS‚àëÀö_Tim√∂g
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
);

195 ()
	`FSMC_NAND_A√¢ribu√£S‚àëÀö_Tim√∂g_In√¥
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, 
A√¢S‚àëÀö_Tim√∂g
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
);

198 
	`__FSMC_NAND_ENABLE
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
);

201 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

203  
HAL_OK
;

204 
	}
}

212 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_DeIn√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

214 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

215 i‚Ä°(
h¬´nd
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

217 
h¬´nd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_NAND_M‚Ä¢DeIn√¥
;

221 
h¬´nd
->
	`M‚Ä¢DeIn√¥C√Ülback
(hnand);

224 
	`HAL_NAND_M‚Ä¢DeIn√¥
(
h¬´nd
);

228 ()
	`FSMC_NAND_DeIn√¥
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
);

231 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_RESET
;

234 
	`__HAL_UNLOCK
(
h¬´nd
);

236  
HAL_OK
;

237 
	}
}

245 
__w√≥k
 
	$HAL_NAND_M‚Ä¢In√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

248 
	`UNUSED
(
h¬´nd
);

253 
	}
}

261 
__w√≥k
 
	$HAL_NAND_M‚Ä¢DeIn√¥
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

264 
	`UNUSED
(
h¬´nd
);

269 
	}
}

278 
	$HAL_NAND_IRQH‚Ñ¢d√Är
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

281 i‚Ä°(
	`__FSMC_NAND_GET_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_RISING_EDGE
))

284 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

285 
h¬´nd
->
	`ItC√Ülback
(hnand);

287 
	`HAL_NAND_ITC√Ülback
(
h¬´nd
);

291 
	`__FSMC_NAND_CLEAR_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_RISING_EDGE
);

295 i‚Ä°(
	`__FSMC_NAND_GET_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_LEVEL
))

298 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

299 
h¬´nd
->
	`ItC√Ülback
(hnand);

301 
	`HAL_NAND_ITC√Ülback
(
h¬´nd
);

305 
	`__FSMC_NAND_CLEAR_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_LEVEL
);

309 i‚Ä°(
	`__FSMC_NAND_GET_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_FALLING_EDGE
))

312 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

313 
h¬´nd
->
	`ItC√Ülback
(hnand);

315 
	`HAL_NAND_ITC√Ülback
(
h¬´nd
);

319 
	`__FSMC_NAND_CLEAR_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_FALLING_EDGE
);

323 i‚Ä°(
	`__FSMC_NAND_GET_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_FEMPT
))

326 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

327 
h¬´nd
->
	`ItC√Ülback
(hnand);

329 
	`HAL_NAND_ITC√Ülback
(
h¬´nd
);

333 
	`__FSMC_NAND_CLEAR_FLAG
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
FSMC_FLAG_FEMPT
);

336 
	}
}

344 
__w√≥k
 
	$HAL_NAND_ITC√Ülback
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

347 
	`UNUSED
(
h¬´nd
);

352 
	}
}

380 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_R√≥d_ID
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_IDTy‚â•Def
 *
pNAND_ID
)

382 
__IO
 
u√∂t32_t
 
d¬©a
 = 0;

383 
__IO
 
u√∂t32_t
 
d¬©a1
 = 0;

384 
u√∂t32_t
 
deviÀöadd¬™ss
;

387 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

389  
HAL_BUSY
;

391 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

394 
	`__HAL_LOCK
(
h¬´nd
);

397 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

400 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

402 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

406 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

410 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_READID
;

411 
	`__DSB
();

412 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00;

413 
	`__DSB
();

416 i‚Ä°(
h¬´nd
->
In√¥
.
Mem‚ÄπyD¬©aWidth
 =Ô£ø
FSMC_NAND_PCC_MEM_BUS_WIDTH_8
)

418 
d¬©a
 = *(
__IO
 
u√∂t32_t
 *)
deviÀöadd¬™ss
;

421 
pNAND_ID
->
Mak√Æ_Id
 = 
	`ADDR_1ST_CYCLE
(
d¬©a
);

422 
pNAND_ID
->
DeviÀö_Id
 = 
	`ADDR_2ND_CYCLE
(
d¬©a
);

423 
pNAND_ID
->
Th√∫d_Id
 = 
	`ADDR_3RD_CYCLE
(
d¬©a
);

424 
pNAND_ID
->
FouœÄh_Id
 = 
	`ADDR_4TH_CYCLE
(
d¬©a
);

428 
d¬©a
 = *(
__IO
 
u√∂t32_t
 *)
deviÀöadd¬™ss
;

429 
d¬©a1
 = *((
__IO
 
u√∂t32_t
 *)
deviÀöadd¬™ss
 + 4);

432 
pNAND_ID
->
Mak√Æ_Id
 = 
	`ADDR_1ST_CYCLE
(
d¬©a
);

433 
pNAND_ID
->
DeviÀö_Id
 = 
	`ADDR_3RD_CYCLE
(
d¬©a
);

434 
pNAND_ID
->
Th√∫d_Id
 = 
	`ADDR_1ST_CYCLE
(
d¬©a1
);

435 
pNAND_ID
->
FouœÄh_Id
 = 
	`ADDR_3RD_CYCLE
(
d¬©a1
);

439 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

442 
	`__HAL_UNLOCK
(
h¬´nd
);

446  
HAL_ERROR
;

449  
HAL_OK
;

450 
	}
}

458 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_Re¬£t
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

460 
u√∂t32_t
 
deviÀöadd¬™ss
;

463 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

465  
HAL_BUSY
;

467 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

470 
	`__HAL_LOCK
(
h¬´nd
);

473 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

476 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

478 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

482 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

486 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)) = 0xFF;

489 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

492 
	`__HAL_UNLOCK
(
h¬´nd
);

496  
HAL_ERROR
;

499  
HAL_OK
;

501 
	}
}

510 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_C‚ÅÑfigDeviÀö
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_DeviÀöC‚ÅÑfigTy‚â•Def
 *
pDeviÀöC‚ÅÑfig
)

512 
h¬´nd
->
C‚ÅÑfig
.
PageSize
 = 
pDeviÀöC‚ÅÑfig
->PageSize;

513 
h¬´nd
->
C‚ÅÑfig
.
S‚àë¬™A¬™aSize
 = 
pDeviÀöC‚ÅÑfig
->SpareAreaSize;

514 
h¬´nd
->
C‚ÅÑfig
.
BlockSize
 = 
pDeviÀöC‚ÅÑfig
->BlockSize;

515 
h¬´nd
->
C‚ÅÑfig
.
BlockNbr
 = 
pDeviÀöC‚ÅÑfig
->BlockNbr;

516 
h¬´nd
->
C‚ÅÑfig
.
P≈ì‚àöSize
 = 
pDeviÀöC‚ÅÑfig
->PlaneSize;

517 
h¬´nd
->
C‚ÅÑfig
.
P≈ì‚àöNbr
 = 
pDeviÀöC‚ÅÑfig
->PlaneNbr;

518 
h¬´nd
->
C‚ÅÑfig
.
Ex√•aComm‚Ñ¢dE¬´b√Ä
 = 
pDeviÀöC‚ÅÑfig
->ExtraCommandEnable;

520  
HAL_OK
;

521 
	}
}

532 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_R√≥d_Page_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pBuf‚Äûr
,

533 
u√∂t32_t
 
NumPageToR√≥d
)

535 
u√∂t32_t
 
√∂dex
;

536 
u√∂t32_t
 
tick¬∞¬®t
;

537 
u√∂t32_t
 
deviÀöadd¬™ss
;

538 
u√∂t32_t
 
num‚àëge¬ß√≥d
 = 0U;

539 
u√∂t32_t
 
¬´ndadd¬™ss
;

540 
u√∂t32_t
 
nb‚àëges
 = 
NumPageToR√≥d
;

541 
u√∂t8_t
 *
buff
 = 
pBuf‚Äûr
;

544 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

546  
HAL_BUSY
;

548 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

551 
	`__HAL_LOCK
(
h¬´nd
);

554 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

557 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

559 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

563 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

567 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

570 (
nb‚àëges
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

573 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

574 
	`__DSB
();

577 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

579 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

581 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

582 
	`__DSB
();

583 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

584 
	`__DSB
();

585 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

586 
	`__DSB
();

590 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

591 
	`__DSB
();

592 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

593 
	`__DSB
();

594 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

595 
	`__DSB
();

596 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

597 
	`__DSB
();

602 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

604 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

605 
	`__DSB
();

606 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

607 
	`__DSB
();

608 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

609 
	`__DSB
();

610 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

611 
	`__DSB
();

615 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

616 
	`__DSB
();

617 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

618 
	`__DSB
();

619 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

620 
	`__DSB
();

621 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

622 
	`__DSB
();

623 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

624 
	`__DSB
();

628 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_TRUE1
;

629 
	`__DSB
();

632 i‚Ä°(
h¬´nd
->
C‚ÅÑfig
.
Ex√•aComm‚Ñ¢dE¬´b√Ä
 =Ô£ø
ENABLE
)

635 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

638 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

640 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

643 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

646 
	`__HAL_UNLOCK
(
h¬´nd
);

648  
HAL_TIMEOUT
;

653 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)) = ((uint8_t)0x00);

654 
	`__DSB
();

658 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
PageSize
; index++)

660 *
buff
 = *(
u√∂t8_t
 *)
deviÀöadd¬™ss
;

661 
buff
++;

665 
num‚àëge¬ß√≥d
++;

668 
nb‚àëges
--;

671 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

675 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

678 
	`__HAL_UNLOCK
(
h¬´nd
);

682  
HAL_ERROR
;

685  
HAL_OK
;

686 
	}
}

697 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_R√≥d_Page_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pBuf‚Äûr
,

698 
u√∂t32_t
 
NumPageToR√≥d
)

700 
u√∂t32_t
 
√∂dex
;

701 
u√∂t32_t
 
tick¬∞¬®t
;

702 
u√∂t32_t
 
deviÀöadd¬™ss
;

703 
u√∂t32_t
 
num‚àëge¬ß√≥d
 = 0;

704 
u√∂t32_t
 
¬´ndadd¬™ss
;

705 
u√∂t32_t
 
nb‚àëges
 = 
NumPageToR√≥d
;

706 
u√∂t16_t
 *
buff
 = 
pBuf‚Äûr
;

709 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

711  
HAL_BUSY
;

713 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

716 
	`__HAL_LOCK
(
h¬´nd
);

719 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

722 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

724 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

728 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

732 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

735 (
nb‚àëges
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

738 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

739 
	`__DSB
();

742 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

744 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

746 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

747 
	`__DSB
();

748 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

749 
	`__DSB
();

750 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

751 
	`__DSB
();

755 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

756 
	`__DSB
();

757 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

758 
	`__DSB
();

759 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

760 
	`__DSB
();

761 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

762 
	`__DSB
();

767 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

769 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

770 
	`__DSB
();

771 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

772 
	`__DSB
();

773 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

774 
	`__DSB
();

775 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

776 
	`__DSB
();

780 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

781 
	`__DSB
();

782 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

783 
	`__DSB
();

784 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

785 
	`__DSB
();

786 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

787 
	`__DSB
();

788 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

789 
	`__DSB
();

793 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_TRUE1
;

794 
	`__DSB
();

796 i‚Ä°(
h¬´nd
->
C‚ÅÑfig
.
Ex√•aComm‚Ñ¢dE¬´b√Ä
 =Ô£ø
ENABLE
)

799 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

802 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

804 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

807 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

810 
	`__HAL_UNLOCK
(
h¬´nd
);

812  
HAL_TIMEOUT
;

817 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)) = ((uint8_t)0x00);

818 
	`__DSB
();

822 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
PageSize
; index++)

824 *
buff
 = *(
u√∂t16_t
 *)
deviÀöadd¬™ss
;

825 
buff
++;

829 
num‚àëge¬ß√≥d
++;

832 
nb‚àëges
--;

835 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

839 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

842 
	`__HAL_UNLOCK
(
h¬´nd
);

846  
HAL_ERROR
;

849  
HAL_OK
;

850 
	}
}

861 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_Wr√¥e_Page_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pBuf‚Äûr
,

862 
u√∂t32_t
 
NumPageToWr√¥e
)

864 
u√∂t32_t
 
√∂dex
;

865 
u√∂t32_t
 
tick¬∞¬®t
;

866 
u√∂t32_t
 
deviÀöadd¬™ss
;

867 
u√∂t32_t
 
num‚àëgeswr√¥√£n
 = 0;

868 
u√∂t32_t
 
¬´ndadd¬™ss
;

869 
u√∂t32_t
 
nb‚àëges
 = 
NumPageToWr√¥e
;

870 
u√∂t8_t
 *
buff
 = 
pBuf‚Äûr
;

873 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

875  
HAL_BUSY
;

877 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

880 
	`__HAL_LOCK
(
h¬´nd
);

883 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

886 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

888 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

892 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

896 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

899 (
nb‚àëges
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

902 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

903 
	`__DSB
();

904 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE0
;

905 
	`__DSB
();

908 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

910 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

912 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

913 
	`__DSB
();

914 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

915 
	`__DSB
();

916 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

917 
	`__DSB
();

921 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

922 
	`__DSB
();

923 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

924 
	`__DSB
();

925 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

926 
	`__DSB
();

927 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

928 
	`__DSB
();

933 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

935 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

936 
	`__DSB
();

937 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

938 
	`__DSB
();

939 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

940 
	`__DSB
();

941 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

942 
	`__DSB
();

946 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

947 
	`__DSB
();

948 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

949 
	`__DSB
();

950 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

951 
	`__DSB
();

952 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

953 
	`__DSB
();

954 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

955 
	`__DSB
();

960 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
PageSize
; index++)

962 *(
__IO
 
u√∂t8_t
 *)
deviÀöadd¬™ss
 = *
buff
;

963 
buff
++;

964 
	`__DSB
();

967 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE_TRUE1
;

968 
	`__DSB
();

971 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

974 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

976 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

979 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

982 
	`__HAL_UNLOCK
(
h¬´nd
);

984  
HAL_TIMEOUT
;

989 
num‚àëgeswr√¥√£n
++;

992 
nb‚àëges
--;

995 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

999 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1002 
	`__HAL_UNLOCK
(
h¬´nd
);

1006  
HAL_ERROR
;

1009  
HAL_OK
;

1010 
	}
}

1021 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_Wr√¥e_Page_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pBuf‚Äûr
,

1022 
u√∂t32_t
 
NumPageToWr√¥e
)

1024 
u√∂t32_t
 
√∂dex
;

1025 
u√∂t32_t
 
tick¬∞¬®t
;

1026 
u√∂t32_t
 
deviÀöadd¬™ss
;

1027 
u√∂t32_t
 
num‚àëgeswr√¥√£n
 = 0;

1028 
u√∂t32_t
 
¬´ndadd¬™ss
;

1029 
u√∂t32_t
 
nb‚àëges
 = 
NumPageToWr√¥e
;

1030 
u√∂t16_t
 *
buff
 = 
pBuf‚Äûr
;

1033 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

1035  
HAL_BUSY
;

1037 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1040 
	`__HAL_LOCK
(
h¬´nd
);

1043 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

1046 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

1048 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

1052 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

1056 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

1059 (
nb‚àëges
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

1062 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

1063 
	`__DSB
();

1064 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE0
;

1065 
	`__DSB
();

1068 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

1070 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1072 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1073 
	`__DSB
();

1074 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1075 
	`__DSB
();

1076 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1077 
	`__DSB
();

1081 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1082 
	`__DSB
();

1083 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1084 
	`__DSB
();

1085 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1086 
	`__DSB
();

1087 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1088 
	`__DSB
();

1093 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1095 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1096 
	`__DSB
();

1097 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1098 
	`__DSB
();

1099 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1100 
	`__DSB
();

1101 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1102 
	`__DSB
();

1106 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1107 
	`__DSB
();

1108 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1109 
	`__DSB
();

1110 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1111 
	`__DSB
();

1112 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1113 
	`__DSB
();

1114 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1115 
	`__DSB
();

1120 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
PageSize
; index++)

1122 *(
__IO
 
u√∂t16_t
 *)
deviÀöadd¬™ss
 = *
buff
;

1123 
buff
++;

1124 
	`__DSB
();

1127 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE_TRUE1
;

1128 
	`__DSB
();

1131 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1134 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

1136 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

1139 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

1142 
	`__HAL_UNLOCK
(
h¬´nd
);

1144  
HAL_TIMEOUT
;

1149 
num‚àëgeswr√¥√£n
++;

1152 
nb‚àëges
--;

1155 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

1159 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1162 
	`__HAL_UNLOCK
(
h¬´nd
);

1166  
HAL_ERROR
;

1169  
HAL_OK
;

1170 
	}
}

1181 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_R√≥d_S‚àë¬™A¬™a_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pBuf‚Äûr
,

1182 
u√∂t32_t
 
NumS‚àë¬™A¬™aToR√≥d
)

1184 
u√∂t32_t
 
√∂dex
;

1185 
u√∂t32_t
 
tick¬∞¬®t
;

1186 
u√∂t32_t
 
deviÀöadd¬™ss
;

1187 
u√∂t32_t
 
num‚Ä¢¬®√≥¬™¬®√≥d
 = 0;

1188 
u√∂t32_t
 
¬´ndadd¬™ss
;

1189 
u√∂t32_t
 
cÔ¨Åum¬´dd¬™ss
;

1190 
u√∂t32_t
 
nb‚Ä¢¬®e
 = 
NumS‚àë¬™A¬™aToR√≥d
;

1191 
u√∂t8_t
 *
buff
 = 
pBuf‚Äûr
;

1194 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

1196  
HAL_BUSY
;

1198 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1201 
	`__HAL_LOCK
(
h¬´nd
);

1204 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

1207 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

1209 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

1213 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

1217 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

1220 
cÔ¨Åum¬´dd¬™ss
 = 
	`COLUMN_ADDRESS
(
h¬´nd
);

1223 (
nb‚Ä¢¬®e
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

1226 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

1229 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_C
;

1230 
	`__DSB
();

1232 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1234 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1235 
	`__DSB
();

1236 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1237 
	`__DSB
();

1238 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1239 
	`__DSB
();

1243 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1244 
	`__DSB
();

1245 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1246 
	`__DSB
();

1247 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1248 
	`__DSB
();

1249 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1250 
	`__DSB
();

1256 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

1257 
	`__DSB
();

1259 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1261 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1262 
	`__DSB
();

1263 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1264 
	`__DSB
();

1265 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1266 
	`__DSB
();

1267 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1268 
	`__DSB
();

1272 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1273 
	`__DSB
();

1274 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1275 
	`__DSB
();

1276 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1277 
	`__DSB
();

1278 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1279 
	`__DSB
();

1280 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1281 
	`__DSB
();

1285 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_TRUE1
;

1286 
	`__DSB
();

1288 i‚Ä°(
h¬´nd
->
C‚ÅÑfig
.
Ex√•aComm‚Ñ¢dE¬´b√Ä
 =Ô£ø
ENABLE
)

1291 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1294 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

1296 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

1299 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

1302 
	`__HAL_UNLOCK
(
h¬´nd
);

1304  
HAL_TIMEOUT
;

1309 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)) = ((uint8_t)0x00);

1310 
	`__DSB
();

1314 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
S‚àë¬™A¬™aSize
; index++)

1316 *
buff
 = *(
u√∂t8_t
 *)
deviÀöadd¬™ss
;

1317 
buff
++;

1321 
num‚Ä¢¬®√≥¬™¬®√≥d
++;

1324 
nb‚Ä¢¬®e
--;

1327 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

1331 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1334 
	`__HAL_UNLOCK
(
h¬´nd
);

1338  
HAL_ERROR
;

1341  
HAL_OK
;

1342 
	}
}

1353 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_R√≥d_S‚àë¬™A¬™a_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

1354 
u√∂t16_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aToR√≥d
)

1356 
u√∂t32_t
 
√∂dex
;

1357 
u√∂t32_t
 
tick¬∞¬®t
;

1358 
u√∂t32_t
 
deviÀöadd¬™ss
;

1359 
u√∂t32_t
 
num‚Ä¢¬®√≥¬™¬®√≥d
 = 0;

1360 
u√∂t32_t
 
¬´ndadd¬™ss
;

1361 
u√∂t32_t
 
cÔ¨Åum¬´dd¬™ss
;

1362 
u√∂t32_t
 
nb‚Ä¢¬®e
 = 
NumS‚àë¬™A¬™aToR√≥d
;

1363 
u√∂t16_t
 *
buff
 = 
pBuf‚Äûr
;

1366 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

1368  
HAL_BUSY
;

1370 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1373 
	`__HAL_LOCK
(
h¬´nd
);

1376 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

1379 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

1381 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

1385 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

1389 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

1392 
cÔ¨Åum¬´dd¬™ss
 = (
u√∂t32_t
)(
	`COLUMN_ADDRESS
(
h¬´nd
) * 2U);

1395 (
nb‚Ä¢¬®e
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

1398 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

1401 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_C
;

1402 
	`__DSB
();

1404 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1406 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1407 
	`__DSB
();

1408 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1409 
	`__DSB
();

1410 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1411 
	`__DSB
();

1415 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1416 
	`__DSB
();

1417 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1418 
	`__DSB
();

1419 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1420 
	`__DSB
();

1421 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1422 
	`__DSB
();

1428 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

1429 
	`__DSB
();

1431 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1433 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1434 
	`__DSB
();

1435 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1436 
	`__DSB
();

1437 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1438 
	`__DSB
();

1439 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1440 
	`__DSB
();

1444 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1445 
	`__DSB
();

1446 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1447 
	`__DSB
();

1448 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1449 
	`__DSB
();

1450 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1451 
	`__DSB
();

1452 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1453 
	`__DSB
();

1457 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_TRUE1
;

1458 
	`__DSB
();

1460 i‚Ä°(
h¬´nd
->
C‚ÅÑfig
.
Ex√•aComm‚Ñ¢dE¬´b√Ä
 =Ô£ø
ENABLE
)

1463 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1466 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

1468 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

1471 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

1474 
	`__HAL_UNLOCK
(
h¬´nd
);

1476  
HAL_TIMEOUT
;

1481 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)) = ((uint8_t)0x00);

1482 
	`__DSB
();

1486 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
S‚àë¬™A¬™aSize
; index++)

1488 *
buff
 = *(
u√∂t16_t
 *)
deviÀöadd¬™ss
;

1489 
buff
++;

1493 
num‚Ä¢¬®√≥¬™¬®√≥d
++;

1496 
nb‚Ä¢¬®e
--;

1499 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

1503 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1506 
	`__HAL_UNLOCK
(
h¬´nd
);

1510  
HAL_ERROR
;

1513  
HAL_OK
;

1514 
	}
}

1525 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_Wr√¥e_S‚àë¬™A¬™a_8b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

1526 
u√∂t8_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aTowr√¥e
)

1528 
u√∂t32_t
 
√∂dex
;

1529 
u√∂t32_t
 
tick¬∞¬®t
;

1530 
u√∂t32_t
 
deviÀöadd¬™ss
;

1531 
u√∂t32_t
 
num‚Ä¢¬®√≥¬™awr√¥√£n
 = 0;

1532 
u√∂t32_t
 
¬´ndadd¬™ss
;

1533 
u√∂t32_t
 
cÔ¨Åum¬´dd¬™ss
;

1534 
u√∂t32_t
 
nb‚Ä¢¬®e
 = 
NumS‚àë¬™A¬™aTowr√¥e
;

1535 
u√∂t8_t
 *
buff
 = 
pBuf‚Äûr
;

1538 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

1540  
HAL_BUSY
;

1542 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1545 
	`__HAL_LOCK
(
h¬´nd
);

1548 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

1551 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

1553 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

1557 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

1561 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

1564 
cÔ¨Åum¬´dd¬™ss
 = 
	`COLUMN_ADDRESS
(
h¬´nd
);

1567 (
nb‚Ä¢¬®e
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

1570 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

1573 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_C
;

1574 
	`__DSB
();

1575 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE0
;

1576 
	`__DSB
();

1578 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1580 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1581 
	`__DSB
();

1582 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1583 
	`__DSB
();

1584 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1585 
	`__DSB
();

1589 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1590 
	`__DSB
();

1591 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1592 
	`__DSB
();

1593 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1594 
	`__DSB
();

1595 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1596 
	`__DSB
();

1602 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

1603 
	`__DSB
();

1604 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE0
;

1605 
	`__DSB
();

1607 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1609 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1610 
	`__DSB
();

1611 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1612 
	`__DSB
();

1613 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1614 
	`__DSB
();

1615 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1616 
	`__DSB
();

1620 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1621 
	`__DSB
();

1622 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1623 
	`__DSB
();

1624 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1625 
	`__DSB
();

1626 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1627 
	`__DSB
();

1628 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1629 
	`__DSB
();

1634 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
S‚àë¬™A¬™aSize
; index++)

1636 *(
__IO
 
u√∂t8_t
 *)
deviÀöadd¬™ss
 = *
buff
;

1637 
buff
++;

1638 
	`__DSB
();

1641 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE_TRUE1
;

1642 
	`__DSB
();

1645 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1648 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

1650 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

1653 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

1656 
	`__HAL_UNLOCK
(
h¬´nd
);

1658  
HAL_TIMEOUT
;

1663 
num‚Ä¢¬®√≥¬™awr√¥√£n
++;

1666 
nb‚Ä¢¬®e
--;

1669 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

1673 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1676 
	`__HAL_UNLOCK
(
h¬´nd
);

1680  
HAL_ERROR
;

1683  
HAL_OK
;

1684 
	}
}

1695 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_Wr√¥e_S‚àë¬™A¬™a_16b
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
,

1696 
u√∂t16_t
 *
pBuf‚Äûr
, 
u√∂t32_t
 
NumS‚àë¬™A¬™aTowr√¥e
)

1698 
u√∂t32_t
 
√∂dex
;

1699 
u√∂t32_t
 
tick¬∞¬®t
;

1700 
u√∂t32_t
 
deviÀöadd¬™ss
;

1701 
u√∂t32_t
 
num‚Ä¢¬®√≥¬™awr√¥√£n
 = 0;

1702 
u√∂t32_t
 
¬´ndadd¬™ss
;

1703 
u√∂t32_t
 
cÔ¨Åum¬´dd¬™ss
;

1704 
u√∂t32_t
 
nb‚Ä¢¬®e
 = 
NumS‚àë¬™A¬™aTowr√¥e
;

1705 
u√∂t16_t
 *
buff
 = 
pBuf‚Äûr
;

1708 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

1710  
HAL_BUSY
;

1712 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1715 
	`__HAL_LOCK
(
h¬´nd
);

1718 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

1721 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

1723 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

1727 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

1731 
¬´ndadd¬™ss
 = 
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
);

1734 
cÔ¨Åum¬´dd¬™ss
 = (
u√∂t32_t
)(
	`COLUMN_ADDRESS
(
h¬´nd
) * 2U);

1737 (
nb‚Ä¢¬®e
 !Ô£ø0U√ã&& (
¬´ndadd¬™ss
 < ((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
))))

1740 i‚Ä°((
h¬´nd
->
C‚ÅÑfig
.
PageSize
) <= 512U)

1743 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_C
;

1744 
	`__DSB
();

1745 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE0
;

1746 
	`__DSB
();

1748 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1750 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1751 
	`__DSB
();

1752 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1753 
	`__DSB
();

1754 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1755 
	`__DSB
();

1759 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)) = 0x00U;

1760 
	`__DSB
();

1761 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1762 
	`__DSB
();

1763 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1764 
	`__DSB
();

1765 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1766 
	`__DSB
();

1772 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_AREA_A
;

1773 
	`__DSB
();

1774 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE0
;

1775 
	`__DSB
();

1777 i‚Ä°(((
h¬´nd
->
C‚ÅÑfig
.
BlockSize
√ã* (h¬´nd->C‚ÅÑfig.
BlockNbr
)) <= 65535U)

1779 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1780 
	`__DSB
();

1781 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1782 
	`__DSB
();

1783 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1784 
	`__DSB
();

1785 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1786 
	`__DSB
();

1790 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_1ST_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1791 
	`__DSB
();

1792 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`COLUMN_2ND_CYCLE
(
cÔ¨Åum¬´dd¬™ss
);

1793 
	`__DSB
();

1794 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
¬´ndadd¬™ss
);

1795 
	`__DSB
();

1796 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
¬´ndadd¬™ss
);

1797 
	`__DSB
();

1798 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
¬´ndadd¬™ss
);

1799 
	`__DSB
();

1804 
√∂dex
 = 0U; index < 
h¬´nd
->
C‚ÅÑfig
.
S‚àë¬™A¬™aSize
; index++)

1806 *(
__IO
 
u√∂t16_t
 *)
deviÀöadd¬™ss
 = *
buff
;

1807 
buff
++;

1808 
	`__DSB
();

1811 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_WRITE_TRUE1
;

1812 
	`__DSB
();

1815 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1818 
	`HAL_NAND_R√≥d_S√®tus
(
h¬´nd
√ã!Ô£ø
NAND_READY
)

1820 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
NAND_WRITE_TIMEOUT
)

1823 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_ERROR
;

1826 
	`__HAL_UNLOCK
(
h¬´nd
);

1828  
HAL_TIMEOUT
;

1833 
num‚Ä¢¬®√≥¬™awr√¥√£n
++;

1836 
nb‚Ä¢¬®e
--;

1839 
¬´ndadd¬™ss
 = (
u√∂t32_t
)(nandaddress + 1U);

1843 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1846 
	`__HAL_UNLOCK
(
h¬´nd
);

1850  
HAL_ERROR
;

1853  
HAL_OK
;

1854 
	}
}

1863 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_E√∏¬£_Block
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
)

1865 
u√∂t32_t
 
deviÀöadd¬™ss
;

1868 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

1870  
HAL_BUSY
;

1872 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1875 
	`__HAL_LOCK
(
h¬´nd
);

1878 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

1881 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

1883 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

1887 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

1891 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_ERASE0
;

1892 
	`__DSB
();

1893 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_1ST_CYCLE
(
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
));

1894 
	`__DSB
();

1895 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_2ND_CYCLE
(
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
));

1896 
	`__DSB
();

1897 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
ADDR_AREA
)√ãÔ£ø
	`ADDR_3RD_CYCLE
(
	`ARRAY_ADDRESS
(
pAdd¬™ss
, 
h¬´nd
));

1898 
	`__DSB
();

1900 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_ERASE1
;

1901 
	`__DSB
();

1904 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

1907 
	`__HAL_UNLOCK
(
h¬´nd
);

1911  
HAL_ERROR
;

1914  
HAL_OK
;

1915 
	}
}

1926 
u√∂t32_t
 
	$HAL_NAND_Add¬™ss_Inc
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
NAND_Add¬™ssTy‚â•Def
 *
pAdd¬™ss
)

1928 
u√∂t32_t
 
¬∞¬©us
 = 
NAND_VALID_ADDRESS
;

1931 
pAdd¬™ss
->
Page
++;

1934 i‚Ä°(
pAdd¬™ss
->
Page
 =Ô£ø
h¬´nd
->
C‚ÅÑfig
.
BlockSize
)

1936 
pAdd¬™ss
->
Page
 = 0;

1937 
pAdd¬™ss
->
Block
++;

1939 i‚Ä°(
pAdd¬™ss
->
Block
 =Ô£ø
h¬´nd
->
C‚ÅÑfig
.
P≈ì‚àöSize
)

1941 
pAdd¬™ss
->
Block
 = 0;

1942 
pAdd¬™ss
->
P≈ì‚àö
++;

1944 i‚Ä°(
pAdd¬™ss
->
P≈ì‚àö
 =Ô£ø(
h¬´nd
->
C‚ÅÑfig
.
P≈ì‚àöNbr
))

1946 
¬∞¬©us
 = 
NAND_INVALID_ADDRESS
;

1951  (
¬∞¬©us
);

1952 
	}
}

1954 #i‚Ä°(
USE_HAL_NAND_REGISTER_CALLBACKS
 == 1)

1967 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_Regi¬∞√ÆC√Ülback
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
HAL_NAND_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

1968 
pNAND_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

1970 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1972 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

1974  
HAL_ERROR
;

1978 
	`__HAL_LOCK
(
h¬´nd
);

1980 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

1982 
C√ÜlbackId
)

1984 
HAL_NAND_MSP_INIT_CB_ID
 :

1985 
h¬´nd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1987 
HAL_NAND_MSP_DEINIT_CB_ID
 :

1988 
h¬´nd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1990 
HAL_NAND_IT_CB_ID
 :

1991 
h¬´nd
->
ItC√Ülback
 = 
pC√Ülback
;

1995 
¬∞¬©us
 = 
HAL_ERROR
;

1999 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_RESET
)

2001 
C√ÜlbackId
)

2003 
HAL_NAND_MSP_INIT_CB_ID
 :

2004 
h¬´nd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

2006 
HAL_NAND_MSP_DEINIT_CB_ID
 :

2007 
h¬´nd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

2011 
¬∞¬©us
 = 
HAL_ERROR
;

2018 
¬∞¬©us
 = 
HAL_ERROR
;

2022 
	`__HAL_UNLOCK
(
h¬´nd
);

2023  
¬∞¬©us
;

2024 
	}
}

2037 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_UnRegi¬∞√ÆC√Ülback
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
HAL_NAND_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
)

2039 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

2042 
	`__HAL_LOCK
(
h¬´nd
);

2044 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

2046 
C√ÜlbackId
)

2048 
HAL_NAND_MSP_INIT_CB_ID
 :

2049 
h¬´nd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_NAND_M‚Ä¢In√¥
;

2051 
HAL_NAND_MSP_DEINIT_CB_ID
 :

2052 
h¬´nd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_NAND_M‚Ä¢DeIn√¥
;

2054 
HAL_NAND_IT_CB_ID
 :

2055 
h¬´nd
->
ItC√Ülback
 = 
HAL_NAND_ITC√Ülback
;

2059 
¬∞¬©us
 = 
HAL_ERROR
;

2063 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_RESET
)

2065 
C√ÜlbackId
)

2067 
HAL_NAND_MSP_INIT_CB_ID
 :

2068 
h¬´nd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_NAND_M‚Ä¢In√¥
;

2070 
HAL_NAND_MSP_DEINIT_CB_ID
 :

2071 
h¬´nd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_NAND_M‚Ä¢DeIn√¥
;

2075 
¬∞¬©us
 = 
HAL_ERROR
;

2082 
¬∞¬©us
 = 
HAL_ERROR
;

2086 
	`__HAL_UNLOCK
(
h¬´nd
);

2087  
¬∞¬©us
;

2088 
	}
}

2117 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_ECC_E¬´b√Ä
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

2120 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

2122  
HAL_BUSY
;

2124 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

2127 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

2130 ()
	`FSMC_NAND_ECC_E¬´b√Ä
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
);

2133 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

2137  
HAL_ERROR
;

2140  
HAL_OK
;

2141 
	}
}

2149 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_ECC_Di√üb√Ä
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

2152 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

2154  
HAL_BUSY
;

2156 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

2159 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

2162 ()
	`FSMC_NAND_ECC_Di√üb√Ä
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
);

2165 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

2169  
HAL_ERROR
;

2172  
HAL_OK
;

2173 
	}
}

2183 
HAL_S√®tusTy‚â•Def
 
	$HAL_NAND_G√´ECC
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
, 
u√∂t32_t
 *
ECCv√Ü
, u√∂t32_√†
Timeout
)

2185 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

2188 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_BUSY
)

2190  
HAL_BUSY
;

2192 i‚Ä°(
h¬´nd
->
S√®√£
 =Ô£ø
HAL_NAND_STATE_READY
)

2195 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_BUSY
;

2198 
¬∞¬©us
 = 
	`FSMC_NAND_G√´ECC
(
h¬´nd
->
In¬∞‚Ñ¢Àö
, 
ECCv√Ü
, h¬´nd->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
, 
Timeout
);

2201 
h¬´nd
->
S√®√£
 = 
HAL_NAND_STATE_READY
;

2205  
HAL_ERROR
;

2208  
¬∞¬©us
;

2209 
	}
}

2237 
HAL_NAND_S√®√£Ty‚â•Def
 
	$HAL_NAND_G√´S√®√£
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

2239  
h¬´nd
->
S√®√£
;

2240 
	}
}

2248 
u√∂t32_t
 
	$HAL_NAND_R√≥d_S√®tus
(
NAND_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬´nd
)

2250 
u√∂t32_t
 
d¬©a
;

2251 
u√∂t32_t
 
deviÀöadd¬™ss
;

2252 
	`UNUSED
(
h¬´nd
);

2255 i‚Ä°(
h¬´nd
->
In√¥
.
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

2257 
deviÀöadd¬™ss
 = 
NAND_DEVICE1
;

2261 
deviÀöadd¬™ss
 = 
NAND_DEVICE2
;

2265 *(
__IO
 
u√∂t8_t
 *)((
u√∂t32_t
)(
deviÀöadd¬™ss
 | 
CMD_AREA
)√ãÔ£ø
NAND_CMD_STATUS
;

2268 
d¬©a
 = *(
__IO
 
u√∂t8_t
 *)
deviÀöadd¬™ss
;

2271 i‚Ä°((
d¬©a
 & 
NAND_ERROR
) == NAND_ERROR)

2273  
NAND_ERROR
;

2275 i‚Ä°((
d¬©a
 & 
NAND_READY
) == NAND_READY)

2277  
NAND_READY
;

2281  
NAND_BUSY
;

2283 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_nor.c

107 
	~"¬∞m32f1xx_h√Ü.h
"

109 #i‚Ä°
def√∂ed
 
FSMC_BANK1


115 #ifde‚Ä°
HAL_NOR_MODULE_ENABLED


130 
	#NOR_CMD_ADDRESS_FIRST
 (
u√∂t16_t
)0x0555

	)

131 
	#NOR_CMD_ADDRESS_FIRST_CFI
 (
u√∂t16_t
)0x0055

	)

132 
	#NOR_CMD_ADDRESS_SECOND
 (
u√∂t16_t
)0x02AA

	)

133 
	#NOR_CMD_ADDRESS_THIRD
 (
u√∂t16_t
)0x0555

	)

134 
	#NOR_CMD_ADDRESS_FOURTH
 (
u√∂t16_t
)0x0555

	)

135 
	#NOR_CMD_ADDRESS_FIFTH
 (
u√∂t16_t
)0x02AA

	)

136 
	#NOR_CMD_ADDRESS_SIXTH
 (
u√∂t16_t
)0x0555

	)

139 
	#NOR_CMD_DATA_READ_RESET
 (
u√∂t16_t
)0x00F0

	)

140 
	#NOR_CMD_DATA_FIRST
 (
u√∂t16_t
)0x00AA

	)

141 
	#NOR_CMD_DATA_SECOND
 (
u√∂t16_t
)0x0055

	)

142 
	#NOR_CMD_DATA_AUTO_SELECT
 (
u√∂t16_t
)0x0090

	)

143 
	#NOR_CMD_DATA_PROGRAM
 (
u√∂t16_t
)0x00A0

	)

144 
	#NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD
 (
u√∂t16_t
)0x0080

	)

145 
	#NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH
 (
u√∂t16_t
)0x00AA

	)

146 
	#NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH
 (
u√∂t16_t
)0x0055

	)

147 
	#NOR_CMD_DATA_CHIP_ERASE
 (
u√∂t16_t
)0x0010

	)

148 
	#NOR_CMD_DATA_CFI
 (
u√∂t16_t
)0x0098

	)

150 
	#NOR_CMD_DATA_BUFFER_AND_PROG
 (
u√∂t8_t
)0x25

	)

151 
	#NOR_CMD_DATA_BUFFER_AND_PROG_CONFIRM
 (
u√∂t8_t
)0x29

	)

152 
	#NOR_CMD_DATA_BLOCK_ERASE
 (
u√∂t8_t
)0x30

	)

154 
	#NOR_CMD_READ_ARRAY
 (
u√∂t16_t
)0x00FF

	)

155 
	#NOR_CMD_WORD_PROGRAM
 (
u√∂t16_t
)0x0040

	)

156 
	#NOR_CMD_BUFFERED_PROGRAM
 (
u√∂t16_t
)0x00E8

	)

157 
	#NOR_CMD_CONFIRM
 (
u√∂t16_t
)0x00D0

	)

158 
	#NOR_CMD_BLOCK_ERASE
 (
u√∂t16_t
)0x0020

	)

159 
	#NOR_CMD_BLOCK_UNLOCK
 (
u√∂t16_t
)0x0060

	)

160 
	#NOR_CMD_READ_STATUS_REG
 (
u√∂t16_t
)0x0070

	)

161 
	#NOR_CMD_CLEAR_STATUS_REG
 (
u√∂t16_t
)0x0050

	)

164 
	#NOR_MASK_STATUS_DQ4
 (
u√∂t16_t
)0x0010

	)

165 
	#NOR_MASK_STATUS_DQ5
 (
u√∂t16_t
)0x0020

	)

166 
	#NOR_MASK_STATUS_DQ6
 (
u√∂t16_t
)0x0040

	)

167 
	#NOR_MASK_STATUS_DQ7
 (
u√∂t16_t
)0x0080

	)

170 
	#NOR_ADDRESS_COMMAND_SET
 (
u√∂t16_t
)0x0013

	)

173 
	#NOR_INTEL_SHARP_EXT_COMMAND_SET
 (
u√∂t16_t
)0x0001

	)

174 
	#NOR_AMD_FUJITSU_COMMAND_SET
 (
u√∂t16_t
)0x0002

	)

175 
	#NOR_INTEL_STANDARD_COMMAND_SET
 (
u√∂t16_t
)0x0003

	)

176 
	#NOR_AMD_FUJITSU_EXT_COMMAND_SET
 (
u√∂t16_t
)0x0004

	)

177 
	#NOR_WINDBOND_STANDARD_COMMAND_SET
 (
u√∂t16_t
)0x0006

	)

178 
	#NOR_MITSUBISHI_STANDARD_COMMAND_SET
 (
u√∂t16_t
)0x0100

	)

179 
	#NOR_MITSUBISHI_EXT_COMMAND_SET
 (
u√∂t16_t
)0x0101

	)

180 
	#NOR_PAGE_WRITE_COMMAND_SET
 (
u√∂t16_t
)0x0102

	)

181 
	#NOR_INTEL_PERFORMANCE_COMMAND_SET
 (
u√∂t16_t
)0x0200

	)

182 
	#NOR_INTEL_DATA_COMMAND_SET
 (
u√∂t16_t
)0x0210

	)

194 
u√∂t32_t
 
	guwNORMem‚ÄπyD¬©aWidth
 = 
NOR_MEMORY_8B
;

229 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_In√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
,

230 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
ExtTim√∂g
)

232 
u√∂t32_t
 
deviÀöadd¬™ss
;

235 i‚Ä°(
hn‚Äπ
 =Ô£ø
NULL
)

237  
HAL_ERROR
;

240 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_RESET
)

243 
hn‚Äπ
->
Lock
 = 
HAL_UNLOCKED
;

245 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

246 i‚Ä°(
hn‚Äπ
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

248 
hn‚Äπ
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_NOR_M‚Ä¢In√¥
;

252 
hn‚Äπ
->
	`M‚Ä¢In√¥C√Ülback
(hnor);

255 
	`HAL_NOR_M‚Ä¢In√¥
(
hn‚Äπ
);

260 ()
	`FSMC_NORSRAM_In√¥
(
hn‚Äπ
->
In¬∞‚Ñ¢Àö
, &(hn‚Äπ->
In√¥
));

263 ()
	`FSMC_NORSRAM_Tim√∂g_In√¥
(
hn‚Äπ
->
In¬∞‚Ñ¢Àö
, 
Tim√∂g
, hn‚Äπ->
In√¥
.
NSB‚Ñ¢k
);

266 ()
	`FSMC_NORSRAM_Ex√£nded_Tim√∂g_In√¥
(
hn‚Äπ
->
Ex√£nded
, 
ExtTim√∂g
, hn‚Äπ->
In√¥
.
NSB‚Ñ¢k
, hn‚Äπ->In√¥.
Ex√£ndedMode
);

269 
	`__FSMC_NORSRAM_ENABLE
(
hn‚Äπ
->
In¬∞‚Ñ¢Àö
, hn‚Äπ->
In√¥
.
NSB‚Ñ¢k
);

272 i‚Ä°(
hn‚Äπ
->
In√¥
.
Mem‚ÄπyD¬©aWidth
 =Ô£ø
FSMC_NORSRAM_MEM_BUS_WIDTH_8
)

274 
uwNORMem‚ÄπyD¬©aWidth
 = 
NOR_MEMORY_8B
;

278 
uwNORMem‚ÄπyD¬©aWidth
 = 
NOR_MEMORY_16B
;

282 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_READY
;

285 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

287 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

289 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

291 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

293 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

295 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

299 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

303 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST_CFI
), 
NOR_CMD_DATA_CFI
);

304 
hn‚Äπ
->
Comm‚Ñ¢dS√´
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_ADDRESS_COMMAND_SET
);

306  
	`HAL_NOR_R√´u‚à´ToR√≥dMode
(
hn‚Äπ
);

307 
	}
}

315 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_DeIn√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

317 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

318 i‚Ä°(
hn‚Äπ
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

320 
hn‚Äπ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_NOR_M‚Ä¢DeIn√¥
;

324 
hn‚Äπ
->
	`M‚Ä¢DeIn√¥C√Ülback
(hnor);

327 
	`HAL_NOR_M‚Ä¢DeIn√¥
(
hn‚Äπ
);

331 ()
	`FSMC_NORSRAM_DeIn√¥
(
hn‚Äπ
->
In¬∞‚Ñ¢Àö
, hn‚Äπ->
Ex√£nded
, hn‚Äπ->
In√¥
.
NSB‚Ñ¢k
);

334 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_RESET
;

337 
	`__HAL_UNLOCK
(
hn‚Äπ
);

339  
HAL_OK
;

340 
	}
}

348 
__w√≥k
 
	$HAL_NOR_M‚Ä¢In√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

351 
	`UNUSED
(
hn‚Äπ
);

356 
	}
}

364 
__w√≥k
 
	$HAL_NOR_M‚Ä¢DeIn√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

367 
	`UNUSED
(
hn‚Äπ
);

372 
	}
}

381 
__w√≥k
 
	$HAL_NOR_M‚Ä¢Wa√¥
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
Timeout
)

384 
	`UNUSED
(
hn‚Äπ
);

385 
	`UNUSED
(
Timeout
);

390 
	}
}

417 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_R√≥d_ID
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
NOR_IDTy‚â•Def
 *
pNOR_ID
)

419 
u√∂t32_t
 
deviÀöadd¬™ss
;

420 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

421 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

424 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

425 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_BUSY
)

427  
HAL_BUSY
;

429 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

432 
	`__HAL_LOCK
(
hn‚Äπ
);

435 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

438 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

440 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

442 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

444 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

446 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

448 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

452 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

456 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

458 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

459 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

460 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_AUTO_SELECT
);

462 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

464 
	`NOR_WRITE
(
deviÀöadd¬™ss
, 
NOR_CMD_DATA_AUTO_SELECT
);

469 
¬∞¬©us
 = 
HAL_ERROR
;

472 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_ERROR
)

475 
pNOR_ID
->
M‚Ñ¢u√ÅÀòu¬™r_Code
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
MC_ADDRESS
);

476 
pNOR_ID
->
DeviÀö_Code1
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
DEVICE_CODE1_ADDR
);

477 
pNOR_ID
->
DeviÀö_Code2
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
DEVICE_CODE2_ADDR
);

478 
pNOR_ID
->
DeviÀö_Code3
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
DEVICE_CODE3_ADDR
);

482 
hn‚Äπ
->
S√®√£
 = 
¬∞¬©e
;

485 
	`__HAL_UNLOCK
(
hn‚Äπ
);

489  
HAL_ERROR
;

492  
¬∞¬©us
;

493 
	}
}

501 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_R√´u‚à´ToR√≥dMode
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

503 
u√∂t32_t
 
deviÀöadd¬™ss
;

504 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

505 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

508 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

509 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_BUSY
)

511  
HAL_BUSY
;

513 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

516 
	`__HAL_LOCK
(
hn‚Äπ
);

519 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

522 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

524 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

526 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

528 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

530 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

532 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

536 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

539 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

541 
	`NOR_WRITE
(
deviÀöadd¬™ss
, 
NOR_CMD_DATA_READ_RESET
);

543 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

545 
	`NOR_WRITE
(
deviÀöadd¬™ss
, 
NOR_CMD_READ_ARRAY
);

550 
¬∞¬©us
 = 
HAL_ERROR
;

554 
hn‚Äπ
->
S√®√£
 = 
¬∞¬©e
;

557 
	`__HAL_UNLOCK
(
hn‚Äπ
);

561  
HAL_ERROR
;

564  
¬∞¬©us
;

565 
	}
}

575 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_R√≥d
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
)

577 
u√∂t32_t
 
deviÀöadd¬™ss
;

578 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

579 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

582 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

583 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_BUSY
)

585  
HAL_BUSY
;

587 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

590 
	`__HAL_LOCK
(
hn‚Äπ
);

593 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

596 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

598 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

600 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

602 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

604 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

606 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

610 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

614 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

616 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

617 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

618 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_READ_RESET
);

620 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

622 
	`NOR_WRITE
(
pAdd¬™ss
, 
NOR_CMD_READ_ARRAY
);

627 
¬∞¬©us
 = 
HAL_ERROR
;

630 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_ERROR
)

633 *
pD¬©a
 = (
u√∂t16_t
)(*(
__IO
 
u√∂t32_t
 *)
pAdd¬™ss
);

637 
hn‚Äπ
->
S√®√£
 = 
¬∞¬©e
;

640 
	`__HAL_UNLOCK
(
hn‚Äπ
);

644  
HAL_ERROR
;

647  
¬∞¬©us
;

648 
	}
}

658 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_Prog√∏m
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
)

660 
u√∂t32_t
 
deviÀöadd¬™ss
;

661 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

664 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_BUSY
)

666  
HAL_BUSY
;

668 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_READY
)

671 
	`__HAL_LOCK
(
hn‚Äπ
);

674 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

677 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

679 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

681 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

683 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

685 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

687 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

691 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

695 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

697 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

698 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

699 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_PROGRAM
);

701 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

703 
	`NOR_WRITE
(
pAdd¬™ss
, 
NOR_CMD_WORD_PROGRAM
);

708 
¬∞¬©us
 = 
HAL_ERROR
;

711 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_ERROR
)

714 
	`NOR_WRITE
(
pAdd¬™ss
, *
pD¬©a
);

718 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_READY
;

721 
	`__HAL_UNLOCK
(
hn‚Äπ
);

725  
HAL_ERROR
;

728  
¬∞¬©us
;

729 
	}
}

740 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_R√≥dBuf‚Äûr
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
uwAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
,

741 
u√∂t32_t
 
uwBuf‚ÄûrSize
)

743 
u√∂t32_t
 
deviÀöadd¬™ss
;

744 
u√∂t32_t
 
size
 = 
uwBuf‚ÄûrSize
;

745 
u√∂t32_t
 
add¬™ss
 = 
uwAdd¬™ss
;

746 
u√∂t16_t
 *
d¬©a
 = 
pD¬©a
;

747 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

748 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

751 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

752 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_BUSY
)

754  
HAL_BUSY
;

756 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

759 
	`__HAL_LOCK
(
hn‚Äπ
);

762 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

765 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

767 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

769 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

771 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

773 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

775 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

779 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

783 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

785 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

786 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

787 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_READ_RESET
);

789 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

791 
	`NOR_WRITE
(
deviÀöadd¬™ss
, 
NOR_CMD_READ_ARRAY
);

796 
¬∞¬©us
 = 
HAL_ERROR
;

799 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_ERROR
)

802 
size
 > 0U)

804 *
d¬©a
 = *(
__IO
 
u√∂t16_t
 *)
add¬™ss
;

805 
d¬©a
++;

806 
add¬™ss
 += 2U;

807 
size
--;

812 
hn‚Äπ
->
S√®√£
 = 
¬∞¬©e
;

815 
	`__HAL_UNLOCK
(
hn‚Äπ
);

819  
HAL_ERROR
;

822  
¬∞¬©us
;

823 
	}
}

834 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_Prog√∏mBuf‚Äûr
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
uwAdd¬™ss
, 
u√∂t16_t
 *
pD¬©a
,

835 
u√∂t32_t
 
uwBuf‚ÄûrSize
)

837 
u√∂t16_t
 *
p_cu¬∫√≠√®dd¬™ss
;

838 c‚ÅÑ¬∞ 
u√∂t16_t
 *
p_√≠dadd¬™ss
;

839 
u√∂t16_t
 *
d¬©a
 = 
pD¬©a
;

840 
u√∂t32_t
 
deviÀöadd¬™ss
;

841 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

844 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_BUSY
)

846  
HAL_BUSY
;

848 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_READY
)

851 
	`__HAL_LOCK
(
hn‚Äπ
);

854 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

857 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

859 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

861 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

863 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

865 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

867 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

871 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

875 
p_cu¬∫√≠√®dd¬™ss
 = (
u√∂t16_t
 *)(
deviÀöadd¬™ss
 + 
uwAdd¬™ss
);

876 
p_√≠dadd¬™ss
 = (
u√∂t16_t
 *)(
deviÀöadd¬™ss
 + 
uwAdd¬™ss
 + (2U * (
uwBuf‚ÄûrSize
 - 1U)));

878 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

881 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

882 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

885 
	`NOR_WRITE
((
deviÀöadd¬™ss
 + 
uwAdd¬™ss
), 
NOR_CMD_DATA_BUFFER_AND_PROG
);

886 
	`NOR_WRITE
((
deviÀöadd¬™ss
 + 
uwAdd¬™ss
), (
u√∂t16_t
)(
uwBuf‚ÄûrSize
 - 1U));

888 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

891 
	`NOR_WRITE
((
deviÀöadd¬™ss
 + 
uwAdd¬™ss
), 
NOR_CMD_BUFFERED_PROGRAM
);

892 
	`NOR_WRITE
((
deviÀöadd¬™ss
 + 
uwAdd¬™ss
), (
u√∂t16_t
)(
uwBuf‚ÄûrSize
 - 1U));

897 
¬∞¬©us
 = 
HAL_ERROR
;

900 i‚Ä°(
¬∞¬©us
 !Ô£ø
HAL_ERROR
)

903 
p_cu¬∫√≠√®dd¬™ss
 <Ô£ø
p_√≠dadd¬™ss
)

905 
	`NOR_WRITE
(
p_cu¬∫√≠√®dd¬™ss
, *
d¬©a
);

907 
d¬©a
++;

908 
p_cu¬∫√≠√®dd¬™ss
 ++;

911 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

913 
	`NOR_WRITE
((
deviÀöadd¬™ss
 + 
uwAdd¬™ss
), 
NOR_CMD_DATA_BUFFER_AND_PROG_CONFIRM
);

917 
	`NOR_WRITE
((
deviÀöadd¬™ss
 + 
uwAdd¬™ss
), 
NOR_CMD_CONFIRM
);

922 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_READY
;

925 
	`__HAL_UNLOCK
(
hn‚Äπ
);

929  
HAL_ERROR
;

932  
¬∞¬©us
;

934 
	}
}

944 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_E√∏¬£_Block
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
BlockAdd¬™ss
, u√∂t32_√†
Add¬™ss
)

946 
u√∂t32_t
 
deviÀöadd¬™ss
;

947 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

950 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_BUSY
)

952  
HAL_BUSY
;

954 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_READY
)

957 
	`__HAL_LOCK
(
hn‚Äπ
);

960 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

963 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

965 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

967 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

969 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

971 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

973 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

977 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

981 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

983 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

984 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

985 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_THIRD
),

986 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD
);

987 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FOURTH
),

988 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH
);

989 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIFTH
),

990 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH
);

991 
	`NOR_WRITE
((
u√∂t32_t
)(
BlockAdd¬™ss
 + 
Add¬™ss
), 
NOR_CMD_DATA_BLOCK_ERASE
);

993 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

995 
	`NOR_WRITE
((
BlockAdd¬™ss
 + 
Add¬™ss
), 
NOR_CMD_BLOCK_UNLOCK
);

996 
	`NOR_WRITE
((
BlockAdd¬™ss
 + 
Add¬™ss
), 
NOR_CMD_CONFIRM
);

997 
	`NOR_WRITE
((
BlockAdd¬™ss
 + 
Add¬™ss
), 
NOR_CMD_BLOCK_ERASE
);

998 
	`NOR_WRITE
((
BlockAdd¬™ss
 + 
Add¬™ss
), 
NOR_CMD_CONFIRM
);

1003 
¬∞¬©us
 = 
HAL_ERROR
;

1007 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_READY
;

1010 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1014  
HAL_ERROR
;

1017  
¬∞¬©us
;

1019 
	}
}

1028 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_E√∏¬£_Ch√π
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
Add¬™ss
)

1030 
u√∂t32_t
 
deviÀöadd¬™ss
;

1031 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1032 
	`UNUSED
(
Add¬™ss
);

1035 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_BUSY
)

1037  
HAL_BUSY
;

1039 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_READY
)

1042 
	`__HAL_LOCK
(
hn‚Äπ
);

1045 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

1048 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

1050 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

1052 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

1054 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

1056 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

1058 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

1062 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

1066 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

1068 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

1069 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

1070 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_THIRD
),

1071 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD
);

1072 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FOURTH
),

1073 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH
);

1074 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIFTH
),

1075 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH
);

1076 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_SIXTH
), 
NOR_CMD_DATA_CHIP_ERASE
);

1081 
¬∞¬©us
 = 
HAL_ERROR
;

1085 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_READY
;

1088 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1092  
HAL_ERROR
;

1095  
¬∞¬©us
;

1096 
	}
}

1105 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_R√≥d_CFI
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
NOR_CFITy‚â•Def
 *
pNOR_CFI
)

1107 
u√∂t32_t
 
deviÀöadd¬™ss
;

1108 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

1111 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

1112 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_BUSY
)

1114  
HAL_BUSY
;

1116 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

1119 
	`__HAL_LOCK
(
hn‚Äπ
);

1122 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

1125 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

1127 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS1
;

1129 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK2
)

1131 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS2
;

1133 i‚Ä°(
hn‚Äπ
->
In√¥
.
NSB‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK3
)

1135 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS3
;

1139 
deviÀöadd¬™ss
 = 
NOR_MEMORY_ADRESS4
;

1143 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
NOR_CMD_ADDRESS_FIRST_CFI
), 
NOR_CMD_DATA_CFI
);

1146 
pNOR_CFI
->
CFI_1
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
CFI1_ADDRESS
);

1147 
pNOR_CFI
->
CFI_2
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
CFI2_ADDRESS
);

1148 
pNOR_CFI
->
CFI_3
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
CFI3_ADDRESS
);

1149 
pNOR_CFI
->
CFI_4
 = *(
__IO
 
u√∂t16_t
 *√ã
	`NOR_ADDR_SHIFT
(
deviÀöadd¬™ss
, 
uwNORMem‚ÄπyD¬©aWidth
, 
CFI4_ADDRESS
);

1152 
hn‚Äπ
->
S√®√£
 = 
¬∞¬©e
;

1155 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1159  
HAL_ERROR
;

1162  
HAL_OK
;

1163 
	}
}

1165 #i‚Ä°(
USE_HAL_NOR_REGISTER_CALLBACKS
 == 1)

1177 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_Regi¬∞√ÆC√Ülback
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
HAL_NOR_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

1178 
pNOR_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

1180 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1181 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

1183 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

1185  
HAL_ERROR
;

1189 
	`__HAL_LOCK
(
hn‚Äπ
);

1191 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

1192 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_RESET
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

1194 
C√ÜlbackId
)

1196 
HAL_NOR_MSP_INIT_CB_ID
 :

1197 
hn‚Äπ
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1199 
HAL_NOR_MSP_DEINIT_CB_ID
 :

1200 
hn‚Äπ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1204 
¬∞¬©us
 = 
HAL_ERROR
;

1211 
¬∞¬©us
 = 
HAL_ERROR
;

1215 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1216  
¬∞¬©us
;

1217 
	}
}

1229 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_UnRegi¬∞√ÆC√Ülback
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
HAL_NOR_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
)

1231 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1232 
HAL_NOR_S√®√£Ty‚â•Def
 
¬∞¬©e
;

1235 
	`__HAL_LOCK
(
hn‚Äπ
);

1237 
¬∞¬©e
 = 
hn‚Äπ
->
S√®√£
;

1238 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_NOR_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_RESET
√ã|| (¬∞¬©√™=Ô£ø
HAL_NOR_STATE_PROTECTED
))

1240 
C√ÜlbackId
)

1242 
HAL_NOR_MSP_INIT_CB_ID
 :

1243 
hn‚Äπ
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_NOR_M‚Ä¢In√¥
;

1245 
HAL_NOR_MSP_DEINIT_CB_ID
 :

1246 
hn‚Äπ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_NOR_M‚Ä¢DeIn√¥
;

1250 
¬∞¬©us
 = 
HAL_ERROR
;

1257 
¬∞¬©us
 = 
HAL_ERROR
;

1261 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1262  
¬∞¬©us
;

1263 
	}
}

1291 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

1294 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_PROTECTED
)

1297 
	`__HAL_LOCK
(
hn‚Äπ
);

1300 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

1303 ()
	`FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
hn‚Äπ
->
In¬∞‚Ñ¢Àö
, hn‚Äπ->
In√¥
.
NSB‚Ñ¢k
);

1306 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_READY
;

1309 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1313  
HAL_ERROR
;

1316  
HAL_OK
;

1317 
	}
}

1325 
HAL_S√®tusTy‚â•Def
 
	$HAL_NOR_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

1328 i‚Ä°(
hn‚Äπ
->
S√®√£
 =Ô£ø
HAL_NOR_STATE_READY
)

1331 
	`__HAL_LOCK
(
hn‚Äπ
);

1334 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_BUSY
;

1337 ()
	`FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
hn‚Äπ
->
In¬∞‚Ñ¢Àö
, hn‚Äπ->
In√¥
.
NSB‚Ñ¢k
);

1340 
hn‚Äπ
->
S√®√£
 = 
HAL_NOR_STATE_PROTECTED
;

1343 
	`__HAL_UNLOCK
(
hn‚Äπ
);

1347  
HAL_ERROR
;

1350  
HAL_OK
;

1351 
	}
}

1378 
HAL_NOR_S√®√£Ty‚â•Def
 
	$HAL_NOR_G√´S√®√£
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
)

1380  
hn‚Äπ
->
S√®√£
;

1381 
	}
}

1392 
HAL_NOR_S√®tusTy‚â•Def
 
	$HAL_NOR_G√´S√®tus
(
NOR_H‚Ñ¢d√ÄTy‚â•Def
 *
hn‚Äπ
, 
u√∂t32_t
 
Add¬™ss
, u√∂t32_√†
Timeout
)

1394 
HAL_NOR_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_NOR_STATUS_ONGOING
;

1395 
u√∂t16_t
 
tmp¬ß1
;

1396 
u√∂t16_t
 
tmp¬ß2
;

1397 
u√∂t32_t
 
tick¬∞¬®t
;

1400 
	`HAL_NOR_M‚Ä¢Wa√¥
(
hn‚Äπ
, 
Timeout
);

1405 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1407 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_AMD_FUJITSU_COMMAND_SET
)

1409 (
¬∞¬©us
 !Ô£ø
HAL_NOR_STATUS_SUCCESS
√ã&& (¬∞¬©u‚Ä†!Ô£ø
HAL_NOR_STATUS_TIMEOUT
))

1412 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1414 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

1416 
¬∞¬©us
 = 
HAL_NOR_STATUS_TIMEOUT
;

1421 
tmp¬ß1
 = *(
__IO
 
u√∂t16_t
 *)
Add¬™ss
;

1422 
tmp¬ß2
 = *(
__IO
 
u√∂t16_t
 *)
Add¬™ss
;

1425 i‚Ä°((
tmp¬ß1
 & 
NOR_MASK_STATUS_DQ6
√ã=Ô£ø(
tmp¬ß2
 & NOR_MASK_STATUS_DQ6))

1427  
HAL_NOR_STATUS_SUCCESS
 ;

1430 i‚Ä°((
tmp¬ß1
 & 
NOR_MASK_STATUS_DQ5
) == NOR_MASK_STATUS_DQ5)

1432 
¬∞¬©us
 = 
HAL_NOR_STATUS_ONGOING
;

1435 
tmp¬ß1
 = *(
__IO
 
u√∂t16_t
 *)
Add¬™ss
;

1436 
tmp¬ß2
 = *(
__IO
 
u√∂t16_t
 *)
Add¬™ss
;

1439 i‚Ä°((
tmp¬ß1
 & 
NOR_MASK_STATUS_DQ6
√ã=Ô£ø(
tmp¬ß2
 & NOR_MASK_STATUS_DQ6))

1441  
HAL_NOR_STATUS_SUCCESS
;

1443 i‚Ä°((
tmp¬ß1
 & 
NOR_MASK_STATUS_DQ5
) == NOR_MASK_STATUS_DQ5)

1445  
HAL_NOR_STATUS_ERROR
;

1449 i‚Ä°(
hn‚Äπ
->
Comm‚Ñ¢dS√´
 =Ô£ø
NOR_INTEL_SHARP_EXT_COMMAND_SET
)

1453 
	`NOR_WRITE
(
Add¬™ss
, 
NOR_CMD_READ_STATUS_REG
);

1454 
tmp¬ß2
 = *(
__IO
 
u√∂t16_t
 *)(
Add¬™ss
);

1457 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1459 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

1461  
HAL_NOR_STATUS_TIMEOUT
;

1464 } (
tmp¬ß2
 & 
NOR_MASK_STATUS_DQ7
) == 0U);

1466 
	`NOR_WRITE
(
Add¬™ss
, 
NOR_CMD_READ_STATUS_REG
);

1467 
tmp¬ß1
 = *(
__IO
 
u√∂t16_t
 *)(
Add¬™ss
);

1468 i‚Ä°((
tmp¬ß1
 & (
NOR_MASK_STATUS_DQ5
 | 
NOR_MASK_STATUS_DQ4
)) != 0U)

1471 
	`NOR_WRITE
(
Add¬™ss
, 
NOR_CMD_READ_STATUS_REG
);

1472 
¬∞¬©us
 = 
HAL_NOR_STATUS_ERROR
;

1476 
¬∞¬©us
 = 
HAL_NOR_STATUS_SUCCESS
;

1482 
¬∞¬©us
 = 
HAL_NOR_STATUS_ERROR
;

1486  
¬∞¬©us
;

1487 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pccard.c

102 
	~"¬∞m32f1xx_h√Ü.h
"

104 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

110 #ifde‚Ä°
HAL_PCCARD_MODULE_ENABLED


122 
	#PCCARD_TIMEOUT_READ_ID
 0x0000FFFFU

	)

123 
	#PCCARD_TIMEOUT_READ_WRITE_SECTOR
 0x0000FFFFU

	)

124 
	#PCCARD_TIMEOUT_ERASE_SECTOR
 0x00000400U

	)

125 
	#PCCARD_TIMEOUT_STATUS
 0x01000000U

	)

127 
	#PCCARD_STATUS_OK
 (
u√∂t8_t
)0x58

	)

128 
	#PCCARD_STATUS_WRITE_OK
 (
u√∂t8_t
)0x50

	)

165 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_In√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
ComS‚àëÀöTim√∂g
,

166 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
A√¢S‚àëÀöTim√∂g
, FSMC_NAND_PCC_Tim√∂gTy‚â•De‚Ä°*
IOS‚àëÀöTim√∂g
)

169 i‚Ä°(
hpcÀárd
 =Ô£ø
NULL
)

171  
HAL_ERROR
;

174 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_RESET
)

177 
hpcÀárd
->
Lock
 = 
HAL_UNLOCKED
;

178 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

179 i‚Ä°(
hpcÀárd
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

181 
hpcÀárd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_PCCARD_M‚Ä¢In√¥
;

183 
hpcÀárd
->
ItC√Ülback
 = 
HAL_PCCARD_ITC√Ülback
;

186 
hpcÀárd
->
	`M‚Ä¢In√¥C√Ülback
(hpccard);

189 
	`HAL_PCCARD_M‚Ä¢In√¥
(
hpcÀárd
);

194 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_BUSY
;

197 
	`FSMC_PCCARD_In√¥
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, &(hpcÀárd->
In√¥
));

200 
	`FSMC_PCCARD_Comm‚ÅÑS‚àëÀö_Tim√∂g_In√¥
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
ComS‚àëÀöTim√∂g
);

203 
	`FSMC_PCCARD_A√¢ribu√£S‚àëÀö_Tim√∂g_In√¥
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
A√¢S‚àëÀöTim√∂g
);

206 
	`FSMC_PCCARD_IOS‚àëÀö_Tim√∂g_In√¥
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
IOS‚àëÀöTim√∂g
);

209 
	`__FSMC_PCCARD_ENABLE
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
);

212 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_READY
;

214  
HAL_OK
;

216 
	}
}

224 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_DeIn√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

226 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

227 i‚Ä°(
hpcÀárd
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

229 
hpcÀárd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_PCCARD_M‚Ä¢DeIn√¥
;

233 
hpcÀárd
->
	`M‚Ä¢DeIn√¥C√Ülback
(hpccard);

236 
	`HAL_PCCARD_M‚Ä¢DeIn√¥
(
hpcÀárd
);

240 
	`FSMC_PCCARD_DeIn√¥
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
);

243 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_RESET
;

246 
	`__HAL_UNLOCK
(
hpcÀárd
);

248  
HAL_OK
;

249 
	}
}

257 
__w√≥k
 
	$HAL_PCCARD_M‚Ä¢In√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

260 
	`UNUSED
(
hpcÀárd
);

264 
	}
}

272 
__w√≥k
 
	$HAL_PCCARD_M‚Ä¢DeIn√¥
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

275 
	`UNUSED
(
hpcÀárd
);

279 
	}
}

308 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_R√≥d_ID
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t8_t
 
Com‚àëÀòF≈ìsh_ID
[], u√∂t8_√†*
pS√®tus
)

310 
u√∂t32_t
 
timeout
 = 
PCCARD_TIMEOUT_READ_ID
, 
√∂dex
 = 0U;

311 
u√∂t8_t
 
¬∞¬©us
 = 0;

314 
	`__HAL_LOCK
(
hpcÀárd
);

317 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

319  
HAL_BUSY
;

323 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_BUSY
;

326 *
pS√®tus
 = 
PCCARD_READY
;

329 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
) = (uint16_t)0xECEC;

335 
¬∞¬©us
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

337 
timeout
--;

338 } (
¬∞¬©us
 !Ô£ø
PCCARD_STATUS_OK
√ã&& 
timeout
);

340 i‚Ä°(
timeout
 == 0U)

342 *
pS√®tus
 = 
PCCARD_TIMEOUT_ERROR
;

347 
√∂dex
 = 0U; index < 16U; index++)

349 
Com‚àëÀòF≈ìsh_ID
[
√∂dex
] = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_DATA
);

354 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_READY
;

357 
	`__HAL_UNLOCK
(
hpcÀárd
);

359  
HAL_OK
;

360 
	}
}

371 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_R√≥d_SeÀò‚Äπ
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t16_t
 *
pBuf‚Äûr
, u√∂t16_√†
SeÀò‚ÄπAdd¬™ss
,

372 
u√∂t8_t
 *
pS√®tus
)

374 
u√∂t32_t
 
timeout
 = 
PCCARD_TIMEOUT_READ_WRITE_SECTOR
, 
√∂dex
 = 0U;

375 
u√∂t8_t
 
¬∞¬©us
 = 0;

378 
	`__HAL_LOCK
(
hpcÀárd
);

381 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

383  
HAL_BUSY
;

387 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_BUSY
;

390 *
pS√®tus
 = 
PCCARD_READY
;

393 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_HIGH
) = (uint16_t)0x0000;

394 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_COUNT
√ãÔ£ø((u√∂t16_t)0x0100√ã| ((u√∂t16_t)
SeÀò‚ÄπAdd¬™ss
);

395 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
) = (uint16_t)0xE4A0;

400 
¬∞¬©us
 = *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

401 
timeout
--;

402 } (
¬∞¬©us
 =Ô£ø0x80U√ã&& 
timeout
);

404 i‚Ä°(
timeout
 == 0U)

406 *
pS√®tus
 = 
PCCARD_TIMEOUT_ERROR
;

409 
timeout
 = 
PCCARD_TIMEOUT_READ_WRITE_SECTOR
;

414 
¬∞¬©us
 = *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

415 
timeout
--;

416 } (
¬∞¬©us
 !Ô£ø
PCCARD_STATUS_OK
√ã&& 
timeout
);

418 i‚Ä°(
timeout
 == 0U)

420 *
pS√®tus
 = 
PCCARD_TIMEOUT_ERROR
;

424 ; 
√∂dex
 < 
PCCARD_SECTOR_SIZE
; index++)

426 *(
u√∂t16_t
 *)
pBuf‚Äûr
++ = *(u√∂t16_√†*)(
PCCARD_IO_SPACE_PRIMARY_ADDR
);

430 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_READY
;

433 
	`__HAL_UNLOCK
(
hpcÀárd
);

435  
HAL_OK
;

436 
	}
}

448 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_Wr√¥e_SeÀò‚Äπ
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t16_t
 *
pBuf‚Äûr
, u√∂t16_√†
SeÀò‚ÄπAdd¬™ss
,

449 
u√∂t8_t
 *
pS√®tus
)

451 
u√∂t32_t
 
timeout
 = 
PCCARD_TIMEOUT_READ_WRITE_SECTOR
, 
√∂dex
 = 0U;

452 
u√∂t8_t
 
¬∞¬©us
 = 0;

455 
	`__HAL_LOCK
(
hpcÀárd
);

458 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

460  
HAL_BUSY
;

464 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_BUSY
;

467 *
pS√®tus
 = 
PCCARD_READY
;

470 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_HIGH
) = (uint16_t)0x0000;

471 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_COUNT
√ãÔ£ø((u√∂t16_t)0x0100√ã| ((u√∂t16_t)
SeÀò‚ÄπAdd¬™ss
);

472 *(
__IO
 
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
) = (uint16_t)0x30A0;

477 
¬∞¬©us
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

478 
timeout
--;

479 } (
¬∞¬©us
 !Ô£ø
PCCARD_STATUS_OK
√ã&& 
timeout
);

481 i‚Ä°(
timeout
 == 0U)

483 *
pS√®tus
 = 
PCCARD_TIMEOUT_ERROR
;

487 ; 
√∂dex
 < 
PCCARD_SECTOR_SIZE
; index++)

489 *(
u√∂t16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
√ãÔ£ø*(u√∂t16_√†*)
pBuf‚Äûr
++;

495 
¬∞¬©us
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

496 
timeout
--;

497 } (
¬∞¬©us
 !Ô£ø
PCCARD_STATUS_WRITE_OK
√ã&& 
timeout
);

499 i‚Ä°(
timeout
 == 0U)

501 *
pS√®tus
 = 
PCCARD_TIMEOUT_ERROR
;

505 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_READY
;

508 
	`__HAL_UNLOCK
(
hpcÀárd
);

510  
HAL_OK
;

511 
	}
}

522 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_E√∏¬£_SeÀò‚Äπ
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
u√∂t16_t
 
SeÀò‚ÄπAdd¬™ss
, 
u√∂t8_t
 *
pS√®tus
)

524 
u√∂t32_t
 
timeout
 = 
PCCARD_TIMEOUT_ERASE_SECTOR
;

525 
u√∂t8_t
 
¬∞¬©us
 = 0;

528 
	`__HAL_LOCK
(
hpcÀárd
);

531 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

533  
HAL_BUSY
;

537 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_BUSY
;

540 *
pS√®tus
 = 
PCCARD_READY
;

543 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_LOW
) = 0x00;

544 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_HIGH
) = 0x00;

545 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_NUMBER
√ãÔ£ø
SeÀò‚ÄπAdd¬™ss
;

546 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_COUNT
) = 0x01;

547 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CARD_HEAD
) = 0xA0;

548 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
√ãÔ£ø
ATA_ERASE_SECTOR_CMD
;

551 
¬∞¬©us
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

553 (
¬∞¬©us
 !Ô£ø
PCCARD_STATUS_WRITE_OK
√ã&& 
timeout
)

555 
¬∞¬©us
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

556 
timeout
--;

559 i‚Ä°(
timeout
 == 0U)

561 *
pS√®tus
 = 
PCCARD_TIMEOUT_ERROR
;

565 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_READY
;

568 
	`__HAL_UNLOCK
(
hpcÀárd
);

570  
HAL_OK
;

571 
	}
}

579 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_Re¬£t
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

582 
	`__HAL_LOCK
(
hpcÀárd
);

585 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

587  
HAL_BUSY
;

598 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_BUSY
;

600 *(
__IO
 
u√∂t8_t
 *)(
PCCARD_ATTRIBUTE_SPACE_ADDRESS
 | 
ATA_CARD_CONFIGURATION
) = 0x01;

603 
hpcÀárd
->
S√®√£
 = 
HAL_PCCARD_STATE_READY
;

606 
	`__HAL_UNLOCK
(
hpcÀárd
);

608  
HAL_OK
;

609 
	}
}

617 
	$HAL_PCCARD_IRQH‚Ñ¢d√Är
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

620 i‚Ä°(
	`__FSMC_PCCARD_GET_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_RISING_EDGE
))

623 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

624 
hpcÀárd
->
	`ItC√Ülback
(hpccard);

626 
	`HAL_PCCARD_ITC√Ülback
(
hpcÀárd
);

630 
	`__FSMC_PCCARD_CLEAR_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_RISING_EDGE
);

634 i‚Ä°(
	`__FSMC_PCCARD_GET_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_LEVEL
))

637 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

638 
hpcÀárd
->
	`ItC√Ülback
(hpccard);

640 
	`HAL_PCCARD_ITC√Ülback
(
hpcÀárd
);

644 
	`__FSMC_PCCARD_CLEAR_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_LEVEL
);

648 i‚Ä°(
	`__FSMC_PCCARD_GET_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_FALLING_EDGE
))

651 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

652 
hpcÀárd
->
	`ItC√Ülback
(hpccard);

654 
	`HAL_PCCARD_ITC√Ülback
(
hpcÀárd
);

658 
	`__FSMC_PCCARD_CLEAR_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_FALLING_EDGE
);

662 i‚Ä°(
	`__FSMC_PCCARD_GET_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_FEMPT
))

665 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

666 
hpcÀárd
->
	`ItC√Ülback
(hpccard);

668 
	`HAL_PCCARD_ITC√Ülback
(
hpcÀárd
);

672 
	`__FSMC_PCCARD_CLEAR_FLAG
(
hpcÀárd
->
In¬∞‚Ñ¢Àö
, 
FSMC_FLAG_FEMPT
);

674 
	}
}

682 
__w√≥k
 
	$HAL_PCCARD_ITC√Ülback
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

685 
	`UNUSED
(
hpcÀárd
);

689 
	}
}

691 #i‚Ä°(
USE_HAL_PCCARD_REGISTER_CALLBACKS
 == 1)

704 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_Regi¬∞√ÆC√Ülback
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
HAL_PCCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

705 
pPCCARD_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

707 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

709 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

711  
HAL_ERROR
;

715 
	`__HAL_LOCK
(
hpcÀárd
);

717 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_READY
)

719 
C√ÜlbackId
)

721 
HAL_PCCARD_MSP_INIT_CB_ID
 :

722 
hpcÀárd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

724 
HAL_PCCARD_MSP_DEINIT_CB_ID
 :

725 
hpcÀárd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

727 
HAL_PCCARD_IT_CB_ID
 :

728 
hpcÀárd
->
ItC√Ülback
 = 
pC√Ülback
;

732 
¬∞¬©us
 = 
HAL_ERROR
;

736 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_RESET
)

738 
C√ÜlbackId
)

740 
HAL_PCCARD_MSP_INIT_CB_ID
 :

741 
hpcÀárd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

743 
HAL_PCCARD_MSP_DEINIT_CB_ID
 :

744 
hpcÀárd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

748 
¬∞¬©us
 = 
HAL_ERROR
;

755 
¬∞¬©us
 = 
HAL_ERROR
;

759 
	`__HAL_UNLOCK
(
hpcÀárd
);

760  
¬∞¬©us
;

761 
	}
}

774 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCCARD_UnRegi¬∞√ÆC√Ülback
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
, 
HAL_PCCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
)

776 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

779 
	`__HAL_LOCK
(
hpcÀárd
);

781 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_READY
)

783 
C√ÜlbackId
)

785 
HAL_PCCARD_MSP_INIT_CB_ID
 :

786 
hpcÀárd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_PCCARD_M‚Ä¢In√¥
;

788 
HAL_PCCARD_MSP_DEINIT_CB_ID
 :

789 
hpcÀárd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_PCCARD_M‚Ä¢DeIn√¥
;

791 
HAL_PCCARD_IT_CB_ID
 :

792 
hpcÀárd
->
ItC√Ülback
 = 
HAL_PCCARD_ITC√Ülback
;

796 
¬∞¬©us
 = 
HAL_ERROR
;

800 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_RESET
)

802 
C√ÜlbackId
)

804 
HAL_PCCARD_MSP_INIT_CB_ID
 :

805 
hpcÀárd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_PCCARD_M‚Ä¢In√¥
;

807 
HAL_PCCARD_MSP_DEINIT_CB_ID
 :

808 
hpcÀárd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_PCCARD_M‚Ä¢DeIn√¥
;

812 
¬∞¬©us
 = 
HAL_ERROR
;

819 
¬∞¬©us
 = 
HAL_ERROR
;

823 
	`__HAL_UNLOCK
(
hpcÀárd
);

824  
¬∞¬©us
;

825 
	}
}

853 
HAL_PCCARD_S√®√£Ty‚â•Def
 
	$HAL_PCCARD_G√´S√®√£
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

855  
hpcÀárd
->
S√®√£
;

856 
	}
}

867 
HAL_PCCARD_S√®tusTy‚â•Def
 
	$HAL_PCCARD_G√´S√®tus
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

869 
u√∂t32_t
 
timeout
 = 
PCCARD_TIMEOUT_STATUS
, 
¬∞¬©us_pcÀárd
 = 0U;

872 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

874  
HAL_PCCARD_STATUS_ONGOING
;

877 
¬∞¬©us_pcÀárd
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

879 (
¬∞¬©us_pcÀárd
 =Ô£ø
PCCARD_BUSY
√ã&& 
timeout
)

881 
¬∞¬©us_pcÀárd
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

882 
timeout
--;

885 i‚Ä°(
timeout
 == 0U)

887 
¬∞¬©us_pcÀárd
 = 
PCCARD_TIMEOUT_ERROR
;

891  (
HAL_PCCARD_S√®tusTy‚â•Def
√ã
¬∞¬©us_pcÀárd
;

892 
	}
}

903 
HAL_PCCARD_S√®tusTy‚â•Def
 
	$HAL_PCCARD_R√≥dS√®tus
(
PCCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcÀárd
)

905 
u√∂t8_t
 
d¬©a
 = 0U, 
¬∞¬©us_pcÀárd
 = 
PCCARD_BUSY
;

908 i‚Ä°(
hpcÀárd
->
S√®√£
 =Ô£ø
HAL_PCCARD_STATE_BUSY
)

910  
HAL_PCCARD_STATUS_ONGOING
;

914 
d¬©a
 = *(
__IO
 
u√∂t8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

916 i‚Ä°((
d¬©a
 & 
PCCARD_TIMEOUT_ERROR
) == PCCARD_TIMEOUT_ERROR)

918 
¬∞¬©us_pcÀárd
 = 
PCCARD_TIMEOUT_ERROR
;

920 i‚Ä°((
d¬©a
 & 
PCCARD_READY
) == PCCARD_READY)

922 
¬∞¬©us_pcÀárd
 = 
PCCARD_READY
;

925  (
HAL_PCCARD_S√®tusTy‚â•Def
√ã
¬∞¬©us_pcÀárd
;

926 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd.c

57 
	~"¬∞m32f1xx_h√Ü.h
"

68 #ifde‚Ä°
HAL_PCD_MODULE_ENABLED


70 #i‚Ä°
def√∂ed
 (
USB
√ã|| def√∂ed (
USB_OTG_FS
)

79 
	#PCD_MIN
(
a
, 
b
√ã((‚óä√ã< (b)√ã? (a√ã: (b))

	)

80 
	#PCD_MAX
(
a
, 
b
√ã((‚óä√ã> (b)√ã? (a√ã: (b))

	)

89 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

90 
HAL_S√®tusTy‚â•Def
 
PCD_Wr√¥eEm¬±yTxFifo
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t32_t
 
√Ønum
);

91 
HAL_S√®tusTy‚â•Def
 
PCD_EP_OutX‚Ä∞Com‚àÇ√´e_√∂t
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t32_t
 
√Ønum
);

92 
HAL_S√®tusTy‚â•Def
 
PCD_EP_OutS√´upPack√´_√∂t
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t32_t
 
√Ønum
);

95 #i‚Ä°
def√∂ed
 (
USB
)

96 
HAL_S√®tusTy‚â•Def
 
PCD_EP_ISR_H‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
);

97 
HAL_S√®tusTy‚â•Def
 
HAL_PCD_EP_DB_T√∏nsm√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
PCD_EPTy‚â•Def
 *
√Ø
, 
u√∂t16_t
 
wEPV√Ü
);

98 
u√∂t16_t
 
HAL_PCD_EP_DB_ReÀöive
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
PCD_EPTy‚â•Def
 *
√Ø
, u√∂t16_√†
wEPV√Ü
);

128 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_In√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

130 #i‚Ä°
	`def√∂ed
 (
USB_OTG_FS
)

131 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
;

133 
u√∂t8_t
 
i
;

136 i‚Ä°(
hpcd
 =Ô£ø
NULL
)

138  
HAL_ERROR
;

142 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PCD_ALL_INSTANCE
(
hpcd
->
In¬∞‚Ñ¢Àö
));

144 #i‚Ä°
	`def√∂ed
 (
USB_OTG_FS
)

145 
USBx
 = 
hpcd
->
In¬∞‚Ñ¢Àö
;

148 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_RESET
)

151 
hpcd
->
Lock
 = 
HAL_UNLOCKED
;

153 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

154 
hpcd
->
SOFC√Ülback
 = 
HAL_PCD_SOFC√Ülback
;

155 
hpcd
->
S√´upS√®geC√Ülback
 = 
HAL_PCD_S√´upS√®geC√Ülback
;

156 
hpcd
->
Re¬£tC√Ülback
 = 
HAL_PCD_Re¬£tC√Ülback
;

157 
hpcd
->
Su‚Ä¢√≠dC√Ülback
 = 
HAL_PCD_Su‚Ä¢√≠dC√Ülback
;

158 
hpcd
->
ResumeC√Ülback
 = 
HAL_PCD_ResumeC√Ülback
;

159 
hpcd
->
C‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_PCD_C‚ÅÑ‚àöÀòC√Ülback
;

160 
hpcd
->
Disc‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_PCD_Disc‚ÅÑ‚àöÀòC√Ülback
;

161 
hpcd
->
D¬©aOutS√®geC√Ülback
 = 
HAL_PCD_D¬©aOutS√®geC√Ülback
;

162 
hpcd
->
D¬©aInS√®geC√Ülback
 = 
HAL_PCD_D¬©aInS√®geC√Ülback
;

163 
hpcd
->
ISOOUTIncom‚àÇ√´eC√Ülback
 = 
HAL_PCD_ISOOUTIncom‚àÇ√´eC√Ülback
;

164 
hpcd
->
ISOINIncom‚àÇ√´eC√Ülback
 = 
HAL_PCD_ISOINIncom‚àÇ√´eC√Ülback
;

166 i‚Ä°(
hpcd
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

168 
hpcd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_PCD_M‚Ä¢In√¥
;

172 
hpcd
->
	`M‚Ä¢In√¥C√Ülback
(hpcd);

175 
	`HAL_PCD_M‚Ä¢In√¥
(
hpcd
);

179 
hpcd
->
S√®√£
 = 
HAL_PCD_STATE_BUSY
;

181 #i‚Ä°
	`def√∂ed
 (
USB_OTG_FS
)

183 i‚Ä°((
USBx
->
CID
 & (0x1U << 8)) == 0U)

185 
hpcd
->
In√¥
.
dma_√≠ab√Ä
 = 0U;

190 
	`__HAL_PCD_DISABLE
(
hpcd
);

193 i‚Ä°(
	`USB_C‚ÄπeIn√¥
(
hpcd
->
In¬∞‚Ñ¢Àö
, hpcd->
In√¥
√ã!Ô£ø
HAL_OK
)

195 
hpcd
->
S√®√£
 = 
HAL_PCD_STATE_ERROR
;

196  
HAL_ERROR
;

200 ()
	`USB_S√´Cu¬∫√≠tMode
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
USB_DEVICE_MODE
);

203 
i
 = 0U; i < 
hpcd
->
In√¥
.
dev_√≠dpo√∂ts
; i++)

206 
hpcd
->
IN_√Ø
[
i
].
is_√∂
 = 1U;

207 
hpcd
->
IN_√Ø
[
i
].
num
 = i;

208 
hpcd
->
IN_√Ø
[
i
].
tx_fifo_num
 = i;

210 
hpcd
->
IN_√Ø
[
i
].
ty‚â•
 = 
EP_TYPE_CTRL
;

211 
hpcd
->
IN_√Ø
[
i
].
max‚àëck√´
 = 0U;

212 
hpcd
->
IN_√Ø
[
i
].
x‚Äûr_buff
 = 0U;

213 
hpcd
->
IN_√Ø
[
i
].
x‚Äûr_√Än
 = 0U;

216 
i
 = 0U; i < 
hpcd
->
In√¥
.
dev_√≠dpo√∂ts
; i++)

218 
hpcd
->
OUT_√Ø
[
i
].
is_√∂
 = 0U;

219 
hpcd
->
OUT_√Ø
[
i
].
num
 = i;

221 
hpcd
->
OUT_√Ø
[
i
].
ty‚â•
 = 
EP_TYPE_CTRL
;

222 
hpcd
->
OUT_√Ø
[
i
].
max‚àëck√´
 = 0U;

223 
hpcd
->
OUT_√Ø
[
i
].
x‚Äûr_buff
 = 0U;

224 
hpcd
->
OUT_√Ø
[
i
].
x‚Äûr_√Än
 = 0U;

228 i‚Ä°(
	`USB_DevIn√¥
(
hpcd
->
In¬∞‚Ñ¢Àö
, hpcd->
In√¥
√ã!Ô£ø
HAL_OK
)

230 
hpcd
->
S√®√£
 = 
HAL_PCD_STATE_ERROR
;

231  
HAL_ERROR
;

234 
hpcd
->
USB_Add¬™ss
 = 0U;

235 
hpcd
->
S√®√£
 = 
HAL_PCD_STATE_READY
;

236 ()
	`USB_DevDisc‚ÅÑ‚àöÀò
(
hpcd
->
In¬∞‚Ñ¢Àö
);

238  
HAL_OK
;

239 
	}
}

246 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_DeIn√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

249 i‚Ä°(
hpcd
 =Ô£ø
NULL
)

251  
HAL_ERROR
;

254 
hpcd
->
S√®√£
 = 
HAL_PCD_STATE_BUSY
;

257 i‚Ä°(
	`USB_St‚Ä∫DeviÀö
(
hpcd
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
HAL_OK
)

259  
HAL_ERROR
;

262 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

263 i‚Ä°(
hpcd
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

265 
hpcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_PCD_M‚Ä¢DeIn√¥
;

269 
hpcd
->
	`M‚Ä¢DeIn√¥C√Ülback
(hpcd);

272 
	`HAL_PCD_M‚Ä¢DeIn√¥
(
hpcd
);

275 
hpcd
->
S√®√£
 = 
HAL_PCD_STATE_RESET
;

277  
HAL_OK
;

278 
	}
}

285 
__w√≥k
 
	$HAL_PCD_M‚Ä¢In√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

288 
	`UNUSED
(
hpcd
);

293 
	}
}

300 
__w√≥k
 
	$HAL_PCD_M‚Ä¢DeIn√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

303 
	`UNUSED
(
hpcd
);

308 
	}
}

310 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

329 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_Regi¬∞√ÆC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

330 
HAL_PCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

331 
pPCD_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

333 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

335 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

338 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

339  
HAL_ERROR
;

342 
	`__HAL_LOCK
(
hpcd
);

344 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

346 
C√ÜlbackID
)

348 
HAL_PCD_SOF_CB_ID
 :

349 
hpcd
->
SOFC√Ülback
 = 
pC√Ülback
;

352 
HAL_PCD_SETUPSTAGE_CB_ID
 :

353 
hpcd
->
S√´upS√®geC√Ülback
 = 
pC√Ülback
;

356 
HAL_PCD_RESET_CB_ID
 :

357 
hpcd
->
Re¬£tC√Ülback
 = 
pC√Ülback
;

360 
HAL_PCD_SUSPEND_CB_ID
 :

361 
hpcd
->
Su‚Ä¢√≠dC√Ülback
 = 
pC√Ülback
;

364 
HAL_PCD_RESUME_CB_ID
 :

365 
hpcd
->
ResumeC√Ülback
 = 
pC√Ülback
;

368 
HAL_PCD_CONNECT_CB_ID
 :

369 
hpcd
->
C‚ÅÑ‚àöÀòC√Ülback
 = 
pC√Ülback
;

372 
HAL_PCD_DISCONNECT_CB_ID
 :

373 
hpcd
->
Disc‚ÅÑ‚àöÀòC√Ülback
 = 
pC√Ülback
;

376 
HAL_PCD_MSPINIT_CB_ID
 :

377 
hpcd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

380 
HAL_PCD_MSPDEINIT_CB_ID
 :

381 
hpcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

386 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

388 
¬∞¬©us
 = 
HAL_ERROR
;

392 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_RESET
)

394 
C√ÜlbackID
)

396 
HAL_PCD_MSPINIT_CB_ID
 :

397 
hpcd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

400 
HAL_PCD_MSPDEINIT_CB_ID
 :

401 
hpcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

406 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

408 
¬∞¬©us
 = 
HAL_ERROR
;

415 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

417 
¬∞¬©us
 = 
HAL_ERROR
;

421 
	`__HAL_UNLOCK
(
hpcd
);

422  
¬∞¬©us
;

423 
	}
}

442 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_UnRegi¬∞√ÆC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
HAL_PCD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

444 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

447 
	`__HAL_LOCK
(
hpcd
);

450 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

452 
C√ÜlbackID
)

454 
HAL_PCD_SOF_CB_ID
 :

455 
hpcd
->
SOFC√Ülback
 = 
HAL_PCD_SOFC√Ülback
;

458 
HAL_PCD_SETUPSTAGE_CB_ID
 :

459 
hpcd
->
S√´upS√®geC√Ülback
 = 
HAL_PCD_S√´upS√®geC√Ülback
;

462 
HAL_PCD_RESET_CB_ID
 :

463 
hpcd
->
Re¬£tC√Ülback
 = 
HAL_PCD_Re¬£tC√Ülback
;

466 
HAL_PCD_SUSPEND_CB_ID
 :

467 
hpcd
->
Su‚Ä¢√≠dC√Ülback
 = 
HAL_PCD_Su‚Ä¢√≠dC√Ülback
;

470 
HAL_PCD_RESUME_CB_ID
 :

471 
hpcd
->
ResumeC√Ülback
 = 
HAL_PCD_ResumeC√Ülback
;

474 
HAL_PCD_CONNECT_CB_ID
 :

475 
hpcd
->
C‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_PCD_C‚ÅÑ‚àöÀòC√Ülback
;

478 
HAL_PCD_DISCONNECT_CB_ID
 :

479 
hpcd
->
Disc‚ÅÑ‚àöÀòC√Ülback
 = 
HAL_PCD_Disc‚ÅÑ‚àöÀòC√Ülback
;

482 
HAL_PCD_MSPINIT_CB_ID
 :

483 
hpcd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_PCD_M‚Ä¢In√¥
;

486 
HAL_PCD_MSPDEINIT_CB_ID
 :

487 
hpcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_PCD_M‚Ä¢DeIn√¥
;

492 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

495 
¬∞¬©us
 = 
HAL_ERROR
;

499 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_RESET
)

501 
C√ÜlbackID
)

503 
HAL_PCD_MSPINIT_CB_ID
 :

504 
hpcd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_PCD_M‚Ä¢In√¥
;

507 
HAL_PCD_MSPDEINIT_CB_ID
 :

508 
hpcd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_PCD_M‚Ä¢DeIn√¥
;

513 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

516 
¬∞¬©us
 = 
HAL_ERROR
;

523 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

526 
¬∞¬©us
 = 
HAL_ERROR
;

530 
	`__HAL_UNLOCK
(
hpcd
);

531  
¬∞¬©us
;

532 
	}
}

541 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_Regi¬∞√ÆD¬©aOutS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

542 
pPCD_D¬©aOutS√®geC√ÜlbackTy‚â•Def
 
pC√Ülback
)

544 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

546 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

549 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

551  
HAL_ERROR
;

555 
	`__HAL_LOCK
(
hpcd
);

557 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

559 
hpcd
->
D¬©aOutS√®geC√Ülback
 = 
pC√Ülback
;

564 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

567 
¬∞¬©us
 = 
HAL_ERROR
;

571 
	`__HAL_UNLOCK
(
hpcd
);

573  
¬∞¬©us
;

574 
	}
}

582 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_UnRegi¬∞√ÆD¬©aOutS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

584 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

587 
	`__HAL_LOCK
(
hpcd
);

589 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

591 
hpcd
->
D¬©aOutS√®geC√Ülback
 = 
HAL_PCD_D¬©aOutS√®geC√Ülback
;

596 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

599 
¬∞¬©us
 = 
HAL_ERROR
;

603 
	`__HAL_UNLOCK
(
hpcd
);

605  
¬∞¬©us
;

606 
	}
}

615 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_Regi¬∞√ÆD¬©aInS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

616 
pPCD_D¬©aInS√®geC√ÜlbackTy‚â•Def
 
pC√Ülback
)

618 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

620 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

623 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

625  
HAL_ERROR
;

629 
	`__HAL_LOCK
(
hpcd
);

631 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

633 
hpcd
->
D¬©aInS√®geC√Ülback
 = 
pC√Ülback
;

638 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

641 
¬∞¬©us
 = 
HAL_ERROR
;

645 
	`__HAL_UNLOCK
(
hpcd
);

647  
¬∞¬©us
;

648 
	}
}

656 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_UnRegi¬∞√ÆD¬©aInS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

658 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

661 
	`__HAL_LOCK
(
hpcd
);

663 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

665 
hpcd
->
D¬©aInS√®geC√Ülback
 = 
HAL_PCD_D¬©aInS√®geC√Ülback
;

670 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

673 
¬∞¬©us
 = 
HAL_ERROR
;

677 
	`__HAL_UNLOCK
(
hpcd
);

679  
¬∞¬©us
;

680 
	}
}

689 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_Regi¬∞√ÆIsoOutInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

690 
pPCD_IsoOutInÀù‚Ä¶C√ÜlbackTy‚â•Def
 
pC√Ülback
)

692 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

694 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

697 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

699  
HAL_ERROR
;

703 
	`__HAL_LOCK
(
hpcd
);

705 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

707 
hpcd
->
ISOOUTIncom‚àÇ√´eC√Ülback
 = 
pC√Ülback
;

712 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

715 
¬∞¬©us
 = 
HAL_ERROR
;

719 
	`__HAL_UNLOCK
(
hpcd
);

721  
¬∞¬©us
;

722 
	}
}

730 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_UnRegi¬∞√ÆIsoOutInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

732 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

735 
	`__HAL_LOCK
(
hpcd
);

737 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

739 
hpcd
->
ISOOUTIncom‚àÇ√´eC√Ülback
 = 
HAL_PCD_ISOOUTIncom‚àÇ√´eC√Ülback
;

744 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

747 
¬∞¬©us
 = 
HAL_ERROR
;

751 
	`__HAL_UNLOCK
(
hpcd
);

753  
¬∞¬©us
;

754 
	}
}

763 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_Regi¬∞√ÆIsoInInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

764 
pPCD_IsoInInÀù‚Ä¶C√ÜlbackTy‚â•Def
 
pC√Ülback
)

766 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

768 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

771 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

773  
HAL_ERROR
;

777 
	`__HAL_LOCK
(
hpcd
);

779 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

781 
hpcd
->
ISOINIncom‚àÇ√´eC√Ülback
 = 
pC√Ülback
;

786 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

789 
¬∞¬©us
 = 
HAL_ERROR
;

793 
	`__HAL_UNLOCK
(
hpcd
);

795  
¬∞¬©us
;

796 
	}
}

804 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_UnRegi¬∞√ÆIsoInInÀù‚Ä¶C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

806 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

809 
	`__HAL_LOCK
(
hpcd
);

811 i‚Ä°(
hpcd
->
S√®√£
 =Ô£ø
HAL_PCD_STATE_READY
)

813 
hpcd
->
ISOINIncom‚àÇ√´eC√Ülback
 = 
HAL_PCD_ISOINIncom‚àÇ√´eC√Ülback
;

818 
hpcd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_PCD_ERROR_INVALID_CALLBACK
;

821 
¬∞¬©us
 = 
HAL_ERROR
;

825 
	`__HAL_UNLOCK
(
hpcd
);

827  
¬∞¬©us
;

828 
	}
}

856 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_S√®œÄ
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

858 
	`__HAL_LOCK
(
hpcd
);

859 
	`__HAL_PCD_ENABLE
(
hpcd
);

861 #i‚Ä°
	`def√∂ed
 (
USB
)

862 
	`HAL_PCDEx_S√´C‚ÅÑ‚àöÀòi‚ÅÑS√®√£
(
hpcd
, 1U);

865 ()
	`USB_DevC‚ÅÑ‚àöÀò
(
hpcd
->
In¬∞‚Ñ¢Àö
);

866 
	`__HAL_UNLOCK
(
hpcd
);

868  
HAL_OK
;

869 
	}
}

876 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_St‚Ä∫
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

878 
	`__HAL_LOCK
(
hpcd
);

879 
	`__HAL_PCD_DISABLE
(
hpcd
);

881 #i‚Ä°
	`def√∂ed
 (
USB
)

882 
	`HAL_PCDEx_S√´C‚ÅÑ‚àöÀòi‚ÅÑS√®√£
(
hpcd
, 0U);

885 ()
	`USB_DevDisc‚ÅÑ‚àöÀò
(
hpcd
->
In¬∞‚Ñ¢Àö
);

887 #i‚Ä°
	`def√∂ed
 (
USB_OTG_FS
)

888 ()
	`USB_FlushTxFifo
(
hpcd
->
In¬∞‚Ñ¢Àö
, 0x10U);

891 
	`__HAL_UNLOCK
(
hpcd
);

893  
HAL_OK
;

894 
	}
}

896 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

902 
	$HAL_PCD_IRQH‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

904 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hpcd
->
In¬∞‚Ñ¢Àö
;

905 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

906 
u√∂t32_t
 
i
, 
√Ø_√∂√•
, 
√Ø√∂t
, 
√Ønum
;

907 
u√∂t32_t
 
fif‚Ç¨m¬±ymsk
, 
√£mp
;

908 
USB_OTG_EPTy‚â•Def
 *
√Ø
;

911 i‚Ä°(
	`USB_G√´Mode
(
hpcd
->
In¬∞‚Ñ¢Àö
√ã=Ô£ø
USB_OTG_MODE_DEVICE
)

914 i‚Ä°(
	`__HAL_PCD_IS_INVALID_INTERRUPT
(
hpcd
))

919 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
))

922 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
);

926 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_RXFLVL
))

928 
	`USB_MASK_INTERRUPT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
USB_OTG_GINTSTS_RXFLVL
);

930 
√£mp
 = 
USBx
->
GRXSTSP
;

932 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√£mp
 & 
USB_OTG_GRXSTSP_EPNUM
];

934 i‚Ä°(((
√£mp
 & 
USB_OTG_GRXSTSP_PKTSTS
√ã>> 17√ã=Ô£ø
STS_DATA_UPDT
)

936 i‚Ä°((
√£mp
 & 
USB_OTG_GRXSTSP_BCNT
) != 0U)

938 ()
	`USB_R√≥dPack√´
(
USBx
, 
√Ø
->
x‚Äûr_buff
,

939 (
u√∂t16_t
)((
√£mp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4));

941 
√Ø
->
x‚Äûr_buff
 +Ô£ø(
√£mp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

942 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø(
√£mp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

945 i‚Ä°(((
√£mp
 & 
USB_OTG_GRXSTSP_PKTSTS
√ã>> 17√ã=Ô£ø
STS_SETUP_UPDT
)

947 ()
	`USB_R√≥dPack√´
(
USBx
, (
u√∂t8_t
 *)
hpcd
->
S√´up
, 8U);

948 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø(
√£mp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

954 
	`USB_UNMASK_INTERRUPT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
USB_OTG_GINTSTS_RXFLVL
);

957 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OEPINT
))

959 
√Ønum
 = 0U;

962 
√Ø_√∂√•
 = 
	`USB_R√≥dDevA≈íOutEpI¬°√Æru¬±
(
hpcd
->
In¬∞‚Ñ¢Àö
);

964 
√Ø_√∂√•
 != 0U)

966 i‚Ä°((
√Ø_√∂√•
 & 0x1U) != 0U)

968 
√Ø√∂t
 = 
	`USB_R√≥dDevOutEPI¬°√Æru¬±
(
hpcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
√Ønum
);

970 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DOEPINT_XFRC
) == USB_OTG_DOEPINT_XFRC)

972 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_XFRC
);

973 ()
	`PCD_EP_OutX‚Ä∞Com‚àÇ√´e_√∂t
(
hpcd
, 
√Ønum
);

976 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DOEPINT_STUP
) == USB_OTG_DOEPINT_STUP)

978 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_STUP
);

980 ()
	`PCD_EP_OutS√´upPack√´_√∂t
(
hpcd
, 
√Ønum
);

983 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DOEPINT_OTEPDIS
) == USB_OTG_DOEPINT_OTEPDIS)

985 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_OTEPDIS
);

989 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DOEPINT_OTEPSPR
) == USB_OTG_DOEPINT_OTEPSPR)

991 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_OTEPSPR
);

995 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DOEPINT_NAK
) == USB_OTG_DOEPINT_NAK)

997 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_NAK
);

1000 
√Ønum
++;

1001 
√Ø_√∂√•
 >>= 1U;

1005 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IEPINT
))

1008 
√Ø_√∂√•
 = 
	`USB_R√≥dDevA≈íInEpI¬°√Æru¬±
(
hpcd
->
In¬∞‚Ñ¢Àö
);

1010 
√Ønum
 = 0U;

1012 
√Ø_√∂√•
 != 0U)

1014 i‚Ä°((
√Ø_√∂√•
 & 0x1U) != 0U)

1016 
√Ø√∂t
 = 
	`USB_R√≥dDevInEPI¬°√Æru¬±
(
hpcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
)
√Ønum
);

1018 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DIEPINT_XFRC
) == USB_OTG_DIEPINT_XFRC)

1020 
fif‚Ç¨m¬±ymsk
 = (
u√∂t32_t
)(0x1UL << (
√Ønum
 & 
EP_ADDR_MSK
));

1021 
USBx_DEVICE
->
DIEPEMPMSK
 &Ô£ø~
fif‚Ç¨m¬±ymsk
;

1023 
	`CLEAR_IN_EP_INTR
(
√Ønum
, 
USB_OTG_DIEPINT_XFRC
);

1025 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1026 
hpcd
->
	`D¬©aInS√®geC√Ülback
(hpcd, (
u√∂t8_t
)
√Ønum
);

1028 
	`HAL_PCD_D¬©aInS√®geC√Ülback
(
hpcd
, (
u√∂t8_t
)
√Ønum
);

1031 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DIEPINT_TOC
) == USB_OTG_DIEPINT_TOC)

1033 
	`CLEAR_IN_EP_INTR
(
√Ønum
, 
USB_OTG_DIEPINT_TOC
);

1035 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DIEPINT_ITTXFE
) == USB_OTG_DIEPINT_ITTXFE)

1037 
	`CLEAR_IN_EP_INTR
(
√Ønum
, 
USB_OTG_DIEPINT_ITTXFE
);

1039 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DIEPINT_INEPNE
) == USB_OTG_DIEPINT_INEPNE)

1041 
	`CLEAR_IN_EP_INTR
(
√Ønum
, 
USB_OTG_DIEPINT_INEPNE
);

1043 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DIEPINT_EPDISD
) == USB_OTG_DIEPINT_EPDISD)

1045 
	`CLEAR_IN_EP_INTR
(
√Ønum
, 
USB_OTG_DIEPINT_EPDISD
);

1047 i‚Ä°((
√Ø√∂t
 & 
USB_OTG_DIEPINT_TXFE
) == USB_OTG_DIEPINT_TXFE)

1049 ()
	`PCD_Wr√¥eEm¬±yTxFifo
(
hpcd
, 
√Ønum
);

1052 
√Ønum
++;

1053 
√Ø_√∂√•
 >>= 1U;

1058 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
))

1061 
USBx_DEVICE
->
DCTL
 &Ô£ø~
USB_OTG_DCTL_RWUSIG
;

1063 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1064 
hpcd
->
	`ResumeC√Ülback
(hpcd);

1066 
	`HAL_PCD_ResumeC√Ülback
(
hpcd
);

1069 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
);

1073 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
))

1075 i‚Ä°((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

1077 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1078 
hpcd
->
	`Su‚Ä¢√≠dC√Ülback
(hpcd);

1080 
	`HAL_PCD_Su‚Ä¢√≠dC√Ülback
(
hpcd
);

1083 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
);

1086 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
))

1088 
USBx_DEVICE
->
DCTL
 &Ô£ø~
USB_OTG_DCTL_RWUSIG
;

1089 ()
	`USB_FlushTxFifo
(
hpcd
->
In¬∞‚Ñ¢Àö
, 0x10U);

1091 
i
 = 0U; i < 
hpcd
->
In√¥
.
dev_√≠dpo√∂ts
; i++)

1093 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFB7FU;

1094 
	`USBx_INEP
(
i
)->
DIEPCTL
 &Ô£ø~
USB_OTG_DIEPCTL_STALL
;

1095 
	`USBx_INEP
(
i
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_SNAK
;

1096 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFB7FU;

1097 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 &Ô£ø~
USB_OTG_DOEPCTL_STALL
;

1098 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_SNAK
;

1100 
USBx_DEVICE
->
DAINTMSK
 |= 0x10001U;

1102 i‚Ä°(
hpcd
->
In√¥
.
u¬£_dediÀá√£d_√Ø1
 != 0U)

1104 
USBx_DEVICE
->
DOUTEP1MSK
 |Ô£ø
USB_OTG_DOEPMSK_STUPM
 |

1105 
USB_OTG_DOEPMSK_XFRCM
 |

1106 
USB_OTG_DOEPMSK_EPDM
;

1108 
USBx_DEVICE
->
DINEP1MSK
 |Ô£ø
USB_OTG_DIEPMSK_TOM
 |

1109 
USB_OTG_DIEPMSK_XFRCM
 |

1110 
USB_OTG_DIEPMSK_EPDM
;

1114 
USBx_DEVICE
->
DOEPMSK
 |Ô£ø
USB_OTG_DOEPMSK_STUPM
 |

1115 
USB_OTG_DOEPMSK_XFRCM
 |

1116 
USB_OTG_DOEPMSK_EPDM
 |

1117 
USB_OTG_DOEPMSK_OTEPSPRM
 |

1118 
USB_OTG_DOEPMSK_NAKM
;

1120 
USBx_DEVICE
->
DIEPMSK
 |Ô£ø
USB_OTG_DIEPMSK_TOM
 |

1121 
USB_OTG_DIEPMSK_XFRCM
 |

1122 
USB_OTG_DIEPMSK_EPDM
;

1126 
USBx_DEVICE
->
DCFG
 &Ô£ø~
USB_OTG_DCFG_DAD
;

1129 ()
	`USB_EP0_OutS√®œÄ
(
hpcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
 *)hpcd->
S√´up
);

1131 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
);

1135 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
))

1137 ()
	`USB_AÀòiv¬©eS√´up
(
hpcd
->
In¬∞‚Ñ¢Àö
);

1138 
hpcd
->
In√¥
.
‚Ä¢√¨d
 = 
	`USB_G√´DevS‚â•ed
(hpcd->
In¬∞‚Ñ¢Àö
);

1141 ()
	`USB_S√´Tu‚à´¬®oundTime
(
hpcd
->
In¬∞‚Ñ¢Àö
,

1142 
	`HAL_RCC_G√´HCLKF¬™q
(),

1143 (
u√∂t8_t
)
hpcd
->
In√¥
.
‚Ä¢√¨d
);

1145 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1146 
hpcd
->
	`Re¬£tC√Ülback
(hpcd);

1148 
	`HAL_PCD_Re¬£tC√Ülback
(
hpcd
);

1151 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
);

1155 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
))

1157 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1158 
hpcd
->
	`SOFC√Ülback
(hpcd);

1160 
	`HAL_PCD_SOFC√Ülback
(
hpcd
);

1163 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
);

1167 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
))

1171 
√Ønum
 = 0U;

1173 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1174 
hpcd
->
	`ISOINIncom‚àÇ√´eC√Ülback
(hpcd, (
u√∂t8_t
)
√Ønum
);

1176 
	`HAL_PCD_ISOINIncom‚àÇ√´eC√Ülback
(
hpcd
, (
u√∂t8_t
)
√Ønum
);

1179 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
);

1183 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
))

1187 
√Ønum
 = 0U;

1189 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1190 
hpcd
->
	`ISOOUTIncom‚àÇ√´eC√Ülback
(hpcd, (
u√∂t8_t
)
√Ønum
);

1192 
	`HAL_PCD_ISOOUTIncom‚àÇ√´eC√Ülback
(
hpcd
, (
u√∂t8_t
)
√Ønum
);

1195 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
);

1199 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
))

1201 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1202 
hpcd
->
	`C‚ÅÑ‚àöÀòC√Ülback
(hpcd);

1204 
	`HAL_PCD_C‚ÅÑ‚àöÀòC√Ülback
(
hpcd
);

1207 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
);

1211 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OTGINT
))

1213 
√£mp
 = 
hpcd
->
In¬∞‚Ñ¢Àö
->
GOTGINT
;

1215 i‚Ä°((
√£mp
 & 
USB_OTG_GOTGINT_SEDET
) == USB_OTG_GOTGINT_SEDET)

1217 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1218 
hpcd
->
	`Disc‚ÅÑ‚àöÀòC√Ülback
(hpcd);

1220 
	`HAL_PCD_Disc‚ÅÑ‚àöÀòC√Ülback
(
hpcd
);

1223 
hpcd
->
In¬∞‚Ñ¢Àö
->
GOTGINT
 |Ô£ø
√£mp
;

1226 
	}
}

1234 
	$HAL_PCD_WKUP_IRQH‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1237 
	`__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
();

1238 
	}
}

1241 #i‚Ä°
def√∂ed
 (
USB
)

1247 
	$HAL_PCD_IRQH‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1249 
u√∂t16_t
 
¬∞‚Äπe_√Ø
[8];

1250 
u√∂t8_t
 
i
;

1252 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_CTR
))

1256 ()
	`PCD_EP_ISR_H‚Ñ¢d√Är
(
hpcd
);

1259 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_RESET
))

1261 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_RESET
);

1263 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1264 
hpcd
->
	`Re¬£tC√Ülback
(hpcd);

1266 
	`HAL_PCD_Re¬£tC√Ülback
(
hpcd
);

1269 ()
	`HAL_PCD_S√´Add¬™ss
(
hpcd
, 0U);

1272 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_PMAOVR
))

1274 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_PMAOVR
);

1277 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_ERR
))

1279 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_ERR
);

1282 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_WKUP
))

1284 
hpcd
->
In¬∞‚Ñ¢Àö
->
CNTR
 &Ô£ø(
u√∂t16_t
√ã~(
USB_CNTR_LP_MODE
);

1285 
hpcd
->
In¬∞‚Ñ¢Àö
->
CNTR
 &Ô£ø(
u√∂t16_t
√ã~(
USB_CNTR_FSUSP
);

1287 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1288 
hpcd
->
	`ResumeC√Ülback
(hpcd);

1290 
	`HAL_PCD_ResumeC√Ülback
(
hpcd
);

1293 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_WKUP
);

1296 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_SUSP
))

1301 
i
 = 0U; i < 8U; i++)

1303 
¬∞‚Äπe_√Ø
[
i
] = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In¬∞‚Ñ¢Àö
, i);

1307 
hpcd
->
In¬∞‚Ñ¢Àö
->
CNTR
 |Ô£ø(
u√∂t16_t
)(
USB_CNTR_FRES
);

1310 
hpcd
->
In¬∞‚Ñ¢Àö
->
CNTR
 &Ô£ø(
u√∂t16_t
)(~
USB_CNTR_FRES
);

1313 (
hpcd
->
In¬∞‚Ñ¢Àö
->
ISTR
 & 
USB_ISTR_RESET
) == 0U)

1318 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_RESET
);

1321 
i
 = 0U; i < 8U; i++)

1323 
	`PCD_SET_ENDPOINT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
i
, 
¬∞‚Äπe_√Ø
[i]);

1327 
hpcd
->
In¬∞‚Ñ¢Àö
->
CNTR
 |Ô£ø(
u√∂t16_t
)
USB_CNTR_FSUSP
;

1330 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_SUSP
);

1332 
hpcd
->
In¬∞‚Ñ¢Àö
->
CNTR
 |Ô£ø(
u√∂t16_t
)
USB_CNTR_LP_MODE
;

1334 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1335 
hpcd
->
	`Su‚Ä¢√≠dC√Ülback
(hpcd);

1337 
	`HAL_PCD_Su‚Ä¢√≠dC√Ülback
(
hpcd
);

1341 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_SOF
))

1343 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_SOF
);

1345 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1346 
hpcd
->
	`SOFC√Ülback
(hpcd);

1348 
	`HAL_PCD_SOFC√Ülback
(
hpcd
);

1352 i‚Ä°(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_ESOF
))

1355 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_ESOF
);

1357 
	}
}

1365 
	$HAL_PCD_WKUP_IRQH‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1368 
	`__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
();

1369 
	}
}

1378 
__w√≥k
 
	$HAL_PCD_D¬©aOutS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
)

1381 
	`UNUSED
(
hpcd
);

1382 
	`UNUSED
(
√Ønum
);

1387 
	}
}

1395 
__w√≥k
 
	$HAL_PCD_D¬©aInS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
)

1398 
	`UNUSED
(
hpcd
);

1399 
	`UNUSED
(
√Ønum
);

1404 
	}
}

1410 
__w√≥k
 
	$HAL_PCD_S√´upS√®geC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1413 
	`UNUSED
(
hpcd
);

1418 
	}
}

1425 
__w√≥k
 
	$HAL_PCD_SOFC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1428 
	`UNUSED
(
hpcd
);

1433 
	}
}

1440 
__w√≥k
 
	$HAL_PCD_Re¬£tC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1443 
	`UNUSED
(
hpcd
);

1448 
	}
}

1455 
__w√≥k
 
	$HAL_PCD_Su‚Ä¢√≠dC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1458 
	`UNUSED
(
hpcd
);

1463 
	}
}

1470 
__w√≥k
 
	$HAL_PCD_ResumeC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1473 
	`UNUSED
(
hpcd
);

1478 
	}
}

1486 
__w√≥k
 
	$HAL_PCD_ISOOUTIncom‚àÇ√´eC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
)

1489 
	`UNUSED
(
hpcd
);

1490 
	`UNUSED
(
√Ønum
);

1495 
	}
}

1503 
__w√≥k
 
	$HAL_PCD_ISOINIncom‚àÇ√´eC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ønum
)

1506 
	`UNUSED
(
hpcd
);

1507 
	`UNUSED
(
√Ønum
);

1512 
	}
}

1519 
__w√≥k
 
	$HAL_PCD_C‚ÅÑ‚àöÀòC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1522 
	`UNUSED
(
hpcd
);

1527 
	}
}

1534 
__w√≥k
 
	$HAL_PCD_Disc‚ÅÑ‚àöÀòC√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1537 
	`UNUSED
(
hpcd
);

1542 
	}
}

1568 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_DevC‚ÅÑ‚àöÀò
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1570 
	`__HAL_LOCK
(
hpcd
);

1572 #i‚Ä°
	`def√∂ed
 (
USB
)

1573 
	`HAL_PCDEx_S√´C‚ÅÑ‚àöÀòi‚ÅÑS√®√£
(
hpcd
, 1U);

1576 ()
	`USB_DevC‚ÅÑ‚àöÀò
(
hpcd
->
In¬∞‚Ñ¢Àö
);

1577 
	`__HAL_UNLOCK
(
hpcd
);

1579  
HAL_OK
;

1580 
	}
}

1587 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_DevDisc‚ÅÑ‚àöÀò
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1589 
	`__HAL_LOCK
(
hpcd
);

1591 #i‚Ä°
	`def√∂ed
 (
USB
)

1592 
	`HAL_PCDEx_S√´C‚ÅÑ‚àöÀòi‚ÅÑS√®√£
(
hpcd
, 0U);

1595 ()
	`USB_DevDisc‚ÅÑ‚àöÀò
(
hpcd
->
In¬∞‚Ñ¢Àö
);

1596 
	`__HAL_UNLOCK
(
hpcd
);

1598  
HAL_OK
;

1599 
	}
}

1607 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_S√´Add¬™ss
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
add¬™ss
)

1609 
	`__HAL_LOCK
(
hpcd
);

1610 
hpcd
->
USB_Add¬™ss
 = 
add¬™ss
;

1611 ()
	`USB_S√´DevAdd¬™ss
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
add¬™ss
);

1612 
	`__HAL_UNLOCK
(
hpcd
);

1614  
HAL_OK
;

1615 
	}
}

1624 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_O‚â•n
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
,

1625 
u√∂t16_t
 
√Ø_mps
, 
u√∂t8_t
 
√Ø_ty‚â•
)

1627 
HAL_S√®tusTy‚â•Def
 
¬™t
 = 
HAL_OK
;

1628 
PCD_EPTy‚â•Def
 *
√Ø
;

1630 i‚Ä°((
√Ø_addr
 & 0x80U) == 0x80U)

1632 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1633 
√Ø
->
is_√∂
 = 1U;

1637 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1638 
√Ø
->
is_√∂
 = 0U;

1641 
√Ø
->
num
 = 
√Ø_addr
 & 
EP_ADDR_MSK
;

1642 
√Ø
->
max‚àëck√´
 = 
√Ø_mps
;

1643 
√Ø
->
ty‚â•
 = 
√Ø_ty‚â•
;

1645 i‚Ä°(
√Ø
->
is_√∂
 != 0U)

1648 
√Ø
->
tx_fifo_num
 =√âp->
num
;

1651 i‚Ä°(
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_BULK
)

1653 
√Ø
->
d¬©a_pid_¬∞¬®t
 = 0U;

1656 
	`__HAL_LOCK
(
hpcd
);

1657 ()
	`USB_AÀòiv¬©eEndpo√∂t
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1658 
	`__HAL_UNLOCK
(
hpcd
);

1660  
¬™t
;

1661 
	}
}

1669 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_Clo¬£
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
)

1671 
PCD_EPTy‚â•Def
 *
√Ø
;

1673 i‚Ä°((
√Ø_addr
 & 0x80U) == 0x80U)

1675 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1676 
√Ø
->
is_√∂
 = 1U;

1680 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1681 
√Ø
->
is_√∂
 = 0U;

1683 
√Ø
->
num
 = 
√Ø_addr
 & 
EP_ADDR_MSK
;

1685 
	`__HAL_LOCK
(
hpcd
);

1686 ()
	`USB_D√≥Àòiv¬©eEndpo√∂t
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1687 
	`__HAL_UNLOCK
(
hpcd
);

1688  
HAL_OK
;

1689 
	}
}

1700 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_ReÀöive
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
, u√∂t8_√†*
pBuf
, 
u√∂t32_t
 
√Än
)

1702 
PCD_EPTy‚â•Def
 *
√Ø
;

1704 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1707 
√Ø
->
x‚Äûr_buff
 = 
pBuf
;

1708 
√Ø
->
x‚Äûr_√Än
 = 
√Än
;

1709 
√Ø
->
x‚Äûr_cou¬°
 = 0U;

1710 
√Ø
->
is_√∂
 = 0U;

1711 
√Ø
->
num
 = 
√Ø_addr
 & 
EP_ADDR_MSK
;

1713 i‚Ä°((
√Ø_addr
 & 
EP_ADDR_MSK
) == 0U)

1715 ()
	`USB_EP0S√®œÄX‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1719 ()
	`USB_EPS√®œÄX‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1722  
HAL_OK
;

1723 
	}
}

1731 
u√∂t32_t
 
	$HAL_PCD_EP_G√´RxCou¬°
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
)

1733  
hpcd
->
OUT_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
].
x‚Äûr_cou¬°
;

1734 
	}
}

1743 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_T√∏nsm√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
, u√∂t8_√†*
pBuf
, 
u√∂t32_t
 
√Än
)

1745 
PCD_EPTy‚â•Def
 *
√Ø
;

1747 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1750 
√Ø
->
x‚Äûr_buff
 = 
pBuf
;

1751 
√Ø
->
x‚Äûr_√Än
 = 
√Än
;

1752 #i‚Ä°
	`def√∂ed
 (
USB
)

1753 
√Ø
->
x‚Äûr_f√ªl_db
 = 1U;

1754 
√Ø
->
x‚Äûr_√Än_db
 = 
√Än
;

1756 
√Ø
->
x‚Äûr_cou¬°
 = 0U;

1757 
√Ø
->
is_√∂
 = 1U;

1758 
√Ø
->
num
 = 
√Ø_addr
 & 
EP_ADDR_MSK
;

1760 i‚Ä°((
√Ø_addr
 & 
EP_ADDR_MSK
) == 0U)

1762 ()
	`USB_EP0S√®œÄX‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1766 ()
	`USB_EPS√®œÄX‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1769  
HAL_OK
;

1770 
	}
}

1778 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_S√´S√®≈í
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
)

1780 
PCD_EPTy‚â•Def
 *
√Ø
;

1782 i‚Ä°(((
u√∂t32_t
)
√Ø_addr
 & 
EP_ADDR_MSK
√ã> 
hpcd
->
In√¥
.
dev_√≠dpo√∂ts
)

1784  
HAL_ERROR
;

1787 i‚Ä°((0x80U & 
√Ø_addr
) == 0x80U)

1789 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1790 
√Ø
->
is_√∂
 = 1U;

1794 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø_addr
];

1795 
√Ø
->
is_√∂
 = 0U;

1798 
√Ø
->
is_¬∞√Ül
 = 1U;

1799 
√Ø
->
num
 = 
√Ø_addr
 & 
EP_ADDR_MSK
;

1801 
	`__HAL_LOCK
(
hpcd
);

1803 ()
	`USB_EPS√´S√®≈í
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1805 i‚Ä°((
√Ø_addr
 & 
EP_ADDR_MSK
) == 0U)

1807 ()
	`USB_EP0_OutS√®œÄ
(
hpcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
 *)hpcd->
S√´up
);

1810 
	`__HAL_UNLOCK
(
hpcd
);

1812  
HAL_OK
;

1813 
	}
}

1821 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_C√ÉS√®≈í
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
)

1823 
PCD_EPTy‚â•Def
 *
√Ø
;

1825 i‚Ä°(((
u√∂t32_t
)
√Ø_addr
 & 0x0FU√ã> 
hpcd
->
In√¥
.
dev_√≠dpo√∂ts
)

1827  
HAL_ERROR
;

1830 i‚Ä°((0x80U & 
√Ø_addr
) == 0x80U)

1832 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1833 
√Ø
->
is_√∂
 = 1U;

1837 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

1838 
√Ø
->
is_√∂
 = 0U;

1841 
√Ø
->
is_¬∞√Ül
 = 0U;

1842 
√Ø
->
num
 = 
√Ø_addr
 & 
EP_ADDR_MSK
;

1844 
	`__HAL_LOCK
(
hpcd
);

1845 ()
	`USB_EPC√Ä¬®S√®≈í
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

1846 
	`__HAL_UNLOCK
(
hpcd
);

1848  
HAL_OK
;

1849 
	}
}

1857 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_Flush
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
√Ø_addr
)

1859 
	`__HAL_LOCK
(
hpcd
);

1861 i‚Ä°((
√Ø_addr
 & 0x80U) == 0x80U)

1863 ()
	`USB_FlushTxFifo
(
hpcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)
√Ø_addr
 & 
EP_ADDR_MSK
);

1867 ()
	`USB_FlushRxFifo
(
hpcd
->
In¬∞‚Ñ¢Àö
);

1870 
	`__HAL_UNLOCK
(
hpcd
);

1872  
HAL_OK
;

1873 
	}
}

1880 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_AÀòiv¬©eRem≈∏eWakeup
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1882  (
	`USB_AÀòiv¬©eRem≈∏eWakeup
(
hpcd
->
In¬∞‚Ñ¢Àö
));

1883 
	}
}

1890 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_DeAÀòiv¬©eRem≈∏eWakeup
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1892  (
	`USB_DeAÀòiv¬©eRem≈∏eWakeup
(
hpcd
->
In¬∞‚Ñ¢Àö
));

1893 
	}
}

1919 
PCD_S√®√£Ty‚â•Def
 
	$HAL_PCD_G√´S√®√£
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

1921  
hpcd
->
S√®√£
;

1922 
	}
}

1936 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

1943 
HAL_S√®tusTy‚â•Def
 
	$PCD_Wr√¥eEm¬±yTxFifo
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t32_t
 
√Ønum
)

1945 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hpcd
->
In¬∞‚Ñ¢Àö
;

1946 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1947 
USB_OTG_EPTy‚â•Def
 *
√Ø
;

1948 
u√∂t32_t
 
√Än
;

1949 
u√∂t32_t
 
√Än32b
;

1950 
u√∂t32_t
 
fif‚Ç¨m¬±ymsk
;

1952 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ønum
];

1954 i‚Ä°(
√Ø
->
x‚Äûr_cou¬°
 >√âp->
x‚Äûr_√Än
)

1956  
HAL_ERROR
;

1959 
√Än
 = 
√Ø
->
x‚Äûr_√Än
 -√âp->
x‚Äûr_cou¬°
;

1961 i‚Ä°(
√Än
 > 
√Ø
->
max‚àëck√´
)

1963 
√Än
 = 
√Ø
->
max‚àëck√´
;

1966 
√Än32b
 = (
√Än
 + 3U) / 4U;

1968 ((
	`USBx_INEP
(
√Ønum
)->
DTXFSTS
 & 
USB_OTG_DTXFSTS_INEPTFSAV
√ã>Ô£ø
√Än32b
) &&

1969 (
√Ø
->
x‚Äûr_cou¬°
 <√âp->
x‚Äûr_√Än
) && (ep->xfer_len != 0U))

1972 
√Än
 = 
√Ø
->
x‚Äûr_√Än
 -√âp->
x‚Äûr_cou¬°
;

1974 i‚Ä°(
√Än
 > 
√Ø
->
max‚àëck√´
)

1976 
√Än
 = 
√Ø
->
max‚àëck√´
;

1978 
√Än32b
 = (
√Än
 + 3U) / 4U;

1980 ()
	`USB_Wr√¥ePack√´
(
USBx
, 
√Ø
->
x‚Äûr_buff
, (
u√∂t8_t
)
√Ønum
, (
u√∂t16_t
)
√Än
);

1982 
√Ø
->
x‚Äûr_buff
 +Ô£ø
√Än
;

1983 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø
√Än
;

1986 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 <Ô£ø√Ø->
x‚Äûr_cou¬°
)

1988 
fif‚Ç¨m¬±ymsk
 = (
u√∂t32_t
)(0x1UL << (
√Ønum
 & 
EP_ADDR_MSK
));

1989 
USBx_DEVICE
->
DIEPEMPMSK
 &Ô£ø~
fif‚Ç¨m¬±ymsk
;

1992  
HAL_OK
;

1993 
	}
}

2002 
HAL_S√®tusTy‚â•Def
 
	$PCD_EP_OutX‚Ä∞Com‚àÇ√´e_√∂t
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t32_t
 
√Ønum
)

2004 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hpcd
->
In¬∞‚Ñ¢Àö
;

2005 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

2006 
u√∂t32_t
 
gSNPSiD
 = *(
__IO
 u√∂t32_√†*)(&
USBx
->
CID
 + 0x1U);

2007 
u√∂t32_t
 
D‚Ç¨p√∂tReg
 = 
	`USBx_OUTEP
(
√Ønum
)->
DOEPINT
;

2009 i‚Ä°(
gSNPSiD
 =Ô£ø
USB_OTG_CORE_ID_310A
)

2012 i‚Ä°((
D‚Ç¨p√∂tReg
 & 
USB_OTG_DOEPINT_STPKTRX
) == USB_OTG_DOEPINT_STPKTRX)

2014 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_STPKTRX
);

2018 i‚Ä°((
D‚Ç¨p√∂tReg
 & 
USB_OTG_DOEPINT_OTEPSPR
) == USB_OTG_DOEPINT_OTEPSPR)

2020 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_OTEPSPR
);

2023 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2024 
hpcd
->
	`D¬©aOutS√®geC√Ülback
(hpcd, (
u√∂t8_t
)
√Ønum
);

2026 
	`HAL_PCD_D¬©aOutS√®geC√Ülback
(
hpcd
, (
u√∂t8_t
)
√Ønum
);

2032 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2033 
hpcd
->
	`D¬©aOutS√®geC√Ülback
(hpcd, (
u√∂t8_t
)
√Ønum
);

2035 
	`HAL_PCD_D¬©aOutS√®geC√Ülback
(
hpcd
, (
u√∂t8_t
)
√Ønum
);

2039  
HAL_OK
;

2040 
	}
}

2049 
HAL_S√®tusTy‚â•Def
 
	$PCD_EP_OutS√´upPack√´_√∂t
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t32_t
 
√Ønum
)

2051 
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
 = 
hpcd
->
In¬∞‚Ñ¢Àö
;

2052 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

2053 
u√∂t32_t
 
gSNPSiD
 = *(
__IO
 u√∂t32_√†*)(&
USBx
->
CID
 + 0x1U);

2054 
u√∂t32_t
 
D‚Ç¨p√∂tReg
 = 
	`USBx_OUTEP
(
√Ønum
)->
DOEPINT
;

2056 i‚Ä°((
gSNPSiD
 > 
USB_OTG_CORE_ID_300A
) &&

2057 ((
D‚Ç¨p√∂tReg
 & 
USB_OTG_DOEPINT_STPKTRX
) == USB_OTG_DOEPINT_STPKTRX))

2059 
	`CLEAR_OUT_EP_INTR
(
√Ønum
, 
USB_OTG_DOEPINT_STPKTRX
);

2063 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2064 
hpcd
->
	`S√´upS√®geC√Ülback
(hpcd);

2066 
	`HAL_PCD_S√´upS√®geC√Ülback
(
hpcd
);

2069  
HAL_OK
;

2070 
	}
}

2073 #i‚Ä°
def√∂ed
 (
USB
)

2079 
HAL_S√®tusTy‚â•Def
 
	$PCD_EP_ISR_H‚Ñ¢d√Är
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
)

2081 
PCD_EPTy‚â•Def
 *
√Ø
;

2082 
u√∂t16_t
 
cou¬°
, 
wI¬∞r
, 
wEPV√Ü
, 
TxBy√£Nb¬™
;

2083 
u√∂t8_t
 
√Ø√∂dex
;

2086 (
hpcd
->
In¬∞‚Ñ¢Àö
->
ISTR
 & 
USB_ISTR_CTR
) != 0U)

2088 
wI¬∞r
 = 
hpcd
->
In¬∞‚Ñ¢Àö
->
ISTR
;

2091 
√Ø√∂dex
 = (
u√∂t8_t
)(
wI¬∞r
 & 
USB_ISTR_EP_ID
);

2093 i‚Ä°(
√Ø√∂dex
 == 0U)

2098 i‚Ä°((
wI¬∞r
 & 
USB_ISTR_DIR
) == 0U)

2104 
	`PCD_CLEAR_TX_EP_CTR
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
PCD_ENDP0
);

2105 
√Ø
 = &
hpcd
->
IN_√Ø
[0];

2107 
√Ø
->
x‚Äûr_cou¬°
 = 
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
,√âp->
num
);

2108 
√Ø
->
x‚Äûr_buff
 +Ô£ø√Ø->
x‚Äûr_cou¬°
;

2111 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2112 
hpcd
->
	`D¬©aInS√®geC√Ülback
(hpcd, 0U);

2114 
	`HAL_PCD_D¬©aInS√®geC√Ülback
(
hpcd
, 0U);

2117 i‚Ä°((
hpcd
->
USB_Add¬™ss
 > 0U√ã&& (
√Ø
->
x‚Äûr_√Än
 == 0U))

2119 
hpcd
->
In¬∞‚Ñ¢Àö
->
DADDR
 = ((
u√∂t16_t
)hpcd->
USB_Add¬™ss
 | 
USB_DADDR_EF
);

2120 
hpcd
->
USB_Add¬™ss
 = 0U;

2129 
√Ø
 = &
hpcd
->
OUT_√Ø
[0];

2130 
wEPV√Ü
 = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
PCD_ENDP0
);

2132 i‚Ä°((
wEPV√Ü
 & 
USB_EP_SETUP
) != 0U)

2135 
√Ø
->
x‚Äûr_cou¬°
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
,√âp->
num
);

2137 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, (
u√∂t8_t
 *)hpcd->
S√´up
,

2138 
√Ø
->
pm√òd¬™ss
, (
u√∂t16_t
√ép->
x‚Äûr_cou¬°
);

2141 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
PCD_ENDP0
);

2144 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2145 
hpcd
->
	`S√´upS√®geC√Ülback
(hpcd);

2147 
	`HAL_PCD_S√´upS√®geC√Ülback
(
hpcd
);

2150 i‚Ä°((
wEPV√Ü
 & 
USB_EP_CTR_RX
) != 0U)

2152 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
PCD_ENDP0
);

2155 
√Ø
->
x‚Äûr_cou¬°
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
,√âp->
num
);

2157 i‚Ä°((
√Ø
->
x‚Äûr_cou¬°
 !Ô£ø0U√ã&& (√Ø->
x‚Äûr_buff
 != 0U))

2159 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,

2160 
√Ø
->
pm√òd¬™ss
, (
u√∂t16_t
√ép->
x‚Äûr_cou¬°
);

2162 
√Ø
->
x‚Äûr_buff
 +Ô£ø√Ø->
x‚Äûr_cou¬°
;

2165 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2166 
hpcd
->
	`D¬©aOutS√®geC√Ülback
(hpcd, 0U);

2168 
	`HAL_PCD_D¬©aOutS√®geC√Ülback
(
hpcd
, 0U);

2172 
	`PCD_SET_EP_RX_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
PCD_ENDP0
, 
√Ø
->
max‚àëck√´
);

2173 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
PCD_ENDP0
, 
USB_EP_RX_VALID
);

2181 
wEPV√Ü
 = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø√∂dex
);

2183 i‚Ä°((
wEPV√Ü
 & 
USB_EP_CTR_RX
) != 0U)

2186 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø√∂dex
);

2187 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø√∂dex
];

2190 i‚Ä°(
√Ø
->
doub√Äbuf‚Äûr
 == 0U)

2192 
cou¬°
 = (
u√∂t16_t
)
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2194 i‚Ä°(
cou¬°
 != 0U)

2196 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òd¬™ss
, 
cou¬°
);

2202 i‚Ä°(
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_BULK
)

2204 
cou¬°
 = 
	`HAL_PCD_EP_DB_ReÀöive
(
hpcd
, 
√Ø
, 
wEPV√Ü
);

2209 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 0U);

2211 i‚Ä°((
	`PCD_GET_ENDPOINT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
√ã& 
USB_EP_DTOG_RX
) != 0U)

2214 
cou¬°
 = (
u√∂t16_t
)
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2216 i‚Ä°(
cou¬°
 != 0U)

2218 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òddr0
, 
cou¬°
);

2224 
cou¬°
 = (
u√∂t16_t
)
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2226 i‚Ä°(
cou¬°
 != 0U)

2228 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òddr1
, 
cou¬°
);

2234 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø
cou¬°
;

2235 
√Ø
->
x‚Äûr_buff
 +Ô£ø
cou¬°
;

2237 i‚Ä°((
√Ø
->
x‚Äûr_√Än
 =Ô£ø0U√ã|| (
cou¬°
 <√âp->
max‚àëck√´
))

2240 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2241 
hpcd
->
	`D¬©aOutS√®geC√Ülback
(hpcd, 
√Ø
->
num
);

2243 
	`HAL_PCD_D¬©aOutS√®geC√Ülback
(
hpcd
, 
√Ø
->
num
);

2248 (√ã
	`USB_EPS√®œÄX‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

2253 i‚Ä°((
wEPV√Ü
 & 
USB_EP_CTR_TX
) != 0U)

2255 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø√∂dex
];

2258 
	`PCD_CLEAR_TX_EP_CTR
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø√∂dex
);

2261 i‚Ä°((
√Ø
->
ty‚â•
 !Ô£ø
EP_TYPE_BULK
) ||

2262 ((
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_BULK
√ã&& ((
wEPV√Ü
 & 
USB_EP_KIND
) == 0U)))

2265 
TxBy√£Nb¬™
 = (
u√∂t16_t
)
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2267 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 > 
TxBy√£Nb¬™
)

2269 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
TxBy√£Nb¬™
;

2273 
√Ø
->
x‚Äûr_√Än
 = 0U;

2277 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

2280 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2281 
hpcd
->
	`D¬©aInS√®geC√Ülback
(hpcd, 
√Ø
->
num
);

2283 
	`HAL_PCD_D¬©aInS√®geC√Ülback
(
hpcd
, 
√Ø
->
num
);

2289 
√Ø
->
x‚Äûr_buff
 +Ô£ø
TxBy√£Nb¬™
;

2290 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø
TxBy√£Nb¬™
;

2291 ()
	`USB_EPS√®œÄX‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
);

2297 ()
	`HAL_PCD_EP_DB_T√∏nsm√¥
(
hpcd
, 
√Ø
, 
wEPV√Ü
);

2303  
HAL_OK
;

2304 
	}
}

2314 
u√∂t16_t
 
	$HAL_PCD_EP_DB_ReÀöive
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

2315 
PCD_EPTy‚â•Def
 *
√Ø
, 
u√∂t16_t
 
wEPV√Ü
)

2317 
u√∂t16_t
 
cou¬°
;

2320 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_RX
) != 0U)

2323 
cou¬°
 = (
u√∂t16_t
)
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2325 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >Ô£ø
cou¬°
)

2327 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
cou¬°
;

2331 
√Ø
->
x‚Äûr_√Än
 = 0U;

2334 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

2337 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 
USB_EP_RX_NAK
);

2341 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_TX
) != 0U)

2343 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 0U);

2346 i‚Ä°(
cou¬°
 != 0U)

2348 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òddr0
, 
cou¬°
);

2355 
cou¬°
 = (
u√∂t16_t
)
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2357 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >Ô£ø
cou¬°
)

2359 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
cou¬°
;

2363 
√Ø
->
x‚Äûr_√Än
 = 0U;

2366 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

2369 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 
USB_EP_RX_NAK
);

2373 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_TX
) == 0U)

2375 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 0U);

2378 i‚Ä°(
cou¬°
 != 0U)

2380 
	`USB_R√≥dPMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òddr1
, 
cou¬°
);

2384  
cou¬°
;

2385 
	}
}

2395 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCD_EP_DB_T√∏nsm√¥
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
,

2396 
PCD_EPTy‚â•Def
 *
√Ø
, 
u√∂t16_t
 
wEPV√Ü
)

2398 
u√∂t32_t
 
√Än
;

2399 
u√∂t16_t
 
TxBy√£Nb¬™
;

2402 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_TX
) != 0U)

2405 
TxBy√£Nb¬™
 = (
u√∂t16_t
)
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2407 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 > 
TxBy√£Nb¬™
)

2409 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
TxBy√£Nb¬™
;

2413 
√Ø
->
x‚Äûr_√Än
 = 0U;

2416 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

2419 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2420 
hpcd
->
	`D¬©aInS√®geC√Ülback
(hpcd, 
√Ø
->
num
);

2422 
	`HAL_PCD_D¬©aInS√®geC√Ülback
(
hpcd
, 
√Ø
->
num
);

2425 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_RX
) != 0U)

2427 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 1U);

2433 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_RX
) != 0U)

2435 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 1U);

2439 i‚Ä°(
√Ø
->
x‚Äûr_f√ªl_db
 == 1U)

2441 
√Ø
->
x‚Äûr_buff
 +Ô£ø
TxBy√£Nb¬™
;

2442 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø
TxBy√£Nb¬™
;

2445 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 >Ô£ø√Ø->
max‚àëck√´
)

2447 
√Än
 = 
√Ø
->
max‚àëck√´
;

2448 
√Ø
->
x‚Äûr_√Än_db
 -Ô£ø
√Än
;

2450 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 == 0U)

2452 
√Än
 = 
TxBy√£Nb¬™
;

2453 
√Ø
->
x‚Äûr_f√ªl_db
 = 0U;

2457 
√Ø
->
x‚Äûr_f√ªl_db
 = 0U;

2458 
√Än
 = 
√Ø
->
x‚Äûr_√Än_db
;

2459 
√Ø
->
x‚Äûr_√Än_db
 = 0U;

2464 
	`PCD_SET_EP_DBUF0_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2467 
	`USB_Wr√¥ePMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òddr0
, (
u√∂t16_t
)
√Än
);

2474 
TxBy√£Nb¬™
 = (
u√∂t16_t
)
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
);

2476 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >Ô£ø
TxBy√£Nb¬™
)

2478 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
TxBy√£Nb¬™
;

2482 
√Ø
->
x‚Äûr_√Än
 = 0U;

2486 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

2489 #i‚Ä°(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2490 
hpcd
->
	`D¬©aInS√®geC√Ülback
(hpcd, 
√Ø
->
num
);

2492 
	`HAL_PCD_D¬©aInS√®geC√Ülback
(
hpcd
, 
√Ø
->
num
);

2496 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_RX
) == 0U)

2498 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 1U);

2504 i‚Ä°((
wEPV√Ü
 & 
USB_EP_DTOG_RX
) == 0U)

2506 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 1U);

2510 i‚Ä°(
√Ø
->
x‚Äûr_f√ªl_db
 == 1U)

2512 
√Ø
->
x‚Äûr_buff
 +Ô£ø
TxBy√£Nb¬™
;

2513 
√Ø
->
x‚Äûr_cou¬°
 +Ô£ø
TxBy√£Nb¬™
;

2516 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 >Ô£ø√Ø->
max‚àëck√´
)

2518 
√Än
 = 
√Ø
->
max‚àëck√´
;

2519 
√Ø
->
x‚Äûr_√Än_db
 -Ô£ø
√Än
;

2521 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 == 0U)

2523 
√Än
 = 
TxBy√£Nb¬™
;

2524 
√Ø
->
x‚Äûr_f√ªl_db
 = 0U;

2528 
√Än
 = 
√Ø
->
x‚Äûr_√Än_db
;

2529 
√Ø
->
x‚Äûr_√Än_db
 = 0U;

2530 
√Ø
->
x‚Äûr_f√ªl_db
 = 0;

2534 
	`PCD_SET_EP_DBUF1_CNT
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2537 
	`USB_Wr√¥ePMA
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òddr1
, (
u√∂t16_t
)
√Än
);

2543 
	`PCD_SET_EP_TX_STATUS
(
hpcd
->
In¬∞‚Ñ¢Àö
, 
√Ø
->
num
, 
USB_EP_TX_VALID
);

2545  
HAL_OK
;

2546 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd_ex.c

25 
	~"¬∞m32f1xx_h√Ü.h
"

36 #ifde‚Ä°
HAL_PCD_MODULE_ENABLED


38 #i‚Ä°
def√∂ed
 (
USB
√ã|| def√∂ed (
USB_OTG_FS
)

63 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

71 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCDEx_S√´TxFiFo
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
fifo
, 
u√∂t16_t
 
size
)

73 
u√∂t8_t
 
i
;

74 
u√∂t32_t
 
Tx_Off¬£t
;

86 
Tx_Off¬£t
 = 
hpcd
->
In¬∞‚Ñ¢Àö
->
GRXFSIZ
;

88 i‚Ä°(
fifo
 == 0U)

90 
hpcd
->
In¬∞‚Ñ¢Àö
->
DIEPTXF0_HNPTXFSIZ
 = ((
u√∂t32_t
)
size
 << 16√ã| 
Tx_Off¬£t
;

94 
Tx_Off¬£t
 +Ô£ø(
hpcd
->
In¬∞‚Ñ¢Àö
->
DIEPTXF0_HNPTXFSIZ
) >> 16;

95 
i
 = 0U; i < (
fifo
 - 1U); i++)

97 
Tx_Off¬£t
 +Ô£ø(
hpcd
->
In¬∞‚Ñ¢Àö
->
DIEPTXF
[
i
] >> 16);

101 
hpcd
->
In¬∞‚Ñ¢Àö
->
DIEPTXF
[
fifo
 - 1U] = ((
u√∂t32_t
)
size
 << 16√ã| 
Tx_Off¬£t
;

104  
HAL_OK
;

105 
	}
}

113 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCDEx_S√´RxFiFo
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t16_t
 
size
)

115 
hpcd
->
In¬∞‚Ñ¢Àö
->
GRXFSIZ
 = 
size
;

117  
HAL_OK
;

118 
	}
}

120 #i‚Ä°
def√∂ed
 (
USB
)

138 
HAL_S√®tusTy‚â•Def
 
	$HAL_PCDEx_PMAC‚ÅÑfig
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t16_t
 
√Ø_addr
,

139 
u√∂t16_t
 
√Ø_k√∂d
, 
u√∂t32_t
 
pm√òd¬™ss
)

141 
PCD_EPTy‚â•Def
 *
√Ø
;

144 i‚Ä°((0x80U & 
√Ø_addr
) == 0x80U)

146 
√Ø
 = &
hpcd
->
IN_√Ø
[
√Ø_addr
 & 
EP_ADDR_MSK
];

150 
√Ø
 = &
hpcd
->
OUT_√Ø
[
√Ø_addr
];

154 i‚Ä°(
√Ø_k√∂d
 =Ô£ø
PCD_SNG_BUF
)

157 
√Ø
->
doub√Äbuf‚Äûr
 = 0U;

159 
√Ø
->
pm√òd¬™ss
 = (
u√∂t16_t
)pmaadress;

164 
√Ø
->
doub√Äbuf‚Äûr
 = 1U;

166 
√Ø
->
pm√òddr0
 = (
u√∂t16_t
)(
pm√òd¬™ss
 & 0xFFFFU);

167 
√Ø
->
pm√òddr1
 = (
u√∂t16_t
)((
pm√òd¬™ss
 & 0xFFFF0000U) >> 16);

170  
HAL_OK
;

171 
	}
}

181 
__w√≥k
 
	$HAL_PCDEx_S√´C‚ÅÑ‚àöÀòi‚ÅÑS√®√£
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
u√∂t8_t
 
¬∞¬©e
)

184 
	`UNUSED
(
hpcd
);

185 
	`UNUSED
(
¬∞¬©e
);

189 
	}
}

198 
__w√≥k
 
	$HAL_PCDEx_LPM_C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
PCD_LPM_MsgTy‚â•Def
 
msg
)

201 
	`UNUSED
(
hpcd
);

202 
	`UNUSED
(
msg
);

207 
	}
}

215 
__w√≥k
 
	$HAL_PCDEx_BCD_C√Ülback
(
PCD_H‚Ñ¢d√ÄTy‚â•Def
 *
hpcd
, 
PCD_BCD_MsgTy‚â•Def
 
msg
)

218 
	`UNUSED
(
hpcd
);

219 
	`UNUSED
(
msg
);

224 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pwr.c

27 
	~"¬∞m32f1xx_h√Ü.h
"

38 #ifde‚Ä°
HAL_PWR_MODULE_ENABLED


50 
	#PVD_MODE_IT
 0x00010000U

	)

51 
	#PVD_MODE_EVT
 0x00020000U

	)

52 
	#PVD_RISING_EDGE
 0x00000001U

	)

53 
	#PVD_FALLING_EDGE
 0x00000002U

	)

63 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

64 
	#PWR_CR_OFFSET
 0x00U

	)

65 
	#PWR_CSR_OFFSET
 0x04U

	)

66 
	#PWR_CR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CR_OFFSET
)

	)

67 
	#PWR_CSR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CSR_OFFSET
)

	)

77 
	#LPSDSR_BIT_NUMBER
 
PWR_CR_LPDS_Pos


	)

78 
	#CR_LPSDSR_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32U√ã+ (
LPSDSR_BIT_NUMBER
 * 4U)))

	)

81 
	#DBP_BIT_NUMBER
 
PWR_CR_DBP_Pos


	)

82 
	#CR_DBP_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32U√ã+ (
DBP_BIT_NUMBER
 * 4U)))

	)

85 
	#PVDE_BIT_NUMBER
 
PWR_CR_PVDE_Pos


	)

86 
	#CR_PVDE_BB
 ((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32U√ã+ (
PVDE_BIT_NUMBER
 * 4U)))

	)

98 
	#CSR_EWUP_BB
(
VAL
√ã((
u√∂t32_t
)(
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32U√ã+ (
	`POSITION_VAL
(VAL√ã* 4U)))

	)

113 
PWR_Ov√ÆlÔ¨ÇdW‚Äû
();

116 
__NOINLINE


117 
	$PWR_Ov√ÆlÔ¨ÇdW‚Äû
()

119 
__asm
 volatile( "wfe" );

120 
__asm
 volatile( "nop" );

121 
	}
}

156 
	$HAL_PWR_DeIn√¥
()

158 
	`__HAL_RCC_PWR_FORCE_RESET
();

159 
	`__HAL_RCC_PWR_RELEASE_RESET
();

160 
	}
}

169 
	$HAL_PWR_E¬´b√ÄBkUpAcÀöss
()

172 *(
__IO
 
u√∂t32_t
 *√ã
CR_DBP_BB
 = (u√∂t32_t)
ENABLE
;

173 
	}
}

182 
	$HAL_PWR_Di√üb√ÄBkUpAcÀöss
()

185 *(
__IO
 
u√∂t32_t
 *√ã
CR_DBP_BB
 = (u√∂t32_t)
DISABLE
;

186 
	}
}

316 
	$HAL_PWR_C‚ÅÑfigPVD
(
PWR_PVDTy‚â•Def
 *
sC‚ÅÑfigPVD
)

319 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_PVD_LEVEL
(
sC‚ÅÑfigPVD
->
PVDLev√±
));

320 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_PVD_MODE
(
sC‚ÅÑfigPVD
->
Mode
));

323 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC‚ÅÑfigPVD
->
PVDLev√±
);

326 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

327 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

328 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

329 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();

332 if((
sC‚ÅÑfigPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

334 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

338 if((
sC‚ÅÑfigPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

340 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

344 if((
sC‚ÅÑfigPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

346 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

349 if((
sC‚ÅÑfigPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

351 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

353 
	}
}

359 
	$HAL_PWR_E¬´b√ÄPVD
()

362 *(
__IO
 
u√∂t32_t
 *√ã
CR_PVDE_BB
 = (u√∂t32_t)
ENABLE
;

363 
	}
}

369 
	$HAL_PWR_Di√üb√ÄPVD
()

372 *(
__IO
 
u√∂t32_t
 *√ã
CR_PVDE_BB
 = (u√∂t32_t)
DISABLE
;

373 
	}
}

382 
	$HAL_PWR_E¬´b√ÄWakeUpP√∂
(
u√∂t32_t
 
WakeUpP√∂x
)

385 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpP√∂x
));

387 *(
__IO
 
u√∂t32_t
 *√ã
	`CSR_EWUP_BB
(
WakeUpP√∂x
√ãÔ£ø(u√∂t32_t)
ENABLE
;

388 
	}
}

397 
	$HAL_PWR_Di√üb√ÄWakeUpP√∂
(
u√∂t32_t
 
WakeUpP√∂x
)

400 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpP√∂x
));

402 *(
__IO
 
u√∂t32_t
 *√ã
	`CSR_EWUP_BB
(
WakeUpP√∂x
√ãÔ£ø(u√∂t32_t)
DISABLE
;

403 
	}
}

417 
	$HAL_PWR_E¬°√ÆSLEEPMode
(
u√∂t32_t
 
Regu≈ìt‚Äπ
, 
u√∂t8_t
 
SLEEPE¬°ry
)

422 
	`UNUSED
(
Regu≈ìt‚Äπ
);

424 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¬°ry
));

427 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

430 if(
SLEEPE¬°ry
 =Ô£ø
PWR_SLEEPENTRY_WFI
)

433 
	`__WFI
();

438 
	`__SEV
();

439 
	`__WFE
();

440 
	`__WFE
();

442 
	}
}

463 
	$HAL_PWR_E¬°√ÆSTOPMode
(
u√∂t32_t
 
Regu≈ìt‚Äπ
, 
u√∂t8_t
 
STOPE¬°ry
)

466 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_REGULATOR
(
Regu≈ìt‚Äπ
));

467 
	`as¬£œÄ_‚àë√∏m
(
	`IS_PWR_STOP_ENTRY
(
STOPE¬°ry
));

470 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

473 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_LPDS
, 
Regu≈ìt‚Äπ
);

476 
	`SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

479 if(
STOPE¬°ry
 =Ô£ø
PWR_STOPENTRY_WFI
)

482 
	`__WFI
();

487 
	`__SEV
();

488 
	`PWR_Ov√ÆlÔ¨ÇdW‚Äû
();

489 
	`PWR_Ov√ÆlÔ¨ÇdW‚Äû
();

492 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

493 
	}
}

503 
	$HAL_PWR_E¬°√ÆSTANDBYMode
()

506 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

509 
	`SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

512 #i‚Ä°
	`def√∂ed
 ( 
__CC_ARM
)

513 
	`__f‚ÄπÀö_¬∞‚Äπes
();

516 
	`__WFI
();

517 
	}
}

528 
	$HAL_PWR_E¬´b√ÄS√Ä√ØOnEx√¥
()

531 
	`SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

532 
	}
}

541 
	$HAL_PWR_Di√üb√ÄS√Ä√ØOnEx√¥
()

544 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

545 
	}
}

554 
	$HAL_PWR_E¬´b√ÄSEVOnP√≠d
()

557 
	`SET_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SEVONPEND_Msk
));

558 
	}
}

567 
	$HAL_PWR_Di√üb√ÄSEVOnP√≠d
()

570 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
u√∂t32_t
)
SCB_SCR_SEVONPEND_Msk
));

571 
	}
}

580 
	$HAL_PWR_PVD_IRQH‚Ñ¢d√Är
()

583 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(√ã!Ô£ø
RESET
)

586 
	`HAL_PWR_PVDC√Ülback
();

589 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

591 
	}
}

597 
__w√≥k
 
	$HAL_PWR_PVDC√Ülback
()

602 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c

63 
	~"¬∞m32f1xx_h√Ü.h
"

74 #ifde‚Ä°
HAL_RCC_MODULE_ENABLED


89 
	#MCO1_CLK_ENABLE
(√ã
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

90 
	#MCO1_GPIO_PORT
 
GPIOA


	)

91 
	#MCO1_PIN
 
GPIO_PIN_8


	)

106 
RCC_D√±ay
(
u√∂t32_t
 
md√±ay
);

202 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCC_DeIn√¥
()

204 
u√∂t32_t
 
tick¬∞¬®t
;

207 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

210 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

213 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSIRDY
√ã=Ô£ø
RESET
)

215 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HSI_TIMEOUT_VALUE
)

217  
HAL_TIMEOUT
;

222 
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (0x10U << 
RCC_CR_HSITRIM_Pos
));

225 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

228 
	`CLEAR_REG
(
RCC
->
CFGR
);

231 
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SWS
√ã!Ô£ø
RESET
)

233 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
CLOCKSWITCH_TIMEOUT_VALUE
)

235  
HAL_TIMEOUT
;

240 
Sy¬∞emC‚ÄπeClock
 = 
HSI_VALUE
;

243 i‚Ä°(
	`HAL_In√¥Tick
(
uwTickPrio
√ã!Ô£ø
HAL_OK
)

245  
HAL_ERROR
;

249 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

252 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

255 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLLRDY
√ã!Ô£ø
RESET
)

257 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL_TIMEOUT_VALUE
)

259  
HAL_TIMEOUT
;

264 
	`CLEAR_REG
(
RCC
->
CFGR
);

267 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

270 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
);

273 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSERDY
√ã!Ô£ø
RESET
)

275 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HSE_TIMEOUT_VALUE
)

277  
HAL_TIMEOUT
;

282 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

284 #i‚Ä°
	`def√∂ed
(
RCC_PLL2_SUPPORT
)

286 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

289 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

292 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2RDY
√ã!Ô£ø
RESET
)

294 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

296  
HAL_TIMEOUT
;

301 #i‚Ä°
	`def√∂ed
(
RCC_PLLI2S_SUPPORT
)

303 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

306 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

309 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3RDY
√ã!Ô£ø
RESET
)

311 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLLI2S_TIMEOUT_VALUE
)

313  
HAL_TIMEOUT
;

318 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1
)

320 
	`CLEAR_REG
(
RCC
->
CFGR2
);

324 
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RMVF
);

327 
	`CLEAR_REG
(
RCC
->
CIR
);

329  
HAL_OK
;

330 
	}
}

347 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCC_OscC‚ÅÑfig
(
RCC_OscIn√¥Ty‚â•Def
 *
RCC_OscIn√¥S√•uÀò
)

349 
u√∂t32_t
 
tick¬∞¬®t
;

350 
u√∂t32_t
 
‚àÇl_c‚ÅÑfig
;

353 i‚Ä°(
RCC_OscIn√¥S√•uÀò
 =Ô£ø
NULL
)

355  
HAL_ERROR
;

359 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscIn√¥S√•uÀò
->
Osc√ª≈ìt‚ÄπTy‚â•
));

362 i‚Ä°(((
RCC_OscIn√¥S√•uÀò
->
Osc√ª≈ìt‚ÄπTy‚â•
√ã& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

365 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSE
(
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
));

368 i‚Ä°((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_HSE
)

369 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
√ã&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(√ã=Ô£ø
RCC_PLLSOURCE_HSE
)))

371 i‚Ä°((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
√ã!Ô£ø
RESET
√ã&& (
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
 =Ô£ø
RCC_HSE_OFF
))

373  
HAL_ERROR
;

379 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
);

383 i‚Ä°(
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
 !Ô£ø
RCC_HSE_OFF
)

386 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

389 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
√ã=Ô£ø
RESET
)

391 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HSE_TIMEOUT_VALUE
)

393  
HAL_TIMEOUT
;

400 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

403 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
√ã!Ô£ø
RESET
)

405 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HSE_TIMEOUT_VALUE
)

407  
HAL_TIMEOUT
;

414 i‚Ä°(((
RCC_OscIn√¥S√•uÀò
->
Osc√ª≈ìt‚ÄπTy‚â•
√ã& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

417 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSI
(
RCC_OscIn√¥S√•uÀò
->
HSIS√®√£
));

418 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscIn√¥S√•uÀò
->
HSIC√Üib√∏ti‚ÅÑV√Üue
));

421 i‚Ä°((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_HSI
)

422 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
√ã&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(√ã=Ô£ø
RCC_PLLSOURCE_HSI_DIV2
)))

425 i‚Ä°((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
√ã!Ô£ø
RESET
√ã&& (
RCC_OscIn√¥S√•uÀò
->
HSIS√®√£
 !Ô£ø
RCC_HSI_ON
))

427  
HAL_ERROR
;

433 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscIn√¥S√•uÀò
->
HSIC√Üib√∏ti‚ÅÑV√Üue
);

439 i‚Ä°(
RCC_OscIn√¥S√•uÀò
->
HSIS√®√£
 !Ô£ø
RCC_HSI_OFF
)

442 
	`__HAL_RCC_HSI_ENABLE
();

445 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

448 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
√ã=Ô£ø
RESET
)

450 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HSI_TIMEOUT_VALUE
)

452  
HAL_TIMEOUT
;

457 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscIn√¥S√•uÀò
->
HSIC√Üib√∏ti‚ÅÑV√Üue
);

462 
	`__HAL_RCC_HSI_DISABLE
();

465 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

468 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
√ã!Ô£ø
RESET
)

470 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
HSI_TIMEOUT_VALUE
)

472  
HAL_TIMEOUT
;

479 i‚Ä°(((
RCC_OscIn√¥S√•uÀò
->
Osc√ª≈ìt‚ÄπTy‚â•
√ã& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

482 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_LSI
(
RCC_OscIn√¥S√•uÀò
->
LSIS√®√£
));

485 i‚Ä°(
RCC_OscIn√¥S√•uÀò
->
LSIS√®√£
 !Ô£ø
RCC_LSI_OFF
)

488 
	`__HAL_RCC_LSI_ENABLE
();

491 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

494 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
√ã=Ô£ø
RESET
)

496 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
LSI_TIMEOUT_VALUE
)

498  
HAL_TIMEOUT
;

503 
	`RCC_D√±ay
(1);

508 
	`__HAL_RCC_LSI_DISABLE
();

511 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

514 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
√ã!Ô£ø
RESET
)

516 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
LSI_TIMEOUT_VALUE
)

518  
HAL_TIMEOUT
;

524 i‚Ä°(((
RCC_OscIn√¥S√•uÀò
->
Osc√ª≈ìt‚ÄπTy‚â•
√ã& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

526 
F≈ìgS√®tus
 
pwrÀõkch‚Ñ¢ged
 = 
RESET
;

529 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_LSE
(
RCC_OscIn√¥S√•uÀò
->
LSES√®√£
));

533 i‚Ä°(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

535 
	`__HAL_RCC_PWR_CLK_ENABLE
();

536 
pwrÀõkch‚Ñ¢ged
 = 
SET
;

539 i‚Ä°(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

542 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

545 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

547 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

549 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RCC_DBP_TIMEOUT_VALUE
)

551  
HAL_TIMEOUT
;

557 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscIn√¥S√•uÀò
->
LSES√®√£
);

559 i‚Ä°(
RCC_OscIn√¥S√•uÀò
->
LSES√®√£
 !Ô£ø
RCC_LSE_OFF
)

562 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

565 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
√ã=Ô£ø
RESET
)

567 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RCC_LSE_TIMEOUT_VALUE
)

569  
HAL_TIMEOUT
;

576 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

579 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
√ã!Ô£ø
RESET
)

581 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RCC_LSE_TIMEOUT_VALUE
)

583  
HAL_TIMEOUT
;

589 i‚Ä°(
pwrÀõkch‚Ñ¢ged
 =Ô£ø
SET
)

591 
	`__HAL_RCC_PWR_CLK_DISABLE
();

595 #i‚Ä°
	`def√∂ed
(
RCC_CR_PLL2ON
)

598 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLL2
(
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2S√®√£
));

599 i‚Ä°((
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2S√®√£
√ã!Ô£ø
RCC_PLL2_NONE
)

603 i‚Ä°((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(√ã=Ô£ø
RCC_PLLSOURCE_HSE
) && \

604 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

605 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)√ã=Ô£ø
RCC_CFGR2_PREDIV1SRC_PLL2
))

607  
HAL_ERROR
;

611 i‚Ä°((
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2S√®√£
√ã=Ô£ø
RCC_PLL2_ON
)

614 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLL2_MUL
(
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2MUL
));

615 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSE_PREDIV2
(
RCC_OscIn√¥S√•uÀò
->
PLL2
.
HSEP¬™div2V√Üue
));

619 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
) && \

620 (
	`__HAL_RCC_HSE_GET_PREDIV2
(√ã!Ô£ø
RCC_OscIn√¥S√•uÀò
->
PLL2
.
HSEP¬™div2V√Üue
))

622  
HAL_ERROR
;

626 
	`__HAL_RCC_PLL2_DISABLE
();

629 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

632 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
√ã!Ô£ø
RESET
)

634 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

636  
HAL_TIMEOUT
;

641 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
RCC_OscIn√¥S√•uÀò
->
PLL2
.
HSEP¬™div2V√Üue
);

644 
	`__HAL_RCC_PLL2_CONFIG
(
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2MUL
);

647 
	`__HAL_RCC_PLL2_ENABLE
();

650 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

653 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
√ã=Ô£ø
RESET
)

655 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

657  
HAL_TIMEOUT
;

664 
	`CLEAR_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

667 
	`__HAL_RCC_PLL2_DISABLE
();

670 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

673 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
√ã!Ô£ø
RESET
)

675 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

677  
HAL_TIMEOUT
;

687 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLL
(
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLS√®√£
));

688 i‚Ä°((
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLS√®√£
√ã!Ô£ø
RCC_PLL_NONE
)

691 i‚Ä°(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã!Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

693 i‚Ä°((
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLS√®√£
√ã=Ô£ø
RCC_PLL_ON
)

696 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLLSOURCE
(
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLSourÀö
));

697 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLL_MUL
(
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLMUL
));

700 
	`__HAL_RCC_PLL_DISABLE
();

703 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

706 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
√ã!Ô£ø
RESET
)

708 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL_TIMEOUT_VALUE
)

710  
HAL_TIMEOUT
;

716 i‚Ä°(
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLSourÀö
 =Ô£ø
RCC_PLLSOURCE_HSE
)

719 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSE_PREDIV
(
RCC_OscIn√¥S√•uÀò
->
HSEP¬™divV√Üue
));

720 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

721 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_OscIn√¥S√•uÀò
->
P¬™div1SourÀö
));

724 
	`SET_BIT
(
RCC
->
CFGR2
, 
RCC_OscIn√¥S√•uÀò
->
P¬™div1SourÀö
);

728 
	`__HAL_RCC_HSE_PREDIV_CONFIG
(
RCC_OscIn√¥S√•uÀò
->
HSEP¬™divV√Üue
);

732 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLSourÀö
,

733 
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLMUL
);

735 
	`__HAL_RCC_PLL_ENABLE
();

738 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

741 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
√ã=Ô£ø
RESET
)

743 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL_TIMEOUT_VALUE
)

745  
HAL_TIMEOUT
;

752 
	`__HAL_RCC_PLL_DISABLE
();

755 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

758 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
√ã!Ô£ø
RESET
)

760 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL_TIMEOUT_VALUE
)

762  
HAL_TIMEOUT
;

770 i‚Ä°((
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLS√®√£
√ã=Ô£ø
RCC_PLL_OFF
)

772  
HAL_ERROR
;

777 
‚àÇl_c‚ÅÑfig
 = 
RCC
->
CFGR
;

778 i‚Ä°((
	`READ_BIT
(
‚àÇl_c‚ÅÑfig
, 
RCC_CFGR_PLLSRC
√ã!Ô£ø
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLSourÀö
) ||

779 (
	`READ_BIT
(
‚àÇl_c‚ÅÑfig
, 
RCC_CFGR_PLLMULL
√ã!Ô£ø
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLMUL
))

781  
HAL_ERROR
;

787  
HAL_OK
;

788 
	}
}

813 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCC_ClockC‚ÅÑfig
(
RCC_ClkIn√¥Ty‚â•Def
 *
RCC_ClkIn√¥S√•uÀò
, 
u√∂t32_t
 
FL¬©√≠cy
)

815 
u√∂t32_t
 
tick¬∞¬®t
;

818 i‚Ä°(
RCC_ClkIn√¥S√•uÀò
 =Ô£ø
NULL
)

820  
HAL_ERROR
;

824 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
));

825 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FLASH_LATENCY
(
FL¬©√≠cy
));

831 #i‚Ä°
	`def√∂ed
(
FLASH_ACR_LATENCY
)

833 i‚Ä°(
FL¬©√≠cy
 > 
	`__HAL_FLASH_GET_LATENCY
())

836 
	`__HAL_FLASH_SET_LATENCY
(
FL¬©√≠cy
);

840 i‚Ä°(
	`__HAL_FLASH_GET_LATENCY
(√ã!Ô£ø
FL¬©√≠cy
)

842  
HAL_ERROR
;

848 i‚Ä°(((
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
√ã& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

852 i‚Ä°(((
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
√ã& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

854 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_HCLK_DIV16
);

857 i‚Ä°(((
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
√ã& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

859 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, (
RCC_HCLK_DIV16
 << 3));

863 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HCLK
(
RCC_ClkIn√¥S√•uÀò
->
AHBCLKDivid√Æ
));

864 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkIn√¥S√•uÀò
->
AHBCLKDivid√Æ
);

868 i‚Ä°(((
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
√ã& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

870 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkIn√¥S√•uÀò
->
SYSCLKSourÀö
));

873 i‚Ä°(
RCC_ClkIn√¥S√•uÀò
->
SYSCLKSourÀö
 =Ô£ø
RCC_SYSCLKSOURCE_HSE
)

876 i‚Ä°(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
√ã=Ô£ø
RESET
)

878  
HAL_ERROR
;

882 i‚Ä°(
RCC_ClkIn√¥S√•uÀò
->
SYSCLKSourÀö
 =Ô£ø
RCC_SYSCLKSOURCE_PLLCLK
)

885 i‚Ä°(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
√ã=Ô£ø
RESET
)

887  
HAL_ERROR
;

894 i‚Ä°(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
√ã=Ô£ø
RESET
)

896  
HAL_ERROR
;

899 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkIn√¥S√•uÀò
->
SYSCLKSourÀö
);

902 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

904 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã!Ô£ø(
RCC_ClkIn√¥S√•uÀò
->
SYSCLKSourÀö
 << 
RCC_CFGR_SWS_Pos
))

906 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
CLOCKSWITCH_TIMEOUT_VALUE
)

908  
HAL_TIMEOUT
;

913 #i‚Ä°
	`def√∂ed
(
FLASH_ACR_LATENCY
)

915 i‚Ä°(
FL¬©√≠cy
 < 
	`__HAL_FLASH_GET_LATENCY
())

918 
	`__HAL_FLASH_SET_LATENCY
(
FL¬©√≠cy
);

922 i‚Ä°(
	`__HAL_FLASH_GET_LATENCY
(√ã!Ô£ø
FL¬©√≠cy
)

924  
HAL_ERROR
;

930 i‚Ä°(((
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
√ã& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

932 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PCLK
(
RCC_ClkIn√¥S√•uÀò
->
APB1CLKDivid√Æ
));

933 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkIn√¥S√•uÀò
->
APB1CLKDivid√Æ
);

937 i‚Ä°(((
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
√ã& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

939 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PCLK
(
RCC_ClkIn√¥S√•uÀò
->
APB2CLKDivid√Æ
));

940 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkIn√¥S√•uÀò
->
APB2CLKDivid√Æ
) << 3));

944 
Sy¬∞emC‚ÄπeClock
 = 
	`HAL_RCC_G√´SysClockF¬™q
(√ã>> 
AHBP¬™scTab√Ä
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
√ã>> 
RCC_CFGR_HPRE_Pos
];

947 
	`HAL_In√¥Tick
(
uwTickPrio
);

949  
HAL_OK
;

950 
	}
}

1002 
	$HAL_RCC_MCOC‚ÅÑfig
(
u√∂t32_t
 
RCC_MCOx
, u√∂t32_√†
RCC_MCOSourÀö
, u√∂t32_√†
RCC_MCODiv
)

1004 
GPIO_In√¥Ty‚â•Def
 
gpio
 = {0U};

1007 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_MCO
(
RCC_MCOx
));

1008 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

1009 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSourÀö
));

1012 
	`UNUSED
(
RCC_MCOx
);

1013 
	`UNUSED
(
RCC_MCODiv
);

1016 
gpio
.
Mode
 = 
GPIO_MODE_AF_PP
;

1017 
gpio
.
S‚â•ed
 = 
GPIO_SPEED_FREQ_HIGH
;

1018 
gpio
.
Pu≈í
 = 
GPIO_NOPULL
;

1019 
gpio
.
P√∂
 = 
MCO1_PIN
;

1022 
	`MCO1_CLK_ENABLE
();

1024 
	`HAL_GPIO_In√¥
(
MCO1_GPIO_PORT
, &
gpio
);

1027 
	`__HAL_RCC_MCO1_CONFIG
(
RCC_MCOSourÀö
, 
RCC_MCODiv
);

1028 
	}
}

1039 
	$HAL_RCC_E¬´b√ÄCSS
()

1041 *(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_CSSON_BB
 = (u√∂t32_t)
ENABLE
;

1042 
	}
}

1048 
	$HAL_RCC_Di√üb√ÄCSS
()

1050 *(
__IO
 
u√∂t32_t
 *√ã
RCC_CR_CSSON_BB
 = (u√∂t32_t)
DISABLE
;

1051 
	}
}

1082 
u√∂t32_t
 
	$HAL_RCC_G√´SysClockF¬™q
()

1084 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1085 c‚ÅÑ¬∞ 
u√∂t8_t
 
aPLLMULFaÀò‚ÄπTab√Ä
[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};

1086 c‚ÅÑ¬∞ 
u√∂t8_t
 
aP¬™divFaÀò‚ÄπTab√Ä
[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

1088 c‚ÅÑ¬∞ 
u√∂t8_t
 
aPLLMULFaÀò‚ÄπTab√Ä
[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

1089 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1
)

1090 c‚ÅÑ¬∞ 
u√∂t8_t
 
aP¬™divFaÀò‚ÄπTab√Ä
[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

1092 c‚ÅÑ¬∞ 
u√∂t8_t
 
aP¬™divFaÀò‚ÄπTab√Ä
[2] = {1, 2};

1096 
u√∂t32_t
 
tm¬•eg
 = 0U, 
¬•ediv
 = 0U, 
‚àÇlÀõk
 = 0U, 
‚àÇlmul
 = 0U;

1097 
u√∂t32_t
 
sysÀõock‚Ä∞eq
 = 0U;

1098 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1099 
u√∂t32_t
 
¬•ediv2
 = 0U, 
‚àÇl2mul
 = 0U;

1102 
tm¬•eg
 = 
RCC
->
CFGR
;

1105 
tm¬•eg
 & 
RCC_CFGR_SWS
)

1107 
RCC_SYSCLKSOURCE_STATUS_HSE
:

1109 
sysÀõock‚Ä∞eq
 = 
HSE_VALUE
;

1112 
RCC_SYSCLKSOURCE_STATUS_PLLCLK
:

1114 
‚àÇlmul
 = 
aPLLMULFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
tm¬•eg
 & 
RCC_CFGR_PLLMULL
√ã>> 
RCC_CFGR_PLLMULL_Pos
];

1115 i‚Ä°((
tm¬•eg
 & 
RCC_CFGR_PLLSRC
√ã!Ô£ø
RCC_PLLSOURCE_HSI_DIV2
)

1117 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1
)

1118 
¬•ediv
 = 
aP¬™divFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
√ã>> 
RCC_CFGR2_PREDIV1_Pos
];

1120 
¬•ediv
 = 
aP¬™divFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
√ã>> 
RCC_CFGR_PLLXTPRE_Pos
];

1122 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1124 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

1128 
¬•ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
√ã>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

1129 
‚àÇl2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
√ã>> 
RCC_CFGR2_PLL2MUL_Pos
) + 2;

1130 
‚àÇlÀõk
 = (
u√∂t32_t
)(((
u√∂t64_t
)
HSE_VALUE
 * (u√∂t64_t)
‚àÇl2mul
 * (u√∂t64_t)
‚àÇlmul
√ã/ ((u√∂t64_t)
¬•ediv2
 * (u√∂t64_t)
¬•ediv
));

1135 
‚àÇlÀõk
 = (
u√∂t32_t
)((
HSE_VALUE
 * 
‚àÇlmul
√ã/ 
¬•ediv
);

1140 i‚Ä°(
‚àÇlmul
 =Ô£ø
aPLLMULFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
RCC_CFGR_PLLMULL6_5
√ã>> 
RCC_CFGR_PLLMULL_Pos
])

1142 
‚àÇlÀõk
 =√ñllclk / 2;

1146 
‚àÇlÀõk
 = (
u√∂t32_t
)((
HSE_VALUE
 * 
‚àÇlmul
√ã/ 
¬•ediv
);

1152 
‚àÇlÀõk
 = (
u√∂t32_t
)((
HSI_VALUE
 >> 1√ã* 
‚àÇlmul
);

1154 
sysÀõock‚Ä∞eq
 = 
‚àÇlÀõk
;

1157 
RCC_SYSCLKSOURCE_STATUS_HSI
:

1160 
sysÀõock‚Ä∞eq
 = 
HSI_VALUE
;

1164  
sysÀõock‚Ä∞eq
;

1165 
	}
}

1176 
u√∂t32_t
 
	$HAL_RCC_G√´HCLKF¬™q
()

1178  
Sy¬∞emC‚ÄπeClock
;

1179 
	}
}

1187 
u√∂t32_t
 
	$HAL_RCC_G√´PCLK1F¬™q
()

1190  (
	`HAL_RCC_G√´HCLKF¬™q
(√ã>> 
APBP¬™scTab√Ä
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
√ã>> 
RCC_CFGR_PPRE1_Pos
]);

1191 
	}
}

1199 
u√∂t32_t
 
	$HAL_RCC_G√´PCLK2F¬™q
()

1202  (
	`HAL_RCC_G√´HCLKF¬™q
(√ã>> 
APBP¬™scTab√Ä
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
√ã>> 
RCC_CFGR_PPRE2_Pos
]);

1203 
	}
}

1212 
	$HAL_RCC_G√´OscC‚ÅÑfig
(
RCC_OscIn√¥Ty‚â•Def
 *
RCC_OscIn√¥S√•uÀò
)

1215 
	`as¬£œÄ_‚àë√∏m
(
RCC_OscIn√¥S√•uÀò
 !Ô£ø
NULL
);

1218 
RCC_OscIn√¥S√•uÀò
->
Osc√ª≈ìt‚ÄπTy‚â•
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 \

1219 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
;

1221 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1SRC
)

1223 
RCC_OscIn√¥S√•uÀò
->
P¬™div1SourÀö
 = 
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

1227 i‚Ä°((
RCC
->
CR
 & 
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1229 
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
 = 
RCC_HSE_BYPASS
;

1231 i‚Ä°((
RCC
->
CR
 & 
RCC_CR_HSEON
) == RCC_CR_HSEON)

1233 
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
 = 
RCC_HSE_ON
;

1237 
RCC_OscIn√¥S√•uÀò
->
HSES√®√£
 = 
RCC_HSE_OFF
;

1239 
RCC_OscIn√¥S√•uÀò
->
HSEP¬™divV√Üue
 = 
	`__HAL_RCC_HSE_GET_PREDIV
();

1242 i‚Ä°((
RCC
->
CR
 & 
RCC_CR_HSION
) == RCC_CR_HSION)

1244 
RCC_OscIn√¥S√•uÀò
->
HSIS√®√£
 = 
RCC_HSI_ON
;

1248 
RCC_OscIn√¥S√•uÀò
->
HSIS√®√£
 = 
RCC_HSI_OFF
;

1251 
RCC_OscIn√¥S√•uÀò
->
HSIC√Üib√∏ti‚ÅÑV√Üue
 = (
u√∂t32_t
)((
RCC
->
CR
 & 
RCC_CR_HSITRIM
√ã>> 
RCC_CR_HSITRIM_Pos
);

1254 i‚Ä°((
RCC
->
BDCR
 & 
RCC_BDCR_LSEBYP
) == RCC_BDCR_LSEBYP)

1256 
RCC_OscIn√¥S√•uÀò
->
LSES√®√£
 = 
RCC_LSE_BYPASS
;

1258 i‚Ä°((
RCC
->
BDCR
 & 
RCC_BDCR_LSEON
) == RCC_BDCR_LSEON)

1260 
RCC_OscIn√¥S√•uÀò
->
LSES√®√£
 = 
RCC_LSE_ON
;

1264 
RCC_OscIn√¥S√•uÀò
->
LSES√®√£
 = 
RCC_LSE_OFF
;

1268 i‚Ä°((
RCC
->
CSR
 & 
RCC_CSR_LSION
) == RCC_CSR_LSION)

1270 
RCC_OscIn√¥S√•uÀò
->
LSIS√®√£
 = 
RCC_LSI_ON
;

1274 
RCC_OscIn√¥S√•uÀò
->
LSIS√®√£
 = 
RCC_LSI_OFF
;

1279 i‚Ä°((
RCC
->
CR
 & 
RCC_CR_PLLON
) == RCC_CR_PLLON)

1281 
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLS√®√£
 = 
RCC_PLL_ON
;

1285 
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLS√®√£
 = 
RCC_PLL_OFF
;

1287 
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLSourÀö
 = (
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
);

1288 
RCC_OscIn√¥S√•uÀò
->
PLL
.
PLLMUL
 = (
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
);

1289 #i‚Ä°
	`def√∂ed
(
RCC_CR_PLL2ON
)

1291 i‚Ä°((
RCC
->
CR
 & 
RCC_CR_PLL2ON
) == RCC_CR_PLL2ON)

1293 
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2S√®√£
 = 
RCC_PLL2_ON
;

1297 
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2S√®√£
 = 
RCC_PLL2_OFF
;

1299 
RCC_OscIn√¥S√•uÀò
->
PLL2
.
HSEP¬™div2V√Üue
 = 
	`__HAL_RCC_HSE_GET_PREDIV2
();

1300 
RCC_OscIn√¥S√•uÀò
->
PLL2
.
PLL2MUL
 = (
u√∂t32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
);

1302 
	}
}

1312 
	$HAL_RCC_G√´ClockC‚ÅÑfig
(
RCC_ClkIn√¥Ty‚â•Def
 *
RCC_ClkIn√¥S√•uÀò
, 
u√∂t32_t
 *
pFL¬©√≠cy
)

1315 
	`as¬£œÄ_‚àë√∏m
(
RCC_ClkIn√¥S√•uÀò
 !Ô£ø
NULL
);

1316 
	`as¬£œÄ_‚àë√∏m
(
pFL¬©√≠cy
 !Ô£ø
NULL
);

1319 
RCC_ClkIn√¥S√•uÀò
->
ClockTy‚â•
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1322 
RCC_ClkIn√¥S√•uÀò
->
SYSCLKSourÀö
 = (
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1325 
RCC_ClkIn√¥S√•uÀò
->
AHBCLKDivid√Æ
 = (
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1328 
RCC_ClkIn√¥S√•uÀò
->
APB1CLKDivid√Æ
 = (
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1331 
RCC_ClkIn√¥S√•uÀò
->
APB2CLKDivid√Æ
 = (
u√∂t32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1333 #i‚Ä° 
	`def√∂ed
(
FLASH_ACR_LATENCY
)

1335 *
pFL¬©√≠cy
 = (
u√∂t32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1338 *
pFL¬©√≠cy
 = (
u√∂t32_t
)
FLASH_LATENCY_0
;

1340 
	}
}

1347 
	$HAL_RCC_NMI_IRQH‚Ñ¢d√Är
()

1350 i‚Ä°(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1353 
	`HAL_RCC_CSSC√Ülback
();

1356 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1358 
	}
}

1365 
	$RCC_D√±ay
(
u√∂t32_t
 
md√±ay
)

1367 
__IO
 
u√∂t32_t
 
D√±ay
 = 
md√±ay
 * (
Sy¬∞emC‚ÄπeClock
 / 8U / 1000U);

1370 
	`__NOP
();

1372 
D√±ay
 --);

1373 
	}
}

1379 
__w√≥k
 
	$HAL_RCC_CSSC√Ülback
()

1384 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc_ex.c

25 
	~"¬∞m32f1xx_h√Ü.h
"

31 #ifde‚Ä°
HAL_RCC_MODULE_ENABLED


100 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCCEx_P√Æ√πhCLKC‚ÅÑfig
(
RCC_P√Æ√πhCLKIn√¥Ty‚â•Def
 *
P√Æ√πhClkIn√¥
)

102 
u√∂t32_t
 
tick¬∞¬®t
 = 0U, 
√£mp_¬™g
 = 0U;

103 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

104 
u√∂t32_t
 
‚àÇ≈ìÀòive
 = 0U;

108 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PERIPHCLOCK
(
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
));

111 i‚Ä°((((
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
√ã& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC))

114 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_RTCCLKSOURCE
(
P√Æ√πhClkIn√¥
->
RTCClockS√±eÀòi‚ÅÑ
));

116 
F≈ìgS√®tus
 
pwrÀõkch‚Ñ¢ged
 = 
RESET
;

121 i‚Ä°(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

123 
	`__HAL_RCC_PWR_CLK_ENABLE
();

124 
pwrÀõkch‚Ñ¢ged
 = 
SET
;

127 i‚Ä°(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

130 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

133 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

135 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

137 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RCC_DBP_TIMEOUT_VALUE
)

139  
HAL_TIMEOUT
;

145 
√£mp_¬™g
 = (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
);

146 i‚Ä°((
√£mp_¬™g
 !Ô£ø0x00000000U√ã&& (√£mp_¬™g !Ô£ø(
P√Æ√πhClkIn√¥
->
RTCClockS√±eÀòi‚ÅÑ
 & 
RCC_BDCR_RTCSEL
)))

149 
√£mp_¬™g
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

151 
	`__HAL_RCC_BACKUPRESET_FORCE
();

152 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

154 
RCC
->
BDCR
 = 
√£mp_¬™g
;

157 i‚Ä°(
	`HAL_IS_BIT_SET
(
√£mp_¬™g
, 
RCC_BDCR_LSEON
))

160 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

163 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
√ã=Ô£ø
RESET
)

165 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RCC_LSE_TIMEOUT_VALUE
)

167  
HAL_TIMEOUT
;

172 
	`__HAL_RCC_RTC_CONFIG
(
P√Æ√πhClkIn√¥
->
RTCClockS√±eÀòi‚ÅÑ
);

175 i‚Ä°(
pwrÀõkch‚Ñ¢ged
 =Ô£ø
SET
)

177 
	`__HAL_RCC_PWR_CLK_DISABLE
();

182 i‚Ä°(((
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
√ã& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC)

185 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_ADCPLLCLK_DIV
(
P√Æ√πhClkIn√¥
->
AdcClockS√±eÀòi‚ÅÑ
));

188 
	`__HAL_RCC_ADC_CONFIG
(
P√Æ√πhClkIn√¥
->
AdcClockS√±eÀòi‚ÅÑ
);

191 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

193 i‚Ä°(((
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
√ã& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2)

196 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_I2S2CLKSOURCE
(
P√Æ√πhClkIn√¥
->
I2s2ClockS√±eÀòi‚ÅÑ
));

199 
	`__HAL_RCC_I2S2_CONFIG
(
P√Æ√πhClkIn√¥
->
I2s2ClockS√±eÀòi‚ÅÑ
);

203 i‚Ä°(((
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
√ã& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3)

206 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_I2S3CLKSOURCE
(
P√Æ√πhClkIn√¥
->
I2s3ClockS√±eÀòi‚ÅÑ
));

209 
	`__HAL_RCC_I2S3_CONFIG
(
P√Æ√πhClkIn√¥
->
I2s3ClockS√±eÀòi‚ÅÑ
);

214 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
√ã|| HAL_IS_BIT_SET(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

217 
‚àÇ≈ìÀòive
 = 1;

221 i‚Ä°(
‚àÇ≈ìÀòive
 == 1)

224 i‚Ä°(
	`HAL_IS_BIT_CLR
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLLI2S_MUL
(
P√Æ√πhClkIn√¥
->
PLLI2S
.
PLLI2SMUL
));

228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSE_PREDIV2
(
P√Æ√πhClkIn√¥
->
PLLI2S
.
HSEP¬™div2V√Üue
));

232 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL2ON
) && \

233 (
	`__HAL_RCC_HSE_GET_PREDIV2
(√ã!Ô£ø
P√Æ√πhClkIn√¥
->
PLLI2S
.
HSEP¬™div2V√Üue
))

235  
HAL_ERROR
;

239 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
P√Æ√πhClkIn√¥
->
PLLI2S
.
HSEP¬™div2V√Üue
);

242 
	`__HAL_RCC_PLLI2S_CONFIG
(
P√Æ√πhClkIn√¥
->
PLLI2S
.
PLLI2SMUL
);

245 
	`__HAL_RCC_PLLI2S_ENABLE
();

248 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

251 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
√ã=Ô£ø
RESET
)

253 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLLI2S_TIMEOUT_VALUE
)

255  
HAL_TIMEOUT
;

262 i‚Ä°(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
√ã!Ô£ø
P√Æ√πhClkIn√¥
->
PLLI2S
.
PLLI2SMUL
)

264  
HAL_ERROR
;

270 #i‚Ä°
	`def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

271 || 
	`def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

272 || 
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

274 i‚Ä°(((
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
√ã& 
RCC_PERIPHCLK_USB
) == RCC_PERIPHCLK_USB)

277 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_USBPLLCLK_DIV
(
P√Æ√πhClkIn√¥
->
UsbClockS√±eÀòi‚ÅÑ
));

280 
	`__HAL_RCC_USB_CONFIG
(
P√Æ√πhClkIn√¥
->
UsbClockS√±eÀòi‚ÅÑ
);

284  
HAL_OK
;

285 
	}
}

294 
	$HAL_RCCEx_G√´P√Æ√πhCLKC‚ÅÑfig
(
RCC_P√Æ√πhCLKIn√¥Ty‚â•Def
 *
P√Æ√πhClkIn√¥
)

296 
u√∂t32_t
 
¬ßcÀõk
 = 0U;

299 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 = 
RCC_PERIPHCLK_RTC
;

302 
¬ßcÀõk
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

304 
P√Æ√πhClkIn√¥
->
RTCClockS√±eÀòi‚ÅÑ
 = 
¬ßcÀõk
;

307 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 |Ô£ø
RCC_PERIPHCLK_ADC
;

308 
P√Æ√πhClkIn√¥
->
AdcClockS√±eÀòi‚ÅÑ
 = 
	`__HAL_RCC_GET_ADC_SOURCE
();

310 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

312 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 |Ô£ø
RCC_PERIPHCLK_I2S2
;

313 
P√Æ√πhClkIn√¥
->
I2s2ClockS√±eÀòi‚ÅÑ
 = 
	`__HAL_RCC_GET_I2S2_SOURCE
();

316 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 |Ô£ø
RCC_PERIPHCLK_I2S3
;

317 
P√Æ√πhClkIn√¥
->
I2s3ClockS√±eÀòi‚ÅÑ
 = 
	`__HAL_RCC_GET_I2S3_SOURCE
();

321 #i‚Ä°
	`def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

323 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 |Ô£ø
RCC_PERIPHCLK_I2S2
;

324 
P√Æ√πhClkIn√¥
->
I2s2ClockS√±eÀòi‚ÅÑ
 = 
RCC_I2S2CLKSOURCE_SYSCLK
;

327 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 |Ô£ø
RCC_PERIPHCLK_I2S3
;

328 
P√Æ√πhClkIn√¥
->
I2s3ClockS√±eÀòi‚ÅÑ
 = 
RCC_I2S3CLKSOURCE_SYSCLK
;

332 #i‚Ä°
	`def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

333 || 
	`def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

334 || 
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

336 
P√Æ√πhClkIn√¥
->
P√Æ√πhClockS√±eÀòi‚ÅÑ
 |Ô£ø
RCC_PERIPHCLK_USB
;

337 
P√Æ√πhClkIn√¥
->
UsbClockS√±eÀòi‚ÅÑ
 = 
	`__HAL_RCC_GET_USB_SOURCE
();

339 
	}
}

387 
u√∂t32_t
 
	$HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
u√∂t32_t
 
P√Æ√πhClk
)

389 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

390 c‚ÅÑ¬∞ 
u√∂t8_t
 
aPLLMULFaÀò‚ÄπTab√Ä
[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};

391 c‚ÅÑ¬∞ 
u√∂t8_t
 
aP¬™divFaÀò‚ÄπTab√Ä
[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

393 
u√∂t32_t
 
¬•ediv1
 = 0U, 
‚àÇlÀõk
 = 0U, 
‚àÇlmul
 = 0U;

394 
u√∂t32_t
 
‚àÇl2mul
 = 0U, 
‚àÇl3mul
 = 0U, 
¬•ediv2
 = 0U;

396 #i‚Ä°
	`def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
) || \

397 
	`def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

398 c‚ÅÑ¬∞ 
u√∂t8_t
 
aPLLMULFaÀò‚ÄπTab√Ä
[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

399 c‚ÅÑ¬∞ 
u√∂t8_t
 
aP¬™divFaÀò‚ÄπTab√Ä
[2] = {1, 2};

401 
u√∂t32_t
 
¬•ediv1
 = 0U, 
‚àÇlÀõk
 = 0U, 
‚àÇlmul
 = 0U;

403 
u√∂t32_t
 
√£mp_¬™g
 = 0U, 
‚Ä∞equ√≠cy
 = 0U;

406 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PERIPHCLOCK
(
P√Æ√πhClk
));

408 
P√Æ√πhClk
)

410 #i‚Ä°
	`def√∂ed
(
STM32F102x6
√ã|| def√∂ed(
STM32F102xB
√ã|| def√∂ed(
STM32F103x6
)\

411 || 
	`def√∂ed
(
STM32F103xB
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)\

412 || 
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

413 
RCC_PERIPHCLK_USB
:

416 
√£mp_¬™g
 = 
RCC
->
CFGR
;

419 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLLON
))

421 
‚àÇlmul
 = 
aPLLMULFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
√£mp_¬™g
 & 
RCC_CFGR_PLLMULL
√ã>> 
RCC_CFGR_PLLMULL_Pos
];

422 i‚Ä°((
√£mp_¬™g
 & 
RCC_CFGR_PLLSRC
√ã!Ô£ø
RCC_PLLSOURCE_HSI_DIV2
)

424 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
√ã|| def√∂ed(
STM32F100xB
)\

425 || 
	`def√∂ed
(
STM32F100xE
)

426 
¬•ediv1
 = 
aP¬™divFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
√ã>> 
RCC_CFGR2_PREDIV1_Pos
];

428 
¬•ediv1
 = 
aP¬™divFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
√ã>> 
RCC_CFGR_PLLXTPRE_Pos
];

431 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

432 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

436 
¬•ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
√ã>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

437 
‚àÇl2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
√ã>> 
RCC_CFGR2_PLL2MUL_Pos
) + 2;

438 
‚àÇlÀõk
 = (
u√∂t32_t
)((((
HSE_VALUE
 / 
¬•ediv2
√ã* 
‚àÇl2mul
√ã/ 
¬•ediv1
√ã* 
‚àÇlmul
);

443 
‚àÇlÀõk
 = (
u√∂t32_t
)((
HSE_VALUE
 / 
¬•ediv1
√ã* 
‚àÇlmul
);

448 i‚Ä°(
‚àÇlmul
 =Ô£ø
aPLLMULFaÀò‚ÄπTab√Ä
[(
u√∂t32_t
)(
RCC_CFGR_PLLMULL6_5
√ã>> 
RCC_CFGR_PLLMULL_Pos
])

450 
‚àÇlÀõk
 =√ñllclk / 2;

453 i‚Ä°((
√£mp_¬™g
 & 
RCC_CFGR_PLLSRC
√ã!Ô£ø
RCC_PLLSOURCE_HSI_DIV2
)

456 
‚àÇlÀõk
 = (
u√∂t32_t
)((
HSE_VALUE
 / 
¬•ediv1
√ã* 
‚àÇlmul
);

463 
‚àÇlÀõk
 = (
u√∂t32_t
)((
HSI_VALUE
 >> 1√ã* 
‚àÇlmul
);

467 #i‚Ä°
	`def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

469 i‚Ä°(
	`__HAL_RCC_GET_USB_SOURCE
(√ã=Ô£ø
RCC_USBCLKSOURCE_PLL_DIV2
)

472 
‚Ä∞equ√≠cy
 = 
‚àÇlÀõk
;

477 
‚Ä∞equ√≠cy
 = (2 * 
‚àÇlÀõk
) / 3;

481 i‚Ä°(
	`__HAL_RCC_GET_USB_SOURCE
(√ã=Ô£ø
RCC_USBCLKSOURCE_PLL
)

484 
‚Ä∞equ√≠cy
 = 
‚àÇlÀõk
;

489 
‚Ä∞equ√≠cy
 = (
‚àÇlÀõk
 * 2) / 3;

496 #i‚Ä°
	`def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
√ã|| def√∂ed(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

497 
RCC_PERIPHCLK_I2S2
:

499 #i‚Ä°
	`def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

501 
‚Ä∞equ√≠cy
 = 
	`HAL_RCC_G√´SysClockF¬™q
();

503 i‚Ä°(
	`__HAL_RCC_GET_I2S2_SOURCE
(√ã=Ô£ø
RCC_I2S2CLKSOURCE_SYSCLK
)

506 
‚Ä∞equ√≠cy
 = 
	`HAL_RCC_G√´SysClockF¬™q
();

511 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

514 
¬•ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
√ã>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

515 
‚àÇl3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
√ã>> 
RCC_CFGR2_PLL3MUL_Pos
) + 2;

516 
‚Ä∞equ√≠cy
 = (
u√∂t32_t
)(2 * ((
HSE_VALUE
 / 
¬•ediv2
√ã* 
‚àÇl3mul
));

522 
RCC_PERIPHCLK_I2S3
:

524 #i‚Ä°
	`def√∂ed
(
STM32F103xE
√ã|| def√∂ed(
STM32F103xG
)

526 
‚Ä∞equ√≠cy
 = 
	`HAL_RCC_G√´SysClockF¬™q
();

528 i‚Ä°(
	`__HAL_RCC_GET_I2S3_SOURCE
(√ã=Ô£ø
RCC_I2S3CLKSOURCE_SYSCLK
)

531 
‚Ä∞equ√≠cy
 = 
	`HAL_RCC_G√´SysClockF¬™q
();

536 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

539 
¬•ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
√ã>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

540 
‚àÇl3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
√ã>> 
RCC_CFGR2_PLL3MUL_Pos
) + 2;

541 
‚Ä∞equ√≠cy
 = (
u√∂t32_t
)(2 * ((
HSE_VALUE
 / 
¬•ediv2
√ã* 
‚àÇl3mul
));

548 
RCC_PERIPHCLK_RTC
:

551 
√£mp_¬™g
 = 
RCC
->
BDCR
;

554 i‚Ä°(((
√£mp_¬™g
 & 
RCC_BDCR_RTCSEL
√ã=Ô£ø
RCC_RTCCLKSOURCE_LSE
√ã&& (
	`HAL_IS_BIT_SET
‚Äîemp_¬™g, 
RCC_BDCR_LSERDY
)))

556 
‚Ä∞equ√≠cy
 = 
LSE_VALUE
;

559 i‚Ä°(((
√£mp_¬™g
 & 
RCC_BDCR_RTCSEL
√ã=Ô£ø
RCC_RTCCLKSOURCE_LSI
√ã&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSIRDY
)))

561 
‚Ä∞equ√≠cy
 = 
LSI_VALUE
;

563 i‚Ä°(((
√£mp_¬™g
 & 
RCC_BDCR_RTCSEL
√ã=Ô£ø
RCC_RTCCLKSOURCE_HSE_DIV128
√ã&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
)))

565 
‚Ä∞equ√≠cy
 = 
HSE_VALUE
 / 128U;

574 
RCC_PERIPHCLK_ADC
:

576 
‚Ä∞equ√≠cy
 = 
	`HAL_RCC_G√´PCLK2F¬™q
(√ã/ (((
	`__HAL_RCC_GET_ADC_SOURCE
(√ã>> 
RCC_CFGR_ADCPRE_Pos
) + 1) * 2);

584  (
‚Ä∞equ√≠cy
);

585 
	}
}

591 #i‚Ä°
def√∂ed
(
STM32F105xC
√ã|| def√∂ed(
STM32F107xC
)

613 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCCEx_E¬´b√ÄPLLI2S
(
RCC_PLLI2SIn√¥Ty‚â•Def
 *
PLLI2SIn√¥
)

615 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

618 i‚Ä°(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
√ã&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

621 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLLI2S_MUL
(
PLLI2SIn√¥
->
PLLI2SMUL
));

622 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSE_PREDIV2
(
PLLI2SIn√¥
->
HSEP¬™div2V√Üue
));

626 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL2ON
) && \

627 (
	`__HAL_RCC_HSE_GET_PREDIV2
(√ã!Ô£ø
PLLI2SIn√¥
->
HSEP¬™div2V√Üue
))

629  
HAL_ERROR
;

633 
	`__HAL_RCC_PLLI2S_DISABLE
();

636 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

639 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
√ã!Ô£ø
RESET
)

641 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLLI2S_TIMEOUT_VALUE
)

643  
HAL_TIMEOUT
;

648 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLLI2SIn√¥
->
HSEP¬™div2V√Üue
);

652 
	`__HAL_RCC_PLLI2S_CONFIG
(
PLLI2SIn√¥
->
PLLI2SMUL
);

655 
	`__HAL_RCC_PLLI2S_ENABLE
();

658 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

661 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
√ã=Ô£ø
RESET
)

663 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLLI2S_TIMEOUT_VALUE
)

665  
HAL_TIMEOUT
;

672  
HAL_ERROR
;

675  
HAL_OK
;

676 
	}
}

683 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCCEx_Di√üb√ÄPLLI2S
()

685 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

688 i‚Ä°(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
√ã&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

691 
	`__HAL_RCC_PLLI2S_DISABLE
();

694 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

697 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
√ã!Ô£ø
RESET
)

699 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLLI2S_TIMEOUT_VALUE
)

701  
HAL_TIMEOUT
;

708  
HAL_ERROR
;

711  
HAL_OK
;

712 
	}
}

739 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCCEx_E¬´b√ÄPLL2
(
RCC_PLL2In√¥Ty‚â•Def
 *
PLL2In√¥
)

741 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

745 i‚Ä°((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(√ã=Ô£ø
RCC_PLLSOURCE_HSE
) && \

746 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

747 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)√ã=Ô£ø
RCC_CFGR2_PREDIV1SRC_PLL2
))

749  
HAL_ERROR
;

754 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_PLL2_MUL
(
PLL2In√¥
->
PLL2MUL
));

755 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RCC_HSE_PREDIV2
(
PLL2In√¥
->
HSEP¬™div2V√Üue
));

759 i‚Ä°(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
) && \

760 (
	`__HAL_RCC_HSE_GET_PREDIV2
(√ã!Ô£ø
PLL2In√¥
->
HSEP¬™div2V√Üue
))

762  
HAL_ERROR
;

766 
	`__HAL_RCC_PLL2_DISABLE
();

769 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

772 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
√ã!Ô£ø
RESET
)

774 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

776  
HAL_TIMEOUT
;

781 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLL2In√¥
->
HSEP¬™div2V√Üue
);

784 
	`__HAL_RCC_PLL2_CONFIG
(
PLL2In√¥
->
PLL2MUL
);

787 
	`__HAL_RCC_PLL2_ENABLE
();

790 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

793 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
√ã=Ô£ø
RESET
)

795 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

797  
HAL_TIMEOUT
;

802  
HAL_OK
;

803 
	}
}

810 
HAL_S√®tusTy‚â•Def
 
	$HAL_RCCEx_Di√üb√ÄPLL2
()

812 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

816 i‚Ä°((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(√ã=Ô£ø
RCC_PLLSOURCE_HSE
) && \

817 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(√ã=Ô£ø
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

818 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)√ã=Ô£ø
RCC_CFGR2_PREDIV1SRC_PLL2
))

820  
HAL_ERROR
;

825 
	`__HAL_RCC_PLL2_DISABLE
();

828 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

831 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
√ã!Ô£ø
RESET
)

833 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
PLL2_TIMEOUT_VALUE
)

835  
HAL_TIMEOUT
;

840  
HAL_OK
;

841 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc.c

186 
	~"¬∞m32f1xx_h√Ü.h
"

197 #ifde‚Ä°
HAL_RTC_MODULE_ENABLED


204 
	#RTC_ALARM_RESETVALUE_REGISTER
 (
u√∂t16_t
)0xFFFF

	)

205 
	#RTC_ALARM_RESETVALUE
 0xFFFFFFFFU

	)

224 
u√∂t32_t
 
RTC_R√≥dTimeCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

225 
HAL_S√®tusTy‚â•Def
 
RTC_Wr√¥eTimeCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
TimeCou¬°√Æ
);

226 
u√∂t32_t
 
RTC_R√≥dA≈ìrmCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

227 
HAL_S√®tusTy‚â•Def
 
RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
A≈ìrmCou¬°√Æ
);

228 
HAL_S√®tusTy‚â•Def
 
RTC_E¬°√ÆIn√¥Mode
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

229 
HAL_S√®tusTy‚â•Def
 
RTC_Ex√¥In√¥Mode
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
);

230 
u√∂t8_t
 
RTC_By√£ToBcd2
(u√∂t8_√†
V√Üue
);

231 
u√∂t8_t
 
RTC_Bcd2ToBy√£
(u√∂t8_√†
V√Üue
);

232 
u√∂t8_t
 
RTC_IsL√≥pY√≥r
(
u√∂t16_t
 
nY√≥r
);

233 
RTC_D¬©eUpd¬©e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
DayE≈ìp¬£d
);

234 
u√∂t8_t
 
RTC_W√¨kDayNum
(
u√∂t32_t
 
nY√≥r
, u√∂t8_√†
nM‚ÅÑth
, u√∂t8_√†
nDay
);

275 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_In√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

277 
u√∂t32_t
 
¬•esÀá√Är
 = 0U;

279 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

281  
HAL_ERROR
;

285 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
hœÄc
->
In¬∞‚Ñ¢Àö
));

286 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_CALIB_OUTPUT
(
hœÄc
->
In√¥
.
OutPut
));

287 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ASYNCH_PREDIV
(
hœÄc
->
In√¥
.
AsynchP¬™div
));

289 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

290 i‚Ä°(
hœÄc
->
S√®√£
 =Ô£ø
HAL_RTC_STATE_RESET
)

293 
hœÄc
->
Lock
 = 
HAL_UNLOCKED
;

295 
hœÄc
->
A≈ìrmAEv√≠tC√Ülback
 = 
HAL_RTC_A≈ìrmAEv√≠tC√Ülback
;

296 
hœÄc
->
Tam‚â•r1Ev√≠tC√Ülback
 = 
HAL_RTCEx_Tam‚â•r1Ev√≠tC√Ülback
;

298 i‚Ä°(
hœÄc
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

300 
hœÄc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢In√¥
;

303 
hœÄc
->
	`M‚Ä¢In√¥C√Ülback
(hrtc);

305 i‚Ä°(
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

307 
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢DeIn√¥
;

311 i‚Ä°(
hœÄc
->
S√®√£
 =Ô£ø
HAL_RTC_STATE_RESET
)

314 
hœÄc
->
Lock
 = 
HAL_UNLOCKED
;

317 
	`HAL_RTC_M‚Ä¢In√¥
(
hœÄc
);

322 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

325 i‚Ä°(
	`HAL_RTC_Wa√¥F‚ÄπSynchro
(
hœÄc
√ã!Ô£ø
HAL_OK
)

328 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

330  
HAL_ERROR
;

334 i‚Ä°(
	`RTC_E¬°√ÆIn√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

337 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

339  
HAL_ERROR
;

344 
	`CLEAR_BIT
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
, (
RTC_FLAG_OW
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_SEC
));

346 i‚Ä°(
hœÄc
->
In√¥
.
OutPut
 !Ô£ø
RTC_OUTPUTSOURCE_NONE
)

349 
	`CLEAR_BIT
(
BKP
->
CR
, 
BKP_CR_TPE
);

353 
	`MODIFY_REG
(
BKP
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
 | 
BKP_RTCCR_ASOS
), 
hœÄc
->
In√¥
.
OutPut
);

355 i‚Ä°(
hœÄc
->
In√¥
.
AsynchP¬™div
 !Ô£ø
RTC_AUTO_1_SECOND
)

358 
¬•esÀá√Är
 = 
hœÄc
->
In√¥
.
AsynchP¬™div
;

364 
¬•esÀá√Är
 = 
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_RTC
);

367 i‚Ä°(
¬•esÀá√Är
 == 0U)

370 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

371  
HAL_ERROR
;

376 
¬•esÀá√Är
 =√ñrescaler - 1U;

381 
	`MODIFY_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
PRLH
, 
RTC_PRLH_PRL
, (
¬•esÀá√Är
 >> 16U));

382 
	`MODIFY_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
PRLL
, 
RTC_PRLL_PRL
, (
¬•esÀá√Är
 & RTC_PRLL_PRL));

385 i‚Ä°(
	`RTC_Ex√¥In√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

387 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

389  
HAL_ERROR
;

393 
hœÄc
->
D¬©eToUpd¬©e
.
Y√≥r
 = 0x00U;

394 
hœÄc
->
D¬©eToUpd¬©e
.
M‚ÅÑth
 = 
RTC_MONTH_JANUARY
;

395 
hœÄc
->
D¬©eToUpd¬©e
.
D¬©e
 = 0x01U;

398 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

400  
HAL_OK
;

402 
	}
}

411 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_DeIn√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

414 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

416  
HAL_ERROR
;

420 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
hœÄc
->
In¬∞‚Ñ¢Àö
));

423 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

426 i‚Ä°(
	`RTC_E¬°√ÆIn√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

429 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

432 
	`__HAL_UNLOCK
(
hœÄc
);

434  
HAL_ERROR
;

438 
	`CLEAR_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTL
);

439 
	`CLEAR_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTH
);

440 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
PRLL
, 0x00008000U);

441 
	`CLEAR_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
PRLH
);

444 
	`CLEAR_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRH
);

445 
	`CLEAR_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
);

447 i‚Ä°(
	`RTC_Ex√¥In√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

449 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

452 
	`__HAL_UNLOCK
(
hœÄc
);

454  
HAL_ERROR
;

459 
	`HAL_RTC_Wa√¥F‚ÄπSynchro
(
hœÄc
);

462 
	`CLEAR_BIT
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
, 
RTC_FLAG_RSF
);

464 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

465 i‚Ä°(
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

467 
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢DeIn√¥
;

471 
hœÄc
->
	`M‚Ä¢DeIn√¥C√Ülback
(hrtc);

475 
	`HAL_RTC_M‚Ä¢DeIn√¥
(
hœÄc
);

478 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_RESET
;

481 
	`__HAL_UNLOCK
(
hœÄc
);

483  
HAL_OK
;

484 
	}
}

486 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

500 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_Regi¬∞√ÆC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
HAL_RTC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pRTC_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

502 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

504 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

506  
HAL_ERROR
;

510 
	`__HAL_LOCK
(
hœÄc
);

512 i‚Ä°(
HAL_RTC_STATE_READY
 =Ô£ø
hœÄc
->
S√®√£
)

514 
C√ÜlbackID
)

516 
HAL_RTC_ALARM_A_EVENT_CB_ID
 :

517 
hœÄc
->
A≈ìrmAEv√≠tC√Ülback
 = 
pC√Ülback
;

520 
HAL_RTC_TAMPER1_EVENT_CB_ID
 :

521 
hœÄc
->
Tam‚â•r1Ev√≠tC√Ülback
 = 
pC√Ülback
;

524 
HAL_RTC_MSPINIT_CB_ID
 :

525 
hœÄc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

528 
HAL_RTC_MSPDEINIT_CB_ID
 :

529 
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

534 
¬∞¬©us
 = 
HAL_ERROR
;

538 i‚Ä°(
HAL_RTC_STATE_RESET
 =Ô£ø
hœÄc
->
S√®√£
)

540 
C√ÜlbackID
)

542 
HAL_RTC_MSPINIT_CB_ID
 :

543 
hœÄc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

546 
HAL_RTC_MSPDEINIT_CB_ID
 :

547 
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

552 
¬∞¬©us
 = 
HAL_ERROR
;

559 
¬∞¬©us
 = 
HAL_ERROR
;

563 
	`__HAL_UNLOCK
(
hœÄc
);

565  
¬∞¬©us
;

566 
	}
}

580 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_UnRegi¬∞√ÆC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
HAL_RTC_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

582 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

585 
	`__HAL_LOCK
(
hœÄc
);

587 i‚Ä°(
HAL_RTC_STATE_READY
 =Ô£ø
hœÄc
->
S√®√£
)

589 
C√ÜlbackID
)

591 
HAL_RTC_ALARM_A_EVENT_CB_ID
 :

592 
hœÄc
->
A≈ìrmAEv√≠tC√Ülback
 = 
HAL_RTC_A≈ìrmAEv√≠tC√Ülback
;

595 
HAL_RTC_TAMPER1_EVENT_CB_ID
 :

596 
hœÄc
->
Tam‚â•r1Ev√≠tC√Ülback
 = 
HAL_RTCEx_Tam‚â•r1Ev√≠tC√Ülback
;

599 
HAL_RTC_MSPINIT_CB_ID
 :

600 
hœÄc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢In√¥
;

603 
HAL_RTC_MSPDEINIT_CB_ID
 :

604 
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢DeIn√¥
;

609 
¬∞¬©us
 = 
HAL_ERROR
;

613 i‚Ä°(
HAL_RTC_STATE_RESET
 =Ô£ø
hœÄc
->
S√®√£
)

615 
C√ÜlbackID
)

617 
HAL_RTC_MSPINIT_CB_ID
 :

618 
hœÄc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢In√¥
;

621 
HAL_RTC_MSPDEINIT_CB_ID
 :

622 
hœÄc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_RTC_M‚Ä¢DeIn√¥
;

627 
¬∞¬©us
 = 
HAL_ERROR
;

634 
¬∞¬©us
 = 
HAL_ERROR
;

638 
	`__HAL_UNLOCK
(
hœÄc
);

640  
¬∞¬©us
;

641 
	}
}

650 
__w√≥k
 
	$HAL_RTC_M‚Ä¢In√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

653 
	`UNUSED
(
hœÄc
);

657 
	}
}

665 
__w√≥k
 
	$HAL_RTC_M‚Ä¢DeIn√¥
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

668 
	`UNUSED
(
hœÄc
);

672 
	}
}

703 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_S√´Time
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_TimeTy‚â•Def
 *
sTime
, 
u√∂t32_t
 
F‚Äπm¬©
)

705 
u√∂t32_t
 
cou¬°√Æ_time
 = 0U, 
cou¬°√Æ_√Ü¬®m
 = 0U;

708 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sTime
 == NULL))

710  
HAL_ERROR
;

714 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

717 
	`__HAL_LOCK
(
hœÄc
);

719 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

721 i‚Ä°(
F‚Äπm¬©
 =Ô£ø
RTC_FORMAT_BIN
)

723 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_HOUR24
(
sTime
->
Hours
));

724 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MINUTES
(
sTime
->
M√∂u√£s
));

725 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SECONDS
(
sTime
->
Sec‚ÅÑds
));

727 
cou¬°√Æ_time
 = (
u√∂t32_t
)(((u√∂t32_t)
sTime
->
Hours
 * 3600U) + \

728 ((
u√∂t32_t
)
sTime
->
M√∂u√£s
 * 60U) + \

729 ((
u√∂t32_t
)
sTime
->
Sec‚ÅÑds
));

733 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToBy√£
(
sTime
->
Hours
)));

734 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToBy√£
(
sTime
->
M√∂u√£s
)));

735 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToBy√£
(
sTime
->
Sec‚ÅÑds
)));

737 
cou¬°√Æ_time
 = (((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sTime
->
Hours
)) * 3600U) + \

738 ((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sTime
->
M√∂u√£s
)) * 60U) + \

739 ((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sTime
->
Sec‚ÅÑds
))));

743 i‚Ä°(
	`RTC_Wr√¥eTimeCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_time
√ã!Ô£ø
HAL_OK
)

746 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

749 
	`__HAL_UNLOCK
(
hœÄc
);

751  
HAL_ERROR
;

756 
	`CLEAR_BIT
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
, (
RTC_FLAG_SEC
 | 
RTC_FLAG_OW
));

759 
cou¬°√Æ_√Ü¬®m
 = 
	`RTC_R√≥dA≈ìrmCou¬°√Æ
(
hœÄc
);

762 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 !Ô£ø
RTC_ALARM_RESETVALUE
)

764 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 < 
cou¬°√Æ_time
)

767 
cou¬°√Æ_√Ü¬®m
 +Ô£ø(
u√∂t32_t
)(24U * 3600U);

770 i‚Ä°(
	`RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_√Ü¬®m
√ã!Ô£ø
HAL_OK
)

773 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

776 
	`__HAL_UNLOCK
(
hœÄc
);

778  
HAL_ERROR
;

783 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

785 
	`__HAL_UNLOCK
(
hœÄc
);

787  
HAL_OK
;

789 
	}
}

802 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_G√´Time
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_TimeTy‚â•Def
 *
sTime
, 
u√∂t32_t
 
F‚Äπm¬©
)

804 
u√∂t32_t
 
cou¬°√Æ_time
 = 0U, 
cou¬°√Æ_√Ü¬®m
 = 0U, 
days_√±‚â†¬£d
 = 0U, 
hours
 = 0U;

807 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sTime
 == NULL))

809  
HAL_ERROR
;

813 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

816 i‚Ä°(
	`__HAL_RTC_OVERFLOW_GET_FLAG
(
hœÄc
, 
RTC_FLAG_OW
))

818  
HAL_ERROR
;

822 
cou¬°√Æ_time
 = 
	`RTC_R√≥dTimeCou¬°√Æ
(
hœÄc
);

825 
hours
 = 
cou¬°√Æ_time
 / 3600U;

826 
sTime
->
M√∂u√£s
 = (
u√∂t8_t
)((
cou¬°√Æ_time
 % 3600U) / 60U);

827 
sTime
->
Sec‚ÅÑds
 = (
u√∂t8_t
)((
cou¬°√Æ_time
 % 3600U) % 60U);

829 i‚Ä°(
hours
 >= 24U)

832 
days_√±‚â†¬£d
 = (
hours
 / 24U);

835 
sTime
->
Hours
 = (
hours
 % 24U);

838 
cou¬°√Æ_√Ü¬®m
 = 
	`RTC_R√≥dA≈ìrmCou¬°√Æ
(
hœÄc
);

841 i‚Ä°((
cou¬°√Æ_√Ü¬®m
 !Ô£ø
RTC_ALARM_RESETVALUE
√ã&& (cou¬°√Æ_√Ü¬®m > 
cou¬°√Æ_time
))

843 
cou¬°√Æ_√Ü¬®m
 -Ô£ø
cou¬°√Æ_time
;

849 
cou¬°√Æ_√Ü¬®m
 = 
RTC_ALARM_RESETVALUE
;

853 
cou¬°√Æ_time
 -Ô£ø(
days_√±‚â†¬£d
 * 24U * 3600U);

856 i‚Ä°(
	`RTC_Wr√¥eTimeCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_time
√ã!Ô£ø
HAL_OK
)

858  
HAL_ERROR
;

862 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 !Ô£ø
RTC_ALARM_RESETVALUE
)

864 
cou¬°√Æ_√Ü¬®m
 +Ô£ø
cou¬°√Æ_time
;

867 i‚Ä°(
	`RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_√Ü¬®m
√ã!Ô£ø
HAL_OK
)

869  
HAL_ERROR
;

875 i‚Ä°(
	`RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_√Ü¬®m
√ã!Ô£ø
HAL_OK
)

877  
HAL_ERROR
;

882 
	`RTC_D¬©eUpd¬©e
(
hœÄc
, 
days_√±‚â†¬£d
);

886 
sTime
->
Hours
 = 
hours
;

890 i‚Ä°(
F‚Äπm¬©
 !Ô£ø
RTC_FORMAT_BIN
)

893 
sTime
->
Hours
 = (
u√∂t8_t
)
	`RTC_By√£ToBcd2
(sTime->Hours);

894 
sTime
->
M√∂u√£s
 = (
u√∂t8_t
)
	`RTC_By√£ToBcd2
(sTime->Minutes);

895 
sTime
->
Sec‚ÅÑds
 = (
u√∂t8_t
)
	`RTC_By√£ToBcd2
(sTime->Seconds);

898  
HAL_OK
;

899 
	}
}

913 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_S√´D¬©e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_D¬©eTy‚â•Def
 *
sD¬©e
, 
u√∂t32_t
 
F‚Äπm¬©
)

915 
u√∂t32_t
 
cou¬°√Æ_time
 = 0U, 
cou¬°√Æ_√Ü¬®m
 = 0U, 
hours
 = 0U;

918 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sD¬©e
 == NULL))

920  
HAL_ERROR
;

924 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

927 
	`__HAL_LOCK
(
hœÄc
);

929 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

931 i‚Ä°(
F‚Äπm¬©
 =Ô£ø
RTC_FORMAT_BIN
)

933 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_YEAR
(
sD¬©e
->
Y√≥r
));

934 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MONTH
(
sD¬©e
->
M‚ÅÑth
));

935 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_DATE
(
sD¬©e
->
D¬©e
));

938 
hœÄc
->
D¬©eToUpd¬©e
.
Y√≥r
 = 
sD¬©e
->Year;

939 
hœÄc
->
D¬©eToUpd¬©e
.
M‚ÅÑth
 = 
sD¬©e
->Month;

940 
hœÄc
->
D¬©eToUpd¬©e
.
D¬©e
 = 
sD¬©e
->Date;

944 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToBy√£
(
sD¬©e
->
Y√≥r
)));

945 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MONTH
(
	`RTC_Bcd2ToBy√£
(
sD¬©e
->
M‚ÅÑth
)));

946 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_DATE
(
	`RTC_Bcd2ToBy√£
(
sD¬©e
->
D¬©e
)));

949 
hœÄc
->
D¬©eToUpd¬©e
.
Y√≥r
 = 
	`RTC_Bcd2ToBy√£
(
sD¬©e
->Year);

950 
hœÄc
->
D¬©eToUpd¬©e
.
M‚ÅÑth
 = 
	`RTC_Bcd2ToBy√£
(
sD¬©e
->Month);

951 
hœÄc
->
D¬©eToUpd¬©e
.
D¬©e
 = 
	`RTC_Bcd2ToBy√£
(
sD¬©e
->Date);

955 
hœÄc
->
D¬©eToUpd¬©e
.
W√¨kDay
 = 
	`RTC_W√¨kDayNum
(hœÄc->D¬©eToUpd¬©e.
Y√≥r
, hœÄc->D¬©eToUpd¬©e.
M‚ÅÑth
, hœÄc->D¬©eToUpd¬©e.
D¬©e
);

956 
sD¬©e
->
W√¨kDay
 = 
hœÄc
->
D¬©eToUpd¬©e
.WeekDay;

960 
cou¬°√Æ_time
 = 
	`RTC_R√≥dTimeCou¬°√Æ
(
hœÄc
);

963 
hours
 = 
cou¬°√Æ_time
 / 3600U;

964 i‚Ä°(
hours
 > 24U)

967 
cou¬°√Æ_time
 -Ô£ø((
hours
 / 24U) * 24U * 3600U);

969 i‚Ä°(
	`RTC_Wr√¥eTimeCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_time
√ã!Ô£ø
HAL_OK
)

972 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

975 
	`__HAL_UNLOCK
(
hœÄc
);

977  
HAL_ERROR
;

981 
cou¬°√Æ_√Ü¬®m
 = 
	`RTC_R√≥dA≈ìrmCou¬°√Æ
(
hœÄc
);

984 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 !Ô£ø
RTC_ALARM_RESETVALUE
)

986 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 < 
cou¬°√Æ_time
)

989 
cou¬°√Æ_√Ü¬®m
 +Ô£ø(
u√∂t32_t
)(24U * 3600U);

992 i‚Ä°(
	`RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_√Ü¬®m
√ã!Ô£ø
HAL_OK
)

995 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

998 
	`__HAL_UNLOCK
(
hœÄc
);

1000  
HAL_ERROR
;

1008 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
 ;

1011 
	`__HAL_UNLOCK
(
hœÄc
);

1013  
HAL_OK
;

1014 
	}
}

1027 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_G√´D¬©e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_D¬©eTy‚â•Def
 *
sD¬©e
, 
u√∂t32_t
 
F‚Äπm¬©
)

1029 
RTC_TimeTy‚â•Def
 
¬∞ime
 = {0U};

1032 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sD¬©e
 == NULL))

1034  
HAL_ERROR
;

1038 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

1041 i‚Ä°(
	`HAL_RTC_G√´Time
(
hœÄc
, &
¬∞ime
, 
RTC_FORMAT_BIN
√ã!Ô£ø
HAL_OK
)

1043  
HAL_ERROR
;

1047 
sD¬©e
->
W√¨kDay
 = 
hœÄc
->
D¬©eToUpd¬©e
.WeekDay;

1048 
sD¬©e
->
Y√≥r
 = 
hœÄc
->
D¬©eToUpd¬©e
.Year;

1049 
sD¬©e
->
M‚ÅÑth
 = 
hœÄc
->
D¬©eToUpd¬©e
.Month;

1050 
sD¬©e
->
D¬©e
 = 
hœÄc
->
D¬©eToUpd¬©e
.Date;

1053 i‚Ä°(
F‚Äπm¬©
 !Ô£ø
RTC_FORMAT_BIN
)

1056 
sD¬©e
->
Y√≥r
 = (
u√∂t8_t
)
	`RTC_By√£ToBcd2
(sDate->Year);

1057 
sD¬©e
->
M‚ÅÑth
 = (
u√∂t8_t
)
	`RTC_By√£ToBcd2
(sDate->Month);

1058 
sD¬©e
->
D¬©e
 = (
u√∂t8_t
)
	`RTC_By√£ToBcd2
(sDate->Date);

1060  
HAL_OK
;

1061 
	}
}

1092 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_S√´A≈ìrm
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_A≈ìrmTy‚â•Def
 *
sA≈ìrm
, 
u√∂t32_t
 
F‚Äπm¬©
)

1094 
u√∂t32_t
 
cou¬°√Æ_√Ü¬®m
 = 0U, 
cou¬°√Æ_time
;

1095 
RTC_TimeTy‚â•Def
 
¬∞ime
 = {0U};

1098 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sA≈ìrm
 == NULL))

1100  
HAL_ERROR
;

1104 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

1105 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALARM
(
sA≈ìrm
->
A≈ìrm
));

1108 
	`__HAL_LOCK
(
hœÄc
);

1110 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

1113 i‚Ä°(
	`HAL_RTC_G√´Time
(
hœÄc
, &
¬∞ime
, 
RTC_FORMAT_BIN
√ã!Ô£ø
HAL_OK
)

1115  
HAL_ERROR
;

1119 
cou¬°√Æ_time
 = (
u√∂t32_t
)(((u√∂t32_t)
¬∞ime
.
Hours
 * 3600U) + \

1120 ((
u√∂t32_t
)
¬∞ime
.
M√∂u√£s
 * 60U) + \

1121 ((
u√∂t32_t
)
¬∞ime
.
Sec‚ÅÑds
));

1123 i‚Ä°(
F‚Äπm¬©
 =Ô£ø
RTC_FORMAT_BIN
)

1125 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_HOUR24
(
sA≈ìrm
->
A≈ìrmTime
.
Hours
));

1126 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MINUTES
(
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
));

1127 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SECONDS
(
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
));

1129 
cou¬°√Æ_√Ü¬®m
 = (
u√∂t32_t
)(((u√∂t32_t)
sA≈ìrm
->
A≈ìrmTime
.
Hours
 * 3600U) + \

1130 ((
u√∂t32_t
)
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
 * 60U) + \

1131 ((
u√∂t32_t
)
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
));

1135 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Hours
)));

1136 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
)));

1137 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
)));

1139 
cou¬°√Æ_√Ü¬®m
 = (((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Hours
)) * 3600U) + \

1140 ((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
)) * 60U) + \

1141 ((
u√∂t32_t
)
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
)));

1145 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 < 
cou¬°√Æ_time
)

1148 
cou¬°√Æ_√Ü¬®m
 +Ô£ø(
u√∂t32_t
)(24U * 3600U);

1152 i‚Ä°(
	`RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_√Ü¬®m
√ã!Ô£ø
HAL_OK
)

1155 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

1158 
	`__HAL_UNLOCK
(
hœÄc
);

1160  
HAL_ERROR
;

1164 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

1166 
	`__HAL_UNLOCK
(
hœÄc
);

1168  
HAL_OK
;

1170 
	}
}

1184 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_S√´A≈ìrm_IT
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_A≈ìrmTy‚â•Def
 *
sA≈ìrm
, 
u√∂t32_t
 
F‚Äπm¬©
)

1186 
u√∂t32_t
 
cou¬°√Æ_√Ü¬®m
 = 0U, 
cou¬°√Æ_time
;

1187 
RTC_TimeTy‚â•Def
 
¬∞ime
 = {0U};

1190 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sA≈ìrm
 == NULL))

1192  
HAL_ERROR
;

1196 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

1197 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALARM
(
sA≈ìrm
->
A≈ìrm
));

1200 
	`__HAL_LOCK
(
hœÄc
);

1202 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

1205 i‚Ä°(
	`HAL_RTC_G√´Time
(
hœÄc
, &
¬∞ime
, 
RTC_FORMAT_BIN
√ã!Ô£ø
HAL_OK
)

1207  
HAL_ERROR
;

1211 
cou¬°√Æ_time
 = (
u√∂t32_t
)(((u√∂t32_t)
¬∞ime
.
Hours
 * 3600U) + \

1212 ((
u√∂t32_t
)
¬∞ime
.
M√∂u√£s
 * 60U) + \

1213 ((
u√∂t32_t
)
¬∞ime
.
Sec‚ÅÑds
));

1215 i‚Ä°(
F‚Äπm¬©
 =Ô£ø
RTC_FORMAT_BIN
)

1217 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_HOUR24
(
sA≈ìrm
->
A≈ìrmTime
.
Hours
));

1218 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MINUTES
(
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
));

1219 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SECONDS
(
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
));

1221 
cou¬°√Æ_√Ü¬®m
 = (
u√∂t32_t
)(((u√∂t32_t)
sA≈ìrm
->
A≈ìrmTime
.
Hours
 * 3600U) + \

1222 ((
u√∂t32_t
)
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
 * 60U) + \

1223 ((
u√∂t32_t
)
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
));

1227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Hours
)));

1228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
)));

1229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
)));

1231 
cou¬°√Æ_√Ü¬®m
 = (((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Hours
)) * 3600U) + \

1232 ((
u√∂t32_t
)(
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
)) * 60U) + \

1233 ((
u√∂t32_t
)
	`RTC_Bcd2ToBy√£
(
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
)));

1237 i‚Ä°(
cou¬°√Æ_√Ü¬®m
 < 
cou¬°√Æ_time
)

1240 
cou¬°√Æ_√Ü¬®m
 +Ô£ø(
u√∂t32_t
)(24U * 3600U);

1244 i‚Ä°(
	`RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
hœÄc
, 
cou¬°√Æ_√Ü¬®m
√ã!Ô£ø
HAL_OK
)

1247 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

1250 
	`__HAL_UNLOCK
(
hœÄc
);

1252  
HAL_ERROR
;

1257 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_ALRAF
);

1260 
	`__HAL_RTC_ALARM_ENABLE_IT
(
hœÄc
, 
RTC_IT_ALRA
);

1263 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
();

1265 
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
();

1267 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

1269 
	`__HAL_UNLOCK
(
hœÄc
);

1271  
HAL_OK
;

1273 
	}
}

1289 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_G√´A≈ìrm
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_A≈ìrmTy‚â•Def
 *
sA≈ìrm
, 
u√∂t32_t
 
A≈ìrm
, u√∂t32_√†
F‚Äπm¬©
)

1291 
u√∂t32_t
 
cou¬°√Æ_√Ü¬®m
 = 0U;

1294 
	`UNUSED
(
A≈ìrm
);

1297 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sA≈ìrm
 == NULL))

1299  
HAL_ERROR
;

1303 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_FORMAT
(
F‚Äπm¬©
));

1304 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALARM
(
A≈ìrm
));

1307 
cou¬°√Æ_√Ü¬®m
 = 
	`RTC_R√≥dA≈ìrmCou¬°√Æ
(
hœÄc
);

1311 
sA≈ìrm
->
A≈ìrmTime
.
Hours
 = (
u√∂t32_t
)((
cou¬°√Æ_√Ü¬®m
 / 3600U) % 24U);

1312 
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
 = (
u√∂t32_t
)((
cou¬°√Æ_√Ü¬®m
 % 3600U) / 60U);

1313 
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
 = (
u√∂t32_t
)((
cou¬°√Æ_√Ü¬®m
 % 3600U) % 60U);

1315 i‚Ä°(
F‚Äπm¬©
 !Ô£ø
RTC_FORMAT_BIN
)

1317 
sA≈ìrm
->
A≈ìrmTime
.
Hours
 = 
	`RTC_By√£ToBcd2
(sAlarm->AlarmTime.Hours);

1318 
sA≈ìrm
->
A≈ìrmTime
.
M√∂u√£s
 = 
	`RTC_By√£ToBcd2
(sAlarm->AlarmTime.Minutes);

1319 
sA≈ìrm
->
A≈ìrmTime
.
Sec‚ÅÑds
 = 
	`RTC_By√£ToBcd2
(sAlarm->AlarmTime.Seconds);

1322  
HAL_OK
;

1323 
	}
}

1334 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_D√≥Àòiv¬©eA≈ìrm
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
A≈ìrm
)

1337 
	`UNUSED
(
A≈ìrm
);

1340 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALARM
(
A≈ìrm
));

1343 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

1345  
HAL_ERROR
;

1349 
	`__HAL_LOCK
(
hœÄc
);

1351 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

1354 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hœÄc
, 
RTC_IT_ALRA
);

1357 i‚Ä°(
	`RTC_E¬°√ÆIn√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

1360 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

1363 
	`__HAL_UNLOCK
(
hœÄc
);

1365  
HAL_ERROR
;

1370 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_ALRAF
);

1373 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
ALRH
, 
RTC_ALARM_RESETVALUE_REGISTER
);

1374 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
ALRL
, 
RTC_ALARM_RESETVALUE_REGISTER
);

1377 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
();

1380 i‚Ä°(
	`RTC_Ex√¥In√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

1382 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

1385 
	`__HAL_UNLOCK
(
hœÄc
);

1387  
HAL_ERROR
;

1390 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

1393 
	`__HAL_UNLOCK
(
hœÄc
);

1395  
HAL_OK
;

1396 
	}
}

1404 
	$HAL_RTC_A≈ìrmIRQH‚Ñ¢d√Är
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1406 i‚Ä°(
	`__HAL_RTC_ALARM_GET_IT_SOURCE
(
hœÄc
, 
RTC_IT_ALRA
))

1409 i‚Ä°(
	`__HAL_RTC_ALARM_GET_FLAG
(
hœÄc
, 
RTC_FLAG_ALRAF
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

1412 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

1413 
hœÄc
->
	`A≈ìrmAEv√≠tC√Ülback
(hrtc);

1415 
	`HAL_RTC_A≈ìrmAEv√≠tC√Ülback
(
hœÄc
);

1419 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_ALRAF
);

1424 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
();

1427 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

1428 
	}
}

1436 
__w√≥k
 
	$HAL_RTC_A≈ìrmAEv√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1439 
	`UNUSED
(
hœÄc
);

1443 
	}
}

1452 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_PÔ¨ÅlF‚ÄπA≈ìrmAEv√≠t
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Timeout
)

1454 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1457 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

1459  
HAL_ERROR
;

1462 
	`__HAL_RTC_ALARM_GET_FLAG
(
hœÄc
, 
RTC_FLAG_ALRAF
√ã=Ô£ø
RESET
)

1464 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1466 i‚Ä°((
Timeout
 =Ô£ø0√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
) > Timeout))

1468 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_TIMEOUT
;

1469  
HAL_TIMEOUT
;

1475 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_ALRAF
);

1478 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

1480  
HAL_OK
;

1481 
	}
}

1507 
HAL_RTCS√®√£Ty‚â•Def
 
	$HAL_RTC_G√´S√®√£
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1509  
hœÄc
->
S√®√£
;

1510 
	}
}

1540 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTC_Wa√¥F‚ÄπSynchro
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1542 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1545 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

1547  
HAL_ERROR
;

1551 
	`CLEAR_BIT
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
, 
RTC_FLAG_RSF
);

1553 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1556 (
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
 & 
RTC_FLAG_RSF
√ã=Ô£ø(
u√∂t32_t
)
RESET
)

1558 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RTC_TIMEOUT_VALUE
)

1560  
HAL_TIMEOUT
;

1564  
HAL_OK
;

1565 
	}
}

1587 
u√∂t32_t
 
	$RTC_R√≥dTimeCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1589 
u√∂t16_t
 
high1
 = 0U, 
high2
 = 0U, 
low
 = 0U;

1590 
u√∂t32_t
 
timecou¬°√Æ
 = 0U;

1592 
high1
 = 
	`READ_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTH
 & 
RTC_CNTH_RTC_CNT
);

1593 
low
 = 
	`READ_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTL
 & 
RTC_CNTL_RTC_CNT
);

1594 
high2
 = 
	`READ_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTH
 & 
RTC_CNTH_RTC_CNT
);

1596 i‚Ä°(
high1
 !Ô£ø
high2
)

1600 
timecou¬°√Æ
 = (((
u√∂t32_t
√ã
high2
 << 16U√ã| 
	`READ_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTL
 & 
RTC_CNTL_RTC_CNT
));

1606 
timecou¬°√Æ
 = (((
u√∂t32_t
√ã
high1
 << 16U√ã| 
low
);

1609  
timecou¬°√Æ
;

1610 
	}
}

1619 
HAL_S√®tusTy‚â•Def
 
	$RTC_Wr√¥eTimeCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
TimeCou¬°√Æ
)

1621 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1624 i‚Ä°(
	`RTC_E¬°√ÆIn√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

1626 
¬∞¬©us
 = 
HAL_ERROR
;

1631 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTH
, (
TimeCou¬°√Æ
 >> 16U));

1633 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTL
, (
TimeCou¬°√Æ
 & 
RTC_CNTL_RTC_CNT
));

1636 i‚Ä°(
	`RTC_Ex√¥In√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

1638 
¬∞¬©us
 = 
HAL_ERROR
;

1642  
¬∞¬©us
;

1643 
	}
}

1651 
u√∂t32_t
 
	$RTC_R√≥dA≈ìrmCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1653 
u√∂t16_t
 
high1
 = 0U, 
low
 = 0U;

1655 
high1
 = 
	`READ_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
ALRH
 & 
RTC_CNTH_RTC_CNT
);

1656 
low
 = 
	`READ_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
ALRL
 & 
RTC_CNTL_RTC_CNT
);

1658  (((
u√∂t32_t
√ã
high1
 << 16U√ã| 
low
);

1659 
	}
}

1668 
HAL_S√®tusTy‚â•Def
 
	$RTC_Wr√¥eA≈ìrmCou¬°√Æ
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
A≈ìrmCou¬°√Æ
)

1670 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1673 i‚Ä°(
	`RTC_E¬°√ÆIn√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

1675 
¬∞¬©us
 = 
HAL_ERROR
;

1680 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
ALRH
, (
A≈ìrmCou¬°√Æ
 >> 16U));

1682 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
ALRL
, (
A≈ìrmCou¬°√Æ
 & 
RTC_ALRL_RTC_ALR
));

1685 i‚Ä°(
	`RTC_Ex√¥In√¥Mode
(
hœÄc
√ã!Ô£ø
HAL_OK
)

1687 
¬∞¬©us
 = 
HAL_ERROR
;

1691  
¬∞¬©us
;

1692 
	}
}

1700 
HAL_S√®tusTy‚â•Def
 
	$RTC_E¬°√ÆIn√¥Mode
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1702 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1704 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1706 (
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
 & 
RTC_CRL_RTOFF
√ã=Ô£ø(
u√∂t32_t
)
RESET
)

1708 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RTC_TIMEOUT_VALUE
)

1710  
HAL_TIMEOUT
;

1715 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hœÄc
);

1718  
HAL_OK
;

1719 
	}
}

1727 
HAL_S√®tusTy‚â•Def
 
	$RTC_Ex√¥In√¥Mode
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

1729 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1732 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hœÄc
);

1734 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1736 (
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
 & 
RTC_CRL_RTOFF
√ã=Ô£ø(
u√∂t32_t
)
RESET
)

1738 i‚Ä°((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
RTC_TIMEOUT_VALUE
)

1740  
HAL_TIMEOUT
;

1744  
HAL_OK
;

1745 
	}
}

1752 
u√∂t8_t
 
	$RTC_By√£ToBcd2
(
u√∂t8_t
 
V√Üue
)

1754 
u√∂t32_t
 
bcdhigh
 = 0U;

1756 
V√Üue
 >= 10U)

1758 
bcdhigh
++;

1759 
V√Üue
 -= 10U;

1762  ((
u√∂t8_t
)(
bcdhigh
 << 4U√ã| 
V√Üue
);

1763 
	}
}

1770 
u√∂t8_t
 
	$RTC_Bcd2ToBy√£
(
u√∂t8_t
 
V√Üue
)

1772 
u√∂t32_t
 
tmp
 = 0U;

1773 
tmp
 = ((
u√∂t8_t
)(
V√Üue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;

1774  (
tmp
 + (
V√Üue
 & (
u√∂t8_t
)0x0F));

1775 
	}
}

1784 
	$RTC_D¬©eUpd¬©e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
DayE≈ìp¬£d
)

1786 
u√∂t32_t
 
y√≥r
 = 0U, 
m‚ÅÑth
 = 0U, 
day
 = 0U;

1787 
u√∂t32_t
 
lo‚Ä∫
 = 0U;

1790 
y√≥r
 = 
hœÄc
->
D¬©eToUpd¬©e
.
Y√≥r
;

1793 
m‚ÅÑth
 = 
hœÄc
->
D¬©eToUpd¬©e
.
M‚ÅÑth
;

1794 
day
 = 
hœÄc
->
D¬©eToUpd¬©e
.
D¬©e
;

1796 
lo‚Ä∫
 = 0U;√úo‚Ä∫ < 
DayE≈ìp¬£d
;√úoop++)

1798 i‚Ä°((
m‚ÅÑth
 == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \

1799 (
m‚ÅÑth
 == 8U) || (month == 10U) || (month == 12U))

1801 i‚Ä°(
day
 < 31U)

1803 
day
++;

1808 i‚Ä°(
m‚ÅÑth
 != 12U)

1810 
m‚ÅÑth
++;

1811 
day
 = 1U;

1816 
m‚ÅÑth
 = 1U;

1817 
day
 = 1U;

1818 
y√≥r
++;

1822 i‚Ä°((
m‚ÅÑth
 == 4U) || (month == 6U) || (month == 9U) || (month == 11U))

1824 i‚Ä°(
day
 < 30U)

1826 
day
++;

1831 
m‚ÅÑth
++;

1832 
day
 = 1U;

1835 i‚Ä°(
m‚ÅÑth
 == 2U)

1837 i‚Ä°(
day
 < 28U)

1839 
day
++;

1841 i‚Ä°(
day
 == 28U)

1844 i‚Ä°(
	`RTC_IsL√≥pY√≥r
(
y√≥r
))

1846 
day
++;

1850 
m‚ÅÑth
++;

1851 
day
 = 1U;

1854 i‚Ä°(
day
 == 29U)

1856 
m‚ÅÑth
++;

1857 
day
 = 1U;

1863 
hœÄc
->
D¬©eToUpd¬©e
.
Y√≥r
 = 
y√≥r
;

1866 
hœÄc
->
D¬©eToUpd¬©e
.
M‚ÅÑth
 = 
m‚ÅÑth
;

1867 
hœÄc
->
D¬©eToUpd¬©e
.
D¬©e
 = 
day
;

1870 
hœÄc
->
D¬©eToUpd¬©e
.
W√¨kDay
 = 
	`RTC_W√¨kDayNum
(
y√≥r
, 
m‚ÅÑth
, 
day
);

1871 
	}
}

1879 
u√∂t8_t
 
	$RTC_IsL√≥pY√≥r
(
u√∂t16_t
 
nY√≥r
)

1881 i‚Ä°((
nY√≥r
 % 4U) != 0U)

1886 i‚Ä°((
nY√≥r
 % 100U) != 0U)

1891 i‚Ä°((
nY√≥r
 % 400U) == 0U)

1899 
	}
}

1916 
u√∂t8_t
 
	$RTC_W√¨kDayNum
(
u√∂t32_t
 
nY√≥r
, 
u√∂t8_t
 
nM‚ÅÑth
, u√∂t8_√†
nDay
)

1918 
u√∂t32_t
 
y√≥r
 = 0U, 
w√¨kday
 = 0U;

1920 
y√≥r
 = 2000U + 
nY√≥r
;

1922 i‚Ä°(
nM‚ÅÑth
 < 3U)

1925 
w√¨kday
 = (((23U * 
nM‚ÅÑth
√ã/ 9U√ã+ 
nDay
 + 4U + 
y√≥r
 + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;

1930 
w√¨kday
 = (((23U * 
nM‚ÅÑth
√ã/ 9U√ã+ 
nDay
 + 4U + 
y√≥r
 + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;

1933  (
u√∂t8_t
)
w√¨kday
;

1934 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc_ex.c

27 
	~"¬∞m32f1xx_h√Ü.h
"

33 #ifde‚Ä°
HAL_RTC_MODULE_ENABLED


81 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_S√´Tam‚â•r
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_Tam‚â•rTy‚â•Def
 *
sTam‚â•r
)

84 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sTam‚â•r
 == NULL))

86  
HAL_ERROR
;

90 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_TAMPER
(
sTam‚â•r
->
Tam‚â•r
));

91 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam‚â•r
->
Trigg√Æ
));

94 
	`__HAL_LOCK
(
hœÄc
);

96 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

98 i‚Ä°(
	`HAL_IS_BIT_SET
(
BKP
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
)))

100 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

103 
	`__HAL_UNLOCK
(
hœÄc
);

105  
HAL_ERROR
;

108 
	`MODIFY_REG
(
BKP
->
CR
, (
BKP_CR_TPE
 | 
BKP_CR_TPAL
), (
sTam‚â•r
->
Tam‚â•r
 | (sTam‚â•r->
Trigg√Æ
)));

110 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

113 
	`__HAL_UNLOCK
(
hœÄc
);

115  
HAL_OK
;

116 
	}
}

127 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_S√´Tam‚â•r_IT
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
RTC_Tam‚â•rTy‚â•Def
 *
sTam‚â•r
)

130 i‚Ä°((
hœÄc
 =Ô£ø
NULL
√ã|| (
sTam‚â•r
 == NULL))

132  
HAL_ERROR
;

136 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_TAMPER
(
sTam‚â•r
->
Tam‚â•r
));

137 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam‚â•r
->
Trigg√Æ
));

140 
	`__HAL_LOCK
(
hœÄc
);

142 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

144 i‚Ä°(
	`HAL_IS_BIT_SET
(
BKP
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
)))

146 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

149 
	`__HAL_UNLOCK
(
hœÄc
);

151  
HAL_ERROR
;

154 
	`MODIFY_REG
(
BKP
->
CR
, (
BKP_CR_TPE
 | 
BKP_CR_TPAL
), (
sTam‚â•r
->
Tam‚â•r
 | (sTam‚â•r->
Trigg√Æ
)));

157 
	`__HAL_RTC_TAMPER_ENABLE_IT
(
hœÄc
, 
RTC_IT_TAMP1
);

159 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

162 
	`__HAL_UNLOCK
(
hœÄc
);

164  
HAL_OK
;

165 
	}
}

175 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_D√≥Àòiv¬©eTam‚â•r
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Tam‚â•r
)

178 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

180  
HAL_ERROR
;

183 
	`UNUSED
(
Tam‚â•r
);

185 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_TAMPER
(
Tam‚â•r
));

188 
	`__HAL_LOCK
(
hœÄc
);

190 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

193 
	`CLEAR_BIT
(
BKP
->
CR
, 
BKP_CR_TPE
);

197 
	`__HAL_RTC_TAMPER_DISABLE_IT
(
hœÄc
, 
RTC_IT_TAMP1
);

200 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_TAMP1F
);

201 
	`SET_BIT
(
BKP
->
CSR
, 
BKP_CSR_CTE
);

203 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

206 
	`__HAL_UNLOCK
(
hœÄc
);

208  
HAL_OK
;

209 
	}
}

217 
	$HAL_RTCEx_Tam‚â•rIRQH‚Ñ¢d√Är
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

220 i‚Ä°(
	`__HAL_RTC_TAMPER_GET_IT_SOURCE
(
hœÄc
, 
RTC_IT_TAMP1
))

223 i‚Ä°(
	`__HAL_RTC_TAMPER_GET_FLAG
(
hœÄc
, 
RTC_FLAG_TAMP1F
√ã!Ô£ø(
u√∂t32_t
)
RESET
)

226 #i‚Ä°(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

227 
hœÄc
->
	`Tam‚â•r1Ev√≠tC√Ülback
(hrtc);

229 
	`HAL_RTCEx_Tam‚â•r1Ev√≠tC√Ülback
(
hœÄc
);

233 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_TAMP1F
);

238 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

239 
	}
}

247 
__w√≥k
 
	$HAL_RTCEx_Tam‚â•r1Ev√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

250 
	`UNUSED
(
hœÄc
);

254 
	}
}

263 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_PÔ¨ÅlF‚ÄπTam‚â•r1Ev√≠t
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Timeout
)

265 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

268 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

270  
HAL_ERROR
;

274 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hœÄc
, 
RTC_FLAG_TAMP1F
√ã=Ô£ø
RESET
)

276 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

278 i‚Ä°((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
) > Timeout))

280 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_TIMEOUT
;

281  
HAL_TIMEOUT
;

287 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_TAMP1F
);

290 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

292  
HAL_OK
;

293 
	}
}

319 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_S√´Sec‚ÅÑd_IT
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

322 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

324  
HAL_ERROR
;

328 
	`__HAL_LOCK
(
hœÄc
);

330 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

333 
	`__HAL_RTC_SECOND_ENABLE_IT
(
hœÄc
, 
RTC_IT_SEC
);

335 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

338 
	`__HAL_UNLOCK
(
hœÄc
);

340  
HAL_OK
;

341 
	}
}

349 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_D√≥Àòiv¬©eSec‚ÅÑd
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

352 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

354  
HAL_ERROR
;

358 
	`__HAL_LOCK
(
hœÄc
);

360 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

363 
	`__HAL_RTC_SECOND_DISABLE_IT
(
hœÄc
, 
RTC_IT_SEC
);

365 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

368 
	`__HAL_UNLOCK
(
hœÄc
);

370  
HAL_OK
;

371 
	}
}

379 
	$HAL_RTCEx_RTCIRQH‚Ñ¢d√Är
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

381 i‚Ä°(
	`__HAL_RTC_SECOND_GET_IT_SOURCE
(
hœÄc
, 
RTC_IT_SEC
))

384 i‚Ä°(
	`__HAL_RTC_SECOND_GET_FLAG
(
hœÄc
, 
RTC_FLAG_SEC
))

387 i‚Ä°(
	`__HAL_RTC_SECOND_GET_FLAG
(
hœÄc
, 
RTC_FLAG_OW
))

390 
	`HAL_RTCEx_RTCEv√≠tE¬∫‚ÄπC√Ülback
(
hœÄc
);

393 
	`__HAL_RTC_OVERFLOW_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_OW
);

396 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_ERROR
;

401 
	`HAL_RTCEx_RTCEv√≠tC√Ülback
(
hœÄc
);

404 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

408 
	`__HAL_RTC_SECOND_CLEAR_FLAG
(
hœÄc
, 
RTC_FLAG_SEC
);

411 
	}
}

419 
__w√≥k
 
	$HAL_RTCEx_RTCEv√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

422 
	`UNUSED
(
hœÄc
);

426 
	}
}

434 
__w√≥k
 
	$HAL_RTCEx_RTCEv√≠tE¬∫‚ÄπC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

437 
	`UNUSED
(
hœÄc
);

441 
	}
}

474 
	$HAL_RTCEx_BKUPWr√¥e
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
BackupRegi¬∞√Æ
, u√∂t32_√†
D¬©a
)

476 
u√∂t32_t
 
tmp
 = 0U;

479 
	`UNUSED
(
hœÄc
);

482 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_BKP
(
BackupRegi¬∞√Æ
));

484 
tmp
 = (
u√∂t32_t
)
BKP_BASE
;

485 
tmp
 +Ô£ø(
BackupRegi¬∞√Æ
 * 4U);

487 *(
__IO
 
u√∂t32_t
 *√ã
tmp
 = (
D¬©a
 & 
BKP_DR1_D
);

488 
	}
}

499 
u√∂t32_t
 
	$HAL_RTCEx_BKUPR√≥d
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
BackupRegi¬∞√Æ
)

501 
u√∂t32_t
 
backu¬•egi¬∞√Æ
 = 0U;

502 
u√∂t32_t
 
pv√Üue
 = 0U;

505 
	`UNUSED
(
hœÄc
);

508 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_BKP
(
BackupRegi¬∞√Æ
));

510 
backu¬•egi¬∞√Æ
 = (
u√∂t32_t
)
BKP_BASE
;

511 
backu¬•egi¬∞√Æ
 +Ô£ø(
BackupRegi¬∞√Æ
 * 4U);

513 
pv√Üue
 = (*(
__IO
 
u√∂t32_t
 *)(
backu¬•egi¬∞√Æ
)√ã& 
BKP_DR1_D
;

516  
pv√Üue
;

517 
	}
}

529 
HAL_S√®tusTy‚â•Def
 
	$HAL_RTCEx_S√´Smo≈∏hC√Üib
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
, 
u√∂t32_t
 
Smo≈∏hC√ÜibP√Æiod
, u√∂t32_√†
Smo≈∏hC√ÜibPlusPul¬£s
, u√∂t32_√†
SmouthC√ÜibM√∂usPul¬£sV√Üue
)

532 i‚Ä°(
hœÄc
 =Ô£ø
NULL
)

534  
HAL_ERROR
;

537 
	`UNUSED
(
Smo≈∏hC√ÜibP√Æiod
);

538 
	`UNUSED
(
Smo≈∏hC√ÜibPlusPul¬£s
);

541 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
SmouthC√ÜibM√∂usPul¬£sV√Üue
));

544 
	`__HAL_LOCK
(
hœÄc
);

546 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_BUSY
;

549 
	`MODIFY_REG
(
BKP
->
RTCCR
, 
BKP_RTCCR_CAL
, 
SmouthC√ÜibM√∂usPul¬£sV√Üue
);

552 
hœÄc
->
S√®√£
 = 
HAL_RTC_STATE_READY
;

555 
	`__HAL_UNLOCK
(
hœÄc
);

557  
HAL_OK
;

558 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_sd.c

259 
	~"¬∞m32f1xx_h√Ü.h
"

261 #i‚Ä°
def√∂ed
(
SDIO
)

271 #ifde‚Ä°
HAL_SD_MODULE_ENABLED


290 
u√∂t32_t
 
SD_In√¥C¬®d
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

291 
u√∂t32_t
 
SD_Pow√ÆON
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

292 
u√∂t32_t
 
SD_S√≠dSDS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, u√∂t32_√†*
pSD¬∞¬©us
);

293 
u√∂t32_t
 
SD_S√≠dS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, u√∂t32_√†*
pC¬®dS√®tus
);

294 
u√∂t32_t
 
SD_WideBus_E¬´b√Ä
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

295 
u√∂t32_t
 
SD_WideBus_Di√üb√Ä
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

296 
u√∂t32_t
 
SD_F√∂dSCR
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, u√∂t32_√†*
pSCR
);

297 
SD_Pow√ÆOFF
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

298 
SD_Wr√¥e_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

299 
SD_R√≥d_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
);

300 
SD_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

301 
SD_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

302 
SD_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

303 
SD_DMATxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

304 
SD_DMARxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

335 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_In√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

338 if(
hsd
 =Ô£ø
NULL
)

340  
HAL_ERROR
;

344 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_ALL_INSTANCE
(
hsd
->
In¬∞‚Ñ¢Àö
));

345 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_EDGE
(
hsd
->
In√¥
.
ClockEdge
));

346 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_BYPASS
(
hsd
->
In√¥
.
ClockBy‚àëss
));

347 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
hsd
->
In√¥
.
ClockPow√ÆSave
));

348 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_BUS_WIDE
(
hsd
->
In√¥
.
BusWide
));

349 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
hsd
->
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
));

350 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLKDIV
(
hsd
->
In√¥
.
ClockDiv
));

352 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_RESET
)

355 
hsd
->
Lock
 = 
HAL_UNLOCKED
;

356 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

358 
hsd
->
TxC‚àÇtC√Ülback
 = 
HAL_SD_TxC‚àÇtC√Ülback
;

359 
hsd
->
RxC‚àÇtC√Ülback
 = 
HAL_SD_RxC‚àÇtC√Ülback
;

360 
hsd
->
E¬∫‚ÄπC√Ülback
 = 
HAL_SD_E¬∫‚ÄπC√Ülback
;

361 
hsd
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_SD_Ab‚ÄπtC√Ülback
;

363 if(
hsd
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

365 
hsd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SD_M‚Ä¢In√¥
;

369 
hsd
->
	`M‚Ä¢In√¥C√Ülback
(hsd);

372 
	`HAL_SD_M‚Ä¢In√¥
(
hsd
);

376 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

379 i‚Ä°(
	`HAL_SD_In√¥C¬®d
(
hsd
√ã!Ô£ø
HAL_OK
)

381  
HAL_ERROR
;

385 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

388 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

391 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

393  
HAL_OK
;

394 
	}
}

403 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_In√¥C¬®d
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

405 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

406 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

407 
SD_In√¥Ty‚â•Def
 
In√¥
;

410 
In√¥
.
ClockEdge
 = 
SDIO_CLOCK_EDGE_RISING
;

411 
In√¥
.
ClockBy‚àëss
 = 
SDIO_CLOCK_BYPASS_DISABLE
;

412 
In√¥
.
ClockPow√ÆSave
 = 
SDIO_CLOCK_POWER_SAVE_DISABLE
;

413 
In√¥
.
BusWide
 = 
SDIO_BUS_WIDE_1B
;

414 
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 = 
SDIO_HARDWARE_FLOW_CONTROL_DISABLE
;

415 
In√¥
.
ClockDiv
 = 
SDIO_INIT_CLK_DIV
;

418 
¬∞¬©us
 = 
	`SDIO_In√¥
(
hsd
->
In¬∞‚Ñ¢Àö
, 
In√¥
);

419 if(
¬∞¬©us
 !Ô£ø
HAL_OK
)

421  
HAL_ERROR
;

425 
	`__HAL_SD_DISABLE
(
hsd
);

428 ()
	`SDIO_Pow√ÆS√®√£_ON
(
hsd
->
In¬∞‚Ñ¢Àö
);

431 
	`__HAL_SD_ENABLE
(
hsd
);

434 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_Pow√ÆON
(
hsd
);

435 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

437 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

438 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

439  
HAL_ERROR
;

443 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_In√¥C¬®d
(
hsd
);

444 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

446 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

447 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

448  
HAL_ERROR
;

451  
HAL_OK
;

452 
	}
}

459 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_DeIn√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

462 if(
hsd
 =Ô£ø
NULL
)

464  
HAL_ERROR
;

468 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_ALL_INSTANCE
(
hsd
->
In¬∞‚Ñ¢Àö
));

470 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

473 
	`SD_Pow√ÆOFF
(
hsd
);

475 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

476 if(
hsd
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

478 
hsd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SD_M‚Ä¢DeIn√¥
;

482 
hsd
->
	`M‚Ä¢DeIn√¥C√Ülback
(hsd);

485 
	`HAL_SD_M‚Ä¢DeIn√¥
(
hsd
);

488 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

489 
hsd
->
S√®√£
 = 
HAL_SD_STATE_RESET
;

491  
HAL_OK
;

492 
	}
}

500 
__w√≥k
 
	$HAL_SD_M‚Ä¢In√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

503 
	`UNUSED
(
hsd
);

508 
	}
}

515 
__w√≥k
 
	$HAL_SD_M‚Ä¢DeIn√¥
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

518 
	`UNUSED
(
hsd
);

523 
	}
}

556 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_R√≥dBlocks
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
)

558 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

559 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

560 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

561 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

562 
u√∂t32_t
 
add
 = 
BlockAdd
;

563 
u√∂t8_t
 *
√£mpbuff
 = 
pD¬©a
;

565 if(
NULL
 =Ô£ø
pD¬©a
)

567 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

568  
HAL_ERROR
;

571 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

573 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

575 if((
add
 + 
Numb√ÆOfBlocks
√ã> (
hsd
->
SdC¬®d
.
LogBlockNbr
))

577 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

578  
HAL_ERROR
;

581 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

584 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

586 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

588 
add
 *= 512U;

592 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 
BLOCKSIZE
);

593 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

596 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

597 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

598 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

599  
HAL_ERROR
;

603 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

604 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
Numb√ÆOfBlocks
 * 
BLOCKSIZE
;

605 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

606 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

607 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

608 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

609 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

612 if(
Numb√ÆOfBlocks
 > 1U)

614 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_READ_MULTIPLE_BLOCK
;

617 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

621 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_READ_SINGLE_BLOCK
;

624 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dS√∂g√ÄBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

626 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

629 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

630 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

631 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

632 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

633  
HAL_ERROR
;

637 
d¬©¬®ema√∂√∂g
 = 
c‚ÅÑfig
.
D¬©aL√≠gth
;

638 !
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_STBITERR
))

640 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
√ã&& (
d¬©¬®ema√∂√∂g
 > 0U))

643 
cou¬°
 = 0U; count < 8U; count++)

645 
d¬©a
 = 
	`SDIO_R√≥dFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
);

646 *
√£mpbuff
 = (
u√∂t8_t
)(
d¬©a
 & 0xFFU);

647 
√£mpbuff
++;

648 
d¬©¬®ema√∂√∂g
--;

649 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 8U) & 0xFFU);

650 
√£mpbuff
++;

651 
d¬©¬®ema√∂√∂g
--;

652 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 16U) & 0xFFU);

653 
√£mpbuff
++;

654 
d¬©¬®ema√∂√∂g
--;

655 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 24U) & 0xFFU);

656 
√£mpbuff
++;

657 
d¬©¬®ema√∂√∂g
--;

661 if(((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

664 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

665 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_TIMEOUT
;

666 
hsd
->
S√®√£
Ô£ø
HAL_SD_STATE_READY
;

667 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

668  
HAL_TIMEOUT
;

673 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DATAEND
√ã&& (
Numb√ÆOfBlocks
 > 1U))

675 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

678 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hsd
->
In¬∞‚Ñ¢Àö
);

679 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

682 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

683 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

684 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

685 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

686  
HAL_ERROR
;

692 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

695 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

696 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_TIMEOUT
;

697 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

698 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

699  
HAL_ERROR
;

701 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

704 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

705 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_CRC_FAIL
;

706 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

707 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

708  
HAL_ERROR
;

710 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

713 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

714 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_RX_OVERRUN
;

715 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

716 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

717  
HAL_ERROR
;

725 (
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
)√ã&& (
d¬©¬®ema√∂√∂g
 > 0U))

727 
d¬©a
 = 
	`SDIO_R√≥dFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
);

728 *
√£mpbuff
 = (
u√∂t8_t
)(
d¬©a
 & 0xFFU);

729 
√£mpbuff
++;

730 
d¬©¬®ema√∂√∂g
--;

731 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 8U) & 0xFFU);

732 
√£mpbuff
++;

733 
d¬©¬®ema√∂√∂g
--;

734 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 16U) & 0xFFU);

735 
√£mpbuff
++;

736 
d¬©¬®ema√∂√∂g
--;

737 *
√£mpbuff
 = (
u√∂t8_t
)((
d¬©a
 >> 24U) & 0xFFU);

738 
√£mpbuff
++;

739 
d¬©¬®ema√∂√∂g
--;

741 if(((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

744 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

745 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_TIMEOUT
;

746 
hsd
->
S√®√£
Ô£ø
HAL_SD_STATE_READY
;

747 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

748  
HAL_ERROR
;

753 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

755 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

757  
HAL_OK
;

761 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_BUSY
;

762  
HAL_ERROR
;

764 
	}
}

778 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_Wr√¥eBlocks
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
, u√∂t32_√†
Timeout
)

780 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

781 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

782 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

783 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

784 
u√∂t32_t
 
add
 = 
BlockAdd
;

785 
u√∂t8_t
 *
√£mpbuff
 = 
pD¬©a
;

787 if(
NULL
 =Ô£ø
pD¬©a
)

789 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

790  
HAL_ERROR
;

793 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

795 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

797 if((
add
 + 
Numb√ÆOfBlocks
√ã> (
hsd
->
SdC¬®d
.
LogBlockNbr
))

799 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

800  
HAL_ERROR
;

803 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

806 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

808 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

810 
add
 *= 512U;

814 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 
BLOCKSIZE
);

815 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

818 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

819 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

820 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

821  
HAL_ERROR
;

825 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

826 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
Numb√ÆOfBlocks
 * 
BLOCKSIZE
;

827 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

828 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

829 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

830 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

831 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

834 if(
Numb√ÆOfBlocks
 > 1U)

836 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
;

839 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

843 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_WRITE_SINGLE_BLOCK
;

846 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

848 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

851 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

852 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

853 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

854 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

855  
HAL_ERROR
;

859 
d¬©¬®ema√∂√∂g
 = 
c‚ÅÑfig
.
D¬©aL√≠gth
;

860 !
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_STBITERR
))

862 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXFIFOHE
√ã&& (
d¬©¬®ema√∂√∂g
 > 0U))

865 
cou¬°
 = 0U; count < 8U; count++)

867 
d¬©a
 = (
u√∂t32_t
)(*
√£mpbuff
);

868 
√£mpbuff
++;

869 
d¬©¬®ema√∂√∂g
--;

870 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
√£mpbuff
) << 8U);

871 
√£mpbuff
++;

872 
d¬©¬®ema√∂√∂g
--;

873 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
√£mpbuff
) << 16U);

874 
√£mpbuff
++;

875 
d¬©¬®ema√∂√∂g
--;

876 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
√£mpbuff
) << 24U);

877 
√£mpbuff
++;

878 
d¬©¬®ema√∂√∂g
--;

879 ()
	`SDIO_Wr√¥eFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
, &
d¬©a
);

883 if(((
	`HAL_G√´Tick
()-
tick¬∞¬®t
√ã>Ô£ø
Timeout
) || (Timeout == 0U))

886 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

887 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

888 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

889 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

890  
HAL_TIMEOUT
;

895 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DATAEND
√ã&& (
Numb√ÆOfBlocks
 > 1U))

897 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

900 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hsd
->
In¬∞‚Ñ¢Àö
);

901 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

904 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

905 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

906 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

907 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

908  
HAL_ERROR
;

914 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

917 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

918 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_TIMEOUT
;

919 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

920 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

921  
HAL_ERROR
;

923 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

926 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

927 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_CRC_FAIL
;

928 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

929 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

930  
HAL_ERROR
;

932 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
))

935 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

936 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_TX_UNDERRUN
;

937 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

938 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

939  
HAL_ERROR
;

947 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

949 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

951  
HAL_OK
;

955 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_BUSY
;

956  
HAL_ERROR
;

958 
	}
}

973 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_R√≥dBlocks_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

975 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

976 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

977 
u√∂t32_t
 
add
 = 
BlockAdd
;

979 if(
NULL
 =Ô£ø
pD¬©a
)

981 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

982  
HAL_ERROR
;

985 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

987 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

989 if((
add
 + 
Numb√ÆOfBlocks
√ã> (
hsd
->
SdC¬®d
.
LogBlockNbr
))

991 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

992  
HAL_ERROR
;

995 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

998 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1000 
hsd
->
pRxBuffP√•
 = 
pD¬©a
;

1001 
hsd
->
RxX‚ÄûrSize
 = 
BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1003 
	`__HAL_SD_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
 | 
SDIO_FLAG_RXFIFOHF
 | 
SDIO_IT_STBITERR
));

1005 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

1007 
add
 *= 512U;

1011 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 
BLOCKSIZE
);

1012 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1015 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1016 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1017 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1018  
HAL_ERROR
;

1022 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1023 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1024 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1025 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

1026 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1027 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1028 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1031 if(
Numb√ÆOfBlocks
 > 1U)

1033 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_READ_MULTIPLE_BLOCK
 | 
SD_CONTEXT_IT
);

1036 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1040 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_READ_SINGLE_BLOCK
 | 
SD_CONTEXT_IT
);

1043 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dS√∂g√ÄBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1045 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1048 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1049 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1050 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1051 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1052  
HAL_ERROR
;

1055  
HAL_OK
;

1059  
HAL_BUSY
;

1061 
	}
}

1076 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_Wr√¥eBlocks_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

1078 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

1079 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1080 
u√∂t32_t
 
add
 = 
BlockAdd
;

1082 if(
NULL
 =Ô£ø
pD¬©a
)

1084 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

1085  
HAL_ERROR
;

1088 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

1090 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

1092 if((
add
 + 
Numb√ÆOfBlocks
√ã> (
hsd
->
SdC¬®d
.
LogBlockNbr
))

1094 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

1095  
HAL_ERROR
;

1098 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

1101 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1103 
hsd
->
pTxBuffP√•
 = 
pD¬©a
;

1104 
hsd
->
TxX‚ÄûrSize
 = 
BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1107 
	`__HAL_SD_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_DATAEND
 | 
SDIO_FLAG_TXFIFOHE
 | 
SDIO_IT_STBITERR
));

1109 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

1111 
add
 *= 512U;

1115 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 
BLOCKSIZE
);

1116 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1119 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1120 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1121 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1122  
HAL_ERROR
;

1126 if(
Numb√ÆOfBlocks
 > 1U)

1128 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
| 
SD_CONTEXT_IT
);

1131 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1135 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_WRITE_SINGLE_BLOCK
 | 
SD_CONTEXT_IT
);

1138 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1140 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1143 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1144 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1145 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1146 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1147  
HAL_ERROR
;

1151 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1152 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1153 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1154 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

1155 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1156 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1157 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1159  
HAL_OK
;

1163  
HAL_BUSY
;

1165 
	}
}

1180 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_R√≥dBlocks_DMA
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

1182 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

1183 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1184 
u√∂t32_t
 
add
 = 
BlockAdd
;

1186 if(
NULL
 =Ô£ø
pD¬©a
)

1188 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

1189  
HAL_ERROR
;

1192 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

1194 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

1196 if((
add
 + 
Numb√ÆOfBlocks
√ã> (
hsd
->
SdC¬®d
.
LogBlockNbr
))

1198 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

1199  
HAL_ERROR
;

1202 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

1205 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1207 
	`__HAL_SD_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
 | 
SDIO_IT_STBITERR
));

1210 
hsd
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SD_DMAReÀöiveC‚àÇt
;

1213 
hsd
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SD_DMAE¬∫‚Äπ
;

1216 
hsd
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1219 if(
	`HAL_DMA_S√®œÄ_IT
(
hsd
->
hdm¬®x
, (
u√∂t32_t
)&hsd->
In¬∞‚Ñ¢Àö
->
FIFO
, (u√∂t32_t)
pD¬©a
, (u√∂t32_t)(
BLOCKSIZE
 * 
Numb√ÆOfBlocks
)/4U√ã!Ô£ø
HAL_OK
)

1221 
	`__HAL_SD_DISABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_DATAEND
));

1222 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1223 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DMA
;

1224 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1225  
HAL_ERROR
;

1230 
	`__HAL_SD_DMA_ENABLE
(
hsd
);

1232 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

1234 
add
 *= 512U;

1238 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 
BLOCKSIZE
);

1239 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1242 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1243 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1244 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1245  
HAL_ERROR
;

1249 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1250 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1251 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1252 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

1253 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1254 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1255 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1258 if(
Numb√ÆOfBlocks
 > 1U)

1260 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_READ_MULTIPLE_BLOCK
 | 
SD_CONTEXT_DMA
);

1263 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1267 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_READ_SINGLE_BLOCK
 | 
SD_CONTEXT_DMA
);

1270 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdR√≥dS√∂g√ÄBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1272 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1275 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1276 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1277 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1278 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1279  
HAL_ERROR
;

1282  
HAL_OK
;

1287  
HAL_BUSY
;

1289 
	}
}

1304 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_Wr√¥eBlocks_DMA
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t32_t
 
BlockAdd
, u√∂t32_√†
Numb√ÆOfBlocks
)

1306 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

1307 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1308 
u√∂t32_t
 
add
 = 
BlockAdd
;

1310 if(
NULL
 =Ô£ø
pD¬©a
)

1312 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

1313  
HAL_ERROR
;

1316 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

1318 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

1320 if((
add
 + 
Numb√ÆOfBlocks
√ã> (
hsd
->
SdC¬®d
.
LogBlockNbr
))

1322 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

1323  
HAL_ERROR
;

1326 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

1329 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 = 0U;

1332 
	`__HAL_SD_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_STBITERR
));

1335 
hsd
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SD_DMAT√∏nsm√¥C‚àÇt
;

1338 
hsd
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SD_DMAE¬∫‚Äπ
;

1341 
hsd
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1343 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

1345 
add
 *= 512U;

1349 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 
BLOCKSIZE
);

1350 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1353 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1354 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1355 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1356  
HAL_ERROR
;

1360 if(
Numb√ÆOfBlocks
 > 1U)

1362 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
 | 
SD_CONTEXT_DMA
);

1365 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1369 
hsd
->
C‚ÅÑ√£xt
 = (
SD_CONTEXT_WRITE_SINGLE_BLOCK
 | 
SD_CONTEXT_DMA
);

1372 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
hsd
->
In¬∞‚Ñ¢Àö
, 
add
);

1374 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1377 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1378 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1379 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1380 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1381  
HAL_ERROR
;

1385 
	`__HAL_SD_DMA_ENABLE
(
hsd
);

1388 if(
	`HAL_DMA_S√®œÄ_IT
(
hsd
->
hdm¬©x
, (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&hsd->
In¬∞‚Ñ¢Àö
->
FIFO
, (u√∂t32_t)(
BLOCKSIZE
 * 
Numb√ÆOfBlocks
)/4U√ã!Ô£ø
HAL_OK
)

1390 
	`__HAL_SD_DISABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_STBITERR
));

1391 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1392 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DMA
;

1393 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1394 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1395  
HAL_ERROR
;

1400 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

1401 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 
BLOCKSIZE
 * 
Numb√ÆOfBlocks
;

1402 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1403 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

1404 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1405 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1406 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

1408  
HAL_OK
;

1413  
HAL_BUSY
;

1415 
	}
}

1426 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_E√∏¬£
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 
BlockS√®œÄAdd
, u√∂t32_√†
BlockEndAdd
)

1428 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1429 
u√∂t32_t
 
¬∞¬®t_add
 = 
BlockS√®œÄAdd
;

1430 
u√∂t32_t
 
√≠d_add
 = 
BlockEndAdd
;

1432 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

1434 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

1436 if(
√≠d_add
 < 
¬∞¬®t_add
)

1438 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

1439  
HAL_ERROR
;

1442 if(
√≠d_add
 > (
hsd
->
SdC¬®d
.
LogBlockNbr
))

1444 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_ADDR_OUT_OF_RANGE
;

1445  
HAL_ERROR
;

1448 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

1451 if(((
hsd
->
SdC¬®d
.
C≈ìss
√ã& 
SDIO_CCCC_ERASE
) == 0U)

1454 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1455 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_REQUEST_NOT_APPLICABLE
;

1456 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1457  
HAL_ERROR
;

1460 if((
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
√ã& 
SDMMC_CARD_LOCKED
) == SDMMC_CARD_LOCKED)

1463 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1464 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_LOCK_UNLOCK_FAILED
;

1465 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1466  
HAL_ERROR
;

1470 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SDHC_SDXC
)

1472 
¬∞¬®t_add
 *= 512U;

1473 
√≠d_add
 *= 512U;

1477 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

1480 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSDE√∏¬£S√®œÄAdd
(
hsd
->
In¬∞‚Ñ¢Àö
, 
¬∞¬®t_add
);

1481 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1484 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1485 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1486 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1487  
HAL_ERROR
;

1491 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSDE√∏¬£EndAdd
(
hsd
->
In¬∞‚Ñ¢Àö
, 
√≠d_add
);

1492 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1495 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1496 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1497 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1498  
HAL_ERROR
;

1503 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdE√∏¬£
(
hsd
->
In¬∞‚Ñ¢Àö
);

1504 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1507 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1508 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1509 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1510  
HAL_ERROR
;

1513 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1515  
HAL_OK
;

1519  
HAL_BUSY
;

1521 
	}
}

1528 
	$HAL_SD_IRQH‚Ñ¢d√Är
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1530 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1531 
u√∂t32_t
 
c‚ÅÑ√£xt
 = 
hsd
->
C‚ÅÑ√£xt
;

1534 if((
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
√ã!Ô£ø
RESET
√ã&& ((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_IT
) != 0U))

1536 
	`SD_R√≥d_IT
(
hsd
);

1539 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DATAEND
√ã!Ô£ø
RESET
)

1541 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DATAEND
);

1543 
	`__HAL_SD_DISABLE_IT
(
hsd
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

1544 
SDIO_IT_TXUNDERR
 | 
SDIO_IT_RXOVERR
 | 
SDIO_IT_TXFIFOHE
 |\

1545 
SDIO_IT_RXFIFOHF
 | 
SDIO_IT_STBITERR
);

1547 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø~(
SDIO_DCTRL_DTEN
);

1549 if((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_IT
) != 0U)

1551 if(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_READ_MULTIPLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U))

1553 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hsd
->
In¬∞‚Ñ¢Àö
);

1554 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1556 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1557 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1558 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

1560 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

1566 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

1568 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1569 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1570 if(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_READ_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_READ_MULTIPLE_BLOCK
) != 0U))

1572 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1573 
hsd
->
	`RxC‚àÇtC√Ülback
(hsd);

1575 
	`HAL_SD_RxC‚àÇtC√Ülback
(
hsd
);

1580 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1581 
hsd
->
	`TxC‚àÇtC√Ülback
(hsd);

1583 
	`HAL_SD_TxC‚àÇtC√Ülback
(
hsd
);

1587 if((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_DMA
) != 0U)

1589 if((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U)

1591 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hsd
->
In¬∞‚Ñ¢Àö
);

1592 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

1594 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

1595 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1596 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

1598 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

1602 if(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_READ_SINGLE_BLOCK
√ã=Ô£ø0U√ã&& ((c‚ÅÑ√£x√†& 
SD_CONTEXT_READ_MULTIPLE_BLOCK
) == 0U))

1606 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

1608 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1610 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1611 
hsd
->
	`TxC‚àÇtC√Ülback
(hsd);

1613 
	`HAL_SD_TxC‚àÇtC√Ülback
(
hsd
);

1623 if((
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXFIFOHE
√ã!Ô£ø
RESET
√ã&& ((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_IT
) != 0U))

1625 
	`SD_Wr√¥e_IT
(
hsd
);

1628 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_STBITERR
√ã!Ô£ø
RESET
)

1631 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
√ã!Ô£ø
RESET
)

1633 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_CRC_FAIL
;

1635 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
√ã!Ô£ø
RESET
)

1637 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_TIMEOUT
;

1639 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
√ã!Ô£ø
RESET
)

1641 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_RX_OVERRUN
;

1643 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
√ã!Ô£ø
RESET
)

1645 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_TX_UNDERRUN
;

1647 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
√ã!Ô£ø
RESET
)

1649 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DATA_TIMEOUT
;

1653 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
 | 
SDIO_FLAG_STBITERR
);

1656 
	`__HAL_SD_DISABLE_IT
(
hsd
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

1657 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
 | 
SDIO_IT_STBITERR
);

1659 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hsd->
In¬∞‚Ñ¢Àö
);

1661 if((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_IT
) != 0U)

1664 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1665 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1666 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1667 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

1669 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

1672 if((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_DMA
) != 0U)

1675 if(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_WRITE_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U))

1678 
hsd
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SD_DMATxAb‚Äπt
;

1680 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsd
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1682 
	`SD_DMATxAb‚Äπt
(
hsd
->
hdm¬©x
);

1685 if(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_READ_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_READ_MULTIPLE_BLOCK
) != 0U))

1688 
hsd
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SD_DMARxAb‚Äπt
;

1690 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsd
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1692 
	`SD_DMARxAb‚Äπt
(
hsd
->
hdm¬®x
);

1697 
hsd
->
E¬∫‚ÄπCode
 = 
HAL_SD_ERROR_NONE
;

1698 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

1699 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

1700 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1701 
hsd
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsd);

1703 
	`HAL_SD_Ab‚ÄπtC√Ülback
(
hsd
);

1716 
	}
}

1723 
HAL_SD_S√®√£Ty‚â•Def
 
	$HAL_SD_G√´S√®√£
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1725  
hsd
->
S√®√£
;

1726 
	}
}

1734 
u√∂t32_t
 
	$HAL_SD_G√´E¬∫‚Äπ
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1736  
hsd
->
E¬∫‚ÄπCode
;

1737 
	}
}

1744 
__w√≥k
 
	$HAL_SD_TxC‚àÇtC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1747 
	`UNUSED
(
hsd
);

1752 
	}
}

1759 
__w√≥k
 
	$HAL_SD_RxC‚àÇtC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1762 
	`UNUSED
(
hsd
);

1767 
	}
}

1774 
__w√≥k
 
	$HAL_SD_E¬∫‚ÄπC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1777 
	`UNUSED
(
hsd
);

1782 
	}
}

1789 
__w√≥k
 
	$HAL_SD_Ab‚ÄπtC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

1792 
	`UNUSED
(
hsd
);

1797 
	}
}

1799 #i‚Ä°
def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

1815 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_Regi¬∞√ÆC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pSD_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

1817 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1819 if(
pC√Ülback
 =Ô£ø
NULL
)

1822 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1823  
HAL_ERROR
;

1827 
	`__HAL_LOCK
(
hsd
);

1829 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

1831 
C√ÜlbackID
)

1833 
HAL_SD_TX_CPLT_CB_ID
 :

1834 
hsd
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

1836 
HAL_SD_RX_CPLT_CB_ID
 :

1837 
hsd
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

1839 
HAL_SD_ERROR_CB_ID
 :

1840 
hsd
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

1842 
HAL_SD_ABORT_CB_ID
 :

1843 
hsd
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

1845 
HAL_SD_MSP_INIT_CB_ID
 :

1846 
hsd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1848 
HAL_SD_MSP_DEINIT_CB_ID
 :

1849 
hsd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1853 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1855 
¬∞¬©us
 = 
HAL_ERROR
;

1859 i‚Ä°(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_RESET
)

1861 
C√ÜlbackID
)

1863 
HAL_SD_MSP_INIT_CB_ID
 :

1864 
hsd
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

1866 
HAL_SD_MSP_DEINIT_CB_ID
 :

1867 
hsd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

1871 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1873 
¬∞¬©us
 = 
HAL_ERROR
;

1880 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1882 
¬∞¬©us
 = 
HAL_ERROR
;

1886 
	`__HAL_UNLOCK
(
hsd
);

1887  
¬∞¬©us
;

1888 
	}
}

1904 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_UnRegi¬∞√ÆC√Ülback
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

1906 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

1909 
	`__HAL_LOCK
(
hsd
);

1911 if(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_READY
)

1913 
C√ÜlbackID
)

1915 
HAL_SD_TX_CPLT_CB_ID
 :

1916 
hsd
->
TxC‚àÇtC√Ülback
 = 
HAL_SD_TxC‚àÇtC√Ülback
;

1918 
HAL_SD_RX_CPLT_CB_ID
 :

1919 
hsd
->
RxC‚àÇtC√Ülback
 = 
HAL_SD_RxC‚àÇtC√Ülback
;

1921 
HAL_SD_ERROR_CB_ID
 :

1922 
hsd
->
E¬∫‚ÄπC√Ülback
 = 
HAL_SD_E¬∫‚ÄπC√Ülback
;

1924 
HAL_SD_ABORT_CB_ID
 :

1925 
hsd
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_SD_Ab‚ÄπtC√Ülback
;

1927 
HAL_SD_MSP_INIT_CB_ID
 :

1928 
hsd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SD_M‚Ä¢In√¥
;

1930 
HAL_SD_MSP_DEINIT_CB_ID
 :

1931 
hsd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SD_M‚Ä¢DeIn√¥
;

1935 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1937 
¬∞¬©us
 = 
HAL_ERROR
;

1941 i‚Ä°(
hsd
->
S√®√£
 =Ô£ø
HAL_SD_STATE_RESET
)

1943 
C√ÜlbackID
)

1945 
HAL_SD_MSP_INIT_CB_ID
 :

1946 
hsd
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SD_M‚Ä¢In√¥
;

1948 
HAL_SD_MSP_DEINIT_CB_ID
 :

1949 
hsd
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SD_M‚Ä¢DeIn√¥
;

1953 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1955 
¬∞¬©us
 = 
HAL_ERROR
;

1962 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_INVALID_CALLBACK
;

1964 
¬∞¬©us
 = 
HAL_ERROR
;

1968 
	`__HAL_UNLOCK
(
hsd
);

1969  
¬∞¬©us
;

1970 
	}
}

2000 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_G√´C¬®dCID
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dCIDTy‚â•Def
 *
pCID
)

2002 
pCID
->
M‚Ñ¢u√ÅÀòu¬™rID
 = (
u√∂t8_t
)((
hsd
->
CID
[0] & 0xFF000000U) >> 24U);

2004 
pCID
->
OEM_A¬µliID
 = (
u√∂t16_t
)((
hsd
->
CID
[0] & 0x00FFFF00U) >> 8U);

2006 
pCID
->
ProdName1
 = (((
hsd
->
CID
[0] & 0x000000FFU) << 24U) | ((hsd->CID[1] & 0xFFFFFF00U) >> 8U));

2008 
pCID
->
ProdName2
 = (
u√∂t8_t
)(
hsd
->
CID
[1] & 0x000000FFU);

2010 
pCID
->
ProdRev
 = (
u√∂t8_t
)((
hsd
->
CID
[2] & 0xFF000000U) >> 24U);

2012 
pCID
->
ProdSN
 = (((
hsd
->
CID
[2] & 0x00FFFFFFU) << 8U) | ((hsd->CID[3] & 0xFF000000U) >> 24U));

2014 
pCID
->
Re¬£rved1
 = (
u√∂t8_t
)((
hsd
->
CID
[3] & 0x00F00000U) >> 20U);

2016 
pCID
->
M‚Ñ¢u√ÅÀòD¬©e
 = (
u√∂t16_t
)((
hsd
->
CID
[3] & 0x000FFF00U) >> 8U);

2018 
pCID
->
CID_CRC
 = (
u√∂t8_t
)((
hsd
->
CID
[3] & 0x000000FEU) >> 1U);

2020 
pCID
->
Re¬£rved2
 = 1U;

2022  
HAL_OK
;

2023 
	}
}

2033 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_G√´C¬®dCSD
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dCSDTy‚â•Def
 *
pCSD
)

2035 
pCSD
->
CSDS√•uÀò
 = (
u√∂t8_t
)((
hsd
->
CSD
[0] & 0xC0000000U) >> 30U);

2037 
pCSD
->
SysS‚â•cV√Æsi‚ÅÑ
 = (
u√∂t8_t
)((
hsd
->
CSD
[0] & 0x3C000000U) >> 26U);

2039 
pCSD
->
Re¬£rved1
 = (
u√∂t8_t
)((
hsd
->
CSD
[0] & 0x03000000U) >> 24U);

2041 
pCSD
->
TAAC
 = (
u√∂t8_t
)((
hsd
->
CSD
[0] & 0x00FF0000U) >> 16U);

2043 
pCSD
->
NSAC
 = (
u√∂t8_t
)((
hsd
->
CSD
[0] & 0x0000FF00U) >> 8U);

2045 
pCSD
->
MaxBusClkF¬™c
 = (
u√∂t8_t
)(
hsd
->
CSD
[0] & 0x000000FFU);

2047 
pCSD
->
C¬®dComdC≈ìs¬£s
 = (
u√∂t16_t
)((
hsd
->
CSD
[1] & 0xFFF00000U) >> 20U);

2049 
pCSD
->
RdBlockL√≠
 = (
u√∂t8_t
)((
hsd
->
CSD
[1] & 0x000F0000U) >> 16U);

2051 
pCSD
->
P¬®tBlockR√≥d
 = (
u√∂t8_t
)((
hsd
->
CSD
[1] & 0x00008000U) >> 15U);

2053 
pCSD
->
WrBlockMi√ülign
 = (
u√∂t8_t
)((
hsd
->
CSD
[1] & 0x00004000U) >> 14U);

2055 
pCSD
->
RdBlockMi√ülign
 = (
u√∂t8_t
)((
hsd
->
CSD
[1] & 0x00002000U) >> 13U);

2057 
pCSD
->
DSRIm‚àÇ
 = (
u√∂t8_t
)((
hsd
->
CSD
[1] & 0x00001000U) >> 12U);

2059 
pCSD
->
Re¬£rved2
 = 0U;

2061 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 =Ô£ø
CARD_SDSC
)

2063 
pCSD
->
DeviÀöSize
 = (((
hsd
->
CSD
[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));

2065 
pCSD
->
MaxRdCu¬∫√≠tVDDM√∂
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x38000000U) >> 27U);

2067 
pCSD
->
MaxRdCu¬∫√≠tVDDMax
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x07000000U) >> 24U);

2069 
pCSD
->
MaxWrCu¬∫√≠tVDDM√∂
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x00E00000U) >> 21U);

2071 
pCSD
->
MaxWrCu¬∫√≠tVDDMax
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x001C0000U) >> 18U);

2073 
pCSD
->
DeviÀöSizeMul
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x00038000U) >> 15U);

2075 
hsd
->
SdC¬®d
.
BlockNbr
 = (
pCSD
->
DeviÀöSize
 + 1U) ;

2076 
hsd
->
SdC¬®d
.
BlockNbr
 *Ô£ø(1UL << ((
pCSD
->
DeviÀöSizeMul
 & 0x07U) + 2U));

2077 
hsd
->
SdC¬®d
.
BlockSize
 = (1UL << (
pCSD
->
RdBlockL√≠
 & 0x0FU));

2079 
hsd
->
SdC¬®d
.
LogBlockNbr
 = (hsd->SdC¬®d.
BlockNbr
√ã* ((hsd->SdC¬®d.
BlockSize
) / 512U);

2080 
hsd
->
SdC¬®d
.
LogBlockSize
 = 512U;

2082 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 =Ô£ø
CARD_SDHC_SDXC
)

2085 
pCSD
->
DeviÀöSize
 = (((
hsd
->
CSD
[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));

2087 
hsd
->
SdC¬®d
.
BlockNbr
 = ((
pCSD
->
DeviÀöSize
 + 1U) * 1024U);

2088 
hsd
->
SdC¬®d
.
LogBlockNbr
 = hsd->SdC¬®d.
BlockNbr
;

2089 
hsd
->
SdC¬®d
.
BlockSize
 = 512U;

2090 
hsd
->
SdC¬®d
.
LogBlockSize
 = hsd->SdC¬®d.
BlockSize
;

2095 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2096 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_UNSUPPORTED_FEATURE
;

2097 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2098  
HAL_ERROR
;

2101 
pCSD
->
E√∏¬£GrSize
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x00004000U) >> 14U);

2103 
pCSD
->
E√∏¬£GrMul
 = (
u√∂t8_t
)((
hsd
->
CSD
[2] & 0x00003F80U) >> 7U);

2105 
pCSD
->
WrPr≈∏eÀòGrSize
 = (
u√∂t8_t
)(
hsd
->
CSD
[2] & 0x0000007FU);

2107 
pCSD
->
WrPr≈∏eÀòGrE¬´b√Ä
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x80000000U) >> 31U);

2109 
pCSD
->
M‚Ñ¢De√äECC
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x60000000U) >> 29U);

2111 
pCSD
->
WrS‚â•edFaÀò
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x1C000000U) >> 26U);

2113 
pCSD
->
MaxWrBlockL√≠
Ô£ø(
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x03C00000U) >> 22U);

2115 
pCSD
->
Wr√¥eBlockPaP¬®t√ºl
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00200000U) >> 21U);

2117 
pCSD
->
Re¬£rved3
 = 0;

2119 
pCSD
->
C‚ÅÑ√£¬°Pr≈∏eÀòA¬µli
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00010000U) >> 16U);

2121 
pCSD
->
F√ªeF‚Äπm¬©Group
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00008000U) >> 15U);

2123 
pCSD
->
C‚Ä∫yF≈ìg
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00004000U) >> 14U);

2125 
pCSD
->
P√ÆmWrPr≈∏eÀò
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00002000U) >> 13U);

2127 
pCSD
->
TempWrPr≈∏eÀò
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00001000U) >> 12U);

2129 
pCSD
->
F√ªeF‚Äπm¬©
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00000C00U) >> 10U);

2131 
pCSD
->
ECC
Ô£ø(
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x00000300U) >> 8U);

2133 
pCSD
->
CSD_CRC
 = (
u√∂t8_t
)((
hsd
->
CSD
[3] & 0x000000FEU) >> 1U);

2135 
pCSD
->
Re¬£rved4
 = 1;

2137  
HAL_OK
;

2138 
	}
}

2147 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_G√´C¬®dS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dS√®tusTy‚â•Def
 *
pS√®tus
)

2149 
u√∂t32_t
 
sd_¬∞¬©us
[16];

2150 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2152 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_S√≠dSDS√®tus
(
hsd
, 
sd_¬∞¬©us
);

2153 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2156 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2157 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2158 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2159  
HAL_ERROR
;

2163 
pS√®tus
->
D¬©aBusWidth
 = (
u√∂t8_t
)((
sd_¬∞¬©us
[0] & 0xC0U) >> 6U);

2165 
pS√®tus
->
Secu¬™dMode
 = (
u√∂t8_t
)((
sd_¬∞¬©us
[0] & 0x20U) >> 5U);

2167 
pS√®tus
->
C¬®dTy‚â•
 = (
u√∂t16_t
)(((
sd_¬∞¬©us
[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));

2169 
pS√®tus
->
Pr≈∏eÀòedA¬™aSize
 = (((
sd_¬∞¬©us
[1] & 0xFFU) << 24U) | ((sd_status[1] & 0xFF00U) << 8U) |

2170 ((
sd_¬∞¬©us
[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));

2172 
pS√®tus
->
S‚â•edC≈ìss
 = (
u√∂t8_t
)(
sd_¬∞¬©us
[2] & 0xFFU);

2174 
pS√®tus
->
P√Æf‚Äπm‚Ñ¢ÀöMove
 = (
u√∂t8_t
)((
sd_¬∞¬©us
[2] & 0xFF00U) >> 8U);

2176 
pS√®tus
->
A≈íoÀáti‚ÅÑUn√¥Size
 = (
u√∂t8_t
)((
sd_¬∞¬©us
[2] & 0xF00000U) >> 20U);

2178 
pS√®tus
->
E√∏¬£Size
 = (
u√∂t16_t
)(((
sd_¬∞¬©us
[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));

2180 
pS√®tus
->
E√∏¬£Timeout
 = (
u√∂t8_t
)((
sd_¬∞¬©us
[3] & 0xFC00U) >> 10U);

2182 
pS√®tus
->
E√∏¬£Off¬£t
 = (
u√∂t8_t
)((
sd_¬∞¬©us
[3] & 0x0300U) >> 8U);

2185  
HAL_OK
;

2186 
	}
}

2195 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_G√´C¬®dInfo
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
HAL_SD_C¬®dInfoTy‚â•Def
 *
pC¬®dInfo
)

2197 
pC¬®dInfo
->
C¬®dTy‚â•
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.CardType);

2198 
pC¬®dInfo
->
C¬®dV√Æsi‚ÅÑ
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.CardVersion);

2199 
pC¬®dInfo
->
C≈ìss
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.Class);

2200 
pC¬®dInfo
->
R√±C¬®dAdd
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.RelCardAdd);

2201 
pC¬®dInfo
->
BlockNbr
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.BlockNbr);

2202 
pC¬®dInfo
->
BlockSize
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.BlockSize);

2203 
pC¬®dInfo
->
LogBlockNbr
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.LogBlockNbr);

2204 
pC¬®dInfo
->
LogBlockSize
 = (
u√∂t32_t
)(
hsd
->
SdC¬®d
.LogBlockSize);

2206  
HAL_OK
;

2207 
	}
}

2220 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_C‚ÅÑfigWideBusO‚â•√∏ti‚ÅÑ
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 
WideMode
)

2222 
SDIO_In√¥Ty‚â•Def
 
In√¥
;

2223 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2226 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_BUS_WIDE
(
WideMode
));

2229 
hsd
->
S√®√£
 = 
HAL_SD_STATE_BUSY
;

2231 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

2233 if(
WideMode
 =Ô£ø
SDIO_BUS_WIDE_8B
)

2235 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_UNSUPPORTED_FEATURE
;

2237 if(
WideMode
 =Ô£ø
SDIO_BUS_WIDE_4B
)

2239 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_WideBus_E¬´b√Ä
(
hsd
);

2241 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2243 if(
WideMode
 =Ô£ø
SDIO_BUS_WIDE_1B
)

2245 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_WideBus_Di√üb√Ä
(
hsd
);

2247 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2252 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_PARAM
;

2258 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_UNSUPPORTED_FEATURE
;

2261 if(
hsd
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SD_ERROR_NONE
)

2264 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2265 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2266  
HAL_ERROR
;

2271 
In√¥
.
ClockEdge
 = 
hsd
->Init.ClockEdge;

2272 
In√¥
.
ClockBy‚àëss
 = 
hsd
->Init.ClockBypass;

2273 
In√¥
.
ClockPow√ÆSave
 = 
hsd
->Init.ClockPowerSave;

2274 
In√¥
.
BusWide
 = 
WideMode
;

2275 
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 = 
hsd
->Init.HardwareFlowControl;

2276 
In√¥
.
ClockDiv
 = 
hsd
->Init.ClockDiv;

2277 ()
	`SDIO_In√¥
(
hsd
->
In¬∞‚Ñ¢Àö
, 
In√¥
);

2281 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2283  
HAL_OK
;

2284 
	}
}

2291 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
	$HAL_SD_G√´C¬®dS√®√£
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2293 
u√∂t32_t
 
Àárd¬∞¬©e
;

2294 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2295 
u√∂t32_t
 
¬™‚Ä¢1
 = 0;

2297 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_S√≠dS√®tus
(
hsd
, &
¬™‚Ä¢1
);

2298 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2300 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2303 
Àárd¬∞¬©e
 = ((
¬™‚Ä¢1
 >> 9U) & 0x0FU);

2305  (
HAL_SD_C¬®dS√®√£Ty‚â•Def
)
Àárd¬∞¬©e
;

2306 
	}
}

2314 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_Ab‚Äπt
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2316 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2317 
u√∂t32_t
 
c‚ÅÑ√£xt
 = 
hsd
->
C‚ÅÑ√£xt
;

2320 
	`__HAL_SD_DISABLE_IT
(
hsd
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

2321 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
);

2324 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

2326 
	`CLEAR_BIT
(
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
, 
SDIO_DCTRL_DTEN
);

2328 i‚Ä°((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_DMA
) != 0U)

2331 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

2334 i‚Ä°(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_WRITE_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U))

2336 if(
	`HAL_DMA_Ab‚Äπt
(
hsd
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

2338 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DMA
;

2342 i‚Ä°(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_READ_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_READ_MULTIPLE_BLOCK
) != 0U))

2344 if(
	`HAL_DMA_Ab‚Äπt
(
hsd
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2346 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DMA
;

2355 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2358 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

2360 
C¬®dS√®√£
 = 
	`HAL_SD_G√´C¬®dS√®√£
(
hsd
);

2361 if((
C¬®dS√®√£
 =Ô£ø
HAL_SD_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_SD_CARD_SENDING
))

2363 
hsd
->
E¬∫‚ÄπCode
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hsd->
In¬∞‚Ñ¢Àö
);

2365 if(
hsd
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SD_ERROR_NONE
)

2367  
HAL_ERROR
;

2369  
HAL_OK
;

2370 
	}
}

2378 
HAL_S√®tusTy‚â•Def
 
	$HAL_SD_Ab‚Äπt_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2380 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2381 
u√∂t32_t
 
c‚ÅÑ√£xt
 = 
hsd
->
C‚ÅÑ√£xt
;

2384 
	`__HAL_SD_DISABLE_IT
(
hsd
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

2385 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
);

2387 
	`CLEAR_BIT
(
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
, 
SDIO_DCTRL_DTEN
);

2389 i‚Ä°((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_DMA
) != 0U)

2392 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

2395 i‚Ä°(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_WRITE_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_WRITE_MULTIPLE_BLOCK
) != 0U))

2397 
hsd
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SD_DMATxAb‚Äπt
;

2398 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsd
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

2400 
hsd
->
hdm¬©x
 = 
NULL
;

2404 i‚Ä°(((
c‚ÅÑ√£xt
 & 
SD_CONTEXT_READ_SINGLE_BLOCK
√ã!Ô£ø0U√ã|| ((c‚ÅÑ√£x√†& 
SD_CONTEXT_READ_MULTIPLE_BLOCK
) != 0U))

2406 
hsd
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SD_DMARxAb‚Äπt
;

2407 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsd
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2409 
hsd
->
hdm¬®x
 = 
NULL
;

2421 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

2423 
C¬®dS√®√£
 = 
	`HAL_SD_G√´C¬®dS√®√£
(
hsd
);

2424 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2425 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

2426 if((
C¬®dS√®√£
 =Ô£ø
HAL_SD_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_SD_CARD_SENDING
))

2428 
hsd
->
E¬∫‚ÄπCode
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hsd->
In¬∞‚Ñ¢Àö
);

2430 if(
hsd
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SD_ERROR_NONE
)

2432  
HAL_ERROR
;

2436 #i‚Ä°
	`def√∂ed
 (
USE_HAL_SD_REGISTER_CALLBACKS
) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)

2437 
hsd
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsd);

2439 
	`HAL_SD_Ab‚ÄπtC√Ülback
(
hsd
);

2444  
HAL_OK
;

2445 
	}
}

2465 
	$SD_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2467 
SD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsd
 = (SD_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2470 
	`__HAL_SD_ENABLE_IT
(
hsd
, (
SDIO_IT_DATAEND
));

2471 
	}
}

2478 
	$SD_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2480 
SD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsd
 = (SD_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2481 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2484 if(
hsd
->
C‚ÅÑ√£xt
 =Ô£ø(
SD_CONTEXT_READ_MULTIPLE_BLOCK
 | 
SD_CONTEXT_DMA
))

2486 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
hsd
->
In¬∞‚Ñ¢Àö
);

2487 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2489 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
√Ær‚Äπ¬∞¬©e
;

2490 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2491 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

2493 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

2500 
hsd
->
In¬∞‚Ñ¢Àö
->
DCTRL
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
SDIO_DCTRL_DMAEN
);

2503 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

2505 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2506 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

2508 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2509 
hsd
->
	`RxC‚àÇtC√Ülback
(hsd);

2511 
	`HAL_SD_RxC‚àÇtC√Ülback
(
hsd
);

2513 
	}
}

2520 
	$SD_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2522 
SD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsd
 = (SD_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2523 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2524 
u√∂t32_t
 
RxE¬∫‚ÄπCode
, 
TxE¬∫‚ÄπCode
;

2526 
RxE¬∫‚ÄπCode
 = 
hsd
->
hdm¬®x
->
E¬∫‚ÄπCode
;

2527 
TxE¬∫‚ÄπCode
 = 
hsd
->
hdm¬©x
->
E¬∫‚ÄπCode
;

2528 if((
RxE¬∫‚ÄπCode
 =Ô£ø
HAL_DMA_ERROR_TE
√ã|| (
TxE¬∫‚ÄπCode
 == HAL_DMA_ERROR_TE))

2531 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2534 
	`__HAL_SD_DISABLE_IT
(
hsd
, 
SDIO_IT_DATAEND
 | 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
|\

2535 
SDIO_IT_TXUNDERR
| 
SDIO_IT_RXOVERR
);

2537 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_DMA
;

2538 
C¬®dS√®√£
 = 
	`HAL_SD_G√´C¬®dS√®√£
(
hsd
);

2539 if((
C¬®dS√®√£
 =Ô£ø
HAL_SD_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_SD_CARD_SENDING
))

2541 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hsd->
In¬∞‚Ñ¢Àö
);

2544 
hsd
->
S√®√£
Ô£ø
HAL_SD_STATE_READY
;

2545 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

2548 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2549 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

2551 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

2553 
	}
}

2560 
	$SD_DMATxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2562 
SD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsd
 = (SD_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2563 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2566 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

2568 
C¬®dS√®√£
 = 
	`HAL_SD_G√´C¬®dS√®√£
(
hsd
);

2569 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2570 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

2571 if((
C¬®dS√®√£
 =Ô£ø
HAL_SD_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_SD_CARD_SENDING
))

2573 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hsd->
In¬∞‚Ñ¢Àö
);

2576 if(
hsd
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_SD_ERROR_NONE
)

2578 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2579 
hsd
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsd);

2581 
	`HAL_SD_Ab‚ÄπtC√Ülback
(
hsd
);

2586 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2587 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

2589 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

2592 
	}
}

2599 
	$SD_DMARxAb‚Äπt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2601 
SD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsd
 = (SD_H‚Ñ¢d√ÄTy‚â•Def* )(
hdma
->
P¬®√≠t
);

2602 
HAL_SD_C¬®dS√®√£Ty‚â•Def
 
C¬®dS√®√£
;

2605 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

2607 
C¬®dS√®√£
 = 
	`HAL_SD_G√´C¬®dS√®√£
(
hsd
);

2608 
hsd
->
S√®√£
 = 
HAL_SD_STATE_READY
;

2609 
hsd
->
C‚ÅÑ√£xt
 = 
SD_CONTEXT_NONE
;

2610 if((
C¬®dS√®√£
 =Ô£ø
HAL_SD_CARD_RECEIVING
√ã|| (C¬®dS√®√£ =Ô£ø
HAL_SD_CARD_SENDING
))

2612 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
	`SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(hsd->
In¬∞‚Ñ¢Àö
);

2615 if(
hsd
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_SD_ERROR_NONE
)

2617 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2618 
hsd
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsd);

2620 
	`HAL_SD_Ab‚ÄπtC√Ülback
(
hsd
);

2625 #i‚Ä°(
USE_HAL_SD_REGISTER_CALLBACKS
 == 1)

2626 
hsd
->
	`E¬∫‚ÄπC√Ülback
(hsd);

2628 
	`HAL_SD_E¬∫‚ÄπC√Ülback
(
hsd
);

2631 
	}
}

2638 
u√∂t32_t
 
	$SD_In√¥C¬®d
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2640 
HAL_SD_C¬®dCSDTy‚â•Def
 
CSD
;

2641 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2642 
u√∂t16_t
 
sd_rÀá
 = 1U;

2645 if(
	`SDIO_G√´Pow√ÆS√®√£
(
hsd
->
In¬∞‚Ñ¢Àö
) == 0U)

2648  
HAL_SD_ERROR_REQUEST_NOT_APPLICABLE
;

2651 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

2654 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dCID
(
hsd
->
In¬∞‚Ñ¢Àö
);

2655 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2657  
√Ær‚Äπ¬∞¬©e
;

2662 
hsd
->
CID
[0U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2663 
hsd
->
CID
[1U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP2
);

2664 
hsd
->
CID
[2U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP3
);

2665 
hsd
->
CID
[3U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP4
);

2669 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

2673 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√´R√±Add
(
hsd
->
In¬∞‚Ñ¢Àö
, &
sd_rÀá
);

2674 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2676  
√Ær‚Äπ¬∞¬©e
;

2679 if(
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 !Ô£ø
CARD_SECURED
)

2682 
hsd
->
SdC¬®d
.
R√±C¬®dAdd
 = 
sd_rÀá
;

2685 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dCSD
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hsd->
SdC¬®d
.
R√±C¬®dAdd
 << 16U));

2686 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2688  
√Ær‚Äπ¬∞¬©e
;

2693 
hsd
->
CSD
[0U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2694 
hsd
->
CSD
[1U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP2
);

2695 
hsd
->
CSD
[2U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP3
);

2696 
hsd
->
CSD
[3U] = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP4
);

2701 
hsd
->
SdC¬®d
.
C≈ìss
 = (
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(hsd->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP2
) >> 20U);

2704 i‚Ä°(
	`HAL_SD_G√´C¬®dCSD
(
hsd
, &
CSD
√ã!Ô£ø
HAL_OK
)

2706  
HAL_SD_ERROR_UNSUPPORTED_FEATURE
;

2710 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√±De¬£l
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(((u√∂t32_t)hsd->
SdC¬®d
.
R√±C¬®dAdd
) << 16U));

2711 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2713  
√Ær‚Äπ¬∞¬©e
;

2717 ()
	`SDIO_In√¥
(
hsd
->
In¬∞‚Ñ¢Àö
, hsd->
In√¥
);

2720  
HAL_SD_ERROR_NONE
;

2721 
	}
}

2730 
u√∂t32_t
 
	$SD_Pow√ÆON
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2732 
__IO
 
u√∂t32_t
 
cou¬°
 = 0U;

2733 
u√∂t32_t
 
¬™‚Ä¢‚ÅÑ¬£
 = 0U, 
v√ÜidvÔ¨Å√®ge
 = 0U;

2734 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2737 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdGoId√ÄS√®√£
(
hsd
->
In¬∞‚Ñ¢Àö
);

2738 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2740  
√Ær‚Äπ¬∞¬©e
;

2744 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdO‚â•rC‚ÅÑd
(
hsd
->
In¬∞‚Ñ¢Àö
);

2745 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2747 
hsd
->
SdC¬®d
.
C¬®dV√Æsi‚ÅÑ
 = 
CARD_V1_X
;

2749 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdGoId√ÄS√®√£
(
hsd
->
In¬∞‚Ñ¢Àö
);

2750 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2752  
√Ær‚Äπ¬∞¬©e
;

2758 
hsd
->
SdC¬®d
.
C¬®dV√Æsi‚ÅÑ
 = 
CARD_V2_X
;

2761 if‚Äì
hsd
->
SdC¬®d
.
C¬®dV√Æsi‚ÅÑ
 =Ô£ø
CARD_V2_X
)

2764 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, 0);

2765 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2767  
HAL_SD_ERROR_UNSUPPORTED_FEATURE
;

2772 (
cou¬°
 < 
SDMMC_MAX_VOLT_TRIAL
√ã&& (
v√ÜidvÔ¨Å√®ge
 == 0U))

2775 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, 0);

2776 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2778  
√Ær‚Äπ¬∞¬©e
;

2782 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µO‚â•rComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDMMC_VOLTAGE_WINDOW_SD
 | 
SDMMC_HIGH_CAPACITY
 | 
SD_SWITCH_1_8V_CAPACITY
);

2783 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2785  
HAL_SD_ERROR_UNSUPPORTED_FEATURE
;

2789 
¬™‚Ä¢‚ÅÑ¬£
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2792 
v√ÜidvÔ¨Å√®ge
 = (((
¬™‚Ä¢‚ÅÑ¬£
 >> 31U) == 1U) ? 1U : 0U);

2794 
cou¬°
++;

2797 if(
cou¬°
 >Ô£ø
SDMMC_MAX_VOLT_TRIAL
)

2799  
HAL_SD_ERROR_INVALID_VOLTRANGE
;

2802 if((
¬™‚Ä¢‚ÅÑ¬£
 & 
SDMMC_HIGH_CAPACITY
) == SDMMC_HIGH_CAPACITY)

2804 
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 = 
CARD_SDHC_SDXC
;

2808 
hsd
->
SdC¬®d
.
C¬®dTy‚â•
 = 
CARD_SDSC
;

2812  
HAL_SD_ERROR_NONE
;

2813 
	}
}

2820 
	$SD_Pow√ÆOFF
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2823 ()
	`SDIO_Pow√ÆS√®√£_OFF
(
hsd
->
In¬∞‚Ñ¢Àö
);

2824 
	}
}

2833 
u√∂t32_t
 
	$SD_S√≠dSDS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 *
pSD¬∞¬©us
)

2835 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

2836 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2837 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2838 
u√∂t32_t
 
cou¬°
;

2839 
u√∂t32_t
 *
pD¬©a
 = 
pSD¬∞¬©us
;

2842 if((
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
√ã& 
SDMMC_CARD_LOCKED
) == SDMMC_CARD_LOCKED)

2844  
HAL_SD_ERROR_LOCK_UNLOCK_FAILED
;

2848 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 64U);

2849 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2851 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_NONE
;

2852  
√Ær‚Äπ¬∞¬©e
;

2856 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hsd->
SdC¬®d
.
R√±C¬®dAdd
 << 16U));

2857 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2859 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_NONE
;

2860  
√Ær‚Äπ¬∞¬©e
;

2864 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

2865 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 64U;

2866 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_64B
;

2867 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

2868 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

2869 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

2870 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

2873 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√®tusRegi¬∞√Æ
(
hsd
->
In¬∞‚Ñ¢Àö
);

2874 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2876 
hsd
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SD_ERROR_NONE
;

2877  
√Ær‚Äπ¬∞¬©e
;

2881 !
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

2883 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
))

2885 
cou¬°
 = 0U; count < 8U; count++)

2887 *
pD¬©a
 = 
	`SDIO_R√≥dFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
);

2888 
pD¬©a
++;

2892 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
SDMMC_DATATIMEOUT
)

2894  
HAL_SD_ERROR_TIMEOUT
;

2898 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

2900  
HAL_SD_ERROR_DATA_TIMEOUT
;

2902 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

2904  
HAL_SD_ERROR_DATA_CRC_FAIL
;

2906 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

2908  
HAL_SD_ERROR_RX_OVERRUN
;

2915 (
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
)))

2917 *
pD¬©a
 = 
	`SDIO_R√≥dFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
);

2918 
pD¬©a
++;

2920 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
SDMMC_DATATIMEOUT
)

2922  
HAL_SD_ERROR_TIMEOUT
;

2927 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

2929  
HAL_SD_ERROR_NONE
;

2930 
	}
}

2939 
u√∂t32_t
 
	$SD_S√≠dS√®tus
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 *
pC¬®dS√®tus
)

2941 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2943 if(
pC¬®dS√®tus
 =Ô£ø
NULL
)

2945  
HAL_SD_ERROR_PARAM
;

2949 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dS√®tus
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hsd->
SdC¬®d
.
R√±C¬®dAdd
 << 16U));

2950 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2952  
√Ær‚Äπ¬∞¬©e
;

2956 *
pC¬®dS√®tus
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
);

2958  
HAL_SD_ERROR_NONE
;

2959 
	}
}

2966 
u√∂t32_t
 
	$SD_WideBus_E¬´b√Ä
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

2968 
u√∂t32_t
 
s¬∏
[2U] = {0U, 0U};

2969 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

2971 if((
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
√ã& 
SDMMC_CARD_LOCKED
) == SDMMC_CARD_LOCKED)

2973  
HAL_SD_ERROR_LOCK_UNLOCK_FAILED
;

2977 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_F√∂dSCR
(
hsd
, 
s¬∏
);

2978 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2980  
√Ær‚Äπ¬∞¬©e
;

2984 if((
s¬∏
[1U] & 
SDMMC_WIDE_BUS_SUPPORT
√ã!Ô£ø
SDMMC_ALLZERO
)

2987 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hsd->
SdC¬®d
.
R√±C¬®dAdd
 << 16U));

2988 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2990  
√Ær‚Äπ¬∞¬©e
;

2994 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBusWidth
(
hsd
->
In¬∞‚Ñ¢Àö
, 2U);

2995 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

2997  
√Ær‚Äπ¬∞¬©e
;

3000  
HAL_SD_ERROR_NONE
;

3004  
HAL_SD_ERROR_REQUEST_NOT_APPLICABLE
;

3006 
	}
}

3013 
u√∂t32_t
 
	$SD_WideBus_Di√üb√Ä
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

3015 
u√∂t32_t
 
s¬∏
[2U] = {0U, 0U};

3016 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

3018 if((
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
hsd
->
In¬∞‚Ñ¢Àö
, 
SDIO_RESP1
√ã& 
SDMMC_CARD_LOCKED
) == SDMMC_CARD_LOCKED)

3020  
HAL_SD_ERROR_LOCK_UNLOCK_FAILED
;

3024 
√Ær‚Äπ¬∞¬©e
 = 
	`SD_F√∂dSCR
(
hsd
, 
s¬∏
);

3025 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

3027  
√Ær‚Äπ¬∞¬©e
;

3031 if((
s¬∏
[1U] & 
SDMMC_SINGLE_BUS_SUPPORT
√ã!Ô£ø
SDMMC_ALLZERO
)

3034 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)(hsd->
SdC¬®d
.
R√±C¬®dAdd
 << 16U));

3035 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

3037  
√Ær‚Äπ¬∞¬©e
;

3041 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBusWidth
(
hsd
->
In¬∞‚Ñ¢Àö
, 0U);

3042 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

3044  
√Ær‚Äπ¬∞¬©e
;

3047  
HAL_SD_ERROR_NONE
;

3051  
HAL_SD_ERROR_REQUEST_NOT_APPLICABLE
;

3053 
	}
}

3062 
u√∂t32_t
 
	$SD_F√∂dSCR
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
, 
u√∂t32_t
 *
pSCR
)

3064 
SDIO_D¬©aIn√¥Ty‚â•Def
 
c‚ÅÑfig
;

3065 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

3066 
u√∂t32_t
 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3067 
u√∂t32_t
 
√∂dex
 = 0U;

3068 
u√∂t32_t
 
√£mps¬∏
[2U] = {0U, 0U};

3069 
u√∂t32_t
 *
s¬∏
 = 
pSCR
;

3072 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdBlockL√≠gth
(
hsd
->
In¬∞‚Ñ¢Àö
, 8U);

3073 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

3075  
√Ær‚Äπ¬∞¬©e
;

3079 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdA¬µComm‚Ñ¢d
(
hsd
->
In¬∞‚Ñ¢Àö
, (
u√∂t32_t
)((hsd->
SdC¬®d
.
R√±C¬®dAdd
) << 16U));

3080 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

3082  
√Ær‚Äπ¬∞¬©e
;

3085 
c‚ÅÑfig
.
D¬©aTimeOut
 = 
SDMMC_DATATIMEOUT
;

3086 
c‚ÅÑfig
.
D¬©aL√≠gth
 = 8U;

3087 
c‚ÅÑfig
.
D¬©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_8B
;

3088 
c‚ÅÑfig
.
T√∏ns‚ÄûrD√∫
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

3089 
c‚ÅÑfig
.
T√∏ns‚ÄûrMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

3090 
c‚ÅÑfig
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

3091 ()
	`SDIO_C‚ÅÑfigD¬©a
(
hsd
->
In¬∞‚Ñ¢Àö
, &
c‚ÅÑfig
);

3094 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_CmdS√≠dSCR
(
hsd
->
In¬∞‚Ñ¢Àö
);

3095 if(
√Ær‚Äπ¬∞¬©e
 !Ô£ø
HAL_SD_ERROR_NONE
)

3097  
√Ær‚Äπ¬∞¬©e
;

3100 !
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

3102 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
))

3104 *(
√£mps¬∏
 + 
√∂dex
√ãÔ£ø
	`SDIO_R√≥dFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
);

3105 
√∂dex
++;

3108 if((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
SDMMC_DATATIMEOUT
)

3110  
HAL_SD_ERROR_TIMEOUT
;

3114 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

3116 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

3118  
HAL_SD_ERROR_DATA_TIMEOUT
;

3120 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

3122 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

3124  
HAL_SD_ERROR_DATA_CRC_FAIL
;

3126 if(
	`__HAL_SD_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

3128 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
);

3130  
HAL_SD_ERROR_RX_OVERRUN
;

3136 
	`__HAL_SD_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_DATA_FLAGS
);

3138 *
s¬∏
 = (((
√£mps¬∏
[1] & 
SDMMC_0TO7BITS
√ã<< 24√ã| (‚Äîemps¬∏[1] & 
SDMMC_8TO15BITS
) << 8) |\

3139 ((
√£mps¬∏
[1] & 
SDMMC_16TO23BITS
√ã>> 8√ã| (‚Äîemps¬∏[1] & 
SDMMC_24TO31BITS
) >> 24));

3140 
s¬∏
++;

3141 *
s¬∏
 = (((
√£mps¬∏
[0] & 
SDMMC_0TO7BITS
√ã<< 24√ã| (‚Äîemps¬∏[0] & 
SDMMC_8TO15BITS
) << 8) |\

3142 ((
√£mps¬∏
[0] & 
SDMMC_16TO23BITS
√ã>> 8√ã| (‚Äîemps¬∏[0] & 
SDMMC_24TO31BITS
) >> 24));

3146  
HAL_SD_ERROR_NONE
;

3147 
	}
}

3155 
	$SD_R√≥d_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

3157 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

3158 
u√∂t8_t
* 
tmp
;

3160 
tmp
 = 
hsd
->
pRxBuffP√•
;

3161 
d¬©¬®ema√∂√∂g
 = 
hsd
->
RxX‚ÄûrSize
;

3163 i‚Ä°(
d¬©¬®ema√∂√∂g
 > 0U)

3166 
cou¬°
 = 0U; count < 8U; count++)

3168 
d¬©a
 = 
	`SDIO_R√≥dFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
);

3169 *
tmp
 = (
u√∂t8_t
)(
d¬©a
 & 0xFFU);

3170 
tmp
++;

3171 
d¬©¬®ema√∂√∂g
--;

3172 *
tmp
 = (
u√∂t8_t
)((
d¬©a
 >> 8U) & 0xFFU);

3173 
tmp
++;

3174 
d¬©¬®ema√∂√∂g
--;

3175 *
tmp
 = (
u√∂t8_t
)((
d¬©a
 >> 16U) & 0xFFU);

3176 
tmp
++;

3177 
d¬©¬®ema√∂√∂g
--;

3178 *
tmp
 = (
u√∂t8_t
)((
d¬©a
 >> 24U) & 0xFFU);

3179 
tmp
++;

3180 
d¬©¬®ema√∂√∂g
--;

3183 
hsd
->
pRxBuffP√•
 = 
tmp
;

3184 
hsd
->
RxX‚ÄûrSize
 = 
d¬©¬®ema√∂√∂g
;

3186 
	}
}

3194 
	$SD_Wr√¥e_IT
(
SD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsd
)

3196 
u√∂t32_t
 
cou¬°
, 
d¬©a
, 
d¬©¬®ema√∂√∂g
;

3197 
u√∂t8_t
* 
tmp
;

3199 
tmp
 = 
hsd
->
pTxBuffP√•
;

3200 
d¬©¬®ema√∂√∂g
 = 
hsd
->
TxX‚ÄûrSize
;

3202 i‚Ä°(
d¬©¬®ema√∂√∂g
 > 0U)

3205 
cou¬°
 = 0U; count < 8U; count++)

3207 
d¬©a
 = (
u√∂t32_t
)(*
tmp
);

3208 
tmp
++;

3209 
d¬©¬®ema√∂√∂g
--;

3210 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
tmp
) << 8U);

3211 
tmp
++;

3212 
d¬©¬®ema√∂√∂g
--;

3213 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
tmp
) << 16U);

3214 
tmp
++;

3215 
d¬©¬®ema√∂√∂g
--;

3216 
d¬©a
 |Ô£ø((
u√∂t32_t
)(*
tmp
) << 24U);

3217 
tmp
++;

3218 
d¬©¬®ema√∂√∂g
--;

3219 ()
	`SDIO_Wr√¥eFIFO
(
hsd
->
In¬∞‚Ñ¢Àö
, &
d¬©a
);

3222 
hsd
->
pTxBuffP√•
 = 
tmp
;

3223 
hsd
->
TxX‚ÄûrSize
 = 
d¬©¬®ema√∂√∂g
;

3225 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_smartcard.c

176 
	~"¬∞m32f1xx_h√Ü.h
"

186 #ifde‚Ä°
HAL_SMARTCARD_MODULE_ENABLED


202 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

203 
SMARTCARD_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

205 
SMARTCARD_EndTxT√∏ns‚Äûr
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

206 
SMARTCARD_EndRxT√∏ns‚Äûr
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

207 
SMARTCARD_S√´C‚ÅÑfig
 (
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

208 
HAL_S√®tusTy‚â•Def
 
SMARTCARD_T√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

209 
HAL_S√®tusTy‚â•Def
 
SMARTCARD_EndT√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

210 
HAL_S√®tusTy‚â•Def
 
SMARTCARD_ReÀöive_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
);

211 
SMARTCARD_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

212 
SMARTCARD_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

213 
SMARTCARD_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

214 
SMARTCARD_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

215 
SMARTCARD_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

216 
SMARTCARD_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

217 
SMARTCARD_DMATxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

218 
SMARTCARD_DMARxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

219 
HAL_S√®tusTy‚â•Def
 
SMARTCARD_Wa√¥OnF≈ìgU¬°√ªTimeout
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
);

296 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_In√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

299 if(
hsc
 =Ô£ø
NULL
)

301  
HAL_ERROR
;

305 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_INSTANCE
(
hsc
->
In¬∞‚Ñ¢Àö
));

306 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_NACK_STATE
(
hsc
->
In√¥
.
NACKS√®√£
));

308 if(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_RESET
)

311 
hsc
->
Lock
 = 
HAL_UNLOCKED
;

313 #i‚Ä°
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1

314 
	`SMARTCARD_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
hsc
);

316 i‚Ä°(
hsc
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

318 
hsc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SMARTCARD_M‚Ä¢In√¥
;

322 
hsc
->
	`M‚Ä¢In√¥C√Ülback
(hsc);

325 
	`HAL_SMARTCARD_M‚Ä¢In√¥
(
hsc
);

329 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY
;

332 
	`MODIFY_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
GTPR
, 
USART_GTPR_PSC
, hsc->
In√¥
.
P¬™sÀá√Är
);

335 
	`MODIFY_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
GTPR
, 
USART_GTPR_GT
, ((hsc->
In√¥
.
Gu¬®dTime
)<<8U));

338 
	`SMARTCARD_S√´C‚ÅÑfig
(
hsc
);

343 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_LINEN
);

344 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_HDSEL
));

347 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

350 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

353 
	`__HAL_SMARTCARD_ENABLE
(
hsc
);

356 
	`MODIFY_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_NACK
, hsc->
In√¥
.
NACKS√®√£
);

359 
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
 |Ô£ø(
USART_CR3_SCEN
);

362 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

363 
hsc
->
gS√®√£
Ô£ø
HAL_SMARTCARD_STATE_READY
;

364 
hsc
->
RxS√®√£
Ô£ø
HAL_SMARTCARD_STATE_READY
;

366  
HAL_OK
;

367 
	}
}

375 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_DeIn√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

378 if(
hsc
 =Ô£ø
NULL
)

380  
HAL_ERROR
;

384 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_INSTANCE
(
hsc
->
In¬∞‚Ñ¢Àö
));

386 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY
;

389 
	`__HAL_SMARTCARD_DISABLE
(
hsc
);

392 #i‚Ä°
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1

393 i‚Ä°(
hsc
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

395 
hsc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SMARTCARD_M‚Ä¢DeIn√¥
;

398 
hsc
->
	`M‚Ä¢DeIn√¥C√Ülback
(hsc);

400 
	`HAL_SMARTCARD_M‚Ä¢DeIn√¥
(
hsc
);

403 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

404 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_RESET
;

405 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_RESET
;

408 
	`__HAL_UNLOCK
(
hsc
);

410  
HAL_OK
;

411 
	}
}

419 
__w√≥k
 
	$HAL_SMARTCARD_M‚Ä¢In√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

422 
	`UNUSED
(
hsc
);

427 
	}
}

435 
__w√≥k
 
	$HAL_SMARTCARD_M‚Ä¢DeIn√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

438 
	`UNUSED
(
hsc
);

443 
	}
}

445 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

463 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Regi¬∞√ÆC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
HAL_SMARTCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pSMARTCARD_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

465 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

467 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

470 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

472  
HAL_ERROR
;

475 
	`__HAL_LOCK
(
hsc
);

477 i‚Ä°(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

479 
C√ÜlbackID
)

482 
HAL_SMARTCARD_TX_COMPLETE_CB_ID
 :

483 
hsc
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

486 
HAL_SMARTCARD_RX_COMPLETE_CB_ID
 :

487 
hsc
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

490 
HAL_SMARTCARD_ERROR_CB_ID
 :

491 
hsc
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

494 
HAL_SMARTCARD_ABORT_COMPLETE_CB_ID
 :

495 
hsc
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

498 
HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

499 
hsc
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
pC√Ülback
;

502 
HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID
 :

503 
hsc
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
pC√Ülback
;

507 
HAL_SMARTCARD_MSPINIT_CB_ID
 :

508 
hsc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

511 
HAL_SMARTCARD_MSPDEINIT_CB_ID
 :

512 
hsc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

517 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

520 
¬∞¬©us
 = 
HAL_ERROR
;

524 i‚Ä°(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_RESET
)

526 
C√ÜlbackID
)

528 
HAL_SMARTCARD_MSPINIT_CB_ID
 :

529 
hsc
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

532 
HAL_SMARTCARD_MSPDEINIT_CB_ID
 :

533 
hsc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

538 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

541 
¬∞¬©us
 = 
HAL_ERROR
;

548 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

551 
¬∞¬©us
 = 
HAL_ERROR
;

555 
	`__HAL_UNLOCK
(
hsc
);

557  
¬∞¬©us
;

558 
	}
}

576 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_UnRegi¬∞√ÆC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
HAL_SMARTCARD_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

578 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

581 
	`__HAL_LOCK
(
hsc
);

583 i‚Ä°(
HAL_SMARTCARD_STATE_READY
 =Ô£ø
hsc
->
gS√®√£
)

585 
C√ÜlbackID
)

587 
HAL_SMARTCARD_TX_COMPLETE_CB_ID
 :

588 
hsc
->
TxC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_TxC‚àÇtC√Ülback
;

591 
HAL_SMARTCARD_RX_COMPLETE_CB_ID
 :

592 
hsc
->
RxC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_RxC‚àÇtC√Ülback
;

595 
HAL_SMARTCARD_ERROR_CB_ID
 :

596 
hsc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
;

599 
HAL_SMARTCARD_ABORT_COMPLETE_CB_ID
 :

600 
hsc
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
;

603 
HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

604 
hsc
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
;

607 
HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID
 :

608 
hsc
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
;

612 
HAL_SMARTCARD_MSPINIT_CB_ID
 :

613 
hsc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SMARTCARD_M‚Ä¢In√¥
;

616 
HAL_SMARTCARD_MSPDEINIT_CB_ID
 :

617 
hsc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SMARTCARD_M‚Ä¢DeIn√¥
;

622 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

625 
¬∞¬©us
 = 
HAL_ERROR
;

629 i‚Ä°(
HAL_SMARTCARD_STATE_RESET
 =Ô£ø
hsc
->
gS√®√£
)

631 
C√ÜlbackID
)

633 
HAL_SMARTCARD_MSPINIT_CB_ID
 :

634 
hsc
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SMARTCARD_M‚Ä¢In√¥
;

637 
HAL_SMARTCARD_MSPDEINIT_CB_ID
 :

638 
hsc
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SMARTCARD_M‚Ä¢DeIn√¥
;

643 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

646 
¬∞¬©us
 = 
HAL_ERROR
;

653 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_INVALID_CALLBACK
;

656 
¬∞¬©us
 = 
HAL_ERROR
;

660 
	`__HAL_UNLOCK
(
hsc
);

662  
¬∞¬©us
;

663 
	}
}

756 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_T√∏nsm√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

758 
u√∂t8_t
 *
tmp
 = 
pD¬©a
;

759 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

761 if(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

763 if((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

765  
HAL_ERROR
;

769 
	`__HAL_LOCK
(
hsc
);

771 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

772 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

775 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

777 
hsc
->
TxX‚ÄûrSize
 = 
Size
;

778 
hsc
->
TxX‚ÄûrCou¬°
 = 
Size
;

779 
hsc
->
TxX‚ÄûrCou¬°
 > 0U)

781 
hsc
->
TxX‚ÄûrCou¬°
--;

782 if(
	`SMARTCARD_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hsc
, 
SMARTCARD_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

784  
HAL_TIMEOUT
;

786 
hsc
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*
tmp
 & 0xFFU);

787 
tmp
++;

790 if(
	`SMARTCARD_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hsc
, 
SMARTCARD_FLAG_TC
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

792  
HAL_TIMEOUT
;

796 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

799 
	`__HAL_UNLOCK
(
hsc
);

801  
HAL_OK
;

805  
HAL_BUSY
;

807 
	}
}

818 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_ReÀöive
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

820 
u√∂t8_t
 *
tmp
 = 
pD¬©a
;

821 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

823 if(
hsc
->
RxS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

825 if((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

827  
HAL_ERROR
;

831 
	`__HAL_LOCK
(
hsc
);

833 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

834 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

837 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

839 
hsc
->
RxX‚ÄûrSize
 = 
Size
;

840 
hsc
->
RxX‚ÄûrCou¬°
 = 
Size
;

843 
hsc
->
RxX‚ÄûrCou¬°
 > 0U)

845 
hsc
->
RxX‚ÄûrCou¬°
--;

846 if(
	`SMARTCARD_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hsc
, 
SMARTCARD_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

848  
HAL_TIMEOUT
;

850 *
tmp
 = (
u√∂t8_t
)(
hsc
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0xFFU);

851 
tmp
++;

855 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

858 
	`__HAL_UNLOCK
(
hsc
);

860  
HAL_OK
;

864  
HAL_BUSY
;

866 
	}
}

876 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_T√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

879 if(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

881 if((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

883  
HAL_ERROR
;

887 
	`__HAL_LOCK
(
hsc
);

889 
hsc
->
pTxBuffP√•
 = 
pD¬©a
;

890 
hsc
->
TxX‚ÄûrSize
 = 
Size
;

891 
hsc
->
TxX‚ÄûrCou¬°
 = 
Size
;

893 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

894 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

897 
	`__HAL_UNLOCK
(
hsc
);

900 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

903 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

906 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

908  
HAL_OK
;

912  
HAL_BUSY
;

914 
	}
}

924 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_ReÀöive_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

927 if(
hsc
->
RxS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

929 if((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

931  
HAL_ERROR
;

935 
	`__HAL_LOCK
(
hsc
);

937 
hsc
->
pRxBuffP√•
 = 
pD¬©a
;

938 
hsc
->
RxX‚ÄûrSize
 = 
Size
;

939 
hsc
->
RxX‚ÄûrCou¬°
 = 
Size
;

941 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

942 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

945 
	`__HAL_UNLOCK
(
hsc
);

948 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
| 
USART_CR1_RXNEIE
);

951 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

953  
HAL_OK
;

957  
HAL_BUSY
;

959 
	}
}

969 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_T√∏nsm√¥_DMA
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

971 
u√∂t32_t
 *
tmp
;

974 if(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

976 if((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

978  
HAL_ERROR
;

982 
	`__HAL_LOCK
(
hsc
);

984 
hsc
->
pTxBuffP√•
 = 
pD¬©a
;

985 
hsc
->
TxX‚ÄûrSize
 = 
Size
;

986 
hsc
->
TxX‚ÄûrCou¬°
 = 
Size
;

988 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

989 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

992 
hsc
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SMARTCARD_DMAT√∏nsm√¥C‚àÇt
;

995 
hsc
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SMARTCARD_DMAE¬∫‚Äπ
;

998 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1001 
tmp
 = (
u√∂t32_t
*)&
pD¬©a
;

1002 
	`HAL_DMA_S√®œÄ_IT
(
hsc
->
hdm¬©x
, *(
u√∂t32_t
*)
tmp
, (u√∂t32_t)&hsc->
In¬∞‚Ñ¢Àö
->
DR
, 
Size
);

1005 
	`__HAL_SMARTCARD_CLEAR_FLAG
(
hsc
, 
SMARTCARD_FLAG_TC
);

1008 
	`__HAL_UNLOCK
(
hsc
);

1012 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1014  
HAL_OK
;

1018  
HAL_BUSY
;

1020 
	}
}

1031 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_ReÀöive_DMA
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1033 
u√∂t32_t
 *
tmp
;

1036 if(
hsc
->
RxS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_READY
)

1038 if((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1040  
HAL_ERROR
;

1044 
	`__HAL_LOCK
(
hsc
);

1046 
hsc
->
pRxBuffP√•
 = 
pD¬©a
;

1047 
hsc
->
RxX‚ÄûrSize
 = 
Size
;

1049 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

1050 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

1053 
hsc
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SMARTCARD_DMAReÀöiveC‚àÇt
;

1056 
hsc
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SMARTCARD_DMAE¬∫‚Äπ
;

1059 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1062 
tmp
 = (
u√∂t32_t
*)&
pD¬©a
;

1063 
	`HAL_DMA_S√®œÄ_IT
(
hsc
->
hdm¬®x
, (
u√∂t32_t
)&hsc->
In¬∞‚Ñ¢Àö
->
DR
, *(u√∂t32_t*)
tmp
, 
Size
);

1066 
	`__HAL_SMARTCARD_CLEAR_OREFLAG
(
hsc
);

1069 
	`__HAL_UNLOCK
(
hsc
);

1072 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1075 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1079 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1081  
HAL_OK
;

1085  
HAL_BUSY
;

1087 
	}
}

1101 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Ab‚Äπt
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1104 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1105 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1108 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1110 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1113 if(
hsc
->
hdm¬©x
 !Ô£ø
NULL
)

1117 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1119 
	`HAL_DMA_Ab‚Äπt
(
hsc
->
hdm¬©x
);

1124 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1126 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1129 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

1133 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1135 
	`HAL_DMA_Ab‚Äπt
(
hsc
->
hdm¬®x
);

1140 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

1141 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

1144 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

1147 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1148 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1150  
HAL_OK
;

1151 
	}
}

1165 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1168 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1171 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1173 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1176 if(
hsc
->
hdm¬©x
 !Ô£ø
NULL
)

1180 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1182 
	`HAL_DMA_Ab‚Äπt
(
hsc
->
hdm¬©x
);

1187 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

1190 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1192  
HAL_OK
;

1193 
	}
}

1207 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Ab‚ÄπtReÀöive
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1210 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1211 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1214 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1216 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1219 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

1223 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1225 
	`HAL_DMA_Ab‚Äπt
(
hsc
->
hdm¬®x
);

1230 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

1233 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1235  
HAL_OK
;

1236 
	}
}

1252 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Ab‚Äπt_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1254 
u√∂t32_t
 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1257 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1258 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1263 if(
hsc
->
hdm¬©x
 !Ô£ø
NULL
)

1267 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1269 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SMARTCARD_DMATxAb‚ÄπtC√Ülback
;

1273 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1277 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

1281 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1283 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SMARTCARD_DMARxAb‚ÄπtC√Ülback
;

1287 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1292 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1295 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1298 if(
hsc
->
hdm¬©x
 !Ô£ø
NULL
)

1304 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsc
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1306 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1310 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1316 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1318 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1321 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

1327 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsc
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1329 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1330 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1334 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1340 if(
Ab‚ÄπtC‚àÇt
 == 0x01U)

1343 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

1344 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

1347 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

1350 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1351 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1354 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1356 
hsc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsc);

1359 
	`HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
(
hsc
);

1362  
HAL_OK
;

1363 
	}
}

1379 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1382 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1385 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1387 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1390 if(
hsc
->
hdm¬©x
 !Ô£ø
NULL
)

1394 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SMARTCARD_DMATxO‚àÜyAb‚ÄπtC√Ülback
;

1397 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsc
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1400 
hsc
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hsc->hdmatx);

1406 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

1409 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1412 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1414 
hsc
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(hsc);

1417 
	`HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
hsc
);

1424 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

1427 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1430 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1432 
hsc
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(hsc);

1435 
	`HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
hsc
);

1439  
HAL_OK
;

1440 
	}
}

1456 
HAL_S√®tusTy‚â•Def
 
	$HAL_SMARTCARD_Ab‚ÄπtReÀöive_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1459 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1460 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1463 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1465 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1468 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

1472 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SMARTCARD_DMARxO‚àÜyAb‚ÄπtC√Ülback
;

1475 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsc
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1478 
hsc
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hsc->hdmarx);

1484 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

1487 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1490 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1492 
hsc
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(hsc);

1495 
	`HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
hsc
);

1502 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

1505 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1508 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1510 
hsc
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(hsc);

1513 
	`HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
hsc
);

1517  
HAL_OK
;

1518 
	}
}

1526 
	$HAL_SMARTCARD_IRQH‚Ñ¢d√Är
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1528 
u√∂t32_t
 
i¬ß√äags
 = 
	`READ_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
SR
);

1529 
u√∂t32_t
 
¬∏1√¥s
 = 
	`READ_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
);

1530 
u√∂t32_t
 
¬∏3√¥s
 = 
	`READ_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
);

1531 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1532 
u√∂t32_t
 
√Ær‚Äπ√äags
 = 0x00U;

1535 
√Ær‚Äπ√äags
 = (
i¬ß√äags
 & (
u√∂t32_t
)(
USART_SR_PE
 | 
USART_SR_FE
 | 
USART_SR_ORE
 | 
USART_SR_NE
));

1536 if(
√Ær‚Äπ√äags
 =Ô£ø
RESET
)

1539 if(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

1541 
	`SMARTCARD_ReÀöive_IT
(
hsc
);

1547 if((
√Ær‚Äπ√äags
 !Ô£ø
RESET
√ã&& (((
¬∏3√¥s
 & 
USART_CR3_EIE
√ã!Ô£øRESET√ã|| ((
¬∏1√¥s
 & (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
)) != RESET)))

1550 if(((
i¬ß√äags
 & 
SMARTCARD_FLAG_PE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_PEIE
) != RESET))

1552 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_PE
;

1556 if(((
i¬ß√äags
 & 
SMARTCARD_FLAG_FE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1558 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_FE
;

1562 if(((
i¬ß√äags
 & 
SMARTCARD_FLAG_NE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1564 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_NE
;

1568 if(((
i¬ß√äags
 & 
SMARTCARD_FLAG_ORE
√ã!Ô£ø
RESET
√ã&& (((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
√ã!Ô£øRESET√ã|| ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET)))

1570 
hsc
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SMARTCARD_ERROR_ORE
;

1573 if(
hsc
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SMARTCARD_ERROR_NONE
)

1576 if(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

1578 
	`SMARTCARD_ReÀöive_IT
(
hsc
);

1583 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1584 if(((
hsc
->
E¬∫‚ÄπCode
 & 
HAL_SMARTCARD_ERROR_ORE
√ã!Ô£ø
RESET
√ã|| 
dm¬®eque¬∞
)

1589 
	`SMARTCARD_EndRxT√∏ns‚Äûr
(
hsc
);

1591 if(
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1593 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1596 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

1600 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SMARTCARD_DMAAb‚ÄπtOnE¬∫‚Äπ
;

1602 if(
	`HAL_DMA_Ab‚Äπt_IT
(
hsc
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1605 
hsc
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(hsc->hdmarx);

1610 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1612 
hsc
->
	`E¬∫‚ÄπC√Ülback
(hsc);

1615 
	`HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
hsc
);

1621 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1623 
hsc
->
	`E¬∫‚ÄπC√Ülback
(hsc);

1626 
	`HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
hsc
);

1634 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1636 
hsc
->
	`E¬∫‚ÄπC√Ülback
(hsc);

1639 
	`HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
hsc
);

1641 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

1648 if(((
i¬ß√äags
 & 
SMARTCARD_FLAG_TXE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TXEIE
) != RESET))

1650 
	`SMARTCARD_T√∏nsm√¥_IT
(
hsc
);

1655 if(((
i¬ß√äags
 & 
SMARTCARD_FLAG_TC
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TCIE
) != RESET))

1657 
	`SMARTCARD_EndT√∏nsm√¥_IT
(
hsc
);

1660 
	}
}

1668 
__w√≥k
 
	$HAL_SMARTCARD_TxC‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1671 
	`UNUSED
(
hsc
);

1676 
	}
}

1684 
__w√≥k
 
	$HAL_SMARTCARD_RxC‚àÇtC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1687 
	`UNUSED
(
hsc
);

1692 
	}
}

1700 
__w√≥k
 
	$HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1703 
	`UNUSED
(
hsc
);

1708 
	}
}

1715 
__w√≥k
 
	$HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
 (
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1718 
	`UNUSED
(
hsc
);

1723 
	}
}

1730 
__w√≥k
 
	$HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 (
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1733 
	`UNUSED
(
hsc
);

1738 
	}
}

1745 
__w√≥k
 
	$HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 (
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1748 
	`UNUSED
(
hsc
);

1753 
	}
}

1780 
HAL_SMARTCARD_S√®√£Ty‚â•Def
 
	$HAL_SMARTCARD_G√´S√®√£
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1782 
u√∂t32_t
 
√£mp1
Ô£ø0x00U, 
√£mp2
 = 0x00U;

1783 
√£mp1
 = 
hsc
->
gS√®√£
;

1784 
√£mp2
 = 
hsc
->
RxS√®√£
;

1786  (
HAL_SMARTCARD_S√®√£Ty‚â•Def
)(
√£mp1
 | 
√£mp2
);

1787 
	}
}

1795 
u√∂t32_t
 
	$HAL_SMARTCARD_G√´E¬∫‚Äπ
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1797  
hsc
->
E¬∫‚ÄπCode
;

1798 
	}
}

1812 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1818 
	$SMARTCARD_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1821 
hsc
->
TxC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_TxC‚àÇtC√Ülback
;

1822 
hsc
->
RxC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_RxC‚àÇtC√Ülback
;

1823 
hsc
->
E¬∫‚ÄπC√Ülback
 = 
HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
;

1824 
hsc
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
;

1825 
hsc
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
;

1826 
hsc
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
;

1828 
	}
}

1837 
	$SMARTCARD_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1839 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

1841 
hsc
->
TxX‚ÄûrCou¬°
 = 0U;

1845 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1848 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

1849 
	}
}

1857 
	$SMARTCARD_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1859 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

1861 
hsc
->
RxX‚ÄûrCou¬°
 = 0U;

1864 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1865 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1869 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1872 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1874 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1876 
hsc
->
	`RxC‚àÇtC√Ülback
(hsc);

1879 
	`HAL_SMARTCARD_RxC‚àÇtC√Ülback
(
hsc
);

1881 
	}
}

1889 
	$SMARTCARD_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1891 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1892 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

1893 
hsc
->
RxX‚ÄûrCou¬°
 = 0U;

1894 
hsc
->
TxX‚ÄûrCou¬°
 = 0U;

1895 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_DMA
;

1898 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1899 if((
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

1901 
	`SMARTCARD_EndTxT√∏ns‚Äûr
(
hsc
);

1905 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1906 if((
hsc
->
RxS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

1908 
	`SMARTCARD_EndRxT√∏ns‚Äûr
(
hsc
);

1911 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

1913 
hsc
->
	`E¬∫‚ÄπC√Ülback
(hsc);

1916 
	`HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
hsc
);

1918 
	}
}

1930 
HAL_S√®tusTy‚â•Def
 
	$SMARTCARD_Wa√¥OnF≈ìgU¬°√ªTimeout
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
)

1933 (
	`__HAL_SMARTCARD_GET_FLAG
(
hsc
, 
F≈ìg
√ã? 
SET
 : 
RESET
√ã=Ô£ø
S√®tus
)

1936 if(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

1938 if((
Timeout
 =Ô£ø0U)||((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
 ) > Timeout))

1941 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

1942 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

1944 
hsc
->
gS√®√£
Ô£ø
HAL_SMARTCARD_STATE_READY
;

1945 
hsc
->
RxS√®√£
Ô£ø
HAL_SMARTCARD_STATE_READY
;

1948 
	`__HAL_UNLOCK
(
hsc
);

1950  
HAL_TIMEOUT
;

1954  
HAL_OK
;

1955 
	}
}

1963 
	$SMARTCARD_EndTxT√∏ns‚Äûr
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1966 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1969 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1970 
	}
}

1979 
	$SMARTCARD_EndRxT√∏ns‚Äûr
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1982 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

1985 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1986 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1987 
	}
}

1995 
HAL_S√®tusTy‚â•Def
 
	$SMARTCARD_T√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

1999 if(
hsc
->
gS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_BUSY_TX
)

2001 
hsc
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*hsc->
pTxBuffP√•
 & 0xFFU);

2002 
hsc
->
pTxBuffP√•
++;

2004 if(--
hsc
->
TxX‚ÄûrCou¬°
 == 0U)

2007 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

2010 
	`SET_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2013  
HAL_OK
;

2017  
HAL_BUSY
;

2019 
	}
}

2027 
HAL_S√®tusTy‚â•Def
 
	$SMARTCARD_EndT√∏nsm√¥_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

2030 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2033 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2036 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2038 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2040 
hsc
->
	`TxC‚àÇtC√Ülback
(hsc);

2043 
	`HAL_SMARTCARD_TxC‚àÇtC√Ülback
(
hsc
);

2046  
HAL_OK
;

2047 
	}
}

2055 
HAL_S√®tusTy‚â•Def
 
	$SMARTCARD_ReÀöive_IT
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

2059 if(
hsc
->
RxS√®√£
 =Ô£ø
HAL_SMARTCARD_STATE_BUSY_RX
)

2061 *
hsc
->
pRxBuffP√•
 = (
u√∂t8_t
)(hsc->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0xFFU);

2062 
hsc
->
pRxBuffP√•
++;

2064 if(--
hsc
->
RxX‚ÄûrCou¬°
 == 0U)

2066 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

2069 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2072 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2075 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2077 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2079 
hsc
->
	`RxC‚àÇtC√Ülback
(hsc);

2082 
	`HAL_SMARTCARD_RxC‚àÇtC√Ülback
(
hsc
);

2085  
HAL_OK
;

2087  
HAL_OK
;

2091  
HAL_BUSY
;

2093 
	}
}

2101 
	$SMARTCARD_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2103 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = (SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2104 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

2105 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

2107 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2109 
hsc
->
	`E¬∫‚ÄπC√Ülback
(hsc);

2112 
	`HAL_SMARTCARD_E¬∫‚ÄπC√Ülback
(
hsc
);

2114 
	}
}

2124 
	$SMARTCARD_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2126 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2128 
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2131 if(
hsc
->
hdm¬®x
 !Ô£ø
NULL
)

2133 if(
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2140 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

2141 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

2144 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

2147 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2148 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2150 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2152 
hsc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsc);

2155 
	`HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
(
hsc
);

2157 
	}
}

2167 
	$SMARTCARD_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2169 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2171 
hsc
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2174 if(
hsc
->
hdm¬©x
 !Ô£ø
NULL
)

2176 if(
hsc
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2183 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

2184 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

2187 
hsc
->
E¬∫‚ÄπCode
 = 
HAL_SMARTCARD_ERROR_NONE
;

2190 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2191 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2193 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2195 
hsc
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hsc);

2198 
	`HAL_SMARTCARD_Ab‚ÄπtC‚àÇtC√Ülback
(
hsc
);

2200 
	}
}

2210 
	$SMARTCARD_DMATxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2212 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2214 
hsc
->
TxX‚ÄûrCou¬°
 = 0x00U;

2217 
hsc
->
gS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2219 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2221 
hsc
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(hsc);

2224 
	`HAL_SMARTCARD_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
hsc
);

2226 
	}
}

2236 
	$SMARTCARD_DMARxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2238 
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
* 
hsc
 = ( SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def* )((
DMA_H‚Ñ¢d√ÄTy‚â•Def
* )
hdma
)->
P¬®√≠t
;

2240 
hsc
->
RxX‚ÄûrCou¬°
 = 0x00U;

2243 
hsc
->
RxS√®√£
 = 
HAL_SMARTCARD_STATE_READY
;

2245 #i‚Ä°(
USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 == 1)

2247 
hsc
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(hsc);

2250 
	`HAL_SMARTCARD_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
hsc
);

2252 
	}
}

2260 
	$SMARTCARD_S√´C‚ÅÑfig
(
SMARTCARD_H‚Ñ¢d√ÄTy‚â•Def
 *
hsc
)

2262 
u√∂t32_t
 
tm¬•eg
 = 0x00U;

2263 
u√∂t32_t
 
pÀõk
;

2266 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_INSTANCE
(
hsc
->
In¬∞‚Ñ¢Àö
));

2267 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_POLARITY
(
hsc
->
In√¥
.
CLKPÔ¨Å¬®√¥y
));

2268 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_PHASE
(
hsc
->
In√¥
.
CLKPha¬£
));

2269 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_LASTBIT
(
hsc
->
In√¥
.
CLKLa¬∞B√¥
));

2270 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_BAUDRATE
(
hsc
->
In√¥
.
BaudR¬©e
));

2271 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_WORD_LENGTH
(
hsc
->
In√¥
.
W‚ÄπdL√≠gth
));

2272 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_STOPBITS
(
hsc
->
In√¥
.
St‚Ä∫B√¥s
));

2273 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_PARITY
(
hsc
->
In√¥
.
P¬®√¥y
));

2274 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_MODE
(
hsc
->
In√¥
.
Mode
));

2275 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SMARTCARD_NACK_STATE
(
hsc
->
In√¥
.
NACKS√®√£
));

2279 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TE
 | 
USART_CR1_RE
));

2282 
tm¬•eg
 = 
hsc
->
In¬∞‚Ñ¢Àö
->
CR2
;

2284 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)(
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_CLKEN
 | 
USART_CR2_LBCL
));

2290 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)(
USART_CR2_CLKEN
 | 
hsc
->
In√¥
.
CLKPÔ¨Å¬®√¥y
 |

2291 
hsc
->
In√¥
.
CLKPha¬£
| hsc->In√¥.
CLKLa¬∞B√¥
 | hsc->In√¥.
St‚Ä∫B√¥s
);

2293 
	`WRITE_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
u√∂t32_t
)
tm¬•eg
);

2295 
tm¬•eg
 = 
hsc
->
In¬∞‚Ñ¢Àö
->
CR2
;

2298 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)
USART_CR2_STOP
);

2301 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)(
hsc
->
In√¥
.
St‚Ä∫B√¥s
);

2304 
	`WRITE_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR2
, (
u√∂t32_t
)
tm¬•eg
);

2307 
tm¬•eg
 = 
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
;

2310 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

2311 
USART_CR1_RE
));

2317 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)
hsc
->
In√¥
.
W‚ÄπdL√≠gth
 | hsc->In√¥.
P¬®√¥y
 | hsc->In√¥.
Mode
;

2320 
	`WRITE_REG
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR1
, (
u√∂t32_t
)
tm¬•eg
);

2324 
	`CLEAR_BIT
(
hsc
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

2327 if(
hsc
->
In¬∞‚Ñ¢Àö
 =Ô£ø
USART1
)

2329 
pÀõk
 = 
	`HAL_RCC_G√´PCLK2F¬™q
();

2330 
hsc
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`SMARTCARD_BRR
(
pÀõk
, hsc->
In√¥
.
BaudR¬©e
);

2334 
pÀõk
 = 
	`HAL_RCC_G√´PCLK1F¬™q
();

2335 
hsc
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`SMARTCARD_BRR
(
pÀõk
, hsc->
In√¥
.
BaudR¬©e
);

2337 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_spi.c

202 
	~"¬∞m32f1xx_h√Ü.h
"

212 #ifde‚Ä°
HAL_SPI_MODULE_ENABLED


216 #i‚Ä°(
USE_SPI_CRC
 !Ô£ø0U√ã&& 
def√∂ed
(
SPI_CRC_ERROR_WORKAROUND_FEATURE
)

237 
	#USE_SPI_CRC_ERROR_WORKAROUND
 0U

	)

242 
	#SPI_DEFAULT_TIMEOUT
 100U

	)

253 
SPI_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

254 
SPI_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

255 
SPI_DMAT√∏nsm√¥ReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

256 
SPI_DMAH√ÜfT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

257 
SPI_DMAH√ÜfReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

258 
SPI_DMAH√ÜfT√∏nsm√¥ReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

259 
SPI_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

260 
SPI_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

261 
SPI_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

262 
SPI_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

263 
HAL_S√®tusTy‚â•Def
 
SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®√£
,

264 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

265 
SPI_TxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

266 
SPI_TxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

267 
SPI_RxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

268 
SPI_RxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

269 
SPI_2l√∂esRxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

270 
SPI_2l√∂esTxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

271 
SPI_2l√∂esTxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

272 
SPI_2l√∂esRxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

273 #i‚Ä°(
USE_SPI_CRC
 != 0U)

274 
SPI_RxISR_8BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

275 
SPI_RxISR_16BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

276 
SPI_2l√∂esRxISR_8BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

277 
SPI_2l√∂esRxISR_16BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

279 
SPI_Ab‚ÄπtRx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

280 
SPI_Ab‚ÄπtTx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

281 
SPI_Clo¬£RxTx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

282 
SPI_Clo¬£Rx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

283 
SPI_Clo¬£Tx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
);

284 
HAL_S√®tusTy‚â•Def
 
SPI_EndRxT√∏n√üÀòi‚ÅÑ
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

285 
HAL_S√®tusTy‚â•Def
 
SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
);

335 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_In√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

338 i‚Ä°(
h‚Ä¢i
 =Ô£ø
NULL
)

340  
HAL_ERROR
;

344 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_ALL_INSTANCE
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
));

345 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_MODE
(
h‚Ä¢i
->
In√¥
.
Mode
));

346 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

347 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DATASIZE
(
h‚Ä¢i
->
In√¥
.
D¬©aSize
));

348 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_NSS
(
h‚Ä¢i
->
In√¥
.
NSS
));

349 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h‚Ä¢i
->
In√¥
.
BaudR¬©eP¬™sÀá√Är
));

350 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_FIRST_BIT
(
h‚Ä¢i
->
In√¥
.
F√∫¬∞B√¥
));

353 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_TIMODE
(
h‚Ä¢i
->
In√¥
.
TIMode
));

354 i‚Ä°(
h‚Ä¢i
->
In√¥
.
TIMode
 =Ô£ø
SPI_TIMODE_DISABLE
)

356 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_CPOL
(
h‚Ä¢i
->
In√¥
.
CLKPÔ¨Å¬®√¥y
));

357 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_CPHA
(
h‚Ä¢i
->
In√¥
.
CLKPha¬£
));

359 i‚Ä°(
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_MASTER
)

361 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h‚Ä¢i
->
In√¥
.
BaudR¬©eP¬™sÀá√Är
));

366 
h‚Ä¢i
->
In√¥
.
BaudR¬©eP¬™sÀá√Är
 = 
SPI_BAUDRATEPRESCALER_2
;

371 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h‚Ä¢i
->
In√¥
.
BaudR¬©eP¬™sÀá√Är
));

374 
h‚Ä¢i
->
In√¥
.
CLKPÔ¨Å¬®√¥y
 = 
SPI_POLARITY_LOW
;

375 
h‚Ä¢i
->
In√¥
.
CLKPha¬£
 = 
SPI_PHASE_1EDGE
;

377 #i‚Ä°(
USE_SPI_CRC
 != 0U)

378 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_CRC_CALCULATION
(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
));

379 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

381 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_CRC_POLYNOMIAL
(
h‚Ä¢i
->
In√¥
.
CRCPÔ¨Åynom√ºl
));

384 
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 = 
SPI_CRCCALCULATION_DISABLE
;

387 i‚Ä°(
h‚Ä¢i
->
S√®√£
 =Ô£ø
HAL_SPI_STATE_RESET
)

390 
h‚Ä¢i
->
Lock
 = 
HAL_UNLOCKED
;

392 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

394 
h‚Ä¢i
->
TxC‚àÇtC√Ülback
 = 
HAL_SPI_TxC‚àÇtC√Ülback
;

395 
h‚Ä¢i
->
RxC‚àÇtC√Ülback
 = 
HAL_SPI_RxC‚àÇtC√Ülback
;

396 
h‚Ä¢i
->
TxRxC‚àÇtC√Ülback
 = 
HAL_SPI_TxRxC‚àÇtC√Ülback
;

397 
h‚Ä¢i
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_SPI_TxH√ÜfC‚àÇtC√Ülback
;

398 
h‚Ä¢i
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_SPI_RxH√ÜfC‚àÇtC√Ülback
;

399 
h‚Ä¢i
->
TxRxH√ÜfC‚àÇtC√Ülback
 = 
HAL_SPI_TxRxH√ÜfC‚àÇtC√Ülback
;

400 
h‚Ä¢i
->
E¬∫‚ÄπC√Ülback
 = 
HAL_SPI_E¬∫‚ÄπC√Ülback
;

401 
h‚Ä¢i
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
;

403 i‚Ä°(
h‚Ä¢i
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

405 
h‚Ä¢i
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SPI_M‚Ä¢In√¥
;

409 
h‚Ä¢i
->
	`M‚Ä¢In√¥C√Ülback
(hspi);

412 
	`HAL_SPI_M‚Ä¢In√¥
(
h‚Ä¢i
);

416 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY
;

419 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

424 
	`WRITE_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, ((h‚Ä¢i->
In√¥
.
Mode
 & (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
)) |

425 (
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 & (
SPI_CR1_RXONLY
 | 
SPI_CR1_BIDIMODE
)) |

426 (
h‚Ä¢i
->
In√¥
.
D¬©aSize
 & 
SPI_CR1_DFF
) |

427 (
h‚Ä¢i
->
In√¥
.
CLKPÔ¨Å¬®√¥y
 & 
SPI_CR1_CPOL
) |

428 (
h‚Ä¢i
->
In√¥
.
CLKPha¬£
 & 
SPI_CR1_CPHA
) |

429 (
h‚Ä¢i
->
In√¥
.
NSS
 & 
SPI_CR1_SSM
) |

430 (
h‚Ä¢i
->
In√¥
.
BaudR¬©eP¬™sÀá√Är
 & 
SPI_CR1_BR_Msk
) |

431 (
h‚Ä¢i
->
In√¥
.
F√∫¬∞B√¥
 & 
SPI_CR1_LSBFIRST
) |

432 (
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 & 
SPI_CR1_CRCEN
)));

435 
	`WRITE_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, ((h‚Ä¢i->
In√¥
.
NSS
 >> 16U√ã& 
SPI_CR2_SSOE
));

437 #i‚Ä°(
USE_SPI_CRC
 != 0U)

440 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

442 
	`WRITE_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CRCPR
, (h‚Ä¢i->
In√¥
.
CRCPÔ¨Åynom√ºl
 & 
SPI_CRCPR_CRCPOLY_Msk
));

446 #i‚Ä°
	`def√∂ed
(
SPI_I2SCFGR_I2SMOD
)

448 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
);

451 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

452 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

454  
HAL_OK
;

455 
	}
}

463 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_DeIn√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

466 i‚Ä°(
h‚Ä¢i
 =Ô£ø
NULL
)

468  
HAL_ERROR
;

472 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_ALL_INSTANCE
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
));

474 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY
;

477 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

479 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

480 i‚Ä°(
h‚Ä¢i
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

482 
h‚Ä¢i
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SPI_M‚Ä¢DeIn√¥
;

486 
h‚Ä¢i
->
	`M‚Ä¢DeIn√¥C√Ülback
(hspi);

489 
	`HAL_SPI_M‚Ä¢DeIn√¥
(
h‚Ä¢i
);

492 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

493 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_RESET
;

496 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

498  
HAL_OK
;

499 
	}
}

507 
__w√≥k
 
	$HAL_SPI_M‚Ä¢In√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

510 
	`UNUSED
(
h‚Ä¢i
);

515 
	}
}

523 
__w√≥k
 
	$HAL_SPI_M‚Ä¢DeIn√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

526 
	`UNUSED
(
h‚Ä¢i
);

531 
	}
}

533 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

543 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_Regi¬∞√ÆC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
HAL_SPI_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

544 
pSPI_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

546 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

548 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

551 
h‚Ä¢i
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_SPI_ERROR_INVALID_CALLBACK
;

553  
HAL_ERROR
;

556 
	`__HAL_LOCK
(
h‚Ä¢i
);

558 i‚Ä°(
HAL_SPI_STATE_READY
 =Ô£ø
h‚Ä¢i
->
S√®√£
)

560 
C√ÜlbackID
)

562 
HAL_SPI_TX_COMPLETE_CB_ID
 :

563 
h‚Ä¢i
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

566 
HAL_SPI_RX_COMPLETE_CB_ID
 :

567 
h‚Ä¢i
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

570 
HAL_SPI_TX_RX_COMPLETE_CB_ID
 :

571 
h‚Ä¢i
->
TxRxC‚àÇtC√Ülback
 = 
pC√Ülback
;

574 
HAL_SPI_TX_HALF_COMPLETE_CB_ID
 :

575 
h‚Ä¢i
->
TxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

578 
HAL_SPI_RX_HALF_COMPLETE_CB_ID
 :

579 
h‚Ä¢i
->
RxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

582 
HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID
 :

583 
h‚Ä¢i
->
TxRxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

586 
HAL_SPI_ERROR_CB_ID
 :

587 
h‚Ä¢i
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

590 
HAL_SPI_ABORT_CB_ID
 :

591 
h‚Ä¢i
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

594 
HAL_SPI_MSPINIT_CB_ID
 :

595 
h‚Ä¢i
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

598 
HAL_SPI_MSPDEINIT_CB_ID
 :

599 
h‚Ä¢i
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

604 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

607 
¬∞¬©us
 = 
HAL_ERROR
;

611 i‚Ä°(
HAL_SPI_STATE_RESET
 =Ô£ø
h‚Ä¢i
->
S√®√£
)

613 
C√ÜlbackID
)

615 
HAL_SPI_MSPINIT_CB_ID
 :

616 
h‚Ä¢i
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

619 
HAL_SPI_MSPDEINIT_CB_ID
 :

620 
h‚Ä¢i
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

625 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

628 
¬∞¬©us
 = 
HAL_ERROR
;

635 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

638 
¬∞¬©us
 = 
HAL_ERROR
;

642 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

643  
¬∞¬©us
;

644 
	}
}

654 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_UnRegi¬∞√ÆC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
HAL_SPI_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

656 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

659 
	`__HAL_LOCK
(
h‚Ä¢i
);

661 i‚Ä°(
HAL_SPI_STATE_READY
 =Ô£ø
h‚Ä¢i
->
S√®√£
)

663 
C√ÜlbackID
)

665 
HAL_SPI_TX_COMPLETE_CB_ID
 :

666 
h‚Ä¢i
->
TxC‚àÇtC√Ülback
 = 
HAL_SPI_TxC‚àÇtC√Ülback
;

669 
HAL_SPI_RX_COMPLETE_CB_ID
 :

670 
h‚Ä¢i
->
RxC‚àÇtC√Ülback
 = 
HAL_SPI_RxC‚àÇtC√Ülback
;

673 
HAL_SPI_TX_RX_COMPLETE_CB_ID
 :

674 
h‚Ä¢i
->
TxRxC‚àÇtC√Ülback
 = 
HAL_SPI_TxRxC‚àÇtC√Ülback
;

677 
HAL_SPI_TX_HALF_COMPLETE_CB_ID
 :

678 
h‚Ä¢i
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_SPI_TxH√ÜfC‚àÇtC√Ülback
;

681 
HAL_SPI_RX_HALF_COMPLETE_CB_ID
 :

682 
h‚Ä¢i
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_SPI_RxH√ÜfC‚àÇtC√Ülback
;

685 
HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID
 :

686 
h‚Ä¢i
->
TxRxH√ÜfC‚àÇtC√Ülback
 = 
HAL_SPI_TxRxH√ÜfC‚àÇtC√Ülback
;

689 
HAL_SPI_ERROR_CB_ID
 :

690 
h‚Ä¢i
->
E¬∫‚ÄπC√Ülback
 = 
HAL_SPI_E¬∫‚ÄπC√Ülback
;

693 
HAL_SPI_ABORT_CB_ID
 :

694 
h‚Ä¢i
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
;

697 
HAL_SPI_MSPINIT_CB_ID
 :

698 
h‚Ä¢i
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SPI_M‚Ä¢In√¥
;

701 
HAL_SPI_MSPDEINIT_CB_ID
 :

702 
h‚Ä¢i
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SPI_M‚Ä¢DeIn√¥
;

707 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

710 
¬∞¬©us
 = 
HAL_ERROR
;

714 i‚Ä°(
HAL_SPI_STATE_RESET
 =Ô£ø
h‚Ä¢i
->
S√®√£
)

716 
C√ÜlbackID
)

718 
HAL_SPI_MSPINIT_CB_ID
 :

719 
h‚Ä¢i
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SPI_M‚Ä¢In√¥
;

722 
HAL_SPI_MSPDEINIT_CB_ID
 :

723 
h‚Ä¢i
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SPI_M‚Ä¢DeIn√¥
;

728 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

731 
¬∞¬©us
 = 
HAL_ERROR
;

738 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_INVALID_CALLBACK
);

741 
¬∞¬©us
 = 
HAL_ERROR
;

745 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

746  
¬∞¬©us
;

747 
	}
}

795 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_T√∏nsm√¥
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

797 
u√∂t32_t
 
tick¬∞¬®t
;

798 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

799 
u√∂t16_t
 
√∂√¥√ºl_TxX‚ÄûrCou¬°
;

802 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

805 
	`__HAL_LOCK
(
h‚Ä¢i
);

808 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

809 
√∂√¥√ºl_TxX‚ÄûrCou¬°
 = 
Size
;

811 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_READY
)

813 
√Ær‚Äπcode
 = 
HAL_BUSY
;

814 
√Ær‚Äπ
;

817 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

819 
√Ær‚Äπcode
 = 
HAL_ERROR
;

820 
√Ær‚Äπ
;

824 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_TX
;

825 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

826 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
pD¬©a
;

827 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 
Size
;

828 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 
Size
;

831 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
NULL
;

832 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 0U;

833 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

834 
h‚Ä¢i
->
TxISR
 = 
NULL
;

835 
h‚Ä¢i
->
RxISR
 = 
NULL
;

838 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

841 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

842 
	`SPI_1LINE_TX
(
h‚Ä¢i
);

845 #i‚Ä°(
USE_SPI_CRC
 != 0U)

847 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

849 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

854 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

857 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

861 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 =Ô£ø
SPI_DATASIZE_16BIT
)

863 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_SLAVE
√ã|| (
√∂√¥√ºl_TxX‚ÄûrCou¬°
 == 0x01U))

865 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = *((
u√∂t16_t
 *)h‚Ä¢i->
pTxBuffP√•
);

866 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t16_t
);

867 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

870 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 > 0U)

873 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_TXE
))

875 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = *((
u√∂t16_t
 *)h‚Ä¢i->
pTxBuffP√•
);

876 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t16_t
);

877 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

882 i‚Ä°((((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
√ã&& (Timeou√†!Ô£ø
HAL_MAX_DELAY
)) || (Timeout == 0U))

884 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

885 
√Ær‚Äπ
;

893 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_SLAVE
√ã|| (
√∂√¥√ºl_TxX‚ÄûrCou¬°
 == 0x01U))

895 *((
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
√ãÔ£ø(*h‚Ä¢i->
pTxBuffP√•
);

896 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t8_t
);

897 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

899 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 > 0U)

902 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_TXE
))

904 *((
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
√ãÔ£ø(*h‚Ä¢i->
pTxBuffP√•
);

905 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t8_t
);

906 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

911 i‚Ä°((((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
√ã&& (Timeou√†!Ô£ø
HAL_MAX_DELAY
)) || (Timeout == 0U))

913 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

914 
√Ær‚Äπ
;

919 #i‚Ä°(
USE_SPI_CRC
 != 0U)

921 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

923 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

928 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

930 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_FLAG
;

934 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
)

936 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

939 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

941 
√Ær‚Äπcode
 = 
HAL_ERROR
;

944 
√Ær‚Äπ
:

945 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

947 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

948  
√Ær‚Äπcode
;

949 
	}
}

960 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_ReÀöive
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

962 
u√∂t32_t
 
tick¬∞¬®t
;

963 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

965 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& (h‚Ä¢i->In√¥.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
))

967 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_RX
;

969  
	`HAL_SPI_T√∏nsm√¥ReÀöive
(
h‚Ä¢i
, 
pD¬©a
,√ñD¬©a, 
Size
, 
Timeout
);

973 
	`__HAL_LOCK
(
h‚Ä¢i
);

976 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

978 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_READY
)

980 
√Ær‚Äπcode
 = 
HAL_BUSY
;

981 
√Ær‚Äπ
;

984 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

986 
√Ær‚Äπcode
 = 
HAL_ERROR
;

987 
√Ær‚Äπ
;

991 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_RX
;

992 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

993 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
pD¬©a
;

994 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 
Size
;

995 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 
Size
;

998 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
NULL
;

999 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 0U;

1000 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

1001 
h‚Ä¢i
->
RxISR
 = 
NULL
;

1002 
h‚Ä¢i
->
TxISR
 = 
NULL
;

1004 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1006 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1008 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1010 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

1015 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

1018 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

1019 
	`SPI_1LINE_RX
(
h‚Ä¢i
);

1023 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1026 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1030 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 =Ô£ø
SPI_DATASIZE_8BIT
)

1033 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 > 0U)

1036 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
))

1039 (* (
u√∂t8_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø*(
__IO
 u√∂t8_√†*)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
;

1040 
h‚Ä¢i
->
pRxBuffP√•
 +Ô£ø(
u√∂t8_t
);

1041 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

1046 i‚Ä°((((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
√ã&& (Timeou√†!Ô£ø
HAL_MAX_DELAY
)) || (Timeout == 0U))

1048 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1049 
√Ær‚Äπ
;

1057 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 > 0U)

1060 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
))

1062 *((
u√∂t16_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø(u√∂t16_t)h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
;

1063 
h‚Ä¢i
->
pRxBuffP√•
 +Ô£ø(
u√∂t16_t
);

1064 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

1069 i‚Ä°((((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
√ã&& (Timeou√†!Ô£ø
HAL_MAX_DELAY
)) || (Timeout == 0U))

1071 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1072 
√Ær‚Äπ
;

1078 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1080 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1083 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

1086 i‚Ä°(
	`READ_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
))

1089 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

1092 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
, 
SET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1095 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1096 
√Ær‚Äπ
;

1100 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 =Ô£ø
SPI_DATASIZE_16BIT
)

1102 *((
u√∂t16_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø(u√∂t16_t)h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
;

1107 (*(
u√∂t8_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø*(
__IO
 u√∂t8_√†*)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
;

1111 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
, 
SET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1113 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

1114 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1115 
√Ær‚Äπ
;

1119 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

1124 i‚Ä°(
	`SPI_EndRxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1126 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_FLAG
;

1129 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1131 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_CRCERR
√ã!Ô£ø
RESET
)

1134 i‚Ä°(
	`SPI_ISCRCE¬∫‚ÄπV√Üid
(
h‚Ä¢i
√ã=Ô£ø
SPI_VALID_CRC_ERROR
)

1136 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

1139 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1143 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h‚Ä¢i
);

1148 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

1150 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1153 
√Ær‚Äπ
 :

1154 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

1155 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1156  
√Ær‚Äπcode
;

1157 
	}
}

1169 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_T√∏nsm√¥ReÀöive
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
,

1170 
u√∂t32_t
 
Timeout
)

1172 
u√∂t16_t
 
√∂√¥√ºl_TxX‚ÄûrCou¬°
;

1173 
u√∂t32_t
 
tmp_mode
;

1174 
HAL_SPI_S√®√£Ty‚â•Def
 
tmp_¬∞¬©e
;

1175 
u√∂t32_t
 
tick¬∞¬®t
;

1178 
u√∂t32_t
 
tx√Ülowed
 = 1U;

1179 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1182 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION_2LINES
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

1185 
	`__HAL_LOCK
(
h‚Ä¢i
);

1188 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1191 
tmp_¬∞¬©e
 = 
h‚Ä¢i
->
S√®√£
;

1192 
tmp_mode
 = 
h‚Ä¢i
->
In√¥
.
Mode
;

1193 
√∂√¥√ºl_TxX‚ÄûrCou¬°
 = 
Size
;

1195 i‚Ä°(!((
tmp_¬∞¬©e
 =Ô£ø
HAL_SPI_STATE_READY
) || \

1196 ((
tmp_mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& (
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
√ã&& (
tmp_¬∞¬©e
 =Ô£ø
HAL_SPI_STATE_BUSY_RX
))))

1198 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1199 
√Ær‚Äπ
;

1202 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
pRxD¬©a
 =Ô£øNULL√ã|| (
Size
 == 0U))

1204 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1205 
√Ær‚Äπ
;

1209 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_BUSY_RX
)

1211 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1215 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1216 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
pRxD¬©a
;

1217 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 
Size
;

1218 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 
Size
;

1219 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
pTxD¬©a
;

1220 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 
Size
;

1221 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 
Size
;

1224 
h‚Ä¢i
->
RxISR
 = 
NULL
;

1225 
h‚Ä¢i
->
TxISR
 = 
NULL
;

1227 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1229 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1231 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1236 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1239 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1243 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 =Ô£ø
SPI_DATASIZE_16BIT
)

1245 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_SLAVE
√ã|| (
√∂√¥√ºl_TxX‚ÄûrCou¬°
 == 0x01U))

1247 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = *((
u√∂t16_t
 *)h‚Ä¢i->
pTxBuffP√•
);

1248 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t16_t
);

1249 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

1251 (
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 > 0U√ã|| (h‚Ä¢i->
RxX‚ÄûrCou¬°
 > 0U))

1254 i‚Ä°((
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_TXE
)√ã&& (h‚Ä¢i->
TxX‚ÄûrCou¬°
 > 0U√ã&& (
tx√Ülowed
 == 1U))

1256 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = *((
u√∂t16_t
 *)h‚Ä¢i->
pTxBuffP√•
);

1257 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t16_t
);

1258 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

1260 
tx√Ülowed
 = 0U;

1262 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1264 i‚Ä°((
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 =Ô£ø0U√ã&& (h‚Ä¢i->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
))

1266 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

1272 i‚Ä°((
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
)√ã&& (h‚Ä¢i->
RxX‚ÄûrCou¬°
 > 0U))

1274 *((
u√∂t16_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø(u√∂t16_t)h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
;

1275 
h‚Ä¢i
->
pRxBuffP√•
 +Ô£ø(
u√∂t16_t
);

1276 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

1278 
tx√Ülowed
 = 1U;

1280 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
√ã&& (Timeou√†!Ô£ø
HAL_MAX_DELAY
))

1282 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1283 
√Ær‚Äπ
;

1290 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_SLAVE
√ã|| (
√∂√¥√ºl_TxX‚ÄûrCou¬°
 == 0x01U))

1292 *((
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
√ãÔ£ø(*h‚Ä¢i->
pTxBuffP√•
);

1293 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t8_t
);

1294 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

1296 (
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 > 0U√ã|| (h‚Ä¢i->
RxX‚ÄûrCou¬°
 > 0U))

1299 i‚Ä°((
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_TXE
)√ã&& (h‚Ä¢i->
TxX‚ÄûrCou¬°
 > 0U√ã&& (
tx√Ülowed
 == 1U))

1301 *(
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = (*h‚Ä¢i->
pTxBuffP√•
);

1302 
h‚Ä¢i
->
pTxBuffP√•
++;

1303 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

1305 
tx√Ülowed
 = 0U;

1307 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1309 i‚Ä°((
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 =Ô£ø0U√ã&& (h‚Ä¢i->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
))

1311 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

1317 i‚Ä°((
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
)√ã&& (h‚Ä¢i->
RxX‚ÄûrCou¬°
 > 0U))

1319 (*(
u√∂t8_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£øh‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
;

1320 
h‚Ä¢i
->
pRxBuffP√•
++;

1321 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

1323 
tx√Ülowed
 = 1U;

1325 i‚Ä°((((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã>Ô£ø
Timeout
√ã&& ((Timeou√†!Ô£ø
HAL_MAX_DELAY
))) || (Timeout == 0U))

1327 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1328 
√Ær‚Äπ
;

1333 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1335 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1338 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
, 
SET
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1341 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

1342 
√Ær‚Äπcode
 = 
HAL_TIMEOUT
;

1343 
√Ær‚Äπ
;

1346 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

1350 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_CRCERR
√ã!Ô£ø
RESET
)

1353 i‚Ä°(
	`SPI_ISCRCE¬∫‚ÄπV√Üid
(
h‚Ä¢i
√ã=Ô£ø
SPI_VALID_CRC_ERROR
)

1355 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

1358 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1360 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1364 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h‚Ä¢i
);

1370 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
Timeout
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

1372 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1373 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_FLAG
;

1374 
√Ær‚Äπ
;

1378 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
)

1380 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

1383 
√Ær‚Äπ
 :

1384 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

1385 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1386  
√Ær‚Äπcode
;

1387 
	}
}

1397 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_T√∏nsm√¥_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1399 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1402 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

1405 
	`__HAL_LOCK
(
h‚Ä¢i
);

1407 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1409 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1410 
√Ær‚Äπ
;

1413 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_READY
)

1415 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1416 
√Ær‚Äπ
;

1420 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_TX
;

1421 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1422 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
pD¬©a
;

1423 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 
Size
;

1424 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 
Size
;

1427 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
NULL
;

1428 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 0U;

1429 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

1430 
h‚Ä¢i
->
RxISR
 = 
NULL
;

1433 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 > 
SPI_DATASIZE_8BIT
)

1435 
h‚Ä¢i
->
TxISR
 = 
SPI_TxISR_16BIT
;

1439 
h‚Ä¢i
->
TxISR
 = 
SPI_TxISR_8BIT
;

1443 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

1446 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

1447 
	`SPI_1LINE_TX
(
h‚Ä¢i
);

1450 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1452 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1454 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1459 
	`__HAL_SPI_ENABLE_IT
(
h‚Ä¢i
, (
SPI_IT_TXE
 | 
SPI_IT_ERR
));

1463 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1466 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1469 
√Ær‚Äπ
 :

1470 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1471  
√Ær‚Äπcode
;

1472 
	}
}

1482 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_ReÀöive_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1484 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1486 i‚Ä°((
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
√ã&& (h‚Ä¢i->In√¥.
Mode
 =Ô£ø
SPI_MODE_MASTER
))

1488 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_RX
;

1490  
	`HAL_SPI_T√∏nsm√¥ReÀöive_IT
(
h‚Ä¢i
, 
pD¬©a
,√ñD¬©a, 
Size
);

1494 
	`__HAL_LOCK
(
h‚Ä¢i
);

1496 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_READY
)

1498 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1499 
√Ær‚Äπ
;

1502 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1504 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1505 
√Ær‚Äπ
;

1509 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_RX
;

1510 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1511 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
pD¬©a
;

1512 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 
Size
;

1513 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 
Size
;

1516 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
NULL
;

1517 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 0U;

1518 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

1519 
h‚Ä¢i
->
TxISR
 = 
NULL
;

1522 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 > 
SPI_DATASIZE_8BIT
)

1524 
h‚Ä¢i
->
RxISR
 = 
SPI_RxISR_16BIT
;

1528 
h‚Ä¢i
->
RxISR
 = 
SPI_RxISR_8BIT
;

1532 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

1535 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

1536 
	`SPI_1LINE_RX
(
h‚Ä¢i
);

1539 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1541 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1543 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1548 
	`__HAL_SPI_ENABLE_IT
(
h‚Ä¢i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1555 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1558 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1561 
√Ær‚Äπ
 :

1563 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1564  
√Ær‚Äπcode
;

1565 
	}
}

1576 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_T√∏nsm√¥ReÀöive_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
)

1578 
u√∂t32_t
 
tmp_mode
;

1579 
HAL_SPI_S√®√£Ty‚â•Def
 
tmp_¬∞¬©e
;

1580 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1583 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION_2LINES
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

1586 
	`__HAL_LOCK
(
h‚Ä¢i
);

1589 
tmp_¬∞¬©e
 = 
h‚Ä¢i
->
S√®√£
;

1590 
tmp_mode
 = 
h‚Ä¢i
->
In√¥
.
Mode
;

1592 i‚Ä°(!((
tmp_¬∞¬©e
 =Ô£ø
HAL_SPI_STATE_READY
) || \

1593 ((
tmp_mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& (
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
√ã&& (
tmp_¬∞¬©e
 =Ô£ø
HAL_SPI_STATE_BUSY_RX
))))

1595 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1596 
√Ær‚Äπ
;

1599 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
pRxD¬©a
 =Ô£øNULL√ã|| (
Size
 == 0U))

1601 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1602 
√Ær‚Äπ
;

1606 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_BUSY_RX
)

1608 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1612 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1613 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
pTxD¬©a
;

1614 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 
Size
;

1615 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 
Size
;

1616 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
pRxD¬©a
;

1617 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 
Size
;

1618 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 
Size
;

1621 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D¬©aSize
 > 
SPI_DATASIZE_8BIT
)

1623 
h‚Ä¢i
->
RxISR
 = 
SPI_2l√∂esRxISR_16BIT
;

1624 
h‚Ä¢i
->
TxISR
 = 
SPI_2l√∂esTxISR_16BIT
;

1628 
h‚Ä¢i
->
RxISR
 = 
SPI_2l√∂esRxISR_8BIT
;

1629 
h‚Ä¢i
->
TxISR
 = 
SPI_2l√∂esTxISR_8BIT
;

1632 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1634 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1636 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1641 
	`__HAL_SPI_ENABLE_IT
(
h‚Ä¢i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1644 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1647 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1650 
√Ær‚Äπ
 :

1652 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1653  
√Ær‚Äπcode
;

1654 
	}
}

1664 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_T√∏nsm√¥_DMA
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1666 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1669 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DMA_HANDLE
(
h‚Ä¢i
->
hdm¬©x
));

1672 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

1675 
	`__HAL_LOCK
(
h‚Ä¢i
);

1677 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_READY
)

1679 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1680 
√Ær‚Äπ
;

1683 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1685 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1686 
√Ær‚Äπ
;

1690 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_TX
;

1691 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1692 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
pD¬©a
;

1693 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 
Size
;

1694 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 
Size
;

1697 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
NULL
;

1698 
h‚Ä¢i
->
TxISR
 = 
NULL
;

1699 
h‚Ä¢i
->
RxISR
 = 
NULL
;

1700 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 0U;

1701 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

1704 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

1707 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

1708 
	`SPI_1LINE_TX
(
h‚Ä¢i
);

1711 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1713 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1715 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1720 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
SPI_DMAH√ÜfT√∏nsm√¥C‚àÇt
;

1723 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SPI_DMAT√∏nsm√¥C‚àÇt
;

1726 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SPI_DMAE¬∫‚Äπ
;

1729 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1732 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_S√®œÄ_IT
(
h‚Ä¢i
->
hdm¬©x
, (
u√∂t32_t
)h‚Ä¢i->
pTxBuffP√•
, (u√∂t32_t)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
,

1733 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
))

1736 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

1737 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1739 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

1740 
√Ær‚Äπ
;

1744 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1747 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1751 
	`__HAL_SPI_ENABLE_IT
(
h‚Ä¢i
, (
SPI_IT_ERR
));

1754 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

1756 
√Ær‚Äπ
 :

1758 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1759  
√Ær‚Äπcode
;

1760 
	}
}

1772 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_ReÀöive_DMA
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1774 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1777 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DMA_HANDLE
(
h‚Ä¢i
->
hdm¬®x
));

1779 i‚Ä°((
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
√ã&& (h‚Ä¢i->In√¥.
Mode
 =Ô£ø
SPI_MODE_MASTER
))

1781 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_RX
;

1784 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DMA_HANDLE
(
h‚Ä¢i
->
hdm¬©x
));

1787  
	`HAL_SPI_T√∏nsm√¥ReÀöive_DMA
(
h‚Ä¢i
, 
pD¬©a
,√ñD¬©a, 
Size
);

1791 
	`__HAL_LOCK
(
h‚Ä¢i
);

1793 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_READY
)

1795 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1796 
√Ær‚Äπ
;

1799 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1801 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1802 
√Ær‚Äπ
;

1806 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_RX
;

1807 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1808 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
pD¬©a
;

1809 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 
Size
;

1810 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 
Size
;

1813 
h‚Ä¢i
->
RxISR
 = 
NULL
;

1814 
h‚Ä¢i
->
TxISR
 = 
NULL
;

1815 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 0U;

1816 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

1819 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

1822 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

1823 
	`SPI_1LINE_RX
(
h‚Ä¢i
);

1826 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1828 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1830 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1835 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
SPI_DMAH√ÜfReÀöiveC‚àÇt
;

1838 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SPI_DMAReÀöiveC‚àÇt
;

1841 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SPI_DMAE¬∫‚Äπ
;

1844 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1847 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_S√®œÄ_IT
(
h‚Ä¢i
->
hdm¬®x
, (
u√∂t32_t
)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)h‚Ä¢i->
pRxBuffP√•
,

1848 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
))

1851 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

1852 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1854 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

1855 
√Ær‚Äπ
;

1859 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

1862 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

1866 
	`__HAL_SPI_ENABLE_IT
(
h‚Ä¢i
, (
SPI_IT_ERR
));

1869 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1871 
√Ær‚Äπ
:

1873 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

1874  
√Ær‚Äπcode
;

1875 
	}
}

1887 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_T√∏nsm√¥ReÀöive_DMA
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
,

1888 
u√∂t16_t
 
Size
)

1890 
u√∂t32_t
 
tmp_mode
;

1891 
HAL_SPI_S√®√£Ty‚â•Def
 
tmp_¬∞¬©e
;

1892 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

1895 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DMA_HANDLE
(
h‚Ä¢i
->
hdm¬®x
));

1896 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DMA_HANDLE
(
h‚Ä¢i
->
hdm¬©x
));

1899 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_DIRECTION_2LINES
(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
));

1902 
	`__HAL_LOCK
(
h‚Ä¢i
);

1905 
tmp_¬∞¬©e
 = 
h‚Ä¢i
->
S√®√£
;

1906 
tmp_mode
 = 
h‚Ä¢i
->
In√¥
.
Mode
;

1908 i‚Ä°(!((
tmp_¬∞¬©e
 =Ô£ø
HAL_SPI_STATE_READY
) ||

1909 ((
tmp_mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& (
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
√ã&& (
tmp_¬∞¬©e
 =Ô£ø
HAL_SPI_STATE_BUSY_RX
))))

1911 
√Ær‚Äπcode
 = 
HAL_BUSY
;

1912 
√Ær‚Äπ
;

1915 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
pRxD¬©a
 =Ô£øNULL√ã|| (
Size
 == 0U))

1917 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1918 
√Ær‚Äπ
;

1922 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_BUSY_RX
)

1924 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1928 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

1929 
h‚Ä¢i
->
pTxBuffP√•
 = (
u√∂t8_t
 *)
pTxD¬©a
;

1930 
h‚Ä¢i
->
TxX‚ÄûrSize
 = 
Size
;

1931 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 
Size
;

1932 
h‚Ä¢i
->
pRxBuffP√•
 = (
u√∂t8_t
 *)
pRxD¬©a
;

1933 
h‚Ä¢i
->
RxX‚ÄûrSize
 = 
Size
;

1934 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 
Size
;

1937 
h‚Ä¢i
->
RxISR
 = 
NULL
;

1938 
h‚Ä¢i
->
TxISR
 = 
NULL
;

1940 #i‚Ä°(
USE_SPI_CRC
 != 0U)

1942 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

1944 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

1949 i‚Ä°(
h‚Ä¢i
->
S√®√£
 =Ô£ø
HAL_SPI_STATE_BUSY_RX
)

1952 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
SPI_DMAH√ÜfReÀöiveC‚àÇt
;

1953 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SPI_DMAReÀöiveC‚àÇt
;

1958 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
SPI_DMAH√ÜfT√∏nsm√¥ReÀöiveC‚àÇt
;

1959 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SPI_DMAT√∏nsm√¥ReÀöiveC‚àÇt
;

1963 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SPI_DMAE¬∫‚Äπ
;

1966 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1969 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_S√®œÄ_IT
(
h‚Ä¢i
->
hdm¬®x
, (
u√∂t32_t
)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
, (u√∂t32_t)h‚Ä¢i->
pRxBuffP√•
,

1970 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
))

1973 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

1974 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1976 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

1977 
√Ær‚Äπ
;

1981 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

1985 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

1986 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

1987 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
NULL
;

1988 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1991 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_S√®œÄ_IT
(
h‚Ä¢i
->
hdm¬©x
, (
u√∂t32_t
)h‚Ä¢i->
pTxBuffP√•
, (u√∂t32_t)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
,

1992 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
))

1995 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

1996 
√Ær‚Äπcode
 = 
HAL_ERROR
;

1998 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

1999 
√Ær‚Äπ
;

2003 i‚Ä°((
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
 & 
SPI_CR1_SPE
) != SPI_CR1_SPE)

2006 
	`__HAL_SPI_ENABLE
(
h‚Ä¢i
);

2009 
	`__HAL_SPI_ENABLE_IT
(
h‚Ä¢i
, (
SPI_IT_ERR
));

2012 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

2014 
√Ær‚Äπ
 :

2016 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

2017  
√Ær‚Äπcode
;

2018 
	}
}

2033 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_Ab‚Äπt
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2035 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
;

2036 
__IO
 
u√∂t32_t
 
cou¬°
;

2037 
__IO
 
u√∂t32_t
 
¬™¬£tcou¬°
;

2040 
√Ær‚Äπcode
 = 
HAL_OK
;

2041 
¬™¬£tcou¬°
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 24U / 1000U);

2042 
cou¬°
 = 
¬™¬£tcou¬°
;

2045 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_ERRIE
);

2048 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXEIE
))

2050 
h‚Ä¢i
->
TxISR
 = 
SPI_Ab‚ÄπtTx_ISR
;

2054 i‚Ä°(
cou¬°
 == 0U)

2056 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2059 
cou¬°
--;

2060 } 
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_ABORT
);

2062 
cou¬°
 = 
¬™¬£tcou¬°
;

2065 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXNEIE
))

2067 
h‚Ä¢i
->
RxISR
 = 
SPI_Ab‚ÄπtRx_ISR
;

2071 i‚Ä°(
cou¬°
 == 0U)

2073 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2076 
cou¬°
--;

2077 } 
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_ABORT
);

2079 
cou¬°
 = 
¬™¬£tcou¬°
;

2083 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
))

2086 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
 !Ô£ø
NULL
)

2090 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2093 i‚Ä°(
	`HAL_DMA_Ab‚Äπt
(
h‚Ä¢i
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

2095 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_ABORT
;

2099 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, (
SPI_CR2_TXDMAEN
));

2104 i‚Ä°(
cou¬°
 == 0U)

2106 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2109 
cou¬°
--;

2110 } (
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
SR
 & 
SPI_FLAG_TXE
√ã=Ô£ø
RESET
);

2115 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
))

2118 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
 !Ô£ø
NULL
)

2122 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2125 i‚Ä°(
	`HAL_DMA_Ab‚Äπt
(
h‚Ä¢i
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2127 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_ABORT
;

2131 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

2134 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, (
SPI_CR2_RXDMAEN
));

2138 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

2139 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

2142 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_SPI_ERROR_ABORT
)

2145 
√Ær‚Äπcode
 = 
HAL_ERROR
;

2150 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

2154 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

2157 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2159  
√Ær‚Äπcode
;

2160 
	}
}

2177 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_Ab‚Äπt_IT
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2179 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
;

2180 
u√∂t32_t
 
ab‚ÄπtÀù‚Ä¶
 ;

2181 
__IO
 
u√∂t32_t
 
cou¬°
;

2182 
__IO
 
u√∂t32_t
 
¬™¬£tcou¬°
;

2185 
√Ær‚Äπcode
 = 
HAL_OK
;

2186 
ab‚ÄπtÀù‚Ä¶
 = 1U;

2187 
¬™¬£tcou¬°
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 24U / 1000U);

2188 
cou¬°
 = 
¬™¬£tcou¬°
;

2191 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_ERRIE
);

2194 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXEIE
))

2196 
h‚Ä¢i
->
TxISR
 = 
SPI_Ab‚ÄπtTx_ISR
;

2200 i‚Ä°(
cou¬°
 == 0U)

2202 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2205 
cou¬°
--;

2206 } 
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_ABORT
);

2208 
cou¬°
 = 
¬™¬£tcou¬°
;

2211 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXNEIE
))

2213 
h‚Ä¢i
->
RxISR
 = 
SPI_Ab‚ÄπtRx_ISR
;

2217 i‚Ä°(
cou¬°
 == 0U)

2219 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2222 
cou¬°
--;

2223 } 
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_ABORT
);

2225 
cou¬°
 = 
¬™¬£tcou¬°
;

2231 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
 !Ô£ø
NULL
)

2235 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
))

2237 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SPI_DMATxAb‚ÄπtC√Ülback
;

2241 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2245 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
 !Ô£ø
NULL
)

2249 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
))

2251 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SPI_DMARxAb‚ÄπtC√Ülback
;

2255 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2260 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
))

2263 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
 !Ô£ø
NULL
)

2266 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h‚Ä¢i
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

2268 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2269 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_ABORT
;

2273 
ab‚ÄπtÀù‚Ä¶
 = 0U;

2278 i‚Ä°(
	`HAL_IS_BIT_SET
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
))

2281 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
 !Ô£ø
NULL
)

2284 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
h‚Ä¢i
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2286 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2287 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_ABORT
;

2291 
ab‚ÄπtÀù‚Ä¶
 = 0U;

2296 i‚Ä°(
ab‚ÄπtÀù‚Ä¶
 == 1U)

2299 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

2300 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

2303 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_SPI_ERROR_ABORT
)

2306 
√Ær‚Äπcode
 = 
HAL_ERROR
;

2311 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

2315 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

2318 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2321 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2322 
h‚Ä¢i
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hspi);

2324 
	`HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
(
h‚Ä¢i
);

2328  
√Ær‚Äπcode
;

2329 
	}
}

2337 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_DMAPau¬£
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2340 
	`__HAL_LOCK
(
h‚Ä¢i
);

2343 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2346 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

2348  
HAL_OK
;

2349 
	}
}

2357 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_DMAResume
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2360 
	`__HAL_LOCK
(
h‚Ä¢i
);

2363 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2366 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

2368  
HAL_OK
;

2369 
	}
}

2377 
HAL_S√®tusTy‚â•Def
 
	$HAL_SPI_DMASt‚Ä∫
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2379 
HAL_S√®tusTy‚â•Def
 
√Ær‚Äπcode
 = 
HAL_OK
;

2387 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
 !Ô£ø
NULL
)

2389 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_Ab‚Äπt
(
h‚Ä¢i
->
hdm¬©x
))

2391 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

2392 
√Ær‚Äπcode
 = 
HAL_ERROR
;

2396 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
 !Ô£ø
NULL
)

2398 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_Ab‚Äπt
(
h‚Ä¢i
->
hdm¬®x
))

2400 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

2401 
√Ær‚Äπcode
 = 
HAL_ERROR
;

2406 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2407 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2408  
√Ær‚Äπcode
;

2409 
	}
}

2417 
	$HAL_SPI_IRQH‚Ñ¢d√Är
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2419 
u√∂t32_t
 
√¥sourÀö
 = 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
;

2420 
u√∂t32_t
 
√¥√äag
 = 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
SR
;

2423 i‚Ä°((
	`SPI_CHECK_FLAG
(
√¥√äag
, 
SPI_FLAG_OVR
√ã=Ô£ø
RESET
) &&

2424 (
	`SPI_CHECK_FLAG
(
√¥√äag
, 
SPI_FLAG_RXNE
√ã!Ô£ø
RESET
√ã&& (
	`SPI_CHECK_IT_SOURCE
(
√¥sourÀö
, 
SPI_IT_RXNE
) != RESET))

2426 
h‚Ä¢i
->
	`RxISR
(hspi);

2431 i‚Ä°((
	`SPI_CHECK_FLAG
(
√¥√äag
, 
SPI_FLAG_TXE
√ã!Ô£ø
RESET
√ã&& (
	`SPI_CHECK_IT_SOURCE
(
√¥sourÀö
, 
SPI_IT_TXE
) != RESET))

2433 
h‚Ä¢i
->
	`TxISR
(hspi);

2438 i‚Ä°(((
	`SPI_CHECK_FLAG
(
√¥√äag
, 
SPI_FLAG_MODF
√ã!Ô£ø
RESET
√ã|| (SPI_CHECK_FLAG(√¥√äag, 
SPI_FLAG_OVR
) != RESET))

2439 && (
	`SPI_CHECK_IT_SOURCE
(
√¥sourÀö
, 
SPI_IT_ERR
√ã!Ô£ø
RESET
))

2442 i‚Ä°(
	`SPI_CHECK_FLAG
(
√¥√äag
, 
SPI_FLAG_OVR
√ã!Ô£ø
RESET
)

2444 i‚Ä°(
h‚Ä¢i
->
S√®√£
 !Ô£ø
HAL_SPI_STATE_BUSY_TX
)

2446 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_OVR
);

2447 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

2451 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

2457 i‚Ä°(
	`SPI_CHECK_FLAG
(
√¥√äag
, 
SPI_FLAG_MODF
√ã!Ô£ø
RESET
)

2459 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_MODF
);

2460 
	`__HAL_SPI_CLEAR_MODFFLAG
(
h‚Ä¢i
);

2465 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

2468 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_RXNE
 | 
SPI_IT_TXE
 | 
SPI_IT_ERR
);

2470 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2472 i‚Ä°((
	`HAL_IS_BIT_SET
(
√¥sourÀö
, 
SPI_CR2_TXDMAEN
)√ã|| (HAL_IS_BIT_SET(√¥sourÀö, 
SPI_CR2_RXDMAEN
)))

2474 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, (
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
));

2477 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
 !Ô£ø
NULL
)

2481 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SPI_DMAAb‚ÄπtOnE¬∫‚Äπ
;

2482 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_Ab‚Äπt_IT
(
h‚Ä¢i
->
hdm¬®x
))

2484 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2488 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
 !Ô£ø
NULL
)

2492 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
SPI_DMAAb‚ÄπtOnE¬∫‚Äπ
;

2493 i‚Ä°(
HAL_OK
 !Ô£ø
	`HAL_DMA_Ab‚Äπt_IT
(
h‚Ä¢i
->
hdm¬©x
))

2495 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

2502 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2503 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

2505 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

2511 
	}
}

2519 
__w√≥k
 
	$HAL_SPI_TxC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2522 
	`UNUSED
(
h‚Ä¢i
);

2527 
	}
}

2535 
__w√≥k
 
	$HAL_SPI_RxC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2538 
	`UNUSED
(
h‚Ä¢i
);

2543 
	}
}

2551 
__w√≥k
 
	$HAL_SPI_TxRxC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2554 
	`UNUSED
(
h‚Ä¢i
);

2559 
	}
}

2567 
__w√≥k
 
	$HAL_SPI_TxH√ÜfC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2570 
	`UNUSED
(
h‚Ä¢i
);

2575 
	}
}

2583 
__w√≥k
 
	$HAL_SPI_RxH√ÜfC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2586 
	`UNUSED
(
h‚Ä¢i
);

2591 
	}
}

2599 
__w√≥k
 
	$HAL_SPI_TxRxH√ÜfC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2602 
	`UNUSED
(
h‚Ä¢i
);

2607 
	}
}

2615 
__w√≥k
 
	$HAL_SPI_E¬∫‚ÄπC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2618 
	`UNUSED
(
h‚Ä¢i
);

2626 
	}
}

2633 
__w√≥k
 
	$HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2636 
	`UNUSED
(
h‚Ä¢i
);

2641 
	}
}

2668 
HAL_SPI_S√®√£Ty‚â•Def
 
	$HAL_SPI_G√´S√®√£
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2671  
h‚Ä¢i
->
S√®√£
;

2672 
	}
}

2680 
u√∂t32_t
 
	$HAL_SPI_G√´E¬∫‚Äπ
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

2683  
h‚Ä¢i
->
E¬∫‚ÄπCode
;

2684 
	}
}

2705 
	$SPI_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2707 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

2708 
u√∂t32_t
 
tick¬∞¬®t
;

2711 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2714 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) != DMA_CCR_CIRC)

2717 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_ERR
);

2720 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

2723 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2725 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

2729 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
)

2731 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

2734 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

2735 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2737 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

2740 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2741 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

2743 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

2749 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2750 
h‚Ä¢i
->
	`TxC‚àÇtC√Ülback
(hspi);

2752 
	`HAL_SPI_TxC‚àÇtC√Ülback
(
h‚Ä¢i
);

2754 
	}
}

2762 
	$SPI_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2764 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

2765 
u√∂t32_t
 
tick¬∞¬®t
;

2768 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2771 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) != DMA_CCR_CIRC)

2774 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_ERR
);

2776 #i‚Ä°(
USE_SPI_CRC
 != 0U)

2778 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

2781 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2784 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

2787 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

2792 i‚Ä°((
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
√ã&& (h‚Ä¢i->In√¥.
Mode
 =Ô£ø
SPI_MODE_MASTER
))

2795 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2800 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

2804 i‚Ä°(
	`SPI_EndRxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2806 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_FLAG
;

2809 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

2810 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2812 #i‚Ä°(
USE_SPI_CRC
 != 0U)

2814 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_CRCERR
√ã!Ô£ø
RESET
)

2817 i‚Ä°(
	`SPI_ISCRCE¬∫‚ÄπV√Üid
(
h‚Ä¢i
√ã=Ô£ø
SPI_VALID_CRC_ERROR
)

2819 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

2822 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

2826 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h‚Ä¢i
);

2831 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

2834 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2835 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

2837 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

2843 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2844 
h‚Ä¢i
->
	`RxC‚àÇtC√Ülback
(hspi);

2846 
	`HAL_SPI_RxC‚àÇtC√Ülback
(
h‚Ä¢i
);

2848 
	}
}

2856 
	$SPI_DMAT√∏nsm√¥ReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2858 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

2859 
u√∂t32_t
 
tick¬∞¬®t
;

2862 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

2865 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) != DMA_CCR_CIRC)

2868 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_ERR
);

2870 #i‚Ä°(
USE_SPI_CRC
 != 0U)

2872 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

2875 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2877 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

2880 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

2885 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

2887 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

2891 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

2893 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

2894 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

2895 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

2897 #i‚Ä°(
USE_SPI_CRC
 != 0U)

2899 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_CRCERR
√ã!Ô£ø
RESET
)

2902 i‚Ä°(
	`SPI_ISCRCE¬∫‚ÄπV√Üid
(
h‚Ä¢i
√ã=Ô£ø
SPI_VALID_CRC_ERROR
)

2904 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

2907 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

2911 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h‚Ä¢i
);

2916 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

2919 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2920 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

2922 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

2928 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2929 
h‚Ä¢i
->
	`TxRxC‚àÇtC√Ülback
(hspi);

2931 
	`HAL_SPI_TxRxC‚àÇtC√Ülback
(
h‚Ä¢i
);

2933 
	}
}

2941 
	$SPI_DMAH√ÜfT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2943 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

2946 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2947 
h‚Ä¢i
->
	`TxH√ÜfC‚àÇtC√Ülback
(hspi);

2949 
	`HAL_SPI_TxH√ÜfC‚àÇtC√Ülback
(
h‚Ä¢i
);

2951 
	}
}

2959 
	$SPI_DMAH√ÜfReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2961 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

2964 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2965 
h‚Ä¢i
->
	`RxH√ÜfC‚àÇtC√Ülback
(hspi);

2967 
	`HAL_SPI_RxH√ÜfC‚àÇtC√Ülback
(
h‚Ä¢i
);

2969 
	}
}

2977 
	$SPI_DMAH√ÜfT√∏nsm√¥ReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2979 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

2982 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

2983 
h‚Ä¢i
->
	`TxRxH√ÜfC‚àÇtC√Ülback
(hspi);

2985 
	`HAL_SPI_TxRxH√ÜfC‚àÇtC√Ülback
(
h‚Ä¢i
);

2987 
	}
}

2995 
	$SPI_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2997 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

3000 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
 | 
SPI_CR2_RXDMAEN
);

3002 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_DMA
);

3003 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3005 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3006 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3008 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3010 
	}
}

3018 
	$SPI_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

3020 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

3021 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

3022 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

3025 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3026 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3028 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3030 
	}
}

3040 
	$SPI_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

3042 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

3043 
__IO
 
u√∂t32_t
 
cou¬°
;

3045 
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

3046 
cou¬°
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 24U / 1000U);

3049 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_TXDMAEN
);

3054 i‚Ä°(
cou¬°
 == 0U)

3056 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

3059 
cou¬°
--;

3060 } (
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
SR
 & 
SPI_FLAG_TXE
√ã=Ô£ø
RESET
);

3063 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
 !Ô£ø
NULL
)

3065 i‚Ä°(
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

3072 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

3073 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

3076 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_ABORT
)

3079 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

3083 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

3086 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3089 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3090 
h‚Ä¢i
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hspi);

3092 
	`HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
(
h‚Ä¢i
);

3094 
	}
}

3104 
	$SPI_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

3106 
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
 = (SPI_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
);

3109 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

3111 
h‚Ä¢i
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

3114 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, 
SPI_CR2_RXDMAEN
);

3117 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
	`HAL_G√´Tick
()√ã!Ô£ø
HAL_OK
)

3119 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

3123 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
 !Ô£ø
NULL
)

3125 i‚Ä°(
h‚Ä¢i
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

3132 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 = 0U;

3133 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 = 0U;

3136 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_ABORT
)

3139 
h‚Ä¢i
->
E¬∫‚ÄπCode
 = 
HAL_SPI_ERROR_NONE
;

3143 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

3146 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3149 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3150 
h‚Ä¢i
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(hspi);

3152 
	`HAL_SPI_Ab‚ÄπtC‚àÇtC√Ülback
(
h‚Ä¢i
);

3154 
	}
}

3162 
	$SPI_2l√∂esRxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3165 *
h‚Ä¢i
->
pRxBuffP√•
 = *((
__IO
 
u√∂t8_t
 *)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
);

3166 
h‚Ä¢i
->
pRxBuffP√•
++;

3167 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

3170 i‚Ä°(
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 == 0U)

3172 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3173 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3175 
h‚Ä¢i
->
RxISR
 = 
SPI_2l√∂esRxISR_8BITCRC
;

3181 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3183 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3185 
	`SPI_Clo¬£RxTx_ISR
(
h‚Ä¢i
);

3188 
	}
}

3190 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3197 
	$SPI_2l√∂esRxISR_8BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3200 
	`READ_REG
(*(
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

3203 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3205 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3207 
	`SPI_Clo¬£RxTx_ISR
(
h‚Ä¢i
);

3209 
	}
}

3218 
	$SPI_2l√∂esTxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3220 *(
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = (*h‚Ä¢i->
pTxBuffP√•
);

3221 
h‚Ä¢i
->
pTxBuffP√•
++;

3222 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

3225 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3227 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3228 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3231 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3233 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_TXE
);

3239 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_TXE
);

3241 i‚Ä°(
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 == 0U)

3243 
	`SPI_Clo¬£RxTx_ISR
(
h‚Ä¢i
);

3246 
	}
}

3254 
	$SPI_2l√∂esRxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3257 *((
u√∂t16_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø(u√∂t16_t)(h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
);

3258 
h‚Ä¢i
->
pRxBuffP√•
 +Ô£ø(
u√∂t16_t
);

3259 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

3261 i‚Ä°(
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 == 0U)

3263 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3264 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3266 
h‚Ä¢i
->
RxISR
 = 
SPI_2l√∂esRxISR_16BITCRC
;

3272 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_RXNE
);

3274 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3276 
	`SPI_Clo¬£RxTx_ISR
(
h‚Ä¢i
);

3279 
	}
}

3281 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3288 
	$SPI_2l√∂esRxISR_16BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3291 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

3294 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_RXNE
);

3296 
	`SPI_Clo¬£RxTx_ISR
(
h‚Ä¢i
);

3297 
	}
}

3306 
	$SPI_2l√∂esTxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3309 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = *((
u√∂t16_t
 *)h‚Ä¢i->
pTxBuffP√•
);

3310 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t16_t
);

3311 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

3314 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3316 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3317 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3320 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3322 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_TXE
);

3328 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_TXE
);

3330 i‚Ä°(
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 == 0U)

3332 
	`SPI_Clo¬£RxTx_ISR
(
h‚Ä¢i
);

3335 
	}
}

3337 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3344 
	$SPI_RxISR_8BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3347 
	`READ_REG
(*(
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

3349 
	`SPI_Clo¬£Rx_ISR
(
h‚Ä¢i
);

3350 
	}
}

3359 
	$SPI_RxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3361 *
h‚Ä¢i
->
pRxBuffP√•
 = (*(
__IO
 
u√∂t8_t
 *)&h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
);

3362 
h‚Ä¢i
->
pRxBuffP√•
++;

3363 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

3365 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3367 i‚Ä°((
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 =Ô£ø1U√ã&& (h‚Ä¢i->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
))

3369 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3372 i‚Ä°(
	`READ_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
))

3375 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3380 i‚Ä°(
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 == 0U)

3382 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3383 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3385 
h‚Ä¢i
->
RxISR
 = 
SPI_RxISR_8BITCRC
;

3389 
	`SPI_Clo¬£Rx_ISR
(
h‚Ä¢i
);

3391 
	}
}

3393 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3400 
	$SPI_RxISR_16BITCRC
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3403 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

3406 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3408 
	`SPI_Clo¬£Rx_ISR
(
h‚Ä¢i
);

3409 
	}
}

3418 
	$SPI_RxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3420 *((
u√∂t16_t
 *)
h‚Ä¢i
->
pRxBuffP√•
√ãÔ£ø(u√∂t16_t)(h‚Ä¢i->
In¬∞‚Ñ¢Àö
->
DR
);

3421 
h‚Ä¢i
->
pRxBuffP√•
 +Ô£ø(
u√∂t16_t
);

3422 
h‚Ä¢i
->
RxX‚ÄûrCou¬°
--;

3424 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3426 i‚Ä°((
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 =Ô£ø1U√ã&& (h‚Ä¢i->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
))

3428 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3431 i‚Ä°(
	`READ_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
))

3434 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3439 i‚Ä°(
h‚Ä¢i
->
RxX‚ÄûrCou¬°
 == 0U)

3441 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3442 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3444 
h‚Ä¢i
->
RxISR
 = 
SPI_RxISR_16BITCRC
;

3448 
	`SPI_Clo¬£Rx_ISR
(
h‚Ä¢i
);

3450 
	}
}

3458 
	$SPI_TxISR_8BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3460 *(
__IO
 
u√∂t8_t
 *)&
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = (*h‚Ä¢i->
pTxBuffP√•
);

3461 
h‚Ä¢i
->
pTxBuffP√•
++;

3462 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

3464 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3466 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3467 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3470 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3473 
	`SPI_Clo¬£Tx_ISR
(
h‚Ä¢i
);

3475 
	}
}

3483 
	$SPI_TxISR_16BIT
(
__SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3486 
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
 = *((
u√∂t16_t
 *)h‚Ä¢i->
pTxBuffP√•
);

3487 
h‚Ä¢i
->
pTxBuffP√•
 +Ô£ø(
u√∂t16_t
);

3488 
h‚Ä¢i
->
TxX‚ÄûrCou¬°
--;

3490 i‚Ä°(
h‚Ä¢i
->
TxX‚ÄûrCou¬°
 == 0U)

3492 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3493 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3496 
	`SET_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR1
, 
SPI_CR1_CRCNEXT
);

3499 
	`SPI_Clo¬£Tx_ISR
(
h‚Ä¢i
);

3501 
	}
}

3513 
HAL_S√®tusTy‚â•Def
 
	$SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®√£
,

3514 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

3516 
__IO
 
u√∂t32_t
 
cou¬°
;

3517 
u√∂t32_t
 
tmp_timeout
;

3518 
u√∂t32_t
 
tmp_tick¬∞¬®t
;

3521 
tmp_timeout
 = 
Timeout
 - (
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
);

3522 
tmp_tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3525 
cou¬°
 = 
tmp_timeout
 * ((
Sy¬∞emC‚ÄπeClock
 * 32U) >> 20U);

3527 (
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
F≈ìg
√ã? 
SET
 : 
RESET
√ã!Ô£ø
S√®√£
)

3529 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

3531 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tmp_tick¬∞¬®t
√ã>Ô£ø
tmp_timeout
) || (tmp_timeout == 0U))

3538 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3540 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& ((h‚Ä¢i->In√¥.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

3541 || (
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES_RXONLY
)))

3544 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

3548 i‚Ä°(
h‚Ä¢i
->
In√¥
.
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
SPI_CRCCALCULATION_ENABLE
)

3550 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

3553 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3556 
	`__HAL_UNLOCK
(
h‚Ä¢i
);

3558  
HAL_TIMEOUT
;

3561 if(
cou¬°
 == 0U)

3563 
tmp_timeout
 = 0U;

3565 
cou¬°
--;

3569  
HAL_OK
;

3570 
	}
}

3580 
HAL_S√®tusTy‚â•Def
 
	$SPI_EndRxT√∏n√üÀòi‚ÅÑ
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

3582 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& ((h‚Ä¢i->In√¥.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_1LINE
)

3583 || (
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES_RXONLY
)))

3586 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

3589 i‚Ä°((
h‚Ä¢i
->
In√¥
.
Mode
 =Ô£ø
SPI_MODE_MASTER
√ã&& (h‚Ä¢i->In√¥.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES_RXONLY
))

3592 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3594 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3595  
HAL_TIMEOUT
;

3601 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_BSY
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3603 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3604  
HAL_TIMEOUT
;

3607  
HAL_OK
;

3608 
	}
}

3617 
HAL_S√®tusTy‚â•Def
 
	$SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
, 
u√∂t32_t
 
Timeout
, u√∂t32_√†
Tick¬∞¬®t
)

3620 i‚Ä°(
	`SPI_Wa√¥F≈ìgS√®√£U¬°√ªTimeout
(
h‚Ä¢i
, 
SPI_FLAG_BSY
, 
RESET
, 
Timeout
, 
Tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3622 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3623  
HAL_TIMEOUT
;

3625  
HAL_OK
;

3626 
	}
}

3634 
	$SPI_Clo¬£RxTx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3636 
u√∂t32_t
 
tick¬∞¬®t
;

3637 
__IO
 
u√∂t32_t
 
cou¬°
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 24U / 1000U);

3640 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3643 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, 
SPI_IT_ERR
);

3648 i‚Ä°(
cou¬°
 == 0U)

3650 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3653 
cou¬°
--;

3654 } (
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
SR
 & 
SPI_FLAG_TXE
√ã=Ô£ø
RESET
);

3657 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3659 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3663 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
)

3665 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

3668 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3670 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_CRCERR
√ã!Ô£ø
RESET
)

3673 i‚Ä°(
	`SPI_ISCRCE¬∫‚ÄπV√Üid
(
h‚Ä¢i
√ã=Ô£ø
SPI_VALID_CRC_ERROR
)

3675 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3676 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

3679 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

3682 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3683 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3685 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3690 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h‚Ä¢i
);

3696 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_SPI_ERROR_NONE
)

3698 i‚Ä°(
h‚Ä¢i
->
S√®√£
 =Ô£ø
HAL_SPI_STATE_BUSY_RX
)

3700 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3702 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3703 
h‚Ä¢i
->
	`RxC‚àÇtC√Ülback
(hspi);

3705 
	`HAL_SPI_RxC‚àÇtC√Ülback
(
h‚Ä¢i
);

3710 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3712 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3713 
h‚Ä¢i
->
	`TxRxC‚àÇtC√Ülback
(hspi);

3715 
	`HAL_SPI_TxRxC‚àÇtC√Ülback
(
h‚Ä¢i
);

3721 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3723 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3724 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3726 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3729 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3732 
	}
}

3740 
	$SPI_Clo¬£Rx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3743 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

3746 i‚Ä°(
	`SPI_EndRxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
	`HAL_G√´Tick
()√ã!Ô£ø
HAL_OK
)

3748 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3752 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
)

3754 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

3756 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3758 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3760 i‚Ä°(
	`__HAL_SPI_GET_FLAG
(
h‚Ä¢i
, 
SPI_FLAG_CRCERR
√ã!Ô£ø
RESET
)

3763 i‚Ä°(
	`SPI_ISCRCE¬∫‚ÄπV√Üid
(
h‚Ä¢i
√ã=Ô£ø
SPI_VALID_CRC_ERROR
)

3765 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_CRC
);

3768 
	`SPI_RESET_CRC
(
h‚Ä¢i
);

3771 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3772 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3774 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3779 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h‚Ä¢i
);

3785 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 =Ô£ø
HAL_SPI_ERROR_NONE
)

3788 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3789 
h‚Ä¢i
->
	`RxC‚àÇtC√Ülback
(hspi);

3791 
	`HAL_SPI_RxC‚àÇtC√Ülback
(
h‚Ä¢i
);

3797 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3798 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3800 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3803 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3806 
	}
}

3814 
	$SPI_Clo¬£Tx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3816 
u√∂t32_t
 
tick¬∞¬®t
;

3817 
__IO
 
u√∂t32_t
 
cou¬°
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 24U / 1000U);

3820 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

3825 i‚Ä°(
cou¬°
 == 0U)

3827 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3830 
cou¬°
--;

3831 } (
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
SR
 & 
SPI_FLAG_TXE
√ã=Ô£ø
RESET
);

3834 
	`__HAL_SPI_DISABLE_IT
(
h‚Ä¢i
, (
SPI_IT_TXE
 | 
SPI_IT_ERR
));

3837 i‚Ä°(
	`SPI_EndRxTxT√∏n√üÀòi‚ÅÑ
(
h‚Ä¢i
, 
SPI_DEFAULT_TIMEOUT
, 
tick¬∞¬®t
√ã!Ô£ø
HAL_OK
)

3839 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_FLAG
);

3843 i‚Ä°(
h‚Ä¢i
->
In√¥
.
D√∫eÀòi‚ÅÑ
 =Ô£ø
SPI_DIRECTION_2LINES
)

3845 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h‚Ä¢i
);

3848 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_READY
;

3849 i‚Ä°(
h‚Ä¢i
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_SPI_ERROR_NONE
)

3852 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3853 
h‚Ä¢i
->
	`E¬∫‚ÄπC√Ülback
(hspi);

3855 
	`HAL_SPI_E¬∫‚ÄπC√Ülback
(
h‚Ä¢i
);

3861 #i‚Ä°(
USE_HAL_SPI_REGISTER_CALLBACKS
 == 1U)

3862 
h‚Ä¢i
->
	`TxC‚àÇtC√Ülback
(hspi);

3864 
	`HAL_SPI_TxC‚àÇtC√Ülback
(
h‚Ä¢i
);

3867 
	}
}

3875 
	$SPI_Ab‚ÄπtRx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3877 
__IO
 
u√∂t32_t
 
cou¬°
 = 
SPI_DEFAULT_TIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 24U / 1000U);

3882 i‚Ä°(
cou¬°
 == 0U)

3884 
	`SET_BIT
(
h‚Ä¢i
->
E¬∫‚ÄπCode
, 
HAL_SPI_ERROR_ABORT
);

3887 
cou¬°
--;

3888 } (
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
SR
 & 
SPI_FLAG_TXE
√ã=Ô£ø
RESET
);

3891 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

3894 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, (
SPI_CR2_TXEIE
 | 
SPI_CR2_RXNEIE
 | 
SPI_CR2_ERRIE
));

3897 
	`READ_REG
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
DR
);

3899 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_ABORT
;

3900 
	}
}

3908 
	$SPI_Ab‚ÄπtTx_ISR
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3911 
	`CLEAR_BIT
(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
CR2
, (
SPI_CR2_TXEIE
));

3914 
	`__HAL_SPI_DISABLE
(
h‚Ä¢i
);

3916 
h‚Ä¢i
->
S√®√£
 = 
HAL_SPI_STATE_ABORT
;

3917 
	}
}

3919 #i‚Ä°(
USE_SPI_CRC
 != 0U)

3927 
u√∂t8_t
 
	$SPI_ISCRCE¬∫‚ÄπV√Üid
(
SPI_H‚Ñ¢d√ÄTy‚â•Def
 *
h‚Ä¢i
)

3929 #i‚Ä°
	`def√∂ed
(
SPI_CRC_ERROR_WORKAROUND_FEATURE
√ã&& (
USE_SPI_CRC_ERROR_WORKAROUND
 != 0U)

3932 i‚Ä°(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
 =Ô£ø
SPI2
)

3934 i‚Ä°(
h‚Ä¢i
->
In¬∞‚Ñ¢Àö
->
RXCRCR
 == 0U)

3936  (
SPI_INVALID_CRC_ERROR
);

3941 
	`UNUSED
(
h‚Ä¢i
);

3943  (
SPI_VALID_CRC_ERROR
);

3944 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_sram.c

116 
	~"¬∞m32f1xx_h√Ü.h
"

118 #i‚Ä°
def√∂ed
 
FSMC_BANK1


124 #ifde‚Ä°
HAL_SRAM_MODULE_ENABLED


139 
SRAM_DMAC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

140 
SRAM_DMAC‚àÇtPr≈∏
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

141 
SRAM_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

174 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_In√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
,

175 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
ExtTim√∂g
)

178 i‚Ä°((
h¬ßam
 =Ô£ø
NULL
√ã|| (h¬ßam->
In√¥
.
Bur¬∞AcÀössMode
 =Ô£ø
FSMC_BURST_ACCESS_MODE_ENABLE
))

180  
HAL_ERROR
;

183 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_RESET
)

186 
h¬ßam
->
Lock
 = 
HAL_UNLOCKED
;

188 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

189 i‚Ä°(
h¬ßam
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

191 
h¬ßam
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SRAM_M‚Ä¢In√¥
;

193 
h¬ßam
->
DmaX‚ÄûrC‚àÇtC√Ülback
 = 
HAL_SRAM_DMA_X‚ÄûrC‚àÇtC√Ülback
;

194 
h¬ßam
->
DmaX‚ÄûrE¬∫‚ÄπC√Ülback
 = 
HAL_SRAM_DMA_X‚ÄûrE¬∫‚ÄπC√Ülback
;

197 
h¬ßam
->
	`M‚Ä¢In√¥C√Ülback
(hsram);

200 
	`HAL_SRAM_M‚Ä¢In√¥
(
h¬ßam
);

205 ()
	`FSMC_NORSRAM_In√¥
(
h¬ßam
->
In¬∞‚Ñ¢Àö
, &(h¬ßam->
In√¥
));

208 ()
	`FSMC_NORSRAM_Tim√∂g_In√¥
(
h¬ßam
->
In¬∞‚Ñ¢Àö
, 
Tim√∂g
, h¬ßam->
In√¥
.
NSB‚Ñ¢k
);

211 ()
	`FSMC_NORSRAM_Ex√£nded_Tim√∂g_In√¥
(
h¬ßam
->
Ex√£nded
, 
ExtTim√∂g
, h¬ßam->
In√¥
.
NSB‚Ñ¢k
,

212 
h¬ßam
->
In√¥
.
Ex√£ndedMode
);

215 
	`__FSMC_NORSRAM_ENABLE
(
h¬ßam
->
In¬∞‚Ñ¢Àö
, h¬ßam->
In√¥
.
NSB‚Ñ¢k
);

218 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_READY
;

220  
HAL_OK
;

221 
	}
}

229 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_DeIn√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
)

231 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

232 i‚Ä°(
h¬ßam
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

234 
h¬ßam
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SRAM_M‚Ä¢DeIn√¥
;

238 
h¬ßam
->
	`M‚Ä¢DeIn√¥C√Ülback
(hsram);

241 
	`HAL_SRAM_M‚Ä¢DeIn√¥
(
h¬ßam
);

245 ()
	`FSMC_NORSRAM_DeIn√¥
(
h¬ßam
->
In¬∞‚Ñ¢Àö
, h¬ßam->
Ex√£nded
, h¬ßam->
In√¥
.
NSB‚Ñ¢k
);

248 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_RESET
;

251 
	`__HAL_UNLOCK
(
h¬ßam
);

253  
HAL_OK
;

254 
	}
}

262 
__w√≥k
 
	$HAL_SRAM_M‚Ä¢In√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
)

265 
	`UNUSED
(
h¬ßam
);

270 
	}
}

278 
__w√≥k
 
	$HAL_SRAM_M‚Ä¢DeIn√¥
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
)

281 
	`UNUSED
(
h¬ßam
);

286 
	}
}

294 
__w√≥k
 
	$HAL_SRAM_DMA_X‚ÄûrC‚àÇtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

297 
	`UNUSED
(
hdma
);

302 
	}
}

310 
__w√≥k
 
	$HAL_SRAM_DMA_X‚ÄûrE¬∫‚ÄπC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

313 
	`UNUSED
(
hdma
);

318 
	}
}

347 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_R√≥d_8b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pD¬∞Buf‚Äûr
,

348 
u√∂t32_t
 
Buf‚ÄûrSize
)

350 
u√∂t32_t
 
size
;

351 
__IO
 
u√∂t8_t
 *
p¬ßamadd¬™ss
 = (u√∂t8_√†*)
pAdd¬™ss
;

352 
u√∂t8_t
 *
pde¬∞buff
 = 
pD¬∞Buf‚Äûr
;

353 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

356 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

359 
	`__HAL_LOCK
(
h¬ßam
);

362 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

365 
size
 = 
Buf‚ÄûrSize
; size != 0U; size--)

367 *
pde¬∞buff
 = *
p¬ßamadd¬™ss
;

368 
pde¬∞buff
++;

369 
p¬ßamadd¬™ss
++;

373 
h¬ßam
->
S√®√£
 = 
¬∞¬©e
;

376 
	`__HAL_UNLOCK
(
h¬ßam
);

380  
HAL_ERROR
;

383  
HAL_OK
;

384 
	}
}

395 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Wr√¥e_8b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t8_t
 *
pSrcBuf‚Äûr
,

396 
u√∂t32_t
 
Buf‚ÄûrSize
)

398 
u√∂t32_t
 
size
;

399 
__IO
 
u√∂t8_t
 *
p¬ßamadd¬™ss
 = (u√∂t8_√†*)
pAdd¬™ss
;

400 
u√∂t8_t
 *
p¬ßcbuff
 = 
pSrcBuf‚Äûr
;

403 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_READY
)

406 
	`__HAL_LOCK
(
h¬ßam
);

409 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

412 
size
 = 
Buf‚ÄûrSize
; size != 0U; size--)

414 *
p¬ßamadd¬™ss
 = *
p¬ßcbuff
;

415 
p¬ßcbuff
++;

416 
p¬ßamadd¬™ss
++;

420 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_READY
;

423 
	`__HAL_UNLOCK
(
h¬ßam
);

427  
HAL_ERROR
;

430  
HAL_OK
;

431 
	}
}

442 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_R√≥d_16b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pD¬∞Buf‚Äûr
,

443 
u√∂t32_t
 
Buf‚ÄûrSize
)

445 
u√∂t32_t
 
size
;

446 
__IO
 
u√∂t32_t
 *
p¬ßamadd¬™ss
 = 
pAdd¬™ss
;

447 
u√∂t16_t
 *
pde¬∞buff
 = 
pD¬∞Buf‚Äûr
;

448 
u√∂t8_t
 
lim√¥
;

449 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

452 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

455 
	`__HAL_LOCK
(
h¬ßam
);

458 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

461 
lim√¥
 = (((
Buf‚ÄûrSize
 % 2U) != 0U) ? 1U : 0U);

464 
size
 = 
Buf‚ÄûrSize
; siz√™!Ô£ø
lim√¥
; size -= 2U)

466 *
pde¬∞buff
 = (
u√∂t16_t
)((*
p¬ßamadd¬™ss
) & 0x0000FFFFU);

467 
pde¬∞buff
++;

468 *
pde¬∞buff
 = (
u√∂t16_t
)(((*
p¬ßamadd¬™ss
) & 0xFFFF0000U) >> 16U);

469 
pde¬∞buff
++;

470 
p¬ßamadd¬™ss
++;

474 i‚Ä°(
lim√¥
 != 0U)

476 *
pde¬∞buff
 = (
u√∂t16_t
)((*
p¬ßamadd¬™ss
) & 0x0000FFFFU);

480 
h¬ßam
->
S√®√£
 = 
¬∞¬©e
;

483 
	`__HAL_UNLOCK
(
h¬ßam
);

487  
HAL_ERROR
;

490  
HAL_OK
;

491 
	}
}

502 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Wr√¥e_16b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, 
u√∂t16_t
 *
pSrcBuf‚Äûr
,

503 
u√∂t32_t
 
Buf‚ÄûrSize
)

505 
u√∂t32_t
 
size
;

506 
__IO
 
u√∂t32_t
 *
p¬ßamadd¬™ss
 = 
pAdd¬™ss
;

507 
u√∂t16_t
 *
p¬ßcbuff
 = 
pSrcBuf‚Äûr
;

508 
u√∂t8_t
 
lim√¥
;

511 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_READY
)

514 
	`__HAL_LOCK
(
h¬ßam
);

517 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

520 
lim√¥
 = (((
Buf‚ÄûrSize
 % 2U) != 0U) ? 1U : 0U);

523 
size
 = 
Buf‚ÄûrSize
; siz√™!Ô£ø
lim√¥
; size -= 2U)

525 *
p¬ßamadd¬™ss
 = (
u√∂t32_t
)(*
p¬ßcbuff
);

526 
p¬ßcbuff
++;

527 *
p¬ßamadd¬™ss
 |Ô£ø((
u√∂t32_t
)(*
p¬ßcbuff
) << 16U);

528 
p¬ßcbuff
++;

529 
p¬ßamadd¬™ss
++;

533 i‚Ä°(
lim√¥
 != 0U)

535 *
p¬ßamadd¬™ss
 = ((
u√∂t32_t
)(*
p¬ßcbuff
) & 0x0000FFFFU) | ((*psramaddress) & 0xFFFF0000U);

539 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_READY
;

542 
	`__HAL_UNLOCK
(
h¬ßam
);

546  
HAL_ERROR
;

549  
HAL_OK
;

550 
	}
}

561 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_R√≥d_32b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pD¬∞Buf‚Äûr
,

562 
u√∂t32_t
 
Buf‚ÄûrSize
)

564 
u√∂t32_t
 
size
;

565 
__IO
 
u√∂t32_t
 *
p¬ßamadd¬™ss
 = 
pAdd¬™ss
;

566 
u√∂t32_t
 *
pde¬∞buff
 = 
pD¬∞Buf‚Äûr
;

567 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

570 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

573 
	`__HAL_LOCK
(
h¬ßam
);

576 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

579 
size
 = 
Buf‚ÄûrSize
; size != 0U; size--)

581 *
pde¬∞buff
 = *
p¬ßamadd¬™ss
;

582 
pde¬∞buff
++;

583 
p¬ßamadd¬™ss
++;

587 
h¬ßam
->
S√®√£
 = 
¬∞¬©e
;

590 
	`__HAL_UNLOCK
(
h¬ßam
);

594  
HAL_ERROR
;

597  
HAL_OK
;

598 
	}
}

609 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Wr√¥e_32b
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pSrcBuf‚Äûr
,

610 
u√∂t32_t
 
Buf‚ÄûrSize
)

612 
u√∂t32_t
 
size
;

613 
__IO
 
u√∂t32_t
 *
p¬ßamadd¬™ss
 = 
pAdd¬™ss
;

614 
u√∂t32_t
 *
p¬ßcbuff
 = 
pSrcBuf‚Äûr
;

617 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_READY
)

620 
	`__HAL_LOCK
(
h¬ßam
);

623 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

626 
size
 = 
Buf‚ÄûrSize
; size != 0U; size--)

628 *
p¬ßamadd¬™ss
 = *
p¬ßcbuff
;

629 
p¬ßcbuff
++;

630 
p¬ßamadd¬™ss
++;

634 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_READY
;

637 
	`__HAL_UNLOCK
(
h¬ßam
);

641  
HAL_ERROR
;

644  
HAL_OK
;

645 
	}
}

656 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_R√≥d_DMA
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pD¬∞Buf‚Äûr
,

657 
u√∂t32_t
 
Buf‚ÄûrSize
)

659 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

660 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

663 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

666 
	`__HAL_LOCK
(
h¬ßam
);

669 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

672 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
)

674 
h¬ßam
->
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SRAM_DMAC‚àÇt
;

678 
h¬ßam
->
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SRAM_DMAC‚àÇtPr≈∏
;

680 
h¬ßam
->
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SRAM_DMAE¬∫‚Äπ
;

683 
¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
h¬ßam
->
hdma
, (
u√∂t32_t
)
pAdd¬™ss
, (u√∂t32_t)
pD¬∞Buf‚Äûr
, (u√∂t32_t)
Buf‚ÄûrSize
);

686 
	`__HAL_UNLOCK
(
h¬ßam
);

690 
¬∞¬©us
 = 
HAL_ERROR
;

693  
¬∞¬©us
;

694 
	}
}

705 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Wr√¥e_DMA
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
u√∂t32_t
 *
pAdd¬™ss
, u√∂t32_√†*
pSrcBuf‚Äûr
,

706 
u√∂t32_t
 
Buf‚ÄûrSize
)

708 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

711 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_READY
)

714 
	`__HAL_LOCK
(
h¬ßam
);

717 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

720 
h¬ßam
->
hdma
->
X‚ÄûrC‚àÇtC√Ülback
 = 
SRAM_DMAC‚àÇt
;

721 
h¬ßam
->
hdma
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
SRAM_DMAE¬∫‚Äπ
;

724 
¬∞¬©us
 = 
	`HAL_DMA_S√®œÄ_IT
(
h¬ßam
->
hdma
, (
u√∂t32_t
)
pSrcBuf‚Äûr
, (u√∂t32_t)
pAdd¬™ss
, (u√∂t32_t)
Buf‚ÄûrSize
);

727 
	`__HAL_UNLOCK
(
h¬ßam
);

731 
¬∞¬©us
 = 
HAL_ERROR
;

734  
¬∞¬©us
;

735 
	}
}

737 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

749 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Regi¬∞√ÆC√Ülback
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
HAL_SRAM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

750 
pSRAM_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

752 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

753 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
;

755 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

757  
HAL_ERROR
;

761 
	`__HAL_LOCK
(
h¬ßam
);

763 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

764 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_RESET
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

766 
C√ÜlbackId
)

768 
HAL_SRAM_MSP_INIT_CB_ID
 :

769 
h¬ßam
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

771 
HAL_SRAM_MSP_DEINIT_CB_ID
 :

772 
h¬ßam
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

776 
¬∞¬©us
 = 
HAL_ERROR
;

783 
¬∞¬©us
 = 
HAL_ERROR
;

787 
	`__HAL_UNLOCK
(
h¬ßam
);

788  
¬∞¬©us
;

789 
	}
}

803 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_UnRegi¬∞√ÆC√Ülback
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
HAL_SRAM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
)

805 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

806 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
;

809 
	`__HAL_LOCK
(
h¬ßam
);

811 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

812 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

814 
C√ÜlbackId
)

816 
HAL_SRAM_MSP_INIT_CB_ID
 :

817 
h¬ßam
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SRAM_M‚Ä¢In√¥
;

819 
HAL_SRAM_MSP_DEINIT_CB_ID
 :

820 
h¬ßam
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SRAM_M‚Ä¢DeIn√¥
;

822 
HAL_SRAM_DMA_XFER_CPLT_CB_ID
 :

823 
h¬ßam
->
DmaX‚ÄûrC‚àÇtC√Ülback
 = 
HAL_SRAM_DMA_X‚ÄûrC‚àÇtC√Ülback
;

825 
HAL_SRAM_DMA_XFER_ERR_CB_ID
 :

826 
h¬ßam
->
DmaX‚ÄûrE¬∫‚ÄπC√Ülback
 = 
HAL_SRAM_DMA_X‚ÄûrE¬∫‚ÄπC√Ülback
;

830 
¬∞¬©us
 = 
HAL_ERROR
;

834 i‚Ä°(
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_RESET
)

836 
C√ÜlbackId
)

838 
HAL_SRAM_MSP_INIT_CB_ID
 :

839 
h¬ßam
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_SRAM_M‚Ä¢In√¥
;

841 
HAL_SRAM_MSP_DEINIT_CB_ID
 :

842 
h¬ßam
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_SRAM_M‚Ä¢DeIn√¥
;

846 
¬∞¬©us
 = 
HAL_ERROR
;

853 
¬∞¬©us
 = 
HAL_ERROR
;

857 
	`__HAL_UNLOCK
(
h¬ßam
);

858  
¬∞¬©us
;

859 
	}
}

872 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Regi¬∞√ÆDmaC√Ülback
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
, 
HAL_SRAM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackId
,

873 
pSRAM_DmaC√ÜlbackTy‚â•Def
 
pC√Ülback
)

875 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

876 
HAL_SRAM_S√®√£Ty‚â•Def
 
¬∞¬©e
;

878 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

880  
HAL_ERROR
;

884 
	`__HAL_LOCK
(
h¬ßam
);

886 
¬∞¬©e
 = 
h¬ßam
->
S√®√£
;

887 i‚Ä°((
¬∞¬©e
 =Ô£ø
HAL_SRAM_STATE_READY
√ã|| (¬∞¬©√™=Ô£ø
HAL_SRAM_STATE_PROTECTED
))

889 
C√ÜlbackId
)

891 
HAL_SRAM_DMA_XFER_CPLT_CB_ID
 :

892 
h¬ßam
->
DmaX‚ÄûrC‚àÇtC√Ülback
 = 
pC√Ülback
;

894 
HAL_SRAM_DMA_XFER_ERR_CB_ID
 :

895 
h¬ßam
->
DmaX‚ÄûrE¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

899 
¬∞¬©us
 = 
HAL_ERROR
;

906 
¬∞¬©us
 = 
HAL_ERROR
;

910 
	`__HAL_UNLOCK
(
h¬ßam
);

911  
¬∞¬©us
;

912 
	}
}

940 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
)

943 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_PROTECTED
)

946 
	`__HAL_LOCK
(
h¬ßam
);

949 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

952 ()
	`FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
h¬ßam
->
In¬∞‚Ñ¢Àö
, h¬ßam->
In√¥
.
NSB‚Ñ¢k
);

955 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_READY
;

958 
	`__HAL_UNLOCK
(
h¬ßam
);

962  
HAL_ERROR
;

965  
HAL_OK
;

966 
	}
}

974 
HAL_S√®tusTy‚â•Def
 
	$HAL_SRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
)

977 i‚Ä°(
h¬ßam
->
S√®√£
 =Ô£ø
HAL_SRAM_STATE_READY
)

980 
	`__HAL_LOCK
(
h¬ßam
);

983 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_BUSY
;

986 ()
	`FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
h¬ßam
->
In¬∞‚Ñ¢Àö
, h¬ßam->
In√¥
.
NSB‚Ñ¢k
);

989 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_PROTECTED
;

992 
	`__HAL_UNLOCK
(
h¬ßam
);

996  
HAL_ERROR
;

999  
HAL_OK
;

1000 
	}
}

1027 
HAL_SRAM_S√®√£Ty‚â•Def
 
	$HAL_SRAM_G√´S√®√£
(
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
)

1029  
h¬ßam
->
S√®√£
;

1030 
	}
}

1048 
	$SRAM_DMAC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1050 
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
 = (SRAM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(
hdma
->
P¬®√≠t
);

1053 
	`__HAL_DMA_DISABLE
(
hdma
);

1056 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_READY
;

1058 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

1059 
h¬ßam
->
	`DmaX‚ÄûrC‚àÇtC√Ülback
(
hdma
);

1061 
	`HAL_SRAM_DMA_X‚ÄûrC‚àÇtC√Ülback
(
hdma
);

1063 
	}
}

1070 
	$SRAM_DMAC‚àÇtPr≈∏
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1072 
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
 = (SRAM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(
hdma
->
P¬®√≠t
);

1075 
	`__HAL_DMA_DISABLE
(
hdma
);

1078 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_PROTECTED
;

1080 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

1081 
h¬ßam
->
	`DmaX‚ÄûrC‚àÇtC√Ülback
(
hdma
);

1083 
	`HAL_SRAM_DMA_X‚ÄûrC‚àÇtC√Ülback
(
hdma
);

1085 
	}
}

1092 
	$SRAM_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

1094 
SRAM_H‚Ñ¢d√ÄTy‚â•Def
 *
h¬ßam
 = (SRAM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)(
hdma
->
P¬®√≠t
);

1097 
	`__HAL_DMA_DISABLE
(
hdma
);

1100 
h¬ßam
->
S√®√£
 = 
HAL_SRAM_STATE_ERROR
;

1102 #i‚Ä°(
USE_HAL_SRAM_REGISTER_CALLBACKS
 == 1)

1103 
h¬ßam
->
	`DmaX‚ÄûrE¬∫‚ÄπC√Ülback
(
hdma
);

1105 
	`HAL_SRAM_DMA_X‚ÄûrE¬∫‚ÄπC√Ülback
(
hdma
);

1107 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim.c

186 
	~"¬∞m32f1xx_h√Ü.h
"

197 #ifde‚Ä°
HAL_TIM_MODULE_ENABLED


207 
TIM_OC1_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
);

208 
TIM_OC3_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
);

209 
TIM_OC4_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
);

210 
TIM_TI1_C‚ÅÑfigI‚âàutS√®ge
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICF√ª√£r
);

211 
TIM_TI2_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

212 
u√∂t32_t
 
TIM_ICF√ª√£r
);

213 
TIM_TI2_C‚ÅÑfigI‚âàutS√®ge
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICF√ª√£r
);

214 
TIM_TI3_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

215 
u√∂t32_t
 
TIM_ICF√ª√£r
);

216 
TIM_TI4_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

217 
u√∂t32_t
 
TIM_ICF√ª√£r
);

218 
TIM_ITRx_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
I‚âàutTrigg√ÆSourÀö
);

219 
TIM_DMAP√ÆiodE≈ìp¬£dC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

220 
TIM_DMAP√ÆiodE≈ìp¬£dH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

221 
TIM_DMAD√±ayPul¬£C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

222 
TIM_DMATrigg√ÆC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

223 
TIM_DMATrigg√ÆH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

224 
HAL_S√®tusTy‚â•Def
 
TIM_S≈ìveTim√Æ_S√´C‚ÅÑfig
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

225 
TIM_S≈ìveC‚ÅÑfigTy‚â•Def
 *
sS≈ìveC‚ÅÑfig
);

266 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

269 i‚Ä°(
htim
 =Ô£ø
NULL
)

271  
HAL_ERROR
;

275 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

276 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

277 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

278 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

280 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

283 
htim
->
Lock
 = 
HAL_UNLOCKED
;

285 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

287 
	`TIM_Re¬£tC√Ülback
(
htim
);

289 i‚Ä°(
htim
->
Ba¬£_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

291 
htim
->
Ba¬£_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_Ba¬£_M‚Ä¢In√¥
;

294 
htim
->
	`Ba¬£_M‚Ä¢In√¥C√Ülback
(htim);

297 
	`HAL_TIM_Ba¬£_M‚Ä¢In√¥
(
htim
);

302 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

305 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

308 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

311 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

312 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

315 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

317  
HAL_OK
;

318 
	}
}

325 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

328 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

330 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

333 
	`__HAL_TIM_DISABLE
(
htim
);

335 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

336 i‚Ä°(
htim
->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

338 
htim
->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_Ba¬£_M‚Ä¢DeIn√¥
;

341 
htim
->
	`Ba¬£_M‚Ä¢DeIn√¥C√Ülback
(htim);

344 
	`HAL_TIM_Ba¬£_M‚Ä¢DeIn√¥
(
htim
);

348 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

351 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

352 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

355 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

358 
	`__HAL_UNLOCK
(
htim
);

360  
HAL_OK
;

361 
	}
}

368 
__w√≥k
 
	$HAL_TIM_Ba¬£_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

371 
	`UNUSED
(
htim
);

376 
	}
}

383 
__w√≥k
 
	$HAL_TIM_Ba¬£_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

386 
	`UNUSED
(
htim
);

391 
	}
}

399 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

401 
u√∂t32_t
 
tmpsm¬∏
;

404 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

407 i‚Ä°(
htim
->
S√®√£
 !Ô£ø
HAL_TIM_STATE_READY
)

409  
HAL_ERROR
;

413 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

416 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

418 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

419 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

421 
	`__HAL_TIM_ENABLE
(
htim
);

426 
	`__HAL_TIM_ENABLE
(
htim
);

430  
HAL_OK
;

431 
	}
}

438 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

441 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

444 
	`__HAL_TIM_DISABLE
(
htim
);

447 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

450  
HAL_OK
;

451 
	}
}

458 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

460 
u√∂t32_t
 
tmpsm¬∏
;

463 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

466 i‚Ä°(
htim
->
S√®√£
 !Ô£ø
HAL_TIM_STATE_READY
)

468  
HAL_ERROR
;

472 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

475 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

478 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

480 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

481 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

483 
	`__HAL_TIM_ENABLE
(
htim
);

488 
	`__HAL_TIM_ENABLE
(
htim
);

492  
HAL_OK
;

493 
	}
}

500 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

503 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

506 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

509 
	`__HAL_TIM_DISABLE
(
htim
);

512 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

515  
HAL_OK
;

516 
	}
}

525 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 *
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

527 
u√∂t32_t
 
tmpsm¬∏
;

530 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

533 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_BUSY
)

535  
HAL_BUSY
;

537 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_READY
)

539 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

541  
HAL_ERROR
;

545 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

550  
HAL_ERROR
;

554 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAP√ÆiodE≈ìp¬£dC‚àÇt
;

555 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAP√ÆiodE≈ìp¬£dH√ÜfC‚àÇt
;

558 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

561 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
ARR
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

564  
HAL_ERROR
;

568 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

571 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

573 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

574 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

576 
	`__HAL_TIM_ENABLE
(
htim
);

581 
	`__HAL_TIM_ENABLE
(
htim
);

585  
HAL_OK
;

586 
	}
}

593 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Ba¬£_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

596 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

599 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

601 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

604 
	`__HAL_TIM_DISABLE
(
htim
);

607 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

610  
HAL_OK
;

611 
	}
}

648 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

651 i‚Ä°(
htim
 =Ô£ø
NULL
)

653  
HAL_ERROR
;

657 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

658 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

659 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

660 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

662 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

665 
htim
->
Lock
 = 
HAL_UNLOCKED
;

667 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

669 
	`TIM_Re¬£tC√Ülback
(
htim
);

671 i‚Ä°(
htim
->
OC_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

673 
htim
->
OC_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_OC_M‚Ä¢In√¥
;

676 
htim
->
	`OC_M‚Ä¢In√¥C√Ülback
(htim);

679 
	`HAL_TIM_OC_M‚Ä¢In√¥
(
htim
);

684 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

687 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

690 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

693 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

694 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

697 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

699  
HAL_OK
;

700 
	}
}

707 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

710 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

712 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

715 
	`__HAL_TIM_DISABLE
(
htim
);

717 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

718 i‚Ä°(
htim
->
OC_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

720 
htim
->
OC_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_OC_M‚Ä¢DeIn√¥
;

723 
htim
->
	`OC_M‚Ä¢DeIn√¥C√Ülback
(htim);

726 
	`HAL_TIM_OC_M‚Ä¢DeIn√¥
(
htim
);

730 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

733 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

734 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

737 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

740 
	`__HAL_UNLOCK
(
htim
);

742  
HAL_OK
;

743 
	}
}

750 
__w√≥k
 
	$HAL_TIM_OC_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

753 
	`UNUSED
(
htim
);

758 
	}
}

765 
__w√≥k
 
	$HAL_TIM_OC_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

768 
	`UNUSED
(
htim
);

773 
	}
}

786 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

788 
u√∂t32_t
 
tmpsm¬∏
;

791 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

794 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

796  
HAL_ERROR
;

800 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

803 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

805 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

808 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

812 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

814 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

815 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

817 
	`__HAL_TIM_ENABLE
(
htim
);

822 
	`__HAL_TIM_ENABLE
(
htim
);

826  
HAL_OK
;

827 
	}
}

840 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

843 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

846 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

848 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

851 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

855 
	`__HAL_TIM_DISABLE
(
htim
);

858 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

861  
HAL_OK
;

862 
	}
}

875 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

877 
u√∂t32_t
 
tmpsm¬∏
;

880 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

883 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

885  
HAL_ERROR
;

889 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

891 
Ch‚Ñ¢‚àöl
)

893 
TIM_CHANNEL_1
:

896 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

900 
TIM_CHANNEL_2
:

903 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

907 
TIM_CHANNEL_3
:

910 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

914 
TIM_CHANNEL_4
:

917 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

926 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

928 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

931 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

935 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

937 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

938 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

940 
	`__HAL_TIM_ENABLE
(
htim
);

945 
	`__HAL_TIM_ENABLE
(
htim
);

949  
HAL_OK
;

950 
	}
}

963 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

966 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

968 
Ch‚Ñ¢‚àöl
)

970 
TIM_CHANNEL_1
:

973 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

977 
TIM_CHANNEL_2
:

980 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

984 
TIM_CHANNEL_3
:

987 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

991 
TIM_CHANNEL_4
:

994 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1003 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1005 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1008 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1012 
	`__HAL_TIM_DISABLE
(
htim
);

1015 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1018  
HAL_OK
;

1019 
	}
}

1034 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

1036 
u√∂t32_t
 
tmpsm¬∏
;

1039 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1042 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

1044  
HAL_BUSY
;

1046 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1048 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

1050  
HAL_ERROR
;

1054 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1059  
HAL_ERROR
;

1062 
Ch‚Ñ¢‚àöl
)

1064 
TIM_CHANNEL_1
:

1067 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1068 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1071 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1074 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1077  
HAL_ERROR
;

1081 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1085 
TIM_CHANNEL_2
:

1088 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1089 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1092 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1095 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1098  
HAL_ERROR
;

1102 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1106 
TIM_CHANNEL_3
:

1109 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1110 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1113 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1116 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR3
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1119  
HAL_ERROR
;

1122 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1126 
TIM_CHANNEL_4
:

1129 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1130 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1133 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1136 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR4
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1139  
HAL_ERROR
;

1142 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1151 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

1153 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1156 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1160 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1162 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1163 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1165 
	`__HAL_TIM_ENABLE
(
htim
);

1170 
	`__HAL_TIM_ENABLE
(
htim
);

1174  
HAL_OK
;

1175 
	}
}

1188 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1191 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1193 
Ch‚Ñ¢‚àöl
)

1195 
TIM_CHANNEL_1
:

1198 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1199 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

1203 
TIM_CHANNEL_2
:

1206 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1207 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1211 
TIM_CHANNEL_3
:

1214 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1215 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1219 
TIM_CHANNEL_4
:

1222 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1223 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

1232 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1234 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1237 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1241 
	`__HAL_TIM_DISABLE
(
htim
);

1244 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1247  
HAL_OK
;

1248 
	}
}

1285 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

1288 i‚Ä°(
htim
 =Ô£ø
NULL
)

1290  
HAL_ERROR
;

1294 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1295 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

1296 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

1297 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

1299 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

1302 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1304 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1306 
	`TIM_Re¬£tC√Ülback
(
htim
);

1308 i‚Ä°(
htim
->
PWM_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

1310 
htim
->
PWM_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_PWM_M‚Ä¢In√¥
;

1313 
htim
->
	`PWM_M‚Ä¢In√¥C√Ülback
(htim);

1316 
	`HAL_TIM_PWM_M‚Ä¢In√¥
(
htim
);

1321 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

1324 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

1327 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

1330 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1331 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1334 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

1336  
HAL_OK
;

1337 
	}
}

1344 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

1347 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1349 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

1352 
	`__HAL_TIM_DISABLE
(
htim
);

1354 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1355 i‚Ä°(
htim
->
PWM_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

1357 
htim
->
PWM_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_PWM_M‚Ä¢DeIn√¥
;

1360 
htim
->
	`PWM_M‚Ä¢DeIn√¥C√Ülback
(htim);

1363 
	`HAL_TIM_PWM_M‚Ä¢DeIn√¥
(
htim
);

1367 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

1370 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

1371 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

1374 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

1377 
	`__HAL_UNLOCK
(
htim
);

1379  
HAL_OK
;

1380 
	}
}

1387 
__w√≥k
 
	$HAL_TIM_PWM_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

1390 
	`UNUSED
(
htim
);

1395 
	}
}

1402 
__w√≥k
 
	$HAL_TIM_PWM_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

1405 
	`UNUSED
(
htim
);

1410 
	}
}

1423 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1425 
u√∂t32_t
 
tmpsm¬∏
;

1428 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1431 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1433  
HAL_ERROR
;

1437 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1440 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

1442 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1445 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1449 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1451 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1452 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1454 
	`__HAL_TIM_ENABLE
(
htim
);

1459 
	`__HAL_TIM_ENABLE
(
htim
);

1463  
HAL_OK
;

1464 
	}
}

1477 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1480 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1483 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1485 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1488 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1492 
	`__HAL_TIM_DISABLE
(
htim
);

1495 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1498  
HAL_OK
;

1499 
	}
}

1512 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1514 
u√∂t32_t
 
tmpsm¬∏
;

1516 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1519 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1521  
HAL_ERROR
;

1525 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1527 
Ch‚Ñ¢‚àöl
)

1529 
TIM_CHANNEL_1
:

1532 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1536 
TIM_CHANNEL_2
:

1539 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1543 
TIM_CHANNEL_3
:

1546 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1550 
TIM_CHANNEL_4
:

1553 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1562 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

1564 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1567 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1571 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1573 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1574 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1576 
	`__HAL_TIM_ENABLE
(
htim
);

1581 
	`__HAL_TIM_ENABLE
(
htim
);

1585  
HAL_OK
;

1586 
	}
}

1599 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1602 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1604 
Ch‚Ñ¢‚àöl
)

1606 
TIM_CHANNEL_1
:

1609 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1613 
TIM_CHANNEL_2
:

1616 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1620 
TIM_CHANNEL_3
:

1623 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1627 
TIM_CHANNEL_4
:

1630 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1639 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1641 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1644 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1648 
	`__HAL_TIM_DISABLE
(
htim
);

1651 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1654  
HAL_OK
;

1655 
	}
}

1670 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

1672 
u√∂t32_t
 
tmpsm¬∏
;

1675 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1678 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

1680  
HAL_BUSY
;

1682 i‚Ä°(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1684 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

1686  
HAL_ERROR
;

1690 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1695  
HAL_ERROR
;

1698 
Ch‚Ñ¢‚àöl
)

1700 
TIM_CHANNEL_1
:

1703 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1704 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1707 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1710 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1713  
HAL_ERROR
;

1717 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1721 
TIM_CHANNEL_2
:

1724 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1725 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1728 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1731 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1734  
HAL_ERROR
;

1737 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1741 
TIM_CHANNEL_3
:

1744 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1745 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1748 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1751 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR3
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1754  
HAL_ERROR
;

1757 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1761 
TIM_CHANNEL_4
:

1764 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

1765 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1768 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

1771 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR4
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1774  
HAL_ERROR
;

1777 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1786 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

1788 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1791 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1795 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1797 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1798 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1800 
	`__HAL_TIM_ENABLE
(
htim
);

1805 
	`__HAL_TIM_ENABLE
(
htim
);

1809  
HAL_OK
;

1810 
	}
}

1823 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1826 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1828 
Ch‚Ñ¢‚àöl
)

1830 
TIM_CHANNEL_1
:

1833 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1834 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

1838 
TIM_CHANNEL_2
:

1841 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1842 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1846 
TIM_CHANNEL_3
:

1849 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1850 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1854 
TIM_CHANNEL_4
:

1857 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1858 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

1867 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1869 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

1872 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1876 
	`__HAL_TIM_DISABLE
(
htim
);

1879 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1882  
HAL_OK
;

1883 
	}
}

1920 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

1923 i‚Ä°(
htim
 =Ô£ø
NULL
)

1925  
HAL_ERROR
;

1929 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1930 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

1931 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

1932 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

1934 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

1937 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1939 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1941 
	`TIM_Re¬£tC√Ülback
(
htim
);

1943 i‚Ä°(
htim
->
IC_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

1945 
htim
->
IC_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_IC_M‚Ä¢In√¥
;

1948 
htim
->
	`IC_M‚Ä¢In√¥C√Ülback
(htim);

1951 
	`HAL_TIM_IC_M‚Ä¢In√¥
(
htim
);

1956 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

1959 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

1962 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

1965 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1966 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1969 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

1971  
HAL_OK
;

1972 
	}
}

1979 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

1982 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1984 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

1987 
	`__HAL_TIM_DISABLE
(
htim
);

1989 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1990 i‚Ä°(
htim
->
IC_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

1992 
htim
->
IC_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_IC_M‚Ä¢DeIn√¥
;

1995 
htim
->
	`IC_M‚Ä¢DeIn√¥C√Ülback
(htim);

1998 
	`HAL_TIM_IC_M‚Ä¢DeIn√¥
(
htim
);

2002 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

2005 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2006 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2009 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

2012 
	`__HAL_UNLOCK
(
htim
);

2014  
HAL_OK
;

2015 
	}
}

2022 
__w√≥k
 
	$HAL_TIM_IC_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2025 
	`UNUSED
(
htim
);

2030 
	}
}

2037 
__w√≥k
 
	$HAL_TIM_IC_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2040 
	`UNUSED
(
htim
);

2045 
	}
}

2058 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

2060 
u√∂t32_t
 
tmpsm¬∏
;

2065 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

2075 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2076 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2079 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

2082 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

2084 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

2085 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

2087 
	`__HAL_TIM_ENABLE
(
htim
);

2092 
	`__HAL_TIM_ENABLE
(
htim
);

2096  
HAL_OK
;

2097 
	}
}

2110 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

2113 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

2116 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

2119 
	`__HAL_TIM_DISABLE
(
htim
);

2122 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

2123 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

2126  
HAL_OK
;

2127 
	}
}

2140 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

2142 
u√∂t32_t
 
tmpsm¬∏
;

2147 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

2157 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2158 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2160 
Ch‚Ñ¢‚àöl
)

2162 
TIM_CHANNEL_1
:

2165 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2169 
TIM_CHANNEL_2
:

2172 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2176 
TIM_CHANNEL_3
:

2179 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

2183 
TIM_CHANNEL_4
:

2186 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

2194 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

2197 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

2199 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

2200 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

2202 
	`__HAL_TIM_ENABLE
(
htim
);

2207 
	`__HAL_TIM_ENABLE
(
htim
);

2211  
HAL_OK
;

2212 
	}
}

2225 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

2228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

2230 
Ch‚Ñ¢‚àöl
)

2232 
TIM_CHANNEL_1
:

2235 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2239 
TIM_CHANNEL_2
:

2242 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2246 
TIM_CHANNEL_3
:

2249 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

2253 
TIM_CHANNEL_4
:

2256 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

2265 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

2268 
	`__HAL_TIM_DISABLE
(
htim
);

2271 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

2272 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

2275  
HAL_OK
;

2276 
	}
}

2291 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

2293 
u√∂t32_t
 
tmpsm¬∏
;

2294 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
);

2295 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
);

2298 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

2299 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

2302 i‚Ä°((
ch‚Ñ¢‚àöl_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

2303 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
))

2305  
HAL_BUSY
;

2307 i‚Ä°((
ch‚Ñ¢‚àöl_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2308 && (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

2310 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

2312  
HAL_ERROR
;

2316 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2317 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2322  
HAL_ERROR
;

2325 
Ch‚Ñ¢‚àöl
)

2327 
TIM_CHANNEL_1
:

2330 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

2331 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

2334 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

2337 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

2340  
HAL_ERROR
;

2343 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2347 
TIM_CHANNEL_2
:

2350 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

2351 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

2354 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

2357 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

2360  
HAL_ERROR
;

2363 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2367 
TIM_CHANNEL_3
:

2370 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

2371 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

2374 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

2377 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR3
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

2380  
HAL_ERROR
;

2383 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

2387 
TIM_CHANNEL_4
:

2390 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

2391 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

2394 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

2397 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR4
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

2400  
HAL_ERROR
;

2403 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

2412 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

2415 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

2417 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

2418 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

2420 
	`__HAL_TIM_ENABLE
(
htim
);

2425 
	`__HAL_TIM_ENABLE
(
htim
);

2429  
HAL_OK
;

2430 
	}
}

2443 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

2446 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

2447 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

2450 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

2452 
Ch‚Ñ¢‚àöl
)

2454 
TIM_CHANNEL_1
:

2457 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2458 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

2462 
TIM_CHANNEL_2
:

2465 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2466 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

2470 
TIM_CHANNEL_3
:

2473 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

2474 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

2478 
TIM_CHANNEL_4
:

2481 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

2482 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

2491 
	`__HAL_TIM_DISABLE
(
htim
);

2494 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

2495 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

2498  
HAL_OK
;

2499 
	}
}

2542 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
O‚àöPul¬£Mode
)

2545 i‚Ä°(
htim
 =Ô£ø
NULL
)

2547  
HAL_ERROR
;

2551 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

2552 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

2553 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

2554 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OPM_MODE
(
O‚àöPul¬£Mode
));

2555 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

2557 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

2560 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2562 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2564 
	`TIM_Re¬£tC√Ülback
(
htim
);

2566 i‚Ä°(
htim
->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

2568 
htim
->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_O‚àöPul¬£_M‚Ä¢In√¥
;

2571 
htim
->
	`O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
(htim);

2574 
	`HAL_TIM_O‚àöPul¬£_M‚Ä¢In√¥
(
htim
);

2579 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

2582 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

2585 
htim
->
In¬∞‚Ñ¢Àö
->
CR1
 &Ô£ø~
TIM_CR1_OPM
;

2588 
htim
->
In¬∞‚Ñ¢Àö
->
CR1
 |Ô£ø
O‚àöPul¬£Mode
;

2591 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

2594 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2595 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2596 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2597 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2600 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

2602  
HAL_OK
;

2603 
	}
}

2610 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2613 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

2615 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

2618 
	`__HAL_TIM_DISABLE
(
htim
);

2620 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2621 i‚Ä°(
htim
->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

2623 
htim
->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_O‚àöPul¬£_M‚Ä¢DeIn√¥
;

2626 
htim
->
	`O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
(htim);

2629 
	`HAL_TIM_O‚àöPul¬£_M‚Ä¢DeIn√¥
(
htim
);

2633 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

2636 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2637 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2638 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2639 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2642 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

2645 
	`__HAL_UNLOCK
(
htim
);

2647  
HAL_OK
;

2648 
	}
}

2655 
__w√≥k
 
	$HAL_TIM_O‚àöPul¬£_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2658 
	`UNUSED
(
htim
);

2663 
	}
}

2670 
__w√≥k
 
	$HAL_TIM_O‚àöPul¬£_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2673 
	`UNUSED
(
htim
);

2678 
	}
}

2689 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

2691 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2692 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2693 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2694 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2697 
	`UNUSED
(
Ou√ßutCh‚Ñ¢‚àöl
);

2700 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2701 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2702 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2703 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

2705  
HAL_ERROR
;

2709 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2710 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2711 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2712 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2723 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2724 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2726 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

2729 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

2733  
HAL_OK
;

2734 
	}
}

2745 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

2748 
	`UNUSED
(
Ou√ßutCh‚Ñ¢‚àöl
);

2756 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2757 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2759 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

2762 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

2766 
	`__HAL_TIM_DISABLE
(
htim
);

2769 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2770 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2771 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2772 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2775  
HAL_OK
;

2776 
	}
}

2787 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

2789 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2790 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2791 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2792 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2795 
	`UNUSED
(
Ou√ßutCh‚Ñ¢‚àöl
);

2798 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2799 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2800 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

2801 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

2803  
HAL_ERROR
;

2807 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2808 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2809 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2810 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2822 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2825 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2827 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2828 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2830 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

2833 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

2837  
HAL_OK
;

2838 
	}
}

2849 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

2852 
	`UNUSED
(
Ou√ßutCh‚Ñ¢‚àöl
);

2855 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2858 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2865 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2866 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2868 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
√ã!Ô£ø
RESET
)

2871 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

2875 
	`__HAL_TIM_DISABLE
(
htim
);

2878 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2879 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2880 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2881 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2884  
HAL_OK
;

2885 
	}
}

2928 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_Encod√Æ_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
)

2930 
u√∂t32_t
 
tmpsm¬∏
;

2931 
u√∂t32_t
 
tmpccmr1
;

2932 
u√∂t32_t
 
tmpcÀör
;

2935 i‚Ä°(
htim
 =Ô£ø
NULL
)

2937  
HAL_ERROR
;

2941 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

2942 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

2943 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

2944 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

2945 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_MODE
(
sC‚ÅÑfig
->
Encod√ÆMode
));

2946 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_SELECTION
(
sC‚ÅÑfig
->
IC1S√±eÀòi‚ÅÑ
));

2947 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_SELECTION
(
sC‚ÅÑfig
->
IC2S√±eÀòi‚ÅÑ
));

2948 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODERINPUT_POLARITY
(
sC‚ÅÑfig
->
IC1PÔ¨Å¬®√¥y
));

2949 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODERINPUT_POLARITY
(
sC‚ÅÑfig
->
IC2PÔ¨Å¬®√¥y
));

2950 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_PRESCALER
(
sC‚ÅÑfig
->
IC1P¬™sÀá√Är
));

2951 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_PRESCALER
(
sC‚ÅÑfig
->
IC2P¬™sÀá√Är
));

2952 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_FILTER
(
sC‚ÅÑfig
->
IC1F√ª√£r
));

2953 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_FILTER
(
sC‚ÅÑfig
->
IC2F√ª√£r
));

2955 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

2958 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2960 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2962 
	`TIM_Re¬£tC√Ülback
(
htim
);

2964 i‚Ä°(
htim
->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

2966 
htim
->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_Encod√Æ_M‚Ä¢In√¥
;

2969 
htim
->
	`Encod√Æ_M‚Ä¢In√¥C√Ülback
(htim);

2972 
	`HAL_TIM_Encod√Æ_M‚Ä¢In√¥
(
htim
);

2977 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

2980 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~(
TIM_SMCR_SMS
 | 
TIM_SMCR_ECE
);

2983 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

2986 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
;

2989 
tmpccmr1
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
;

2992 
tmpcÀör
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
;

2995 
tmpsm¬∏
 |Ô£ø
sC‚ÅÑfig
->
Encod√ÆMode
;

2998 
tmpccmr1
 &Ô£ø~(
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_CC2S
);

2999 
tmpccmr1
 |Ô£ø(
sC‚ÅÑfig
->
IC1S√±eÀòi‚ÅÑ
 | (sC‚ÅÑfig->
IC2S√±eÀòi‚ÅÑ
 << 8U));

3002 
tmpccmr1
 &Ô£ø~(
TIM_CCMR1_IC1PSC
 | 
TIM_CCMR1_IC2PSC
);

3003 
tmpccmr1
 &Ô£ø~(
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC2F
);

3004 
tmpccmr1
 |Ô£ø
sC‚ÅÑfig
->
IC1P¬™sÀá√Är
 | (sC‚ÅÑfig->
IC2P¬™sÀá√Är
 << 8U);

3005 
tmpccmr1
 |Ô£ø(
sC‚ÅÑfig
->
IC1F√ª√£r
 << 4U√ã| (sC‚ÅÑfig->
IC2F√ª√£r
 << 12U);

3008 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC2P
);

3009 
tmpcÀör
 |Ô£ø
sC‚ÅÑfig
->
IC1PÔ¨Å¬®√¥y
 | (sC‚ÅÑfig->
IC2PÔ¨Å¬®√¥y
 << 4U);

3012 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 = 
tmpsm¬∏
;

3015 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 = 
tmpccmr1
;

3018 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
 = 
tmpcÀör
;

3021 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

3024 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3025 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3026 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3027 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3030 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

3032  
HAL_OK
;

3033 
	}
}

3041 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

3044 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3046 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

3049 
	`__HAL_TIM_DISABLE
(
htim
);

3051 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3052 i‚Ä°(
htim
->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

3054 
htim
->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_Encod√Æ_M‚Ä¢DeIn√¥
;

3057 
htim
->
	`Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
(htim);

3060 
	`HAL_TIM_Encod√Æ_M‚Ä¢DeIn√¥
(
htim
);

3064 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

3067 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3068 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3069 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3070 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3073 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

3076 
	`__HAL_UNLOCK
(
htim
);

3078  
HAL_OK
;

3079 
	}
}

3086 
__w√≥k
 
	$HAL_TIM_Encod√Æ_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

3089 
	`UNUSED
(
htim
);

3094 
	}
}

3101 
__w√≥k
 
	$HAL_TIM_Encod√Æ_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

3104 
	`UNUSED
(
htim
);

3109 
	}
}

3121 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

3123 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3124 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3125 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3126 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3129 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3132 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
)

3134 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3135 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3137  
HAL_ERROR
;

3141 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3142 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3145 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_2
)

3147 i‚Ä°((
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3148 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3150  
HAL_ERROR
;

3154 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3155 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3160 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3161 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3162 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3163 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3165  
HAL_ERROR
;

3169 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3170 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3171 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3172 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3177 
Ch‚Ñ¢‚àöl
)

3179 
TIM_CHANNEL_1
:

3181 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3185 
TIM_CHANNEL_2
:

3187 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3193 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3194 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3199 
	`__HAL_TIM_ENABLE
(
htim
);

3202  
HAL_OK
;

3203 
	}
}

3215 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

3218 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3222 
Ch‚Ñ¢‚àöl
)

3224 
TIM_CHANNEL_1
:

3226 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3230 
TIM_CHANNEL_2
:

3232 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3238 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3239 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3245 
	`__HAL_TIM_DISABLE
(
htim
);

3248 i‚Ä°((
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã|| (Ch‚Ñ¢‚àö¬ª=Ô£ø
TIM_CHANNEL_2
))

3250 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

3251 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

3255 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3256 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3257 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3258 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3262  
HAL_OK
;

3263 
	}
}

3275 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

3277 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3278 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3279 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3280 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3283 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3286 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
)

3288 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3289 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3291  
HAL_ERROR
;

3295 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3296 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3299 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_2
)

3301 i‚Ä°((
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3302 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3304  
HAL_ERROR
;

3308 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3309 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3314 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3315 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3316 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3317 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3319  
HAL_ERROR
;

3323 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3324 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3325 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3326 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3332 
Ch‚Ñ¢‚àöl
)

3334 
TIM_CHANNEL_1
:

3336 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3337 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

3341 
TIM_CHANNEL_2
:

3343 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3344 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

3350 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3351 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3352 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

3353 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

3359 
	`__HAL_TIM_ENABLE
(
htim
);

3362  
HAL_OK
;

3363 
	}
}

3375 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

3378 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3382 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
)

3384 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3387 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

3389 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_2
)

3391 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3394 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

3398 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3399 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3402 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

3403 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

3407 
	`__HAL_TIM_DISABLE
(
htim
);

3410 i‚Ä°((
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã|| (Ch‚Ñ¢‚àö¬ª=Ô£ø
TIM_CHANNEL_2
))

3412 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

3413 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

3417 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3418 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3419 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3420 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3424  
HAL_OK
;

3425 
	}
}

3440 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a1
,

3441 
u√∂t32_t
 *
pD¬©a2
, 
u√∂t16_t
 
L√≠gth
)

3443 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3444 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3445 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3446 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3449 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3452 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
)

3454 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

3455 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
))

3457  
HAL_BUSY
;

3459 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3460 && (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3462 i‚Ä°((
pD¬©a1
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

3464  
HAL_ERROR
;

3468 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3469 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3474  
HAL_ERROR
;

3477 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_2
)

3479 i‚Ä°((
ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

3480 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
))

3482  
HAL_BUSY
;

3484 i‚Ä°((
ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3485 && (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3487 i‚Ä°((
pD¬©a2
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

3489  
HAL_ERROR
;

3493 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3494 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3499  
HAL_ERROR
;

3504 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

3505 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

3506 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

3507 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
))

3509  
HAL_BUSY
;

3511 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3512 && (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3513 && (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

3514 && (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

3516 i‚Ä°((((
pD¬©a1
 =Ô£ø
NULL
√ã|| (
pD¬©a2
 =Ô£øNULL))√ã&& (
L√≠gth
 > 0U))

3518  
HAL_ERROR
;

3522 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3523 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3524 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3525 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3530  
HAL_ERROR
;

3534 
Ch‚Ñ¢‚àöl
)

3536 
TIM_CHANNEL_1
:

3539 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

3540 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

3543 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

3546 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, (u√∂t32_t)
pD¬©a1
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

3549  
HAL_ERROR
;

3552 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3555 
	`__HAL_TIM_ENABLE
(
htim
);

3558 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3562 
TIM_CHANNEL_2
:

3565 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

3566 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

3569 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
;

3571 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, (u√∂t32_t)
pD¬©a2
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

3574  
HAL_ERROR
;

3577 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3580 
	`__HAL_TIM_ENABLE
(
htim
);

3583 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3587 
TIM_CHANNEL_ALL
:

3590 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

3591 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

3594 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

3597 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, (u√∂t32_t)
pD¬©a1
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

3600  
HAL_ERROR
;

3604 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

3605 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

3608 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

3611 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, (u√∂t32_t)
pD¬©a2
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

3614  
HAL_ERROR
;

3617 
	`__HAL_TIM_ENABLE
(
htim
);

3620 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3621 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3624 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3626 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3635  
HAL_OK
;

3636 
	}
}

3648 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Encod√Æ_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

3651 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3655 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
)

3657 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3660 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3661 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3663 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_2
)

3665 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3668 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3669 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3673 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3674 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3677 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3678 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3679 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3680 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3684 
	`__HAL_TIM_DISABLE
(
htim
);

3687 i‚Ä°((
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã|| (Ch‚Ñ¢‚àö¬ª=Ô£ø
TIM_CHANNEL_2
))

3689 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

3690 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

3694 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3695 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3696 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3697 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3701  
HAL_OK
;

3702 
	}
}

3725 
	$HAL_TIM_IRQH‚Ñ¢d√Är
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

3728 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC1
√ã!Ô£ø
RESET
)

3730 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC1
√ã!Ô£ø
RESET
)

3733 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC1
);

3734 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

3737 i‚Ä°((
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 & 
TIM_CCMR1_CC1S
) != 0x00U)

3739 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3740 
htim
->
	`IC_C‚â†tu¬™C√Ülback
(htim);

3742 
	`HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
htim
);

3748 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3749 
htim
->
	`OC_D√±ayE≈ìp¬£dC√Ülback
(htim);

3750 
htim
->
	`PWM_Pul¬£F√∂ishedC√Ülback
(htim);

3752 
	`HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
(
htim
);

3753 
	`HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
htim
);

3756 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3761 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC2
√ã!Ô£ø
RESET
)

3763 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC2
√ã!Ô£ø
RESET
)

3765 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC2
);

3766 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

3768 i‚Ä°((
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 & 
TIM_CCMR1_CC2S
) != 0x00U)

3770 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3771 
htim
->
	`IC_C‚â†tu¬™C√Ülback
(htim);

3773 
	`HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
htim
);

3779 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3780 
htim
->
	`OC_D√±ayE≈ìp¬£dC√Ülback
(htim);

3781 
htim
->
	`PWM_Pul¬£F√∂ishedC√Ülback
(htim);

3783 
	`HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
(
htim
);

3784 
	`HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
htim
);

3787 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3791 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC3
√ã!Ô£ø
RESET
)

3793 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC3
√ã!Ô£ø
RESET
)

3795 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC3
);

3796 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

3798 i‚Ä°((
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 & 
TIM_CCMR2_CC3S
) != 0x00U)

3800 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3801 
htim
->
	`IC_C‚â†tu¬™C√Ülback
(htim);

3803 
	`HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
htim
);

3809 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3810 
htim
->
	`OC_D√±ayE≈ìp¬£dC√Ülback
(htim);

3811 
htim
->
	`PWM_Pul¬£F√∂ishedC√Ülback
(htim);

3813 
	`HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
(
htim
);

3814 
	`HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
htim
);

3817 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3821 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC4
√ã!Ô£ø
RESET
)

3823 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC4
√ã!Ô£ø
RESET
)

3825 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC4
);

3826 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

3828 i‚Ä°((
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 & 
TIM_CCMR2_CC4S
) != 0x00U)

3830 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3831 
htim
->
	`IC_C‚â†tu¬™C√Ülback
(htim);

3833 
	`HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
htim
);

3839 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3840 
htim
->
	`OC_D√±ayE≈ìp¬£dC√Ülback
(htim);

3841 
htim
->
	`PWM_Pul¬£F√∂ishedC√Ülback
(htim);

3843 
	`HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
(
htim
);

3844 
	`HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
htim
);

3847 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3851 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_UPDATE
√ã!Ô£ø
RESET
)

3853 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_UPDATE
√ã!Ô£ø
RESET
)

3855 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_UPDATE
);

3856 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3857 
htim
->
	`P√ÆiodE≈ìp¬£dC√Ülback
(htim);

3859 
	`HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
(
htim
);

3864 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_BREAK
√ã!Ô£ø
RESET
)

3866 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_BREAK
√ã!Ô£ø
RESET
)

3868 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_BREAK
);

3869 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3870 
htim
->
	`B¬™akC√Ülback
(htim);

3872 
	`HAL_TIMEx_B¬™akC√Ülback
(
htim
);

3877 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_TRIGGER
√ã!Ô£ø
RESET
)

3879 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_TRIGGER
√ã!Ô£ø
RESET
)

3881 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_TRIGGER
);

3882 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3883 
htim
->
	`Trigg√ÆC√Ülback
(htim);

3885 
	`HAL_TIM_Trigg√ÆC√Ülback
(
htim
);

3890 i‚Ä°(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_COM
√ã!Ô£ø
RESET
)

3892 i‚Ä°(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_COM
√ã!Ô£ø
RESET
)

3894 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_FLAG_COM
);

3895 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3896 
htim
->
	`Commu√®ti‚ÅÑC√Ülback
(htim);

3898 
	`HAL_TIMEx_CommutC√Ülback
(
htim
);

3902 
	}
}

3940 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_OC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

3941 
TIM_OC_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
,

3942 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

3945 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CHANNELS
(
Ch‚Ñ¢‚àöl
));

3946 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OC_MODE
(
sC‚ÅÑfig
->
OCMode
));

3947 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OC_POLARITY
(
sC‚ÅÑfig
->
OCPÔ¨Å¬®√¥y
));

3950 
	`__HAL_LOCK
(
htim
);

3952 
Ch‚Ñ¢‚àöl
)

3954 
TIM_CHANNEL_1
:

3957 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3960 
	`TIM_OC1_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

3964 
TIM_CHANNEL_2
:

3967 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3970 
	`TIM_OC2_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

3974 
TIM_CHANNEL_3
:

3977 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3980 
	`TIM_OC3_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

3984 
TIM_CHANNEL_4
:

3987 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

3990 
	`TIM_OC4_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

3998 
	`__HAL_UNLOCK
(
htim
);

4000  
HAL_OK
;

4001 
	}
}

4016 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_IC_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_IC_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

4019 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4020 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_POLARITY
(
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
));

4021 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_SELECTION
(
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
));

4022 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_PRESCALER
(
sC‚ÅÑfig
->
ICP¬™sÀá√Är
));

4023 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_FILTER
(
sC‚ÅÑfig
->
ICF√ª√£r
));

4026 
	`__HAL_LOCK
(
htim
);

4028 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
)

4031 
	`TIM_TI1_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

4032 
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
,

4033 
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
,

4034 
sC‚ÅÑfig
->
ICF√ª√£r
);

4037 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC1PSC
;

4040 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
sC‚ÅÑfig
->
ICP¬™sÀá√Är
;

4042 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_2
)

4045 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4047 
	`TIM_TI2_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

4048 
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
,

4049 
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
,

4050 
sC‚ÅÑfig
->
ICF√ª√£r
);

4053 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC2PSC
;

4056 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø(
sC‚ÅÑfig
->
ICP¬™sÀá√Är
 << 8U);

4058 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_3
)

4061 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4063 
	`TIM_TI3_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

4064 
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
,

4065 
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
,

4066 
sC‚ÅÑfig
->
ICF√ª√£r
);

4069 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_IC3PSC
;

4072 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
sC‚ÅÑfig
->
ICP¬™sÀá√Är
;

4077 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4079 
	`TIM_TI4_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

4080 
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
,

4081 
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
,

4082 
sC‚ÅÑfig
->
ICF√ª√£r
);

4085 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_IC4PSC
;

4088 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø(
sC‚ÅÑfig
->
ICP¬™sÀá√Är
 << 8U);

4091 
	`__HAL_UNLOCK
(
htim
);

4093  
HAL_OK
;

4094 
	}
}

4109 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_PWM_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

4110 
TIM_OC_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
,

4111 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

4114 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CHANNELS
(
Ch‚Ñ¢‚àöl
));

4115 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_PWM_MODE
(
sC‚ÅÑfig
->
OCMode
));

4116 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OC_POLARITY
(
sC‚ÅÑfig
->
OCPÔ¨Å¬®√¥y
));

4117 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_FAST_STATE
(
sC‚ÅÑfig
->
OCFa¬∞Mode
));

4120 
	`__HAL_LOCK
(
htim
);

4122 
Ch‚Ñ¢‚àöl
)

4124 
TIM_CHANNEL_1
:

4127 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4130 
	`TIM_OC1_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

4133 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
TIM_CCMR1_OC1PE
;

4136 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_OC1FE
;

4137 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
sC‚ÅÑfig
->
OCFa¬∞Mode
;

4141 
TIM_CHANNEL_2
:

4144 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4147 
	`TIM_OC2_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

4150 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
TIM_CCMR1_OC2PE
;

4153 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_OC2FE
;

4154 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
sC‚ÅÑfig
->
OCFa¬∞Mode
 << 8U;

4158 
TIM_CHANNEL_3
:

4161 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4164 
	`TIM_OC3_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

4167 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
TIM_CCMR2_OC3PE
;

4170 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_OC3FE
;

4171 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
sC‚ÅÑfig
->
OCFa¬∞Mode
;

4175 
TIM_CHANNEL_4
:

4178 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4181 
	`TIM_OC4_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
);

4184 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
TIM_CCMR2_OC4PE
;

4187 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 &Ô£ø~
TIM_CCMR2_OC4FE
;

4188 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
 |Ô£ø
sC‚ÅÑfig
->
OCFa¬∞Mode
 << 8U;

4196 
	`__HAL_UNLOCK
(
htim
);

4198  
HAL_OK
;

4199 
	}
}

4220 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_C‚ÅÑfigCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_O‚àöPul¬£_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
,

4221 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
, u√∂t32_√†
I‚âàutCh‚Ñ¢‚àöl
)

4223 
TIM_OC_In√¥Ty‚â•Def
 
√£mp1
;

4226 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OPM_CHANNELS
(
Ou√ßutCh‚Ñ¢‚àöl
));

4227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OPM_CHANNELS
(
I‚âàutCh‚Ñ¢‚àöl
));

4229 i‚Ä°(
Ou√ßutCh‚Ñ¢‚àöl
 !Ô£ø
I‚âàutCh‚Ñ¢‚àöl
)

4232 
	`__HAL_LOCK
(
htim
);

4234 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

4237 
√£mp1
.
OCMode
 = 
sC‚ÅÑfig
->OCMode;

4238 
√£mp1
.
Pul¬£
 = 
sC‚ÅÑfig
->Pulse;

4239 
√£mp1
.
OCPÔ¨Å¬®√¥y
 = 
sC‚ÅÑfig
->OCPolarity;

4240 
√£mp1
.
OCNPÔ¨Å¬®√¥y
 = 
sC‚ÅÑfig
->OCNPolarity;

4241 
√£mp1
.
OCId√ÄS√®√£
 = 
sC‚ÅÑfig
->OCIdleState;

4242 
√£mp1
.
OCNId√ÄS√®√£
 = 
sC‚ÅÑfig
->OCNIdleState;

4244 
Ou√ßutCh‚Ñ¢‚àöl
)

4246 
TIM_CHANNEL_1
:

4248 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4250 
	`TIM_OC1_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &
√£mp1
);

4253 
TIM_CHANNEL_2
:

4255 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4257 
	`TIM_OC2_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &
√£mp1
);

4264 
I‚âàutCh‚Ñ¢‚àöl
)

4266 
TIM_CHANNEL_1
:

4268 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4270 
	`TIM_TI1_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
,

4271 
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
, sC‚ÅÑfig->
ICF√ª√£r
);

4274 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC1PSC
;

4277 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_TS
;

4278 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_TS_TI1FP1
;

4281 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_SMS
;

4282 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_SLAVEMODE_TRIGGER
;

4285 
TIM_CHANNEL_2
:

4287 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4289 
	`TIM_TI2_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
->
ICPÔ¨Å¬®√¥y
,

4290 
sC‚ÅÑfig
->
ICS√±eÀòi‚ÅÑ
, sC‚ÅÑfig->
ICF√ª√£r
);

4293 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC2PSC
;

4296 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_TS
;

4297 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_TS_TI2FP2
;

4300 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_SMS
;

4301 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_SLAVEMODE_TRIGGER
;

4309 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

4311 
	`__HAL_UNLOCK
(
htim
);

4313  
HAL_OK
;

4317  
HAL_ERROR
;

4319 
	}
}

4359 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_DMABur¬∞_Wr√¥eS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

4360 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
, u√∂t32_√†
Bur¬∞L√≠gth
)

4362  
	`HAL_TIM_DMABur¬∞_Mu‚Ä¶iWr√¥eS√®œÄ
(
htim
, 
Bur¬∞Ba¬£Add¬™ss
, 
Bur¬∞Reque¬∞Src
, 
Bur¬∞Buf‚Äûr
, 
Bur¬∞L√≠gth
,

4363 ((
Bur¬∞L√≠gth
) >> 8U) + 1U);

4364 
	}
}

4405 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_DMABur¬∞_Mu‚Ä¶iWr√¥eS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

4406 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
,

4407 
u√∂t32_t
 
Bur¬∞L√≠gth
, u√∂t32_√†
D¬©aL√≠gth
)

4410 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4411 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_BASE
(
Bur¬∞Ba¬£Add¬™ss
));

4412 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_SOURCE
(
Bur¬∞Reque¬∞Src
));

4413 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_LENGTH
(
Bur¬∞L√≠gth
));

4414 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_DATA_LENGTH
(
D¬©aL√≠gth
));

4416 i‚Ä°(
htim
->
DMABur¬∞S√®√£
 =Ô£ø
HAL_DMA_BURST_STATE_BUSY
)

4418  
HAL_BUSY
;

4420 i‚Ä°(
htim
->
DMABur¬∞S√®√£
 =Ô£ø
HAL_DMA_BURST_STATE_READY
)

4422 i‚Ä°((
Bur¬∞Buf‚Äûr
 =Ô£ø
NULL
√ã&& (
Bur¬∞L√≠gth
 > 0U))

4424  
HAL_ERROR
;

4428 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_BUSY
;

4435 
Bur¬∞Reque¬∞Src
)

4437 
TIM_DMA_UPDATE
:

4440 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAP√ÆiodE≈ìp¬£dC‚àÇt
;

4441 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAP√ÆiodE≈ìp¬£dH√ÜfC‚àÇt
;

4444 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4447 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4448 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4451  
HAL_ERROR
;

4455 
TIM_DMA_CC1
:

4458 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

4459 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

4462 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4465 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4466 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4469  
HAL_ERROR
;

4473 
TIM_DMA_CC2
:

4476 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

4477 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

4480 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4483 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4484 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4487  
HAL_ERROR
;

4491 
TIM_DMA_CC3
:

4494 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

4495 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

4498 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4501 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4502 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4505  
HAL_ERROR
;

4509 
TIM_DMA_CC4
:

4512 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£C‚àÇt
;

4513 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

4516 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4519 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4520 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4523  
HAL_ERROR
;

4527 
TIM_DMA_COM
:

4530 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIMEx_DMACommu√®ti‚ÅÑC‚àÇt
;

4531 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIMEx_DMACommu√®ti‚ÅÑH√ÜfC‚àÇt
;

4534 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4537 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4538 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4541  
HAL_ERROR
;

4545 
TIM_DMA_TRIGGER
:

4548 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMATrigg√ÆC‚àÇt
;

4549 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMATrigg√ÆH√ÜfC‚àÇt
;

4552 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4555 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
u√∂t32_t
)
Bur¬∞Buf‚Äûr
,

4556 (
u√∂t32_t
)&
htim
->
In¬∞‚Ñ¢Àö
->
DMAR
, 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4559  
HAL_ERROR
;

4568 
htim
->
In¬∞‚Ñ¢Àö
->
DCR
 = (
Bur¬∞Ba¬£Add¬™ss
 | 
Bur¬∞L√≠gth
);

4570 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur¬∞Reque¬∞Src
);

4573  
HAL_OK
;

4574 
	}
}

4582 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_DMABur¬∞_Wr√¥eSt‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
)

4585 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_SOURCE
(
Bur¬∞Reque¬∞Src
));

4588 
Bur¬∞Reque¬∞Src
)

4590 
TIM_DMA_UPDATE
:

4592 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

4595 
TIM_DMA_CC1
:

4597 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

4600 
TIM_DMA_CC2
:

4602 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

4605 
TIM_DMA_CC3
:

4607 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

4610 
TIM_DMA_CC4
:

4612 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

4615 
TIM_DMA_COM
:

4617 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]);

4620 
TIM_DMA_TRIGGER
:

4622 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

4630 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur¬∞Reque¬∞Src
);

4633 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

4636  
HAL_OK
;

4637 
	}
}

4677 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_DMABur¬∞_R√≥dS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

4678 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
, u√∂t32_√†
Bur¬∞L√≠gth
)

4680  
	`HAL_TIM_DMABur¬∞_Mu‚Ä¶iR√≥dS√®œÄ
(
htim
, 
Bur¬∞Ba¬£Add¬™ss
, 
Bur¬∞Reque¬∞Src
, 
Bur¬∞Buf‚Äûr
, 
Bur¬∞L√≠gth
,

4681 ((
Bur¬∞L√≠gth
) >> 8U) + 1U);

4682 
	}
}

4723 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_DMABur¬∞_Mu‚Ä¶iR√≥dS√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Ba¬£Add¬™ss
,

4724 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
, u√∂t32_√†*
Bur¬∞Buf‚Äûr
,

4725 
u√∂t32_t
 
Bur¬∞L√≠gth
, u√∂t32_√†
D¬©aL√≠gth
)

4728 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4729 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_BASE
(
Bur¬∞Ba¬£Add¬™ss
));

4730 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_SOURCE
(
Bur¬∞Reque¬∞Src
));

4731 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_LENGTH
(
Bur¬∞L√≠gth
));

4732 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_DATA_LENGTH
(
D¬©aL√≠gth
));

4734 i‚Ä°(
htim
->
DMABur¬∞S√®√£
 =Ô£ø
HAL_DMA_BURST_STATE_BUSY
)

4736  
HAL_BUSY
;

4738 i‚Ä°(
htim
->
DMABur¬∞S√®√£
 =Ô£ø
HAL_DMA_BURST_STATE_READY
)

4740 i‚Ä°((
Bur¬∞Buf‚Äûr
 =Ô£ø
NULL
√ã&& (
Bur¬∞L√≠gth
 > 0U))

4742  
HAL_ERROR
;

4746 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_BUSY
;

4753 
Bur¬∞Reque¬∞Src
)

4755 
TIM_DMA_UPDATE
:

4758 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAP√ÆiodE≈ìp¬£dC‚àÇt
;

4759 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAP√ÆiodE≈ìp¬£dH√ÜfC‚àÇt
;

4762 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4765 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4766 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4769  
HAL_ERROR
;

4773 
TIM_DMA_CC1
:

4776 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

4777 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

4780 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4783 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4784 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4787  
HAL_ERROR
;

4791 
TIM_DMA_CC2
:

4794 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

4795 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

4798 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4801 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4802 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4805  
HAL_ERROR
;

4809 
TIM_DMA_CC3
:

4812 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

4813 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

4816 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4819 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4820 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4823  
HAL_ERROR
;

4827 
TIM_DMA_CC4
:

4830 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

4831 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

4834 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4837 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4838 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4841  
HAL_ERROR
;

4845 
TIM_DMA_COM
:

4848 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIMEx_DMACommu√®ti‚ÅÑC‚àÇt
;

4849 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIMEx_DMACommu√®ti‚ÅÑH√ÜfC‚àÇt
;

4852 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4855 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4856 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4859  
HAL_ERROR
;

4863 
TIM_DMA_TRIGGER
:

4866 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMATrigg√ÆC‚àÇt
;

4867 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMATrigg√ÆH√ÜfC‚àÇt
;

4870 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

4873 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
DMAR
, (u√∂t32_t)
Bur¬∞Buf‚Äûr
,

4874 
D¬©aL√≠gth
√ã!Ô£ø
HAL_OK
)

4877  
HAL_ERROR
;

4886 
htim
->
In¬∞‚Ñ¢Àö
->
DCR
 = (
Bur¬∞Ba¬£Add¬™ss
 | 
Bur¬∞L√≠gth
);

4889 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur¬∞Reque¬∞Src
);

4892  
HAL_OK
;

4893 
	}
}

4901 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_DMABur¬∞_R√≥dSt‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Bur¬∞Reque¬∞Src
)

4904 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMA_SOURCE
(
Bur¬∞Reque¬∞Src
));

4907 
Bur¬∞Reque¬∞Src
)

4909 
TIM_DMA_UPDATE
:

4911 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

4914 
TIM_DMA_CC1
:

4916 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

4919 
TIM_DMA_CC2
:

4921 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

4924 
TIM_DMA_CC3
:

4926 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

4929 
TIM_DMA_CC4
:

4931 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

4934 
TIM_DMA_COM
:

4936 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]);

4939 
TIM_DMA_TRIGGER
:

4941 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

4949 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur¬∞Reque¬∞Src
);

4952 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

4955  
HAL_OK
;

4956 
	}
}

4978 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_G√≠√Æ¬©eEv√≠t
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ev√≠tSourÀö
)

4981 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

4982 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_EVENT_SOURCE
(
Ev√≠tSourÀö
));

4985 
	`__HAL_LOCK
(
htim
);

4988 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

4991 
htim
->
In¬∞‚Ñ¢Àö
->
EGR
 = 
Ev√≠tSourÀö
;

4994 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

4996 
	`__HAL_UNLOCK
(
htim
);

4999  
HAL_OK
;

5000 
	}
}

5015 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_C‚ÅÑfigOC¬™fC√Ä¬®
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

5016 
TIM_C√Ä¬®I‚âàutC‚ÅÑfigTy‚â•Def
 *
sC√Ä¬®I‚âàutC‚ÅÑfig
,

5017 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

5020 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCXREF_CLEAR_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5021 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLEARINPUT_SOURCE
(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutSourÀö
));

5024 
	`__HAL_LOCK
(
htim
);

5026 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

5028 
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutSourÀö
)

5030 
TIM_CLEARINPUTSOURCE_NONE
:

5033 
	`CLEAR_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
, (
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
));

5037 
TIM_CLEARINPUTSOURCE_ETR
:

5040 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLEARINPUT_POLARITY
(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutPÔ¨Å¬®√¥y
));

5041 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLEARINPUT_PRESCALER
(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutP¬™sÀá√Är
));

5042 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLEARINPUT_FILTER
(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutF√ª√£r
));

5045 i‚Ä°(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutP¬™sÀá√Är
 !Ô£ø
TIM_CLEARINPUTPRESCALER_DIV1
)

5047 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5048 
	`__HAL_UNLOCK
(
htim
);

5049  
HAL_ERROR
;

5052 
	`TIM_ETR_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

5053 
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutP¬™sÀá√Är
,

5054 
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutPÔ¨Å¬®√¥y
,

5055 
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutF√ª√£r
);

5063 
Ch‚Ñ¢‚àöl
)

5065 
TIM_CHANNEL_1
:

5067 i‚Ä°(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutS√®√£
 !Ô£ø(
u√∂t32_t
)
DISABLE
)

5070 
	`SET_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
, 
TIM_CCMR1_OC1CE
);

5075 
	`CLEAR_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
, 
TIM_CCMR1_OC1CE
);

5079 
TIM_CHANNEL_2
:

5081 i‚Ä°(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutS√®√£
 !Ô£ø(
u√∂t32_t
)
DISABLE
)

5084 
	`SET_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
, 
TIM_CCMR1_OC2CE
);

5089 
	`CLEAR_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
, 
TIM_CCMR1_OC2CE
);

5093 
TIM_CHANNEL_3
:

5095 i‚Ä°(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutS√®√£
 !Ô£ø(
u√∂t32_t
)
DISABLE
)

5098 
	`SET_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
, 
TIM_CCMR2_OC3CE
);

5103 
	`CLEAR_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
, 
TIM_CCMR2_OC3CE
);

5107 
TIM_CHANNEL_4
:

5109 i‚Ä°(
sC√Ä¬®I‚âàutC‚ÅÑfig
->
C√Ä¬®I‚âàutS√®√£
 !Ô£ø(
u√∂t32_t
)
DISABLE
)

5112 
	`SET_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
, 
TIM_CCMR2_OC4CE
);

5117 
	`CLEAR_BIT
(
htim
->
In¬∞‚Ñ¢Àö
->
CCMR2
, 
TIM_CCMR2_OC4CE
);

5125 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5127 
	`__HAL_UNLOCK
(
htim
);

5129  
HAL_OK
;

5130 
	}
}

5139 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_C‚ÅÑfigClockSourÀö
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_ClockC‚ÅÑfigTy‚â•Def
 *
sClockSourÀöC‚ÅÑfig
)

5141 
u√∂t32_t
 
tmpsm¬∏
;

5144 
	`__HAL_LOCK
(
htim
);

5146 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

5149 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE
(
sClockSourÀöC‚ÅÑfig
->
ClockSourÀö
));

5152 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
;

5153 
tmpsm¬∏
 &Ô£ø~(
TIM_SMCR_SMS
 | 
TIM_SMCR_TS
);

5154 
tmpsm¬∏
 &Ô£ø~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

5155 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 = 
tmpsm¬∏
;

5157 
sClockSourÀöC‚ÅÑfig
->
ClockSourÀö
)

5159 
TIM_CLOCKSOURCE_INTERNAL
:

5161 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5165 
TIM_CLOCKSOURCE_ETRMODE1
:

5168 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5171 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSourÀöC‚ÅÑfig
->
ClockP¬™sÀá√Är
));

5172 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
));

5173 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKFILTER
(
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
));

5176 
	`TIM_ETR_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

5177 
sClockSourÀöC‚ÅÑfig
->
ClockP¬™sÀá√Är
,

5178 
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
,

5179 
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
);

5182 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
;

5183 
tmpsm¬∏
 |Ô£ø(
TIM_SLAVEMODE_EXTERNAL1
 | 
TIM_CLOCKSOURCE_ETRMODE1
);

5185 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 = 
tmpsm¬∏
;

5189 
TIM_CLOCKSOURCE_ETRMODE2
:

5192 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5195 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSourÀöC‚ÅÑfig
->
ClockP¬™sÀá√Är
));

5196 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
));

5197 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKFILTER
(
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
));

5200 
	`TIM_ETR_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

5201 
sClockSourÀöC‚ÅÑfig
->
ClockP¬™sÀá√Är
,

5202 
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
,

5203 
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
);

5205 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_SMCR_ECE
;

5209 
TIM_CLOCKSOURCE_TI1
:

5212 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5215 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
));

5216 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKFILTER
(
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
));

5218 
	`TIM_TI1_C‚ÅÑfigI‚âàutS√®ge
(
htim
->
In¬∞‚Ñ¢Àö
,

5219 
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
,

5220 
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
);

5221 
	`TIM_ITRx_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CLOCKSOURCE_TI1
);

5225 
TIM_CLOCKSOURCE_TI2
:

5228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5231 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
));

5232 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKFILTER
(
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
));

5234 
	`TIM_TI2_C‚ÅÑfigI‚âàutS√®ge
(
htim
->
In¬∞‚Ñ¢Àö
,

5235 
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
,

5236 
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
);

5237 
	`TIM_ITRx_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CLOCKSOURCE_TI2
);

5241 
TIM_CLOCKSOURCE_TI1ED
:

5244 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5247 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
));

5248 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKFILTER
(
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
));

5250 
	`TIM_TI1_C‚ÅÑfigI‚âàutS√®ge
(
htim
->
In¬∞‚Ñ¢Àö
,

5251 
sClockSourÀöC‚ÅÑfig
->
ClockPÔ¨Å¬®√¥y
,

5252 
sClockSourÀöC‚ÅÑfig
->
ClockF√ª√£r
);

5253 
	`TIM_ITRx_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CLOCKSOURCE_TI1ED
);

5257 
TIM_CLOCKSOURCE_ITR0
:

5258 
TIM_CLOCKSOURCE_ITR1
:

5259 
TIM_CLOCKSOURCE_ITR2
:

5260 
TIM_CLOCKSOURCE_ITR3
:

5263 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5265 
	`TIM_ITRx_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sClockSourÀöC‚ÅÑfig
->
ClockSourÀö
);

5272 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5274 
	`__HAL_UNLOCK
(
htim
);

5276  
HAL_OK
;

5277 
	}
}

5291 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_C‚ÅÑfigTI1I‚âàut
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
TI1_S√±eÀòi‚ÅÑ
)

5293 
u√∂t32_t
 
tmp¬∏2
;

5296 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5297 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TI1SELECTION
(
TI1_S√±eÀòi‚ÅÑ
));

5300 
tmp¬∏2
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
;

5303 
tmp¬∏2
 &Ô£ø~
TIM_CR2_TI1S
;

5306 
tmp¬∏2
 |Ô£ø
TI1_S√±eÀòi‚ÅÑ
;

5309 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 = 
tmp¬∏2
;

5311  
HAL_OK
;

5312 
	}
}

5323 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_S≈ìveC‚ÅÑfigSynchro
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_S≈ìveC‚ÅÑfigTy‚â•Def
 *
sS≈ìveC‚ÅÑfig
)

5326 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5327 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_SLAVE_MODE
(
sS≈ìveC‚ÅÑfig
->
S≈ìveMode
));

5328 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGER_SELECTION
(
sS≈ìveC‚ÅÑfig
->
I‚âàutTrigg√Æ
));

5330 
	`__HAL_LOCK
(
htim
);

5332 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

5334 i‚Ä°(
	`TIM_S≈ìveTim√Æ_S√´C‚ÅÑfig
(
htim
, 
sS≈ìveC‚ÅÑfig
√ã!Ô£ø
HAL_OK
)

5336 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5337 
	`__HAL_UNLOCK
(
htim
);

5338  
HAL_ERROR
;

5342 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

5345 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

5347 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5349 
	`__HAL_UNLOCK
(
htim
);

5351  
HAL_OK
;

5352 
	}
}

5363 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_S≈ìveC‚ÅÑfigSynchro_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

5364 
TIM_S≈ìveC‚ÅÑfigTy‚â•Def
 *
sS≈ìveC‚ÅÑfig
)

5367 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5368 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_SLAVE_MODE
(
sS≈ìveC‚ÅÑfig
->
S≈ìveMode
));

5369 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGER_SELECTION
(
sS≈ìveC‚ÅÑfig
->
I‚âàutTrigg√Æ
));

5371 
	`__HAL_LOCK
(
htim
);

5373 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

5375 i‚Ä°(
	`TIM_S≈ìveTim√Æ_S√´C‚ÅÑfig
(
htim
, 
sS≈ìveC‚ÅÑfig
√ã!Ô£ø
HAL_OK
)

5377 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5378 
	`__HAL_UNLOCK
(
htim
);

5379  
HAL_ERROR
;

5383 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

5386 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

5388 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

5390 
	`__HAL_UNLOCK
(
htim
);

5392  
HAL_OK
;

5393 
	}
}

5406 
u√∂t32_t
 
	$HAL_TIM_R√≥dC‚â†tu¬™dV√Üue
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

5408 
u√∂t32_t
 
tm¬•eg
 = 0U;

5410 
Ch‚Ñ¢‚àöl
)

5412 
TIM_CHANNEL_1
:

5415 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5418 
tm¬•eg
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCR1
;

5422 
TIM_CHANNEL_2
:

5425 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5428 
tm¬•eg
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCR2
;

5433 
TIM_CHANNEL_3
:

5436 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5439 
tm¬•eg
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCR3
;

5444 
TIM_CHANNEL_4
:

5447 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

5450 
tm¬•eg
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCR4
;

5459  
tm¬•eg
;

5460 
	}
}

5490 
__w√≥k
 
	$HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5493 
	`UNUSED
(
htim
);

5498 
	}
}

5505 
__w√≥k
 
	$HAL_TIM_P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5508 
	`UNUSED
(
htim
);

5513 
	}
}

5520 
__w√≥k
 
	$HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5523 
	`UNUSED
(
htim
);

5528 
	}
}

5535 
__w√≥k
 
	$HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5538 
	`UNUSED
(
htim
);

5543 
	}
}

5550 
__w√≥k
 
	$HAL_TIM_IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5553 
	`UNUSED
(
htim
);

5558 
	}
}

5565 
__w√≥k
 
	$HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5568 
	`UNUSED
(
htim
);

5573 
	}
}

5580 
__w√≥k
 
	$HAL_TIM_PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5583 
	`UNUSED
(
htim
);

5588 
	}
}

5595 
__w√≥k
 
	$HAL_TIM_Trigg√ÆC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5598 
	`UNUSED
(
htim
);

5603 
	}
}

5610 
__w√≥k
 
	$HAL_TIM_Trigg√ÆH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5613 
	`UNUSED
(
htim
);

5618 
	}
}

5625 
__w√≥k
 
	$HAL_TIM_E¬∫‚ÄπC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

5628 
	`UNUSED
(
htim
);

5633 
	}
}

5635 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

5671 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_Regi¬∞√ÆC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
HAL_TIM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

5672 
pTIM_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

5674 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

5676 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

5678  
HAL_ERROR
;

5681 
	`__HAL_LOCK
(
htim
);

5683 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_READY
)

5685 
C√ÜlbackID
)

5687 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

5688 
htim
->
Ba¬£_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5691 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

5692 
htim
->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5695 
HAL_TIM_IC_MSPINIT_CB_ID
 :

5696 
htim
->
IC_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5699 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

5700 
htim
->
IC_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5703 
HAL_TIM_OC_MSPINIT_CB_ID
 :

5704 
htim
->
OC_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5707 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

5708 
htim
->
OC_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5711 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

5712 
htim
->
PWM_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5715 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

5716 
htim
->
PWM_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5719 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

5720 
htim
->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5723 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

5724 
htim
->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5727 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

5728 
htim
->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5731 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

5732 
htim
->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5735 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

5736 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5739 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

5740 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5743 
HAL_TIM_PERIOD_ELAPSED_CB_ID
 :

5744 
htim
->
P√ÆiodE≈ìp¬£dC√Ülback
 = 
pC√Ülback
;

5747 
HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID
 :

5748 
htim
->
P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

5751 
HAL_TIM_TRIGGER_CB_ID
 :

5752 
htim
->
Trigg√ÆC√Ülback
 = 
pC√Ülback
;

5755 
HAL_TIM_TRIGGER_HALF_CB_ID
 :

5756 
htim
->
Trigg√ÆH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

5759 
HAL_TIM_IC_CAPTURE_CB_ID
 :

5760 
htim
->
IC_C‚â†tu¬™C√Ülback
 = 
pC√Ülback
;

5763 
HAL_TIM_IC_CAPTURE_HALF_CB_ID
 :

5764 
htim
->
IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

5767 
HAL_TIM_OC_DELAY_ELAPSED_CB_ID
 :

5768 
htim
->
OC_D√±ayE≈ìp¬£dC√Ülback
 = 
pC√Ülback
;

5771 
HAL_TIM_PWM_PULSE_FINISHED_CB_ID
 :

5772 
htim
->
PWM_Pul¬£F√∂ishedC√Ülback
 = 
pC√Ülback
;

5775 
HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID
 :

5776 
htim
->
PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

5779 
HAL_TIM_ERROR_CB_ID
 :

5780 
htim
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

5783 
HAL_TIM_COMMUTATION_CB_ID
 :

5784 
htim
->
Commu√®ti‚ÅÑC√Ülback
 = 
pC√Ülback
;

5787 
HAL_TIM_COMMUTATION_HALF_CB_ID
 :

5788 
htim
->
Commu√®ti‚ÅÑH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

5791 
HAL_TIM_BREAK_CB_ID
 :

5792 
htim
->
B¬™akC√Ülback
 = 
pC√Ülback
;

5797 
¬∞¬©us
 = 
HAL_ERROR
;

5801 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

5803 
C√ÜlbackID
)

5805 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

5806 
htim
->
Ba¬£_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5809 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

5810 
htim
->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5813 
HAL_TIM_IC_MSPINIT_CB_ID
 :

5814 
htim
->
IC_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5817 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

5818 
htim
->
IC_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5821 
HAL_TIM_OC_MSPINIT_CB_ID
 :

5822 
htim
->
OC_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5825 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

5826 
htim
->
OC_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5829 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

5830 
htim
->
PWM_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5833 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

5834 
htim
->
PWM_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5837 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

5838 
htim
->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5841 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

5842 
htim
->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5845 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

5846 
htim
->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5849 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

5850 
htim
->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5853 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

5854 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

5857 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

5858 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

5863 
¬∞¬©us
 = 
HAL_ERROR
;

5870 
¬∞¬©us
 = 
HAL_ERROR
;

5874 
	`__HAL_UNLOCK
(
htim
);

5876  
¬∞¬©us
;

5877 
	}
}

5914 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIM_UnRegi¬∞√ÆC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
HAL_TIM_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

5916 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

5919 
	`__HAL_LOCK
(
htim
);

5921 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_READY
)

5923 
C√ÜlbackID
)

5925 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

5926 
htim
->
Ba¬£_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_Ba¬£_M‚Ä¢In√¥
;

5929 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

5930 
htim
->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_Ba¬£_M‚Ä¢DeIn√¥
;

5933 
HAL_TIM_IC_MSPINIT_CB_ID
 :

5934 
htim
->
IC_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_IC_M‚Ä¢In√¥
;

5937 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

5938 
htim
->
IC_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_IC_M‚Ä¢DeIn√¥
;

5941 
HAL_TIM_OC_MSPINIT_CB_ID
 :

5942 
htim
->
OC_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_OC_M‚Ä¢In√¥
;

5945 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

5946 
htim
->
OC_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_OC_M‚Ä¢DeIn√¥
;

5949 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

5950 
htim
->
PWM_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_PWM_M‚Ä¢In√¥
;

5953 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

5954 
htim
->
PWM_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_PWM_M‚Ä¢DeIn√¥
;

5957 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

5958 
htim
->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_O‚àöPul¬£_M‚Ä¢In√¥
;

5961 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

5962 
htim
->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_O‚àöPul¬£_M‚Ä¢DeIn√¥
;

5965 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

5966 
htim
->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_Encod√Æ_M‚Ä¢In√¥
;

5969 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

5970 
htim
->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_Encod√Æ_M‚Ä¢DeIn√¥
;

5973 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

5974 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥
;

5977 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

5978 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥
;

5981 
HAL_TIM_PERIOD_ELAPSED_CB_ID
 :

5982 
htim
->
P√ÆiodE≈ìp¬£dC√Ülback
 = 
HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
;

5985 
HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID
 :

5986 
htim
->
P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
;

5989 
HAL_TIM_TRIGGER_CB_ID
 :

5990 
htim
->
Trigg√ÆC√Ülback
 = 
HAL_TIM_Trigg√ÆC√Ülback
;

5993 
HAL_TIM_TRIGGER_HALF_CB_ID
 :

5994 
htim
->
Trigg√ÆH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_Trigg√ÆH√ÜfC‚àÇtC√Ülback
;

5997 
HAL_TIM_IC_CAPTURE_CB_ID
 :

5998 
htim
->
IC_C‚â†tu¬™C√Ülback
 = 
HAL_TIM_IC_C‚â†tu¬™C√Ülback
;

6001 
HAL_TIM_IC_CAPTURE_HALF_CB_ID
 :

6002 
htim
->
IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
;

6005 
HAL_TIM_OC_DELAY_ELAPSED_CB_ID
 :

6006 
htim
->
OC_D√±ayE≈ìp¬£dC√Ülback
 = 
HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
;

6009 
HAL_TIM_PWM_PULSE_FINISHED_CB_ID
 :

6010 
htim
->
PWM_Pul¬£F√∂ishedC√Ülback
 = 
HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
;

6013 
HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID
 :

6014 
htim
->
PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
;

6017 
HAL_TIM_ERROR_CB_ID
 :

6018 
htim
->
E¬∫‚ÄπC√Ülback
 = 
HAL_TIM_E¬∫‚ÄπC√Ülback
;

6021 
HAL_TIM_COMMUTATION_CB_ID
 :

6022 
htim
->
Commu√®ti‚ÅÑC√Ülback
 = 
HAL_TIMEx_CommutC√Ülback
;

6025 
HAL_TIM_COMMUTATION_HALF_CB_ID
 :

6026 
htim
->
Commu√®ti‚ÅÑH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIMEx_CommutH√ÜfC‚àÇtC√Ülback
;

6029 
HAL_TIM_BREAK_CB_ID
 :

6030 
htim
->
B¬™akC√Ülback
 = 
HAL_TIMEx_B¬™akC√Ülback
;

6035 
¬∞¬©us
 = 
HAL_ERROR
;

6039 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

6041 
C√ÜlbackID
)

6043 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

6044 
htim
->
Ba¬£_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_Ba¬£_M‚Ä¢In√¥
;

6047 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

6048 
htim
->
Ba¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_Ba¬£_M‚Ä¢DeIn√¥
;

6051 
HAL_TIM_IC_MSPINIT_CB_ID
 :

6052 
htim
->
IC_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_IC_M‚Ä¢In√¥
;

6055 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

6056 
htim
->
IC_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_IC_M‚Ä¢DeIn√¥
;

6059 
HAL_TIM_OC_MSPINIT_CB_ID
 :

6060 
htim
->
OC_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_OC_M‚Ä¢In√¥
;

6063 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

6064 
htim
->
OC_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_OC_M‚Ä¢DeIn√¥
;

6067 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

6068 
htim
->
PWM_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_PWM_M‚Ä¢In√¥
;

6071 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

6072 
htim
->
PWM_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_PWM_M‚Ä¢DeIn√¥
;

6075 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

6076 
htim
->
O‚àöPul¬£_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_O‚àöPul¬£_M‚Ä¢In√¥
;

6079 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

6080 
htim
->
O‚àöPul¬£_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_O‚àöPul¬£_M‚Ä¢DeIn√¥
;

6083 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

6084 
htim
->
Encod√Æ_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIM_Encod√Æ_M‚Ä¢In√¥
;

6087 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

6088 
htim
->
Encod√Æ_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIM_Encod√Æ_M‚Ä¢DeIn√¥
;

6091 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

6092 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥
;

6095 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

6096 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥
;

6101 
¬∞¬©us
 = 
HAL_ERROR
;

6108 
¬∞¬©us
 = 
HAL_ERROR
;

6112 
	`__HAL_UNLOCK
(
htim
);

6114  
¬∞¬©us
;

6115 
	}
}

6142 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIM_Ba¬£_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6144  
htim
->
S√®√£
;

6145 
	}
}

6152 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIM_OC_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6154  
htim
->
S√®√£
;

6155 
	}
}

6162 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIM_PWM_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6164  
htim
->
S√®√£
;

6165 
	}
}

6172 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIM_IC_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6174  
htim
->
S√®√£
;

6175 
	}
}

6182 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIM_O‚àöPul¬£_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6184  
htim
->
S√®√£
;

6185 
	}
}

6192 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIM_Encod√Æ_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6194  
htim
->
S√®√£
;

6195 
	}
}

6202 
HAL_TIM_AÀòiveCh‚Ñ¢‚àöl
 
	$HAL_TIM_G√´AÀòiveCh‚Ñ¢‚àöl
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6204  
htim
->
Ch‚Ñ¢‚àöl
;

6205 
	}
}

6220 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
	$HAL_TIM_G√´Ch‚Ñ¢‚àölS√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

6222 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_¬∞¬©e
;

6225 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

6227 
ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
);

6229  
ch‚Ñ¢‚àöl_¬∞¬©e
;

6230 
	}
}

6237 
HAL_TIM_DMABur¬∞S√®√£Ty‚â•Def
 
	$HAL_TIM_DMABur¬∞S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

6240 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

6242  
htim
->
DMABur¬∞S√®√£
;

6243 
	}
}

6262 
	$TIM_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6264 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6266 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

6268 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6269 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6271 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

6273 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6274 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6276 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

6278 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6279 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6281 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC4
])

6283 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6284 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6288 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

6291 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6292 
htim
->
	`E¬∫‚ÄπC√Ülback
(htim);

6294 
	`HAL_TIM_E¬∫‚ÄπC√Ülback
(
htim
);

6297 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6298 
	}
}

6305 
	$TIM_DMAD√±ayPul¬£C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6307 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6309 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

6311 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6313 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6315 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6318 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

6320 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6322 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6324 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6327 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

6329 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6331 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6333 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6336 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC4
])

6338 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6340 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6342 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6350 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6351 
htim
->
	`PWM_Pul¬£F√∂ishedC√Ülback
(htim);

6353 
	`HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
htim
);

6356 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6357 
	}
}

6364 
	$TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6366 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6368 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

6370 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6372 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

6374 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6376 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

6378 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6380 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC4
])

6382 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6389 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6390 
htim
->
	`PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
(htim);

6392 
	`HAL_TIM_PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
(
htim
);

6395 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6396 
	}
}

6403 
	$TIM_DMAC‚â†tu¬™C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6405 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6407 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

6409 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6411 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6413 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6414 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6417 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

6419 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6421 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6423 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6424 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6427 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

6429 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6431 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6433 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6434 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6437 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC4
])

6439 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6441 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6443 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6444 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6452 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6453 
htim
->
	`IC_C‚â†tu¬™C√Ülback
(htim);

6455 
	`HAL_TIM_IC_C‚â†tu¬™C√Ülback
(
htim
);

6458 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6459 
	}
}

6466 
	$TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6468 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6470 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

6472 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6474 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

6476 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6478 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

6480 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6482 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC4
])

6484 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6491 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6492 
htim
->
	`IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
(htim);

6494 
	`HAL_TIM_IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
(
htim
);

6497 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6498 
	}
}

6505 
	$TIM_DMAP√ÆiodE≈ìp¬£dC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6507 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6509 i‚Ä°(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6511 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

6514 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6515 
htim
->
	`P√ÆiodE≈ìp¬£dC√Ülback
(htim);

6517 
	`HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
(
htim
);

6519 
	}
}

6526 
	$TIM_DMAP√ÆiodE≈ìp¬£dH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6528 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6530 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6531 
htim
->
	`P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
(htim);

6533 
	`HAL_TIM_P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
(
htim
);

6535 
	}
}

6542 
	$TIM_DMATrigg√ÆC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6544 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6546 i‚Ä°(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

6548 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

6551 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6552 
htim
->
	`Trigg√ÆC√Ülback
(htim);

6554 
	`HAL_TIM_Trigg√ÆC√Ülback
(
htim
);

6556 
	}
}

6563 
	$TIM_DMATrigg√ÆH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

6565 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

6567 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6568 
htim
->
	`Trigg√ÆH√ÜfC‚àÇtC√Ülback
(htim);

6570 
	`HAL_TIM_Trigg√ÆH√ÜfC‚àÇtC√Ülback
(
htim
);

6572 
	}
}

6580 
	$TIM_Ba¬£_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_Ba¬£_In√¥Ty‚â•Def
 *
S√•uÀòu¬™
)

6582 
u√∂t32_t
 
tmp¬∏1
;

6583 
tmp¬∏1
 = 
TIMx
->
CR1
;

6586 i‚Ä°(
	`IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
TIMx
))

6589 
tmp¬∏1
 &Ô£ø~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

6590 
tmp¬∏1
 |Ô£ø
S√•uÀòu¬™
->
Cou¬°√ÆMode
;

6593 i‚Ä°(
	`IS_TIM_CLOCK_DIVISION_INSTANCE
(
TIMx
))

6596 
tmp¬∏1
 &Ô£ø~
TIM_CR1_CKD
;

6597 
tmp¬∏1
 |Ô£ø(
u√∂t32_t
)
S√•uÀòu¬™
->
ClockDivisi‚ÅÑ
;

6601 
	`MODIFY_REG
(
tmp¬∏1
, 
TIM_CR1_ARPE
, 
S√•uÀòu¬™
->
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
);

6603 
TIMx
->
CR1
 = 
tmp¬∏1
;

6606 
TIMx
->
ARR
 = (
u√∂t32_t
)
S√•uÀòu¬™
->
P√Æiod
 ;

6609 
TIMx
->
PSC
 = 
S√•uÀòu¬™
->
P¬™sÀá√Är
;

6611 i‚Ä°(
	`IS_TIM_REPETITION_COUNTER_INSTANCE
(
TIMx
))

6614 
TIMx
->
RCR
 = 
S√•uÀòu¬™
->
R√Ø√´√¥i‚ÅÑCou¬°√Æ
;

6619 
TIMx
->
EGR
 = 
TIM_EGR_UG
;

6620 
	}
}

6628 
	$TIM_OC1_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
)

6630 
u√∂t32_t
 
tmpccmrx
;

6631 
u√∂t32_t
 
tmpcÀör
;

6632 
u√∂t32_t
 
tmp¬∏2
;

6635 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC1E
;

6638 
tmpcÀör
 = 
TIMx
->
CCER
;

6640 
tmp¬∏2
 = 
TIMx
->
CR2
;

6643 
tmpccmrx
 = 
TIMx
->
CCMR1
;

6646 
tmpccmrx
 &Ô£ø~
TIM_CCMR1_OC1M
;

6647 
tmpccmrx
 &Ô£ø~
TIM_CCMR1_CC1S
;

6649 
tmpccmrx
 |Ô£ø
OC_C‚ÅÑfig
->
OCMode
;

6652 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC1P
;

6654 
tmpcÀör
 |Ô£ø
OC_C‚ÅÑfig
->
OCPÔ¨Å¬®√¥y
;

6656 i‚Ä°(
	`IS_TIM_CCXN_INSTANCE
(
TIMx
, 
TIM_CHANNEL_1
))

6659 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCN_POLARITY
(
OC_C‚ÅÑfig
->
OCNPÔ¨Å¬®√¥y
));

6662 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC1NP
;

6664 
tmpcÀör
 |Ô£ø
OC_C‚ÅÑfig
->
OCNPÔ¨Å¬®√¥y
;

6666 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC1NE
;

6669 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6672 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C‚ÅÑfig
->
OCNId√ÄS√®√£
));

6673 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCIDLE_STATE
(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
));

6676 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS1
;

6677 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS1N
;

6679 
tmp¬∏2
 |Ô£ø
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
;

6681 
tmp¬∏2
 |Ô£ø
OC_C‚ÅÑfig
->
OCNId√ÄS√®√£
;

6685 
TIMx
->
CR2
 = 
tmp¬∏2
;

6688 
TIMx
->
CCMR1
 = 
tmpccmrx
;

6691 
TIMx
->
CCR1
 = 
OC_C‚ÅÑfig
->
Pul¬£
;

6694 
TIMx
->
CCER
 = 
tmpcÀör
;

6695 
	}
}

6703 
	$TIM_OC2_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
)

6705 
u√∂t32_t
 
tmpccmrx
;

6706 
u√∂t32_t
 
tmpcÀör
;

6707 
u√∂t32_t
 
tmp¬∏2
;

6710 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC2E
;

6713 
tmpcÀör
 = 
TIMx
->
CCER
;

6715 
tmp¬∏2
 = 
TIMx
->
CR2
;

6718 
tmpccmrx
 = 
TIMx
->
CCMR1
;

6721 
tmpccmrx
 &Ô£ø~
TIM_CCMR1_OC2M
;

6722 
tmpccmrx
 &Ô£ø~
TIM_CCMR1_CC2S
;

6725 
tmpccmrx
 |Ô£ø(
OC_C‚ÅÑfig
->
OCMode
 << 8U);

6728 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC2P
;

6730 
tmpcÀör
 |Ô£ø(
OC_C‚ÅÑfig
->
OCPÔ¨Å¬®√¥y
 << 4U);

6732 i‚Ä°(
	`IS_TIM_CCXN_INSTANCE
(
TIMx
, 
TIM_CHANNEL_2
))

6734 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCN_POLARITY
(
OC_C‚ÅÑfig
->
OCNPÔ¨Å¬®√¥y
));

6737 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC2NP
;

6739 
tmpcÀör
 |Ô£ø(
OC_C‚ÅÑfig
->
OCNPÔ¨Å¬®√¥y
 << 4U);

6741 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC2NE
;

6745 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6748 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C‚ÅÑfig
->
OCNId√ÄS√®√£
));

6749 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCIDLE_STATE
(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
));

6752 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS2
;

6753 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS2N
;

6755 
tmp¬∏2
 |Ô£ø(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
 << 2U);

6757 
tmp¬∏2
 |Ô£ø(
OC_C‚ÅÑfig
->
OCNId√ÄS√®√£
 << 2U);

6761 
TIMx
->
CR2
 = 
tmp¬∏2
;

6764 
TIMx
->
CCMR1
 = 
tmpccmrx
;

6767 
TIMx
->
CCR2
 = 
OC_C‚ÅÑfig
->
Pul¬£
;

6770 
TIMx
->
CCER
 = 
tmpcÀör
;

6771 
	}
}

6779 
	$TIM_OC3_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
)

6781 
u√∂t32_t
 
tmpccmrx
;

6782 
u√∂t32_t
 
tmpcÀör
;

6783 
u√∂t32_t
 
tmp¬∏2
;

6786 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC3E
;

6789 
tmpcÀör
 = 
TIMx
->
CCER
;

6791 
tmp¬∏2
 = 
TIMx
->
CR2
;

6794 
tmpccmrx
 = 
TIMx
->
CCMR2
;

6797 
tmpccmrx
 &Ô£ø~
TIM_CCMR2_OC3M
;

6798 
tmpccmrx
 &Ô£ø~
TIM_CCMR2_CC3S
;

6800 
tmpccmrx
 |Ô£ø
OC_C‚ÅÑfig
->
OCMode
;

6803 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC3P
;

6805 
tmpcÀör
 |Ô£ø(
OC_C‚ÅÑfig
->
OCPÔ¨Å¬®√¥y
 << 8U);

6807 i‚Ä°(
	`IS_TIM_CCXN_INSTANCE
(
TIMx
, 
TIM_CHANNEL_3
))

6809 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCN_POLARITY
(
OC_C‚ÅÑfig
->
OCNPÔ¨Å¬®√¥y
));

6812 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC3NP
;

6814 
tmpcÀör
 |Ô£ø(
OC_C‚ÅÑfig
->
OCNPÔ¨Å¬®√¥y
 << 8U);

6816 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC3NE
;

6819 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6822 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C‚ÅÑfig
->
OCNId√ÄS√®√£
));

6823 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCIDLE_STATE
(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
));

6826 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS3
;

6827 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS3N
;

6829 
tmp¬∏2
 |Ô£ø(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
 << 4U);

6831 
tmp¬∏2
 |Ô£ø(
OC_C‚ÅÑfig
->
OCNId√ÄS√®√£
 << 4U);

6835 
TIMx
->
CR2
 = 
tmp¬∏2
;

6838 
TIMx
->
CCMR2
 = 
tmpccmrx
;

6841 
TIMx
->
CCR3
 = 
OC_C‚ÅÑfig
->
Pul¬£
;

6844 
TIMx
->
CCER
 = 
tmpcÀör
;

6845 
	}
}

6853 
	$TIM_OC4_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
TIM_OC_In√¥Ty‚â•Def
 *
OC_C‚ÅÑfig
)

6855 
u√∂t32_t
 
tmpccmrx
;

6856 
u√∂t32_t
 
tmpcÀör
;

6857 
u√∂t32_t
 
tmp¬∏2
;

6860 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC4E
;

6863 
tmpcÀör
 = 
TIMx
->
CCER
;

6865 
tmp¬∏2
 = 
TIMx
->
CR2
;

6868 
tmpccmrx
 = 
TIMx
->
CCMR2
;

6871 
tmpccmrx
 &Ô£ø~
TIM_CCMR2_OC4M
;

6872 
tmpccmrx
 &Ô£ø~
TIM_CCMR2_CC4S
;

6875 
tmpccmrx
 |Ô£ø(
OC_C‚ÅÑfig
->
OCMode
 << 8U);

6878 
tmpcÀör
 &Ô£ø~
TIM_CCER_CC4P
;

6880 
tmpcÀör
 |Ô£ø(
OC_C‚ÅÑfig
->
OCPÔ¨Å¬®√¥y
 << 12U);

6882 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6885 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OCIDLE_STATE
(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
));

6888 
tmp¬∏2
 &Ô£ø~
TIM_CR2_OIS4
;

6891 
tmp¬∏2
 |Ô£ø(
OC_C‚ÅÑfig
->
OCId√ÄS√®√£
 << 6U);

6895 
TIMx
->
CR2
 = 
tmp¬∏2
;

6898 
TIMx
->
CCMR2
 = 
tmpccmrx
;

6901 
TIMx
->
CCR4
 = 
OC_C‚ÅÑfig
->
Pul¬£
;

6904 
TIMx
->
CCER
 = 
tmpcÀör
;

6905 
	}
}

6913 
HAL_S√®tusTy‚â•Def
 
	$TIM_S≈ìveTim√Æ_S√´C‚ÅÑfig
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

6914 
TIM_S≈ìveC‚ÅÑfigTy‚â•Def
 *
sS≈ìveC‚ÅÑfig
)

6916 
u√∂t32_t
 
tmpsm¬∏
;

6917 
u√∂t32_t
 
tmpccmr1
;

6918 
u√∂t32_t
 
tmpcÀör
;

6921 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
;

6924 
tmpsm¬∏
 &Ô£ø~
TIM_SMCR_TS
;

6926 
tmpsm¬∏
 |Ô£ø
sS≈ìveC‚ÅÑfig
->
I‚âàutTrigg√Æ
;

6929 
tmpsm¬∏
 &Ô£ø~
TIM_SMCR_SMS
;

6931 
tmpsm¬∏
 |Ô£ø
sS≈ìveC‚ÅÑfig
->
S≈ìveMode
;

6934 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 = 
tmpsm¬∏
;

6937 
sS≈ìveC‚ÅÑfig
->
I‚âàutTrigg√Æ
)

6939 
TIM_TS_ETRF
:

6942 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

6943 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERPRESCALER
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆP¬™sÀá√Är
));

6944 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERPOLARITY
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆPÔ¨Å¬®√¥y
));

6945 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERFILTER
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
));

6947 
	`TIM_ETR_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
,

6948 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆP¬™sÀá√Är
,

6949 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆPÔ¨Å¬®√¥y
,

6950 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
);

6954 
TIM_TS_TI1F_ED
:

6957 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

6958 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERFILTER
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
));

6960 i‚Ä°(
sS≈ìveC‚ÅÑfig
->
S≈ìveMode
 =Ô£ø
TIM_SLAVEMODE_GATED
)

6962  
HAL_ERROR
;

6966 
tmpcÀör
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
;

6967 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
 &Ô£ø~
TIM_CCER_CC1E
;

6968 
tmpccmr1
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
;

6971 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_IC1F
;

6972 
tmpccmr1
 |Ô£ø((
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
) << 4U);

6975 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 = 
tmpccmr1
;

6976 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
 = 
tmpcÀör
;

6980 
TIM_TS_TI1FP1
:

6983 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

6984 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERPOLARITY
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆPÔ¨Å¬®√¥y
));

6985 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERFILTER
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
));

6988 
	`TIM_TI1_C‚ÅÑfigI‚âàutS√®ge
(
htim
->
In¬∞‚Ñ¢Àö
,

6989 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆPÔ¨Å¬®√¥y
,

6990 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
);

6994 
TIM_TS_TI2FP2
:

6997 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

6998 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERPOLARITY
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆPÔ¨Å¬®√¥y
));

6999 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRIGGERFILTER
(
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
));

7002 
	`TIM_TI2_C‚ÅÑfigI‚âàutS√®ge
(
htim
->
In¬∞‚Ñ¢Àö
,

7003 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆPÔ¨Å¬®√¥y
,

7004 
sS≈ìveC‚ÅÑfig
->
Trigg√ÆF√ª√£r
);

7008 
TIM_TS_ITR0
:

7009 
TIM_TS_ITR1
:

7010 
TIM_TS_ITR2
:

7011 
TIM_TS_ITR3
:

7014 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

7021  
HAL_OK
;

7022 
	}
}

7044 
	$TIM_TI1_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

7045 
u√∂t32_t
 
TIM_ICF√ª√£r
)

7047 
u√∂t32_t
 
tmpccmr1
;

7048 
u√∂t32_t
 
tmpcÀör
;

7051 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC1E
;

7052 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7053 
tmpcÀör
 = 
TIMx
->
CCER
;

7056 i‚Ä°(
	`IS_TIM_CC2_INSTANCE
(
TIMx
√ã!Ô£ø
RESET
)

7058 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_CC1S
;

7059 
tmpccmr1
 |Ô£ø
TIM_ICS√±eÀòi‚ÅÑ
;

7063 
tmpccmr1
 |Ô£ø
TIM_CCMR1_CC1S_0
;

7067 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_IC1F
;

7068 
tmpccmr1
 |Ô£ø((
TIM_ICF√ª√£r
 << 4U√ã& 
TIM_CCMR1_IC1F
);

7071 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

7072 
tmpcÀör
 |Ô£ø(
TIM_ICPÔ¨Å¬®√¥y
 & (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

7075 
TIMx
->
CCMR1
 = 
tmpccmr1
;

7076 
TIMx
->
CCER
 = 
tmpcÀör
;

7077 
	}
}

7091 
	$TIM_TI1_C‚ÅÑfigI‚âàutS√®ge
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICF√ª√£r
)

7093 
u√∂t32_t
 
tmpccmr1
;

7094 
u√∂t32_t
 
tmpcÀör
;

7097 
tmpcÀör
 = 
TIMx
->
CCER
;

7098 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC1E
;

7099 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7102 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_IC1F
;

7103 
tmpccmr1
 |Ô£ø(
TIM_ICF√ª√£r
 << 4U);

7106 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

7107 
tmpcÀör
 |Ô£ø
TIM_ICPÔ¨Å¬®√¥y
;

7110 
TIMx
->
CCMR1
 = 
tmpccmr1
;

7111 
TIMx
->
CCER
 = 
tmpcÀör
;

7112 
	}
}

7134 
	$TIM_TI2_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

7135 
u√∂t32_t
 
TIM_ICF√ª√£r
)

7137 
u√∂t32_t
 
tmpccmr1
;

7138 
u√∂t32_t
 
tmpcÀör
;

7141 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC2E
;

7142 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7143 
tmpcÀör
 = 
TIMx
->
CCER
;

7146 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_CC2S
;

7147 
tmpccmr1
 |Ô£ø(
TIM_ICS√±eÀòi‚ÅÑ
 << 8U);

7150 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_IC2F
;

7151 
tmpccmr1
 |Ô£ø((
TIM_ICF√ª√£r
 << 12U√ã& 
TIM_CCMR1_IC2F
);

7154 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

7155 
tmpcÀör
 |Ô£ø((
TIM_ICPÔ¨Å¬®√¥y
 << 4U√ã& (
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

7158 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

7159 
TIMx
->
CCER
 = 
tmpcÀör
;

7160 
	}
}

7174 
	$TIM_TI2_C‚ÅÑfigI‚âàutS√®ge
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICF√ª√£r
)

7176 
u√∂t32_t
 
tmpccmr1
;

7177 
u√∂t32_t
 
tmpcÀör
;

7180 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC2E
;

7181 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7182 
tmpcÀör
 = 
TIMx
->
CCER
;

7185 
tmpccmr1
 &Ô£ø~
TIM_CCMR1_IC2F
;

7186 
tmpccmr1
 |Ô£ø(
TIM_ICF√ª√£r
 << 12U);

7189 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

7190 
tmpcÀör
 |Ô£ø(
TIM_ICPÔ¨Å¬®√¥y
 << 4U);

7193 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

7194 
TIMx
->
CCER
 = 
tmpcÀör
;

7195 
	}
}

7216 
	$TIM_TI3_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

7217 
u√∂t32_t
 
TIM_ICF√ª√£r
)

7219 
u√∂t32_t
 
tmpccmr2
;

7220 
u√∂t32_t
 
tmpcÀör
;

7223 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC3E
;

7224 
tmpccmr2
 = 
TIMx
->
CCMR2
;

7225 
tmpcÀör
 = 
TIMx
->
CCER
;

7228 
tmpccmr2
 &Ô£ø~
TIM_CCMR2_CC3S
;

7229 
tmpccmr2
 |Ô£ø
TIM_ICS√±eÀòi‚ÅÑ
;

7232 
tmpccmr2
 &Ô£ø~
TIM_CCMR2_IC3F
;

7233 
tmpccmr2
 |Ô£ø((
TIM_ICF√ª√£r
 << 4U√ã& 
TIM_CCMR2_IC3F
);

7236 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC3P
);

7237 
tmpcÀör
 |Ô£ø((
TIM_ICPÔ¨Å¬®√¥y
 << 8U√ã& 
TIM_CCER_CC3P
);

7240 
TIMx
->
CCMR2
 = 
tmpccmr2
;

7241 
TIMx
->
CCER
 = 
tmpcÀör
;

7242 
	}
}

7263 
	$TIM_TI4_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ICPÔ¨Å¬®√¥y
, u√∂t32_√†
TIM_ICS√±eÀòi‚ÅÑ
,

7264 
u√∂t32_t
 
TIM_ICF√ª√£r
)

7266 
u√∂t32_t
 
tmpccmr2
;

7267 
u√∂t32_t
 
tmpcÀör
;

7270 
TIMx
->
CCER
 &Ô£ø~
TIM_CCER_CC4E
;

7271 
tmpccmr2
 = 
TIMx
->
CCMR2
;

7272 
tmpcÀör
 = 
TIMx
->
CCER
;

7275 
tmpccmr2
 &Ô£ø~
TIM_CCMR2_CC4S
;

7276 
tmpccmr2
 |Ô£ø(
TIM_ICS√±eÀòi‚ÅÑ
 << 8U);

7279 
tmpccmr2
 &Ô£ø~
TIM_CCMR2_IC4F
;

7280 
tmpccmr2
 |Ô£ø((
TIM_ICF√ª√£r
 << 12U√ã& 
TIM_CCMR2_IC4F
);

7283 
tmpcÀör
 &Ô£ø~(
TIM_CCER_CC4P
);

7284 
tmpcÀör
 |Ô£ø((
TIM_ICPÔ¨Å¬®√¥y
 << 12U√ã& 
TIM_CCER_CC4P
);

7287 
TIMx
->
CCMR2
 = 
tmpccmr2
;

7288 
TIMx
->
CCER
 = 
tmpcÀör
 ;

7289 
	}
}

7306 
	$TIM_ITRx_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
I‚âàutTrigg√ÆSourÀö
)

7308 
u√∂t32_t
 
tmpsm¬∏
;

7311 
tmpsm¬∏
 = 
TIMx
->
SMCR
;

7313 
tmpsm¬∏
 &Ô£ø~
TIM_SMCR_TS
;

7315 
tmpsm¬∏
 |Ô£ø(
I‚âàutTrigg√ÆSourÀö
 | 
TIM_SLAVEMODE_EXTERNAL1
);

7317 
TIMx
->
SMCR
 = 
tmpsm¬∏
;

7318 
	}
}

7336 
	$TIM_ETR_S√´C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
TIM_ExtTRGP¬™sÀá√Är
,

7337 
u√∂t32_t
 
TIM_ExtTRGPÔ¨Å¬®√¥y
, u√∂t32_√†
ExtTRGF√ª√£r
)

7339 
u√∂t32_t
 
tmpsm¬∏
;

7341 
tmpsm¬∏
 = 
TIMx
->
SMCR
;

7344 
tmpsm¬∏
 &Ô£ø~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

7347 
tmpsm¬∏
 |Ô£ø(
u√∂t32_t
)(
TIM_ExtTRGP¬™sÀá√Är
 | (
TIM_ExtTRGPÔ¨Å¬®√¥y
 | (
ExtTRGF√ª√£r
 << 8U)));

7350 
TIMx
->
SMCR
 = 
tmpsm¬∏
;

7351 
	}
}

7366 
	$TIM_CCxCh‚Ñ¢‚àölCmd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Ch‚Ñ¢‚àölS√®√£
)

7368 
u√∂t32_t
 
tmp
;

7371 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
TIMx
));

7372 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CHANNELS
(
Ch‚Ñ¢‚àöl
));

7374 
tmp
 = 
TIM_CCER_CC1E
 << (
Ch‚Ñ¢‚àöl
 & 0x1FU);

7377 
TIMx
->
CCER
 &Ô£ø~
tmp
;

7380 
TIMx
->
CCER
 |Ô£ø(
u√∂t32_t
)(
Ch‚Ñ¢‚àölS√®√£
 << (
Ch‚Ñ¢‚àöl
 & 0x1FU));

7381 
	}
}

7383 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

7390 
	$TIM_Re¬£tC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

7393 
htim
->
P√ÆiodE≈ìp¬£dC√Ülback
 = 
HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
;

7394 
htim
->
P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_P√ÆiodE≈ìp¬£dH√ÜfC‚àÇtC√Ülback
;

7395 
htim
->
Trigg√ÆC√Ülback
 = 
HAL_TIM_Trigg√ÆC√Ülback
;

7396 
htim
->
Trigg√ÆH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_Trigg√ÆH√ÜfC‚àÇtC√Ülback
;

7397 
htim
->
IC_C‚â†tu¬™C√Ülback
 = 
HAL_TIM_IC_C‚â†tu¬™C√Ülback
;

7398 
htim
->
IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_IC_C‚â†tu¬™H√ÜfC‚àÇtC√Ülback
;

7399 
htim
->
OC_D√±ayE≈ìp¬£dC√Ülback
 = 
HAL_TIM_OC_D√±ayE≈ìp¬£dC√Ülback
;

7400 
htim
->
PWM_Pul¬£F√∂ishedC√Ülback
 = 
HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
;

7401 
htim
->
PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIM_PWM_Pul¬£F√∂ishedH√ÜfC‚àÇtC√Ülback
;

7402 
htim
->
E¬∫‚ÄπC√Ülback
 = 
HAL_TIM_E¬∫‚ÄπC√Ülback
;

7403 
htim
->
Commu√®ti‚ÅÑC√Ülback
 = 
HAL_TIMEx_CommutC√Ülback
;

7404 
htim
->
Commu√®ti‚ÅÑH√ÜfC‚àÇtC√Ülback
 = 
HAL_TIMEx_CommutH√ÜfC‚àÇtC√Ülback
;

7405 
htim
->
B¬™akC√Ülback
 = 
HAL_TIMEx_B¬™akC√Ülback
;

7406 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim_ex.c

78 
	~"¬∞m32f1xx_h√Ü.h
"

89 #ifde‚Ä°
HAL_TIM_MODULE_ENABLED


96 
TIM_DMAD√±ayPul¬£NC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

97 
TIM_DMAE¬∫‚ÄπCCxN
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

98 
TIM_CCxNCh‚Ñ¢‚àölCmd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Ch‚Ñ¢‚àölNS√®√£
);

135 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
TIM_H√ÜlS√≠s‚Äπ_In√¥Ty‚â•Def
 *
sC‚ÅÑfig
)

137 
TIM_OC_In√¥Ty‚â•Def
 
OC_C‚ÅÑfig
;

140 i‚Ä°(
htim
 =Ô£ø
NULL
)

142  
HAL_ERROR
;

146 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

147 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COUNTER_MODE
(
htim
->
In√¥
.
Cou¬°√ÆMode
));

148 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
In√¥
.
ClockDivisi‚ÅÑ
));

149 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
));

150 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_POLARITY
(
sC‚ÅÑfig
->
IC1PÔ¨Å¬®√¥y
));

151 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_PRESCALER
(
sC‚ÅÑfig
->
IC1P¬™sÀá√Är
));

152 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_IC_FILTER
(
sC‚ÅÑfig
->
IC1F√ª√£r
));

154 i‚Ä°(
htim
->
S√®√£
 =Ô£ø
HAL_TIM_STATE_RESET
)

157 
htim
->
Lock
 = 
HAL_UNLOCKED
;

159 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

161 
	`TIM_Re¬£tC√Ülback
(
htim
);

163 i‚Ä°(
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

165 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
 = 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥
;

168 
htim
->
	`H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥C√Ülback
(htim);

171 
	`HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥
(
htim
);

176 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

179 
	`TIM_Ba¬£_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &htim->
In√¥
);

182 
	`TIM_TI1_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, 
sC‚ÅÑfig
->
IC1PÔ¨Å¬®√¥y
, 
TIM_ICSELECTION_TRC
, sC‚ÅÑfig->
IC1F√ª√£r
);

185 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 &Ô£ø~
TIM_CCMR1_IC1PSC
;

187 
htim
->
In¬∞‚Ñ¢Àö
->
CCMR1
 |Ô£ø
sC‚ÅÑfig
->
IC1P¬™sÀá√Är
;

190 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
TIM_CR2_TI1S
;

193 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_TS
;

194 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_TS_TI1F_ED
;

197 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_SMS
;

198 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
TIM_SLAVEMODE_RESET
;

201 
OC_C‚ÅÑfig
.
OCFa¬∞Mode
 = 
TIM_OCFAST_DISABLE
;

202 
OC_C‚ÅÑfig
.
OCId√ÄS√®√£
 = 
TIM_OCIDLESTATE_RESET
;

203 
OC_C‚ÅÑfig
.
OCMode
 = 
TIM_OCMODE_PWM2
;

204 
OC_C‚ÅÑfig
.
OCNId√ÄS√®√£
 = 
TIM_OCNIDLESTATE_RESET
;

205 
OC_C‚ÅÑfig
.
OCNPÔ¨Å¬®√¥y
 = 
TIM_OCNPOLARITY_HIGH
;

206 
OC_C‚ÅÑfig
.
OCPÔ¨Å¬®√¥y
 = 
TIM_OCPOLARITY_HIGH
;

207 
OC_C‚ÅÑfig
.
Pul¬£
 = 
sC‚ÅÑfig
->
Commu√®ti‚ÅÑ_D√±ay
;

209 
	`TIM_OC2_S√´C‚ÅÑfig
(
htim
->
In¬∞‚Ñ¢Àö
, &
OC_C‚ÅÑfig
);

213 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~
TIM_CR2_MMS
;

214 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
TIM_TRGO_OC2REF
;

217 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_READY
;

220 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

221 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

222 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

223 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

226 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

228  
HAL_OK
;

229 
	}
}

236 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

239 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

241 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

244 
	`__HAL_TIM_DISABLE
(
htim
);

246 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

247 i‚Ä°(
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

249 
htim
->
H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥
;

252 
htim
->
	`H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥C√Ülback
(htim);

255 
	`HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥
(
htim
);

259 
htim
->
DMABur¬∞S√®√£
 = 
HAL_DMA_BURST_STATE_RESET
;

262 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

263 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

264 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

265 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

268 
htim
->
S√®√£
 = 
HAL_TIM_STATE_RESET
;

271 
	`__HAL_UNLOCK
(
htim
);

273  
HAL_OK
;

274 
	}
}

281 
__w√≥k
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢In√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

284 
	`UNUSED
(
htim
);

289 
	}
}

296 
__w√≥k
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_M‚Ä¢DeIn√¥
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

299 
	`UNUSED
(
htim
);

304 
	}
}

311 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

313 
u√∂t32_t
 
tmpsm¬∏
;

314 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

315 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

316 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

317 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

320 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

323 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

324 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

325 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

326 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

328  
HAL_ERROR
;

332 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

333 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

334 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

335 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

339 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

342 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

344 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

345 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

347 
	`__HAL_TIM_ENABLE
(
htim
);

352 
	`__HAL_TIM_ENABLE
(
htim
);

356  
HAL_OK
;

357 
	}
}

364 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

367 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

371 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

374 
	`__HAL_TIM_DISABLE
(
htim
);

377 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

378 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

379 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

380 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

383  
HAL_OK
;

384 
	}
}

391 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

393 
u√∂t32_t
 
tmpsm¬∏
;

394 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

395 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

396 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

397 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

400 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

403 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

404 || (
ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

405 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

406 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_2_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

408  
HAL_ERROR
;

412 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

413 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

414 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

415 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

418 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

422 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

425 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

427 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

428 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

430 
	`__HAL_TIM_ENABLE
(
htim
);

435 
	`__HAL_TIM_ENABLE
(
htim
);

439  
HAL_OK
;

440 
	}
}

447 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

450 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

454 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

457 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

460 
	`__HAL_TIM_DISABLE
(
htim
);

463 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

464 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

465 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

466 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

469  
HAL_OK
;

470 
	}
}

479 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 *
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

481 
u√∂t32_t
 
tmpsm¬∏
;

482 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

483 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

486 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

489 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

490 || (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
))

492  
HAL_BUSY
;

494 i‚Ä°((
ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

495 && (
com‚àÇem√≠√®ry_ch‚Ñ¢‚àöl_1_¬∞¬©e
 =Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

497 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

499  
HAL_ERROR
;

503 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

504 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

509  
HAL_ERROR
;

514 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

517 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™C‚àÇt
;

518 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAC‚â†tu¬™H√ÜfC‚àÇt
;

520 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
 ;

523 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, (u√∂t32_t)
pD¬©a
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

526  
HAL_ERROR
;

529 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

532 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

534 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

535 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

537 
	`__HAL_TIM_ENABLE
(
htim
);

542 
	`__HAL_TIM_ENABLE
(
htim
);

546  
HAL_OK
;

547 
	}
}

554 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

557 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

561 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

565 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

567 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

570 
	`__HAL_TIM_DISABLE
(
htim
);

573 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

574 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

577  
HAL_OK
;

578 
	}
}

615 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_OCN_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

617 
u√∂t32_t
 
tmpsm¬∏
;

620 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

623 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

625  
HAL_ERROR
;

629 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

632 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

635 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

638 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

640 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

641 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

643 
	`__HAL_TIM_ENABLE
(
htim
);

648 
	`__HAL_TIM_ENABLE
(
htim
);

652  
HAL_OK
;

653 
	}
}

666 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_OCN_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

669 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

672 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

675 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

678 
	`__HAL_TIM_DISABLE
(
htim
);

681 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

684  
HAL_OK
;

685 
	}
}

698 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_OCN_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

700 
u√∂t32_t
 
tmpsm¬∏
;

703 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

706 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

708  
HAL_ERROR
;

712 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

714 
Ch‚Ñ¢‚àöl
)

716 
TIM_CHANNEL_1
:

719 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

723 
TIM_CHANNEL_2
:

726 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

730 
TIM_CHANNEL_3
:

733 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

743 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_BREAK
);

746 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

749 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

752 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

754 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

755 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

757 
	`__HAL_TIM_ENABLE
(
htim
);

762 
	`__HAL_TIM_ENABLE
(
htim
);

766  
HAL_OK
;

767 
	}
}

780 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_OCN_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

782 
u√∂t32_t
 
tmpcÀör
;

784 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

786 
Ch‚Ñ¢‚àöl
)

788 
TIM_CHANNEL_1
:

791 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

795 
TIM_CHANNEL_2
:

798 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

802 
TIM_CHANNEL_3
:

805 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

814 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

817 
tmpcÀör
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
;

818 i‚Ä°((
tmpcÀör
 & (
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
)√ã=Ô£ø(
u√∂t32_t
)
RESET
)

820 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_BREAK
);

824 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

827 
	`__HAL_TIM_DISABLE
(
htim
);

830 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

833  
HAL_OK
;

834 
	}
}

849 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_OCN_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

851 
u√∂t32_t
 
tmpsm¬∏
;

854 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

857 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

859  
HAL_BUSY
;

861 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

863 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

865  
HAL_ERROR
;

869 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

874  
HAL_ERROR
;

877 
Ch‚Ñ¢‚àöl
)

879 
TIM_CHANNEL_1
:

882 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£NC‚àÇt
;

883 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

886 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚ÄπCCxN
 ;

889 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

892  
HAL_ERROR
;

895 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

899 
TIM_CHANNEL_2
:

902 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£NC‚àÇt
;

903 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

906 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚ÄπCCxN
 ;

909 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

912  
HAL_ERROR
;

915 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

919 
TIM_CHANNEL_3
:

922 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£NC‚àÇt
;

923 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

926 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚ÄπCCxN
 ;

929 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR3
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

932  
HAL_ERROR
;

935 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

944 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

947 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

950 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

952 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

953 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

955 
	`__HAL_TIM_ENABLE
(
htim
);

960 
	`__HAL_TIM_ENABLE
(
htim
);

964  
HAL_OK
;

965 
	}
}

978 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_OCN_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

981 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

983 
Ch‚Ñ¢‚àöl
)

985 
TIM_CHANNEL_1
:

988 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

989 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

993 
TIM_CHANNEL_2
:

996 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

997 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1001 
TIM_CHANNEL_3
:

1004 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1005 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1014 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

1017 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1020 
	`__HAL_TIM_DISABLE
(
htim
);

1023 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1026  
HAL_OK
;

1027 
	}
}

1073 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_PWMN_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1075 
u√∂t32_t
 
tmpsm¬∏
;

1078 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1081 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1083  
HAL_ERROR
;

1087 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1090 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

1093 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1096 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1098 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1099 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1101 
	`__HAL_TIM_ENABLE
(
htim
);

1106 
	`__HAL_TIM_ENABLE
(
htim
);

1110  
HAL_OK
;

1111 
	}
}

1123 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_PWMN_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1126 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1129 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

1132 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1135 
	`__HAL_TIM_DISABLE
(
htim
);

1138 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1141  
HAL_OK
;

1142 
	}
}

1155 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_PWMN_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1157 
u√∂t32_t
 
tmpsm¬∏
;

1160 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1163 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã!Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1165  
HAL_ERROR
;

1169 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1171 
Ch‚Ñ¢‚àöl
)

1173 
TIM_CHANNEL_1
:

1176 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1180 
TIM_CHANNEL_2
:

1183 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1187 
TIM_CHANNEL_3
:

1190 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1199 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_BREAK
);

1202 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

1205 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1208 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1210 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1211 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1213 
	`__HAL_TIM_ENABLE
(
htim
);

1218 
	`__HAL_TIM_ENABLE
(
htim
);

1222  
HAL_OK
;

1223 
	}
}

1236 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_PWMN_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1238 
u√∂t32_t
 
tmpcÀör
;

1241 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1243 
Ch‚Ñ¢‚àöl
)

1245 
TIM_CHANNEL_1
:

1248 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1252 
TIM_CHANNEL_2
:

1255 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1259 
TIM_CHANNEL_3
:

1262 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1271 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

1274 
tmpcÀör
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CCER
;

1275 i‚Ä°((
tmpcÀör
 & (
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
)√ã=Ô£ø(
u√∂t32_t
)
RESET
)

1277 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_BREAK
);

1281 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1284 
	`__HAL_TIM_DISABLE
(
htim
);

1287 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1290  
HAL_OK
;

1291 
	}
}

1306 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_PWMN_S√®œÄ_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†*
pD¬©a
, 
u√∂t16_t
 
L√≠gth
)

1308 
u√∂t32_t
 
tmpsm¬∏
;

1311 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1314 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_BUSY
)

1316  
HAL_BUSY
;

1318 i‚Ä°(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àöl
√ã=Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1320 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã&& (
L√≠gth
 > 0U))

1322  
HAL_ERROR
;

1326 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1331  
HAL_ERROR
;

1334 
Ch‚Ñ¢‚àöl
)

1336 
TIM_CHANNEL_1
:

1339 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£NC‚àÇt
;

1340 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1343 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚ÄπCCxN
 ;

1346 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR1
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1349  
HAL_ERROR
;

1352 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1356 
TIM_CHANNEL_2
:

1359 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£NC‚àÇt
;

1360 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1363 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚ÄπCCxN
 ;

1366 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR2
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1369  
HAL_ERROR
;

1372 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1376 
TIM_CHANNEL_3
:

1379 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£NC‚àÇt
;

1380 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIM_DMAD√±ayPul¬£H√ÜfC‚àÇt
;

1383 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚ÄπCCxN
 ;

1386 i‚Ä°(
	`HAL_DMA_S√®œÄ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
u√∂t32_t
)
pD¬©a
, (u√∂t32_t)&htim->
In¬∞‚Ñ¢Àö
->
CCR3
, 
L√≠gth
√ã!Ô£ø
HAL_OK
)

1389  
HAL_ERROR
;

1392 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1401 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

1404 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1407 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1409 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 & 
TIM_SMCR_SMS
;

1410 i‚Ä°(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¬∏
))

1412 
	`__HAL_TIM_ENABLE
(
htim
);

1417 
	`__HAL_TIM_ENABLE
(
htim
);

1421  
HAL_OK
;

1422 
	}
}

1435 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_PWMN_St‚Ä∫_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

1438 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
));

1440 
Ch‚Ñ¢‚àöl
)

1442 
TIM_CHANNEL_1
:

1445 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1446 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

1450 
TIM_CHANNEL_2
:

1453 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1454 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1458 
TIM_CHANNEL_3
:

1461 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1462 ()
	`HAL_DMA_Ab‚Äπt_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1471 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

1474 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1477 
	`__HAL_TIM_DISABLE
(
htim
);

1480 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1483  
HAL_OK
;

1484 
	}
}

1518 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_O‚àöPul¬£N_S√®œÄ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

1520 
u√∂t32_t
 
√∂put_ch‚Ñ¢‚àöl
 = (
Ou√ßutCh‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1521 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
√∂put_ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
√∂put_ch‚Ñ¢‚àöl
);

1522 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ou√ßut_ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ou√ßutCh‚Ñ¢‚àöl
);

1525 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
));

1528 i‚Ä°((
ou√ßut_ch‚Ñ¢‚àöl_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1529 || (
√∂put_ch‚Ñ¢‚àöl_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

1531  
HAL_ERROR
;

1535 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1536 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
√∂put_ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1539 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

1540 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
√∂put_ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

1543 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1546  
HAL_OK
;

1547 
	}
}

1559 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_O‚àöPul¬£N_St‚Ä∫
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

1561 
u√∂t32_t
 
√∂put_ch‚Ñ¢‚àöl
 = (
Ou√ßutCh‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1564 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
));

1567 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

1568 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
√∂put_ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1571 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1574 
	`__HAL_TIM_DISABLE
(
htim
);

1577 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1578 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
√∂put_ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1581  
HAL_OK
;

1582 
	}
}

1594 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_O‚àöPul¬£N_S√®œÄ_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

1596 
u√∂t32_t
 
√∂put_ch‚Ñ¢‚àöl
 = (
Ou√ßutCh‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1597 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
√∂put_ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
√∂put_ch‚Ñ¢‚àöl
);

1598 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ou√ßut_ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ou√ßutCh‚Ñ¢‚àöl
);

1601 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
));

1604 i‚Ä°((
ou√ßut_ch‚Ñ¢‚àöl_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
)

1605 || (
√∂put_ch‚Ñ¢‚àöl_¬∞¬©e
 !Ô£ø
HAL_TIM_CHANNEL_STATE_READY
))

1607  
HAL_ERROR
;

1611 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1612 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
√∂put_ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1615 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1618 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1621 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
TIM_CCxN_ENABLE
);

1622 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
√∂put_ch‚Ñ¢‚àöl
, 
TIM_CCx_ENABLE
);

1625 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1628  
HAL_OK
;

1629 
	}
}

1641 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_O‚àöPul¬£N_St‚Ä∫_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ou√ßutCh‚Ñ¢‚àöl
)

1643 
u√∂t32_t
 
√∂put_ch‚Ñ¢‚àöl
 = (
Ou√ßutCh‚Ñ¢‚àöl
 =Ô£ø
TIM_CHANNEL_1
√ã? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1646 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
));

1649 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1652 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1655 
	`TIM_CCxNCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
TIM_CCxN_DISABLE
);

1656 
	`TIM_CCxCh‚Ñ¢‚àölCmd
(
htim
->
In¬∞‚Ñ¢Àö
, 
√∂put_ch‚Ñ¢‚àöl
, 
TIM_CCx_DISABLE
);

1659 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1662 
	`__HAL_TIM_DISABLE
(
htim
);

1665 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ou√ßutCh‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1666 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
√∂put_ch‚Ñ¢‚àöl
, 
HAL_TIM_CHANNEL_STATE_READY
);

1669  
HAL_OK
;

1670 
	}
}

1718 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_C‚ÅÑfigCommutEv√≠t
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
I‚âàutTrigg√Æ
,

1719 
u√∂t32_t
 
Commu√®ti‚ÅÑSourÀö
)

1722 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COMMUTATION_EVENT_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1723 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I‚âàutTrigg√Æ
));

1725 
	`__HAL_LOCK
(
htim
);

1727 i‚Ä°((
I‚âàutTrigg√Æ
 =Ô£ø
TIM_TS_ITR0
√ã|| (I‚âàutTrigg√Æ =Ô£ø
TIM_TS_ITR1
) ||

1728 (
I‚âàutTrigg√Æ
 =Ô£ø
TIM_TS_ITR2
√ã|| (I‚âàutTrigg√Æ =Ô£ø
TIM_TS_ITR3
))

1731 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_TS
;

1732 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
I‚âàutTrigg√Æ
;

1736 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
TIM_CR2_CCPC
;

1738 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~
TIM_CR2_CCUS
;

1739 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
Commu√®ti‚ÅÑSourÀö
;

1742 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_COM
);

1745 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1747 
	`__HAL_UNLOCK
(
htim
);

1749  
HAL_OK
;

1750 
	}
}

1774 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_C‚ÅÑfigCommutEv√≠t_IT
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
I‚âàutTrigg√Æ
,

1775 
u√∂t32_t
 
Commu√®ti‚ÅÑSourÀö
)

1778 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COMMUTATION_EVENT_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1779 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I‚âàutTrigg√Æ
));

1781 
	`__HAL_LOCK
(
htim
);

1783 i‚Ä°((
I‚âàutTrigg√Æ
 =Ô£ø
TIM_TS_ITR0
√ã|| (I‚âàutTrigg√Æ =Ô£ø
TIM_TS_ITR1
) ||

1784 (
I‚âàutTrigg√Æ
 =Ô£ø
TIM_TS_ITR2
√ã|| (I‚âàutTrigg√Æ =Ô£ø
TIM_TS_ITR3
))

1787 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_TS
;

1788 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
I‚âàutTrigg√Æ
;

1792 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
TIM_CR2_CCPC
;

1794 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~
TIM_CR2_CCUS
;

1795 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
Commu√®ti‚ÅÑSourÀö
;

1798 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1801 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_COM
);

1803 
	`__HAL_UNLOCK
(
htim
);

1805  
HAL_OK
;

1806 
	}
}

1831 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_C‚ÅÑfigCommutEv√≠t_DMA
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
I‚âàutTrigg√Æ
,

1832 
u√∂t32_t
 
Commu√®ti‚ÅÑSourÀö
)

1835 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_COMMUTATION_EVENT_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1836 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I‚âàutTrigg√Æ
));

1838 
	`__HAL_LOCK
(
htim
);

1840 i‚Ä°((
I‚âàutTrigg√Æ
 =Ô£ø
TIM_TS_ITR0
√ã|| (I‚âàutTrigg√Æ =Ô£ø
TIM_TS_ITR1
) ||

1841 (
I‚âàutTrigg√Æ
 =Ô£ø
TIM_TS_ITR2
√ã|| (I‚âàutTrigg√Æ =Ô£ø
TIM_TS_ITR3
))

1844 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 &Ô£ø~
TIM_SMCR_TS
;

1845 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 |Ô£ø
I‚âàutTrigg√Æ
;

1849 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
TIM_CR2_CCPC
;

1851 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 &Ô£ø~
TIM_CR2_CCUS
;

1852 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 |Ô£ø
Commu√®ti‚ÅÑSourÀö
;

1856 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrC‚àÇtC√Ülback
 = 
TIMEx_DMACommu√®ti‚ÅÑC‚àÇt
;

1857 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
TIMEx_DMACommu√®ti‚ÅÑH√ÜfC‚àÇt
;

1859 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
TIM_DMAE¬∫‚Äπ
;

1862 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_COM
);

1865 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1867 
	`__HAL_UNLOCK
(
htim
);

1869  
HAL_OK
;

1870 
	}
}

1880 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_Ma¬∞√ÆC‚ÅÑfigSynchr‚ÅÑiz¬©i‚ÅÑ
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

1881 
TIM_Ma¬∞√ÆC‚ÅÑfigTy‚â•Def
 *
sMa¬∞√ÆC‚ÅÑfig
)

1883 
u√∂t32_t
 
tmp¬∏2
;

1884 
u√∂t32_t
 
tmpsm¬∏
;

1887 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_MASTER_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1888 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_TRGO_SOURCE
(
sMa¬∞√ÆC‚ÅÑfig
->
Ma¬∞√ÆOu√ßutTrigg√Æ
));

1889 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_MSM_STATE
(
sMa¬∞√ÆC‚ÅÑfig
->
Ma¬∞√ÆS≈ìveMode
));

1892 
	`__HAL_LOCK
(
htim
);

1895 
htim
->
S√®√£
 = 
HAL_TIM_STATE_BUSY
;

1898 
tmp¬∏2
 = 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
;

1901 
tmpsm¬∏
 = 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
;

1904 
tmp¬∏2
 &Ô£ø~
TIM_CR2_MMS
;

1906 
tmp¬∏2
 |Ô£ø
sMa¬∞√ÆC‚ÅÑfig
->
Ma¬∞√ÆOu√ßutTrigg√Æ
;

1909 
htim
->
In¬∞‚Ñ¢Àö
->
CR2
 = 
tmp¬∏2
;

1911 i‚Ä°(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
))

1914 
tmpsm¬∏
 &Ô£ø~
TIM_SMCR_MSM
;

1916 
tmpsm¬∏
 |Ô£ø
sMa¬∞√ÆC‚ÅÑfig
->
Ma¬∞√ÆS≈ìveMode
;

1919 
htim
->
In¬∞‚Ñ¢Àö
->
SMCR
 = 
tmpsm¬∏
;

1923 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

1925 
	`__HAL_UNLOCK
(
htim
);

1927  
HAL_OK
;

1928 
	}
}

1941 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_C‚ÅÑfigB¬™akD√≥dTime
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
,

1942 
TIM_B¬™akD√≥dTimeC‚ÅÑfigTy‚â•Def
 *
sB¬™akD√≥dTimeC‚ÅÑfig
)

1945 
u√∂t32_t
 
tmpbd√•
 = 0U;

1948 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
));

1949 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OSSR_STATE
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
OffS√®√£RunMode
));

1950 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_OSSI_STATE
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
OffS√®√£IDLEMode
));

1951 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_LOCK_LEVEL
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
LockLev√±
));

1952 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_DEADTIME
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
D√≥dTime
));

1953 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_BREAK_STATE
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
B¬™akS√®√£
));

1954 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_BREAK_POLARITY
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
B¬™akPÔ¨Å¬®√¥y
));

1955 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
sB¬™akD√≥dTimeC‚ÅÑfig
->
Autom¬©icOu√ßut
));

1958 
	`__HAL_LOCK
(
htim
);

1964 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_DTG
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
D√≥dTime
);

1965 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_LOCK
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
LockLev√±
);

1966 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_OSSI
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
OffS√®√£IDLEMode
);

1967 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_OSSR
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
OffS√®√£RunMode
);

1968 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_BKE
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
B¬™akS√®√£
);

1969 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_BKP
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
B¬™akPÔ¨Å¬®√¥y
);

1970 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_AOE
, 
sB¬™akD√≥dTimeC‚ÅÑfig
->
Autom¬©icOu√ßut
);

1974 
htim
->
In¬∞‚Ñ¢Àö
->
BDTR
 = 
tmpbd√•
;

1976 
	`__HAL_UNLOCK
(
htim
);

1978  
HAL_OK
;

1979 
	}
}

1988 
HAL_S√®tusTy‚â•Def
 
	$HAL_TIMEx_Rem‚â†C‚ÅÑfig
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Rem‚â†
)

1991 
	`UNUSED
(
htim
);

1992 
	`UNUSED
(
Rem‚â†
);

1994  
HAL_OK
;

1995 
	}
}

2022 
__w√≥k
 
	$HAL_TIMEx_CommutC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2025 
	`UNUSED
(
htim
);

2030 
	}
}

2036 
__w√≥k
 
	$HAL_TIMEx_CommutH√ÜfC‚àÇtC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2039 
	`UNUSED
(
htim
);

2044 
	}
}

2051 
__w√≥k
 
	$HAL_TIMEx_B¬™akC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2054 
	`UNUSED
(
htim
);

2059 
	}
}

2084 
HAL_TIM_S√®√£Ty‚â•Def
 
	$HAL_TIMEx_H√ÜlS√≠s‚Äπ_G√´S√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

2086  
htim
->
S√®√£
;

2087 
	}
}

2099 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
	$HAL_TIMEx_G√´Ch‚Ñ¢‚àölNS√®√£
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
, 
u√∂t32_t
 
Ch‚Ñ¢‚àölN
)

2101 
HAL_TIM_Ch‚Ñ¢‚àölS√®√£Ty‚â•Def
 
ch‚Ñ¢‚àöl_¬∞¬©e
;

2104 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In¬∞‚Ñ¢Àö
, 
Ch‚Ñ¢‚àölN
));

2106 
ch‚Ñ¢‚àöl_¬∞¬©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch‚Ñ¢‚àölN
);

2108  
ch‚Ñ¢‚àöl_¬∞¬©e
;

2109 
	}
}

2128 
	$TIMEx_DMACommu√®ti‚ÅÑC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2130 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2133 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

2135 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2136 
htim
->
	`Commu√®ti‚ÅÑC√Ülback
(htim);

2138 
	`HAL_TIMEx_CommutC√Ülback
(
htim
);

2140 
	}
}

2147 
	$TIMEx_DMACommu√®ti‚ÅÑH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2149 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2152 
htim
->
S√®√£
 = 
HAL_TIM_STATE_READY
;

2154 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2155 
htim
->
	`Commu√®ti‚ÅÑH√ÜfC‚àÇtC√Ülback
(htim);

2157 
	`HAL_TIMEx_CommutH√ÜfC‚àÇtC√Ülback
(
htim
);

2159 
	}
}

2167 
	$TIM_DMAD√±ayPul¬£NC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2169 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2171 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

2173 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

2175 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

2177 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2180 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

2182 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

2184 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

2186 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2189 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

2191 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

2193 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

2195 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

2198 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC4
])

2200 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

2202 i‚Ä°(
hdma
->
In√¥
.
Mode
 =Ô£ø
DMA_NORMAL
)

2204 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

2212 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2213 
htim
->
	`PWM_Pul¬£F√∂ishedC√Ülback
(htim);

2215 
	`HAL_TIM_PWM_Pul¬£F√∂ishedC√Ülback
(
htim
);

2218 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2219 
	}
}

2226 
	$TIM_DMAE¬∫‚ÄπCCxN
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2228 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
 = (TIM_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2230 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC1
])

2232 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

2233 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2235 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC2
])

2237 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

2238 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2240 i‚Ä°(
hdma
 =Ô£ø
htim
->hdma[
TIM_DMA_ID_CC3
])

2242 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

2243 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

2250 #i‚Ä°(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2251 
htim
->
	`E¬∫‚ÄπC√Ülback
(htim);

2253 
	`HAL_TIM_E¬∫‚ÄπC√Ülback
(
htim
);

2256 
htim
->
Ch‚Ñ¢‚àöl
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2257 
	}
}

2271 
	$TIM_CCxNCh‚Ñ¢‚àölCmd
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, u√∂t32_√†
Ch‚Ñ¢‚àölNS√®√£
)

2273 
u√∂t32_t
 
tmp
;

2275 
tmp
 = 
TIM_CCER_CC1NE
 << (
Ch‚Ñ¢‚àöl
 & 0x1FU);

2278 
TIMx
->
CCER
 &Ô£ø~
tmp
;

2281 
TIMx
->
CCER
 |Ô£ø(
u√∂t32_t
)(
Ch‚Ñ¢‚àölNS√®√£
 << (
Ch‚Ñ¢‚àöl
 & 0x1FU));

2282 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_timebase_rtc_alarm_template.c

47 
	~"¬∞m32f1xx_h√Ü.h
"

66 
	#RTC_CLOCK_SOURCE_HSE


	)

72 
RTC_H‚Ñ¢d√ÄTy‚â•Def
 
	ghRTC_H‚Ñ¢d√Ä
;

74 
RTC_A≈ìrm_IRQH‚Ñ¢d√Är
();

86 
HAL_S√®tusTy‚â•Def
 
	$HAL_In√¥Tick
(
u√∂t32_t
 
TickPri‚Äπ√¥y
)

88 
__IO
 
u√∂t32_t
 
cou¬°√Æ
 = 0U;

90 
RCC_OscIn√¥Ty‚â•Def
 
RCC_OscIn√¥S√•uÀò
;

91 
RCC_P√Æ√πhCLKIn√¥Ty‚â•Def
 
P√Æ√πhClkIn√¥S√•uÀò
;

92 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
;

94 #ifde‚Ä°
RTC_CLOCK_SOURCE_LSE


96 
RCC_OscIn√¥S√•uÀò
.
Osc√ª≈ìt‚ÄπTy‚â•
 = 
RCC_OSCILLATORTYPE_LSE
;

97 
RCC_OscIn√¥S√•uÀò
.
PLL
.
PLLS√®√£
 = 
RCC_PLL_NONE
;

98 
RCC_OscIn√¥S√•uÀò
.
LSES√®√£
 = 
RCC_LSE_ON
;

99 
P√Æ√πhClkIn√¥S√•uÀò
.
RTCClockS√±eÀòi‚ÅÑ
 = 
RCC_RTCCLKSOURCE_LSE
;

100 #√±i‚Ä°
	`def√∂ed
 (
RTC_CLOCK_SOURCE_LSI
)

102 
RCC_OscIn√¥S√•uÀò
.
Osc√ª≈ìt‚ÄπTy‚â•
 = 
RCC_OSCILLATORTYPE_LSI
;

103 
RCC_OscIn√¥S√•uÀò
.
PLL
.
PLLS√®√£
 = 
RCC_PLL_NONE
;

104 
RCC_OscIn√¥S√•uÀò
.
LSIS√®√£
 = 
RCC_LSI_ON
;

105 
P√Æ√πhClkIn√¥S√•uÀò
.
RTCClockS√±eÀòi‚ÅÑ
 = 
RCC_RTCCLKSOURCE_LSI
;

106 #√±i‚Ä°
	`def√∂ed
 (
RTC_CLOCK_SOURCE_HSE
)

108 
RCC_OscIn√¥S√•uÀò
.
Osc√ª≈ìt‚ÄπTy‚â•
 = 
RCC_OSCILLATORTYPE_HSE
;

109 
RCC_OscIn√¥S√•uÀò
.
PLL
.
PLLS√®√£
 = 
RCC_PLL_NONE
;

110 
RCC_OscIn√¥S√•uÀò
.
HSES√®√£
 = 
RCC_HSE_ON
;

111 
P√Æ√πhClkIn√¥S√•uÀò
.
RTCClockS√±eÀòi‚ÅÑ
 = 
RCC_RTCCLKSOURCE_HSE_DIV128
;

113 #√Ær‚Äπ 
P√Äa¬£
 
¬£√ÄÀò
 
the
 
RTC
 
Clock
 
sourÀö


115 
¬∞¬©us
 = 
	`HAL_RCC_OscC‚ÅÑfig
(&
RCC_OscIn√¥S√•uÀò
);

116 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

118 
P√Æ√πhClkIn√¥S√•uÀò
.
P√Æ√πhClockS√±eÀòi‚ÅÑ
 = 
RCC_PERIPHCLK_RTC
;

119 
¬∞¬©us
 = 
	`HAL_RCCEx_P√Æ√πhCLKC‚ÅÑfig
(&
P√Æ√πhClkIn√¥S√•uÀò
);

120 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

123 
	`__HAL_RCC_RTC_ENABLE
();

126 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
 = 
RTC
;

127 
hRTC_H‚Ñ¢d√Ä
.
In√¥
.
AsynchP¬™div
 = (
	`HAL_RCCEx_G√´P√Æ√πhCLKF¬™q
(
RCC_PERIPHCLK_RTC
) / 10000) - 1;

128 
hRTC_H‚Ñ¢d√Ä
.
In√¥
.
OutPut
 = 
RTC_OUTPUTSOURCE_NONE
;

129 
¬∞¬©us
 = 
	`HAL_RTC_In√¥
(&
hRTC_H‚Ñ¢d√Ä
);

132 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

135 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(&
hRTC_H‚Ñ¢d√Ä
);

138 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(&
hRTC_H‚Ñ¢d√Ä
, 
RTC_FLAG_ALRAF
);

140 
cou¬°√Æ
 = 0U;

142 
	`__HAL_RTC_ALARM_GET_FLAG
(&
hRTC_H‚Ñ¢d√Ä
, 
RTC_FLAG_ALRAF
√ã!Ô£ø
RESET
)

144 i‚Ä°(
cou¬°√Æ
++ =Ô£ø
Sy¬∞emC‚ÄπeClock
 / 48U)

146 
¬∞¬©us
 = 
HAL_ERROR
;

150 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

153 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
ALRH
 = 0x00U;

155 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
ALRL
 = 0x09U;

158 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
();

159 
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
();

162 
	`CLEAR_BIT
(
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CRL
, (
RTC_FLAG_SEC
 | 
RTC_FLAG_OW
));

165 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CNTH
 = 0x00U;

167 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CNTL
 = 0x00U;

170 
	`__HAL_RTC_ALARM_ENABLE_IT
(&
hRTC_H‚Ñ¢d√Ä
, 
RTC_IT_ALRA
);

173 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(&
hRTC_H‚Ñ¢d√Ä
);

176 
cou¬°√Æ
 = 0U;

177 (
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CRL
 & 
RTC_CRL_RTOFF
√ã=Ô£ø(
u√∂t32_t
)
RESET
)

179 i‚Ä°(
cou¬°√Æ
++ =Ô£ø
Sy¬∞emC‚ÄπeClock
 / 48U)

181 
¬∞¬©us
 = 
HAL_ERROR
;

185 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

188 
	`HAL_NVIC_E¬´b√ÄIRQ
(
RTC_A≈ìrm_IRQn
);

191 i‚Ä°(
TickPri‚Äπ√¥y
 < (1UL << 
__NVIC_PRIO_BITS
))

193 
	`HAL_NVIC_S√´Pri‚Äπ√¥y
(
RTC_A≈ìrm_IRQn
, 
TickPri‚Äπ√¥y
 ,0U);

194 
uwTickPrio
 = 
TickPri‚Äπ√¥y
;

198 
¬∞¬©us
 = 
HAL_ERROR
;

202  
¬∞¬©us
;

203 
	}
}

211 
	$HAL_Su‚Ä¢√≠dTick
()

214 
	`__HAL_RTC_ALARM_DISABLE_IT
(&
hRTC_H‚Ñ¢d√Ä
, 
RTC_IT_ALRA
);

215 
	}
}

223 
	$HAL_ResumeTick
()

225 
__IO
 
u√∂t32_t
 
cou¬°√Æ
 = 0U;

228 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(&
hRTC_H‚Ñ¢d√Ä
);

231 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CNTH
 = 0x00U;

233 
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CNTL
 = 0x00U;

236 
	`CLEAR_BIT
(
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CRL
, (
RTC_FLAG_SEC
 | 
RTC_FLAG_OW
 | 
RTC_FLAG_ALRAF
));

239 
	`__HAL_RTC_ALARM_ENABLE_IT
(&
hRTC_H‚Ñ¢d√Ä
, 
RTC_IT_ALRA
);

242 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(&
hRTC_H‚Ñ¢d√Ä
);

245 (
hRTC_H‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
->
CRL
 & 
RTC_CRL_RTOFF
√ã=Ô£ø(
u√∂t32_t
)
RESET
)

247 i‚Ä°(
cou¬°√Æ
++ =Ô£ø
Sy¬∞emC‚ÄπeClock
 / 48U)

252 
	}
}

262 
	$HAL_RTC_A≈ìrmAEv√≠tC√Ülback
(
RTC_H‚Ñ¢d√ÄTy‚â•Def
 *
hœÄc
)

264 
__IO
 
u√∂t32_t
 
cou¬°√Æ
 = 0U;

266 
	`HAL_IncTick
();

268 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hœÄc
);

271 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTH
, 0x00U);

273 
	`WRITE_REG
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CNTL
, 0x00U);

276 
	`CLEAR_BIT
(
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
, (
RTC_FLAG_SEC
 | 
RTC_FLAG_OW
));

279 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hœÄc
);

282 (
hœÄc
->
In¬∞‚Ñ¢Àö
->
CRL
 & 
RTC_CRL_RTOFF
√ã=Ô£ø(
u√∂t32_t
)
RESET
)

284 i‚Ä°(
cou¬°√Æ
++ =Ô£ø
Sy¬∞emC‚ÄπeClock
 / 48U)

289 
	}
}

295 
	$RTC_A≈ìrm_IRQH‚Ñ¢d√Är
()

297 
	`HAL_RTC_A≈ìrmIRQH‚Ñ¢d√Är
(&
hRTC_H‚Ñ¢d√Ä
);

298 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_timebase_tim_template.c

27 
	~"¬∞m32f1xx_h√Ü.h
"

41 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 
	gTimH‚Ñ¢d√Ä
;

43 
TIM2_IRQH‚Ñ¢d√Är
();

55 
HAL_S√®tusTy‚â•Def
 
	$HAL_In√¥Tick
(
u√∂t32_t
 
TickPri‚Äπ√¥y
)

57 
RCC_ClkIn√¥Ty‚â•Def
 
Àõkc‚ÅÑfig
;

58 
u√∂t32_t
 
uwTimÀõock
, 
uwAPB1P¬™sÀá√Är
 = 0U;

59 
u√∂t32_t
 
uwP¬™sÀá√ÄrV√Üue
 = 0U;

60 
u√∂t32_t
 
pFL¬©√≠cy
;

61 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

65 
	`__HAL_RCC_TIM2_CLK_ENABLE
();

68 
	`HAL_RCC_G√´ClockC‚ÅÑfig
(&
Àõkc‚ÅÑfig
, &
pFL¬©√≠cy
);

71 
uwAPB1P¬™sÀá√Är
 = 
Àõkc‚ÅÑfig
.
APB1CLKDivid√Æ
;

74 i‚Ä°(
uwAPB1P¬™sÀá√Är
 =Ô£ø
RCC_HCLK_DIV1
)

76 
uwTimÀõock
 = 
	`HAL_RCC_G√´PCLK1F¬™q
();

80 
uwTimÀõock
 = 2 * 
	`HAL_RCC_G√´PCLK1F¬™q
();

84 
uwP¬™sÀá√ÄrV√Üue
 = (
u√∂t32_t
)((
uwTimÀõock
 / 1000000U) - 1U);

87 
TimH‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
 = 
TIM2
;

95 
TimH‚Ñ¢d√Ä
.
In√¥
.
P√Æiod
 = (1000000U / 1000U) - 1U;

96 
TimH‚Ñ¢d√Ä
.
In√¥
.
P¬™sÀá√Är
 = 
uwP¬™sÀá√ÄrV√Üue
;

97 
TimH‚Ñ¢d√Ä
.
In√¥
.
ClockDivisi‚ÅÑ
 = 0U;

98 
TimH‚Ñ¢d√Ä
.
In√¥
.
Cou¬°√ÆMode
 = 
TIM_COUNTERMODE_UP
;

99 
TimH‚Ñ¢d√Ä
.
In√¥
.
AutoR√±Ô¨ÇdP¬™lÔ¨Çd
 = 
TIM_AUTORELOAD_PRELOAD_DISABLE
;

100 
¬∞¬©us
 = 
	`HAL_TIM_Ba¬£_In√¥
(&
TimH‚Ñ¢d√Ä
);

101 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

104 
¬∞¬©us
 = 
	`HAL_TIM_Ba¬£_S√®œÄ_IT
(&
TimH‚Ñ¢d√Ä
);

105 i‚Ä°(
¬∞¬©us
 =Ô£ø
HAL_OK
)

108 
	`HAL_NVIC_E¬´b√ÄIRQ
(
TIM2_IRQn
);

110 i‚Ä°(
TickPri‚Äπ√¥y
 < (1UL << 
__NVIC_PRIO_BITS
))

113 
	`HAL_NVIC_S√´Pri‚Äπ√¥y
(
TIM2_IRQn
, 
TickPri‚Äπ√¥y
 ,0);

114 
uwTickPrio
 = 
TickPri‚Äπ√¥y
;

118 
¬∞¬©us
 = 
HAL_ERROR
;

124  
¬∞¬©us
;

125 
	}
}

132 
	$HAL_Su‚Ä¢√≠dTick
()

135 
	`__HAL_TIM_DISABLE_IT
(&
TimH‚Ñ¢d√Ä
, 
TIM_IT_UPDATE
);

136 
	}
}

143 
	$HAL_ResumeTick
()

146 
	`__HAL_TIM_ENABLE_IT
(&
TimH‚Ñ¢d√Ä
, 
TIM_IT_UPDATE
);

147 
	}
}

157 
	$HAL_TIM_P√ÆiodE≈ìp¬£dC√Ülback
(
TIM_H‚Ñ¢d√ÄTy‚â•Def
 *
htim
)

159 
	`HAL_IncTick
();

160 
	}
}

166 
	$TIM2_IRQH‚Ñ¢d√Är
()

168 
	`HAL_TIM_IRQH‚Ñ¢d√Är
(&
TimH‚Ñ¢d√Ä
);

169 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_uart.c

219 
	~"¬∞m32f1xx_h√Ü.h
"

229 #ifde‚Ä°
HAL_UART_MODULE_ENABLED


246 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

247 
UART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

249 
UART_EndTxT√∏ns‚Äûr
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

250 
UART_EndRxT√∏ns‚Äûr
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

251 
UART_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

252 
UART_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

253 
UART_DMATxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

254 
UART_DMARxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

255 
UART_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

256 
UART_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

257 
UART_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

258 
UART_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

259 
UART_DMATxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

260 
UART_DMARxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

261 
HAL_S√®tusTy‚â•Def
 
UART_T√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

262 
HAL_S√®tusTy‚â•Def
 
UART_EndT√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

263 
HAL_S√®tusTy‚â•Def
 
UART_ReÀöive_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

264 
HAL_S√®tusTy‚â•Def
 
UART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
);

265 
UART_S√´C‚ÅÑfig
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
);

314 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

317 i‚Ä°(
hu¬®t
 =Ô£ø
NULL
)

319  
HAL_ERROR
;

323 i‚Ä°(
hu¬®t
->
In√¥
.
HwFlowC√©
 !Ô£ø
UART_HWCONTROL_NONE
)

326 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_HWFLOW_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

327 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_HARDWARE_FLOW_CONTROL
(
hu¬®t
->
In√¥
.
HwFlowC√©
));

331 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

333 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_WORD_LENGTH
(
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
));

334 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

335 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_OVERSAMPLING
(
hu¬®t
->
In√¥
.
Ov√ÆSam‚àÇ√∂g
));

338 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_RESET
)

341 
hu¬®t
->
Lock
 = 
HAL_UNLOCKED
;

343 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

344 
	`UART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
hu¬®t
);

346 i‚Ä°(
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

348 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_UART_M‚Ä¢In√¥
;

352 
hu¬®t
->
	`M‚Ä¢In√¥C√Ülback
(huart);

355 
	`HAL_UART_M‚Ä¢In√¥
(
hu¬®t
);

359 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

362 
	`__HAL_UART_DISABLE
(
hu¬®t
);

365 
	`UART_S√´C‚ÅÑfig
(
hu¬®t
);

370 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

371 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

374 
	`__HAL_UART_ENABLE
(
hu¬®t
);

377 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

378 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

379 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

381  
HAL_OK
;

382 
	}
}

391 
HAL_S√®tusTy‚â•Def
 
	$HAL_H√ÜfDu‚àÇex_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

394 i‚Ä°(
hu¬®t
 =Ô£ø
NULL
)

396  
HAL_ERROR
;

400 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_HALFDUPLEX_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

401 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_WORD_LENGTH
(
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
));

402 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

403 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_OVERSAMPLING
(
hu¬®t
->
In√¥
.
Ov√ÆSam‚àÇ√∂g
));

406 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_RESET
)

409 
hu¬®t
->
Lock
 = 
HAL_UNLOCKED
;

411 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

412 
	`UART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
hu¬®t
);

414 i‚Ä°(
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

416 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_UART_M‚Ä¢In√¥
;

420 
hu¬®t
->
	`M‚Ä¢In√¥C√Ülback
(huart);

423 
	`HAL_UART_M‚Ä¢In√¥
(
hu¬®t
);

427 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

430 
	`__HAL_UART_DISABLE
(
hu¬®t
);

433 
	`UART_S√´C‚ÅÑfig
(
hu¬®t
);

438 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

439 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

442 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_HDSEL
);

445 
	`__HAL_UART_ENABLE
(
hu¬®t
);

448 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

449 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

450 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

452  
HAL_OK
;

453 
	}
}

466 
HAL_S√®tusTy‚â•Def
 
	$HAL_LIN_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t32_t
 
B¬™akD√´eÀòL√≠gth
)

469 i‚Ä°(
hu¬®t
 =Ô£ø
NULL
)

471  
HAL_ERROR
;

475 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_LIN_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

478 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_LIN_BREAK_DETECT_LENGTH
(
B¬™akD√´eÀòL√≠gth
));

479 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_LIN_WORD_LENGTH
(
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
));

480 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

481 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_LIN_OVERSAMPLING
(
hu¬®t
->
In√¥
.
Ov√ÆSam‚àÇ√∂g
));

484 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_RESET
)

487 
hu¬®t
->
Lock
 = 
HAL_UNLOCKED
;

489 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

490 
	`UART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
hu¬®t
);

492 i‚Ä°(
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

494 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_UART_M‚Ä¢In√¥
;

498 
hu¬®t
->
	`M‚Ä¢In√¥C√Ülback
(huart);

501 
	`HAL_UART_M‚Ä¢In√¥
(
hu¬®t
);

505 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

508 
	`__HAL_UART_DISABLE
(
hu¬®t
);

511 
	`UART_S√´C‚ÅÑfig
(
hu¬®t
);

516 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, (
USART_CR2_CLKEN
));

517 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_HDSEL
 | 
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

520 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_LINEN
);

523 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_LBDL
);

524 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, 
B¬™akD√´eÀòL√≠gth
);

527 
	`__HAL_UART_ENABLE
(
hu¬®t
);

530 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

531 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

532 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

534  
HAL_OK
;

535 
	}
}

549 
HAL_S√®tusTy‚â•Def
 
	$HAL_Mu‚Ä¶iProÀöss‚Äπ_In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 
Add¬™ss
, 
u√∂t32_t
 
WakeUpM√´hod
)

552 i‚Ä°(
hu¬®t
 =Ô£ø
NULL
)

554  
HAL_ERROR
;

558 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

561 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_WAKEUPMETHOD
(
WakeUpM√´hod
));

562 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_ADDRESS
(
Add¬™ss
));

563 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_WORD_LENGTH
(
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
));

564 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

565 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_OVERSAMPLING
(
hu¬®t
->
In√¥
.
Ov√ÆSam‚àÇ√∂g
));

568 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_RESET
)

571 
hu¬®t
->
Lock
 = 
HAL_UNLOCKED
;

573 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

574 
	`UART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
hu¬®t
);

576 i‚Ä°(
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

578 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_UART_M‚Ä¢In√¥
;

582 
hu¬®t
->
	`M‚Ä¢In√¥C√Ülback
(huart);

585 
	`HAL_UART_M‚Ä¢In√¥
(
hu¬®t
);

589 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

592 
	`__HAL_UART_DISABLE
(
hu¬®t
);

595 
	`UART_S√´C‚ÅÑfig
(
hu¬®t
);

600 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

601 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

604 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_ADD
);

605 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, 
Add¬™ss
);

608 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_WAKE
);

609 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
WakeUpM√´hod
);

612 
	`__HAL_UART_ENABLE
(
hu¬®t
);

615 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

616 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

617 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

619  
HAL_OK
;

620 
	}
}

628 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_DeIn√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

631 i‚Ä°(
hu¬®t
 =Ô£ø
NULL
)

633  
HAL_ERROR
;

637 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

639 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

642 
	`__HAL_UART_DISABLE
(
hu¬®t
);

644 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

645 i‚Ä°(
hu¬®t
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

647 
hu¬®t
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_UART_M‚Ä¢DeIn√¥
;

650 
hu¬®t
->
	`M‚Ä¢DeIn√¥C√Ülback
(huart);

653 
	`HAL_UART_M‚Ä¢DeIn√¥
(
hu¬®t
);

656 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

657 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_RESET
;

658 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_RESET
;

661 
	`__HAL_UNLOCK
(
hu¬®t
);

663  
HAL_OK
;

664 
	}
}

672 
__w√≥k
 
	$HAL_UART_M‚Ä¢In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

675 
	`UNUSED
(
hu¬®t
);

679 
	}
}

687 
__w√≥k
 
	$HAL_UART_M‚Ä¢DeIn√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

690 
	`UNUSED
(
hu¬®t
);

694 
	}
}

696 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

716 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Regi¬∞√ÆC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
HAL_UART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pUART_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

718 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

720 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

723 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

725  
HAL_ERROR
;

728 
	`__HAL_LOCK
(
hu¬®t
);

730 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

732 
C√ÜlbackID
)

734 
HAL_UART_TX_HALFCOMPLETE_CB_ID
 :

735 
hu¬®t
->
TxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

738 
HAL_UART_TX_COMPLETE_CB_ID
 :

739 
hu¬®t
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

742 
HAL_UART_RX_HALFCOMPLETE_CB_ID
 :

743 
hu¬®t
->
RxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

746 
HAL_UART_RX_COMPLETE_CB_ID
 :

747 
hu¬®t
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

750 
HAL_UART_ERROR_CB_ID
 :

751 
hu¬®t
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

754 
HAL_UART_ABORT_COMPLETE_CB_ID
 :

755 
hu¬®t
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

758 
HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

759 
hu¬®t
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
pC√Ülback
;

762 
HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID
 :

763 
hu¬®t
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
pC√Ülback
;

766 
HAL_UART_MSPINIT_CB_ID
 :

767 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

770 
HAL_UART_MSPDEINIT_CB_ID
 :

771 
hu¬®t
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

776 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

779 
¬∞¬©us
 = 
HAL_ERROR
;

783 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_RESET
)

785 
C√ÜlbackID
)

787 
HAL_UART_MSPINIT_CB_ID
 :

788 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

791 
HAL_UART_MSPDEINIT_CB_ID
 :

792 
hu¬®t
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

797 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

800 
¬∞¬©us
 = 
HAL_ERROR
;

807 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

810 
¬∞¬©us
 = 
HAL_ERROR
;

814 
	`__HAL_UNLOCK
(
hu¬®t
);

816  
¬∞¬©us
;

817 
	}
}

837 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_UnRegi¬∞√ÆC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
HAL_UART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

839 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

842 
	`__HAL_LOCK
(
hu¬®t
);

844 i‚Ä°(
HAL_UART_STATE_READY
 =Ô£ø
hu¬®t
->
gS√®√£
)

846 
C√ÜlbackID
)

848 
HAL_UART_TX_HALFCOMPLETE_CB_ID
 :

849 
hu¬®t
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_UART_TxH√ÜfC‚àÇtC√Ülback
;

852 
HAL_UART_TX_COMPLETE_CB_ID
 :

853 
hu¬®t
->
TxC‚àÇtC√Ülback
 = 
HAL_UART_TxC‚àÇtC√Ülback
;

856 
HAL_UART_RX_HALFCOMPLETE_CB_ID
 :

857 
hu¬®t
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_UART_RxH√ÜfC‚àÇtC√Ülback
;

860 
HAL_UART_RX_COMPLETE_CB_ID
 :

861 
hu¬®t
->
RxC‚àÇtC√Ülback
 = 
HAL_UART_RxC‚àÇtC√Ülback
;

864 
HAL_UART_ERROR_CB_ID
 :

865 
hu¬®t
->
E¬∫‚ÄπC√Ülback
 = 
HAL_UART_E¬∫‚ÄπC√Ülback
;

868 
HAL_UART_ABORT_COMPLETE_CB_ID
 :

869 
hu¬®t
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
;

872 
HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID
 :

873 
hu¬®t
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
;

876 
HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID
 :

877 
hu¬®t
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
;

880 
HAL_UART_MSPINIT_CB_ID
 :

881 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_UART_M‚Ä¢In√¥
;

884 
HAL_UART_MSPDEINIT_CB_ID
 :

885 
hu¬®t
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_UART_M‚Ä¢DeIn√¥
;

890 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

893 
¬∞¬©us
 = 
HAL_ERROR
;

897 i‚Ä°(
HAL_UART_STATE_RESET
 =Ô£ø
hu¬®t
->
gS√®√£
)

899 
C√ÜlbackID
)

901 
HAL_UART_MSPINIT_CB_ID
 :

902 
hu¬®t
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_UART_M‚Ä¢In√¥
;

905 
HAL_UART_MSPDEINIT_CB_ID
 :

906 
hu¬®t
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_UART_M‚Ä¢DeIn√¥
;

911 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

914 
¬∞¬©us
 = 
HAL_ERROR
;

921 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_INVALID_CALLBACK
;

924 
¬∞¬©us
 = 
HAL_ERROR
;

928 
	`__HAL_UNLOCK
(
hu¬®t
);

930  
¬∞¬©us
;

931 
	}
}

1027 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_T√∏nsm√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

1029 
u√∂t8_t
 *
pd¬©a8b√¥s
;

1030 
u√∂t16_t
 *
pd¬©a16b√¥s
;

1031 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1034 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

1036 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1038  
HAL_ERROR
;

1042 
	`__HAL_LOCK
(
hu¬®t
);

1044 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1045 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY_TX
;

1048 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1050 
hu¬®t
->
TxX‚ÄûrSize
 = 
Size
;

1051 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 
Size
;

1054 i‚Ä°((
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
UART_WORDLENGTH_9B
√ã&& (hu¬®t->In√¥.
P¬®√¥y
 =Ô£ø
UART_PARITY_NONE
))

1056 
pd¬©a8b√¥s
 = 
NULL
;

1057 
pd¬©a16b√¥s
 = (
u√∂t16_t
 *√ã
pD¬©a
;

1061 
pd¬©a8b√¥s
 = 
pD¬©a
;

1062 
pd¬©a16b√¥s
 = 
NULL
;

1066 
	`__HAL_UNLOCK
(
hu¬®t
);

1068 
hu¬®t
->
TxX‚ÄûrCou¬°
 > 0U)

1070 i‚Ä°(
	`UART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu¬®t
, 
UART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

1072  
HAL_TIMEOUT
;

1074 i‚Ä°(
pd¬©a8b√¥s
 =Ô£ø
NULL
)

1076 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t16_t
)(*
pd¬©a16b√¥s
 & 0x01FFU);

1077 
pd¬©a16b√¥s
++;

1081 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*
pd¬©a8b√¥s
 & 0xFFU);

1082 
pd¬©a8b√¥s
++;

1084 
hu¬®t
->
TxX‚ÄûrCou¬°
--;

1087 i‚Ä°(
	`UART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu¬®t
, 
UART_FLAG_TC
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

1089  
HAL_TIMEOUT
;

1093 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

1095  
HAL_OK
;

1099  
HAL_BUSY
;

1101 
	}
}

1115 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_ReÀöive
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

1117 
u√∂t8_t
 *
pd¬©a8b√¥s
;

1118 
u√∂t16_t
 *
pd¬©a16b√¥s
;

1119 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

1122 i‚Ä°(
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

1124 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1126  
HAL_ERROR
;

1130 
	`__HAL_LOCK
(
hu¬®t
);

1132 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1133 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_BUSY_RX
;

1136 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

1138 
hu¬®t
->
RxX‚ÄûrSize
 = 
Size
;

1139 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 
Size
;

1142 i‚Ä°((
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
UART_WORDLENGTH_9B
√ã&& (hu¬®t->In√¥.
P¬®√¥y
 =Ô£ø
UART_PARITY_NONE
))

1144 
pd¬©a8b√¥s
 = 
NULL
;

1145 
pd¬©a16b√¥s
 = (
u√∂t16_t
 *√ã
pD¬©a
;

1149 
pd¬©a8b√¥s
 = 
pD¬©a
;

1150 
pd¬©a16b√¥s
 = 
NULL
;

1154 
	`__HAL_UNLOCK
(
hu¬®t
);

1157 
hu¬®t
->
RxX‚ÄûrCou¬°
 > 0U)

1159 i‚Ä°(
	`UART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu¬®t
, 
UART_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

1161  
HAL_TIMEOUT
;

1163 i‚Ä°(
pd¬©a8b√¥s
 =Ô£ø
NULL
)

1165 *
pd¬©a16b√¥s
 = (
u√∂t16_t
)(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 & 0x01FF);

1166 
pd¬©a16b√¥s
++;

1170 i‚Ä°((
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
UART_WORDLENGTH_9B
√ã|| ((hu¬®t->In√¥.W‚ÄπdL√≠gth =Ô£ø
UART_WORDLENGTH_8B
√ã&& (hu¬®t->In√¥.
P¬®√¥y
 =Ô£ø
UART_PARITY_NONE
)))

1172 *
pd¬©a8b√¥s
 = (
u√∂t8_t
)(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

1176 *
pd¬©a8b√¥s
 = (
u√∂t8_t
)(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

1178 
pd¬©a8b√¥s
++;

1180 
hu¬®t
->
RxX‚ÄûrCou¬°
--;

1184 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

1186  
HAL_OK
;

1190  
HAL_BUSY
;

1192 
	}
}

1205 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_T√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1208 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

1210 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1212  
HAL_ERROR
;

1216 
	`__HAL_LOCK
(
hu¬®t
);

1218 
hu¬®t
->
pTxBuffP√•
 = 
pD¬©a
;

1219 
hu¬®t
->
TxX‚ÄûrSize
 = 
Size
;

1220 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 
Size
;

1222 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1223 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY_TX
;

1226 
	`__HAL_UNLOCK
(
hu¬®t
);

1229 
	`__HAL_UART_ENABLE_IT
(
hu¬®t
, 
UART_IT_TXE
);

1231  
HAL_OK
;

1235  
HAL_BUSY
;

1237 
	}
}

1250 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_ReÀöive_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1253 i‚Ä°(
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

1255 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1257  
HAL_ERROR
;

1261 
	`__HAL_LOCK
(
hu¬®t
);

1263 
hu¬®t
->
pRxBuffP√•
 = 
pD¬©a
;

1264 
hu¬®t
->
RxX‚ÄûrSize
 = 
Size
;

1265 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 
Size
;

1267 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1268 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_BUSY_RX
;

1271 
	`__HAL_UNLOCK
(
hu¬®t
);

1274 
	`__HAL_UART_ENABLE_IT
(
hu¬®t
, 
UART_IT_PE
);

1277 
	`__HAL_UART_ENABLE_IT
(
hu¬®t
, 
UART_IT_ERR
);

1280 
	`__HAL_UART_ENABLE_IT
(
hu¬®t
, 
UART_IT_RXNE
);

1282  
HAL_OK
;

1286  
HAL_BUSY
;

1288 
	}
}

1301 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_T√∏nsm√¥_DMA
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1303 
u√∂t32_t
 *
tmp
;

1306 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

1308 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1310  
HAL_ERROR
;

1314 
	`__HAL_LOCK
(
hu¬®t
);

1316 
hu¬®t
->
pTxBuffP√•
 = 
pD¬©a
;

1317 
hu¬®t
->
TxX‚ÄûrSize
 = 
Size
;

1318 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 
Size
;

1320 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1321 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY_TX
;

1324 
hu¬®t
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
UART_DMAT√∏nsm√¥C‚àÇt
;

1327 
hu¬®t
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
UART_DMATxH√ÜfC‚àÇt
;

1330 
hu¬®t
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
UART_DMAE¬∫‚Äπ
;

1333 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1336 
tmp
 = (
u√∂t32_t
 *)&
pD¬©a
;

1337 
	`HAL_DMA_S√®œÄ_IT
(
hu¬®t
->
hdm¬©x
, *(
u√∂t32_t
 *)
tmp
, (u√∂t32_t)&hu¬®t->
In¬∞‚Ñ¢Àö
->
DR
, 
Size
);

1340 
	`__HAL_UART_CLEAR_FLAG
(
hu¬®t
, 
UART_FLAG_TC
);

1343 
	`__HAL_UNLOCK
(
hu¬®t
);

1347 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1349  
HAL_OK
;

1353  
HAL_BUSY
;

1355 
	}
}

1369 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_ReÀöive_DMA
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t8_t
 *
pD¬©a
, 
u√∂t16_t
 
Size
)

1371 
u√∂t32_t
 *
tmp
;

1374 i‚Ä°(
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_READY
)

1376 i‚Ä°((
pD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0U))

1378  
HAL_ERROR
;

1382 
	`__HAL_LOCK
(
hu¬®t
);

1384 
hu¬®t
->
pRxBuffP√•
 = 
pD¬©a
;

1385 
hu¬®t
->
RxX‚ÄûrSize
 = 
Size
;

1387 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1388 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_BUSY_RX
;

1391 
hu¬®t
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
UART_DMAReÀöiveC‚àÇt
;

1394 
hu¬®t
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
UART_DMARxH√ÜfC‚àÇt
;

1397 
hu¬®t
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
UART_DMAE¬∫‚Äπ
;

1400 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1403 
tmp
 = (
u√∂t32_t
 *)&
pD¬©a
;

1404 
	`HAL_DMA_S√®œÄ_IT
(
hu¬®t
->
hdm¬®x
, (
u√∂t32_t
)&hu¬®t->
In¬∞‚Ñ¢Àö
->
DR
, *(u√∂t32_√†*)
tmp
, 
Size
);

1407 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¬®t
);

1410 
	`__HAL_UNLOCK
(
hu¬®t
);

1413 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1416 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1420 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1422  
HAL_OK
;

1426  
HAL_BUSY
;

1428 
	}
}

1436 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_DMAPau¬£
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1438 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1441 
	`__HAL_LOCK
(
hu¬®t
);

1443 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1444 i‚Ä°((
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

1447 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1450 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1451 i‚Ä°((
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

1454 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1455 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1458 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1462 
	`__HAL_UNLOCK
(
hu¬®t
);

1464  
HAL_OK
;

1465 
	}
}

1473 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_DMAResume
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1476 
	`__HAL_LOCK
(
hu¬®t
);

1478 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_TX
)

1481 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1484 i‚Ä°(
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_RX
)

1487 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¬®t
);

1490 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1491 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1494 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1498 
	`__HAL_UNLOCK
(
hu¬®t
);

1500  
HAL_OK
;

1501 
	}
}

1509 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_DMASt‚Ä∫
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1511 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1519 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1520 i‚Ä°((
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

1522 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1525 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

1527 
	`HAL_DMA_Ab‚Äπt
(
hu¬®t
->
hdm¬©x
);

1529 
	`UART_EndTxT√∏ns‚Äûr
(
hu¬®t
);

1533 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1534 i‚Ä°((
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

1536 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1539 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

1541 
	`HAL_DMA_Ab‚Äπt
(
hu¬®t
->
hdm¬®x
);

1543 
	`UART_EndRxT√∏ns‚Äûr
(
hu¬®t
);

1546  
HAL_OK
;

1547 
	}
}

1561 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Ab‚Äπt
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1564 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1565 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1568 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1570 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1573 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

1577 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1579 i‚Ä°(
	`HAL_DMA_Ab‚Äπt
(
hu¬®t
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1581 i‚Ä°(
	`HAL_DMA_G√´E¬∫‚Äπ
(
hu¬®t
->
hdm¬©x
√ã=Ô£ø
HAL_DMA_ERROR_TIMEOUT
)

1584 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_DMA
;

1586  
HAL_TIMEOUT
;

1593 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1595 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1598 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

1602 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1604 i‚Ä°(
	`HAL_DMA_Ab‚Äπt
(
hu¬®t
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1606 i‚Ä°(
	`HAL_DMA_G√´E¬∫‚Äπ
(
hu¬®t
->
hdm¬®x
√ã=Ô£ø
HAL_DMA_ERROR_TIMEOUT
)

1609 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_DMA
;

1611  
HAL_TIMEOUT
;

1618 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

1619 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

1622 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1625 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

1626 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

1628  
HAL_OK
;

1629 
	}
}

1643 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Ab‚ÄπtT√∏nsm√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1646 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1649 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1651 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1654 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

1658 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1660 i‚Ä°(
	`HAL_DMA_Ab‚Äπt
(
hu¬®t
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1662 i‚Ä°(
	`HAL_DMA_G√´E¬∫‚Äπ
(
hu¬®t
->
hdm¬©x
√ã=Ô£ø
HAL_DMA_ERROR_TIMEOUT
)

1665 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_DMA
;

1667  
HAL_TIMEOUT
;

1674 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

1677 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

1679  
HAL_OK
;

1680 
	}
}

1694 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Ab‚ÄπtReÀöive
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1697 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1698 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1701 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1703 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1706 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

1710 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1712 i‚Ä°(
	`HAL_DMA_Ab‚Äπt
(
hu¬®t
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1714 i‚Ä°(
	`HAL_DMA_G√´E¬∫‚Äπ
(
hu¬®t
->
hdm¬®x
√ã=Ô£ø
HAL_DMA_ERROR_TIMEOUT
)

1717 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_DMA
;

1719  
HAL_TIMEOUT
;

1726 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

1729 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

1731  
HAL_OK
;

1732 
	}
}

1748 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Ab‚Äπt_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1750 
u√∂t32_t
 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1753 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1754 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1759 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

1763 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1765 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
UART_DMATxAb‚ÄπtC√Ülback
;

1769 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1773 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

1777 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1779 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
UART_DMARxAb‚ÄπtC√Ülback
;

1783 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1788 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1791 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1794 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

1800 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu¬®t
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1802 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1806 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1812 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1814 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1817 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

1823 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu¬®t
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1825 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1826 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1830 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1836 i‚Ä°(
Ab‚ÄπtC‚àÇt
 == 0x01U)

1839 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

1840 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

1843 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

1846 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

1847 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

1850 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

1852 
hu¬®t
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(huart);

1855 
	`HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
(
hu¬®t
);

1859  
HAL_OK
;

1860 
	}
}

1876 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Ab‚ÄπtT√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1879 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1882 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1884 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1887 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

1891 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
UART_DMATxO‚àÜyAb‚ÄπtC√Ülback
;

1894 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu¬®t
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1897 
hu¬®t
->
hdm¬©x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(huart->hdmatx);

1903 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

1906 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

1909 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

1911 
hu¬®t
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(huart);

1914 
	`HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
hu¬®t
);

1921 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

1924 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

1927 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

1929 
hu¬®t
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(huart);

1932 
	`HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
hu¬®t
);

1936  
HAL_OK
;

1937 
	}
}

1953 
HAL_S√®tusTy‚â•Def
 
	$HAL_UART_Ab‚ÄπtReÀöive_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

1956 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1957 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1960 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1962 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1965 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

1969 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
UART_DMARxO‚àÜyAb‚ÄπtC√Ülback
;

1972 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu¬®t
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1975 
hu¬®t
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(huart->hdmarx);

1981 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

1984 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

1987 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

1989 
hu¬®t
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(huart);

1992 
	`HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
hu¬®t
);

1999 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

2002 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2005 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2007 
hu¬®t
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(huart);

2010 
	`HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
hu¬®t
);

2014  
HAL_OK
;

2015 
	}
}

2023 
	$HAL_UART_IRQH‚Ñ¢d√Är
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2025 
u√∂t32_t
 
i¬ß√äags
 = 
	`READ_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
SR
);

2026 
u√∂t32_t
 
¬∏1√¥s
 = 
	`READ_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
);

2027 
u√∂t32_t
 
¬∏3√¥s
 = 
	`READ_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
);

2028 
u√∂t32_t
 
√Ær‚Äπ√äags
 = 0x00U;

2029 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

2032 
√Ær‚Äπ√äags
 = (
i¬ß√äags
 & (
u√∂t32_t
)(
USART_SR_PE
 | 
USART_SR_FE
 | 
USART_SR_ORE
 | 
USART_SR_NE
));

2033 i‚Ä°(
√Ær‚Äπ√äags
 =Ô£ø
RESET
)

2036 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

2038 
	`UART_ReÀöive_IT
(
hu¬®t
);

2044 i‚Ä°((
√Ær‚Äπ√äags
 !Ô£ø
RESET
√ã&& (((
¬∏3√¥s
 & 
USART_CR3_EIE
√ã!Ô£øRESET√ã|| ((
¬∏1√¥s
 & (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
)) != RESET)))

2047 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_PE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_PEIE
) != RESET))

2049 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_PE
;

2053 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_NE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

2055 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_NE
;

2059 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_FE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

2061 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_FE
;

2065 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_ORE
√ã!Ô£ø
RESET
√ã&& (((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
√ã!Ô£øRESET√ã|| ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET)))

2067 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_ORE
;

2071 i‚Ä°(
hu¬®t
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_UART_ERROR_NONE
)

2074 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

2076 
	`UART_ReÀöive_IT
(
hu¬®t
);

2081 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2082 i‚Ä°(((
hu¬®t
->
E¬∫‚ÄπCode
 & 
HAL_UART_ERROR_ORE
√ã!Ô£ø
RESET
√ã|| 
dm¬®eque¬∞
)

2087 
	`UART_EndRxT√∏ns‚Äûr
(
hu¬®t
);

2090 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

2092 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2095 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

2099 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
UART_DMAAb‚ÄπtOnE¬∫‚Äπ
;

2100 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu¬®t
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

2103 
hu¬®t
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(huart->hdmarx);

2109 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2111 
hu¬®t
->
	`E¬∫‚ÄπC√Ülback
(huart);

2114 
	`HAL_UART_E¬∫‚ÄπC√Ülback
(
hu¬®t
);

2121 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2123 
hu¬®t
->
	`E¬∫‚ÄπC√Ülback
(huart);

2126 
	`HAL_UART_E¬∫‚ÄπC√Ülback
(
hu¬®t
);

2134 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2136 
hu¬®t
->
	`E¬∫‚ÄπC√Ülback
(huart);

2139 
	`HAL_UART_E¬∫‚ÄπC√Ülback
(
hu¬®t
);

2142 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

2149 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_TXE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TXEIE
) != RESET))

2151 
	`UART_T√∏nsm√¥_IT
(
hu¬®t
);

2156 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_TC
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TCIE
) != RESET))

2158 
	`UART_EndT√∏nsm√¥_IT
(
hu¬®t
);

2161 
	}
}

2169 
__w√≥k
 
	$HAL_UART_TxC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2172 
	`UNUSED
(
hu¬®t
);

2176 
	}
}

2184 
__w√≥k
 
	$HAL_UART_TxH√ÜfC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2187 
	`UNUSED
(
hu¬®t
);

2191 
	}
}

2199 
__w√≥k
 
	$HAL_UART_RxC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2202 
	`UNUSED
(
hu¬®t
);

2206 
	}
}

2214 
__w√≥k
 
	$HAL_UART_RxH√ÜfC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2217 
	`UNUSED
(
hu¬®t
);

2221 
	}
}

2229 
__w√≥k
 
	$HAL_UART_E¬∫‚ÄπC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2232 
	`UNUSED
(
hu¬®t
);

2236 
	}
}

2243 
__w√≥k
 
	$HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2246 
	`UNUSED
(
hu¬®t
);

2251 
	}
}

2258 
__w√≥k
 
	$HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2261 
	`UNUSED
(
hu¬®t
);

2266 
	}
}

2273 
__w√≥k
 
	$HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2276 
	`UNUSED
(
hu¬®t
);

2281 
	}
}

2312 
HAL_S√®tusTy‚â•Def
 
	$HAL_LIN_S√≠dB¬™ak
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2315 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

2318 
	`__HAL_LOCK
(
hu¬®t
);

2320 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

2323 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_SBK
);

2325 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2328 
	`__HAL_UNLOCK
(
hu¬®t
);

2330  
HAL_OK
;

2331 
	}
}

2339 
HAL_S√®tusTy‚â•Def
 
	$HAL_Mu‚Ä¶iProÀöss‚Äπ_E¬°√ÆMu√£Mode
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2342 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

2345 
	`__HAL_LOCK
(
hu¬®t
);

2347 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

2350 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RWU
);

2352 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2355 
	`__HAL_UNLOCK
(
hu¬®t
);

2357  
HAL_OK
;

2358 
	}
}

2366 
HAL_S√®tusTy‚â•Def
 
	$HAL_Mu‚Ä¶iProÀöss‚Äπ_Ex√¥Mu√£Mode
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2369 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
hu¬®t
->
In¬∞‚Ñ¢Àö
));

2372 
	`__HAL_LOCK
(
hu¬®t
);

2374 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

2377 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RWU
);

2379 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2382 
	`__HAL_UNLOCK
(
hu¬®t
);

2384  
HAL_OK
;

2385 
	}
}

2393 
HAL_S√®tusTy‚â•Def
 
	$HAL_H√ÜfDu‚àÇex_E¬´b√ÄT√∏nsm√¥√£r
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2395 
u√∂t32_t
 
tm¬•eg
 = 0x00U;

2398 
	`__HAL_LOCK
(
hu¬®t
);

2400 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

2403 
tm¬•eg
 = 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
;

2406 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

2409 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)
USART_CR1_TE
;

2412 
	`WRITE_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
u√∂t32_t
)
tm¬•eg
);

2414 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2417 
	`__HAL_UNLOCK
(
hu¬®t
);

2419  
HAL_OK
;

2420 
	}
}

2428 
HAL_S√®tusTy‚â•Def
 
	$HAL_H√ÜfDu‚àÇex_E¬´b√ÄReÀöiv√Æ
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2430 
u√∂t32_t
 
tm¬•eg
 = 0x00U;

2433 
	`__HAL_LOCK
(
hu¬®t
);

2435 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_BUSY
;

2438 
tm¬•eg
 = 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
;

2441 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

2444 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)
USART_CR1_RE
;

2447 
	`WRITE_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
u√∂t32_t
)
tm¬•eg
);

2449 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2452 
	`__HAL_UNLOCK
(
hu¬®t
);

2454  
HAL_OK
;

2455 
	}
}

2485 
HAL_UART_S√®√£Ty‚â•Def
 
	$HAL_UART_G√´S√®√£
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2487 
u√∂t32_t
 
√£mp1
 = 0x00U, 
√£mp2
 = 0x00U;

2488 
√£mp1
 = 
hu¬®t
->
gS√®√£
;

2489 
√£mp2
 = 
hu¬®t
->
RxS√®√£
;

2491  (
HAL_UART_S√®√£Ty‚â•Def
)(
√£mp1
 | 
√£mp2
);

2492 
	}
}

2500 
u√∂t32_t
 
	$HAL_UART_G√´E¬∫‚Äπ
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2502  
hu¬®t
->
E¬∫‚ÄπCode
;

2503 
	}
}

2522 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2523 
	$UART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2526 
hu¬®t
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_UART_TxH√ÜfC‚àÇtC√Ülback
;

2527 
hu¬®t
->
TxC‚àÇtC√Ülback
 = 
HAL_UART_TxC‚àÇtC√Ülback
;

2528 
hu¬®t
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_UART_RxH√ÜfC‚àÇtC√Ülback
;

2529 
hu¬®t
->
RxC‚àÇtC√Ülback
 = 
HAL_UART_RxC‚àÇtC√Ülback
;

2530 
hu¬®t
->
E¬∫‚ÄπC√Ülback
 = 
HAL_UART_E¬∫‚ÄπC√Ülback
;

2531 
hu¬®t
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
;

2532 
hu¬®t
->
Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
 = 
HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
;

2533 
hu¬®t
->
Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
 = 
HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
;

2535 
	}
}

2544 
	$UART_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2546 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2548 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2550 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

2554 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2557 
	`SET_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2563 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2565 
hu¬®t
->
	`TxC‚àÇtC√Ülback
(huart);

2568 
	`HAL_UART_TxC‚àÇtC√Ülback
(
hu¬®t
);

2571 
	}
}

2579 
	$UART_DMATxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2581 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2583 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2585 
hu¬®t
->
	`TxH√ÜfC‚àÇtC√Ülback
(huart);

2588 
	`HAL_UART_TxH√ÜfC‚àÇtC√Ülback
(
hu¬®t
);

2590 
	}
}

2598 
	$UART_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2600 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2602 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2604 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0U;

2607 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2608 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2612 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2615 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2617 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2619 
hu¬®t
->
	`RxC‚àÇtC√Ülback
(huart);

2622 
	`HAL_UART_RxC‚àÇtC√Ülback
(
hu¬®t
);

2624 
	}
}

2632 
	$UART_DMARxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2634 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2636 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2638 
hu¬®t
->
	`RxH√ÜfC‚àÇtC√Ülback
(huart);

2641 
	`HAL_UART_RxH√ÜfC‚àÇtC√Ülback
(
hu¬®t
);

2643 
	}
}

2651 
	$UART_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2653 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

2654 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2657 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2658 i‚Ä°((
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

2660 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

2661 
	`UART_EndTxT√∏ns‚Äûr
(
hu¬®t
);

2665 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2666 i‚Ä°((
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

2668 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

2669 
	`UART_EndRxT√∏ns‚Äûr
(
hu¬®t
);

2672 
hu¬®t
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_UART_ERROR_DMA
;

2673 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2675 
hu¬®t
->
	`E¬∫‚ÄπC√Ülback
(huart);

2678 
	`HAL_UART_E¬∫‚ÄπC√Ülback
(
hu¬®t
);

2680 
	}
}

2692 
HAL_S√®tusTy‚â•Def
 
	$UART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
)

2695 (
	`__HAL_UART_GET_FLAG
(
hu¬®t
, 
F≈ìg
√ã? 
SET
 : 
RESET
√ã=Ô£ø
S√®tus
)

2698 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

2700 i‚Ä°((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
) > Timeout))

2703 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
));

2704 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2706 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2707 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2710 
	`__HAL_UNLOCK
(
hu¬®t
);

2712  
HAL_TIMEOUT
;

2716  
HAL_OK
;

2717 
	}
}

2724 
	$UART_EndTxT√∏ns‚Äûr
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2727 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

2730 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2731 
	}
}

2738 
	$UART_EndRxT√∏ns‚Äûr
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2741 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2742 
	`CLEAR_BIT
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2745 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2746 
	}
}

2755 
	$UART_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2757 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2758 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

2759 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

2761 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2763 
hu¬®t
->
	`E¬∫‚ÄπC√Ülback
(huart);

2766 
	`HAL_UART_E¬∫‚ÄπC√Ülback
(
hu¬®t
);

2768 
	}
}

2779 
	$UART_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2781 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2783 
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2786 i‚Ä°(
hu¬®t
->
hdm¬®x
 !Ô£ø
NULL
)

2788 i‚Ä°(
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2795 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

2796 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

2799 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

2802 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2803 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2806 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2808 
hu¬®t
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(huart);

2811 
	`HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
(
hu¬®t
);

2813 
	}
}

2824 
	$UART_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2826 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2828 
hu¬®t
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2831 i‚Ä°(
hu¬®t
->
hdm¬©x
 !Ô£ø
NULL
)

2833 i‚Ä°(
hu¬®t
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2840 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

2841 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

2844 
hu¬®t
->
E¬∫‚ÄπCode
 = 
HAL_UART_ERROR_NONE
;

2847 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2848 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2851 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2853 
hu¬®t
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(huart);

2856 
	`HAL_UART_Ab‚ÄπtC‚àÇtC√Ülback
(
hu¬®t
);

2858 
	}
}

2869 
	$UART_DMATxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2871 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2873 
hu¬®t
->
TxX‚ÄûrCou¬°
 = 0x00U;

2876 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2879 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2881 
hu¬®t
->
	`Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(huart);

2884 
	`HAL_UART_Ab‚ÄπtT√∏nsm√¥C‚àÇtC√Ülback
(
hu¬®t
);

2886 
	}
}

2897 
	$UART_DMARxO‚àÜyAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2899 
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
 = (UART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2901 
hu¬®t
->
RxX‚ÄûrCou¬°
 = 0x00U;

2904 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

2907 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2909 
hu¬®t
->
	`Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(huart);

2912 
	`HAL_UART_Ab‚ÄπtReÀöiveC‚àÇtC√Ülback
(
hu¬®t
);

2914 
	}
}

2922 
HAL_S√®tusTy‚â•Def
 
	$UART_T√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2924 
u√∂t16_t
 *
tmp
;

2927 i‚Ä°(
hu¬®t
->
gS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_TX
)

2929 i‚Ä°((
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
UART_WORDLENGTH_9B
√ã&& (hu¬®t->In√¥.
P¬®√¥y
 =Ô£ø
UART_PARITY_NONE
))

2931 
tmp
 = (
u√∂t16_t
 *√ã
hu¬®t
->
pTxBuffP√•
;

2932 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t16_t
)(*
tmp
 & (uint16_t)0x01FF);

2933 
hu¬®t
->
pTxBuffP√•
 += 2U;

2937 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*hu¬®t->
pTxBuffP√•
++ & (uint8_t)0x00FF);

2940 i‚Ä°(--
hu¬®t
->
TxX‚ÄûrCou¬°
 == 0U)

2943 
	`__HAL_UART_DISABLE_IT
(
hu¬®t
, 
UART_IT_TXE
);

2946 
	`__HAL_UART_ENABLE_IT
(
hu¬®t
, 
UART_IT_TC
);

2948  
HAL_OK
;

2952  
HAL_BUSY
;

2954 
	}
}

2962 
HAL_S√®tusTy‚â•Def
 
	$UART_EndT√∏nsm√¥_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2965 
	`__HAL_UART_DISABLE_IT
(
hu¬®t
, 
UART_IT_TC
);

2968 
hu¬®t
->
gS√®√£
 = 
HAL_UART_STATE_READY
;

2970 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

2972 
hu¬®t
->
	`TxC‚àÇtC√Ülback
(huart);

2975 
	`HAL_UART_TxC‚àÇtC√Ülback
(
hu¬®t
);

2978  
HAL_OK
;

2979 
	}
}

2987 
HAL_S√®tusTy‚â•Def
 
	$UART_ReÀöive_IT
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

2989 
u√∂t8_t
 *
pd¬©a8b√¥s
;

2990 
u√∂t16_t
 *
pd¬©a16b√¥s
;

2993 i‚Ä°(
hu¬®t
->
RxS√®√£
 =Ô£ø
HAL_UART_STATE_BUSY_RX
)

2995 i‚Ä°((
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
UART_WORDLENGTH_9B
√ã&& (hu¬®t->In√¥.
P¬®√¥y
 =Ô£ø
UART_PARITY_NONE
))

2997 
pd¬©a8b√¥s
 = 
NULL
;

2998 
pd¬©a16b√¥s
 = (
u√∂t16_t
 *√ã
hu¬®t
->
pRxBuffP√•
;

2999 *
pd¬©a16b√¥s
 = (
u√∂t16_t
)(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x01FF);

3000 
hu¬®t
->
pRxBuffP√•
 += 2U;

3004 
pd¬©a8b√¥s
 = (
u√∂t8_t
 *√ã
hu¬®t
->
pRxBuffP√•
;

3005 
pd¬©a16b√¥s
 = 
NULL
;

3007 i‚Ä°((
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
UART_WORDLENGTH_9B
√ã|| ((hu¬®t->In√¥.W‚ÄπdL√≠gth =Ô£ø
UART_WORDLENGTH_8B
√ã&& (hu¬®t->In√¥.
P¬®√¥y
 =Ô£ø
UART_PARITY_NONE
)))

3009 *
pd¬©a8b√¥s
 = (
u√∂t8_t
)(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

3013 *
pd¬©a8b√¥s
 = (
u√∂t8_t
)(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

3015 
hu¬®t
->
pRxBuffP√•
 += 1U;

3018 i‚Ä°(--
hu¬®t
->
RxX‚ÄûrCou¬°
 == 0U)

3021 
	`__HAL_UART_DISABLE_IT
(
hu¬®t
, 
UART_IT_RXNE
);

3024 
	`__HAL_UART_DISABLE_IT
(
hu¬®t
, 
UART_IT_PE
);

3027 
	`__HAL_UART_DISABLE_IT
(
hu¬®t
, 
UART_IT_ERR
);

3030 
hu¬®t
->
RxS√®√£
 = 
HAL_UART_STATE_READY
;

3032 #i‚Ä°(
USE_HAL_UART_REGISTER_CALLBACKS
 == 1)

3034 
hu¬®t
->
	`RxC‚àÇtC√Ülback
(huart);

3037 
	`HAL_UART_RxC‚àÇtC√Ülback
(
hu¬®t
);

3040  
HAL_OK
;

3042  
HAL_OK
;

3046  
HAL_BUSY
;

3048 
	}
}

3056 
	$UART_S√´C‚ÅÑfig
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

3058 
u√∂t32_t
 
tm¬•eg
;

3059 
u√∂t32_t
 
pÀõk
;

3062 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_BAUDRATE
(
hu¬®t
->
In√¥
.
BaudR¬©e
));

3063 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_STOPBITS
(
hu¬®t
->
In√¥
.
St‚Ä∫B√¥s
));

3064 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_PARITY
(
hu¬®t
->
In√¥
.
P¬®√¥y
));

3065 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_MODE
(
hu¬®t
->
In√¥
.
Mode
));

3070 
	`MODIFY_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_STOP
, hu¬®t->
In√¥
.
St‚Ä∫B√¥s
);

3079 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

3080 
tm¬•eg
 = (
u√∂t32_t
)
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 | hu¬®t->In√¥.
P¬®√¥y
 | hu¬®t->In√¥.
Mode
 | hu¬®t->In√¥.
Ov√ÆSam‚àÇ√∂g
;

3081 
	`MODIFY_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
,

3082 (
u√∂t32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
 | 
USART_CR1_OVER8
),

3083 
tm¬•eg
);

3085 
tm¬•eg
 = (
u√∂t32_t
)
hu¬®t
->
In√¥
.
W‚ÄπdL√≠gth
 | hu¬®t->In√¥.
P¬®√¥y
 | hu¬®t->In√¥.
Mode
;

3086 
	`MODIFY_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR1
,

3087 (
u√∂t32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
),

3088 
tm¬•eg
);

3093 
	`MODIFY_REG
(
hu¬®t
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
), hu¬®t->
In√¥
.
HwFlowC√©
);

3096 if(
hu¬®t
->
In¬∞‚Ñ¢Àö
 =Ô£ø
USART1
)

3098 
pÀõk
 = 
	`HAL_RCC_G√´PCLK2F¬™q
();

3102 
pÀõk
 = 
	`HAL_RCC_G√´PCLK1F¬™q
();

3106 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

3107 i‚Ä°(
hu¬®t
->
In√¥
.
Ov√ÆSam‚àÇ√∂g
 =Ô£ø
UART_OVERSAMPLING_8
)

3109 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`UART_BRR_SAMPLING8
(
pÀõk
, hu¬®t->
In√¥
.
BaudR¬©e
);

3113 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
pÀõk
, hu¬®t->
In√¥
.
BaudR¬©e
);

3116 
hu¬®t
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
pÀõk
, hu¬®t->
In√¥
.
BaudR¬©e
);

3118 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_usart.c

199 
	~"¬∞m32f1xx_h√Ü.h
"

209 #ifde‚Ä°
HAL_USART_MODULE_ENABLED


215 
	#DUMMY_DATA
 0xFFFFU

	)

216 
	#USART_TIMEOUT_VALUE
 22000U

	)

227 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

228 
USART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

230 
USART_EndTxT√∏ns‚Äûr
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

231 
USART_EndRxT√∏ns‚Äûr
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

232 
HAL_S√®tusTy‚â•Def
 
USART_T√∏nsm√¥_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

233 
HAL_S√®tusTy‚â•Def
 
USART_EndT√∏nsm√¥_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

234 
HAL_S√®tusTy‚â•Def
 
USART_ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

235 
HAL_S√®tusTy‚â•Def
 
USART_T√∏nsm√¥ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

236 
USART_S√´C‚ÅÑfig
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
);

237 
USART_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

238 
USART_DMATxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

239 
USART_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

240 
USART_DMARxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

241 
USART_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

242 
USART_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

243 
USART_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

244 
USART_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
);

246 
HAL_S√®tusTy‚â•Def
 
USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
);

295 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_In√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

298 i‚Ä°(
hu√üœÄ
 =Ô£ø
NULL
)

300  
HAL_ERROR
;

304 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_INSTANCE
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
));

306 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_RESET
)

309 
hu√üœÄ
->
Lock
 = 
HAL_UNLOCKED
;

311 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

312 
	`USART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
hu√üœÄ
);

314 i‚Ä°(
hu√üœÄ
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

316 
hu√üœÄ
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_USART_M‚Ä¢In√¥
;

320 
hu√üœÄ
->
	`M‚Ä¢In√¥C√Ülback
(husart);

323 
	`HAL_USART_M‚Ä¢In√¥
(
hu√üœÄ
);

327 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY
;

330 
	`USART_S√´C‚ÅÑfig
(
hu√üœÄ
);

335 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR2
, 
USART_CR2_LINEN
);

336 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

339 
	`__HAL_USART_ENABLE
(
hu√üœÄ
);

342 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

343 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

345  
HAL_OK
;

346 
	}
}

354 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_DeIn√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

357 i‚Ä°(
hu√üœÄ
 =Ô£ø
NULL
)

359  
HAL_ERROR
;

363 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_INSTANCE
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
));

365 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY
;

368 
	`__HAL_USART_DISABLE
(
hu√üœÄ
);

370 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

371 i‚Ä°(
hu√üœÄ
->
M‚Ä¢DeIn√¥C√Ülback
 =Ô£ø
NULL
)

373 
hu√üœÄ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_USART_M‚Ä¢DeIn√¥
;

376 
hu√üœÄ
->
	`M‚Ä¢DeIn√¥C√Ülback
(husart);

379 
	`HAL_USART_M‚Ä¢DeIn√¥
(
hu√üœÄ
);

382 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

383 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_RESET
;

386 
	`__HAL_UNLOCK
(
hu√üœÄ
);

388  
HAL_OK
;

389 
	}
}

397 
__w√≥k
 
	$HAL_USART_M‚Ä¢In√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

400 
	`UNUSED
(
hu√üœÄ
);

404 
	}
}

412 
__w√≥k
 
	$HAL_USART_M‚Ä¢DeIn√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

415 
	`UNUSED
(
hu√üœÄ
);

419 
	}
}

421 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

440 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_Regi¬∞√ÆC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
HAL_USART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
, 
pUSART_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

442 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

444 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

447 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

449  
HAL_ERROR
;

452 
	`__HAL_LOCK
(
hu√üœÄ
);

454 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

456 
C√ÜlbackID
)

458 
HAL_USART_TX_HALFCOMPLETE_CB_ID
 :

459 
hu√üœÄ
->
TxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

462 
HAL_USART_TX_COMPLETE_CB_ID
 :

463 
hu√üœÄ
->
TxC‚àÇtC√Ülback
 = 
pC√Ülback
;

466 
HAL_USART_RX_HALFCOMPLETE_CB_ID
 :

467 
hu√üœÄ
->
RxH√ÜfC‚àÇtC√Ülback
 = 
pC√Ülback
;

470 
HAL_USART_RX_COMPLETE_CB_ID
 :

471 
hu√üœÄ
->
RxC‚àÇtC√Ülback
 = 
pC√Ülback
;

474 
HAL_USART_TX_RX_COMPLETE_CB_ID
 :

475 
hu√üœÄ
->
TxRxC‚àÇtC√Ülback
 = 
pC√Ülback
;

478 
HAL_USART_ERROR_CB_ID
 :

479 
hu√üœÄ
->
E¬∫‚ÄπC√Ülback
 = 
pC√Ülback
;

482 
HAL_USART_ABORT_COMPLETE_CB_ID
 :

483 
hu√üœÄ
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
pC√Ülback
;

486 
HAL_USART_MSPINIT_CB_ID
 :

487 
hu√üœÄ
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

490 
HAL_USART_MSPDEINIT_CB_ID
 :

491 
hu√üœÄ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

496 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

499 
¬∞¬©us
 = 
HAL_ERROR
;

503 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_RESET
)

505 
C√ÜlbackID
)

507 
HAL_USART_MSPINIT_CB_ID
 :

508 
hu√üœÄ
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

511 
HAL_USART_MSPDEINIT_CB_ID
 :

512 
hu√üœÄ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
pC√Ülback
;

517 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

520 
¬∞¬©us
 = 
HAL_ERROR
;

527 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

530 
¬∞¬©us
 = 
HAL_ERROR
;

534 
	`__HAL_UNLOCK
(
hu√üœÄ
);

536  
¬∞¬©us
;

537 
	}
}

556 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_UnRegi¬∞√ÆC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
HAL_USART_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

558 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

561 
	`__HAL_LOCK
(
hu√üœÄ
);

563 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

565 
C√ÜlbackID
)

567 
HAL_USART_TX_HALFCOMPLETE_CB_ID
 :

568 
hu√üœÄ
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_USART_TxH√ÜfC‚àÇtC√Ülback
;

571 
HAL_USART_TX_COMPLETE_CB_ID
 :

572 
hu√üœÄ
->
TxC‚àÇtC√Ülback
 = 
HAL_USART_TxC‚àÇtC√Ülback
;

575 
HAL_USART_RX_HALFCOMPLETE_CB_ID
 :

576 
hu√üœÄ
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_USART_RxH√ÜfC‚àÇtC√Ülback
;

579 
HAL_USART_RX_COMPLETE_CB_ID
 :

580 
hu√üœÄ
->
RxC‚àÇtC√Ülback
 = 
HAL_USART_RxC‚àÇtC√Ülback
;

583 
HAL_USART_TX_RX_COMPLETE_CB_ID
 :

584 
hu√üœÄ
->
TxRxC‚àÇtC√Ülback
 = 
HAL_USART_TxRxC‚àÇtC√Ülback
;

587 
HAL_USART_ERROR_CB_ID
 :

588 
hu√üœÄ
->
E¬∫‚ÄπC√Ülback
 = 
HAL_USART_E¬∫‚ÄπC√Ülback
;

591 
HAL_USART_ABORT_COMPLETE_CB_ID
 :

592 
hu√üœÄ
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
;

595 
HAL_USART_MSPINIT_CB_ID
 :

596 
hu√üœÄ
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_USART_M‚Ä¢In√¥
;

599 
HAL_USART_MSPDEINIT_CB_ID
 :

600 
hu√üœÄ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_USART_M‚Ä¢DeIn√¥
;

605 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

608 
¬∞¬©us
 = 
HAL_ERROR
;

612 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_RESET
)

614 
C√ÜlbackID
)

616 
HAL_USART_MSPINIT_CB_ID
 :

617 
hu√üœÄ
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_USART_M‚Ä¢In√¥
;

620 
HAL_USART_MSPDEINIT_CB_ID
 :

621 
hu√üœÄ
->
M‚Ä¢DeIn√¥C√Ülback
 = 
HAL_USART_M‚Ä¢DeIn√¥
;

626 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

629 
¬∞¬©us
 = 
HAL_ERROR
;

636 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_INVALID_CALLBACK
;

639 
¬∞¬©us
 = 
HAL_ERROR
;

643 
	`__HAL_UNLOCK
(
hu√üœÄ
);

645  
¬∞¬©us
;

646 
	}
}

744 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_T√∏nsm√¥
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

746 
u√∂t16_t
 *
tmp
;

747 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

749 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

751 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0))

753  
HAL_ERROR
;

757 
	`__HAL_LOCK
(
hu√üœÄ
);

759 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

760 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_TX
;

763 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

765 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

766 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 
Size
;

767 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 > 0U)

769 
hu√üœÄ
->
TxX‚ÄûrCou¬°
--;

770 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

773 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

775  
HAL_TIMEOUT
;

777 
tmp
 = (
u√∂t16_t
 *√ã
pTxD¬©a
;

778 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (*
tmp
 & (
u√∂t16_t
)0x01FF);

779 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

781 
pTxD¬©a
 += 2U;

785 
pTxD¬©a
 += 1U;

790 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

792  
HAL_TIMEOUT
;

794 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (*
pTxD¬©a
++ & (
u√∂t8_t
)0xFF);

798 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TC
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

800  
HAL_TIMEOUT
;

803 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

806 
	`__HAL_UNLOCK
(
hu√üœÄ
);

808  
HAL_OK
;

812  
HAL_BUSY
;

814 
	}
}

829 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_ReÀöive
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pRxD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

831 
u√∂t16_t
 *
tmp
;

832 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

834 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

836 i‚Ä°((
pRxD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0))

838  
HAL_ERROR
;

841 
	`__HAL_LOCK
(
hu√üœÄ
);

843 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

844 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_RX
;

847 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

849 
hu√üœÄ
->
RxX‚ÄûrSize
 = 
Size
;

850 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 
Size
;

852 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 > 0U)

854 
hu√üœÄ
->
RxX‚ÄûrCou¬°
--;

855 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

858 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

860  
HAL_TIMEOUT
;

863 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
DUMMY_DATA
 & (
u√∂t16_t
)0x01FF);

866 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

868  
HAL_TIMEOUT
;

870 
tmp
 = (
u√∂t16_t
 *√ã
pRxD¬©a
 ;

871 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

873 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x01FF);

874 
pRxD¬©a
 += 2U;

878 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x00FF);

879 
pRxD¬©a
 += 1U;

885 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

887  
HAL_TIMEOUT
;

891 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
DUMMY_DATA
 & (
u√∂t16_t
)0x00FF);

894 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

896  
HAL_TIMEOUT
;

898 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

901 *
pRxD¬©a
++ = (
u√∂t8_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

906 *
pRxD¬©a
++ = (
u√∂t8_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

912 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

915 
	`__HAL_UNLOCK
(
hu√üœÄ
);

917  
HAL_OK
;

921  
HAL_BUSY
;

923 
	}
}

938 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_T√∏nsm√¥ReÀöive
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
, 
u√∂t32_t
 
Timeout
)

940 
u√∂t16_t
 *
tmp
;

941 
u√∂t32_t
 
tick¬∞¬®t
 = 0U;

943 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

945 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
pRxD¬©a
 =Ô£øNULL√ã|| (
Size
 == 0))

947  
HAL_ERROR
;

950 
	`__HAL_LOCK
(
hu√üœÄ
);

952 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

953 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_RX
;

956 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

958 
hu√üœÄ
->
RxX‚ÄûrSize
 = 
Size
;

959 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

960 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 
Size
;

961 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 
Size
;

964 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 > 0U)

966 
hu√üœÄ
->
TxX‚ÄûrCou¬°
--;

967 
hu√üœÄ
->
RxX‚ÄûrCou¬°
--;

968 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

971 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

973  
HAL_TIMEOUT
;

975 
tmp
 = (
u√∂t16_t
 *√ã
pTxD¬©a
;

976 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (*
tmp
 & (
u√∂t16_t
)0x01FF);

977 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

979 
pTxD¬©a
 += 2U;

983 
pTxD¬©a
 += 1U;

987 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

989  
HAL_TIMEOUT
;

991 
tmp
 = (
u√∂t16_t
 *√ã
pRxD¬©a
 ;

992 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

994 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x01FF);

995 
pRxD¬©a
 += 2U;

999 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x00FF);

1000 
pRxD¬©a
 += 1U;

1006 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_TXE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

1008  
HAL_TIMEOUT
;

1010 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (*
pTxD¬©a
++ & (
u√∂t8_t
)0x00FF);

1013 i‚Ä°(
	`USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
hu√üœÄ
, 
USART_FLAG_RXNE
, 
RESET
, 
tick¬∞¬®t
, 
Timeout
√ã!Ô£ø
HAL_OK
)

1015  
HAL_TIMEOUT
;

1017 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

1020 *
pRxD¬©a
++ = (
u√∂t8_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

1025 *
pRxD¬©a
++ = (
u√∂t8_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

1030 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

1033 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1035  
HAL_OK
;

1039  
HAL_BUSY
;

1041 
	}
}

1055 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_T√∏nsm√¥_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, 
u√∂t16_t
 
Size
)

1057 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

1059 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0))

1061  
HAL_ERROR
;

1065 
	`__HAL_LOCK
(
hu√üœÄ
);

1067 
hu√üœÄ
->
pTxBuffP√•
 = 
pTxD¬©a
;

1068 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

1069 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 
Size
;

1071 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1072 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_TX
;

1083 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1086 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

1088  
HAL_OK
;

1092  
HAL_BUSY
;

1094 
	}
}

1108 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pRxD¬©a
, 
u√∂t16_t
 
Size
)

1110 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

1112 i‚Ä°((
pRxD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0))

1114  
HAL_ERROR
;

1117 
	`__HAL_LOCK
(
hu√üœÄ
);

1119 
hu√üœÄ
->
pRxBuffP√•
 = 
pRxD¬©a
;

1120 
hu√üœÄ
->
RxX‚ÄûrSize
 = 
Size
;

1121 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 
Size
;

1123 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1124 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_RX
;

1127 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1130 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
 | 
USART_CR1_RXNEIE
);

1133 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1136 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
DUMMY_DATA
 & (
u√∂t16_t
)0x01FF);

1138  
HAL_OK
;

1142  
HAL_BUSY
;

1144 
	}
}

1158 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_T√∏nsm√¥ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
)

1160 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

1162 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
pRxD¬©a
 =Ô£øNULL√ã|| (
Size
 == 0))

1164  
HAL_ERROR
;

1167 
	`__HAL_LOCK
(
hu√üœÄ
);

1169 
hu√üœÄ
->
pRxBuffP√•
 = 
pRxD¬©a
;

1170 
hu√üœÄ
->
RxX‚ÄûrSize
 = 
Size
;

1171 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 
Size
;

1172 
hu√üœÄ
->
pTxBuffP√•
 = 
pTxD¬©a
;

1173 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

1174 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 
Size
;

1176 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1177 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_TX_RX
;

1180 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1183 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

1186 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1189 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1192 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

1194  
HAL_OK
;

1198  
HAL_BUSY
;

1200 
	}
}

1213 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_T√∏nsm√¥_DMA
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, 
u√∂t16_t
 
Size
)

1215 
u√∂t32_t
 *
tmp
;

1217 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

1219 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0))

1221  
HAL_ERROR
;

1224 
	`__HAL_LOCK
(
hu√üœÄ
);

1226 
hu√üœÄ
->
pTxBuffP√•
 = 
pTxD¬©a
;

1227 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

1228 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 
Size
;

1230 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1231 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_TX
;

1234 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
USART_DMAT√∏nsm√¥C‚àÇt
;

1237 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
USART_DMATxH√ÜfC‚àÇt
;

1240 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
USART_DMAE¬∫‚Äπ
;

1243 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1246 
tmp
 = (
u√∂t32_t
 *)&
pTxD¬©a
;

1247 
	`HAL_DMA_S√®œÄ_IT
(
hu√üœÄ
->
hdm¬©x
, *(
u√∂t32_t
 *)
tmp
, (u√∂t32_t)&hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
, 
Size
);

1250 
	`__HAL_USART_CLEAR_FLAG
(
hu√üœÄ
, 
USART_FLAG_TC
);

1253 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1257 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1259  
HAL_OK
;

1263  
HAL_BUSY
;

1265 
	}
}

1280 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_ReÀöive_DMA
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pRxD¬©a
, 
u√∂t16_t
 
Size
)

1282 
u√∂t32_t
 *
tmp
;

1284 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

1286 i‚Ä°((
pRxD¬©a
 =Ô£ø
NULL
√ã|| (
Size
 == 0))

1288  
HAL_ERROR
;

1292 
	`__HAL_LOCK
(
hu√üœÄ
);

1294 
hu√üœÄ
->
pRxBuffP√•
 = 
pRxD¬©a
;

1295 
hu√üœÄ
->
RxX‚ÄûrSize
 = 
Size
;

1296 
hu√üœÄ
->
pTxBuffP√•
 = 
pRxD¬©a
;

1297 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

1299 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1300 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_RX
;

1303 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
USART_DMAReÀöiveC‚àÇt
;

1306 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
USART_DMARxH√ÜfC‚àÇt
;

1309 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
USART_DMAE¬∫‚Äπ
;

1312 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1316 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
NULL
;

1317 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
NULL
;

1320 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
USART_DMAE¬∫‚Äπ
;

1323 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1326 
tmp
 = (
u√∂t32_t
 *)&
pRxD¬©a
;

1327 
	`HAL_DMA_S√®œÄ_IT
(
hu√üœÄ
->
hdm¬®x
, (
u√∂t32_t
)&hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
, *(u√∂t32_√†*)
tmp
, 
Size
);

1332 
	`HAL_DMA_S√®œÄ_IT
(
hu√üœÄ
->
hdm¬©x
, *(
u√∂t32_t
 *)
tmp
, (u√∂t32_t)&hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
, 
Size
);

1335 
	`__HAL_USART_CLEAR_OREFLAG
(
hu√üœÄ
);

1338 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1341 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1344 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1348 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1352 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1354  
HAL_OK
;

1358  
HAL_BUSY
;

1360 
	}
}

1375 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_T√∏nsm√¥ReÀöive_DMA
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t8_t
 *
pTxD¬©a
, u√∂t8_√†*
pRxD¬©a
, 
u√∂t16_t
 
Size
)

1377 
u√∂t32_t
 *
tmp
;

1379 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_READY
)

1381 i‚Ä°((
pTxD¬©a
 =Ô£ø
NULL
√ã|| (
pRxD¬©a
 =Ô£øNULL√ã|| (
Size
 == 0))

1383  
HAL_ERROR
;

1386 
	`__HAL_LOCK
(
hu√üœÄ
);

1388 
hu√üœÄ
->
pRxBuffP√•
 = 
pRxD¬©a
;

1389 
hu√üœÄ
->
RxX‚ÄûrSize
 = 
Size
;

1390 
hu√üœÄ
->
pTxBuffP√•
 = 
pTxD¬©a
;

1391 
hu√üœÄ
->
TxX‚ÄûrSize
 = 
Size
;

1393 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1394 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_BUSY_TX_RX
;

1397 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
USART_DMAReÀöiveC‚àÇt
;

1400 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
USART_DMARxH√ÜfC‚àÇt
;

1403 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrC‚àÇtC√Ülback
 = 
USART_DMAT√∏nsm√¥C‚àÇt
;

1406 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrH√ÜfC‚àÇtC√Ülback
 = 
USART_DMATxH√ÜfC‚àÇt
;

1409 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
USART_DMAE¬∫‚Äπ
;

1412 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrE¬∫‚ÄπC√Ülback
 = 
USART_DMAE¬∫‚Äπ
;

1415 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1418 
tmp
 = (
u√∂t32_t
 *)&
pRxD¬©a
;

1419 
	`HAL_DMA_S√®œÄ_IT
(
hu√üœÄ
->
hdm¬®x
, (
u√∂t32_t
)&hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
, *(u√∂t32_√†*)
tmp
, 
Size
);

1422 
tmp
 = (
u√∂t32_t
 *)&
pTxD¬©a
;

1423 
	`HAL_DMA_S√®œÄ_IT
(
hu√üœÄ
->
hdm¬©x
, *(
u√∂t32_t
 *)
tmp
, (u√∂t32_t)&hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
, 
Size
);

1426 
	`__HAL_USART_CLEAR_FLAG
(
hu√üœÄ
, 
USART_FLAG_TC
);

1429 
	`__HAL_USART_CLEAR_OREFLAG
(
hu√üœÄ
);

1432 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1435 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

1438 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1442 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1446 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1448  
HAL_OK
;

1452  
HAL_BUSY
;

1454 
	}
}

1462 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_DMAPau¬£
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1465 
	`__HAL_LOCK
(
hu√üœÄ
);

1468 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1471 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1473  
HAL_OK
;

1474 
	}
}

1482 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_DMAResume
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1485 
	`__HAL_LOCK
(
hu√üœÄ
);

1488 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1491 
	`__HAL_UNLOCK
(
hu√üœÄ
);

1493  
HAL_OK
;

1494 
	}
}

1502 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_DMASt‚Ä∫
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1504 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1512 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1513 i‚Ä°((
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

1515 
	`USART_EndTxT√∏ns‚Äûr
(
hu√üœÄ
);

1518 i‚Ä°(
hu√üœÄ
->
hdm¬©x
 !Ô£ø
NULL
)

1520 
	`HAL_DMA_Ab‚Äπt
(
hu√üœÄ
->
hdm¬©x
);

1524 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1528 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1529 i‚Ä°((
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

1531 
	`USART_EndRxT√∏ns‚Äûr
(
hu√üœÄ
);

1534 i‚Ä°(
hu√üœÄ
->
hdm¬®x
 !Ô£ø
NULL
)

1536 
	`HAL_DMA_Ab‚Äπt
(
hu√üœÄ
->
hdm¬®x
);

1540 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1543  
HAL_OK
;

1544 
	}
}

1559 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_Ab‚Äπt
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1562 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1563 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1566 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1568 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1571 i‚Ä°(
hu√üœÄ
->
hdm¬©x
 !Ô£ø
NULL
)

1575 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1577 
	`HAL_DMA_Ab‚Äπt
(
hu√üœÄ
->
hdm¬©x
);

1582 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1584 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1587 i‚Ä°(
hu√üœÄ
->
hdm¬®x
 !Ô£ø
NULL
)

1591 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1593 
	`HAL_DMA_Ab‚Äπt
(
hu√üœÄ
->
hdm¬®x
);

1598 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0x00U;

1599 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

1602 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

1605 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1607  
HAL_OK
;

1608 
	}
}

1625 
HAL_S√®tusTy‚â•Def
 
	$HAL_USART_Ab‚Äπt_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1627 
u√∂t32_t
 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1630 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1631 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

1636 i‚Ä°(
hu√üœÄ
->
hdm¬©x
 !Ô£ø
NULL
)

1640 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1642 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
USART_DMATxAb‚ÄπtC√Ülback
;

1646 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1650 i‚Ä°(
hu√üœÄ
->
hdm¬®x
 !Ô£ø
NULL
)

1654 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1656 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
USART_DMARxAb‚ÄπtC√Ülback
;

1660 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1665 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
))

1668 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

1671 i‚Ä°(
hu√üœÄ
->
hdm¬©x
 !Ô£ø
NULL
)

1677 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu√üœÄ
->
hdm¬©x
√ã!Ô£ø
HAL_OK
)

1679 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1683 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1689 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1691 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1694 i‚Ä°(
hu√üœÄ
->
hdm¬®x
 !Ô£ø
NULL
)

1700 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu√üœÄ
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1702 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

1703 
Ab‚ÄπtC‚àÇt
 = 0x01U;

1707 
Ab‚ÄπtC‚àÇt
 = 0x00U;

1713 i‚Ä°(
Ab‚ÄπtC‚àÇt
 == 0x01U)

1716 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0x00U;

1717 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

1720 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1723 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

1726 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

1728 
hu√üœÄ
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(husart);

1731 
	`HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
(
hu√üœÄ
);

1735  
HAL_OK
;

1736 
	}
}

1744 
	$HAL_USART_IRQH‚Ñ¢d√Är
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1746 
u√∂t32_t
 
i¬ß√äags
 = 
	`READ_REG
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
SR
);

1747 
u√∂t32_t
 
¬∏1√¥s
 = 
	`READ_REG
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
);

1748 
u√∂t32_t
 
¬∏3√¥s
 = 
	`READ_REG
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
);

1749 
u√∂t32_t
 
√Ær‚Äπ√äags
 = 0x00U;

1750 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

1753 
√Ær‚Äπ√äags
 = (
i¬ß√äags
 & (
u√∂t32_t
)(
USART_SR_PE
 | 
USART_SR_FE
 | 
USART_SR_ORE
 | 
USART_SR_NE
));

1754 i‚Ä°(
√Ær‚Äπ√äags
 =Ô£ø
RESET
)

1757 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

1759 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
)

1761 
	`USART_ReÀöive_IT
(
hu√üœÄ
);

1765 
	`USART_T√∏nsm√¥ReÀöive_IT
(
hu√üœÄ
);

1771 i‚Ä°((
√Ær‚Äπ√äags
 !Ô£ø
RESET
√ã&& (((
¬∏3√¥s
 & 
USART_CR3_EIE
√ã!Ô£øRESET√ã|| ((
¬∏1√¥s
 & (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
)) != RESET)))

1774 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_PE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_PEIE
) != RESET))

1776 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_PE
;

1780 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_NE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1782 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_NE
;

1786 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_FE
√ã!Ô£ø
RESET
√ã&& ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET))

1788 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_FE
;

1792 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_ORE
√ã!Ô£ø
RESET
√ã&& (((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
√ã!Ô£øRESET√ã|| ((
¬∏3√¥s
 & 
USART_CR3_EIE
) != RESET)))

1794 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_ORE
;

1797 i‚Ä°(
hu√üœÄ
->
E¬∫‚ÄπCode
 !Ô£ø
HAL_USART_ERROR_NONE
)

1800 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_RXNE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_RXNEIE
) != RESET))

1802 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
)

1804 
	`USART_ReÀöive_IT
(
hu√üœÄ
);

1808 
	`USART_T√∏nsm√¥ReÀöive_IT
(
hu√üœÄ
);

1813 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1814 i‚Ä°(((
hu√üœÄ
->
E¬∫‚ÄπCode
 & 
HAL_USART_ERROR_ORE
√ã!Ô£ø
RESET
√ã|| 
dm¬®eque¬∞
)

1818 
	`USART_EndRxT√∏ns‚Äûr
(
hu√üœÄ
);

1821 i‚Ä°(
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
))

1823 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

1826 i‚Ä°(
hu√üœÄ
->
hdm¬®x
 !Ô£ø
NULL
)

1830 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
USART_DMAAb‚ÄπtOnE¬∫‚Äπ
;

1832 i‚Ä°(
	`HAL_DMA_Ab‚Äπt_IT
(
hu√üœÄ
->
hdm¬®x
√ã!Ô£ø
HAL_OK
)

1835 
hu√üœÄ
->
hdm¬®x
->
	`X‚ÄûrAb‚ÄπtC√Ülback
(husart->hdmarx);

1841 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

1843 
hu√üœÄ
->
	`E¬∫‚ÄπC√Ülback
(husart);

1846 
	`HAL_USART_E¬∫‚ÄπC√Ülback
(
hu√üœÄ
);

1853 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

1855 
hu√üœÄ
->
	`E¬∫‚ÄπC√Ülback
(husart);

1858 
	`HAL_USART_E¬∫‚ÄπC√Ülback
(
hu√üœÄ
);

1865 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

1867 
hu√üœÄ
->
	`E¬∫‚ÄπC√Ülback
(husart);

1870 
	`HAL_USART_E¬∫‚ÄπC√Ülback
(
hu√üœÄ
);

1872 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

1879 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_TXE
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TXEIE
) != RESET))

1881 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX
)

1883 
	`USART_T√∏nsm√¥_IT
(
hu√üœÄ
);

1887 
	`USART_T√∏nsm√¥ReÀöive_IT
(
hu√üœÄ
);

1893 i‚Ä°(((
i¬ß√äags
 & 
USART_SR_TC
√ã!Ô£ø
RESET
√ã&& ((
¬∏1√¥s
 & 
USART_CR1_TCIE
) != RESET))

1895 
	`USART_EndT√∏nsm√¥_IT
(
hu√üœÄ
);

1898 
	}
}

1906 
__w√≥k
 
	$HAL_USART_TxC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1909 
	`UNUSED
(
hu√üœÄ
);

1913 
	}
}

1921 
__w√≥k
 
	$HAL_USART_TxH√ÜfC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1924 
	`UNUSED
(
hu√üœÄ
);

1928 
	}
}

1936 
__w√≥k
 
	$HAL_USART_RxC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1939 
	`UNUSED
(
hu√üœÄ
);

1943 
	}
}

1951 
__w√≥k
 
	$HAL_USART_RxH√ÜfC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1954 
	`UNUSED
(
hu√üœÄ
);

1958 
	}
}

1966 
__w√≥k
 
	$HAL_USART_TxRxC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1969 
	`UNUSED
(
hu√üœÄ
);

1973 
	}
}

1981 
__w√≥k
 
	$HAL_USART_E¬∫‚ÄπC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1984 
	`UNUSED
(
hu√üœÄ
);

1988 
	}
}

1995 
__w√≥k
 
	$HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

1998 
	`UNUSED
(
hu√üœÄ
);

2003 
	}
}

2034 
HAL_USART_S√®√£Ty‚â•Def
 
	$HAL_USART_G√´S√®√£
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2036  
hu√üœÄ
->
S√®√£
;

2037 
	}
}

2045 
u√∂t32_t
 
	$HAL_USART_G√´E¬∫‚Äπ
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2047  
hu√üœÄ
->
E¬∫‚ÄπCode
;

2048 
	}
}

2063 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2064 
	$USART_In√¥C√ÜlbacksToDe√Åu‚Ä¶
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2067 
hu√üœÄ
->
TxH√ÜfC‚àÇtC√Ülback
 = 
HAL_USART_TxH√ÜfC‚àÇtC√Ülback
;

2068 
hu√üœÄ
->
TxC‚àÇtC√Ülback
 = 
HAL_USART_TxC‚àÇtC√Ülback
;

2069 
hu√üœÄ
->
RxH√ÜfC‚àÇtC√Ülback
 = 
HAL_USART_RxH√ÜfC‚àÇtC√Ülback
;

2070 
hu√üœÄ
->
RxC‚àÇtC√Ülback
 = 
HAL_USART_RxC‚àÇtC√Ülback
;

2071 
hu√üœÄ
->
TxRxC‚àÇtC√Ülback
 = 
HAL_USART_TxRxC‚àÇtC√Ülback
;

2072 
hu√üœÄ
->
E¬∫‚ÄπC√Ülback
 = 
HAL_USART_E¬∫‚ÄπC√Ülback
;

2073 
hu√üœÄ
->
Ab‚ÄπtC‚àÇtC√Ülback
 = 
HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
;

2074 
	}
}

2083 
	$USART_DMAT√∏nsm√¥C‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2085 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2087 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2089 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0U;

2090 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX
)

2094 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2097 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2103 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX
)

2105 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2107 
hu√üœÄ
->
	`TxC‚àÇtC√Ülback
(husart);

2110 
	`HAL_USART_TxC‚àÇtC√Ülback
(
hu√üœÄ
);

2114 
	}
}

2122 
	$USART_DMATxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2124 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2126 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2128 
hu√üœÄ
->
	`TxH√ÜfC‚àÇtC√Ülback
(husart);

2131 
	`HAL_USART_TxH√ÜfC‚àÇtC√Ülback
(
hu√üœÄ
);

2133 
	}
}

2141 
	$USART_DMAReÀöiveC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2143 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2145 i‚Ä°((
hdma
->
In¬∞‚Ñ¢Àö
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

2147 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

2150 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2151 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2155 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2156 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2159 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
)

2161 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2163 
hu√üœÄ
->
	`RxC‚àÇtC√Ülback
(husart);

2166 
	`HAL_USART_RxC‚àÇtC√Ülback
(
hu√üœÄ
);

2172 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2174 
hu√üœÄ
->
	`TxRxC‚àÇtC√Ülback
(husart);

2177 
	`HAL_USART_TxRxC‚àÇtC√Ülback
(
hu√üœÄ
);

2180 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2185 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
)

2187 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2189 
hu√üœÄ
->
	`RxC‚àÇtC√Ülback
(husart);

2192 
	`HAL_USART_RxC‚àÇtC√Ülback
(
hu√üœÄ
);

2198 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2200 
hu√üœÄ
->
	`TxRxC‚àÇtC√Ülback
(husart);

2203 
	`HAL_USART_TxRxC‚àÇtC√Ülback
(
hu√üœÄ
);

2207 
	}
}

2215 
	$USART_DMARxH√ÜfC‚àÇt
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2217 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2219 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2221 
hu√üœÄ
->
	`RxH√ÜfC‚àÇtC√Ülback
(husart);

2224 
	`HAL_USART_RxH√ÜfC‚àÇtC√Ülback
(
hu√üœÄ
);

2226 
	}
}

2234 
	$USART_DMAE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2236 
u√∂t32_t
 
dm¬®eque¬∞
 = 0x00U;

2237 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2238 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

2239 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0x00U;

2242 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAT
);

2243 i‚Ä°((
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX
√ã&& 
dm¬®eque¬∞
)

2245 
	`USART_EndTxT√∏ns‚Äûr
(
hu√üœÄ
);

2249 
dm¬®eque¬∞
 = 
	`HAL_IS_BIT_SET
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_DMAR
);

2250 i‚Ä°((
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
√ã&& 
dm¬®eque¬∞
)

2252 
	`USART_EndRxT√∏ns‚Äûr
(
hu√üœÄ
);

2255 
hu√üœÄ
->
E¬∫‚ÄπCode
 |Ô£ø
HAL_USART_ERROR_DMA
;

2256 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2258 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2260 
hu√üœÄ
->
	`E¬∫‚ÄπC√Ülback
(husart);

2263 
	`HAL_USART_E¬∫‚ÄπC√Ülback
(
hu√üœÄ
);

2265 
	}
}

2277 
HAL_S√®tusTy‚â•Def
 
	$USART_Wa√¥OnF≈ìgU¬°√ªTimeout
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
, 
u√∂t32_t
 
F≈ìg
, 
F≈ìgS√®tus
 
S√®tus
, u√∂t32_√†
Tick¬∞¬®t
, u√∂t32_√†
Timeout
)

2280 (
	`__HAL_USART_GET_FLAG
(
hu√üœÄ
, 
F≈ìg
√ã? 
SET
 : 
RESET
√ã=Ô£ø
S√®tus
)

2283 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

2285 i‚Ä°((
Timeout
 =Ô£ø0U√ã|| ((
	`HAL_G√´Tick
(√ã- 
Tick¬∞¬®t
) > Timeout))

2288 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

2291 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

2294 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2297 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2299 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2302 
	`__HAL_UNLOCK
(
hu√üœÄ
);

2304  
HAL_TIMEOUT
;

2308  
HAL_OK
;

2309 
	}
}

2316 
	$USART_EndTxT√∏ns‚Äûr
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2319 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

2322 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2323 
	}
}

2330 
	$USART_EndRxT√∏ns‚Äûr
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2333 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2334 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2337 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2338 
	}
}

2346 
	$USART_DMAAb‚ÄπtOnE¬∫‚Äπ
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2348 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2349 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

2350 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0x00U;

2352 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2354 
hu√üœÄ
->
	`E¬∫‚ÄπC√Ülback
(husart);

2357 
	`HAL_USART_E¬∫‚ÄπC√Ülback
(
hu√üœÄ
);

2359 
	}
}

2369 
	$USART_DMATxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2371 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2373 
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2376 i‚Ä°(
hu√üœÄ
->
hdm¬®x
 !Ô£ø
NULL
)

2378 i‚Ä°(
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2385 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0x00U;

2386 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

2389 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

2392 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2395 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2397 
hu√üœÄ
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(husart);

2400 
	`HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
(
hu√üœÄ
);

2402 
	}
}

2412 
	$USART_DMARxAb‚ÄπtC√Ülback
(
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *
hdma
)

2414 
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
 = (USART_H‚Ñ¢d√ÄTy‚â•De‚Ä°*)((
DMA_H‚Ñ¢d√ÄTy‚â•Def
 *)
hdma
)->
P¬®√≠t
;

2416 
hu√üœÄ
->
hdm¬®x
->
X‚ÄûrAb‚ÄπtC√Ülback
 = 
NULL
;

2419 i‚Ä°(
hu√üœÄ
->
hdm¬©x
 !Ô£ø
NULL
)

2421 i‚Ä°(
hu√üœÄ
->
hdm¬©x
->
X‚ÄûrAb‚ÄπtC√Ülback
 !Ô£ø
NULL
)

2428 
hu√üœÄ
->
TxX‚ÄûrCou¬°
 = 0x00U;

2429 
hu√üœÄ
->
RxX‚ÄûrCou¬°
 = 0x00U;

2432 
hu√üœÄ
->
E¬∫‚ÄπCode
 = 
HAL_USART_ERROR_NONE
;

2435 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2438 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2440 
hu√üœÄ
->
	`Ab‚ÄπtC‚àÇtC√Ülback
(husart);

2443 
	`HAL_USART_Ab‚ÄπtC‚àÇtC√Ülback
(
hu√üœÄ
);

2445 
	}
}

2454 
HAL_S√®tusTy‚â•Def
 
	$USART_T√∏nsm√¥_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2456 
u√∂t16_t
 *
tmp
;

2458 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX
)

2460 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

2462 
tmp
 = (
u√∂t16_t
 *√ã
hu√üœÄ
->
pTxBuffP√•
;

2463 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t16_t
)(*
tmp
 & (uint16_t)0x01FF);

2464 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

2466 
hu√üœÄ
->
pTxBuffP√•
 += 2U;

2470 
hu√üœÄ
->
pTxBuffP√•
 += 1U;

2475 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*hu√üœÄ->
pTxBuffP√•
++ & (uint8_t)0x00FF);

2478 i‚Ä°(--
hu√üœÄ
->
TxX‚ÄûrCou¬°
 == 0U)

2481 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

2484 
	`SET_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2486  
HAL_OK
;

2490  
HAL_BUSY
;

2492 
	}
}

2500 
HAL_S√®tusTy‚â•Def
 
	$USART_EndT√∏nsm√¥_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2503 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TCIE
);

2506 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2508 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2510 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2512 
hu√üœÄ
->
	`TxC‚àÇtC√Ülback
(husart);

2515 
	`HAL_USART_TxC‚àÇtC√Ülback
(
hu√üœÄ
);

2518  
HAL_OK
;

2519 
	}
}

2527 
HAL_S√®tusTy‚â•Def
 
	$USART_ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2529 
u√∂t16_t
 *
tmp
;

2530 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_RX
)

2532 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

2534 
tmp
 = (
u√∂t16_t
 *√ã
hu√üœÄ
->
pRxBuffP√•
;

2535 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

2537 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x01FF);

2538 
hu√üœÄ
->
pRxBuffP√•
 += 2U;

2542 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x00FF);

2543 
hu√üœÄ
->
pRxBuffP√•
 += 1U;

2545 i‚Ä°(--
hu√üœÄ
->
RxX‚ÄûrCou¬°
 != 0x00U)

2548 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
DUMMY_DATA
 & (
u√∂t16_t
)0x01FF);

2553 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

2555 *
hu√üœÄ
->
pRxBuffP√•
++ = (
u√∂t8_t
)(hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

2559 *
hu√üœÄ
->
pRxBuffP√•
++ = (
u√∂t8_t
)(hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

2562 i‚Ä°(--
hu√üœÄ
->
RxX‚ÄûrCou¬°
 != 0x00U)

2565 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
DUMMY_DATA
 & (
u√∂t16_t
)0x00FF);

2569 i‚Ä°(
hu√üœÄ
->
RxX‚ÄûrCou¬°
 == 0U)

2572 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

2575 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2578 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2580 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2581 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2583 
hu√üœÄ
->
	`RxC‚àÇtC√Ülback
(husart);

2586 
	`HAL_USART_RxC‚àÇtC√Ülback
(
hu√üœÄ
);

2589  
HAL_OK
;

2591  
HAL_OK
;

2595  
HAL_BUSY
;

2597 
	}
}

2605 
HAL_S√®tusTy‚â•Def
 
	$USART_T√∏nsm√¥ReÀöive_IT
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2607 
u√∂t16_t
 *
tmp
;

2609 i‚Ä°(
hu√üœÄ
->
S√®√£
 =Ô£ø
HAL_USART_STATE_BUSY_TX_RX
)

2611 i‚Ä°(
hu√üœÄ
->
TxX‚ÄûrCou¬°
 != 0x00U)

2613 i‚Ä°(
	`__HAL_USART_GET_FLAG
(
hu√üœÄ
, 
USART_FLAG_TXE
√ã!Ô£ø
RESET
)

2615 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

2617 
tmp
 = (
u√∂t16_t
 *√ã
hu√üœÄ
->
pTxBuffP√•
;

2618 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t16_t
)(*
tmp
 & (uint16_t)0x01FF);

2619 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

2621 
hu√üœÄ
->
pTxBuffP√•
 += 2U;

2625 
hu√üœÄ
->
pTxBuffP√•
 += 1U;

2630 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 = (
u√∂t8_t
)(*hu√üœÄ->
pTxBuffP√•
++ & (uint8_t)0x00FF);

2632 
hu√üœÄ
->
TxX‚ÄûrCou¬°
--;

2635 i‚Ä°(
hu√üœÄ
->
TxX‚ÄûrCou¬°
 == 0U)

2637 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_TXEIE
);

2642 i‚Ä°(
hu√üœÄ
->
RxX‚ÄûrCou¬°
 != 0x00U)

2644 i‚Ä°(
	`__HAL_USART_GET_FLAG
(
hu√üœÄ
, 
USART_FLAG_RXNE
√ã!Ô£ø
RESET
)

2646 i‚Ä°(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 =Ô£ø
USART_WORDLENGTH_9B
)

2648 
tmp
 = (
u√∂t16_t
 *√ã
hu√üœÄ
->
pRxBuffP√•
;

2649 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

2651 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x01FF);

2652 
hu√üœÄ
->
pRxBuffP√•
 += 2U;

2656 *
tmp
 = (
u√∂t16_t
)(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
DR
 & (uint16_t)0x00FF);

2657 
hu√üœÄ
->
pRxBuffP√•
 += 1U;

2662 i‚Ä°(
hu√üœÄ
->
In√¥
.
P¬®√¥y
 =Ô£ø
USART_PARITY_NONE
)

2664 *
hu√üœÄ
->
pRxBuffP√•
++ = (
u√∂t8_t
)(hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x00FF);

2668 *
hu√üœÄ
->
pRxBuffP√•
++ = (
u√∂t8_t
)(hu√üœÄ->
In¬∞‚Ñ¢Àö
->
DR
 & (uint8_t)0x007F);

2671 
hu√üœÄ
->
RxX‚ÄûrCou¬°
--;

2676 i‚Ä°(
hu√üœÄ
->
RxX‚ÄûrCou¬°
 == 0U)

2679 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_RXNEIE
);

2682 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, 
USART_CR1_PEIE
);

2685 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, 
USART_CR3_EIE
);

2687 
hu√üœÄ
->
S√®√£
 = 
HAL_USART_STATE_READY
;

2689 #i‚Ä°(
USE_HAL_USART_REGISTER_CALLBACKS
 == 1)

2691 
hu√üœÄ
->
	`TxRxC‚àÇtC√Ülback
(husart);

2694 
	`HAL_USART_TxRxC‚àÇtC√Ülback
(
hu√üœÄ
);

2697  
HAL_OK
;

2700  
HAL_OK
;

2704  
HAL_BUSY
;

2706 
	}
}

2714 
	$USART_S√´C‚ÅÑfig
(
USART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu√üœÄ
)

2716 
u√∂t32_t
 
tm¬•eg
 = 0x00U;

2717 
u√∂t32_t
 
pÀõk
;

2720 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_INSTANCE
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
));

2721 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_POLARITY
(
hu√üœÄ
->
In√¥
.
CLKPÔ¨Å¬®√¥y
));

2722 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_PHASE
(
hu√üœÄ
->
In√¥
.
CLKPha¬£
));

2723 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_LASTBIT
(
hu√üœÄ
->
In√¥
.
CLKLa¬∞B√¥
));

2724 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_BAUDRATE
(
hu√üœÄ
->
In√¥
.
BaudR¬©e
));

2725 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_WORD_LENGTH
(
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
));

2726 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_STOPBITS
(
hu√üœÄ
->
In√¥
.
St‚Ä∫B√¥s
));

2727 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_PARITY
(
hu√üœÄ
->
In√¥
.
P¬®√¥y
));

2728 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_MODE
(
hu√üœÄ
->
In√¥
.
Mode
));

2732 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, (
USART_CR1_TE
 | 
USART_CR1_RE
));

2735 
tm¬•eg
 = 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR2
;

2737 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)(
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_CLKEN
 | 
USART_CR2_LBCL
 | 
USART_CR2_STOP
));

2743 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)(
USART_CLOCK_ENABLE
 | 
hu√üœÄ
->
In√¥
.
CLKPÔ¨Å¬®√¥y
 |

2744 
hu√üœÄ
->
In√¥
.
CLKPha¬£
 | hu√üœÄ->In√¥.
CLKLa¬∞B√¥
 | hu√üœÄ->In√¥.
St‚Ä∫B√¥s
);

2746 
	`WRITE_REG
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR2
, (
u√∂t32_t
)
tm¬•eg
);

2749 
tm¬•eg
 = 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
;

2752 
tm¬•eg
 &Ô£ø(
u√∂t32_t
)~((u√∂t32_t)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
));

2759 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)
hu√üœÄ
->
In√¥
.
W‚ÄπdL√≠gth
 | hu√üœÄ->In√¥.
P¬®√¥y
 | hu√üœÄ->In√¥.
Mode
;

2762 
	`WRITE_REG
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR1
, (
u√∂t32_t
)
tm¬•eg
);

2766 
	`CLEAR_BIT
(
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

2769 if((
hu√üœÄ
->
In¬∞‚Ñ¢Àö
 =Ô£ø
USART1
))

2771 
pÀõk
 = 
	`HAL_RCC_G√´PCLK2F¬™q
();

2772 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`USART_BRR
(
pÀõk
, hu√üœÄ->
In√¥
.
BaudR¬©e
);

2776 
pÀõk
 = 
	`HAL_RCC_G√´PCLK1F¬™q
();

2777 
hu√üœÄ
->
In¬∞‚Ñ¢Àö
->
BRR
 = 
	`USART_BRR
(
pÀõk
, hu√üœÄ->
In√¥
.
BaudR¬©e
);

2779 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_wwdg.c

129 
	~"¬∞m32f1xx_h√Ü.h
"

135 #ifde‚Ä°
HAL_WWDG_MODULE_ENABLED


176 
HAL_S√®tusTy‚â•Def
 
	$HAL_WWDG_In√¥
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
)

179 i‚Ä°(
hwwdg
 =Ô£ø
NULL
)

181  
HAL_ERROR
;

185 
	`as¬£œÄ_‚àë√∏m
(
	`IS_WWDG_ALL_INSTANCE
(
hwwdg
->
In¬∞‚Ñ¢Àö
));

186 
	`as¬£œÄ_‚àë√∏m
(
	`IS_WWDG_PRESCALER
(
hwwdg
->
In√¥
.
P¬™sÀá√Är
));

187 
	`as¬£œÄ_‚àë√∏m
(
	`IS_WWDG_WINDOW
(
hwwdg
->
In√¥
.
W√∂dow
));

188 
	`as¬£œÄ_‚àë√∏m
(
	`IS_WWDG_COUNTER
(
hwwdg
->
In√¥
.
Cou¬°√Æ
));

189 
	`as¬£œÄ_‚àë√∏m
(
	`IS_WWDG_EWI_MODE
(
hwwdg
->
In√¥
.
EWIMode
));

191 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

193 i‚Ä°(
hwwdg
->
EwiC√Ülback
 =Ô£ø
NULL
)

195 
hwwdg
->
EwiC√Ülback
 = 
HAL_WWDG_E¬®lyWakeupC√Ülback
;

198 i‚Ä°(
hwwdg
->
M‚Ä¢In√¥C√Ülback
 =Ô£ø
NULL
)

200 
hwwdg
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_WWDG_M‚Ä¢In√¥
;

204 
hwwdg
->
	`M‚Ä¢In√¥C√Ülback
(hwwdg);

207 
	`HAL_WWDG_M‚Ä¢In√¥
(
hwwdg
);

211 
	`WRITE_REG
(
hwwdg
->
In¬∞‚Ñ¢Àö
->
CR
, (
WWDG_CR_WDGA
 | hwwdg->
In√¥
.
Cou¬°√Æ
));

214 
	`WRITE_REG
(
hwwdg
->
In¬∞‚Ñ¢Àö
->
CFR
, (hwwdg->
In√¥
.
EWIMode
 | hwwdg->In√¥.
P¬™sÀá√Är
 | hwwdg->In√¥.
W√∂dow
));

217  
HAL_OK
;

218 
	}
}

230 
__w√≥k
 
	$HAL_WWDG_M‚Ä¢In√¥
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
)

233 
	`UNUSED
(
hwwdg
);

238 
	}
}

241 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

253 
HAL_S√®tusTy‚â•Def
 
	$HAL_WWDG_Regi¬∞√ÆC√Ülback
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
, 
HAL_WWDG_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
,

254 
pWWDG_C√ÜlbackTy‚â•Def
 
pC√Ülback
)

256 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

258 i‚Ä°(
pC√Ülback
 =Ô£ø
NULL
)

260 
¬∞¬©us
 = 
HAL_ERROR
;

264 
C√ÜlbackID
)

266 
HAL_WWDG_EWI_CB_ID
:

267 
hwwdg
->
EwiC√Ülback
 = 
pC√Ülback
;

270 
HAL_WWDG_MSPINIT_CB_ID
:

271 
hwwdg
->
M‚Ä¢In√¥C√Ülback
 = 
pC√Ülback
;

275 
¬∞¬©us
 = 
HAL_ERROR
;

280  
¬∞¬©us
;

281 
	}
}

294 
HAL_S√®tusTy‚â•Def
 
	$HAL_WWDG_UnRegi¬∞√ÆC√Ülback
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
, 
HAL_WWDG_C√ÜlbackIDTy‚â•Def
 
C√ÜlbackID
)

296 
HAL_S√®tusTy‚â•Def
 
¬∞¬©us
 = 
HAL_OK
;

298 
C√ÜlbackID
)

300 
HAL_WWDG_EWI_CB_ID
:

301 
hwwdg
->
EwiC√Ülback
 = 
HAL_WWDG_E¬®lyWakeupC√Ülback
;

304 
HAL_WWDG_MSPINIT_CB_ID
:

305 
hwwdg
->
M‚Ä¢In√¥C√Ülback
 = 
HAL_WWDG_M‚Ä¢In√¥
;

309 
¬∞¬©us
 = 
HAL_ERROR
;

313  
¬∞¬©us
;

314 
	}
}

343 
HAL_S√®tusTy‚â•Def
 
	$HAL_WWDG_Re‚Ä∞esh
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
)

346 
	`WRITE_REG
(
hwwdg
->
In¬∞‚Ñ¢Àö
->
CR
, (hwwdg->
In√¥
.
Cou¬°√Æ
));

349  
HAL_OK
;

350 
	}
}

366 
	$HAL_WWDG_IRQH‚Ñ¢d√Är
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
)

369 i‚Ä°(
	`__HAL_WWDG_GET_IT_SOURCE
(
hwwdg
, 
WWDG_IT_EWI
√ã!Ô£ø
RESET
)

372 i‚Ä°(
	`__HAL_WWDG_GET_FLAG
(
hwwdg
, 
WWDG_FLAG_EWIF
√ã!Ô£ø
RESET
)

375 
	`__HAL_WWDG_CLEAR_FLAG
(
hwwdg
, 
WWDG_FLAG_EWIF
);

377 #i‚Ä°(
USE_HAL_WWDG_REGISTER_CALLBACKS
 == 1)

379 
hwwdg
->
	`EwiC√Ülback
(hwwdg);

382 
	`HAL_WWDG_E¬®lyWakeupC√Ülback
(
hwwdg
);

386 
	}
}

395 
__w√≥k
 
	$HAL_WWDG_E¬®lyWakeupC√Ülback
(
WWDG_H‚Ñ¢d√ÄTy‚â•Def
 *
hwwdg
)

398 
	`UNUSED
(
hwwdg
);

403 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_adc.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_adc.h
"

24 
	~"¬∞m32f1xx_≈í_bus.h
"

26 #ifde‚Ä° 
USE_FULL_ASSERT


27 
	~"¬∞m32_as¬£œÄ.h
"

29 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

36 #i‚Ä°
def√∂ed
 (
ADC1
√ã|| def√∂ed (
ADC2
√ã|| def√∂ed (
ADC3
)

55 
	#IS_LL_ADC_DATA_ALIGN
(
__DATA_ALIGN__
) \

56 ‚Äì((
__DATA_ALIGN__
√ã=Ô£ø
LL_ADC_DATA_ALIGN_RIGHT
) \

57 || ((
__DATA_ALIGN__
√ã=Ô£ø
LL_ADC_DATA_ALIGN_LEFT
) \

58 )

	)

60 
	#IS_LL_ADC_SCAN_SELECTION
(
__SCAN_SELECTION__
) \

61 ‚Äì((
__SCAN_SELECTION__
√ã=Ô£ø
LL_ADC_SEQ_SCAN_DISABLE
) \

62 || ((
__SCAN_SELECTION__
√ã=Ô£ø
LL_ADC_SEQ_SCAN_ENABLE
) \

63 )

	)

65 
	#IS_LL_ADC_SEQ_SCAN_MODE
(
__SEQ_SCAN_MODE__
) \

66 ‚Äì((
__SCAN_MODE__
√ã=Ô£ø
LL_ADC_SEQ_SCAN_DISABLE
) \

67 || ((
__SCAN_MODE__
√ã=Ô£ø
LL_ADC_SEQ_SCAN_ENABLE
) \

68 )

	)

72 #i‚Ä°
def√∂ed
(
ADC3
)

73 
	#IS_LL_ADC_REG_TRIG_SOURCE
(
__ADC_INSTANCE__
, 
__REG_TRIG_SOURCE__
) \

74 ((((
__ADC_INSTANCE__
√ã=Ô£ø
ADC1
√ã|| ((__ADC_INSTANCE__√ã=Ô£ø
ADC2
)) \

75 ? ( ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_SOFTWARE
) \

76 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH3
) \

77 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH1
) \

78 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH2
) \

79 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM2_CH2
) \

80 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM3_TRGO
) \

81 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM4_CH4
) \

82 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_EXTI_LINE11
) \

83 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM8_TRGO
) \

86 ‚Äì((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_SOFTWARE
) \

87 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH3
) \

88 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM3_CH1
) \

89 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM2_CH3
) \

90 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM8_CH1
) \

91 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM8_TRGO_ADC3
) \

92 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM5_CH1
) \

93 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM5_CH3
) \

95 )

	)

97 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

98 
	#IS_LL_ADC_REG_TRIG_SOURCE
(
__REG_TRIG_SOURCE__
) \

99 ‚Äì((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_SOFTWARE
) \

100 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH3
) \

101 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH1
) \

102 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH2
) \

103 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM2_CH2
) \

104 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM3_TRGO
) \

105 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM4_CH4
) \

106 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_EXTI_LINE11
) \

107 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM8_TRGO
) \

108 )

	)

110 
	#IS_LL_ADC_REG_TRIG_SOURCE
(
__REG_TRIG_SOURCE__
) \

111 ‚Äì((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_SOFTWARE
) \

112 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH3
) \

113 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH1
) \

114 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM1_CH2
) \

115 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM2_CH2
) \

116 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM3_TRGO
) \

117 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_TIM4_CH4
) \

118 || ((
__REG_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_REG_TRIG_EXT_EXTI_LINE11
) \

119 )

	)

122 
	#IS_LL_ADC_REG_CONTINUOUS_MODE
(
__REG_CONTINUOUS_MODE__
) \

123 ‚Äì((
__REG_CONTINUOUS_MODE__
√ã=Ô£ø
LL_ADC_REG_CONV_SINGLE
) \

124 || ((
__REG_CONTINUOUS_MODE__
√ã=Ô£ø
LL_ADC_REG_CONV_CONTINUOUS
) \

125 )

	)

127 
	#IS_LL_ADC_REG_DMA_TRANSFER
(
__REG_DMA_TRANSFER__
) \

128 ‚Äì((
__REG_DMA_TRANSFER__
√ã=Ô£ø
LL_ADC_REG_DMA_TRANSFER_NONE
) \

129 || ((
__REG_DMA_TRANSFER__
√ã=Ô£ø
LL_ADC_REG_DMA_TRANSFER_UNLIMITED
) \

130 )

	)

132 
	#IS_LL_ADC_REG_SEQ_SCAN_LENGTH
(
__REG_SEQ_SCAN_LENGTH__
) \

133 ‚Äì((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_DISABLE
) \

134 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
) \

135 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
) \

136 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
) \

137 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
) \

138 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
) \

139 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
) \

140 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
) \

141 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
) \

142 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
) \

143 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
) \

144 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
) \

145 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
) \

146 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
) \

147 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
) \

148 || ((
__REG_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
) \

149 )

	)

151 
	#IS_LL_ADC_REG_SEQ_SCAN_DISCONT_MODE
(
__REG_SEQ_DISCONT_MODE__
) \

152 ‚Äì((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_DISABLE
) \

153 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_1RANK
) \

154 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_2RANKS
) \

155 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_3RANKS
) \

156 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_4RANKS
) \

157 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_5RANKS
) \

158 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_6RANKS
) \

159 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_7RANKS
) \

160 || ((
__REG_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_REG_SEQ_DISCONT_8RANKS
) \

161 )

	)

165 #i‚Ä°
def√∂ed
(
ADC3
)

166 
	#IS_LL_ADC_INJ_TRIG_SOURCE
(
__ADC_INSTANCE__
, 
__INJ_TRIG_SOURCE__
) \

167 ((((
__ADC_INSTANCE__
√ã=Ô£ø
ADC1
√ã|| ((__ADC_INSTANCE__√ã=Ô£ø
ADC2
)) \

168 ? ( ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_SOFTWARE
) \

169 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
) \

170 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_CH4
) \

171 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
) \

172 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM2_CH1
) \

173 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM3_CH4
) \

174 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
) \

175 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
) \

176 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM8_CH4
) \

179 ‚Äì((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_SOFTWARE
) \

180 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
) \

181 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_CH4
) \

182 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM4_CH3
) \

183 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM8_CH2
) \

184 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM8_CH4_ADC3
) \

185 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM5_TRGO
) \

186 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM5_CH4
) \

188 )

	)

190 #i‚Ä°
def√∂ed
 (
STM32F101xE
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
)

191 
	#IS_LL_ADC_INJ_TRIG_SOURCE
(
__INJ_TRIG_SOURCE__
) \

192 ‚Äì((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_SOFTWARE
) \

193 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
) \

194 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_CH4
) \

195 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
) \

196 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM2_CH1
) \

197 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM3_CH4
) \

198 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
) \

199 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
) \

200 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM8_CH4
) \

201 )

	)

203 
	#IS_LL_ADC_INJ_TRIG_SOURCE
(
__INJ_TRIG_SOURCE__
) \

204 ‚Äì((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_SOFTWARE
) \

205 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
) \

206 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM1_CH4
) \

207 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
) \

208 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM2_CH1
) \

209 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM3_CH4
) \

210 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
) \

211 || ((
__INJ_TRIG_SOURCE__
√ã=Ô£ø
LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
) \

212 )

	)

215 
	#IS_LL_ADC_INJ_TRIG_AUTO
(
__INJ_TRIG_AUTO__
) \

216 ‚Äì((
__INJ_TRIG_AUTO__
√ã=Ô£ø
LL_ADC_INJ_TRIG_INDEPENDENT
) \

217 || ((
__INJ_TRIG_AUTO__
√ã=Ô£ø
LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
) \

218 )

	)

220 
	#IS_LL_ADC_INJ_SEQ_SCAN_LENGTH
(
__INJ_SEQ_SCAN_LENGTH__
) \

221 ‚Äì((
__INJ_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_INJ_SEQ_SCAN_DISABLE
) \

222 || ((
__INJ_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
) \

223 || ((
__INJ_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
) \

224 || ((
__INJ_SEQ_SCAN_LENGTH__
√ã=Ô£ø
LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
) \

225 )

	)

227 
	#IS_LL_ADC_INJ_SEQ_SCAN_DISCONT_MODE
(
__INJ_SEQ_DISCONT_MODE__
) \

228 ‚Äì((
__INJ_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_INJ_SEQ_DISCONT_DISABLE
) \

229 || ((
__INJ_SEQ_DISCONT_MODE__
√ã=Ô£ø
LL_ADC_INJ_SEQ_DISCONT_1RANK
) \

230 )

	)

232 #i‚Ä°
def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

235 
	#IS_LL_ADC_MULTI_MODE
(
__MULTI_MODE__
) \

236 ‚Äì((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_INDEPENDENT
) \

237 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_SIMULT
) \

238 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_INTERL_FAST
) \

239 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_INTERL_SLOW
) \

240 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_INJ_SIMULT
) \

241 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_INJ_ALTERN
) \

242 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
) \

243 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
) \

244 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_INTFAST_INJ_SIM
) \

245 || ((
__MULTI_MODE__
√ã=Ô£ø
LL_ADC_MULTI_DUAL_REG_INTSLOW_INJ_SIM
) \

246 )

	)

248 
	#IS_LL_ADC_MULTI_MASTER_SLAVE
(
__MULTI_MASTER_SLAVE__
) \

249 ‚Äì((
__MULTI_MASTER_SLAVE__
√ã=Ô£ø
LL_ADC_MULTI_MASTER
) \

250 || ((
__MULTI_MASTER_SLAVE__
√ã=Ô£ø
LL_ADC_MULTI_SLAVE
) \

251 || ((
__MULTI_MASTER_SLAVE__
√ã=Ô£ø
LL_ADC_MULTI_MASTER_SLAVE
) \

252 )

	)

280 
E¬∫‚ÄπS√®tus
 
	$LL_ADC_Comm‚ÅÑDeIn√¥
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
)

283 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_COMMON_INSTANCE
(
ADCxy_COMMON
));

286 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_ADC1
);

289 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_ADC1
);

291  
SUCCESS
;

292 
	}
}

309 
E¬∫‚ÄπS√®tus
 
	$LL_ADC_Comm‚ÅÑIn√¥
(
ADC_Comm‚ÅÑ_Ty‚â•Def
 *
ADCxy_COMMON
, 
LL_ADC_Comm‚ÅÑIn√¥Ty‚â•Def
 *
ADC_Comm‚ÅÑIn√¥S√•uÀò
)

311 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

314 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_COMMON_INSTANCE
(
ADCxy_COMMON
));

315 #i‚Ä°
	`def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

316 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_MULTI_MODE
(
ADC_Comm‚ÅÑIn√¥S√•uÀò
->
Mu‚Ä¶imode
));

324 if(
	`__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE
(
ADCxy_COMMON
) == 0U)

334 #i‚Ä°
	`def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

335 if(
ADC_Comm‚ÅÑIn√¥S√•uÀò
->
Mu‚Ä¶imode
 !Ô£ø
LL_ADC_MULTI_INDEPENDENT
)

337 
	`MODIFY_REG
(
ADCxy_COMMON
->
CR1
,

338 
ADC_CR1_DUALMOD
,

339 
ADC_Comm‚ÅÑIn√¥S√•uÀò
->
Mu‚Ä¶imode


344 
	`MODIFY_REG
(
ADCxy_COMMON
->
CR1
,

345 
ADC_CR1_DUALMOD
,

346 
LL_ADC_MULTI_INDEPENDENT


355 
¬∞¬©us
 = 
ERROR
;

358  
¬∞¬©us
;

359 
	}
}

367 
	$LL_ADC_Comm‚ÅÑS√•uÀòIn√¥
(
LL_ADC_Comm‚ÅÑIn√¥Ty‚â•Def
 *
ADC_Comm‚ÅÑIn√¥S√•uÀò
)

373 #i‚Ä°
	`def√∂ed
(
ADC_MULTIMODE_SUPPORT
)

375 
ADC_Comm‚ÅÑIn√¥S√•uÀò
->
Mu‚Ä¶imode
 = 
LL_ADC_MULTI_INDEPENDENT
;

377 
	}
}

389 
E¬∫‚ÄπS√®tus
 
	$LL_ADC_DeIn√¥
(
ADC_Ty‚â•Def
 *
ADCx
)

391 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

394 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
ADCx
));

397 if(
	`LL_ADC_IsE¬´b√Äd
(
ADCx
) == 1U)

402 
	`LL_ADC_REG_S√´Trigg√ÆSourÀö
(
ADCx
, 
LL_ADC_REG_TRIG_SOFTWARE
);

407 
	`LL_ADC_INJ_S√´Trigg√ÆSourÀö
(
ADCx
, 
LL_ADC_INJ_TRIG_SOFTWARE
);

410 
	`LL_ADC_Di√üb√Ä
(
ADCx
);

415 if(
	`READ_BIT
(
ADCx
->
CR2
, 
ADC_CR2_ADON
) == 0U)

419 
	`CLEAR_BIT
(
ADCx
->
SR
,

420 ‚Äì
LL_ADC_FLAG_STRT


421 | 
LL_ADC_FLAG_JSTRT


422 | 
LL_ADC_FLAG_EOS


423 | 
LL_ADC_FLAG_JEOS


424 | 
LL_ADC_FLAG_AWD1
 )

428 #i‚Ä°
	`def√∂ed
 (
STM32F103x6
√ã|| def√∂ed (
STM32F103xB
√ã|| def√∂ed (
STM32F105xC
√ã|| def√∂ed (
STM32F107xC
√ã|| def√∂ed (
STM32F103xE
√ã|| def√∂ed (
STM32F103xG
)

430 
	`CLEAR_BIT
(
ADCx
->
CR1
,

431 ‚Äì
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_DUALMOD


432 | 
ADC_CR1_DISCNUM
 | 
ADC_CR1_JDISCEN
 | 
ADC_CR1_DISCEN


433 | 
ADC_CR1_JAUTO
 | 
ADC_CR1_AWDSGL
 | 
ADC_CR1_SCAN


434 | 
ADC_CR1_JEOCIE
 | 
ADC_CR1_AWDIE
 | 
ADC_CR1_EOCIE


435 | 
ADC_CR1_AWDCH
 )

439 
	`CLEAR_BIT
(
ADCx
->
CR1
,

440 ‚Äì
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_DISCNUM


441 | 
ADC_CR1_JDISCEN
 | 
ADC_CR1_DISCEN
 | 
ADC_CR1_JAUTO


442 | 
ADC_CR1_AWDSGL
 | 
ADC_CR1_SCAN
 | 
ADC_CR1_JEOCIE


443 | 
ADC_CR1_AWDIE
 | 
ADC_CR1_EOCIE
 | 
ADC_CR1_AWDCH
 )

448 
	`CLEAR_BIT
(
ADCx
->
CR2
,

449 ‚Äì
ADC_CR2_TSVREFE


450 | 
ADC_CR2_SWSTART
 | 
ADC_CR2_EXTTRIG
 | 
ADC_CR2_EXTSEL


451 | 
ADC_CR2_JSWSTART
 | 
ADC_CR2_JEXTTRIG
 | 
ADC_CR2_JEXTSEL


452 | 
ADC_CR2_ALIGN
 | 
ADC_CR2_DMA


453 | 
ADC_CR2_RSTCAL
 | 
ADC_CR2_CAL


454 | 
ADC_CR2_CONT
 | 
ADC_CR2_ADON
 )

458 
	`CLEAR_BIT
(
ADCx
->
SMPR1
,

459 ‚Äì
ADC_SMPR1_SMP17
 | 
ADC_SMPR1_SMP16


460 | 
ADC_SMPR1_SMP15
 | 
ADC_SMPR1_SMP14
 | 
ADC_SMPR1_SMP13


461 | 
ADC_SMPR1_SMP12
 | 
ADC_SMPR1_SMP11
 | 
ADC_SMPR1_SMP10
)

465 
	`CLEAR_BIT
(
ADCx
->
SMPR2
,

466 ‚Äì
ADC_SMPR2_SMP9


467 | 
ADC_SMPR2_SMP8
 | 
ADC_SMPR2_SMP7
 | 
ADC_SMPR2_SMP6


468 | 
ADC_SMPR2_SMP5
 | 
ADC_SMPR2_SMP4
 | 
ADC_SMPR2_SMP3


469 | 
ADC_SMPR2_SMP2
 | 
ADC_SMPR2_SMP1
 | 
ADC_SMPR2_SMP0
)

473 
	`CLEAR_BIT
(
ADCx
->
JOFR1
, 
ADC_JOFR1_JOFFSET1
);

475 
	`CLEAR_BIT
(
ADCx
->
JOFR2
, 
ADC_JOFR2_JOFFSET2
);

477 
	`CLEAR_BIT
(
ADCx
->
JOFR3
, 
ADC_JOFR3_JOFFSET3
);

479 
	`CLEAR_BIT
(
ADCx
->
JOFR4
, 
ADC_JOFR4_JOFFSET4
);

482 
	`SET_BIT
(
ADCx
->
HTR
, 
ADC_HTR_HT
);

484 
	`CLEAR_BIT
(
ADCx
->
LTR
, 
ADC_LTR_LT
);

487 
	`CLEAR_BIT
(
ADCx
->
SQR1
,

488 ‚Äì
ADC_SQR1_L


489 | 
ADC_SQR1_SQ16


490 | 
ADC_SQR1_SQ15
 | 
ADC_SQR1_SQ14
 | 
ADC_SQR1_SQ13
)

494 
	`CLEAR_BIT
(
ADCx
->
SQR2
,

495 ‚Äì
ADC_SQR2_SQ12
 | 
ADC_SQR2_SQ11
 | 
ADC_SQR2_SQ10


496 | 
ADC_SQR2_SQ9
 | 
ADC_SQR2_SQ8
 | 
ADC_SQR2_SQ7
)

501 
	`CLEAR_BIT
(
ADCx
->
JSQR
,

502 ‚Äì
ADC_JSQR_JL


503 | 
ADC_JSQR_JSQ4
 | 
ADC_JSQR_JSQ3


504 | 
ADC_JSQR_JSQ2
 | 
ADC_JSQR_JSQ1
 )

515  
¬∞¬©us
;

516 
	}
}

551 
E¬∫‚ÄπS√®tus
 
	$LL_ADC_In√¥
(
ADC_Ty‚â•Def
 *
ADCx
, 
LL_ADC_In√¥Ty‚â•Def
 *
ADC_In√¥S√•uÀò
)

553 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

556 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
ADCx
));

558 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_DATA_ALIGN
(
ADC_In√¥S√•uÀò
->
D¬©aAlignm√≠t
));

559 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_SCAN_SELECTION
(
ADC_In√¥S√•uÀò
->
Sequ√≠ÀörsSÀánMode
));

563 if(
	`LL_ADC_IsE¬´b√Äd
(
ADCx
) == 0U)

568 
	`MODIFY_REG
(
ADCx
->
CR1
,

569 
ADC_CR1_SCAN


571 
ADC_In√¥S√•uÀò
->
Sequ√≠ÀörsSÀánMode


574 
	`MODIFY_REG
(
ADCx
->
CR2
,

575 
ADC_CR2_ALIGN


577 
ADC_In√¥S√•uÀò
->
D¬©aAlignm√≠t


584 
¬∞¬©us
 = 
ERROR
;

586  
¬∞¬©us
;

587 
	}
}

595 
	$LL_ADC_S√•uÀòIn√¥
(
LL_ADC_In√¥Ty‚â•Def
 *
ADC_In√¥S√•uÀò
)

599 
ADC_In√¥S√•uÀò
->
D¬©aAlignm√≠t
 = 
LL_ADC_DATA_ALIGN_RIGHT
;

605 
ADC_In√¥S√•uÀò
->
Sequ√≠ÀörsSÀánMode
 = 
LL_ADC_SEQ_SCAN_ENABLE
;

607 
	}
}

641 
E¬∫‚ÄπS√®tus
 
	$LL_ADC_REG_In√¥
(
ADC_Ty‚â•Def
 *
ADCx
, 
LL_ADC_REG_In√¥Ty‚â•Def
 *
ADC_REG_In√¥S√•uÀò
)

643 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

646 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
ADCx
));

647 #i‚Ä°
	`def√∂ed
(
ADC3
)

648 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_REG_TRIG_SOURCE
(
ADCx
, 
ADC_REG_In√¥S√•uÀò
->
Trigg√ÆSourÀö
));

650 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_REG_TRIG_SOURCE
(
ADC_REG_In√¥S√•uÀò
->
Trigg√ÆSourÀö
));

652 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_REG_SEQ_SCAN_LENGTH
(
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
));

653 if(
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
 !Ô£ø
LL_ADC_REG_SEQ_SCAN_DISABLE
)

655 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_REG_SEQ_SCAN_DISCONT_MODE
(
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt
));

657 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_REG_CONTINUOUS_MODE
(
ADC_REG_In√¥S√•uÀò
->
C‚ÅÑt√∂uousMode
));

658 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_REG_DMA_TRANSFER
(
ADC_REG_In√¥S√•uÀò
->
DMAT√∏ns‚Äûr
));

662 
	`as¬£œÄ_‚àë√∏m
((
ADC_REG_In√¥S√•uÀò
->
C‚ÅÑt√∂uousMode
 =Ô£ø
LL_ADC_REG_CONV_SINGLE
)

663 || (
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt
 =Ô£ø
LL_ADC_REG_SEQ_DISCONT_DISABLE
));

667 if(
	`LL_ADC_IsE¬´b√Äd
(
ADCx
) == 0U)

680 if(
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
 !Ô£ø
LL_ADC_REG_SEQ_SCAN_DISABLE
)

682 
	`MODIFY_REG
(
ADCx
->
CR1
,

683 
ADC_CR1_DISCEN


684 | 
ADC_CR1_DISCNUM


686 
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth


687 | 
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt


692 
	`MODIFY_REG
(
ADCx
->
CR1
,

693 
ADC_CR1_DISCEN


694 | 
ADC_CR1_DISCNUM


696 
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth


697 | 
LL_ADC_REG_SEQ_DISCONT_DISABLE


701 
	`MODIFY_REG
(
ADCx
->
CR2
,

702 
ADC_CR2_EXTSEL


703 | 
ADC_CR2_CONT


704 | 
ADC_CR2_DMA


706 
ADC_REG_In√¥S√•uÀò
->
Trigg√ÆSourÀö


707 | 
ADC_REG_In√¥S√•uÀò
->
C‚ÅÑt√∂uousMode


708 | 
ADC_REG_In√¥S√•uÀò
->
DMAT√∏ns‚Äûr


718 
	`LL_ADC_REG_S√´Sequ√≠ÀörL√≠gth
(
ADCx
, 
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
);

723 
¬∞¬©us
 = 
ERROR
;

725  
¬∞¬©us
;

726 
	}
}

734 
	$LL_ADC_REG_S√•uÀòIn√¥
(
LL_ADC_REG_In√¥Ty‚â•Def
 *
ADC_REG_In√¥S√•uÀò
)

741 
ADC_REG_In√¥S√•uÀò
->
Trigg√ÆSourÀö
 = 
LL_ADC_REG_TRIG_SOFTWARE
;

742 
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
 = 
LL_ADC_REG_SEQ_SCAN_DISABLE
;

743 
ADC_REG_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt
 = 
LL_ADC_REG_SEQ_DISCONT_DISABLE
;

744 
ADC_REG_In√¥S√•uÀò
->
C‚ÅÑt√∂uousMode
 = 
LL_ADC_REG_CONV_SINGLE
;

745 
ADC_REG_In√¥S√•uÀò
->
DMAT√∏ns‚Äûr
 = 
LL_ADC_REG_DMA_TRANSFER_NONE
;

746 
	}
}

780 
E¬∫‚ÄπS√®tus
 
	$LL_ADC_INJ_In√¥
(
ADC_Ty‚â•Def
 *
ADCx
, 
LL_ADC_INJ_In√¥Ty‚â•Def
 *
ADC_INJ_In√¥S√•uÀò
)

782 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

785 
	`as¬£œÄ_‚àë√∏m
(
	`IS_ADC_ALL_INSTANCE
(
ADCx
));

786 #i‚Ä°
	`def√∂ed
(
ADC3
)

787 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_INJ_TRIG_SOURCE
(
ADCx
, 
ADC_INJ_In√¥S√•uÀò
->
Trigg√ÆSourÀö
));

789 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_INJ_TRIG_SOURCE
(
ADC_INJ_In√¥S√•uÀò
->
Trigg√ÆSourÀö
));

791 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_INJ_SEQ_SCAN_LENGTH
(
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
));

792 if(
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
 !Ô£ø
LL_ADC_INJ_SEQ_SCAN_DISABLE
)

794 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_INJ_SEQ_SCAN_DISCONT_MODE
(
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt
));

796 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_ADC_INJ_TRIG_AUTO
(
ADC_INJ_In√¥S√•uÀò
->
TrigAuto
));

800 if(
	`LL_ADC_IsE¬´b√Äd
(
ADCx
) == 0U)

812 if(
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
 !Ô£ø
LL_ADC_REG_SEQ_SCAN_DISABLE
)

814 
	`MODIFY_REG
(
ADCx
->
CR1
,

815 
ADC_CR1_JDISCEN


816 | 
ADC_CR1_JAUTO


818 
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt


819 | 
ADC_INJ_In√¥S√•uÀò
->
TrigAuto


824 
	`MODIFY_REG
(
ADCx
->
CR1
,

825 
ADC_CR1_JDISCEN


826 | 
ADC_CR1_JAUTO


828 
LL_ADC_REG_SEQ_DISCONT_DISABLE


829 | 
ADC_INJ_In√¥S√•uÀò
->
TrigAuto


833 
	`MODIFY_REG
(
ADCx
->
CR2
,

834 
ADC_CR2_JEXTSEL


836 
ADC_INJ_In√¥S√•uÀò
->
Trigg√ÆSourÀö


845 
	`LL_ADC_INJ_S√´Sequ√≠ÀörL√≠gth
(
ADCx
, 
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
);

850 
¬∞¬©us
 = 
ERROR
;

852  
¬∞¬©us
;

853 
	}
}

861 
	$LL_ADC_INJ_S√•uÀòIn√¥
(
LL_ADC_INJ_In√¥Ty‚â•Def
 *
ADC_INJ_In√¥S√•uÀò
)

865 
ADC_INJ_In√¥S√•uÀò
->
Trigg√ÆSourÀö
 = 
LL_ADC_INJ_TRIG_SOFTWARE
;

866 
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörL√≠gth
 = 
LL_ADC_INJ_SEQ_SCAN_DISABLE
;

867 
ADC_INJ_In√¥S√•uÀò
->
Sequ√≠ÀörDisc‚ÅÑt
 = 
LL_ADC_INJ_SEQ_DISCONT_DISABLE
;

868 
ADC_INJ_In√¥S√•uÀò
->
TrigAuto
 = 
LL_ADC_INJ_TRIG_INDEPENDENT
;

869 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_crc.c

19 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

22 
	~"¬∞m32f1xx_≈í_¬∏c.h
"

23 
	~"¬∞m32f1xx_≈í_bus.h
"

25 #ifde‚Ä° 
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
 (
CRC
)

63 
E¬∫‚ÄπS√®tus
 
	$LL_CRC_DeIn√¥
(
CRC_Ty‚â•Def
 *
CRCx
)

65 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

68 
	`as¬£œÄ_‚àë√∏m
(
	`IS_CRC_ALL_INSTANCE
(
CRCx
));

70 i‚Ä°(
CRCx
 =Ô£ø
CRC
)

74 
	`LL_CRC_Re¬£tCRCC√Ücu≈ìti‚ÅÑUn√¥
(
CRCx
);

77 
	`LL_CRC_Wr√¥e_IDR
(
CRCx
, 0x00U);

81 
¬∞¬©us
 = 
ERROR
;

84  (
¬∞¬©us
);

85 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_dac.c

19 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

22 
	~"¬∞m32f1xx_≈í_dac.h
"

23 
	~"¬∞m32f1xx_≈í_bus.h
"

25 #ifde‚Ä°
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
(
DAC
)

49 
	#IS_LL_DAC_CHANNEL
(
__DAC_CHANNEL__
) \

51 ((
__DAC_CHANNEL__
√ã=Ô£ø
LL_DAC_CHANNEL_1
) \

52 || ((
__DAC_CHANNEL__
√ã=Ô£ø
LL_DAC_CHANNEL_2
) \

53 )

	)

55 
	#IS_LL_DAC_TRIGGER_SOURCE
(
__TRIGGER_SOURCE__
) \

56 ‚Äì((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_SOFTWARE
) \

57 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM3_TRGO
) \

58 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM15_TRGO
) \

59 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM2_TRGO
) \

60 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM4_TRGO
) \

61 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM5_TRGO
) \

62 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM6_TRGO
) \

63 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM7_TRGO
) \

64 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_TIM8_TRGO
) \

65 || ((
__TRIGGER_SOURCE__
√ã=Ô£ø
LL_DAC_TRIG_EXT_EXTI_LINE9
) \

66 )

	)

68 
	#IS_LL_DAC_WAVE_AUTO_GENER_MODE
(
__WAVE_AUTO_GENERATION_MODE__
) \

69 ‚Äì((
__WAVE_AUTO_GENERATION_MODE__
√ã=Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_NONE
) \

70 || ((
__WAVE_AUTO_GENERATION_MODE__
√ã=Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_NOISE
) \

71 || ((
__WAVE_AUTO_GENERATION_MODE__
√ã=Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_TRIANGLE
) \

72 )

	)

74 
	#IS_LL_DAC_WAVE_AUTO_GENER_CONFIG
(
__WAVE_AUTO_GENERATION_MODE__
, 
__WAVE_AUTO_GENERATION_CONFIG__
) \

75 ‚Äì(((
__WAVE_AUTO_GENERATION_MODE__
√ã=Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_NOISE
) \

76 && ( ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BIT0
) \

77 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS1_0
) \

78 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS2_0
) \

79 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS3_0
) \

80 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS4_0
) \

81 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS5_0
) \

82 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS6_0
) \

83 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS7_0
) \

84 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS8_0
) \

85 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS9_0
) \

86 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS10_0
) \

87 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_NOISE_LFSR_UNMASK_BITS11_0
)) \

89 ||(((
__WAVE_AUTO_GENERATION_MODE__
√ã=Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_TRIANGLE
) \

90 && ( ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_1
) \

91 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_3
) \

92 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_7
) \

93 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_15
) \

94 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_31
) \

95 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_63
) \

96 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_127
) \

97 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_255
) \

98 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_511
) \

99 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_1023
) \

100 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_2047
) \

101 || ((
__WAVE_AUTO_GENERATION_CONFIG__
√ã=Ô£ø
LL_DAC_TRIANGLE_AMPLITUDE_4095
)) \

103 )

	)

105 
	#IS_LL_DAC_OUTPUT_BUFFER
(
__OUTPUT_BUFFER__
) \

106 ‚Äì((
__OUTPUT_BUFFER__
√ã=Ô£ø
LL_DAC_OUTPUT_BUFFER_ENABLE
) \

107 || ((
__OUTPUT_BUFFER__
√ã=Ô£ø
LL_DAC_OUTPUT_BUFFER_DISABLE
) \

108 )

	)

134 
E¬∫‚ÄπS√®tus
 
	$LL_DAC_DeIn√¥
(
DAC_Ty‚â•Def
 *
DACx
)

137 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALL_INSTANCE
(
DACx
));

140 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_DAC1
);

143 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_DAC1
);

145  
SUCCESS
;

146 
	}
}

173 
E¬∫‚ÄπS√®tus
 
	$LL_DAC_In√¥
(
DAC_Ty‚â•Def
 *
DACx
, 
u√∂t32_t
 
DAC_Ch‚Ñ¢‚àöl
, 
LL_DAC_In√¥Ty‚â•Def
 *
DAC_In√¥S√•uÀò
)

175 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

178 
	`as¬£œÄ_‚àë√∏m
(
	`IS_DAC_ALL_INSTANCE
(
DACx
));

179 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DAC_CHANNEL
(
DAC_Ch‚Ñ¢‚àöl
));

180 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DAC_TRIGGER_SOURCE
(
DAC_In√¥S√•uÀò
->
Trigg√ÆSourÀö
));

181 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DAC_OUTPUT_BUFFER
(
DAC_In√¥S√•uÀò
->
Ou√ßutBuf‚Äûr
));

182 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DAC_WAVE_AUTO_GENER_MODE
(
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑ
));

183 i‚Ä°(
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑ
 !Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_NONE
)

185 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DAC_WAVE_AUTO_GENER_CONFIG
(
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑ
,

186 
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑC‚ÅÑfig
));

191 i‚Ä°(
	`LL_DAC_IsE¬´b√Äd
(
DACx
, 
DAC_Ch‚Ñ¢‚àöl
) == 0U)

198 i‚Ä°(
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑ
 !Ô£ø
LL_DAC_WAVE_AUTO_GENERATION_NONE
)

200 
	`MODIFY_REG
(
DACx
->
CR
,

201 (
DAC_CR_TSEL1


202 | 
DAC_CR_WAVE1


203 | 
DAC_CR_MAMP1


204 | 
DAC_CR_BOFF1


205 √ã<< (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

207 (
DAC_In√¥S√•uÀò
->
Trigg√ÆSourÀö


208 | 
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑ


209 | 
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑC‚ÅÑfig


210 | 
DAC_In√¥S√•uÀò
->
Ou√ßutBuf‚Äûr


211 √ã<< (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

216 
	`MODIFY_REG
(
DACx
->
CR
,

217 (
DAC_CR_TSEL1


218 | 
DAC_CR_WAVE1


219 | 
DAC_CR_BOFF1


220 √ã<< (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

222 (
DAC_In√¥S√•uÀò
->
Trigg√ÆSourÀö


223 | 
LL_DAC_WAVE_AUTO_GENERATION_NONE


224 | 
DAC_In√¥S√•uÀò
->
Ou√ßutBuf‚Äûr


225 √ã<< (
DAC_Ch‚Ñ¢‚àöl
 & 
DAC_CR_CHX_BITOFFSET_MASK
)

232 
¬∞¬©us
 = 
ERROR
;

234  
¬∞¬©us
;

235 
	}
}

243 
	$LL_DAC_S√•uÀòIn√¥
(
LL_DAC_In√¥Ty‚â•Def
 *
DAC_In√¥S√•uÀò
)

246 
DAC_In√¥S√•uÀò
->
Trigg√ÆSourÀö
 = 
LL_DAC_TRIG_SOFTWARE
;

247 
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑ
 = 
LL_DAC_WAVE_AUTO_GENERATION_NONE
;

250 
DAC_In√¥S√•uÀò
->
WaveAutoG√≠√Æ¬©i‚ÅÑC‚ÅÑfig
 = 
LL_DAC_NOISE_LFSR_UNMASK_BIT0
;

251 
DAC_In√¥S√•uÀò
->
Ou√ßutBuf‚Äûr
 = 
LL_DAC_OUTPUT_BUFFER_ENABLE
;

252 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_dma.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_dma.h
"

24 
	~"¬∞m32f1xx_≈í_bus.h
"

25 #ifde‚Ä° 
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
 (
DMA1
√ã|| def√∂ed (
DMA2
)

48 
	#IS_LL_DMA_DIRECTION
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_DIRECTION_PERIPH_TO_MEMORY
) || \

49 ((
__VALUE__
√ã=Ô£ø
LL_DMA_DIRECTION_MEMORY_TO_PERIPH
) || \

50 ((
__VALUE__
√ã=Ô£ø
LL_DMA_DIRECTION_MEMORY_TO_MEMORY
))

	)

52 
	#IS_LL_DMA_MODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_MODE_NORMAL
) || \

53 ((
__VALUE__
√ã=Ô£ø
LL_DMA_MODE_CIRCULAR
))

	)

55 
	#IS_LL_DMA_PERIPHINCMODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_PERIPH_INCREMENT
) || \

56 ((
__VALUE__
√ã=Ô£ø
LL_DMA_PERIPH_NOINCREMENT
))

	)

58 
	#IS_LL_DMA_MEMORYINCMODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_MEMORY_INCREMENT
) || \

59 ((
__VALUE__
√ã=Ô£ø
LL_DMA_MEMORY_NOINCREMENT
))

	)

61 
	#IS_LL_DMA_PERIPHDATASIZE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_PDATAALIGN_BYTE
) || \

62 ((
__VALUE__
√ã=Ô£ø
LL_DMA_PDATAALIGN_HALFWORD
) || \

63 ((
__VALUE__
√ã=Ô£ø
LL_DMA_PDATAALIGN_WORD
))

	)

65 
	#IS_LL_DMA_MEMORYDATASIZE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_MDATAALIGN_BYTE
) || \

66 ((
__VALUE__
√ã=Ô£ø
LL_DMA_MDATAALIGN_HALFWORD
) || \

67 ((
__VALUE__
√ã=Ô£ø
LL_DMA_MDATAALIGN_WORD
))

	)

69 
	#IS_LL_DMA_NBDATA
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø0x0000FFFFU)

	)

71 
	#IS_LL_DMA_PRIORITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_DMA_PRIORITY_LOW
) || \

72 ((
__VALUE__
√ã=Ô£ø
LL_DMA_PRIORITY_MEDIUM
) || \

73 ((
__VALUE__
√ã=Ô£ø
LL_DMA_PRIORITY_HIGH
) || \

74 ((
__VALUE__
√ã=Ô£ø
LL_DMA_PRIORITY_VERYHIGH
))

	)

76 #i‚Ä°
def√∂ed
 (
DMA2
)

77 
	#IS_LL_DMA_ALL_CHANNEL_INSTANCE
(
INSTANCE
, 
CHANNEL
√ã((((INSTANCE√ã=Ô£ø
DMA1
) && \

78 (((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_1
) || \

79 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_2
) || \

80 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_3
) || \

81 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_4
) || \

82 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_5
) || \

83 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_6
) || \

84 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_7
))) || \

85 (((
INSTANCE
√ã=Ô£ø
DMA2
) && \

86 (((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_1
) || \

87 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_2
) || \

88 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_3
) || \

89 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_4
) || \

90 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_5
))))

	)

92 
	#IS_LL_DMA_ALL_CHANNEL_INSTANCE
(
INSTANCE
, 
CHANNEL
√ã((((INSTANCE√ã=Ô£ø
DMA1
) && \

93 (((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_1
) || \

94 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_2
) || \

95 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_3
) || \

96 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_4
) || \

97 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_5
) || \

98 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_6
) || \

99 ((
CHANNEL
√ã=Ô£ø
LL_DMA_CHANNEL_7
))))

	)

130 
u√∂t32_t
 
	$LL_DMA_DeIn√¥
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
)

132 
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *
tmp
 = (DMA_Ch‚Ñ¢‚àöl_Ty‚â•De‚Ä°*)
DMA1_Ch‚Ñ¢‚àöl1
;

133 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

136 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_ALL_CHANNEL_INSTANCE
(
DMAx
, 
Ch‚Ñ¢‚àöl
));

138 
tmp
 = (
DMA_Ch‚Ñ¢‚àöl_Ty‚â•Def
 *)(
	`__LL_DMA_GET_CHANNEL_INSTANCE
(
DMAx
, 
Ch‚Ñ¢‚àöl
));

141 
	`CLEAR_BIT
(
tmp
->
CCR
, 
DMA_CCR_EN
);

144 
	`LL_DMA_Wr√¥eReg
(
tmp
, 
CCR
, 0U);

147 
	`LL_DMA_Wr√¥eReg
(
tmp
, 
CNDTR
, 0U);

150 
	`LL_DMA_Wr√¥eReg
(
tmp
, 
CPAR
, 0U);

153 
	`LL_DMA_Wr√¥eReg
(
tmp
, 
CMAR
, 0U);

155 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_1
)

158 
	`LL_DMA_C√Ä¬®F≈ìg_GI1
(
DMAx
);

160 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_2
)

163 
	`LL_DMA_C√Ä¬®F≈ìg_GI2
(
DMAx
);

165 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_3
)

168 
	`LL_DMA_C√Ä¬®F≈ìg_GI3
(
DMAx
);

170 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_4
)

173 
	`LL_DMA_C√Ä¬®F≈ìg_GI4
(
DMAx
);

175 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_5
)

178 
	`LL_DMA_C√Ä¬®F≈ìg_GI5
(
DMAx
);

181 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_6
)

184 
	`LL_DMA_C√Ä¬®F≈ìg_GI6
(
DMAx
);

186 i‚Ä°(
Ch‚Ñ¢‚àöl
 =Ô£ø
LL_DMA_CHANNEL_7
)

189 
	`LL_DMA_C√Ä¬®F≈ìg_GI7
(
DMAx
);

193 
¬∞¬©us
 = 
ERROR
;

196  
¬∞¬©us
;

197 
	}
}

218 
u√∂t32_t
 
	$LL_DMA_In√¥
(
DMA_Ty‚â•Def
 *
DMAx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, 
LL_DMA_In√¥Ty‚â•Def
 *
DMA_In√¥S√•uÀò
)

221 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_ALL_CHANNEL_INSTANCE
(
DMAx
, 
Ch‚Ñ¢‚àöl
));

224 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_DIRECTION
(
DMA_In√¥S√•uÀò
->
D√∫eÀòi‚ÅÑ
));

225 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_MODE
(
DMA_In√¥S√•uÀò
->
Mode
));

226 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_PERIPHINCMODE
(
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcIncMode
));

227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_MEMORYINCMODE
(
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞IncMode
));

228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_PERIPHDATASIZE
(
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcD¬©aSize
));

229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_MEMORYDATASIZE
(
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞D¬©aSize
));

230 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_NBDATA
(
DMA_In√¥S√•uÀò
->
NbD¬©a
));

231 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_DMA_PRIORITY
(
DMA_In√¥S√•uÀò
->
Pri‚Äπ√¥y
));

245 
	`LL_DMA_C‚ÅÑfigT√∏ns‚Äûr
(
DMAx
, 
Ch‚Ñ¢‚àöl
, 
DMA_In√¥S√•uÀò
->
D√∫eÀòi‚ÅÑ
 | \

246 
DMA_In√¥S√•uÀò
->
Mode
 | \

247 
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcIncMode
 | \

248 
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞IncMode
 | \

249 
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcD¬©aSize
 | \

250 
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞D¬©aSize
 | \

251 
DMA_In√¥S√•uÀò
->
Pri‚Äπ√¥y
);

257 
	`LL_DMA_S√´Mem‚ÄπyAdd¬™ss
(
DMAx
, 
Ch‚Ñ¢‚àöl
, 
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞Add¬™ss
);

263 
	`LL_DMA_S√´P√Æ√πhAdd¬™ss
(
DMAx
, 
Ch‚Ñ¢‚àöl
, 
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcAdd¬™ss
);

269 
	`LL_DMA_S√´D¬©aL√≠gth
(
DMAx
, 
Ch‚Ñ¢‚àöl
, 
DMA_In√¥S√•uÀò
->
NbD¬©a
);

271  
SUCCESS
;

272 
	}
}

279 
	$LL_DMA_S√•uÀòIn√¥
(
LL_DMA_In√¥Ty‚â•Def
 *
DMA_In√¥S√•uÀò
)

282 
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcAdd¬™ss
 = 0x00000000U;

283 
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞Add¬™ss
 = 0x00000000U;

284 
DMA_In√¥S√•uÀò
->
D√∫eÀòi‚ÅÑ
 = 
LL_DMA_DIRECTION_PERIPH_TO_MEMORY
;

285 
DMA_In√¥S√•uÀò
->
Mode
 = 
LL_DMA_MODE_NORMAL
;

286 
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcIncMode
 = 
LL_DMA_PERIPH_NOINCREMENT
;

287 
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞IncMode
 = 
LL_DMA_MEMORY_NOINCREMENT
;

288 
DMA_In√¥S√•uÀò
->
P√Æ√πhOrM2MSrcD¬©aSize
 = 
LL_DMA_PDATAALIGN_BYTE
;

289 
DMA_In√¥S√•uÀò
->
Mem‚ÄπyOrM2MD¬∞D¬©aSize
 = 
LL_DMA_MDATAALIGN_BYTE
;

290 
DMA_In√¥S√•uÀò
->
NbD¬©a
 = 0x00000000U;

291 
DMA_In√¥S√•uÀò
->
Pri‚Äπ√¥y
 = 
LL_DMA_PRIORITY_LOW
;

292 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_exti.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_exti.h
"

24 #ifde‚Ä° 
USE_FULL_ASSERT


25 
	~"¬∞m32_as¬£œÄ.h
"

27 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

34 #i‚Ä°
def√∂ed
 (
EXTI
)

48 
	#IS_LL_EXTI_LINE_0_31
(
__VALUE__
√ã(((__VALUE__√ã& ~
LL_EXTI_LINE_ALL_0_31
√ã=Ô£ø0x00000000U)

	)

50 
	#IS_LL_EXTI_MODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_EXTI_MODE_IT
) \

51 || ((
__VALUE__
√ã=Ô£ø
LL_EXTI_MODE_EVENT
) \

52 || ((
__VALUE__
√ã=Ô£ø
LL_EXTI_MODE_IT_EVENT
))

	)

55 
	#IS_LL_EXTI_TRIGGER
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_EXTI_TRIGGER_NONE
) \

56 || ((
__VALUE__
√ã=Ô£ø
LL_EXTI_TRIGGER_RISING
) \

57 || ((
__VALUE__
√ã=Ô£ø
LL_EXTI_TRIGGER_FALLING
) \

58 || ((
__VALUE__
√ã=Ô£ø
LL_EXTI_TRIGGER_RISING_FALLING
))

	)

81 
u√∂t32_t
 
	$LL_EXTI_DeIn√¥
()

84 
	`LL_EXTI_Wr√¥eReg
(
IMR
, 0x00000000U);

86 
	`LL_EXTI_Wr√¥eReg
(
EMR
, 0x00000000U);

88 
	`LL_EXTI_Wr√¥eReg
(
RTSR
, 0x00000000U);

90 
	`LL_EXTI_Wr√¥eReg
(
FTSR
, 0x00000000U);

92 
	`LL_EXTI_Wr√¥eReg
(
SWIER
, 0x00000000U);

94 
	`LL_EXTI_Wr√¥eReg
(
PR
, 0x000FFFFFU);

96  
SUCCESS
;

97 
	}
}

106 
u√∂t32_t
 
	$LL_EXTI_In√¥
(
LL_EXTI_In√¥Ty‚â•Def
 *
EXTI_In√¥S√•uÀò
)

108 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

110 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_EXTI_LINE_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
));

111 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FUNCTIONAL_STATE
(
EXTI_In√¥S√•uÀò
->
L√∂eComm‚Ñ¢d
));

112 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_EXTI_MODE
(
EXTI_In√¥S√•uÀò
->
Mode
));

115 i‚Ä°(
EXTI_In√¥S√•uÀò
->
L√∂eComm‚Ñ¢d
 !Ô£ø
DISABLE
)

117 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_EXTI_TRIGGER
(
EXTI_In√¥S√•uÀò
->
Trigg√Æ
));

120 i‚Ä°(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
 !Ô£ø
LL_EXTI_LINE_NONE
)

122 
EXTI_In√¥S√•uÀò
->
Mode
)

124 
LL_EXTI_MODE_IT
:

126 
	`LL_EXTI_Di√üb√ÄEv√≠t_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

128 
	`LL_EXTI_E¬´b√ÄIT_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

130 
LL_EXTI_MODE_EVENT
:

132 
	`LL_EXTI_Di√üb√ÄIT_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

134 
	`LL_EXTI_E¬´b√ÄEv√≠t_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

136 
LL_EXTI_MODE_IT_EVENT
:

138 
	`LL_EXTI_E¬´b√ÄIT_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

139 
	`LL_EXTI_E¬´b√ÄEv√≠t_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

142 
¬∞¬©us
 = 
ERROR
;

145 i‚Ä°(
EXTI_In√¥S√•uÀò
->
Trigg√Æ
 !Ô£ø
LL_EXTI_TRIGGER_NONE
)

147 
EXTI_In√¥S√•uÀò
->
Trigg√Æ
)

149 
LL_EXTI_TRIGGER_RISING
:

151 
	`LL_EXTI_Di√üb√ÄF√Ül√∂gTrig_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

153 
	`LL_EXTI_E¬´b√ÄRis√∂gTrig_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

155 
LL_EXTI_TRIGGER_FALLING
:

157 
	`LL_EXTI_Di√üb√ÄRis√∂gTrig_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

159 
	`LL_EXTI_E¬´b√ÄF√Ül√∂gTrig_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

161 
LL_EXTI_TRIGGER_RISING_FALLING
:

162 
	`LL_EXTI_E¬´b√ÄRis√∂gTrig_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

163 
	`LL_EXTI_E¬´b√ÄF√Ül√∂gTrig_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

166 
¬∞¬©us
 = 
ERROR
;

176 
	`LL_EXTI_Di√üb√ÄIT_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

177 
	`LL_EXTI_Di√üb√ÄEv√≠t_0_31
(
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
);

179  
¬∞¬©us
;

180 
	}
}

187 
	$LL_EXTI_S√•uÀòIn√¥
(
LL_EXTI_In√¥Ty‚â•Def
 *
EXTI_In√¥S√•uÀò
)

189 
EXTI_In√¥S√•uÀò
->
L√∂e_0_31
 = 
LL_EXTI_LINE_NONE
;

190 
EXTI_In√¥S√•uÀò
->
L√∂eComm‚Ñ¢d
 = 
DISABLE
;

191 
EXTI_In√¥S√•uÀò
->
Mode
 = 
LL_EXTI_MODE_IT
;

192 
EXTI_In√¥S√•uÀò
->
Trigg√Æ
 = 
LL_EXTI_TRIGGER_FALLING
;

193 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_fsmc.c

57 
	~"¬∞m32f1xx_h√Ü.h
"

62 #i‚Ä°(((
def√∂ed
 
HAL_NOR_MODULE_ENABLED
 || def√∂ed 
HAL_SRAM_MODULE_ENABLED
)√ã|| def√∂ed 
HAL_NAND_MODULE_ENABLED
 || def√∂ed 
HAL_PCCARD_MODULE_ENABLED
 )

78 #i‚Ä°
def√∂ed
 
FSMC_BANK1


84 
	#BTR_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_BTRx_ADDSET
 | 
FSMC_BTRx_ADDHLD
 |\

85 
FSMC_BTRx_DATAST
 | 
FSMC_BTRx_BUSTURN
 |\

86 
FSMC_BTRx_CLKDIV
 | 
FSMC_BTRx_DATLAT
 |\

87 
FSMC_BTRx_ACCMOD
))

	)

91 #i‚Ä°
def√∂ed
(
FSMC_BWTRx_BUSTURN
)

92 
	#BWTR_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_BWTRx_ADDSET
 | 
FSMC_BWTRx_ADDHLD
 |\

93 
FSMC_BWTRx_DATAST
 | 
FSMC_BWTRx_BUSTURN
 |\

94 
FSMC_BWTRx_ACCMOD
))

	)

96 
	#BWTR_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_BWTRx_ADDSET
 | 
FSMC_BWTRx_ADDHLD
 |\

97 
FSMC_BWTRx_DATAST
 | 
FSMC_BWTRx_ACCMOD
))

	)

100 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

104 
	#PCR_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PCRx_PWAITEN
 | 
FSMC_PCRx_PBKEN
 | \

105 
FSMC_PCRx_PTYP
 | 
FSMC_PCRx_PWID
 | \

106 
FSMC_PCRx_ECCEN
 | 
FSMC_PCRx_TCLR
 | \

107 
FSMC_PCRx_TAR
 | 
FSMC_PCRx_ECCPS
))

	)

110 
	#PMEM_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PMEMx_MEMSETx
 | 
FSMC_PMEMx_MEMWAITx
 |\

111 
FSMC_PMEMx_MEMHOLDx
 | 
FSMC_PMEMx_MEMHIZx
))

	)

115 
	#PATT_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PATTx_ATTSETx
 | 
FSMC_PATTx_ATTWAITx
 |\

116 
FSMC_PATTx_ATTHOLDx
 | 
FSMC_PATTx_ATTHIZx
))

	)

119 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

122 
	#PCR4_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PCR4_PWAITEN
 | 
FSMC_PCR4_PBKEN
 | \

123 
FSMC_PCR4_PTYP
 | 
FSMC_PCR4_PWID
 | \

124 
FSMC_PCR4_ECCEN
 | 
FSMC_PCR4_TCLR
 | \

125 
FSMC_PCR4_TAR
 | 
FSMC_PCR4_ECCPS
))

	)

128 
	#PMEM4_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PMEM4_MEMSET4
 | 
FSMC_PMEM4_MEMWAIT4
 |\

129 
FSMC_PMEM4_MEMHOLD4
 | 
FSMC_PMEM4_MEMHIZ4
))

	)

133 
	#PATT4_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PATT4_ATTSET4
 | 
FSMC_PATT4_ATTWAIT4
 |\

134 
FSMC_PATT4_ATTHOLD4
 | 
FSMC_PATT4_ATTHIZ4
))

	)

138 
	#PIO4_CLEAR_MASK
 ((
u√∂t32_t
)(
FSMC_PIO4_IOSET4
 | 
FSMC_PIO4_IOWAIT4
 | \

139 
FSMC_PIO4_IOHOLD4
 | 
FSMC_PIO4_IOHIZ4
))

	)

156 #i‚Ä°
def√∂ed
 
FSMC_BANK1


206 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NORSRAM_In√¥
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
,

207 
FSMC_NORSRAM_In√¥Ty‚â•Def
 *
In√¥
)

209 
u√∂t32_t
 
√äashacÀöss
;

210 
u√∂t32_t
 
bt¬∏_¬™g
;

211 
u√∂t32_t
 
mask
;

214 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_DEVICE
(
DeviÀö
));

215 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_BANK
(
In√¥
->
NSB‚Ñ¢k
));

216 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_MUX
(
In√¥
->
D¬©aAdd¬™ssMux
));

217 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_MEMORY
(
In√¥
->
Mem‚ÄπyTy‚â•
));

218 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_MEMORY_WIDTH
(
In√¥
->
Mem‚ÄπyD¬©aWidth
));

219 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_BURSTMODE
(
In√¥
->
Bur¬∞AcÀössMode
));

220 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_POLARITY
(
In√¥
->
Wa√¥Sig¬´lPÔ¨Å¬®√¥y
));

221 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WRAP_MODE
(
In√¥
->
W√∏pMode
));

222 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
In√¥
->
Wa√¥Sig¬´lAÀòive
));

223 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WRITE_OPERATION
(
In√¥
->
Wr√¥eO‚â•√∏ti‚ÅÑ
));

224 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAITE_SIGNAL
(
In√¥
->
Wa√¥Sig¬´l
));

225 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_EXTENDED_MODE
(
In√¥
->
Ex√£ndedMode
));

226 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ASYNWAIT
(
In√¥
->
Asynchr‚ÅÑousWa√¥
));

227 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WRITE_BURST
(
In√¥
->
Wr√¥eBur¬∞
));

228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_PAGESIZE
(
In√¥
->
PageSize
));

231 
	`__FSMC_NORSRAM_DISABLE
(
DeviÀö
, 
In√¥
->
NSB‚Ñ¢k
);

234 i‚Ä°(
In√¥
->
Mem‚ÄπyTy‚â•
 =Ô£ø
FSMC_MEMORY_TYPE_NOR
)

236 
√äashacÀöss
 = 
FSMC_NORSRAM_FLASH_ACCESS_ENABLE
;

240 
√äashacÀöss
 = 
FSMC_NORSRAM_FLASH_ACCESS_DISABLE
;

243 
bt¬∏_¬™g
 = (
√äashacÀöss
 | \

244 
In√¥
->
D¬©aAdd¬™ssMux
 | \

245 
In√¥
->
Mem‚ÄπyTy‚â•
 | \

246 
In√¥
->
Mem‚ÄπyD¬©aWidth
 | \

247 
In√¥
->
Bur¬∞AcÀössMode
 | \

248 
In√¥
->
Wa√¥Sig¬´lPÔ¨Å¬®√¥y
 | \

249 
In√¥
->
Wa√¥Sig¬´lAÀòive
 | \

250 
In√¥
->
Wr√¥eO‚â•√∏ti‚ÅÑ
 | \

251 
In√¥
->
Wa√¥Sig¬´l
 | \

252 
In√¥
->
Ex√£ndedMode
 | \

253 
In√¥
->
Asynchr‚ÅÑousWa√¥
 | \

254 
In√¥
->
Wr√¥eBur¬∞
);

256 
bt¬∏_¬™g
 |Ô£ø
In√¥
->
W√∏pMode
;

257 
bt¬∏_¬™g
 |Ô£ø
In√¥
->
PageSize
;

259 
mask
 = (
FSMC_BCRx_MBKEN
 |

260 
FSMC_BCRx_MUXEN
 |

261 
FSMC_BCRx_MTYP
 |

262 
FSMC_BCRx_MWID
 |

263 
FSMC_BCRx_FACCEN
 |

264 
FSMC_BCRx_BURSTEN
 |

265 
FSMC_BCRx_WAITPOL
 |

266 
FSMC_BCRx_WAITCFG
 |

267 
FSMC_BCRx_WREN
 |

268 
FSMC_BCRx_WAITEN
 |

269 
FSMC_BCRx_EXTMOD
 |

270 
FSMC_BCRx_ASYNCWAIT
 |

271 
FSMC_BCRx_CBURSTRW
);

273 
mask
 |Ô£ø
FSMC_BCRx_WRAPMOD
;

274 
mask
 |= 0x00070000U;

276 
	`MODIFY_REG
(
DeviÀö
->
BTCR
[
In√¥
->
NSB‚Ñ¢k
], 
mask
, 
bt¬∏_¬™g
);

279  
HAL_OK
;

280 
	}
}

289 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NORSRAM_DeIn√¥
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
,

290 
FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 *
ExDeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
)

293 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_DEVICE
(
DeviÀö
));

294 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_EXTENDED_DEVICE
(
ExDeviÀö
));

295 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_BANK
(
B‚Ñ¢k
));

298 
	`__FSMC_NORSRAM_DISABLE
(
DeviÀö
, 
B‚Ñ¢k
);

302 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NORSRAM_BANK1
)

304 
DeviÀö
->
BTCR
[
B‚Ñ¢k
] = 0x000030DBU;

309 
DeviÀö
->
BTCR
[
B‚Ñ¢k
] = 0x000030D2U;

312 
DeviÀö
->
BTCR
[
B‚Ñ¢k
 + 1U] = 0x0FFFFFFFU;

313 
ExDeviÀö
->
BWTR
[
B‚Ñ¢k
] = 0x0FFFFFFFU;

315  
HAL_OK
;

316 
	}
}

326 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NORSRAM_Tim√∂g_In√¥
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
,

327 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
)

331 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_DEVICE
(
DeviÀö
));

332 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
Tim√∂g
->
Add¬™ssS√´upTime
));

333 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
Tim√∂g
->
Add¬™ssHÔ¨ÅdTime
));

334 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_DATASETUP_TIME
(
Tim√∂g
->
D¬©aS√´upTime
));

335 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_TURNAROUND_TIME
(
Tim√∂g
->
BusTu‚à´AroundDu√∏ti‚ÅÑ
));

336 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_CLK_DIV
(
Tim√∂g
->
CLKDivisi‚ÅÑ
));

337 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_DATA_LATENCY
(
Tim√∂g
->
D¬©aL¬©√≠cy
));

338 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ACCESS_MODE
(
Tim√∂g
->
AcÀössMode
));

339 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_BANK
(
B‚Ñ¢k
));

342 
	`MODIFY_REG
(
DeviÀö
->
BTCR
[
B‚Ñ¢k
 + 1U], 
BTR_CLEAR_MASK
, (
Tim√∂g
->
Add¬™ssS√´upTime
 |

343 ((
Tim√∂g
->
Add¬™ssHÔ¨ÅdTime
√ã<< 
FSMC_BTRx_ADDHLD_Pos
) |

344 ((
Tim√∂g
->
D¬©aS√´upTime
√ã<< 
FSMC_BTRx_DATAST_Pos
) |

345 ((
Tim√∂g
->
BusTu‚à´AroundDu√∏ti‚ÅÑ
√ã<< 
FSMC_BTRx_BUSTURN_Pos
) |

346 (((
Tim√∂g
->
CLKDivisi‚ÅÑ
√ã- 1U√ã<< 
FSMC_BTRx_CLKDIV_Pos
) |

347 (((
Tim√∂g
->
D¬©aL¬©√≠cy
√ã- 2U√ã<< 
FSMC_BTRx_DATLAT_Pos
) |

348 (
Tim√∂g
->
AcÀössMode
)));

350  
HAL_OK
;

351 
	}
}

365 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NORSRAM_Ex√£nded_Tim√∂g_In√¥
(
FSMC_NORSRAM_EXTENDED_Ty‚â•Def
 *
DeviÀö
,

366 
FSMC_NORSRAM_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
, u√∂t32_√†
Ex√£ndedMode
)

369 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_EXTENDED_MODE
(
Ex√£ndedMode
));

372 i‚Ä°(
Ex√£ndedMode
 =Ô£ø
FSMC_EXTENDED_MODE_ENABLE
)

375 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_EXTENDED_DEVICE
(
DeviÀö
));

376 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
Tim√∂g
->
Add¬™ssS√´upTime
));

377 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
Tim√∂g
->
Add¬™ssHÔ¨ÅdTime
));

378 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_DATASETUP_TIME
(
Tim√∂g
->
D¬©aS√´upTime
));

379 #i‚Ä°
	`def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

380 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_TURNAROUND_TIME
(
Tim√∂g
->
BusTu‚à´AroundDu√∏ti‚ÅÑ
));

382 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_CLK_DIV
(
Tim√∂g
->
CLKDivisi‚ÅÑ
));

383 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_DATA_LATENCY
(
Tim√∂g
->
D¬©aL¬©√≠cy
));

385 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ACCESS_MODE
(
Tim√∂g
->
AcÀössMode
));

386 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_BANK
(
B‚Ñ¢k
));

389 #i‚Ä°
	`def√∂ed
(
STM32F101xE
√ã|| def√∂ed(
STM32F103xE
√ã|| def√∂ed(
STM32F101xG
√ã|| def√∂ed(
STM32F103xG
)

390 
	`MODIFY_REG
(
DeviÀö
->
BWTR
[
B‚Ñ¢k
], 
BWTR_CLEAR_MASK
, (
Tim√∂g
->
Add¬™ssS√´upTime
 |

391 ((
Tim√∂g
->
Add¬™ssHÔ¨ÅdTime
√ã<< 
FSMC_BWTRx_ADDHLD_Pos
) |

392 ((
Tim√∂g
->
D¬©aS√´upTime
√ã<< 
FSMC_BWTRx_DATAST_Pos
) |

393 
Tim√∂g
->
AcÀössMode
 |

394 ((
Tim√∂g
->
BusTu‚à´AroundDu√∏ti‚ÅÑ
√ã<< 
FSMC_BWTRx_BUSTURN_Pos
)));

396 
	`MODIFY_REG
(
DeviÀö
->
BWTR
[
B‚Ñ¢k
], 
BWTR_CLEAR_MASK
, (
Tim√∂g
->
Add¬™ssS√´upTime
 |

397 ((
Tim√∂g
->
Add¬™ssHÔ¨ÅdTime
√ã<< 
FSMC_BWTRx_ADDHLD_Pos
) |

398 ((
Tim√∂g
->
D¬©aS√´upTime
√ã<< 
FSMC_BWTRx_DATAST_Pos
) |

399 
Tim√∂g
->
AcÀössMode
 |

400 (((
Tim√∂g
->
CLKDivisi‚ÅÑ
√ã- 1U√ã<< 
FSMC_BTRx_CLKDIV_Pos
) |

401 (((
Tim√∂g
->
D¬©aL¬©√≠cy
√ã- 2U√ã<< 
FSMC_BWTRx_DATLAT_Pos
)));

406 
DeviÀö
->
BWTR
[
B‚Ñ¢k
] = 0x0FFFFFFFU;

409  
HAL_OK
;

410 
	}
}

436 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_E¬´b√Ä
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
)

439 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_DEVICE
(
DeviÀö
));

440 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_BANK
(
B‚Ñ¢k
));

443 
	`SET_BIT
(
DeviÀö
->
BTCR
[
B‚Ñ¢k
], 
FSMC_WRITE_OPERATION_ENABLE
);

445  
HAL_OK
;

446 
	}
}

454 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NORSRAM_Wr√¥eO‚â•√∏ti‚ÅÑ_Di√üb√Ä
(
FSMC_NORSRAM_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
)

457 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_DEVICE
(
DeviÀö
));

458 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NORSRAM_BANK
(
B‚Ñ¢k
));

461 
	`CLEAR_BIT
(
DeviÀö
->
BTCR
[
B‚Ñ¢k
], 
FSMC_WRITE_OPERATION_ENABLE
);

463  
HAL_OK
;

464 
	}
}

475 #i‚Ä°
def√∂ed
(
FSMC_BANK3
)

526 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_In√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
FSMC_NAND_In√¥Ty‚â•Def
 *
In√¥
)

529 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

530 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
In√¥
->
N‚Ñ¢dB‚Ñ¢k
));

531 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_FEATURE
(
In√¥
->
Wa√¥‚Äû¬©u¬™
));

532 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_MEMORY_WIDTH
(
In√¥
->
Mem‚ÄπyD¬©aWidth
));

533 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ECC_STATE
(
In√¥
->
EccCompu√®ti‚ÅÑ
));

534 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_ECCPAGE_SIZE
(
In√¥
->
ECCPageSize
));

535 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_TCLR_TIME
(
In√¥
->
TCLRS√´upTime
));

536 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_TAR_TIME
(
In√¥
->
TARS√´upTime
));

539 i‚Ä°(
In√¥
->
N‚Ñ¢dB‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

542 
	`MODIFY_REG
(
DeviÀö
->
PCR2
, 
PCR_CLEAR_MASK
, (
In√¥
->
Wa√¥‚Äû¬©u¬™
 |

543 
FSMC_PCR_MEMORY_TYPE_NAND
 |

544 
In√¥
->
Mem‚ÄπyD¬©aWidth
 |

545 
In√¥
->
EccCompu√®ti‚ÅÑ
 |

546 
In√¥
->
ECCPageSize
 |

547 ((
In√¥
->
TCLRS√´upTime
√ã<< 
FSMC_PCRx_TCLR_Pos
) |

548 ((
In√¥
->
TARS√´upTime
√ã<< 
FSMC_PCRx_TAR_Pos
)));

553 
	`MODIFY_REG
(
DeviÀö
->
PCR3
, 
PCR_CLEAR_MASK
, (
In√¥
->
Wa√¥‚Äû¬©u¬™
 |

554 
FSMC_PCR_MEMORY_TYPE_NAND
 |

555 
In√¥
->
Mem‚ÄπyD¬©aWidth
 |

556 
In√¥
->
EccCompu√®ti‚ÅÑ
 |

557 
In√¥
->
ECCPageSize
 |

558 ((
In√¥
->
TCLRS√´upTime
√ã<< 
FSMC_PCRx_TCLR_Pos
) |

559 ((
In√¥
->
TARS√´upTime
√ã<< 
FSMC_PCRx_TAR_Pos
)));

562  
HAL_OK
;

563 
	}
}

573 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_Comm‚ÅÑS‚àëÀö_Tim√∂g_In√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
,

574 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
)

577 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

578 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_SETUP_TIME
(
Tim√∂g
->
S√´upTime
));

579 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_TIME
(
Tim√∂g
->
Wa√¥S√´upTime
));

580 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HOLD_TIME
(
Tim√∂g
->
HÔ¨ÅdS√´upTime
));

581 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HIZ_TIME
(
Tim√∂g
->
HiZS√´upTime
));

582 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
B‚Ñ¢k
));

585 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

588 
	`MODIFY_REG
(
DeviÀö
->
PMEM2
, 
PMEM_CLEAR_MASK
, (
Tim√∂g
->
S√´upTime
 |

589 ((
Tim√∂g
->
Wa√¥S√´upTime
√ã<< 
FSMC_PMEMx_MEMWAITx_Pos
) |

590 ((
Tim√∂g
->
HÔ¨ÅdS√´upTime
√ã<< 
FSMC_PMEMx_MEMHOLDx_Pos
) |

591 ((
Tim√∂g
->
HiZS√´upTime
√ã<< 
FSMC_PMEMx_MEMHIZx_Pos
)));

596 
	`MODIFY_REG
(
DeviÀö
->
PMEM3
, 
PMEM_CLEAR_MASK
, (
Tim√∂g
->
S√´upTime
 |

597 ((
Tim√∂g
->
Wa√¥S√´upTime
√ã<< 
FSMC_PMEMx_MEMWAITx_Pos
) |

598 ((
Tim√∂g
->
HÔ¨ÅdS√´upTime
√ã<< 
FSMC_PMEMx_MEMHOLDx_Pos
) |

599 ((
Tim√∂g
->
HiZS√´upTime
√ã<< 
FSMC_PMEMx_MEMHIZx_Pos
)));

602  
HAL_OK
;

603 
	}
}

613 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_A√¢ribu√£S‚àëÀö_Tim√∂g_In√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
,

614 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
, 
u√∂t32_t
 
B‚Ñ¢k
)

617 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

618 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_SETUP_TIME
(
Tim√∂g
->
S√´upTime
));

619 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_TIME
(
Tim√∂g
->
Wa√¥S√´upTime
));

620 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HOLD_TIME
(
Tim√∂g
->
HÔ¨ÅdS√´upTime
));

621 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HIZ_TIME
(
Tim√∂g
->
HiZS√´upTime
));

622 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
B‚Ñ¢k
));

625 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

628 
	`MODIFY_REG
(
DeviÀö
->
PATT2
, 
PATT_CLEAR_MASK
, (
Tim√∂g
->
S√´upTime
 |

629 ((
Tim√∂g
->
Wa√¥S√´upTime
√ã<< 
FSMC_PATTx_ATTWAITx_Pos
) |

630 ((
Tim√∂g
->
HÔ¨ÅdS√´upTime
√ã<< 
FSMC_PATTx_ATTHOLDx_Pos
) |

631 ((
Tim√∂g
->
HiZS√´upTime
√ã<< 
FSMC_PATTx_ATTHIZx_Pos
)));

636 
	`MODIFY_REG
(
DeviÀö
->
PATT3
, 
PATT_CLEAR_MASK
, (
Tim√∂g
->
S√´upTime
 |

637 ((
Tim√∂g
->
Wa√¥S√´upTime
√ã<< 
FSMC_PATTx_ATTWAITx_Pos
) |

638 ((
Tim√∂g
->
HÔ¨ÅdS√´upTime
√ã<< 
FSMC_PATTx_ATTHOLDx_Pos
) |

639 ((
Tim√∂g
->
HiZS√´upTime
√ã<< 
FSMC_PATTx_ATTHIZx_Pos
)));

642  
HAL_OK
;

643 
	}
}

651 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_DeIn√¥
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
)

654 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

655 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
B‚Ñ¢k
));

658 
	`__FSMC_NAND_DISABLE
(
DeviÀö
, 
B‚Ñ¢k
);

661 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

664 
	`WRITE_REG
(
DeviÀö
->
PCR2
, 0x00000018U);

665 
	`WRITE_REG
(
DeviÀö
->
SR2
, 0x00000040U);

666 
	`WRITE_REG
(
DeviÀö
->
PMEM2
, 0xFCFCFCFCU);

667 
	`WRITE_REG
(
DeviÀö
->
PATT2
, 0xFCFCFCFCU);

673 
	`WRITE_REG
(
DeviÀö
->
PCR3
, 0x00000018U);

674 
	`WRITE_REG
(
DeviÀö
->
SR3
, 0x00000040U);

675 
	`WRITE_REG
(
DeviÀö
->
PMEM3
, 0xFCFCFCFCU);

676 
	`WRITE_REG
(
DeviÀö
->
PATT3
, 0xFCFCFCFCU);

679  
HAL_OK
;

680 
	}
}

708 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_ECC_E¬´b√Ä
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
)

711 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

712 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
B‚Ñ¢k
));

715 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

717 
	`SET_BIT
(
DeviÀö
->
PCR2
, 
FSMC_PCRx_ECCEN
);

721 
	`SET_BIT
(
DeviÀö
->
PCR3
, 
FSMC_PCRx_ECCEN
);

724  
HAL_OK
;

725 
	}
}

734 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_ECC_Di√üb√Ä
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 
B‚Ñ¢k
)

737 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

738 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
B‚Ñ¢k
));

741 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

743 
	`CLEAR_BIT
(
DeviÀö
->
PCR2
, 
FSMC_PCRx_ECCEN
);

747 
	`CLEAR_BIT
(
DeviÀö
->
PCR3
, 
FSMC_PCRx_ECCEN
);

750  
HAL_OK
;

751 
	}
}

761 
HAL_S√®tusTy‚â•Def
 
	$FSMC_NAND_G√´ECC
(
FSMC_NAND_Ty‚â•Def
 *
DeviÀö
, 
u√∂t32_t
 *
ECCv√Ü
, u√∂t32_√†
B‚Ñ¢k
,

762 
u√∂t32_t
 
Timeout
)

764 
u√∂t32_t
 
tick¬∞¬®t
;

767 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_DEVICE
(
DeviÀö
));

768 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_NAND_BANK
(
B‚Ñ¢k
));

771 
tick¬∞¬®t
 = 
	`HAL_G√´Tick
();

774 
	`__FSMC_NAND_GET_FLAG
(
DeviÀö
, 
B‚Ñ¢k
, 
FSMC_FLAG_FEMPT
√ã=Ô£ø
RESET
)

777 i‚Ä°(
Timeout
 !Ô£ø
HAL_MAX_DELAY
)

779 i‚Ä°(((
	`HAL_G√´Tick
(√ã- 
tick¬∞¬®t
√ã> 
Timeout
) || (Timeout == 0U))

781  
HAL_TIMEOUT
;

786 i‚Ä°(
B‚Ñ¢k
 =Ô£ø
FSMC_NAND_BANK2
)

789 *
ECCv√Ü
 = (
u√∂t32_t
)
DeviÀö
->
ECCR2
;

794 *
ECCv√Ü
 = (
u√∂t32_t
)
DeviÀö
->
ECCR3
;

797  
HAL_OK
;

798 
	}
}

805 #i‚Ä°
def√∂ed
(
FSMC_BANK4
)

854 
HAL_S√®tusTy‚â•Def
 
	$FSMC_PCCARD_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
, 
FSMC_PCCARD_In√¥Ty‚â•Def
 *
In√¥
)

857 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_PCCARD_DEVICE
(
DeviÀö
));

858 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_FEATURE
(
In√¥
->
Wa√¥‚Äû¬©u¬™
));

859 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_TCLR_TIME
(
In√¥
->
TCLRS√´upTime
));

860 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_TAR_TIME
(
In√¥
->
TARS√´upTime
));

863 
	`MODIFY_REG
(
DeviÀö
->
PCR4
,

864 (
FSMC_PCRx_PTYP
 |

865 
FSMC_PCRx_PWAITEN
 |

866 
FSMC_PCRx_PWID
 |

867 
FSMC_PCRx_TCLR
 |

868 
FSMC_PCRx_TAR
),

869 (
FSMC_PCR_MEMORY_TYPE_PCCARD
 |

870 
In√¥
->
Wa√¥‚Äû¬©u¬™
 |

871 
FSMC_NAND_PCC_MEM_BUS_WIDTH_16
 |

872 (
In√¥
->
TCLRS√´upTime
 << 
FSMC_PCRx_TCLR_Pos
) |

873 (
In√¥
->
TARS√´upTime
 << 
FSMC_PCRx_TAR_Pos
)));

875  
HAL_OK
;

876 
	}
}

885 
HAL_S√®tusTy‚â•Def
 
	$FSMC_PCCARD_Comm‚ÅÑS‚àëÀö_Tim√∂g_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
,

886 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
)

889 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_PCCARD_DEVICE
(
DeviÀö
));

890 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_SETUP_TIME
(
Tim√∂g
->
S√´upTime
));

891 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_TIME
(
Tim√∂g
->
Wa√¥S√´upTime
));

892 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HOLD_TIME
(
Tim√∂g
->
HÔ¨ÅdS√´upTime
));

893 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HIZ_TIME
(
Tim√∂g
->
HiZS√´upTime
));

896 
	`MODIFY_REG
(
DeviÀö
->
PMEM4
, 
PMEM_CLEAR_MASK
,

897 (
Tim√∂g
->
S√´upTime
 |

898 ((
Tim√∂g
->
Wa√¥S√´upTime
√ã<< 
FSMC_PMEMx_MEMWAITx_Pos
) |

899 ((
Tim√∂g
->
HÔ¨ÅdS√´upTime
√ã<< 
FSMC_PMEMx_MEMHOLDx_Pos
) |

900 ((
Tim√∂g
->
HiZS√´upTime
√ã<< 
FSMC_PMEMx_MEMHIZx_Pos
)));

902  
HAL_OK
;

903 
	}
}

912 
HAL_S√®tusTy‚â•Def
 
	$FSMC_PCCARD_A√¢ribu√£S‚àëÀö_Tim√∂g_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
,

913 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
)

916 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_PCCARD_DEVICE
(
DeviÀö
));

917 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_SETUP_TIME
(
Tim√∂g
->
S√´upTime
));

918 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_TIME
(
Tim√∂g
->
Wa√¥S√´upTime
));

919 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HOLD_TIME
(
Tim√∂g
->
HÔ¨ÅdS√´upTime
));

920 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HIZ_TIME
(
Tim√∂g
->
HiZS√´upTime
));

923 
	`MODIFY_REG
(
DeviÀö
->
PATT4
, 
PATT_CLEAR_MASK
,

924 (
Tim√∂g
->
S√´upTime
 |

925 ((
Tim√∂g
->
Wa√¥S√´upTime
√ã<< 
FSMC_PATTx_ATTWAITx_Pos
) |

926 ((
Tim√∂g
->
HÔ¨ÅdS√´upTime
√ã<< 
FSMC_PATTx_ATTHOLDx_Pos
) |

927 ((
Tim√∂g
->
HiZS√´upTime
√ã<< 
FSMC_PATTx_ATTHIZx_Pos
)));

929  
HAL_OK
;

930 
	}
}

939 
HAL_S√®tusTy‚â•Def
 
	$FSMC_PCCARD_IOS‚àëÀö_Tim√∂g_In√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
,

940 
FSMC_NAND_PCC_Tim√∂gTy‚â•Def
 *
Tim√∂g
)

943 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_PCCARD_DEVICE
(
DeviÀö
));

944 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_SETUP_TIME
(
Tim√∂g
->
S√´upTime
));

945 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_WAIT_TIME
(
Tim√∂g
->
Wa√¥S√´upTime
));

946 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HOLD_TIME
(
Tim√∂g
->
HÔ¨ÅdS√´upTime
));

947 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_HIZ_TIME
(
Tim√∂g
->
HiZS√´upTime
));

950 
	`MODIFY_REG
(
DeviÀö
->
PIO4
, 
PIO4_CLEAR_MASK
,

951 (
Tim√∂g
->
S√´upTime
 |

952 (
Tim√∂g
->
Wa√¥S√´upTime
 << 
FSMC_PIO4_IOWAIT4_Pos
) |

953 (
Tim√∂g
->
HÔ¨ÅdS√´upTime
 << 
FSMC_PIO4_IOHOLD4_Pos
) |

954 (
Tim√∂g
->
HiZS√´upTime
 << 
FSMC_PIO4_IOHIZ4_Pos
)));

956  
HAL_OK
;

957 
	}
}

964 
HAL_S√®tusTy‚â•Def
 
	$FSMC_PCCARD_DeIn√¥
(
FSMC_PCCARD_Ty‚â•Def
 *
DeviÀö
)

967 
	`as¬£œÄ_‚àë√∏m
(
	`IS_FSMC_PCCARD_DEVICE
(
DeviÀö
));

970 
	`__FSMC_PCCARD_DISABLE
(
DeviÀö
);

973 
DeviÀö
->
PCR4
 = 0x00000018U;

974 
DeviÀö
->
SR4
 = 0x00000040U;

975 
DeviÀö
->
PMEM4
 = 0xFCFCFCFCU;

976 
DeviÀö
->
PATT4
 = 0xFCFCFCFCU;

977 
DeviÀö
->
PIO4
 = 0xFCFCFCFCU;

979  
HAL_OK
;

980 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_gpio.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_gpio.h
"

24 
	~"¬∞m32f1xx_≈í_bus.h
"

25 #ifde‚Ä° 
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
 (
GPIOA
√ã|| def√∂ed (
GPIOB
√ã|| def√∂ed (
GPIOC
√ã|| def√∂ed (
GPIOD
√ã|| def√∂ed (
GPIOE
√ã|| def√∂ed (
GPIOF
√ã|| def√∂ed (
GPIOG
)

49 
	#IS_LL_GPIO_PIN
(
__VALUE__
√ã((((__VALUE__√ã& 
LL_GPIO_PIN_ALL
)!= 0u) &&\

50 (((
__VALUE__
√ã& (~
LL_GPIO_PIN_ALL
))=Ô£ø0u))

	)

52 
	#IS_LL_GPIO_MODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_GPIO_MODE_ANALOG
) ||\

53 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_MODE_FLOATING
) ||\

54 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_MODE_INPUT
) ||\

55 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_MODE_OUTPUT
) ||\

56 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_MODE_ALTERNATE
))

	)

58 
	#IS_LL_GPIO_SPEED
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_GPIO_SPEED_FREQ_LOW
) ||\

59 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_SPEED_FREQ_MEDIUM
) ||\

60 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_SPEED_FREQ_HIGH
))

	)

62 
	#IS_LL_GPIO_OUTPUT_TYPE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_GPIO_OUTPUT_PUSHPULL
) ||\

63 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_OUTPUT_OPENDRAIN
))

	)

65 
	#IS_LL_GPIO_PULL
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_GPIO_PULL_DOWN
) ||\

66 ((
__VALUE__
√ã=Ô£ø
LL_GPIO_PULL_UP
))

	)

90 
E¬∫‚ÄπS√®tus
 
	$LL_GPIO_DeIn√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
)

92 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

95 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

98 i‚Ä°(
GPIOx
 =Ô£ø
GPIOA
)

100 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOA
);

101 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOA
);

103 i‚Ä°(
GPIOx
 =Ô£ø
GPIOB
)

105 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOB
);

106 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOB
);

108 i‚Ä°(
GPIOx
 =Ô£ø
GPIOC
)

110 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOC
);

111 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOC
);

113 i‚Ä°(
GPIOx
 =Ô£ø
GPIOD
)

115 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOD
);

116 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOD
);

118 #i‚Ä°
	`def√∂ed
(
GPIOE
)

119 i‚Ä°(
GPIOx
 =Ô£ø
GPIOE
)

121 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOE
);

122 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOE
);

125 #i‚Ä°
	`def√∂ed
(
GPIOF
)

126 i‚Ä°(
GPIOx
 =Ô£ø
GPIOF
)

128 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOF
);

129 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOF
);

132 #i‚Ä°
	`def√∂ed
(
GPIOG
)

133 i‚Ä°(
GPIOx
 =Ô£ø
GPIOG
)

135 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_GPIOG
);

136 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_GPIOG
);

141 
¬∞¬©us
 = 
ERROR
;

144  (
¬∞¬©us
);

145 
	}
}

156 
E¬∫‚ÄπS√®tus
 
	$LL_GPIO_In√¥
(
GPIO_Ty‚â•Def
 *
GPIOx
, 
LL_GPIO_In√¥Ty‚â•Def
 *
GPIO_In√¥S√•uÀò
)

158 
u√∂t32_t
 
p√∂mask
;

159 
u√∂t32_t
 
p√∂pos
;

160 
u√∂t32_t
 
cu¬∫√≠√ß√∂
;

163 
	`as¬£œÄ_‚àë√∏m
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

164 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_GPIO_PIN
(
GPIO_In√¥S√•uÀò
->
P√∂
));

169 
p√∂mask
 = ((
GPIO_In√¥S√•uÀò
->
P√∂
√ã<< 
GPIO_PIN_MASK_POS
√ã>> 
GPIO_PIN_NB
;

170 
p√∂pos
 = 
	`POSITION_VAL
(
p√∂mask
);

173 (
p√∂mask
 >> 
p√∂pos
) != 0u)

176 i‚Ä°((
p√∂mask
 & (1u << 
p√∂pos
)) != 0u)

179 i‚Ä°(
p√∂pos
 < 
GPIO_PIN_MASK_POS
)

181 
cu¬∫√≠√ß√∂
 = (0x00000101uL << 
p√∂pos
);

185 
cu¬∫√≠√ß√∂
 = ((0x00010001u << (
p√∂pos
 - 
GPIO_PIN_MASK_POS
)) | 0x04000000u);

189 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_GPIO_MODE
(
GPIO_In√¥S√•uÀò
->
Mode
));

190 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_GPIO_PULL
(
GPIO_In√¥S√•uÀò
->
Pu≈í
));

193 
	`LL_GPIO_S√´P√∂Pu≈í
(
GPIOx
, 
cu¬∫√≠√ß√∂
, 
GPIO_In√¥S√•uÀò
->
Pu≈í
);

196 
	`LL_GPIO_S√´P√∂Mode
(
GPIOx
, 
cu¬∫√≠√ß√∂
, 
GPIO_In√¥S√•uÀò
->
Mode
);

198 i‚Ä°((
GPIO_In√¥S√•uÀò
->
Mode
 =Ô£ø
LL_GPIO_MODE_OUTPUT
√ã|| (GPIO_In√¥S√•uÀò->Mod√™=Ô£ø
LL_GPIO_MODE_ALTERNATE
))

201 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_GPIO_SPEED
(
GPIO_In√¥S√•uÀò
->
S‚â•ed
));

202 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_GPIO_OUTPUT_TYPE
(
GPIO_In√¥S√•uÀò
->
Ou√ßutTy‚â•
));

205 
	`LL_GPIO_S√´P√∂S‚â•ed
(
GPIOx
, 
cu¬∫√≠√ß√∂
, 
GPIO_In√¥S√•uÀò
->
S‚â•ed
);

208 
	`LL_GPIO_S√´P√∂Ou√ßutTy‚â•
(
GPIOx
, 
cu¬∫√≠√ß√∂
, 
GPIO_In√¥S√•uÀò
->
Ou√ßutTy‚â•
);

211 
p√∂pos
++;

213  (
SUCCESS
);

214 
	}
}

223 
	$LL_GPIO_S√•uÀòIn√¥
(
LL_GPIO_In√¥Ty‚â•Def
 *
GPIO_In√¥S√•uÀò
)

226 
GPIO_In√¥S√•uÀò
->
P√∂
 = 
LL_GPIO_PIN_ALL
;

227 
GPIO_In√¥S√•uÀò
->
Mode
 = 
LL_GPIO_MODE_FLOATING
;

228 
GPIO_In√¥S√•uÀò
->
S‚â•ed
 = 
LL_GPIO_SPEED_FREQ_LOW
;

229 
GPIO_In√¥S√•uÀò
->
Ou√ßutTy‚â•
 = 
LL_GPIO_OUTPUT_OPENDRAIN
;

230 
GPIO_In√¥S√•uÀò
->
Pu≈í
 = 
LL_GPIO_PULL_DOWN
;

231 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_i2c.c

19 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

22 
	~"¬∞m32f1xx_≈í_i2c.h
"

23 
	~"¬∞m32f1xx_≈í_bus.h
"

24 
	~"¬∞m32f1xx_≈í_rcc.h
"

25 #ifde‚Ä° 
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
 (
I2C1
√ã|| def√∂ed (
I2C2
)

49 
	#IS_LL_I2C_PERIPHERAL_MODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2C_MODE_I2C
) || \

50 ((
__VALUE__
√ã=Ô£ø
LL_I2C_MODE_SMBUS_HOST
) || \

51 ((
__VALUE__
√ã=Ô£ø
LL_I2C_MODE_SMBUS_DEVICE
) || \

52 ((
__VALUE__
√ã=Ô£ø
LL_I2C_MODE_SMBUS_DEVICE_ARP
))

	)

54 
	#IS_LL_I2C_CLOCK_SPEED
(
__VALUE__
√ã(((__VALUE__√ã> 0U√ã&& ((__VALUE__√ã<Ô£ø
LL_I2C_MAX_SPEED_FAST
))

	)

56 
	#IS_LL_I2C_DUTY_CYCLE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2C_DUTYCYCLE_2
) || \

57 ((
__VALUE__
√ã=Ô£ø
LL_I2C_DUTYCYCLE_16_9
))

	)

59 
	#IS_LL_I2C_OWN_ADDRESS1
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø0x000003FFU)

	)

61 
	#IS_LL_I2C_TYPE_ACKNOWLEDGE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2C_ACK
) || \

62 ((
__VALUE__
√ã=Ô£ø
LL_I2C_NACK
))

	)

64 
	#IS_LL_I2C_OWN_ADDRSIZE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2C_OWNADDRESS1_7BIT
) || \

65 ((
__VALUE__
√ã=Ô£ø
LL_I2C_OWNADDRESS1_10BIT
))

	)

88 
u√∂t32_t
 
	$LL_I2C_DeIn√¥
(
I2C_Ty‚â•Def
 *
I2Cx
)

90 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

93 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_ALL_INSTANCE
(
I2Cx
));

95 i‚Ä°(
I2Cx
 =Ô£ø
I2C1
)

98 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_I2C1
);

101 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_I2C1
);

103 #i‚Ä°
	`def√∂ed
(
I2C2
)

104 i‚Ä°(
I2Cx
 =Ô£ø
I2C2
)

107 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_I2C2
);

110 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_I2C2
);

116 
¬∞¬©us
 = 
ERROR
;

119  
¬∞¬©us
;

120 
	}
}

130 
u√∂t32_t
 
	$LL_I2C_In√¥
(
I2C_Ty‚â•Def
 *
I2Cx
, 
LL_I2C_In√¥Ty‚â•Def
 *
I2C_In√¥S√•uÀò
)

132 
LL_RCC_ClocksTy‚â•Def
 
rcc_Àõocks
;

135 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2C_ALL_INSTANCE
(
I2Cx
));

138 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2C_PERIPHERAL_MODE
(
I2C_In√¥S√•uÀò
->
P√Æ√πh√Æ√ÜMode
));

139 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2C_CLOCK_SPEED
(
I2C_In√¥S√•uÀò
->
ClockS‚â•ed
));

140 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2C_DUTY_CYCLE
(
I2C_In√¥S√•uÀò
->
DutyCyÀõe
));

141 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2C_OWN_ADDRESS1
(
I2C_In√¥S√•uÀò
->
OwnAdd¬™ss1
));

142 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2C_TYPE_ACKNOWLEDGE
(
I2C_In√¥S√•uÀò
->
Ty‚â•Acknow√Ädge
));

143 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2C_OWN_ADDRSIZE
(
I2C_In√¥S√•uÀò
->
OwnAddrSize
));

146 
	`LL_I2C_Di√üb√Ä
(
I2Cx
);

149 
	`LL_RCC_G√´Sy¬∞emClocksF¬™q
(&
rcc_Àõocks
);

157 
	`LL_I2C_C‚ÅÑfigS‚â•ed
(
I2Cx
, 
rcc_Àõocks
.
PCLK1_F¬™qu√≠cy
, 
I2C_In√¥S√•uÀò
->
ClockS‚â•ed
, I2C_In√¥S√•uÀò->
DutyCyÀõe
);

164 
	`LL_I2C_S√´OwnAdd¬™ss1
(
I2Cx
, 
I2C_In√¥S√•uÀò
->
OwnAdd¬™ss1
, I2C_In√¥S√•uÀò->
OwnAddrSize
);

170 
	`LL_I2C_S√´Mode
(
I2Cx
, 
I2C_In√¥S√•uÀò
->
P√Æ√πh√Æ√ÜMode
);

173 
	`LL_I2C_E¬´b√Ä
(
I2Cx
);

180 
	`LL_I2C_Acknow√ÄdgeNextD¬©a
(
I2Cx
, 
I2C_In√¥S√•uÀò
->
Ty‚â•Acknow√Ädge
);

182  
SUCCESS
;

183 
	}
}

190 
	$LL_I2C_S√•uÀòIn√¥
(
LL_I2C_In√¥Ty‚â•Def
 *
I2C_In√¥S√•uÀò
)

193 
I2C_In√¥S√•uÀò
->
P√Æ√πh√Æ√ÜMode
 = 
LL_I2C_MODE_I2C
;

194 
I2C_In√¥S√•uÀò
->
ClockS‚â•ed
 = 5000U;

195 
I2C_In√¥S√•uÀò
->
DutyCyÀõe
 = 
LL_I2C_DUTYCYCLE_2
;

196 
I2C_In√¥S√•uÀò
->
OwnAdd¬™ss1
 = 0U;

197 
I2C_In√¥S√•uÀò
->
Ty‚â•Acknow√Ädge
 = 
LL_I2C_NACK
;

198 
I2C_In√¥S√•uÀò
->
OwnAddrSize
 = 
LL_I2C_OWNADDRESS1_7BIT
;

199 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_pwr.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_pwr.h
"

24 
	~"¬∞m32f1xx_≈í_bus.h
"

30 #i‚Ä°
def√∂ed
(
PWR
)

57 
E¬∫‚ÄπS√®tus
 
	$LL_PWR_DeIn√¥
()

60 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_PWR
);

63 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_PWR
);

65  
SUCCESS
;

66 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_rcc.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_rcc.h
"

24 #ifde‚Ä° 
USE_FULL_ASSERT


25 
	~"¬∞m32_as¬£œÄ.h
"

27 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

33 #i‚Ä°
def√∂ed
(
RCC
)

46 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

47 
	#IS_LL_RCC_I2S_CLKSOURCE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_I2S2_CLKSOURCE
) \

48 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_I2S3_CLKSOURCE
))

	)

51 #i‚Ä°
def√∂ed
(
USB
√ã|| def√∂ed(
USB_OTG_FS
)

52 
	#IS_LL_RCC_USB_CLKSOURCE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_USB_CLKSOURCE
))

	)

55 
	#IS_LL_RCC_ADC_CLKSOURCE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_ADC_CLKSOURCE
))

	)

64 
u√∂t32_t
 
RCC_G√´Sy¬∞emClockF¬™q
();

65 
u√∂t32_t
 
RCC_G√´HCLKClockF¬™q
(u√∂t32_√†
SYSCLK_F¬™qu√≠cy
);

66 
u√∂t32_t
 
RCC_G√´PCLK1ClockF¬™q
(u√∂t32_√†
HCLK_F¬™qu√≠cy
);

67 
u√∂t32_t
 
RCC_G√´PCLK2ClockF¬™q
(u√∂t32_√†
HCLK_F¬™qu√≠cy
);

68 
u√∂t32_t
 
RCC_PLL_G√´F¬™qDoma√∂_SYS
();

69 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

70 
u√∂t32_t
 
RCC_PLLI2S_G√´F¬™qDoma√∂_I2S
();

72 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

73 
u√∂t32_t
 
RCC_PLL2_G√´F¬™qClockF¬™q
();

103 
E¬∫‚ÄπS√®tus
 
	$LL_RCC_DeIn√¥
()

106 
	`LL_RCC_HSI_E¬´b√Ä
();

109 
	`LL_RCC_HSI_IsR√≥dy
() != 1U)

113 
	`LL_RCC_S√´SysClkSourÀö
(
LL_RCC_SYS_CLKSOURCE_HSI
);

116 
	`LL_RCC_G√´SysClkSourÀö
(√ã!Ô£ø
LL_RCC_SYS_CLKSOURCE_STATUS_HSI
)

120 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

123 
	`LL_RCC_PLL_IsR√≥dy
() != 0U)

127 
	`LL_RCC_Wr√¥eReg
(
CFGR
, 0x00000000U);

130 
	`CLEAR_BIT
(
RCC
->
CR
, (
RCC_CR_CSSON
 | 
RCC_CR_HSEON
 | 
RCC_CR_HSEBYP
));

132 #i‚Ä°
	`def√∂ed
(
RCC_CR_PLL2ON
)

134 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

137 #i‚Ä°
	`def√∂ed
(
RCC_CR_PLL3ON
)

139 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

143 
	`LL_RCC_HSI_S√´C√ÜibTrimm√∂g
(0x10U);

145 #i‚Ä°
	`def√∂ed
(
RCC_CFGR2_PREDIV1
)

147 
	`LL_RCC_Wr√¥eReg
(
CFGR2
, 0x00000000U);

151 
	`LL_RCC_Wr√¥eReg
(
CIR
, 0x00000000U);

154 
	`LL_RCC_C√Ä¬®Re¬£tF≈ìgs
();

156  
SUCCESS
;

157 
	}
}

190 
	$LL_RCC_G√´Sy¬∞emClocksF¬™q
(
LL_RCC_ClocksTy‚â•Def
 *
RCC_Clocks
)

193 
RCC_Clocks
->
SYSCLK_F¬™qu√≠cy
 = 
	`RCC_G√´Sy¬∞emClockF¬™q
();

196 
RCC_Clocks
->
HCLK_F¬™qu√≠cy
 = 
	`RCC_G√´HCLKClockF¬™q
(RCC_Clocks->
SYSCLK_F¬™qu√≠cy
);

199 
RCC_Clocks
->
PCLK1_F¬™qu√≠cy
 = 
	`RCC_G√´PCLK1ClockF¬™q
(RCC_Clocks->
HCLK_F¬™qu√≠cy
);

202 
RCC_Clocks
->
PCLK2_F¬™qu√≠cy
 = 
	`RCC_G√´PCLK2ClockF¬™q
(RCC_Clocks->
HCLK_F¬™qu√≠cy
);

203 
	}
}

205 #i‚Ä°
def√∂ed
(
RCC_CFGR2_I2S2SRC
)

213 
u√∂t32_t
 
	$LL_RCC_G√´I2SClockF¬™q
(
u√∂t32_t
 
I2SxSourÀö
)

215 
u√∂t32_t
 
i2s_‚Ä∞equ√≠cy
 = 
LL_RCC_PERIPH_FREQUENCY_NO
;

218 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RCC_I2S_CLKSOURCE
(
I2SxSourÀö
));

221 
	`LL_RCC_G√´I2SClockSourÀö
(
I2SxSourÀö
))

223 
LL_RCC_I2S2_CLKSOURCE_SYSCLK
:

224 
LL_RCC_I2S3_CLKSOURCE_SYSCLK
:

225 
i2s_‚Ä∞equ√≠cy
 = 
	`RCC_G√´Sy¬∞emClockF¬™q
();

228 
LL_RCC_I2S2_CLKSOURCE_PLLI2S_VCO
:

229 
LL_RCC_I2S3_CLKSOURCE_PLLI2S_VCO
:

231 
i2s_‚Ä∞equ√≠cy
 = 
	`RCC_PLLI2S_G√´F¬™qDoma√∂_I2S
() * 2U;

235  
i2s_‚Ä∞equ√≠cy
;

236 
	}
}

239 #i‚Ä°
def√∂ed
(
USB
√ã|| def√∂ed(
USB_OTG_FS
)

247 
u√∂t32_t
 
	$LL_RCC_G√´USBClockF¬™q
(
u√∂t32_t
 
USBxSourÀö
)

249 
u√∂t32_t
 
usb_‚Ä∞equ√≠cy
 = 
LL_RCC_PERIPH_FREQUENCY_NO
;

252 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RCC_USB_CLKSOURCE
(
USBxSourÀö
));

255 
	`LL_RCC_G√´USBClockSourÀö
(
USBxSourÀö
))

257 #i‚Ä°
	`def√∂ed
(
RCC_CFGR_USBPRE
)

258 
LL_RCC_USB_CLKSOURCE_PLL
:

259 i‚Ä°(
	`LL_RCC_PLL_IsR√≥dy
())

261 
usb_‚Ä∞equ√≠cy
 = 
	`RCC_PLL_G√´F¬™qDoma√∂_SYS
();

265 
LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5
:

267 i‚Ä°(
	`LL_RCC_PLL_IsR√≥dy
())

269 
usb_‚Ä∞equ√≠cy
 = (
	`RCC_PLL_G√´F¬™qDoma√∂_SYS
() * 3U) / 2U;

273 #i‚Ä°
	`def√∂ed
(
RCC_CFGR_OTGFSPRE
)

277 
LL_RCC_USB_CLKSOURCE_PLL_DIV_2
:

278 i‚Ä°(
	`LL_RCC_PLL_IsR√≥dy
())

280 
usb_‚Ä∞equ√≠cy
 = 
	`RCC_PLL_G√´F¬™qDoma√∂_SYS
();

286 
LL_RCC_USB_CLKSOURCE_PLL_DIV_3
:

288 i‚Ä°(
	`LL_RCC_PLL_IsR√≥dy
())

290 
usb_‚Ä∞equ√≠cy
 = (
	`RCC_PLL_G√´F¬™qDoma√∂_SYS
() * 2U) / 3U;

296  
usb_‚Ä∞equ√≠cy
;

297 
	}
}

306 
u√∂t32_t
 
	$LL_RCC_G√´ADCClockF¬™q
(
u√∂t32_t
 
ADCxSourÀö
)

308 
u√∂t32_t
 
adc_¬•esÀá√Är
 = 0U;

309 
u√∂t32_t
 
adc_‚Ä∞equ√≠cy
 = 0U;

312 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RCC_ADC_CLKSOURCE
(
ADCxSourÀö
));

315 
adc_¬•esÀá√Är
 = 
	`LL_RCC_G√´ADCClockSourÀö
(
ADCxSourÀö
);

318 
adc_‚Ä∞equ√≠cy
 = 
	`RCC_G√´PCLK2ClockF¬™q
(
	`RCC_G√´HCLKClockF¬™q
(
	`RCC_G√´Sy¬∞emClockF¬™q
()))

319 / (((
adc_¬•esÀá√Är
 >> 
	`POSITION_VAL
(
ADCxSourÀö
)) + 1U) * 2U);

321  
adc_‚Ä∞equ√≠cy
;

322 
	}
}

340 
u√∂t32_t
 
	$RCC_G√´Sy¬∞emClockF¬™q
()

342 
u√∂t32_t
 
‚Ä∞equ√≠cy
 = 0U;

345 
	`LL_RCC_G√´SysClkSourÀö
())

347 
LL_RCC_SYS_CLKSOURCE_STATUS_HSI
:

348 
‚Ä∞equ√≠cy
 = 
HSI_VALUE
;

351 
LL_RCC_SYS_CLKSOURCE_STATUS_HSE
:

352 
‚Ä∞equ√≠cy
 = 
HSE_VALUE
;

355 
LL_RCC_SYS_CLKSOURCE_STATUS_PLL
:

356 
‚Ä∞equ√≠cy
 = 
	`RCC_PLL_G√´F¬™qDoma√∂_SYS
();

360 
‚Ä∞equ√≠cy
 = 
HSI_VALUE
;

364  
‚Ä∞equ√≠cy
;

365 
	}
}

372 
u√∂t32_t
 
	$RCC_G√´HCLKClockF¬™q
(
u√∂t32_t
 
SYSCLK_F¬™qu√≠cy
)

375  
	`__LL_RCC_CALC_HCLK_FREQ
(
SYSCLK_F¬™qu√≠cy
, 
	`LL_RCC_G√´AHBP¬™sÀá√Är
());

376 
	}
}

383 
u√∂t32_t
 
	$RCC_G√´PCLK1ClockF¬™q
(
u√∂t32_t
 
HCLK_F¬™qu√≠cy
)

386  
	`__LL_RCC_CALC_PCLK1_FREQ
(
HCLK_F¬™qu√≠cy
, 
	`LL_RCC_G√´APB1P¬™sÀá√Är
());

387 
	}
}

394 
u√∂t32_t
 
	$RCC_G√´PCLK2ClockF¬™q
(
u√∂t32_t
 
HCLK_F¬™qu√≠cy
)

397  
	`__LL_RCC_CALC_PCLK2_FREQ
(
HCLK_F¬™qu√≠cy
, 
	`LL_RCC_G√´APB2P¬™sÀá√Är
());

398 
	}
}

404 
u√∂t32_t
 
	$RCC_PLL_G√´F¬™qDoma√∂_SYS
()

406 
u√∂t32_t
 
‚àÇl√∂put‚Ä∞eq
 = 0U, 
‚àÇlsourÀö
 = 0U;

411 
‚àÇlsourÀö
 = 
	`LL_RCC_PLL_G√´Ma√∂SourÀö
();

413 
‚àÇlsourÀö
)

415 
LL_RCC_PLLSOURCE_HSI_DIV_2
:

416 
‚àÇl√∂put‚Ä∞eq
 = 
HSI_VALUE
 / 2U;

419 
LL_RCC_PLLSOURCE_HSE
:

420 
‚àÇl√∂put‚Ä∞eq
 = 
HSE_VALUE
 / (
	`LL_RCC_PLL_G√´P¬™div
() + 1U);

423 #i‚Ä°
	`def√∂ed
(
RCC_PLL2_SUPPORT
)

424 
LL_RCC_PLLSOURCE_PLL2
:

425 
‚àÇl√∂put‚Ä∞eq
 = 
	`RCC_PLL2_G√´F¬™qClockF¬™q
(√ã/ (
	`LL_RCC_PLL_G√´P¬™div
() + 1U);

430 
‚àÇl√∂put‚Ä∞eq
 = 
HSI_VALUE
 / 2U;

433  
	`__LL_RCC_CALC_PLLCLK_FREQ
(
‚àÇl√∂put‚Ä∞eq
, 
	`LL_RCC_PLL_G√´Mu‚Ä¶√πliÀát‚Äπ
());

434 
	}
}

436 #i‚Ä°
def√∂ed
(
RCC_PLL2_SUPPORT
)

441 
u√∂t32_t
 
	$RCC_PLL2_G√´F¬™qClockF¬™q
()

443  
	`__LL_RCC_CALC_PLL2CLK_FREQ
(
HSE_VALUE
, 
	`LL_RCC_PLL2_G√´Mu‚Ä¶√πliÀát‚Äπ
(), 
	`LL_RCC_HSE_G√´P¬™div2
());

444 
	}
}

447 #i‚Ä°
def√∂ed
(
RCC_PLLI2S_SUPPORT
)

452 
u√∂t32_t
 
	$RCC_PLLI2S_G√´F¬™qDoma√∂_I2S
()

454  
	`__LL_RCC_CALC_PLLI2SCLK_FREQ
(
HSE_VALUE
, 
	`LL_RCC_PLLI2S_G√´Mu‚Ä¶√πliÀát‚Äπ
(), 
	`LL_RCC_HSE_G√´P¬™div2
());

455 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_rtc.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_œÄc.h
"

24 
	~"¬∞m32f1xx_≈í_c‚Äπ√£x.h
"

25 #ifde‚Ä° 
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
(
RTC
)

48 
	#RTC_ASYNCH_PRESC_DEFAULT
 0x00007FFFU

	)

51 
	#RTC_INITMODE_TIMEOUT
 1000U

	)

52 
	#RTC_SYNCHRO_TIMEOUT
 1000U

	)

62 
	#IS_LL_RTC_ASYNCH_PREDIV
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø0xFFFFFU)

	)

64 
	#IS_LL_RTC_FORMAT
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RTC_FORMAT_BIN
) \

65 || ((
__VALUE__
√ã=Ô£ø
LL_RTC_FORMAT_BCD
))

	)

67 
	#IS_LL_RTC_HOUR24
(
__HOUR__
√ã((__HOUR__√ã<Ô£ø23U)

	)

68 
	#IS_LL_RTC_MINUTES
(
__MINUTES__
√ã((__MINUTES__√ã<Ô£ø59U)

	)

69 
	#IS_LL_RTC_SECONDS
(
__SECONDS__
√ã((__SECONDS__√ã<Ô£ø59U)

	)

70 
	#IS_LL_RTC_CALIB_OUTPUT
(
__OUTPUT__
√ã(((__OUTPUT__√ã=Ô£ø
LL_RTC_CALIB_OUTPUT_NONE
) || \

71 ((
__OUTPUT__
√ã=Ô£ø
LL_RTC_CALIB_OUTPUT_RTCCLOCK
) || \

72 ((
__OUTPUT__
√ã=Ô£ø
LL_RTC_CALIB_OUTPUT_ALARM
) || \

73 ((
__OUTPUT__
√ã=Ô£ø
LL_RTC_CALIB_OUTPUT_SECOND
))

	)

96 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_DeIn√¥
(
RTC_Ty‚â•Def
 *
RTCx
)

98 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

101 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

104 
	`LL_RTC_Di√üb√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTCx
);

107 i‚Ä°(
	`LL_RTC_E¬°√ÆIn√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

109 
	`LL_RTC_Wr√¥eReg
(
RTCx
, 
CNTL
, 0x0000);

110 
	`LL_RTC_Wr√¥eReg
(
RTCx
, 
CNTH
, 0x0000);

111 
	`LL_RTC_Wr√¥eReg
(
RTCx
, 
PRLH
, 0x0000);

112 
	`LL_RTC_Wr√¥eReg
(
RTCx
, 
PRLL
, 0x8000);

113 
	`LL_RTC_Wr√¥eReg
(
RTCx
, 
CRH
, 0x0000);

114 
	`LL_RTC_Wr√¥eReg
(
RTCx
, 
CRL
, 0x0020);

117 
	`LL_RTC_Wr√¥eReg
(
BKP
, 
RTCCR
, 0x00000000U);

118 
	`LL_RTC_Wr√¥eReg
(
BKP
, 
CR
, 0x00000000U);

119 
	`LL_RTC_Wr√¥eReg
(
BKP
, 
CSR
, 0x00000000U);

122 i‚Ä°(
	`LL_RTC_Ex√¥In√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

125 
¬∞¬©us
 = 
	`LL_RTC_Wa√¥F‚ÄπSynchro
(
RTCx
);

128 
	`LL_RTC_C√Ä¬®F≈ìg_RS
(
RTCx
);

131 
	`LL_RTC_E¬´b√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTCx
);

137 
	`LL_RTC_E¬´b√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTCx
);

140  
¬∞¬©us
;

141 
	}
}

157 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_In√¥
(
RTC_Ty‚â•Def
 *
RTCx
, 
LL_RTC_In√¥Ty‚â•Def
 *
RTC_In√¥S√•uÀò
)

159 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

162 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

163 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_ASYNCH_PREDIV
(
RTC_In√¥S√•uÀò
->
AsynchP¬™sÀá√Är
));

164 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_CALIB_OUTPUT
(
RTC_In√¥S√•uÀò
->
OutPutSourÀö
));

166 i‚Ä°(
	`LL_RTC_Wa√¥F‚ÄπSynchro
(
RTCx
√ã!Ô£ø
ERROR
)

169 i‚Ä°(
	`LL_RTC_E¬°√ÆIn√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

172 
	`LL_RTC_C√Ä¬®F≈ìg_ALR
(
RTCx
);

173 
	`LL_RTC_C√Ä¬®F≈ìg_OW
(
RTCx
);

174 
	`LL_RTC_C√Ä¬®F≈ìg_SEC
(
RTCx
);

176 i‚Ä°(
RTC_In√¥S√•uÀò
->
OutPutSourÀö
 !Ô£ø
LL_RTC_CALIB_OUTPUT_NONE
)

179 
	`LL_RTC_TAMPER_Di√üb√Ä
(
BKP
);

182 
	`LL_RTC_S√´Ou√ßutSourÀö
(
BKP
, 
RTC_In√¥S√•uÀò
->
OutPutSourÀö
);

185 
	`LL_RTC_S√´AsynchP¬™sÀá√Är
(
RTCx
, 
RTC_In√¥S√•uÀò
->
AsynchP¬™sÀá√Är
);

188 
	`LL_RTC_Ex√¥In√¥Mode
(
RTCx
);

190 
¬∞¬©us
 = 
SUCCESS
;

193  
¬∞¬©us
;

194 
	}
}

201 
	$LL_RTC_S√•uÀòIn√¥
(
LL_RTC_In√¥Ty‚â•Def
 *
RTC_In√¥S√•uÀò
)

204 
RTC_In√¥S√•uÀò
->
AsynchP¬™sÀá√Är
 = 
RTC_ASYNCH_PRESC_DEFAULT
;

205 
RTC_In√¥S√•uÀò
->
OutPutSourÀö
 = 
LL_RTC_CALIB_OUTPUT_NONE
;

206 
	}
}

222 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_TIME_In√¥
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
RTC_F‚Äπm¬©
, 
LL_RTC_TimeTy‚â•Def
 *
RTC_TimeS√•uÀò
)

224 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

225 
u√∂t32_t
 
cou¬°√Æ_time
 = 0U;

228 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_FORMAT
(
RTC_F‚Äπm¬©
));

231 i‚Ä°(
RTC_F‚Äπm¬©
 =Ô£ø
LL_RTC_FORMAT_BIN
)

233 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_HOUR24
(
RTC_TimeS√•uÀò
->
Hours
));

234 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_MINUTES
(
RTC_TimeS√•uÀò
->
M√∂u√£s
));

235 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_SECONDS
(
RTC_TimeS√•uÀò
->
Sec‚ÅÑds
));

239 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_HOUR24
(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_TimeS√•uÀò
->
Hours
)));

240 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_MINUTES
(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_TimeS√•uÀò
->
M√∂u√£s
)));

241 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_SECONDS
(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_TimeS√•uÀò
->
Sec‚ÅÑds
)));

245 i‚Ä°(
	`LL_RTC_E¬°√ÆIn√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

248 i‚Ä°(
RTC_F‚Äπm¬©
 !Ô£ø
LL_RTC_FORMAT_BIN
)

250 
cou¬°√Æ_time
 = (
u√∂t32_t
)(((u√∂t32_t)
RTC_TimeS√•uÀò
->
Hours
 * 3600U) + \

251 ((
u√∂t32_t
)
RTC_TimeS√•uÀò
->
M√∂u√£s
 * 60U) + \

252 ((
u√∂t32_t
)
RTC_TimeS√•uÀò
->
Sec‚ÅÑds
));

253 
	`LL_RTC_TIME_S√´
(
RTCx
, 
cou¬°√Æ_time
);

257 
cou¬°√Æ_time
 = (((
u√∂t32_t
)(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_TimeS√•uÀò
->
Hours
)) * 3600U) + \

258 ((
u√∂t32_t
)(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_TimeS√•uÀò
->
M√∂u√£s
)) * 60U) + \

259 ((
u√∂t32_t
)(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_TimeS√•uÀò
->
Sec‚ÅÑds
))));

260 
	`LL_RTC_TIME_S√´
(
RTCx
, 
cou¬°√Æ_time
);

262 
¬∞¬©us
 = 
SUCCESS
;

265 
	`LL_RTC_Ex√¥In√¥Mode
(
RTCx
);

267  
¬∞¬©us
;

268 
	}
}

275 
	$LL_RTC_TIME_S√•uÀòIn√¥
(
LL_RTC_TimeTy‚â•Def
 *
RTC_TimeS√•uÀò
)

278 
RTC_TimeS√•uÀò
->
Hours
 = 0U;

279 
RTC_TimeS√•uÀò
->
M√∂u√£s
 = 0U;

280 
RTC_TimeS√•uÀò
->
Sec‚ÅÑds
 = 0U;

281 
	}
}

297 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_ALARM_In√¥
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
RTC_F‚Äπm¬©
, 
LL_RTC_A≈ìrmTy‚â•Def
 *
RTC_A≈ìrmS√•uÀò
)

299 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

300 
u√∂t32_t
 
cou¬°√Æ_√Ü¬®m
 = 0U;

302 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

303 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_FORMAT
(
RTC_F‚Äπm¬©
));

305 i‚Ä°(
RTC_F‚Äπm¬©
 =Ô£ø
LL_RTC_FORMAT_BIN
)

307 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_HOUR24
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Hours
));

308 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_MINUTES
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
M√∂u√£s
));

309 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_SECONDS
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Sec‚ÅÑds
));

313 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_HOUR24
(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Hours
)));

314 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_MINUTES
(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
M√∂u√£s
)));

315 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_RTC_SECONDS
(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Sec‚ÅÑds
)));

319 i‚Ä°(
	`LL_RTC_E¬°√ÆIn√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

322 i‚Ä°(
RTC_F‚Äπm¬©
 !Ô£ø
LL_RTC_FORMAT_BIN
)

324 
cou¬°√Æ_√Ü¬®m
 = (
u√∂t32_t
)(((u√∂t32_t)
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Hours
 * 3600U) + \

325 ((
u√∂t32_t
)
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
M√∂u√£s
 * 60U) + \

326 ((
u√∂t32_t
)
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Sec‚ÅÑds
));

327 
	`LL_RTC_ALARM_S√´
(
RTCx
, 
cou¬°√Æ_√Ü¬®m
);

331 
cou¬°√Æ_√Ü¬®m
 = (((
u√∂t32_t
)(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Hours
)) * 3600U) + \

332 ((
u√∂t32_t
)(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
M√∂u√£s
)) * 60U) + \

333 ((
u√∂t32_t
)(
	`__LL_RTC_CONVERT_BCD2BIN
(
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Sec‚ÅÑds
))));

334 
	`LL_RTC_ALARM_S√´
(
RTCx
, 
cou¬°√Æ_√Ü¬®m
);

336 
¬∞¬©us
 = 
SUCCESS
;

339 
	`LL_RTC_Ex√¥In√¥Mode
(
RTCx
);

341  
¬∞¬©us
;

342 
	}
}

350 
	$LL_RTC_ALARM_S√•uÀòIn√¥
(
LL_RTC_A≈ìrmTy‚â•Def
 *
RTC_A≈ìrmS√•uÀò
)

353 
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Hours
 = 0U;

354 
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
M√∂u√£s
 = 0U;

355 
RTC_A≈ìrmS√•uÀò
->
A≈ìrmTime
.
Sec‚ÅÑds
 = 0U;

356 
	}
}

365 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_E¬°√ÆIn√¥Mode
(
RTC_Ty‚â•Def
 *
RTCx
)

367 
__IO
 
u√∂t32_t
 
timeout
 = 
RTC_INITMODE_TIMEOUT
;

368 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

369 
u√∂t32_t
 
tmp
 = 0U;

372 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

375 
tmp
 = 
	`LL_RTC_IsAÀòiveF≈ìg_RTOF
(
RTCx
);

376 (
timeout
 !Ô£ø0U√ã&& (
tmp
 != 1U))

378 i‚Ä°(
	`LL_SYSTICK_IsAÀòiveCou¬°√ÆF≈ìg
() == 1U)

380 
timeout
 --;

382 
tmp
 = 
	`LL_RTC_IsAÀòiveF≈ìg_RTOF
(
RTCx
);

383 i‚Ä°(
timeout
 == 0U)

385 
¬∞¬©us
 = 
ERROR
;

390 
	`LL_RTC_Di√üb√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTCx
);

392  
¬∞¬©us
;

393 
	}
}

404 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_Ex√¥In√¥Mode
(
RTC_Ty‚â•Def
 *
RTCx
)

406 
__IO
 
u√∂t32_t
 
timeout
 = 
RTC_INITMODE_TIMEOUT
;

407 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

408 
u√∂t32_t
 
tmp
 = 0U;

411 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

414 
	`LL_RTC_E¬´b√ÄWr√¥ePr≈∏eÀòi‚ÅÑ
(
RTCx
);

417 
tmp
 = 
	`LL_RTC_IsAÀòiveF≈ìg_RTOF
(
RTCx
);

418 (
timeout
 !Ô£ø0U√ã&& (
tmp
 != 1U))

420 i‚Ä°(
	`LL_SYSTICK_IsAÀòiveCou¬°√ÆF≈ìg
() == 1U)

422 
timeout
 --;

424 
tmp
 = 
	`LL_RTC_IsAÀòiveF≈ìg_RTOF
(
RTCx
);

425 i‚Ä°(
timeout
 == 0U)

427 
¬∞¬©us
 = 
ERROR
;

430  
¬∞¬©us
;

431 
	}
}

441 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_TIME_S√´Cou¬°√Æ
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
TimeCou¬°√Æ
)

443 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

445 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

448 i‚Ä°(
	`LL_RTC_E¬°√ÆIn√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

450 
	`LL_RTC_TIME_S√´
(
RTCx
, 
TimeCou¬°√Æ
);

451 
¬∞¬©us
 = 
SUCCESS
;

454 
	`LL_RTC_Ex√¥In√¥Mode
(
RTCx
);

456  
¬∞¬©us
;

457 
	}
}

467 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_ALARM_S√´Cou¬°√Æ
(
RTC_Ty‚â•Def
 *
RTCx
, 
u√∂t32_t
 
A≈ìrmCou¬°√Æ
)

469 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

471 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

474 i‚Ä°(
	`LL_RTC_E¬°√ÆIn√¥Mode
(
RTCx
√ã!Ô£ø
ERROR
)

476 
	`LL_RTC_ALARM_S√´
(
RTCx
, 
A≈ìrmCou¬°√Æ
);

477 
¬∞¬©us
 = 
SUCCESS
;

480 
	`LL_RTC_Ex√¥In√¥Mode
(
RTCx
);

482  
¬∞¬©us
;

483 
	}
}

494 
E¬∫‚ÄπS√®tus
 
	$LL_RTC_Wa√¥F‚ÄπSynchro
(
RTC_Ty‚â•Def
 *
RTCx
)

496 
__IO
 
u√∂t32_t
 
timeout
 = 
RTC_SYNCHRO_TIMEOUT
;

497 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

498 
u√∂t32_t
 
tmp
 = 0U;

501 
	`as¬£œÄ_‚àë√∏m
(
	`IS_RTC_ALL_INSTANCE
(
RTCx
));

504 
	`LL_RTC_C√Ä¬®F≈ìg_RS
(
RTCx
);

507 
tmp
 = 
	`LL_RTC_IsAÀòiveF≈ìg_RS
(
RTCx
);

508 (
timeout
 !Ô£ø0U√ã&& (
tmp
 != 0U))

510 i‚Ä°(
	`LL_SYSTICK_IsAÀòiveCou¬°√ÆF≈ìg
() == 1U)

512 
timeout
--;

514 
tmp
 = 
	`LL_RTC_IsAÀòiveF≈ìg_RS
(
RTCx
);

515 i‚Ä°(
timeout
 == 0U)

517 
¬∞¬©us
 = 
ERROR
;

521  (
¬∞¬©us
);

522 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_sdmmc.c

159 
	~"¬∞m32f1xx_h√Ü.h
"

161 #i‚Ä°
def√∂ed
(
SDIO
)

172 #i‚Ä°
def√∂ed
(
HAL_SD_MODULE_ENABLED
√ã|| def√∂ed(
HAL_MMC_MODULE_ENABLED
)

179 
u√∂t32_t
 
SDMMC_G√´CmdE¬∫‚Äπ
(
SDIO_Ty‚â•Def
 *
SDIOx
);

180 
u√∂t32_t
 
SDMMC_G√´CmdRe‚Ä¢1
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t8_t
 
SD_CMD
, u√∂t32_√†
Timeout
);

181 
u√∂t32_t
 
SDMMC_G√´CmdRe‚Ä¢2
(
SDIO_Ty‚â•Def
 *
SDIOx
);

182 
u√∂t32_t
 
SDMMC_G√´CmdRe‚Ä¢3
(
SDIO_Ty‚â•Def
 *
SDIOx
);

183 
u√∂t32_t
 
SDMMC_G√´CmdRe‚Ä¢7
(
SDIO_Ty‚â•Def
 *
SDIOx
);

184 
u√∂t32_t
 
SDMMC_G√´CmdRe‚Ä¢6
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t8_t
 
SD_CMD
, 
u√∂t16_t
 *
pRCA
);

212 
HAL_S√®tusTy‚â•Def
 
	$SDIO_In√¥
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
SDIO_In√¥Ty‚â•Def
 
In√¥
)

214 
u√∂t32_t
 
tm¬•eg
 = 0;

217 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_ALL_INSTANCE
(
SDIOx
));

218 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_EDGE
(
In√¥
.
ClockEdge
));

219 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_BYPASS
(
In√¥
.
ClockBy‚àëss
));

220 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
In√¥
.
ClockPow√ÆSave
));

221 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_BUS_WIDE
(
In√¥
.
BusWide
));

222 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
));

223 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CLKDIV
(
In√¥
.
ClockDiv
));

226 
tm¬•eg
 |Ô£ø(
In√¥
.
ClockEdge
 |\

227 
In√¥
.
ClockBy‚àëss
 |\

228 
In√¥
.
ClockPow√ÆSave
 |\

229 
In√¥
.
BusWide
 |\

230 
In√¥
.
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 |\

231 
In√¥
.
ClockDiv


235 
	`MODIFY_REG
(
SDIOx
->
CLKCR
, 
CLKCR_CLEAR_MASK
, 
tm¬•eg
);

237  
HAL_OK
;

238 
	}
}

265 
u√∂t32_t
 
	$SDIO_R√≥dFIFO
(
SDIO_Ty‚â•Def
 *
SDIOx
)

268  (
SDIOx
->
FIFO
);

269 
	}
}

277 
HAL_S√®tusTy‚â•Def
 
	$SDIO_Wr√¥eFIFO
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 *
pWr√¥eD¬©a
)

280 
SDIOx
->
FIFO
 = *
pWr√¥eD¬©a
;

282  
HAL_OK
;

283 
	}
}

309 
HAL_S√®tusTy‚â•Def
 
	$SDIO_Pow√ÆS√®√£_ON
(
SDIO_Ty‚â•Def
 *
SDIOx
)

312 
SDIOx
->
POWER
 = 
SDIO_POWER_PWRCTRL
;

316 
	`HAL_D√±ay
(2);

318  
HAL_OK
;

319 
	}
}

326 
HAL_S√®tusTy‚â•Def
 
	$SDIO_Pow√ÆS√®√£_OFF
(
SDIO_Ty‚â•Def
 *
SDIOx
)

329 
SDIOx
->
POWER
 = (
u√∂t32_t
)0x00000000;

331  
HAL_OK
;

332 
	}
}

343 
u√∂t32_t
 
	$SDIO_G√´Pow√ÆS√®√£
(
SDIO_Ty‚â•Def
 *
SDIOx
)

345  (
SDIOx
->
POWER
 & 
SDIO_POWER_PWRCTRL
);

346 
	}
}

356 
HAL_S√®tusTy‚â•Def
 
	$SDIO_S√≠dComm‚Ñ¢d
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
SDIO_CmdIn√¥Ty‚â•Def
 *
Comm‚Ñ¢d
)

358 
u√∂t32_t
 
tm¬•eg
 = 0;

361 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CMD_INDEX
(
Comm‚Ñ¢d
->
CmdIndex
));

362 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_RESPONSE
(
Comm‚Ñ¢d
->
Re‚Ä¢‚ÅÑ¬£
));

363 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_WAIT
(
Comm‚Ñ¢d
->
Wa√¥F‚ÄπI¬°√Æru¬±
));

364 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_CPSM
(
Comm‚Ñ¢d
->
CPSM
));

367 
SDIOx
->
ARG
 = 
Comm‚Ñ¢d
->
Argum√≠t
;

370 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)(
Comm‚Ñ¢d
->
CmdIndex
 |\

371 
Comm‚Ñ¢d
->
Re‚Ä¢‚ÅÑ¬£
 |\

372 
Comm‚Ñ¢d
->
Wa√¥F‚ÄπI¬°√Æru¬±
 |\

373 
Comm‚Ñ¢d
->
CPSM
);

376 
	`MODIFY_REG
(
SDIOx
->
CMD
, 
CMD_CLEAR_MASK
, 
tm¬•eg
);

378  
HAL_OK
;

379 
	}
}

386 
u√∂t8_t
 
	$SDIO_G√´Comm‚Ñ¢dRe‚Ä¢‚ÅÑ¬£
(
SDIO_Ty‚â•Def
 *
SDIOx
)

388  (
u√∂t8_t
)(
SDIOx
->
RESPCMD
);

389 
	}
}

403 
u√∂t32_t
 
	$SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Re‚Ä¢‚ÅÑ¬£
)

405 
u√∂t32_t
 
tmp
;

408 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_RESP
(
Re‚Ä¢‚ÅÑ¬£
));

411 
tmp
 = (
u√∂t32_t
)(&(
SDIOx
->
RESP1
)√ã+ 
Re‚Ä¢‚ÅÑ¬£
;

413  (*(
__IO
 
u√∂t32_t
 *√ã
tmp
);

414 
	}
}

424 
HAL_S√®tusTy‚â•Def
 
	$SDIO_C‚ÅÑfigD¬©a
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
SDIO_D¬©aIn√¥Ty‚â•Def
* 
D¬©a
)

426 
u√∂t32_t
 
tm¬•eg
 = 0;

429 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_DATA_LENGTH
(
D¬©a
->
D¬©aL√≠gth
));

430 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_BLOCK_SIZE
(
D¬©a
->
D¬©aBlockSize
));

431 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_TRANSFER_DIR
(
D¬©a
->
T√∏ns‚ÄûrD√∫
));

432 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_TRANSFER_MODE
(
D¬©a
->
T√∏ns‚ÄûrMode
));

433 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_DPSM
(
D¬©a
->
DPSM
));

436 
SDIOx
->
DTIMER
 = 
D¬©a
->
D¬©aTimeOut
;

439 
SDIOx
->
DLEN
 = 
D¬©a
->
D¬©aL√≠gth
;

442 
tm¬•eg
 |Ô£ø(
u√∂t32_t
)(
D¬©a
->
D¬©aBlockSize
 |\

443 
D¬©a
->
T√∏ns‚ÄûrD√∫
 |\

444 
D¬©a
->
T√∏ns‚ÄûrMode
 |\

445 
D¬©a
->
DPSM
);

448 
	`MODIFY_REG
(
SDIOx
->
DCTRL
, 
DCTRL_CLEAR_MASK
, 
tm¬•eg
);

450  
HAL_OK
;

452 
	}
}

459 
u√∂t32_t
 
	$SDIO_G√´D¬©aCou¬°√Æ
(
SDIO_Ty‚â•Def
 *
SDIOx
)

461  (
SDIOx
->
DCOUNT
);

462 
	}
}

469 
u√∂t32_t
 
	$SDIO_G√´FIFOCou¬°
(
SDIO_Ty‚â•Def
 *
SDIOx
)

471  (
SDIOx
->
FIFO
);

472 
	}
}

483 
HAL_S√®tusTy‚â•Def
 
	$SDIO_S√´SDMMCR√≥dWa√¥Mode
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
SDIO_R√≥dWa√¥Mode
)

486 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_R√≥dWa√¥Mode
));

489 
	`MODIFY_REG
(
SDIOx
->
DCTRL
, 
SDIO_DCTRL_RWMOD
, 
SDIO_R√≥dWa√¥Mode
);

491  
HAL_OK
;

492 
	}
}

518 
u√∂t32_t
 
	$SDMMC_CmdBlockL√≠gth
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
BlockSize
)

520 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

521 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

524 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
BlockSize
;

525 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SET_BLOCKLEN
;

526 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

527 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

528 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

529 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

532 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SET_BLOCKLEN
, 
SDIO_CMDTIMEOUT
);

534  
√Ær‚Äπ¬∞¬©e
;

535 
	}
}

542 
u√∂t32_t
 
	$SDMMC_CmdR√≥dS√∂g√ÄBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
R√≥dAdd
)

544 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

545 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

548 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
R√≥dAdd
;

549 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_READ_SINGLE_BLOCK
;

550 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

551 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

552 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

553 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

556 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_READ_SINGLE_BLOCK
, 
SDIO_CMDTIMEOUT
);

558  
√Ær‚Äπ¬∞¬©e
;

559 
	}
}

566 
u√∂t32_t
 
	$SDMMC_CmdR√≥dMu‚Ä¶iBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
R√≥dAdd
)

568 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

569 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

572 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
R√≥dAdd
;

573 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_READ_MULT_BLOCK
;

574 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

575 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

576 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

577 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

580 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_READ_MULT_BLOCK
, 
SDIO_CMDTIMEOUT
);

582  
√Ær‚Äπ¬∞¬©e
;

583 
	}
}

590 
u√∂t32_t
 
	$SDMMC_CmdWr√¥eS√∂g√ÄBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Wr√¥eAdd
)

592 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

593 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

596 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
Wr√¥eAdd
;

597 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_WRITE_SINGLE_BLOCK
;

598 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

599 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

600 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

601 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

604 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_WRITE_SINGLE_BLOCK
, 
SDIO_CMDTIMEOUT
);

606  
√Ær‚Äπ¬∞¬©e
;

607 
	}
}

614 
u√∂t32_t
 
	$SDMMC_CmdWr√¥eMu‚Ä¶iBlock
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Wr√¥eAdd
)

616 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

617 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

620 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
Wr√¥eAdd
;

621 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_WRITE_MULT_BLOCK
;

622 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

623 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

624 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

625 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

628 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_WRITE_MULT_BLOCK
, 
SDIO_CMDTIMEOUT
);

630  
√Ær‚Äπ¬∞¬©e
;

631 
	}
}

638 
u√∂t32_t
 
	$SDMMC_CmdSDE√∏¬£S√®œÄAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
S√®œÄAdd
)

640 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

641 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

644 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
S√®œÄAdd
;

645 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SD_ERASE_GRP_START
;

646 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

647 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

648 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

649 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

652 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SD_ERASE_GRP_START
, 
SDIO_CMDTIMEOUT
);

654  
√Ær‚Äπ¬∞¬©e
;

655 
	}
}

662 
u√∂t32_t
 
	$SDMMC_CmdSDE√∏¬£EndAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
EndAdd
)

664 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

665 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

668 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
EndAdd
;

669 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SD_ERASE_GRP_END
;

670 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

671 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

672 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

673 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

676 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SD_ERASE_GRP_END
, 
SDIO_CMDTIMEOUT
);

678  
√Ær‚Äπ¬∞¬©e
;

679 
	}
}

686 
u√∂t32_t
 
	$SDMMC_CmdE√∏¬£S√®œÄAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
S√®œÄAdd
)

688 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

689 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

692 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
S√®œÄAdd
;

693 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_ERASE_GRP_START
;

694 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

695 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

696 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

697 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

700 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_ERASE_GRP_START
, 
SDIO_CMDTIMEOUT
);

702  
√Ær‚Äπ¬∞¬©e
;

703 
	}
}

710 
u√∂t32_t
 
	$SDMMC_CmdE√∏¬£EndAdd
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
EndAdd
)

712 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

713 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

716 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
EndAdd
;

717 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_ERASE_GRP_END
;

718 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

719 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

720 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

721 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

724 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_ERASE_GRP_END
, 
SDIO_CMDTIMEOUT
);

726  
√Ær‚Äπ¬∞¬©e
;

727 
	}
}

734 
u√∂t32_t
 
	$SDMMC_CmdE√∏¬£
(
SDIO_Ty‚â•Def
 *
SDIOx
)

736 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

737 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

740 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

741 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_ERASE
;

742 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

743 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

744 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

745 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

748 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_ERASE
, 
SDIO_MAXERASETIMEOUT
);

750  
√Ær‚Äπ¬∞¬©e
;

751 
	}
}

758 
u√∂t32_t
 
	$SDMMC_CmdSt‚Ä∫T√∏ns‚Äûr
(
SDIO_Ty‚â•Def
 *
SDIOx
)

760 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

761 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

764 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

765 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_STOP_TRANSMISSION
;

766 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

767 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

768 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

769 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

772 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_STOP_TRANSMISSION
, 
SDIO_STOPTRANSFERTIMEOUT
);

774  
√Ær‚Äπ¬∞¬©e
;

775 
	}
}

783 
u√∂t32_t
 
	$SDMMC_CmdS√±De¬£l
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t64_t
 
Addr
)

785 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

786 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

789 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
Addr
;

790 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SEL_DESEL_CARD
;

791 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

792 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

793 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

794 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

797 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SEL_DESEL_CARD
, 
SDIO_CMDTIMEOUT
);

799  
√Ær‚Äπ¬∞¬©e
;

800 
	}
}

807 
u√∂t32_t
 
	$SDMMC_CmdGoId√ÄS√®√£
(
SDIO_Ty‚â•Def
 *
SDIOx
)

809 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

810 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

812 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

813 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_GO_IDLE_STATE
;

814 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_NO
;

815 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

816 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

817 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

820 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdE¬∫‚Äπ
(
SDIOx
);

822  
√Ær‚Äπ¬∞¬©e
;

823 
	}
}

830 
u√∂t32_t
 
	$SDMMC_CmdO‚â•rC‚ÅÑd
(
SDIO_Ty‚â•Def
 *
SDIOx
)

832 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

833 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

840 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 
SDMMC_CHECK_PATTERN
;

841 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_HS_SEND_EXT_CSD
;

842 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

843 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

844 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

845 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

848 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢7
(
SDIOx
);

850  
√Ær‚Äπ¬∞¬©e
;

851 
	}
}

861 
u√∂t32_t
 
	$SDMMC_CmdA¬µComm‚Ñ¢d
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Argum√≠t
)

863 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

864 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

866 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)Argument;

867 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_APP_CMD
;

868 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

869 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

870 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

871 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

877 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_APP_CMD
, 
SDIO_CMDTIMEOUT
);

879  
√Ær‚Äπ¬∞¬©e
;

880 
	}
}

889 
u√∂t32_t
 
	$SDMMC_CmdA¬µO‚â•rComm‚Ñ¢d
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Argum√≠t
)

891 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

892 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

894 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 
SDMMC_VOLTAGE_WINDOW_SD
 | Argument;

895 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SD_APP_OP_COND
;

896 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

897 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

898 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

899 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

902 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢3
(
SDIOx
);

904  
√Ær‚Äπ¬∞¬©e
;

905 
	}
}

913 
u√∂t32_t
 
	$SDMMC_CmdBusWidth
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
BusWidth
)

915 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

916 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

918 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = (
u√∂t32_t
)
BusWidth
;

919 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_APP_SD_SET_BUSWIDTH
;

920 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

921 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

922 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

923 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

926 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_APP_SD_SET_BUSWIDTH
, 
SDIO_CMDTIMEOUT
);

928  
√Ær‚Äπ¬∞¬©e
;

929 
	}
}

936 
u√∂t32_t
 
	$SDMMC_CmdS√≠dSCR
(
SDIO_Ty‚â•Def
 *
SDIOx
)

938 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

939 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

942 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

943 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SD_APP_SEND_SCR
;

944 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

945 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

946 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

947 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

950 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SD_APP_SEND_SCR
, 
SDIO_CMDTIMEOUT
);

952  
√Ær‚Äπ¬∞¬©e
;

953 
	}
}

960 
u√∂t32_t
 
	$SDMMC_CmdS√≠dCID
(
SDIO_Ty‚â•Def
 *
SDIOx
)

962 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

963 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

966 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

967 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_ALL_SEND_CID
;

968 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_LONG
;

969 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

970 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

971 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

974 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢2
(
SDIOx
);

976  
√Ær‚Äπ¬∞¬©e
;

977 
	}
}

985 
u√∂t32_t
 
	$SDMMC_CmdS√≠dCSD
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Argum√≠t
)

987 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

988 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

991 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = Argument;

992 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SEND_CSD
;

993 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_LONG
;

994 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

995 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

996 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

999 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢2
(
SDIOx
);

1001  
√Ær‚Äπ¬∞¬©e
;

1002 
	}
}

1010 
u√∂t32_t
 
	$SDMMC_CmdS√´R√±Add
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t16_t
 *
pRCA
)

1012 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

1013 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1016 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

1017 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SET_REL_ADDR
;

1018 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

1019 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

1020 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1021 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

1024 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢6
(
SDIOx
, 
SDMMC_CMD_SET_REL_ADDR
, 
pRCA
);

1026  
√Ær‚Äπ¬∞¬©e
;

1027 
	}
}

1035 
u√∂t32_t
 
	$SDMMC_CmdS√≠dS√®tus
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Argum√≠t
)

1037 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

1038 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1040 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = Argument;

1041 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SEND_STATUS
;

1042 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

1043 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

1044 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1045 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

1048 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SEND_STATUS
, 
SDIO_CMDTIMEOUT
);

1050  
√Ær‚Äπ¬∞¬©e
;

1051 
	}
}

1058 
u√∂t32_t
 
	$SDMMC_CmdS√®tusRegi¬∞√Æ
(
SDIO_Ty‚â•Def
 *
SDIOx
)

1060 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

1061 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1063 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = 0U;

1064 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SD_APP_STATUS
;

1065 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

1066 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

1067 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1068 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

1071 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_SD_APP_STATUS
, 
SDIO_CMDTIMEOUT
);

1073  
√Ær‚Äπ¬∞¬©e
;

1074 
	}
}

1083 
u√∂t32_t
 
	$SDMMC_CmdOpC‚ÅÑd√¥i‚ÅÑ
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Argum√≠t
)

1085 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

1086 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1088 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = Argument;

1089 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_SEND_OP_COND
;

1090 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

1091 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

1092 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1093 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

1096 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢3
(
SDIOx
);

1098  
√Ær‚Äπ¬∞¬©e
;

1099 
	}
}

1107 
u√∂t32_t
 
	$SDMMC_CmdSw√¥ch
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t32_t
 
Argum√≠t
)

1109 
SDIO_CmdIn√¥Ty‚â•Def
 
sdmmc_cmd√∂√¥
;

1110 
u√∂t32_t
 
√Ær‚Äπ¬∞¬©e
;

1114 
sdmmc_cmd√∂√¥
.
Argum√≠t
 = Argument;

1115 
sdmmc_cmd√∂√¥
.
CmdIndex
 = 
SDMMC_CMD_HS_SWITCH
;

1116 
sdmmc_cmd√∂√¥
.
Re‚Ä¢‚ÅÑ¬£
 = 
SDIO_RESPONSE_SHORT
;

1117 
sdmmc_cmd√∂√¥
.
Wa√¥F‚ÄπI¬°√Æru¬±
 = 
SDIO_WAIT_NO
;

1118 
sdmmc_cmd√∂√¥
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1119 ()
	`SDIO_S√≠dComm‚Ñ¢d
(
SDIOx
, &
sdmmc_cmd√∂√¥
);

1122 
√Ær‚Äπ¬∞¬©e
 = 
	`SDMMC_G√´CmdRe‚Ä¢1
(
SDIOx
, 
SDMMC_CMD_HS_SWITCH
, 
SDIO_CMDTIMEOUT
);

1124  
√Ær‚Äπ¬∞¬©e
;

1125 
	}
}

1141 
u√∂t32_t
 
	$SDMMC_G√´CmdE¬∫‚Äπ
(
SDIO_Ty‚â•Def
 *
SDIOx
)

1145 
u√∂t32_t
 
cou¬°
 = 
SDIO_CMDTIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 8U /1000U);

1149 i‚Ä°(
cou¬°
-- == 0U)

1151  
SDMMC_ERROR_TIMEOUT
;

1154 }!
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CMDSENT
));

1157 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_STATIC_CMD_FLAGS
);

1159  
SDMMC_ERROR_NONE
;

1160 
	}
}

1168 
u√∂t32_t
 
	$SDMMC_G√´CmdRe‚Ä¢1
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t8_t
 
SD_CMD
, 
u√∂t32_t
 
Timeout
)

1170 
u√∂t32_t
 
¬™‚Ä¢‚ÅÑ¬£_r1
;

1171 
u√∂t32_t
 
¬∞a_¬™g
;

1175 
u√∂t32_t
 
cou¬°
 = 
Timeout
 * (
Sy¬∞emC‚ÄπeClock
 / 8U /1000U);

1179 i‚Ä°(
cou¬°
-- == 0U)

1181  
SDMMC_ERROR_TIMEOUT
;

1183 
¬∞a_¬™g
 = 
SDIOx
->
STA
;

1184 }((
¬∞a_¬™g
 & (
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
)) == 0U) ||

1185 ((
¬∞a_¬™g
 & 
SDIO_FLAG_CMDACT
) != 0U ));

1187 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
))

1189 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
);

1191  
SDMMC_ERROR_CMD_RSP_TIMEOUT
;

1193 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
))

1195 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
);

1197  
SDMMC_ERROR_CMD_CRC_FAIL
;

1205 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_STATIC_CMD_FLAGS
);

1208 if(
	`SDIO_G√´Comm‚Ñ¢dRe‚Ä¢‚ÅÑ¬£
(
SDIOx
√ã!Ô£ø
SD_CMD
)

1210  
SDMMC_ERROR_CMD_CRC_FAIL
;

1214 
¬™‚Ä¢‚ÅÑ¬£_r1
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
SDIOx
, 
SDIO_RESP1
);

1216 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_ERRORBITS
√ã=Ô£ø
SDMMC_ALLZERO
)

1218  
SDMMC_ERROR_NONE
;

1220 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_ADDR_OUT_OF_RANGE
) == SDMMC_OCR_ADDR_OUT_OF_RANGE)

1222  
SDMMC_ERROR_ADDR_OUT_OF_RANGE
;

1224 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_ADDR_MISALIGNED
) == SDMMC_OCR_ADDR_MISALIGNED)

1226  
SDMMC_ERROR_ADDR_MISALIGNED
;

1228 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_BLOCK_LEN_ERR
) == SDMMC_OCR_BLOCK_LEN_ERR)

1230  
SDMMC_ERROR_BLOCK_LEN_ERR
;

1232 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_ERASE_SEQ_ERR
) == SDMMC_OCR_ERASE_SEQ_ERR)

1234  
SDMMC_ERROR_ERASE_SEQ_ERR
;

1236 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_BAD_ERASE_PARAM
) == SDMMC_OCR_BAD_ERASE_PARAM)

1238  
SDMMC_ERROR_BAD_ERASE_PARAM
;

1240 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_WRITE_PROT_VIOLATION
) == SDMMC_OCR_WRITE_PROT_VIOLATION)

1242  
SDMMC_ERROR_WRITE_PROT_VIOLATION
;

1244 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_LOCK_UNLOCK_FAILED
) == SDMMC_OCR_LOCK_UNLOCK_FAILED)

1246  
SDMMC_ERROR_LOCK_UNLOCK_FAILED
;

1248 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_COM_CRC_FAILED
) == SDMMC_OCR_COM_CRC_FAILED)

1250  
SDMMC_ERROR_COM_CRC_FAILED
;

1252 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_ILLEGAL_CMD
) == SDMMC_OCR_ILLEGAL_CMD)

1254  
SDMMC_ERROR_ILLEGAL_CMD
;

1256 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_CARD_ECC_FAILED
) == SDMMC_OCR_CARD_ECC_FAILED)

1258  
SDMMC_ERROR_CARD_ECC_FAILED
;

1260 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_CC_ERROR
) == SDMMC_OCR_CC_ERROR)

1262  
SDMMC_ERROR_CC_ERR
;

1264 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_STREAM_READ_UNDERRUN
) == SDMMC_OCR_STREAM_READ_UNDERRUN)

1266  
SDMMC_ERROR_STREAM_READ_UNDERRUN
;

1268 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_STREAM_WRITE_OVERRUN
) == SDMMC_OCR_STREAM_WRITE_OVERRUN)

1270  
SDMMC_ERROR_STREAM_WRITE_OVERRUN
;

1272 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_CID_CSD_OVERWRITE
) == SDMMC_OCR_CID_CSD_OVERWRITE)

1274  
SDMMC_ERROR_CID_CSD_OVERWRITE
;

1276 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_WP_ERASE_SKIP
) == SDMMC_OCR_WP_ERASE_SKIP)

1278  
SDMMC_ERROR_WP_ERASE_SKIP
;

1280 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_CARD_ECC_DISABLED
) == SDMMC_OCR_CARD_ECC_DISABLED)

1282  
SDMMC_ERROR_CARD_ECC_DISABLED
;

1284 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_ERASE_RESET
) == SDMMC_OCR_ERASE_RESET)

1286  
SDMMC_ERROR_ERASE_RESET
;

1288 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_OCR_AKE_SEQ_ERROR
) == SDMMC_OCR_AKE_SEQ_ERROR)

1290  
SDMMC_ERROR_AKE_SEQ_ERR
;

1294  
SDMMC_ERROR_GENERAL_UNKNOWN_ERR
;

1296 
	}
}

1303 
u√∂t32_t
 
	$SDMMC_G√´CmdRe‚Ä¢2
(
SDIO_Ty‚â•Def
 *
SDIOx
)

1305 
u√∂t32_t
 
¬∞a_¬™g
;

1308 
u√∂t32_t
 
cou¬°
 = 
SDIO_CMDTIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 8U /1000U);

1312 i‚Ä°(
cou¬°
-- == 0U)

1314  
SDMMC_ERROR_TIMEOUT
;

1316 
¬∞a_¬™g
 = 
SDIOx
->
STA
;

1317 }((
¬∞a_¬™g
 & (
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
)) == 0U) ||

1318 ((
¬∞a_¬™g
 & 
SDIO_FLAG_CMDACT
) != 0U ));

1320 i‚Ä°(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
))

1322 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
);

1324  
SDMMC_ERROR_CMD_RSP_TIMEOUT
;

1326 i‚Ä°(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
))

1328 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
);

1330  
SDMMC_ERROR_CMD_CRC_FAIL
;

1336 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_STATIC_CMD_FLAGS
);

1339  
SDMMC_ERROR_NONE
;

1340 
	}
}

1347 
u√∂t32_t
 
	$SDMMC_G√´CmdRe‚Ä¢3
(
SDIO_Ty‚â•Def
 *
SDIOx
)

1349 
u√∂t32_t
 
¬∞a_¬™g
;

1352 
u√∂t32_t
 
cou¬°
 = 
SDIO_CMDTIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 8U /1000U);

1356 i‚Ä°(
cou¬°
-- == 0U)

1358  
SDMMC_ERROR_TIMEOUT
;

1360 
¬∞a_¬™g
 = 
SDIOx
->
STA
;

1361 }((
¬∞a_¬™g
 & (
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
)) == 0U) ||

1362 ((
¬∞a_¬™g
 & 
SDIO_FLAG_CMDACT
) != 0U ));

1364 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
))

1366 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
);

1368  
SDMMC_ERROR_CMD_RSP_TIMEOUT
;

1373 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_STATIC_CMD_FLAGS
);

1376  
SDMMC_ERROR_NONE
;

1377 
	}
}

1387 
u√∂t32_t
 
	$SDMMC_G√´CmdRe‚Ä¢6
(
SDIO_Ty‚â•Def
 *
SDIOx
, 
u√∂t8_t
 
SD_CMD
, 
u√∂t16_t
 *
pRCA
)

1389 
u√∂t32_t
 
¬™‚Ä¢‚ÅÑ¬£_r1
;

1390 
u√∂t32_t
 
¬∞a_¬™g
;

1394 
u√∂t32_t
 
cou¬°
 = 
SDIO_CMDTIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 8U /1000U);

1398 i‚Ä°(
cou¬°
-- == 0U)

1400  
SDMMC_ERROR_TIMEOUT
;

1402 
¬∞a_¬™g
 = 
SDIOx
->
STA
;

1403 }((
¬∞a_¬™g
 & (
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
)) == 0U) ||

1404 ((
¬∞a_¬™g
 & 
SDIO_FLAG_CMDACT
) != 0U ));

1406 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
))

1408 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
);

1410  
SDMMC_ERROR_CMD_RSP_TIMEOUT
;

1412 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
))

1414 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
);

1416  
SDMMC_ERROR_CMD_CRC_FAIL
;

1424 if(
	`SDIO_G√´Comm‚Ñ¢dRe‚Ä¢‚ÅÑ¬£
(
SDIOx
√ã!Ô£ø
SD_CMD
)

1426  
SDMMC_ERROR_CMD_CRC_FAIL
;

1430 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_STATIC_CMD_FLAGS
);

1433 
¬™‚Ä¢‚ÅÑ¬£_r1
 = 
	`SDIO_G√´Re‚Ä¢‚ÅÑ¬£
(
SDIOx
, 
SDIO_RESP1
);

1435 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & (
SDMMC_R6_GENERAL_UNKNOWN_ERROR
 | 
SDMMC_R6_ILLEGAL_CMD
 | 
SDMMC_R6_COM_CRC_FAILED
)√ã=Ô£ø
SDMMC_ALLZERO
)

1437 *
pRCA
 = (
u√∂t16_t
√ã(
¬™‚Ä¢‚ÅÑ¬£_r1
 >> 16);

1439  
SDMMC_ERROR_NONE
;

1441 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_R6_ILLEGAL_CMD
) == SDMMC_R6_ILLEGAL_CMD)

1443  
SDMMC_ERROR_ILLEGAL_CMD
;

1445 if((
¬™‚Ä¢‚ÅÑ¬£_r1
 & 
SDMMC_R6_COM_CRC_FAILED
) == SDMMC_R6_COM_CRC_FAILED)

1447  
SDMMC_ERROR_COM_CRC_FAILED
;

1451  
SDMMC_ERROR_GENERAL_UNKNOWN_ERR
;

1453 
	}
}

1460 
u√∂t32_t
 
	$SDMMC_G√´CmdRe‚Ä¢7
(
SDIO_Ty‚â•Def
 *
SDIOx
)

1462 
u√∂t32_t
 
¬∞a_¬™g
;

1465 
u√∂t32_t
 
cou¬°
 = 
SDIO_CMDTIMEOUT
 * (
Sy¬∞emC‚ÄπeClock
 / 8U /1000U);

1469 i‚Ä°(
cou¬°
-- == 0U)

1471  
SDMMC_ERROR_TIMEOUT
;

1473 
¬∞a_¬™g
 = 
SDIOx
->
STA
;

1474 }((
¬∞a_¬™g
 & (
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
)) == 0U) ||

1475 ((
¬∞a_¬™g
 & 
SDIO_FLAG_CMDACT
) != 0U ));

1477 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
))

1480 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CTIMEOUT
);

1482  
SDMMC_ERROR_CMD_RSP_TIMEOUT
;

1484 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
))

1487 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CCRCFAIL
);

1489  
SDMMC_ERROR_CMD_CRC_FAIL
;

1496 if(
	`__SDIO_GET_FLAG
(
SDIOx
, 
SDIO_FLAG_CMDREND
))

1499 
	`__SDIO_CLEAR_FLAG
(
SDIOx
, 
SDIO_FLAG_CMDREND
);

1502  
SDMMC_ERROR_NONE
;

1504 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_spi.c

19 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

22 
	~"¬∞m32f1xx_≈í_‚Ä¢i.h
"

23 
	~"¬∞m32f1xx_≈í_bus.h
"

24 
	~"¬∞m32f1xx_≈í_rcc.h
"

26 #ifde‚Ä° 
USE_FULL_ASSERT


27 
	~"¬∞m32_as¬£œÄ.h
"

29 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

36 #i‚Ä°
def√∂ed
 (
SPI1
√ã|| def√∂ed (
SPI2
√ã|| def√∂ed (
SPI3
)

50 
	#SPI_CR1_CLEAR_MASK
 (
SPI_CR1_CPHA
 | 
SPI_CR1_CPOL
 | 
SPI_CR1_MSTR
 | \

51 
SPI_CR1_BR
 | 
SPI_CR1_LSBFIRST
 | 
SPI_CR1_SSI
 | \

52 
SPI_CR1_SSM
 | 
SPI_CR1_RXONLY
 | 
SPI_CR1_DFF
 | \

53 
SPI_CR1_CRCNEXT
 | 
SPI_CR1_CRCEN
 | 
SPI_CR1_BIDIOE
 | \

54 
SPI_CR1_BIDIMODE
)

	)

63 
	#IS_LL_SPI_TRANSFER_DIRECTION
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_FULL_DUPLEX
) \

64 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_SIMPLEX_RX
) \

65 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_HALF_DUPLEX_RX
) \

66 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_HALF_DUPLEX_TX
))

	)

68 
	#IS_LL_SPI_MODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_MODE_MASTER
) \

69 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_MODE_SLAVE
))

	)

71 
	#IS_LL_SPI_DATAWIDTH
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_DATAWIDTH_8BIT
) \

72 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_DATAWIDTH_16BIT
))

	)

74 
	#IS_LL_SPI_POLARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_POLARITY_LOW
) \

75 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_POLARITY_HIGH
))

	)

77 
	#IS_LL_SPI_PHASE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_PHASE_1EDGE
) \

78 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_PHASE_2EDGE
))

	)

80 
	#IS_LL_SPI_NSS
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_NSS_SOFT
) \

81 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_NSS_HARD_INPUT
) \

82 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_NSS_HARD_OUTPUT
))

	)

84 
	#IS_LL_SPI_BAUDRATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV2
) \

85 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV4
) \

86 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV8
) \

87 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV16
) \

88 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV32
) \

89 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV64
) \

90 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV128
) \

91 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_BAUDRATEPRESCALER_DIV256
))

	)

93 
	#IS_LL_SPI_BITORDER
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_LSB_FIRST
) \

94 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_MSB_FIRST
))

	)

96 
	#IS_LL_SPI_CRCCALCULATION
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_SPI_CRCCALCULATION_ENABLE
) \

97 || ((
__VALUE__
√ã=Ô£ø
LL_SPI_CRCCALCULATION_DISABLE
))

	)

99 
	#IS_LL_SPI_CRC_POLYNOMIAL
(
__VALUE__
√ã((__VALUE__√ã>Ô£ø0x1U)

	)

123 
E¬∫‚ÄπS√®tus
 
	$LL_SPI_DeIn√¥
(
SPI_Ty‚â•Def
 *
SPIx
)

125 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

128 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_ALL_INSTANCE
(
SPIx
));

130 #i‚Ä°
	`def√∂ed
(
SPI1
)

131 i‚Ä°(
SPIx
 =Ô£ø
SPI1
)

134 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_SPI1
);

137 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_SPI1
);

139 
¬∞¬©us
 = 
SUCCESS
;

142 #i‚Ä°
	`def√∂ed
(
SPI2
)

143 i‚Ä°(
SPIx
 =Ô£ø
SPI2
)

146 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_SPI2
);

149 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_SPI2
);

151 
¬∞¬©us
 = 
SUCCESS
;

154 #i‚Ä°
	`def√∂ed
(
SPI3
)

155 i‚Ä°(
SPIx
 =Ô£ø
SPI3
)

158 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_SPI3
);

161 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_SPI3
);

163 
¬∞¬©us
 = 
SUCCESS
;

167  
¬∞¬©us
;

168 
	}
}

178 
E¬∫‚ÄπS√®tus
 
	$LL_SPI_In√¥
(
SPI_Ty‚â•Def
 *
SPIx
, 
LL_SPI_In√¥Ty‚â•Def
 *
SPI_In√¥S√•uÀò
)

180 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

183 
	`as¬£œÄ_‚àë√∏m
(
	`IS_SPI_ALL_INSTANCE
(
SPIx
));

186 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_TRANSFER_DIRECTION
(
SPI_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
));

187 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_MODE
(
SPI_In√¥S√•uÀò
->
Mode
));

188 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_DATAWIDTH
(
SPI_In√¥S√•uÀò
->
D¬©aWidth
));

189 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_POLARITY
(
SPI_In√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
));

190 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_PHASE
(
SPI_In√¥S√•uÀò
->
ClockPha¬£
));

191 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_NSS
(
SPI_In√¥S√•uÀò
->
NSS
));

192 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_BAUDRATE
(
SPI_In√¥S√•uÀò
->
BaudR¬©e
));

193 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_BITORDER
(
SPI_In√¥S√•uÀò
->
B√¥Ord√Æ
));

194 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_CRCCALCULATION
(
SPI_In√¥S√•uÀò
->
CRCC√Ücu≈ìti‚ÅÑ
));

196 i‚Ä°(
	`LL_SPI_IsE¬´b√Äd
(
SPIx
) == 0x00000000U)

210 
	`MODIFY_REG
(
SPIx
->
CR1
,

211 
SPI_CR1_CLEAR_MASK
,

212 
SPI_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
 | SPI_In√¥S√•uÀò->
Mode
 | SPI_In√¥S√•uÀò->
D¬©aWidth
 |

213 
SPI_In√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
 | SPI_In√¥S√•uÀò->
ClockPha¬£
 |

214 
SPI_In√¥S√•uÀò
->
NSS
 | SPI_In√¥S√•uÀò->
BaudR¬©e
 |

215 
SPI_In√¥S√•uÀò
->
B√¥Ord√Æ
 | SPI_In√¥S√•uÀò->
CRCC√Ücu≈ìti‚ÅÑ
);

221 
	`MODIFY_REG
(
SPIx
->
CR2
, 
SPI_CR2_SSOE
, (
SPI_In√¥S√•uÀò
->
NSS
 >> 16U));

227 i‚Ä°(
SPI_In√¥S√•uÀò
->
CRCC√Ücu≈ìti‚ÅÑ
 =Ô£ø
LL_SPI_CRCCALCULATION_ENABLE
)

229 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_SPI_CRC_POLYNOMIAL
(
SPI_In√¥S√•uÀò
->
CRCPÔ¨Åy
));

230 
	`LL_SPI_S√´CRCPÔ¨Åynom√ºl
(
SPIx
, 
SPI_In√¥S√•uÀò
->
CRCPÔ¨Åy
);

232 
¬∞¬©us
 = 
SUCCESS
;

235 #i‚Ä°
	`def√∂ed
 (
SPI_I2S_SUPPORT
)

237 
	`CLEAR_BIT
(
SPIx
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
);

239  
¬∞¬©us
;

240 
	}
}

248 
	$LL_SPI_S√•uÀòIn√¥
(
LL_SPI_In√¥Ty‚â•Def
 *
SPI_In√¥S√•uÀò
)

251 
SPI_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
 = 
LL_SPI_FULL_DUPLEX
;

252 
SPI_In√¥S√•uÀò
->
Mode
 = 
LL_SPI_MODE_SLAVE
;

253 
SPI_In√¥S√•uÀò
->
D¬©aWidth
 = 
LL_SPI_DATAWIDTH_8BIT
;

254 
SPI_In√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
 = 
LL_SPI_POLARITY_LOW
;

255 
SPI_In√¥S√•uÀò
->
ClockPha¬£
 = 
LL_SPI_PHASE_1EDGE
;

256 
SPI_In√¥S√•uÀò
->
NSS
 = 
LL_SPI_NSS_HARD_INPUT
;

257 
SPI_In√¥S√•uÀò
->
BaudR¬©e
 = 
LL_SPI_BAUDRATEPRESCALER_DIV2
;

258 
SPI_In√¥S√•uÀò
->
B√¥Ord√Æ
 = 
LL_SPI_MSB_FIRST
;

259 
SPI_In√¥S√•uÀò
->
CRCC√Ücu≈ìti‚ÅÑ
 = 
LL_SPI_CRCCALCULATION_DISABLE
;

260 
SPI_In√¥S√•uÀò
->
CRCPÔ¨Åy
 = 7U;

261 
	}
}

275 #i‚Ä°
def√∂ed
(
SPI_I2S_SUPPORT
)

287 
	#I2S_I2SCFGR_CLEAR_MASK
 (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 | \

288 
SPI_I2SCFGR_CKPOL
 | 
SPI_I2SCFGR_I2SSTD
 | \

289 
SPI_I2SCFGR_I2SCFG
 | 
SPI_I2SCFGR_I2SMOD
 )

	)

291 
	#I2S_I2SPR_CLEAR_MASK
 0x0002U

	)

300 
	#IS_LL_I2S_DATAFORMAT
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2S_DATAFORMAT_16B
) \

301 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_DATAFORMAT_16B_EXTENDED
) \

302 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_DATAFORMAT_24B
) \

303 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_DATAFORMAT_32B
))

	)

305 
	#IS_LL_I2S_CPOL
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2S_POLARITY_LOW
) \

306 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_POLARITY_HIGH
))

	)

308 
	#IS_LL_I2S_STANDARD
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2S_STANDARD_PHILIPS
) \

309 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_STANDARD_MSB
) \

310 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_STANDARD_LSB
) \

311 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_STANDARD_PCM_SHORT
) \

312 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_STANDARD_PCM_LONG
))

	)

314 
	#IS_LL_I2S_MODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2S_MODE_SLAVE_TX
) \

315 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_MODE_SLAVE_RX
) \

316 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_MODE_MASTER_TX
) \

317 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_MODE_MASTER_RX
))

	)

319 
	#IS_LL_I2S_MCLK_OUTPUT
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2S_MCLK_OUTPUT_ENABLE
) \

320 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_MCLK_OUTPUT_DISABLE
))

	)

322 
	#IS_LL_I2S_AUDIO_FREQ
(
__VALUE__
√ã((((__VALUE__√ã>Ô£ø
LL_I2S_AUDIOFREQ_8K
) \

323 && ((
__VALUE__
√ã<Ô£ø
LL_I2S_AUDIOFREQ_192K
)) \

324 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_AUDIOFREQ_DEFAULT
))

	)

326 
	#IS_LL_I2S_PRESCALER_LINEAR
(
__VALUE__
√ã((__VALUE__√ã>Ô£ø0x2U)

	)

328 
	#IS_LL_I2S_PRESCALER_PARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_I2S_PRESCALER_PARITY_EVEN
) \

329 || ((
__VALUE__
√ã=Ô£ø
LL_I2S_PRESCALER_PARITY_ODD
))

	)

352 
E¬∫‚ÄπS√®tus
 
	$LL_I2S_DeIn√¥
(
SPI_Ty‚â•Def
 *
SPIx
)

354  
	`LL_SPI_DeIn√¥
(
SPIx
);

355 
	}
}

367 
E¬∫‚ÄπS√®tus
 
	$LL_I2S_In√¥
(
SPI_Ty‚â•Def
 *
SPIx
, 
LL_I2S_In√¥Ty‚â•Def
 *
I2S_In√¥S√•uÀò
)

369 
u√∂t32_t
 
i2sdiv
 = 2U;

370 
u√∂t32_t
 
i2sodd
 = 0U;

371 
u√∂t32_t
 
‚àëck√´√Ängth
 = 1U;

372 
u√∂t32_t
 
tmp
;

373 
LL_RCC_ClocksTy‚â•Def
 
rcc_Àõocks
;

374 
u√∂t32_t
 
sourÀöÀõock
;

375 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

378 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_ALL_INSTANCE
(
SPIx
));

379 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_MODE
(
I2S_In√¥S√•uÀò
->
Mode
));

380 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_STANDARD
(
I2S_In√¥S√•uÀò
->
S√®nd¬®d
));

381 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_DATAFORMAT
(
I2S_In√¥S√•uÀò
->
D¬©aF‚Äπm¬©
));

382 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_MCLK_OUTPUT
(
I2S_In√¥S√•uÀò
->
MCLKOu√ßut
));

383 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_AUDIO_FREQ
(
I2S_In√¥S√•uÀò
->
AudioF¬™q
));

384 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_CPOL
(
I2S_In√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
));

386 i‚Ä°(
	`LL_I2S_IsE¬´b√Äd
(
SPIx
) == 0x00000000U)

397 
	`MODIFY_REG
(
SPIx
->
I2SCFGR
,

398 
I2S_I2SCFGR_CLEAR_MASK
,

399 
I2S_In√¥S√•uÀò
->
Mode
 | I2S_In√¥S√•uÀò->
S√®nd¬®d
 |

400 
I2S_In√¥S√•uÀò
->
D¬©aF‚Äπm¬©
 | I2S_In√¥S√•uÀò->
ClockPÔ¨Å¬®√¥y
 |

401 
SPI_I2SCFGR_I2SMOD
);

412 i‚Ä°(
I2S_In√¥S√•uÀò
->
AudioF¬™q
 !Ô£ø
LL_I2S_AUDIOFREQ_DEFAULT
)

417 i‚Ä°(
I2S_In√¥S√•uÀò
->
D¬©aF‚Äπm¬©
 !Ô£ø
LL_I2S_DATAFORMAT_16B
)

420 
‚àëck√´√Ängth
 = 2U;

424 
	`LL_RCC_G√´Sy¬∞emClocksF¬™q
(&
rcc_Àõocks
);

427 
sourÀöÀõock
 = 
rcc_Àõocks
.
SYSCLK_F¬™qu√≠cy
;

430 i‚Ä°(
I2S_In√¥S√•uÀò
->
MCLKOu√ßut
 =Ô£ø
LL_I2S_MCLK_OUTPUT_ENABLE
)

433 
tmp
 = (((((
sourÀöÀõock
 / 256U√ã* 10U√ã/ 
I2S_In√¥S√•uÀò
->
AudioF¬™q
)) + 5U);

438 
tmp
 = (((((
sourÀöÀõock
 / (32U * 
‚àëck√´√Ängth
)√ã* 10U√ã/ 
I2S_In√¥S√•uÀò
->
AudioF¬™q
)) + 5U);

442 
tmp
 =√Ömp / 10U;

445 
i2sodd
 = (
tmp
 & (
u√∂t16_t
)0x0001U);

448 
i2sdiv
 = ((
tmp
 - 
i2sodd
) / 2U);

451 
i2sodd
 = (i2sodd << 8U);

455 i‚Ä°((
i2sdiv
 < 2U) || (i2sdiv > 0xFFU))

458 
i2sdiv
 = 2U;

459 
i2sodd
 = 0U;

463 
	`WRITE_REG
(
SPIx
->
I2SPR
, 
i2sdiv
 | 
i2sodd
 | 
I2S_In√¥S√•uÀò
->
MCLKOu√ßut
);

465 
¬∞¬©us
 = 
SUCCESS
;

467  
¬∞¬©us
;

468 
	}
}

476 
	$LL_I2S_S√•uÀòIn√¥
(
LL_I2S_In√¥Ty‚â•Def
 *
I2S_In√¥S√•uÀò
)

479 
I2S_In√¥S√•uÀò
->
Mode
 = 
LL_I2S_MODE_SLAVE_TX
;

480 
I2S_In√¥S√•uÀò
->
S√®nd¬®d
 = 
LL_I2S_STANDARD_PHILIPS
;

481 
I2S_In√¥S√•uÀò
->
D¬©aF‚Äπm¬©
 = 
LL_I2S_DATAFORMAT_16B
;

482 
I2S_In√¥S√•uÀò
->
MCLKOu√ßut
 = 
LL_I2S_MCLK_OUTPUT_DISABLE
;

483 
I2S_In√¥S√•uÀò
->
AudioF¬™q
 = 
LL_I2S_AUDIOFREQ_DEFAULT
;

484 
I2S_In√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
 = 
LL_I2S_POLARITY_LOW
;

485 
	}
}

498 
	$LL_I2S_C‚ÅÑfigP¬™sÀá√Är
(
SPI_Ty‚â•Def
 *
SPIx
, 
u√∂t32_t
 
P¬™sÀá√ÄrL√∂√≥r
, u√∂t32_√†
P¬™sÀá√ÄrP¬®√¥y
)

501 
	`as¬£œÄ_‚àë√∏m
(
	`IS_I2S_ALL_INSTANCE
(
SPIx
));

502 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_PRESCALER_LINEAR
(
P¬™sÀá√ÄrL√∂√≥r
));

503 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_I2S_PRESCALER_PARITY
(
P¬™sÀá√ÄrP¬®√¥y
));

506 
	`MODIFY_REG
(
SPIx
->
I2SPR
, 
SPI_I2SPR_I2SDIV
 | 
SPI_I2SPR_ODD
, 
P¬™sÀá√ÄrL√∂√≥r
 | (
P¬™sÀá√ÄrP¬®√¥y
 << 8U));

507 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_tim.c

19 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

22 
	~"¬∞m32f1xx_≈í_tim.h
"

23 
	~"¬∞m32f1xx_≈í_bus.h
"

25 #ifde‚Ä° 
USE_FULL_ASSERT


26 
	~"¬∞m32_as¬£œÄ.h
"

28 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

35 #i‚Ä°
def√∂ed
 (
TIM1
√ã|| def√∂ed (
TIM2
√ã|| def√∂ed (
TIM3
√ã|| def√∂ed (
TIM4
√ã|| def√∂ed (
TIM5
√ã|| def√∂ed (
TIM6
√ã|| def√∂ed (
TIM7
√ã|| def√∂ed (
TIM8
√ã|| def√∂ed (
TIM9
√ã|| def√∂ed (
TIM10
√ã|| def√∂ed (
TIM11
√ã|| def√∂ed (
TIM12
√ã|| def√∂ed (
TIM13
√ã|| def√∂ed (
TIM14
√ã|| def√∂ed (
TIM15
√ã|| def√∂ed (
TIM16
√ã|| def√∂ed (
TIM17
)

48 
	#IS_LL_TIM_COUNTERMODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_COUNTERMODE_UP
) \

49 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_COUNTERMODE_DOWN
) \

50 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_COUNTERMODE_CENTER_UP
) \

51 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_COUNTERMODE_CENTER_DOWN
) \

52 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_COUNTERMODE_CENTER_UP_DOWN
))

	)

54 
	#IS_LL_TIM_CLOCKDIVISION
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_CLOCKDIVISION_DIV1
) \

55 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_CLOCKDIVISION_DIV2
) \

56 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_CLOCKDIVISION_DIV4
))

	)

58 
	#IS_LL_TIM_OCMODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_OCMODE_FROZEN
) \

59 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_ACTIVE
) \

60 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_INACTIVE
) \

61 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_TOGGLE
) \

62 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_FORCED_INACTIVE
) \

63 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_FORCED_ACTIVE
) \

64 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_PWM1
) \

65 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCMODE_PWM2
))

	)

67 
	#IS_LL_TIM_OCSTATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_OCSTATE_DISABLE
) \

68 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCSTATE_ENABLE
))

	)

70 
	#IS_LL_TIM_OCPOLARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_OCPOLARITY_HIGH
) \

71 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCPOLARITY_LOW
))

	)

73 
	#IS_LL_TIM_OCIDLESTATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_OCIDLESTATE_LOW
) \

74 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OCIDLESTATE_HIGH
))

	)

76 
	#IS_LL_TIM_ACTIVEINPUT
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_ACTIVEINPUT_DIRECTTI
) \

77 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ACTIVEINPUT_INDIRECTTI
) \

78 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ACTIVEINPUT_TRC
))

	)

80 
	#IS_LL_TIM_ICPSC
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_ICPSC_DIV1
) \

81 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ICPSC_DIV2
) \

82 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ICPSC_DIV4
) \

83 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ICPSC_DIV8
))

	)

85 
	#IS_LL_TIM_IC_FILTER
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV1
) \

86 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV1_N2
) \

87 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV1_N4
) \

88 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV1_N8
) \

89 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV2_N6
) \

90 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV2_N8
) \

91 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV4_N6
) \

92 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV4_N8
) \

93 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV8_N6
) \

94 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV8_N8
) \

95 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV16_N5
) \

96 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV16_N6
) \

97 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV16_N8
) \

98 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV32_N5
) \

99 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV32_N6
) \

100 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_FILTER_FDIV32_N8
))

	)

102 
	#IS_LL_TIM_IC_POLARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_IC_POLARITY_RISING
) \

103 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_POLARITY_FALLING
))

	)

105 
	#IS_LL_TIM_ENCODERMODE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_ENCODERMODE_X2_TI1
) \

106 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ENCODERMODE_X2_TI2
) \

107 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_ENCODERMODE_X4_TI12
))

	)

109 
	#IS_LL_TIM_IC_POLARITY_ENCODER
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_IC_POLARITY_RISING
) \

110 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_IC_POLARITY_FALLING
))

	)

112 
	#IS_LL_TIM_OSSR_STATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_OSSR_DISABLE
) \

113 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OSSR_ENABLE
))

	)

115 
	#IS_LL_TIM_OSSI_STATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_OSSI_DISABLE
) \

116 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_OSSI_ENABLE
))

	)

118 
	#IS_LL_TIM_LOCK_LEVEL
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_LOCKLEVEL_OFF
) \

119 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_LOCKLEVEL_1
) \

120 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_LOCKLEVEL_2
) \

121 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_LOCKLEVEL_3
))

	)

123 
	#IS_LL_TIM_BREAK_STATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_BREAK_DISABLE
) \

124 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_BREAK_ENABLE
))

	)

126 
	#IS_LL_TIM_BREAK_POLARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_BREAK_POLARITY_LOW
) \

127 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_BREAK_POLARITY_HIGH
))

	)

129 
	#IS_LL_TIM_AUTOMATIC_OUTPUT_STATE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_TIM_AUTOMATICOUTPUT_DISABLE
) \

130 || ((
__VALUE__
√ã=Ô£ø
LL_TIM_AUTOMATICOUTPUT_ENABLE
))

	)

140 
E¬∫‚ÄπS√®tus
 
OC1C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
);

141 
E¬∫‚ÄπS√®tus
 
OC2C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
);

142 
E¬∫‚ÄπS√®tus
 
OC3C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
);

143 
E¬∫‚ÄπS√®tus
 
OC4C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
);

144 
E¬∫‚ÄπS√®tus
 
IC1C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
);

145 
E¬∫‚ÄπS√®tus
 
IC2C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
);

146 
E¬∫‚ÄπS√®tus
 
IC3C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
);

147 
E¬∫‚ÄπS√®tus
 
IC4C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
);

168 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_DeIn√¥
(
TIM_Ty‚â•Def
 *
TIMx
)

170 
E¬∫‚ÄπS√®tus
 
¬™su‚Ä¶
 = 
SUCCESS
;

173 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
TIMx
));

175 i‚Ä°(
TIMx
 =Ô£ø
TIM2
)

177 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM2
);

178 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM2
);

180 #i‚Ä°
	`def√∂ed
(
TIM1
)

181 i‚Ä°(
TIMx
 =Ô£ø
TIM1
)

183 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM1
);

184 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM1
);

187 #i‚Ä°
	`def√∂ed
(
TIM3
)

188 i‚Ä°(
TIMx
 =Ô£ø
TIM3
)

190 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM3
);

191 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM3
);

194 #i‚Ä°
	`def√∂ed
(
TIM4
)

195 i‚Ä°(
TIMx
 =Ô£ø
TIM4
)

197 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM4
);

198 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM4
);

201 #i‚Ä°
	`def√∂ed
(
TIM5
)

202 i‚Ä°(
TIMx
 =Ô£ø
TIM5
)

204 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM5
);

205 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM5
);

208 #i‚Ä°
	`def√∂ed
(
TIM6
)

209 i‚Ä°(
TIMx
 =Ô£ø
TIM6
)

211 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM6
);

212 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM6
);

215 #i‚Ä°
	`def√∂ed
 (
TIM7
)

216 i‚Ä°(
TIMx
 =Ô£ø
TIM7
)

218 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM7
);

219 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM7
);

222 #i‚Ä°
	`def√∂ed
(
TIM8
)

223 i‚Ä°(
TIMx
 =Ô£ø
TIM8
)

225 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM8
);

226 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM8
);

229 #i‚Ä°
	`def√∂ed
(
TIM9
)

230 i‚Ä°(
TIMx
 =Ô£ø
TIM9
)

232 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM9
);

233 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM9
);

236 #i‚Ä°
	`def√∂ed
(
TIM10
)

237 i‚Ä°(
TIMx
 =Ô£ø
TIM10
)

239 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM10
);

240 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM10
);

243 #i‚Ä°
	`def√∂ed
(
TIM11
)

244 i‚Ä°(
TIMx
 =Ô£ø
TIM11
)

246 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM11
);

247 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM11
);

250 #i‚Ä°
	`def√∂ed
(
TIM12
)

251 i‚Ä°(
TIMx
 =Ô£ø
TIM12
)

253 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM12
);

254 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM12
);

257 #i‚Ä°
	`def√∂ed
(
TIM13
)

258 i‚Ä°(
TIMx
 =Ô£ø
TIM13
)

260 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM13
);

261 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM13
);

264 #i‚Ä°
	`def√∂ed
(
TIM14
)

265 i‚Ä°(
TIMx
 =Ô£ø
TIM14
)

267 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_TIM14
);

268 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_TIM14
);

271 #i‚Ä°
	`def√∂ed
(
TIM15
)

272 i‚Ä°(
TIMx
 =Ô£ø
TIM15
)

274 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM15
);

275 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM15
);

278 #i‚Ä°
	`def√∂ed
(
TIM16
)

279 i‚Ä°(
TIMx
 =Ô£ø
TIM16
)

281 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM16
);

282 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM16
);

285 #i‚Ä°
	`def√∂ed
(
TIM17
)

286 i‚Ä°(
TIMx
 =Ô£ø
TIM17
)

288 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_TIM17
);

289 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_TIM17
);

294 
¬™su‚Ä¶
 = 
ERROR
;

297  
¬™su‚Ä¶
;

298 
	}
}

306 
	$LL_TIM_S√•uÀòIn√¥
(
LL_TIM_In√¥Ty‚â•Def
 *
TIM_In√¥S√•uÀò
)

309 
TIM_In√¥S√•uÀò
->
P¬™sÀá√Är
 = (
u√∂t16_t
)0x0000;

310 
TIM_In√¥S√•uÀò
->
Cou¬°√ÆMode
 = 
LL_TIM_COUNTERMODE_UP
;

311 
TIM_In√¥S√•uÀò
->
Aut‚Äπ√±Ô¨Çd
 = 0xFFFFFFFFU;

312 
TIM_In√¥S√•uÀò
->
ClockDivisi‚ÅÑ
 = 
LL_TIM_CLOCKDIVISION_DIV1
;

313 
TIM_In√¥S√•uÀò
->
R√Ø√´√¥i‚ÅÑCou¬°√Æ
 = 0x00000000U;

314 
	}
}

324 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_In√¥Ty‚â•Def
 *
TIM_In√¥S√•uÀò
)

326 
u√∂t32_t
 
tmp¬∏1
;

329 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_INSTANCE
(
TIMx
));

330 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_COUNTERMODE
(
TIM_In√¥S√•uÀò
->
Cou¬°√ÆMode
));

331 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_CLOCKDIVISION
(
TIM_In√¥S√•uÀò
->
ClockDivisi‚ÅÑ
));

333 
tmp¬∏1
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CR1
);

335 i‚Ä°(
	`IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
TIMx
))

338 
	`MODIFY_REG
(
tmp¬∏1
, (
TIM_CR1_DIR
 | 
TIM_CR1_CMS
), 
TIM_In√¥S√•uÀò
->
Cou¬°√ÆMode
);

341 i‚Ä°(
	`IS_TIM_CLOCK_DIVISION_INSTANCE
(
TIMx
))

344 
	`MODIFY_REG
(
tmp¬∏1
, 
TIM_CR1_CKD
, 
TIM_In√¥S√•uÀò
->
ClockDivisi‚ÅÑ
);

348 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CR1
, 
tmp¬∏1
);

351 
	`LL_TIM_S√´AutoR√±Ô¨Çd
(
TIMx
, 
TIM_In√¥S√•uÀò
->
Aut‚Äπ√±Ô¨Çd
);

354 
	`LL_TIM_S√´P¬™sÀá√Är
(
TIMx
, 
TIM_In√¥S√•uÀò
->
P¬™sÀá√Är
);

356 i‚Ä°(
	`IS_TIM_REPETITION_COUNTER_INSTANCE
(
TIMx
))

359 
	`LL_TIM_S√´R√Ø√´√¥i‚ÅÑCou¬°√Æ
(
TIMx
, 
TIM_In√¥S√•uÀò
->
R√Ø√´√¥i‚ÅÑCou¬°√Æ
);

364 
	`LL_TIM_G√≠√Æ¬©eEv√≠t_UPDATE
(
TIMx
);

366  
SUCCESS
;

367 
	}
}

375 
	$LL_TIM_OC_S√•uÀòIn√¥
(
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OC_In√¥S√•uÀò
)

378 
TIM_OC_In√¥S√•uÀò
->
OCMode
 = 
LL_TIM_OCMODE_FROZEN
;

379 
TIM_OC_In√¥S√•uÀò
->
OCS√®√£
 = 
LL_TIM_OCSTATE_DISABLE
;

380 
TIM_OC_In√¥S√•uÀò
->
OCNS√®√£
 = 
LL_TIM_OCSTATE_DISABLE
;

381 
TIM_OC_In√¥S√•uÀò
->
Com‚àë¬™V√Üue
 = 0x00000000U;

382 
TIM_OC_In√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
 = 
LL_TIM_OCPOLARITY_HIGH
;

383 
TIM_OC_In√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
 = 
LL_TIM_OCPOLARITY_HIGH
;

384 
TIM_OC_In√¥S√•uÀò
->
OCId√ÄS√®√£
 = 
LL_TIM_OCIDLESTATE_LOW
;

385 
TIM_OC_In√¥S√•uÀò
->
OCNId√ÄS√®√£
 = 
LL_TIM_OCIDLESTATE_LOW
;

386 
	}
}

401 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_OC_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OC_In√¥S√•uÀò
)

403 
E¬∫‚ÄπS√®tus
 
¬™su‚Ä¶
 = 
ERROR
;

405 
Ch‚Ñ¢‚àöl
)

407 
LL_TIM_CHANNEL_CH1
:

408 
¬™su‚Ä¶
 = 
	`OC1C‚ÅÑfig
(
TIMx
, 
TIM_OC_In√¥S√•uÀò
);

410 
LL_TIM_CHANNEL_CH2
:

411 
¬™su‚Ä¶
 = 
	`OC2C‚ÅÑfig
(
TIMx
, 
TIM_OC_In√¥S√•uÀò
);

413 
LL_TIM_CHANNEL_CH3
:

414 
¬™su‚Ä¶
 = 
	`OC3C‚ÅÑfig
(
TIMx
, 
TIM_OC_In√¥S√•uÀò
);

416 
LL_TIM_CHANNEL_CH4
:

417 
¬™su‚Ä¶
 = 
	`OC4C‚ÅÑfig
(
TIMx
, 
TIM_OC_In√¥S√•uÀò
);

423  
¬™su‚Ä¶
;

424 
	}
}

432 
	$LL_TIM_IC_S√•uÀòIn√¥
(
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
)

435 
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
 = 
LL_TIM_IC_POLARITY_RISING
;

436 
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
 = 
LL_TIM_ACTIVEINPUT_DIRECTTI
;

437 
TIM_ICIn√¥S√•uÀò
->
ICP¬™sÀá√Är
 = 
LL_TIM_ICPSC_DIV1
;

438 
TIM_ICIn√¥S√•uÀò
->
ICF√ª√£r
 = 
LL_TIM_IC_FILTER_FDIV1
;

439 
	}
}

454 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_IC_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
u√∂t32_t
 
Ch‚Ñ¢‚àöl
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_IC_In√¥S√•uÀò
)

456 
E¬∫‚ÄπS√®tus
 
¬™su‚Ä¶
 = 
ERROR
;

458 
Ch‚Ñ¢‚àöl
)

460 
LL_TIM_CHANNEL_CH1
:

461 
¬™su‚Ä¶
 = 
	`IC1C‚ÅÑfig
(
TIMx
, 
TIM_IC_In√¥S√•uÀò
);

463 
LL_TIM_CHANNEL_CH2
:

464 
¬™su‚Ä¶
 = 
	`IC2C‚ÅÑfig
(
TIMx
, 
TIM_IC_In√¥S√•uÀò
);

466 
LL_TIM_CHANNEL_CH3
:

467 
¬™su‚Ä¶
 = 
	`IC3C‚ÅÑfig
(
TIMx
, 
TIM_IC_In√¥S√•uÀò
);

469 
LL_TIM_CHANNEL_CH4
:

470 
¬™su‚Ä¶
 = 
	`IC4C‚ÅÑfig
(
TIMx
, 
TIM_IC_In√¥S√•uÀò
);

476  
¬™su‚Ä¶
;

477 
	}
}

484 
	$LL_TIM_ENCODER_S√•uÀòIn√¥
(
LL_TIM_ENCODER_In√¥Ty‚â•Def
 *
TIM_Encod√ÆIn√¥S√•uÀò
)

487 
TIM_Encod√ÆIn√¥S√•uÀò
->
Encod√ÆMode
 = 
LL_TIM_ENCODERMODE_X2_TI1
;

488 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1PÔ¨Å¬®√¥y
 = 
LL_TIM_IC_POLARITY_RISING
;

489 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1AÀòiveI‚âàut
 = 
LL_TIM_ACTIVEINPUT_DIRECTTI
;

490 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1P¬™sÀá√Är
 = 
LL_TIM_ICPSC_DIV1
;

491 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1F√ª√£r
 = 
LL_TIM_IC_FILTER_FDIV1
;

492 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2PÔ¨Å¬®√¥y
 = 
LL_TIM_IC_POLARITY_RISING
;

493 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2AÀòiveI‚âàut
 = 
LL_TIM_ACTIVEINPUT_DIRECTTI
;

494 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2P¬™sÀá√Är
 = 
LL_TIM_ICPSC_DIV1
;

495 
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2F√ª√£r
 = 
LL_TIM_IC_FILTER_FDIV1
;

496 
	}
}

506 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_ENCODER_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_ENCODER_In√¥Ty‚â•Def
 *
TIM_Encod√ÆIn√¥S√•uÀò
)

508 
u√∂t32_t
 
tmpccmr1
;

509 
u√∂t32_t
 
tmpcÀör
;

512 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
TIMx
));

513 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ENCODERMODE
(
TIM_Encod√ÆIn√¥S√•uÀò
->
Encod√ÆMode
));

514 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY_ENCODER
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1PÔ¨Å¬®√¥y
));

515 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ACTIVEINPUT
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1AÀòiveI‚âàut
));

516 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1P¬™sÀá√Är
));

517 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1F√ª√£r
));

518 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY_ENCODER
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2PÔ¨Å¬®√¥y
));

519 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ACTIVEINPUT
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2AÀòiveI‚âàut
));

520 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2P¬™sÀá√Är
));

521 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2F√ª√£r
));

524 
TIMx
->
CCER
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
);

527 
tmpccmr1
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCMR1
);

530 
tmpcÀör
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCER
);

533 
tmpccmr1
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC1PSC
);

534 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1AÀòiveI‚âàut
 >> 16U);

535 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1F√ª√£r
 >> 16U);

536 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1P¬™sÀá√Är
 >> 16U);

539 
tmpccmr1
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCMR1_CC2S
 | 
TIM_CCMR1_IC2F
 | 
TIM_CCMR1_IC2PSC
);

540 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2AÀòiveI‚âàut
 >> 8U);

541 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2F√ª√£r
 >> 8U);

542 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2P¬™sÀá√Är
 >> 8U);

545 
tmpcÀör
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
 | 
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

546 
tmpcÀör
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC1PÔ¨Å¬®√¥y
);

547 
tmpcÀör
 |Ô£ø(
u√∂t32_t
)(
TIM_Encod√ÆIn√¥S√•uÀò
->
IC2PÔ¨Å¬®√¥y
 << 4U);

548 
tmpcÀör
 |Ô£ø(
u√∂t32_t
)(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
);

551 
	`LL_TIM_S√´Encod√ÆMode
(
TIMx
, 
TIM_Encod√ÆIn√¥S√•uÀò
->
Encod√ÆMode
);

554 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCMR1
, 
tmpccmr1
);

557 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCER
, 
tmpcÀör
);

559  
SUCCESS
;

560 
	}
}

568 
	$LL_TIM_HALLSENSOR_S√•uÀòIn√¥
(
LL_TIM_HALLSENSOR_In√¥Ty‚â•Def
 *
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
)

571 
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1PÔ¨Å¬®√¥y
 = 
LL_TIM_IC_POLARITY_RISING
;

572 
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1P¬™sÀá√Är
 = 
LL_TIM_ICPSC_DIV1
;

573 
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1F√ª√£r
 = 
LL_TIM_IC_FILTER_FDIV1
;

574 
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
Commu√®ti‚ÅÑD√±ay
 = 0U;

575 
	}
}

595 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_HALLSENSOR_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_HALLSENSOR_In√¥Ty‚â•Def
 *
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
)

597 
u√∂t32_t
 
tmp¬∏2
;

598 
u√∂t32_t
 
tmpccmr1
;

599 
u√∂t32_t
 
tmpcÀör
;

600 
u√∂t32_t
 
tmpsm¬∏
;

603 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
TIMx
));

604 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY_ENCODER
(
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1PÔ¨Å¬®√¥y
));

605 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1P¬™sÀá√Är
));

606 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1F√ª√£r
));

609 
TIMx
->
CCER
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
);

612 
tmp¬∏2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CR2
);

615 
tmpccmr1
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCMR1
);

618 
tmpcÀör
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCER
);

621 
tmpsm¬∏
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
SMCR
);

624 
tmp¬∏2
 |Ô£ø
TIM_CR2_TI1S
;

627 
tmp¬∏2
 |Ô£ø
LL_TIM_TRGO_OC2REF
;

630 
tmpsm¬∏
 &Ô£ø(
u√∂t32_t
)~(
TIM_SMCR_TS
 | 
TIM_SMCR_SMS
);

631 
tmpsm¬∏
 |Ô£ø
LL_TIM_TS_TI1F_ED
;

632 
tmpsm¬∏
 |Ô£ø
LL_TIM_SLAVEMODE_RESET
;

635 
tmpccmr1
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC1PSC
);

636 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
LL_TIM_ACTIVEINPUT_TRC
 >> 16U);

637 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1F√ª√£r
 >> 16U);

638 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1P¬™sÀá√Är
 >> 16U);

641 
tmpccmr1
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCMR1_OC2M
 | 
TIM_CCMR1_OC2FE
 | 
TIM_CCMR1_OC2PE
 | 
TIM_CCMR1_OC2CE
);

642 
tmpccmr1
 |Ô£ø(
u√∂t32_t
)(
LL_TIM_OCMODE_PWM2
 << 8U);

645 
tmpcÀör
 &Ô£ø(
u√∂t32_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
 | 
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

646 
tmpcÀör
 |Ô£ø(
u√∂t32_t
)(
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
IC1PÔ¨Å¬®√¥y
);

647 
tmpcÀör
 |Ô£ø(
u√∂t32_t
)(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
);

650 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CR2
, 
tmp¬∏2
);

653 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
SMCR
, 
tmpsm¬∏
);

656 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCMR1
, 
tmpccmr1
);

659 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCER
, 
tmpcÀör
);

662 
	`LL_TIM_OC_S√´Com‚àë¬™CH2
(
TIMx
, 
TIM_H√ÜlS√≠s‚ÄπIn√¥S√•uÀò
->
Commu√®ti‚ÅÑD√±ay
);

664  
SUCCESS
;

665 
	}
}

673 
	$LL_TIM_BDTR_S√•uÀòIn√¥
(
LL_TIM_BDTR_In√¥Ty‚â•Def
 *
TIM_BDTRIn√¥S√•uÀò
)

676 
TIM_BDTRIn√¥S√•uÀò
->
OSSRS√®√£
 = 
LL_TIM_OSSR_DISABLE
;

677 
TIM_BDTRIn√¥S√•uÀò
->
OSSIS√®√£
 = 
LL_TIM_OSSI_DISABLE
;

678 
TIM_BDTRIn√¥S√•uÀò
->
LockLev√±
 = 
LL_TIM_LOCKLEVEL_OFF
;

679 
TIM_BDTRIn√¥S√•uÀò
->
D√≥dTime
 = (
u√∂t8_t
)0x00;

680 
TIM_BDTRIn√¥S√•uÀò
->
B¬™akS√®√£
 = 
LL_TIM_BREAK_DISABLE
;

681 
TIM_BDTRIn√¥S√•uÀò
->
B¬™akPÔ¨Å¬®√¥y
 = 
LL_TIM_BREAK_POLARITY_LOW
;

682 
TIM_BDTRIn√¥S√•uÀò
->
Autom¬©icOu√ßut
 = 
LL_TIM_AUTOMATICOUTPUT_DISABLE
;

683 
	}
}

698 
E¬∫‚ÄπS√®tus
 
	$LL_TIM_BDTR_In√¥
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_BDTR_In√¥Ty‚â•Def
 *
TIM_BDTRIn√¥S√•uÀò
)

700 
u√∂t32_t
 
tmpbd√•
 = 0;

703 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
));

704 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OSSR_STATE
(
TIM_BDTRIn√¥S√•uÀò
->
OSSRS√®√£
));

705 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OSSI_STATE
(
TIM_BDTRIn√¥S√•uÀò
->
OSSIS√®√£
));

706 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_LOCK_LEVEL
(
TIM_BDTRIn√¥S√•uÀò
->
LockLev√±
));

707 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_BREAK_STATE
(
TIM_BDTRIn√¥S√•uÀò
->
B¬™akS√®√£
));

708 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_BREAK_POLARITY
(
TIM_BDTRIn√¥S√•uÀò
->
B¬™akPÔ¨Å¬®√¥y
));

709 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRIn√¥S√•uÀò
->
Autom¬©icOu√ßut
));

715 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_DTG
, 
TIM_BDTRIn√¥S√•uÀò
->
D√≥dTime
);

716 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_LOCK
, 
TIM_BDTRIn√¥S√•uÀò
->
LockLev√±
);

717 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_OSSI
, 
TIM_BDTRIn√¥S√•uÀò
->
OSSIS√®√£
);

718 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_OSSR
, 
TIM_BDTRIn√¥S√•uÀò
->
OSSRS√®√£
);

719 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_BKE
, 
TIM_BDTRIn√¥S√•uÀò
->
B¬™akS√®√£
);

720 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_BKP
, 
TIM_BDTRIn√¥S√•uÀò
->
B¬™akPÔ¨Å¬®√¥y
);

721 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_AOE
, 
TIM_BDTRIn√¥S√•uÀò
->
Autom¬©icOu√ßut
);

722 
	`MODIFY_REG
(
tmpbd√•
, 
TIM_BDTR_MOE
, 
TIM_BDTRIn√¥S√•uÀò
->
Autom¬©icOu√ßut
);

725 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
BDTR
, 
tmpbd√•
);

727  
SUCCESS
;

728 
	}
}

749 
E¬∫‚ÄπS√®tus
 
	$OC1C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
)

751 
u√∂t32_t
 
tmpccmr1
;

752 
u√∂t32_t
 
tmpcÀör
;

753 
u√∂t32_t
 
tmp¬∏2
;

756 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
TIMx
));

757 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCMODE
(
TIM_OCIn√¥S√•uÀò
->
OCMode
));

758 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
));

759 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
));

760 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
));

761 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
));

764 
	`CLEAR_BIT
(
TIMx
->
CCER
, 
TIM_CCER_CC1E
);

767 
tmpcÀör
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCER
);

770 
tmp¬∏2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CR2
);

773 
tmpccmr1
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCMR1
);

776 
	`CLEAR_BIT
(
tmpccmr1
, 
TIM_CCMR1_CC1S
);

779 
	`MODIFY_REG
(
tmpccmr1
, 
TIM_CCMR1_OC1M
, 
TIM_OCIn√¥S√•uÀò
->
OCMode
);

782 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC1P
, 
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
);

785 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC1E
, 
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
);

787 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

789 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
));

790 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
));

793 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC1NP
, 
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
 << 2U);

796 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC1NE
, 
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
 << 2U);

799 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS1
, 
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
);

802 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS1N
, 
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
 << 1U);

806 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CR2
, 
tmp¬∏2
);

809 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCMR1
, 
tmpccmr1
);

812 
	`LL_TIM_OC_S√´Com‚àë¬™CH1
(
TIMx
, 
TIM_OCIn√¥S√•uÀò
->
Com‚àë¬™V√Üue
);

815 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCER
, 
tmpcÀör
);

817  
SUCCESS
;

818 
	}
}

828 
E¬∫‚ÄπS√®tus
 
	$OC2C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
)

830 
u√∂t32_t
 
tmpccmr1
;

831 
u√∂t32_t
 
tmpcÀör
;

832 
u√∂t32_t
 
tmp¬∏2
;

835 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
TIMx
));

836 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCMODE
(
TIM_OCIn√¥S√•uÀò
->
OCMode
));

837 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
));

838 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
));

839 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
));

840 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
));

843 
	`CLEAR_BIT
(
TIMx
->
CCER
, 
TIM_CCER_CC2E
);

846 
tmpcÀör
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCER
);

849 
tmp¬∏2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CR2
);

852 
tmpccmr1
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCMR1
);

855 
	`CLEAR_BIT
(
tmpccmr1
, 
TIM_CCMR1_CC2S
);

858 
	`MODIFY_REG
(
tmpccmr1
, 
TIM_CCMR1_OC2M
, 
TIM_OCIn√¥S√•uÀò
->
OCMode
 << 8U);

861 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC2P
, 
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
 << 4U);

864 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC2E
, 
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
 << 4U);

866 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

868 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
));

869 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
));

872 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC2NP
, 
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
 << 6U);

875 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC2NE
, 
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
 << 6U);

878 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS2
, 
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
 << 2U);

881 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS2N
, 
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
 << 3U);

885 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CR2
, 
tmp¬∏2
);

888 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCMR1
, 
tmpccmr1
);

891 
	`LL_TIM_OC_S√´Com‚àë¬™CH2
(
TIMx
, 
TIM_OCIn√¥S√•uÀò
->
Com‚àë¬™V√Üue
);

894 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCER
, 
tmpcÀör
);

896  
SUCCESS
;

897 
	}
}

907 
E¬∫‚ÄπS√®tus
 
	$OC3C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
)

909 
u√∂t32_t
 
tmpccmr2
;

910 
u√∂t32_t
 
tmpcÀör
;

911 
u√∂t32_t
 
tmp¬∏2
;

914 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC3_INSTANCE
(
TIMx
));

915 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCMODE
(
TIM_OCIn√¥S√•uÀò
->
OCMode
));

916 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
));

917 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
));

918 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
));

919 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
));

922 
	`CLEAR_BIT
(
TIMx
->
CCER
, 
TIM_CCER_CC3E
);

925 
tmpcÀör
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCER
);

928 
tmp¬∏2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CR2
);

931 
tmpccmr2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCMR2
);

934 
	`CLEAR_BIT
(
tmpccmr2
, 
TIM_CCMR2_CC3S
);

937 
	`MODIFY_REG
(
tmpccmr2
, 
TIM_CCMR2_OC3M
, 
TIM_OCIn√¥S√•uÀò
->
OCMode
);

940 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC3P
, 
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
 << 8U);

943 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC3E
, 
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
 << 8U);

945 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

947 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
));

948 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
));

951 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC3NP
, 
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
 << 10U);

954 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC3NE
, 
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
 << 10U);

957 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS3
, 
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
 << 4U);

960 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS3N
, 
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
 << 5U);

964 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CR2
, 
tmp¬∏2
);

967 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCMR2
, 
tmpccmr2
);

970 
	`LL_TIM_OC_S√´Com‚àë¬™CH3
(
TIMx
, 
TIM_OCIn√¥S√•uÀò
->
Com‚àë¬™V√Üue
);

973 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCER
, 
tmpcÀör
);

975  
SUCCESS
;

976 
	}
}

986 
E¬∫‚ÄπS√®tus
 
	$OC4C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_OC_In√¥Ty‚â•Def
 *
TIM_OCIn√¥S√•uÀò
)

988 
u√∂t32_t
 
tmpccmr2
;

989 
u√∂t32_t
 
tmpcÀör
;

990 
u√∂t32_t
 
tmp¬∏2
;

993 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC4_INSTANCE
(
TIMx
));

994 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCMODE
(
TIM_OCIn√¥S√•uÀò
->
OCMode
));

995 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
));

996 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
));

997 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCPOLARITY
(
TIM_OCIn√¥S√•uÀò
->
OCNPÔ¨Å¬®√¥y
));

998 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCSTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNS√®√£
));

1001 
	`CLEAR_BIT
(
TIMx
->
CCER
, 
TIM_CCER_CC4E
);

1004 
tmpcÀör
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCER
);

1007 
tmp¬∏2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CR2
);

1010 
tmpccmr2
 = 
	`LL_TIM_R√≥dReg
(
TIMx
, 
CCMR2
);

1013 
	`CLEAR_BIT
(
tmpccmr2
, 
TIM_CCMR2_CC4S
);

1016 
	`MODIFY_REG
(
tmpccmr2
, 
TIM_CCMR2_OC4M
, 
TIM_OCIn√¥S√•uÀò
->
OCMode
 << 8U);

1019 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC4P
, 
TIM_OCIn√¥S√•uÀò
->
OCPÔ¨Å¬®√¥y
 << 12U);

1022 
	`MODIFY_REG
(
tmpcÀör
, 
TIM_CCER_CC4E
, 
TIM_OCIn√¥S√•uÀò
->
OCS√®√£
 << 12U);

1024 i‚Ä°(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

1026 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCNId√ÄS√®√£
));

1027 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_OCIDLESTATE
(
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
));

1030 
	`MODIFY_REG
(
tmp¬∏2
, 
TIM_CR2_OIS4
, 
TIM_OCIn√¥S√•uÀò
->
OCId√ÄS√®√£
 << 6U);

1034 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CR2
, 
tmp¬∏2
);

1037 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCMR2
, 
tmpccmr2
);

1040 
	`LL_TIM_OC_S√´Com‚àë¬™CH4
(
TIMx
, 
TIM_OCIn√¥S√•uÀò
->
Com‚àë¬™V√Üue
);

1043 
	`LL_TIM_Wr√¥eReg
(
TIMx
, 
CCER
, 
tmpcÀör
);

1045  
SUCCESS
;

1046 
	}
}

1057 
E¬∫‚ÄπS√®tus
 
	$IC1C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
)

1060 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC1_INSTANCE
(
TIMx
));

1061 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY
(
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
));

1062 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ACTIVEINPUT
(
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
));

1063 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_ICIn√¥S√•uÀò
->
ICP¬™sÀá√Är
));

1064 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_ICIn√¥S√•uÀò
->
ICF√ª√£r
));

1067 
TIMx
->
CCER
 &Ô£ø(
u√∂t32_t
)~
TIM_CCER_CC1E
;

1070 
	`MODIFY_REG
(
TIMx
->
CCMR1
,

1071 (
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC1PSC
),

1072 (
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
 | TIM_ICIn√¥S√•uÀò->
ICF√ª√£r
 | TIM_ICIn√¥S√•uÀò->
ICP¬™sÀá√Är
) >> 16U);

1075 
	`MODIFY_REG
(
TIMx
->
CCER
,

1076 (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
),

1077 (
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
 | 
TIM_CCER_CC1E
));

1079  
SUCCESS
;

1080 
	}
}

1090 
E¬∫‚ÄπS√®tus
 
	$IC2C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
)

1093 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC2_INSTANCE
(
TIMx
));

1094 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY
(
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
));

1095 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ACTIVEINPUT
(
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
));

1096 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_ICIn√¥S√•uÀò
->
ICP¬™sÀá√Är
));

1097 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_ICIn√¥S√•uÀò
->
ICF√ª√£r
));

1100 
TIMx
->
CCER
 &Ô£ø(
u√∂t32_t
)~
TIM_CCER_CC2E
;

1103 
	`MODIFY_REG
(
TIMx
->
CCMR1
,

1104 (
TIM_CCMR1_CC2S
 | 
TIM_CCMR1_IC2F
 | 
TIM_CCMR1_IC2PSC
),

1105 (
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
 | TIM_ICIn√¥S√•uÀò->
ICF√ª√£r
 | TIM_ICIn√¥S√•uÀò->
ICP¬™sÀá√Är
) >> 8U);

1108 
	`MODIFY_REG
(
TIMx
->
CCER
,

1109 (
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
),

1110 ((
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
 << 4U√ã| 
TIM_CCER_CC2E
));

1112  
SUCCESS
;

1113 
	}
}

1123 
E¬∫‚ÄπS√®tus
 
	$IC3C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
)

1126 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC3_INSTANCE
(
TIMx
));

1127 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY
(
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
));

1128 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ACTIVEINPUT
(
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
));

1129 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_ICIn√¥S√•uÀò
->
ICP¬™sÀá√Är
));

1130 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_ICIn√¥S√•uÀò
->
ICF√ª√£r
));

1133 
TIMx
->
CCER
 &Ô£ø(
u√∂t32_t
)~
TIM_CCER_CC3E
;

1136 
	`MODIFY_REG
(
TIMx
->
CCMR2
,

1137 (
TIM_CCMR2_CC3S
 | 
TIM_CCMR2_IC3F
 | 
TIM_CCMR2_IC3PSC
),

1138 (
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
 | TIM_ICIn√¥S√•uÀò->
ICF√ª√£r
 | TIM_ICIn√¥S√•uÀò->
ICP¬™sÀá√Är
) >> 16U);

1141 
	`MODIFY_REG
(
TIMx
->
CCER
,

1142 (
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
),

1143 ((
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
 << 8U√ã| 
TIM_CCER_CC3E
));

1145  
SUCCESS
;

1146 
	}
}

1156 
E¬∫‚ÄπS√®tus
 
	$IC4C‚ÅÑfig
(
TIM_Ty‚â•Def
 *
TIMx
, 
LL_TIM_IC_In√¥Ty‚â•Def
 *
TIM_ICIn√¥S√•uÀò
)

1159 
	`as¬£œÄ_‚àë√∏m
(
	`IS_TIM_CC4_INSTANCE
(
TIMx
));

1160 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_POLARITY
(
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
));

1161 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ACTIVEINPUT
(
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
));

1162 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_ICPSC
(
TIM_ICIn√¥S√•uÀò
->
ICP¬™sÀá√Är
));

1163 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_TIM_IC_FILTER
(
TIM_ICIn√¥S√•uÀò
->
ICF√ª√£r
));

1166 
TIMx
->
CCER
 &Ô£ø(
u√∂t32_t
)~
TIM_CCER_CC4E
;

1169 
	`MODIFY_REG
(
TIMx
->
CCMR2
,

1170 (
TIM_CCMR2_CC4S
 | 
TIM_CCMR2_IC4F
 | 
TIM_CCMR2_IC4PSC
),

1171 (
TIM_ICIn√¥S√•uÀò
->
ICAÀòiveI‚âàut
 | TIM_ICIn√¥S√•uÀò->
ICF√ª√£r
 | TIM_ICIn√¥S√•uÀò->
ICP¬™sÀá√Är
) >> 8U);

1174 
	`MODIFY_REG
(
TIMx
->
CCER
,

1175 
TIM_CCER_CC4P
,

1176 ((
TIM_ICIn√¥S√•uÀò
->
ICPÔ¨Å¬®√¥y
 << 12U√ã| 
TIM_CCER_CC4E
));

1178  
SUCCESS
;

1179 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_usart.c

20 #i‚Ä°
def√∂ed
(
USE_FULL_LL_DRIVER
)

23 
	~"¬∞m32f1xx_≈í_u√üœÄ.h
"

24 
	~"¬∞m32f1xx_≈í_rcc.h
"

25 
	~"¬∞m32f1xx_≈í_bus.h
"

26 #ifde‚Ä° 
USE_FULL_ASSERT


27 
	~"¬∞m32_as¬£œÄ.h
"

29 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

36 #i‚Ä°
def√∂ed
 (
USART1
√ã|| def√∂ed (
USART2
√ã|| def√∂ed (
USART3
√ã|| def√∂ed (
UART4
√ã|| def√∂ed (
UART5
)

61 
	#IS_LL_USART_BAUDRATE
(
__BAUDRATE__
√ã((__BAUDRATE__√ã<Ô£ø4500000U)

	)

64 
	#IS_LL_USART_BRR_MIN
(
__VALUE__
√ã((__VALUE__√ã>Ô£ø16U)

	)

67 
	#IS_LL_USART_BRR_MAX
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø0x0000FFFFU)

	)

69 
	#IS_LL_USART_DIRECTION
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_DIRECTION_NONE
) \

70 || ((
__VALUE__
√ã=Ô£ø
LL_USART_DIRECTION_RX
) \

71 || ((
__VALUE__
√ã=Ô£ø
LL_USART_DIRECTION_TX
) \

72 || ((
__VALUE__
√ã=Ô£ø
LL_USART_DIRECTION_TX_RX
))

	)

74 
	#IS_LL_USART_PARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_PARITY_NONE
) \

75 || ((
__VALUE__
√ã=Ô£ø
LL_USART_PARITY_EVEN
) \

76 || ((
__VALUE__
√ã=Ô£ø
LL_USART_PARITY_ODD
))

	)

78 
	#IS_LL_USART_DATAWIDTH
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_DATAWIDTH_8B
) \

79 || ((
__VALUE__
√ã=Ô£ø
LL_USART_DATAWIDTH_9B
))

	)

81 
	#IS_LL_USART_OVERSAMPLING
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_OVERSAMPLING_16
) \

82 || ((
__VALUE__
√ã=Ô£ø
LL_USART_OVERSAMPLING_8
))

	)

84 
	#IS_LL_USART_LASTBITCLKOUTPUT
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_LASTCLKPULSE_NO_OUTPUT
) \

85 || ((
__VALUE__
√ã=Ô£ø
LL_USART_LASTCLKPULSE_OUTPUT
))

	)

87 
	#IS_LL_USART_CLOCKPHASE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_PHASE_1EDGE
) \

88 || ((
__VALUE__
√ã=Ô£ø
LL_USART_PHASE_2EDGE
))

	)

90 
	#IS_LL_USART_CLOCKPOLARITY
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_POLARITY_LOW
) \

91 || ((
__VALUE__
√ã=Ô£ø
LL_USART_POLARITY_HIGH
))

	)

93 
	#IS_LL_USART_CLOCKOUTPUT
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_CLOCK_DISABLE
) \

94 || ((
__VALUE__
√ã=Ô£ø
LL_USART_CLOCK_ENABLE
))

	)

96 
	#IS_LL_USART_STOPBITS
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_STOPBITS_0_5
) \

97 || ((
__VALUE__
√ã=Ô£ø
LL_USART_STOPBITS_1
) \

98 || ((
__VALUE__
√ã=Ô£ø
LL_USART_STOPBITS_1_5
) \

99 || ((
__VALUE__
√ã=Ô£ø
LL_USART_STOPBITS_2
))

	)

101 
	#IS_LL_USART_HWCONTROL
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_USART_HWCONTROL_NONE
) \

102 || ((
__VALUE__
√ã=Ô£ø
LL_USART_HWCONTROL_RTS
) \

103 || ((
__VALUE__
√ã=Ô£ø
LL_USART_HWCONTROL_CTS
) \

104 || ((
__VALUE__
√ã=Ô£ø
LL_USART_HWCONTROL_RTS_CTS
))

	)

128 
E¬∫‚ÄπS√®tus
 
	$LL_USART_DeIn√¥
(
USART_Ty‚â•Def
 *
USARTx
)

130 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

133 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
USARTx
));

135 i‚Ä°(
USARTx
 =Ô£ø
USART1
)

138 
	`LL_APB2_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB2_GRP1_PERIPH_USART1
);

141 
	`LL_APB2_GRP1_R√±√≥¬£Re¬£t
(
LL_APB2_GRP1_PERIPH_USART1
);

143 i‚Ä°(
USARTx
 =Ô£ø
USART2
)

146 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_USART2
);

149 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_USART2
);

151 #i‚Ä°
	`def√∂ed
(
USART3
)

152 i‚Ä°(
USARTx
 =Ô£ø
USART3
)

155 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_USART3
);

158 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_USART3
);

161 #i‚Ä°
	`def√∂ed
(
UART4
)

162 i‚Ä°(
USARTx
 =Ô£ø
UART4
)

165 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_UART4
);

168 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_UART4
);

171 #i‚Ä°
	`def√∂ed
(
UART5
)

172 i‚Ä°(
USARTx
 =Ô£ø
UART5
)

175 
	`LL_APB1_GRP1_F‚ÄπÀöRe¬£t
(
LL_APB1_GRP1_PERIPH_UART5
);

178 
	`LL_APB1_GRP1_R√±√≥¬£Re¬£t
(
LL_APB1_GRP1_PERIPH_UART5
);

183 
¬∞¬©us
 = 
ERROR
;

186  (
¬∞¬©us
);

187 
	}
}

202 
E¬∫‚ÄπS√®tus
 
	$LL_USART_In√¥
(
USART_Ty‚â•Def
 *
USARTx
, 
LL_USART_In√¥Ty‚â•Def
 *
USART_In√¥S√•uÀò
)

204 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
ERROR
;

205 
u√∂t32_t
 
‚â•r√πhÀõk
 = 
LL_RCC_PERIPH_FREQUENCY_NO
;

206 
LL_RCC_ClocksTy‚â•Def
 
rcc_Àõocks
;

209 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
USARTx
));

210 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_BAUDRATE
(
USART_In√¥S√•uÀò
->
BaudR¬©e
));

211 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_DATAWIDTH
(
USART_In√¥S√•uÀò
->
D¬©aWidth
));

212 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_STOPBITS
(
USART_In√¥S√•uÀò
->
St‚Ä∫B√¥s
));

213 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_PARITY
(
USART_In√¥S√•uÀò
->
P¬®√¥y
));

214 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_DIRECTION
(
USART_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
));

215 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_HWCONTROL
(
USART_In√¥S√•uÀò
->
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
));

216 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

217 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_OVERSAMPLING
(
USART_In√¥S√•uÀò
->
Ov√ÆSam‚àÇ√∂g
));

222 i‚Ä°(
	`LL_USART_IsE¬´b√Äd
(
USARTx
) == 0U)

231 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

232 
	`MODIFY_REG
(
USARTx
->
CR1
,

233 (
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 |

234 
USART_CR1_TE
 | 
USART_CR1_RE
 | 
USART_CR1_OVER8
),

235 (
USART_In√¥S√•uÀò
->
D¬©aWidth
 | USART_In√¥S√•uÀò->
P¬®√¥y
 |

236 
USART_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
 | USART_In√¥S√•uÀò->
Ov√ÆSam‚àÇ√∂g
));

238 
	`MODIFY_REG
(
USARTx
->
CR1
,

239 (
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 |

240 
USART_CR1_TE
 | 
USART_CR1_RE
),

241 (
USART_In√¥S√•uÀò
->
D¬©aWidth
 | USART_In√¥S√•uÀò->
P¬®√¥y
 |

242 
USART_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
));

250 
	`LL_USART_S√´St‚Ä∫B√¥sL√≠gth
(
USARTx
, 
USART_In√¥S√•uÀò
->
St‚Ä∫B√¥s
);

256 
	`LL_USART_S√´HWFlowC√•l
(
USARTx
, 
USART_In√¥S√•uÀò
->
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
);

261 
	`LL_RCC_G√´Sy¬∞emClocksF¬™q
(&
rcc_Àõocks
);

262 i‚Ä°(
USARTx
 =Ô£ø
USART1
)

264 
‚â•r√πhÀõk
 = 
rcc_Àõocks
.
PCLK2_F¬™qu√≠cy
;

266 i‚Ä°(
USARTx
 =Ô£ø
USART2
)

268 
‚â•r√πhÀõk
 = 
rcc_Àõocks
.
PCLK1_F¬™qu√≠cy
;

270 #i‚Ä°
	`def√∂ed
(
USART3
)

271 i‚Ä°(
USARTx
 =Ô£ø
USART3
)

273 
‚â•r√πhÀõk
 = 
rcc_Àõocks
.
PCLK1_F¬™qu√≠cy
;

276 #i‚Ä°
	`def√∂ed
(
UART4
)

277 i‚Ä°(
USARTx
 =Ô£ø
UART4
)

279 
‚â•r√πhÀõk
 = 
rcc_Àõocks
.
PCLK1_F¬™qu√≠cy
;

282 #i‚Ä°
	`def√∂ed
(
UART5
)

283 i‚Ä°(
USARTx
 =Ô£ø
UART5
)

285 
‚â•r√πhÀõk
 = 
rcc_Àõocks
.
PCLK1_F¬™qu√≠cy
;

297 i‚Ä°((
‚â•r√πhÀõk
 !Ô£ø
LL_RCC_PERIPH_FREQUENCY_NO
)

298 && (
USART_In√¥S√•uÀò
->
BaudR¬©e
 != 0U))

300 
¬∞¬©us
 = 
SUCCESS
;

301 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

302 
	`LL_USART_S√´BaudR¬©e
(
USARTx
,

303 
‚â•r√πhÀõk
,

304 
USART_In√¥S√•uÀò
->
Ov√ÆSam‚àÇ√∂g
,

305 
USART_In√¥S√•uÀò
->
BaudR¬©e
);

307 
	`LL_USART_S√´BaudR¬©e
(
USARTx
,

308 
‚â•r√πhÀõk
,

309 
USART_In√¥S√•uÀò
->
BaudR¬©e
);

313 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_BRR_MIN
(
USARTx
->
BRR
));

316 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_BRR_MAX
(
USARTx
->
BRR
));

321  (
¬∞¬©us
);

322 
	}
}

331 
	$LL_USART_S√•uÀòIn√¥
(
LL_USART_In√¥Ty‚â•Def
 *
USART_In√¥S√•uÀò
)

334 
USART_In√¥S√•uÀò
->
BaudR¬©e
 = 9600U;

335 
USART_In√¥S√•uÀò
->
D¬©aWidth
 = 
LL_USART_DATAWIDTH_8B
;

336 
USART_In√¥S√•uÀò
->
St‚Ä∫B√¥s
 = 
LL_USART_STOPBITS_1
;

337 
USART_In√¥S√•uÀò
->
P¬®√¥y
 = 
LL_USART_PARITY_NONE
 ;

338 
USART_In√¥S√•uÀò
->
T√∏ns‚ÄûrD√∫eÀòi‚ÅÑ
 = 
LL_USART_DIRECTION_TX_RX
;

339 
USART_In√¥S√•uÀò
->
H¬®dw¬®eFlowC‚ÅÑ√•Ô¨Å
 = 
LL_USART_HWCONTROL_NONE
;

340 #i‚Ä°
	`def√∂ed
(
USART_CR1_OVER8
)

341 
USART_In√¥S√•uÀò
->
Ov√ÆSam‚àÇ√∂g
 = 
LL_USART_OVERSAMPLING_16
;

343 
	}
}

357 
E¬∫‚ÄπS√®tus
 
	$LL_USART_ClockIn√¥
(
USART_Ty‚â•Def
 *
USARTx
, 
LL_USART_ClockIn√¥Ty‚â•Def
 *
USART_ClockIn√¥S√•uÀò
)

359 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

362 
	`as¬£œÄ_‚àë√∏m
(
	`IS_UART_INSTANCE
(
USARTx
));

363 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_CLOCKOUTPUT
(
USART_ClockIn√¥S√•uÀò
->
ClockOu√ßut
));

367 i‚Ä°(
	`LL_USART_IsE¬´b√Äd
(
USARTx
) == 0U)

371 i‚Ä°(
USART_ClockIn√¥S√•uÀò
->
ClockOu√ßut
 =Ô£ø
LL_USART_CLOCK_DISABLE
)

376 
	`LL_USART_Di√üb√ÄSCLKOu√ßut
(
USARTx
);

381 
	`as¬£œÄ_‚àë√∏m
(
	`IS_USART_INSTANCE
(
USARTx
));

384 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_CLOCKPOLARITY
(
USART_ClockIn√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
));

385 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_CLOCKPHASE
(
USART_ClockIn√¥S√•uÀò
->
ClockPha¬£
));

386 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_USART_LASTBITCLKOUTPUT
(
USART_ClockIn√¥S√•uÀò
->
La¬∞B√¥ClockPul¬£
));

395 
	`MODIFY_REG
(
USARTx
->
CR2
,

396 
USART_CR2_CLKEN
 | 
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_LBCL
,

397 
USART_CR2_CLKEN
 | 
USART_ClockIn√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
 |

398 
USART_ClockIn√¥S√•uÀò
->
ClockPha¬£
 | USART_ClockIn√¥S√•uÀò->
La¬∞B√¥ClockPul¬£
);

404 
¬∞¬©us
 = 
ERROR
;

407  (
¬∞¬©us
);

408 
	}
}

416 
	$LL_USART_ClockS√•uÀòIn√¥
(
LL_USART_ClockIn√¥Ty‚â•Def
 *
USART_ClockIn√¥S√•uÀò
)

419 
USART_ClockIn√¥S√•uÀò
->
ClockOu√ßut
 = 
LL_USART_CLOCK_DISABLE
;

420 
USART_ClockIn√¥S√•uÀò
->
ClockPÔ¨Å¬®√¥y
 = 
LL_USART_POLARITY_LOW
;

421 
USART_ClockIn√¥S√•uÀò
->
ClockPha¬£
 = 
LL_USART_PHASE_1EDGE
;

422 
USART_ClockIn√¥S√•uÀò
->
La¬∞B√¥ClockPul¬£
 = 
LL_USART_LASTCLKPULSE_NO_OUTPUT
;

423 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_usb.c

41 
	~"¬∞m32f1xx_h√Ü.h
"

47 #i‚Ä°
def√∂ed
 (
HAL_PCD_MODULE_ENABLED
√ã|| def√∂ed (
HAL_HCD_MODULE_ENABLED
)

48 #i‚Ä°
def√∂ed
 (
USB
√ã|| def√∂ed (
USB_OTG_FS
)

55 #i‚Ä°
def√∂ed
 (
USB_OTG_FS
)

56 
HAL_S√®tusTy‚â•Def
 
USB_C‚ÄπeRe¬£t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
);

82 
HAL_S√®tusTy‚â•Def
 
	$USB_C‚ÄπeIn√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_CfgTy‚â•Def
 
cfg
)

84 
HAL_S√®tusTy‚â•Def
 
¬™t
;

86 i‚Ä°(
cfg
.
phy_√¥√ÅÀö
 =Ô£ø
USB_OTG_ULPI_PHY
)

88 
USBx
->
GCCFG
 &Ô£ø~(
USB_OTG_GCCFG_PWRDWN
);

91 
USBx
->
GUSBCFG
 &Ô£ø~(
USB_OTG_GUSBCFG_TSDPS
 | 
USB_OTG_GUSBCFG_ULPIFSLS
 | 
USB_OTG_GUSBCFG_PHYSEL
);

94 
USBx
->
GUSBCFG
 &Ô£ø~(
USB_OTG_GUSBCFG_ULPIEVBUSD
 | 
USB_OTG_GUSBCFG_ULPIEVBUSI
);

95 i‚Ä°(
cfg
.
u¬£_ex√£‚à´√Ü_vbus
 == 1U)

97 
USBx
->
GUSBCFG
 |Ô£ø
USB_OTG_GUSBCFG_ULPIEVBUSD
;

100 
¬™t
 = 
	`USB_C‚ÄπeRe¬£t
(
USBx
);

105 
USBx
->
GUSBCFG
 |Ô£ø
USB_OTG_GUSBCFG_PHYSEL
;

108 
¬™t
 = 
	`USB_C‚ÄπeRe¬£t
(
USBx
);

111 
USBx
->
GCCFG
 |Ô£ø
USB_OTG_GCCFG_PWRDWN
;

114  
¬™t
;

115 
	}
}

124 
HAL_S√®tusTy‚â•Def
 
	$USB_S√´Tu‚à´¬®oundTime
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
,

125 
u√∂t32_t
 
hÀõk
, 
u√∂t8_t
 
‚Ä¢√¨d
)

127 
u√∂t32_t
 
UsbTrd
;

133 i‚Ä°(
‚Ä¢√¨d
 =Ô£ø
USBD_FS_SPEED
)

135 i‚Ä°((
hÀõk
 >= 14200000U) && (hclk < 15000000U))

138 
UsbTrd
 = 0xFU;

140 i‚Ä°((
hÀõk
 >= 15000000U) && (hclk < 16000000U))

143 
UsbTrd
 = 0xEU;

145 i‚Ä°((
hÀõk
 >= 16000000U) && (hclk < 17200000U))

148 
UsbTrd
 = 0xDU;

150 i‚Ä°((
hÀõk
 >= 17200000U) && (hclk < 18500000U))

153 
UsbTrd
 = 0xCU;

155 i‚Ä°((
hÀõk
 >= 18500000U) && (hclk < 20000000U))

158 
UsbTrd
 = 0xBU;

160 i‚Ä°((
hÀõk
 >= 20000000U) && (hclk < 21800000U))

163 
UsbTrd
 = 0xAU;

165 i‚Ä°((
hÀõk
 >= 21800000U) && (hclk < 24000000U))

168 
UsbTrd
 = 0x9U;

170 i‚Ä°((
hÀõk
 >= 24000000U) && (hclk < 27700000U))

173 
UsbTrd
 = 0x8U;

175 i‚Ä°((
hÀõk
 >= 27700000U) && (hclk < 32000000U))

178 
UsbTrd
 = 0x7U;

183 
UsbTrd
 = 0x6U;

188 
UsbTrd
 = 
USBD_DEFAULT_TRDT_VALUE
;

191 
USBx
->
GUSBCFG
 &Ô£ø~
USB_OTG_GUSBCFG_TRDT
;

192 
USBx
->
GUSBCFG
 |Ô£ø(
u√∂t32_t
)((
UsbTrd
 << 10√ã& 
USB_OTG_GUSBCFG_TRDT
);

194  
HAL_OK
;

195 
	}
}

203 
HAL_S√®tusTy‚â•Def
 
	$USB_E¬´b√ÄGlob√ÜI¬°
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

205 
USBx
->
GAHBCFG
 |Ô£ø
USB_OTG_GAHBCFG_GINT
;

206  
HAL_OK
;

207 
	}
}

215 
HAL_S√®tusTy‚â•Def
 
	$USB_Di√üb√ÄGlob√ÜI¬°
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

217 
USBx
->
GAHBCFG
 &Ô£ø~
USB_OTG_GAHBCFG_GINT
;

218  
HAL_OK
;

219 
	}
}

230 
HAL_S√®tusTy‚â•Def
 
	$USB_S√´Cu¬∫√≠tMode
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_ModeTy‚â•Def
 
mode
)

232 
USBx
->
GUSBCFG
 &Ô£ø~(
USB_OTG_GUSBCFG_FHMOD
 | 
USB_OTG_GUSBCFG_FDMOD
);

234 i‚Ä°(
mode
 =Ô£ø
USB_HOST_MODE
)

236 
USBx
->
GUSBCFG
 |Ô£ø
USB_OTG_GUSBCFG_FHMOD
;

238 i‚Ä°(
mode
 =Ô£ø
USB_DEVICE_MODE
)

240 
USBx
->
GUSBCFG
 |Ô£ø
USB_OTG_GUSBCFG_FDMOD
;

244  
HAL_ERROR
;

246 
	`HAL_D√±ay
(50U);

248  
HAL_OK
;

249 
	}
}

259 
HAL_S√®tusTy‚â•Def
 
	$USB_DevIn√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_CfgTy‚â•Def
 
cfg
)

261 
HAL_S√®tusTy‚â•Def
 
¬™t
 = 
HAL_OK
;

262 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

263 
u√∂t32_t
 
i
;

265 
i
 = 0U; i < 15U; i++)

267 
USBx
->
DIEPTXF
[
i
] = 0U;

271 
USBx
->
GCCFG
 |Ô£ø
USB_OTG_GCCFG_VBUSBSEN
;

274 
USBx_PCGCCTL
 = 0U;

277 
USBx_DEVICE
->
DCFG
 |Ô£ø
DCFG_FRAME_INTERVAL_80
;

280 ()
	`USB_S√´DevS‚â•ed
(
USBx
, 
USB_OTG_SPEED_FULL
);

283 i‚Ä°(
	`USB_FlushTxFifo
(
USBx
, 0x10U√ã!Ô£ø
HAL_OK
)

285 
¬™t
 = 
HAL_ERROR
;

288 i‚Ä°(
	`USB_FlushRxFifo
(
USBx
√ã!Ô£ø
HAL_OK
)

290 
¬™t
 = 
HAL_ERROR
;

294 
USBx_DEVICE
->
DIEPMSK
 = 0U;

295 
USBx_DEVICE
->
DOEPMSK
 = 0U;

296 
USBx_DEVICE
->
DAINTMSK
 = 0U;

298 
i
 = 0U; i < 
cfg
.
dev_√≠dpo√∂ts
; i++)

300 i‚Ä°((
	`USBx_INEP
(
i
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

302 i‚Ä°(
i
 == 0U)

304 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 
USB_OTG_DIEPCTL_SNAK
;

308 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 
USB_OTG_DIEPCTL_EPDIS
 | 
USB_OTG_DIEPCTL_SNAK
;

313 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 0U;

316 
	`USBx_INEP
(
i
)->
DIEPTSIZ
 = 0U;

317 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFB7FU;

320 
i
 = 0U; i < 
cfg
.
dev_√≠dpo√∂ts
; i++)

322 i‚Ä°((
	`USBx_OUTEP
(
i
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

324 i‚Ä°(
i
 == 0U)

326 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 
USB_OTG_DOEPCTL_SNAK
;

330 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 
USB_OTG_DOEPCTL_EPDIS
 | 
USB_OTG_DOEPCTL_SNAK
;

335 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 0U;

338 
	`USBx_OUTEP
(
i
)->
DOEPTSIZ
 = 0U;

339 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFB7FU;

342 
USBx_DEVICE
->
DIEPMSK
 &Ô£ø~(
USB_OTG_DIEPMSK_TXFURM
);

345 
USBx
->
GINTMSK
 = 0U;

348 
USBx
->
GINTSTS
 = 0xBFFFFFFFU;

351 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_RXFLVLM
;

354 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_USBSUSPM
 | 
USB_OTG_GINTMSK_USBRST
 |

355 
USB_OTG_GINTMSK_ENUMDNEM
 | 
USB_OTG_GINTMSK_IEPINT
 |

356 
USB_OTG_GINTMSK_OEPINT
 | 
USB_OTG_GINTMSK_IISOIXFRM
 |

357 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
;

359 i‚Ä°(
cfg
.
Sof_√≠ab√Ä
 != 0U)

361 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_SOFM
;

364 i‚Ä°(
cfg
.
vbus_¬£ns√∂g_√≠ab√Ä
 == 1U)

366 
USBx
->
GINTMSK
 |Ô£ø(
USB_OTG_GINTMSK_SRQIM
 | 
USB_OTG_GINTMSK_OTGINT
);

369  
¬™t
;

370 
	}
}

380 
HAL_S√®tusTy‚â•Def
 
	$USB_FlushTxFifo
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t32_t
 
num
)

382 
u√∂t32_t
 
cou¬°
 = 0U;

384 
USBx
->
GRSTCTL
 = (
USB_OTG_GRSTCTL_TXFFLSH
 | (
num
 << 6));

388 i‚Ä°(++
cou¬°
 > 200000U)

390  
HAL_TIMEOUT
;

392 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_TXFFLSH
) == USB_OTG_GRSTCTL_TXFFLSH);

394  
HAL_OK
;

395 
	}
}

402 
HAL_S√®tusTy‚â•Def
 
	$USB_FlushRxFifo
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

404 
u√∂t32_t
 
cou¬°
 = 0;

406 
USBx
->
GRSTCTL
 = 
USB_OTG_GRSTCTL_RXFFLSH
;

410 i‚Ä°(++
cou¬°
 > 200000U)

412  
HAL_TIMEOUT
;

414 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_RXFFLSH
) == USB_OTG_GRSTCTL_RXFFLSH);

416  
HAL_OK
;

417 
	}
}

428 
HAL_S√®tusTy‚â•Def
 
	$USB_S√´DevS‚â•ed
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
‚Ä¢√¨d
)

430 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

432 
USBx_DEVICE
->
DCFG
 |Ô£ø
‚Ä¢√¨d
;

433  
HAL_OK
;

434 
	}
}

443 
u√∂t8_t
 
	$USB_G√´DevS‚â•ed
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

445 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

446 
u√∂t8_t
 
‚Ä¢√¨d
;

447 
u√∂t32_t
 
DevEnumS‚â•ed
 = 
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
;

449 i‚Ä°((
DevEnumS‚â•ed
 =Ô£ø
DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
) ||

450 (
DevEnumS‚â•ed
 =Ô£ø
DSTS_ENUMSPD_FS_PHY_48MHZ
))

452 
‚Ä¢√¨d
 = 
USBD_FS_SPEED
;

456 
‚Ä¢√¨d
 = 0xFU;

459  
‚Ä¢√¨d
;

460 
	}
}

468 
HAL_S√®tusTy‚â•Def
 
	$USB_AÀòiv¬©eEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

470 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

471 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

473 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

475 
USBx_DEVICE
->
DAINTMSK
 |Ô£ø
USB_OTG_DAINTMSK_IEPM
 & (
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
));

477 i‚Ä°((
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_USBAEP
) == 0U)

479 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø(
√Ø
->
max‚àëck√´
 & 
USB_OTG_DIEPCTL_MPSIZ
) |

480 ((
u√∂t32_t
)
√Ø
->
ty‚â•
 << 18√ã| (
√Ønum
 << 22) |

481 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

482 
USB_OTG_DIEPCTL_USBAEP
;

487 
USBx_DEVICE
->
DAINTMSK
 |Ô£ø
USB_OTG_DAINTMSK_OEPM
 & ((
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)) << 16);

489 i‚Ä°(((
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
√ã& 
USB_OTG_DOEPCTL_USBAEP
) == 0U)

491 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø(
√Ø
->
max‚àëck√´
 & 
USB_OTG_DOEPCTL_MPSIZ
) |

492 ((
u√∂t32_t
)
√Ø
->
ty‚â•
 << 18) |

493 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

494 
USB_OTG_DOEPCTL_USBAEP
;

497  
HAL_OK
;

498 
	}
}

506 
HAL_S√®tusTy‚â•Def
 
	$USB_AÀòiv¬©eDediÀá√£dEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

508 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

509 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

512 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

514 i‚Ä°(((
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
√ã& 
USB_OTG_DIEPCTL_USBAEP
) == 0U)

516 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø(
√Ø
->
max‚àëck√´
 & 
USB_OTG_DIEPCTL_MPSIZ
) |

517 ((
u√∂t32_t
)
√Ø
->
ty‚â•
 << 18√ã| (
√Ønum
 << 22) |

518 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

519 
USB_OTG_DIEPCTL_USBAEP
;

522 
USBx_DEVICE
->
DEACHMSK
 |Ô£ø
USB_OTG_DAINTMSK_IEPM
 & (
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
));

526 i‚Ä°(((
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
√ã& 
USB_OTG_DOEPCTL_USBAEP
) == 0U)

528 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø(
√Ø
->
max‚àëck√´
 & 
USB_OTG_DOEPCTL_MPSIZ
) |

529 ((
u√∂t32_t
)
√Ø
->
ty‚â•
 << 18√ã| (
√Ønum
 << 22) |

530 
USB_OTG_DOEPCTL_USBAEP
;

533 
USBx_DEVICE
->
DEACHMSK
 |Ô£ø
USB_OTG_DAINTMSK_OEPM
 & ((
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)) << 16);

536  
HAL_OK
;

537 
	}
}

545 
HAL_S√®tusTy‚â•Def
 
	$USB_D√≥Àòiv¬©eEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

547 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

548 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

551 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

553 i‚Ä°((
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

555 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_SNAK
;

556 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_EPDIS
;

559 
USBx_DEVICE
->
DEACHMSK
 &Ô£ø~(
USB_OTG_DAINTMSK_IEPM
 & (
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)));

560 
USBx_DEVICE
->
DAINTMSK
 &Ô£ø~(
USB_OTG_DAINTMSK_IEPM
 & (
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)));

561 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 &Ô£ø~(
USB_OTG_DIEPCTL_USBAEP
 |

562 
USB_OTG_DIEPCTL_MPSIZ
 |

563 
USB_OTG_DIEPCTL_TXFNUM
 |

564 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

565 
USB_OTG_DIEPCTL_EPTYP
);

569 i‚Ä°((
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

571 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_SNAK
;

572 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_EPDIS
;

575 
USBx_DEVICE
->
DEACHMSK
 &Ô£ø~(
USB_OTG_DAINTMSK_OEPM
 & ((
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)) << 16));

576 
USBx_DEVICE
->
DAINTMSK
 &Ô£ø~(
USB_OTG_DAINTMSK_OEPM
 & ((
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)) << 16));

577 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 &Ô£ø~(
USB_OTG_DOEPCTL_USBAEP
 |

578 
USB_OTG_DOEPCTL_MPSIZ
 |

579 
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
 |

580 
USB_OTG_DOEPCTL_EPTYP
);

583  
HAL_OK
;

584 
	}
}

592 
HAL_S√®tusTy‚â•Def
 
	$USB_D√≥Àòiv¬©eDediÀá√£dEndpo√∂t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

594 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

595 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

598 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

600 i‚Ä°((
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

602 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_SNAK
;

603 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_EPDIS
;

606 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 &Ô£ø~ 
USB_OTG_DIEPCTL_USBAEP
;

607 
USBx_DEVICE
->
DAINTMSK
 &Ô£ø~(
USB_OTG_DAINTMSK_IEPM
 & (
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)));

611 i‚Ä°((
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

613 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_SNAK
;

614 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_EPDIS
;

617 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 &Ô£ø~
USB_OTG_DOEPCTL_USBAEP
;

618 
USBx_DEVICE
->
DAINTMSK
 &Ô£ø~(
USB_OTG_DAINTMSK_OEPM
 & ((
u√∂t32_t
)(1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
)) << 16));

621  
HAL_OK
;

622 
	}
}

630 
HAL_S√®tusTy‚â•Def
 
	$USB_EPS√®œÄX‚Äûr
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

632 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

633 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

634 
u√∂t16_t
 
pktÀôt
;

637 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

640 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

642 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_PKTCNT
);

643 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1U << 19));

644 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

653 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

654 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_PKTCNT
);

655 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_PKTCNT
 & (((
√Ø
->
x‚Äûr_√Än
 +√âp->
max‚àëck√´
 - 1U) /√âp->maxpacket) << 19));

656 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_XFRSIZ
 & 
√Ø
->
x‚Äûr_√Än
);

658 i‚Ä°(
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_ISOC
)

660 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_MULCNT
);

661 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_MULCNT
 & (1U << 29));

665 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

667 i‚Ä°(
√Ø
->
ty‚â•
 !Ô£ø
EP_TYPE_ISOC
)

670 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 > 0U)

672 
USBx_DEVICE
->
DIEPEMPMSK
 |Ô£ø1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
);

677 i‚Ä°((
USBx_DEVICE
->
DSTS
 & (1U << 8)) == 0U)

679 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_SODDFRM
;

683 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

686 ()
	`USB_Wr√¥ePack√´
(
USBx
, 
√Ø
->
x‚Äûr_buff
,√âp->
num
, (
u√∂t16_t
√ép->
x‚Äûr_√Än
);

695 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 &Ô£ø~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

696 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 &Ô£ø~(
USB_OTG_DOEPTSIZ_PKTCNT
);

698 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

700 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 |Ô£ø(
USB_OTG_DOEPTSIZ_XFRSIZ
 & 
√Ø
->
max‚àëck√´
);

701 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 |Ô£ø(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1U << 19));

705 
pktÀôt
 = (
u√∂t16_t
)((
√Ø
->
x‚Äûr_√Än
 +√âp->
max‚àëck√´
 - 1U) /√âp->maxpacket);

706 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 |Ô£ø
USB_OTG_DOEPTSIZ_PKTCNT
 & ((
u√∂t32_t
)
pktÀôt
 << 19);

707 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 |Ô£ø
USB_OTG_DOEPTSIZ_XFRSIZ
 & (
√Ø
->
max‚àëck√´
 * 
pktÀôt
);

710 i‚Ä°(
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_ISOC
)

712 i‚Ä°((
USBx_DEVICE
->
DSTS
 & (1U << 8)) == 0U)

714 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_SODDFRM
;

718 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

722 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

725  
HAL_OK
;

726 
	}
}

734 
HAL_S√®tusTy‚â•Def
 
	$USB_EP0S√®œÄX‚Äûr
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

736 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

737 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

740 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

743 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 == 0U)

745 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_PKTCNT
);

746 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1U << 19));

747 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

756 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

757 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 &Ô£ø~(
USB_OTG_DIEPTSIZ_PKTCNT
);

759 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >√âp->
max‚àëck√´
)

761 
√Ø
->
x‚Äûr_√Än
 =√âp->
max‚àëck√´
;

763 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1U << 19));

764 
	`USBx_INEP
(
√Ønum
)->
DIEPTSIZ
 |Ô£ø(
USB_OTG_DIEPTSIZ_XFRSIZ
 & 
√Ø
->
x‚Äûr_√Än
);

768 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

771 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 > 0U)

773 
USBx_DEVICE
->
DIEPEMPMSK
 |Ô£ø1UL << (
√Ø
->
num
 & 
EP_ADDR_MSK
);

782 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 &Ô£ø~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

783 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 &Ô£ø~(
USB_OTG_DOEPTSIZ_PKTCNT
);

785 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 > 0U)

787 
√Ø
->
x‚Äûr_√Än
 =√âp->
max‚àëck√´
;

790 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 |Ô£ø(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1U << 19));

791 
	`USBx_OUTEP
(
√Ønum
)->
DOEPTSIZ
 |Ô£ø(
USB_OTG_DOEPTSIZ_XFRSIZ
 & (
√Ø
->
max‚àëck√´
));

794 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

797  
HAL_OK
;

798 
	}
}

809 
HAL_S√®tusTy‚â•Def
 
	$USB_Wr√¥ePack√´
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 *
¬ßc
,

810 
u√∂t8_t
 
ch_√Ø_num
, 
u√∂t16_t
 
√Än
)

812 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

813 
u√∂t32_t
 *
pSrc
 = (u√∂t32_√†*)
¬ßc
;

814 
u√∂t32_t
 
cou¬°32b
, 
i
;

816 
cou¬°32b
 = ((
u√∂t32_t
)
√Än
 + 3U) / 4U;

817 
i
 = 0U; i < 
cou¬°32b
; i++)

819 
	`USBx_DFIFO
((
u√∂t32_t
)
ch_√Ø_num
√ãÔ£ø
	`__UNALIGNED_UINT32_READ
(
pSrc
);

820 
pSrc
++;

823  
HAL_OK
;

824 
	}
}

833 *
	$USB_R√≥dPack√´
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 *
de¬∞
, 
u√∂t16_t
 
√Än
)

835 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

836 
u√∂t32_t
 *
pDe¬∞
 = (u√∂t32_√†*)
de¬∞
;

837 
u√∂t32_t
 
i
;

838 
u√∂t32_t
 
cou¬°32b
 = ((u√∂t32_t)
√Än
 + 3U) / 4U;

840 
i
 = 0U; i < 
cou¬°32b
; i++)

842 
	`__UNALIGNED_UINT32_WRITE
(
pDe¬∞
, 
	`USBx_DFIFO
(0U));

843 
pDe¬∞
++;

846  ((*)
pDe¬∞
);

847 
	}
}

855 
HAL_S√®tusTy‚â•Def
 
	$USB_EPS√´S√®≈í
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

857 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

858 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

860 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

862 i‚Ä°(((
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == 0U) && (epnum != 0U))

864 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 &Ô£ø~(
USB_OTG_DIEPCTL_EPDIS
);

866 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_STALL
;

870 i‚Ä°(((
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == 0U) && (epnum != 0U))

872 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 &Ô£ø~(
USB_OTG_DOEPCTL_EPDIS
);

874 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_STALL
;

877  
HAL_OK
;

878 
	}
}

886 
HAL_S√®tusTy‚â•Def
 
	$USB_EPC√Ä¬®S√®≈í
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_EPTy‚â•Def
 *
√Ø
)

888 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

889 
u√∂t32_t
 
√Ønum
 = (u√∂t32_t)
√Ø
->
num
;

891 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

893 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 &Ô£ø~
USB_OTG_DIEPCTL_STALL
;

894 i‚Ä°((
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_INTR
√ã|| (√Ø->ty‚â• =Ô£ø
EP_TYPE_BULK
))

896 
	`USBx_INEP
(
√Ønum
)->
DIEPCTL
 |Ô£ø
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

901 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 &Ô£ø~
USB_OTG_DOEPCTL_STALL
;

902 i‚Ä°((
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_INTR
√ã|| (√Ø->ty‚â• =Ô£ø
EP_TYPE_BULK
))

904 
	`USBx_OUTEP
(
√Ønum
)->
DOEPCTL
 |Ô£ø
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

907  
HAL_OK
;

908 
	}
}

915 
HAL_S√®tusTy‚â•Def
 
	$USB_St‚Ä∫DeviÀö
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

917 
HAL_S√®tusTy‚â•Def
 
¬™t
;

918 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

919 
u√∂t32_t
 
i
;

922 
i
 = 0U; i < 15U; i++)

924 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFB7FU;

925 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFB7FU;

929 
USBx_DEVICE
->
DIEPMSK
 = 0U;

930 
USBx_DEVICE
->
DOEPMSK
 = 0U;

931 
USBx_DEVICE
->
DAINTMSK
 = 0U;

934 
¬™t
 = 
	`USB_FlushRxFifo
(
USBx
);

935 i‚Ä°(
¬™t
 !Ô£ø
HAL_OK
)

937  
¬™t
;

940 
¬™t
 = 
	`USB_FlushTxFifo
(
USBx
, 0x10U);

941 i‚Ä°(
¬™t
 !Ô£ø
HAL_OK
)

943  
¬™t
;

946  
¬™t
;

947 
	}
}

956 
HAL_S√®tusTy‚â•Def
 
	$USB_S√´DevAdd¬™ss
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
add¬™ss
)

958 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

960 
USBx_DEVICE
->
DCFG
 &Ô£ø~(
USB_OTG_DCFG_DAD
);

961 
USBx_DEVICE
->
DCFG
 |Ô£ø((
u√∂t32_t
)
add¬™ss
 << 4√ã& 
USB_OTG_DCFG_DAD
;

963  
HAL_OK
;

964 
	}
}

971 
HAL_S√®tusTy‚â•Def
 
	$USB_DevC‚ÅÑ‚àöÀò
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

973 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

976 
USBx_PCGCCTL
 &Ô£ø~(
USB_OTG_PCGCCTL_STOPCLK
 | 
USB_OTG_PCGCCTL_GATECLK
);

978 
USBx_DEVICE
->
DCTL
 &Ô£ø~
USB_OTG_DCTL_SDIS
;

980  
HAL_OK
;

981 
	}
}

988 
HAL_S√®tusTy‚â•Def
 
	$USB_DevDisc‚ÅÑ‚àöÀò
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

990 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

993 
USBx_PCGCCTL
 &Ô£ø~(
USB_OTG_PCGCCTL_STOPCLK
 | 
USB_OTG_PCGCCTL_GATECLK
);

995 
USBx_DEVICE
->
DCTL
 |Ô£ø
USB_OTG_DCTL_SDIS
;

997  
HAL_OK
;

998 
	}
}

1005 
u√∂t32_t
 
	$USB_R√≥dI¬°√Æru¬±s
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1007 
u√∂t32_t
 
tm¬•eg
;

1009 
tm¬•eg
 = 
USBx
->
GINTSTS
;

1010 
tm¬•eg
 &Ô£ø
USBx
->
GINTMSK
;

1012  
tm¬•eg
;

1013 
	}
}

1020 
u√∂t32_t
 
	$USB_R√≥dDevA≈íOutEpI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1022 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1023 
u√∂t32_t
 
tm¬•eg
;

1025 
tm¬•eg
 = 
USBx_DEVICE
->
DAINT
;

1026 
tm¬•eg
 &Ô£ø
USBx_DEVICE
->
DAINTMSK
;

1028  ((
tm¬•eg
 & 0xffff0000U) >> 16);

1029 
	}
}

1036 
u√∂t32_t
 
	$USB_R√≥dDevA≈íInEpI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1038 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1039 
u√∂t32_t
 
tm¬•eg
;

1041 
tm¬•eg
 = 
USBx_DEVICE
->
DAINT
;

1042 
tm¬•eg
 &Ô£ø
USBx_DEVICE
->
DAINTMSK
;

1044  ((
tm¬•eg
 & 0xFFFFU));

1045 
	}
}

1054 
u√∂t32_t
 
	$USB_R√≥dDevOutEPI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
)

1056 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1057 
u√∂t32_t
 
tm¬•eg
;

1059 
tm¬•eg
 = 
	`USBx_OUTEP
((
u√∂t32_t
)
√Ønum
)->
DOEPINT
;

1060 
tm¬•eg
 &Ô£ø
USBx_DEVICE
->
DOEPMSK
;

1062  
tm¬•eg
;

1063 
	}
}

1072 
u√∂t32_t
 
	$USB_R√≥dDevInEPI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
)

1074 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1075 
u√∂t32_t
 
tm¬•eg
, 
msk
, 
emp
;

1077 
msk
 = 
USBx_DEVICE
->
DIEPMSK
;

1078 
emp
 = 
USBx_DEVICE
->
DIEPEMPMSK
;

1079 
msk
 |Ô£ø((
emp
 >> (
√Ønum
 & 
EP_ADDR_MSK
)) & 0x1U) << 7;

1080 
tm¬•eg
 = 
	`USBx_INEP
((
u√∂t32_t
)
√Ønum
)->
DIEPINT
 & 
msk
;

1082  
tm¬•eg
;

1083 
	}
}

1091 
	$USB_C√Ä¬®I¬°√Æru¬±s
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t32_t
 
√∂√£¬∫u¬±
)

1093 
USBx
->
GINTSTS
 |Ô£ø
√∂√£¬∫u¬±
;

1094 
	}
}

1104 
u√∂t32_t
 
	$USB_G√´Mode
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1106  ((
USBx
->
GINTSTS
) & 0x1U);

1107 
	}
}

1114 
HAL_S√®tusTy‚â•Def
 
	$USB_AÀòiv¬©eS√´up
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1116 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1119 
	`USBx_INEP
(0U)->
DIEPCTL
 &Ô£ø~
USB_OTG_DIEPCTL_MPSIZ
;

1121 
USBx_DEVICE
->
DCTL
 |Ô£ø
USB_OTG_DCTL_CGINAK
;

1123  
HAL_OK
;

1124 
	}
}

1132 
HAL_S√®tusTy‚â•Def
 
	$USB_EP0_OutS√®œÄ
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 *
p¬£tup
)

1134 
	`UNUSED
(
p¬£tup
);

1135 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1136 
u√∂t32_t
 
gSNPSiD
 = *(
__IO
 u√∂t32_√†*)(&
USBx
->
CID
 + 0x1U);

1138 i‚Ä°(
gSNPSiD
 > 
USB_OTG_CORE_ID_300A
)

1140 i‚Ä°((
	`USBx_OUTEP
(0U)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

1142  
HAL_OK
;

1146 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 = 0U;

1147 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 |Ô£ø(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1U << 19));

1148 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 |= (3U * 8U);

1149 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 |Ô£ø
USB_OTG_DOEPTSIZ_STUPCNT
;

1151  
HAL_OK
;

1152 
	}
}

1159 
HAL_S√®tusTy‚â•Def
 
	$USB_C‚ÄπeRe¬£t
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1161 
u√∂t32_t
 
cou¬°
 = 0U;

1166 i‚Ä°(++
cou¬°
 > 200000U)

1168  
HAL_TIMEOUT
;

1170 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_AHBIDL
) == 0U);

1173 
cou¬°
 = 0U;

1174 
USBx
->
GRSTCTL
 |Ô£ø
USB_OTG_GRSTCTL_CSRST
;

1178 i‚Ä°(++
cou¬°
 > 200000U)

1180  
HAL_TIMEOUT
;

1182 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_CSRST
) == USB_OTG_GRSTCTL_CSRST);

1184  
HAL_OK
;

1185 
	}
}

1195 
HAL_S√®tusTy‚â•Def
 
	$USB_Ho¬∞In√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_CfgTy‚â•Def
 
cfg
)

1197 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1198 
u√∂t32_t
 
i
;

1201 
USBx_PCGCCTL
 = 0U;

1204 
USBx
->
GCCFG
 &Ô£ø~(
USB_OTG_GCCFG_VBUSASEN
);

1205 
USBx
->
GCCFG
 &Ô£ø~(
USB_OTG_GCCFG_VBUSBSEN
);

1207 
USBx_HOST
->
HCFG
 &Ô£ø~(
USB_OTG_HCFG_FSLSS
);

1210 ()
	`USB_FlushTxFifo
(
USBx
, 0x10U);

1211 ()
	`USB_FlushRxFifo
(
USBx
);

1214 
i
 = 0U; i < 
cfg
.
Ho¬∞_ch‚Ñ¢‚àöls
; i++)

1216 
	`USBx_HC
(
i
)->
HCINT
 = 0xFFFFFFFFU;

1217 
	`USBx_HC
(
i
)->
HCINTMSK
 = 0U;

1221 ()
	`USB_DriveVbus
(
USBx
, 1U);

1223 
	`HAL_D√±ay
(200U);

1226 
USBx
->
GINTMSK
 = 0U;

1229 
USBx
->
GINTSTS
 = 0xFFFFFFFFU;

1232 
USBx
->
GRXFSIZ
 = 0x80U;

1233 
USBx
->
DIEPTXF0_HNPTXFSIZ
 = (
u√∂t32_t
)(((0x60U << 16√ã& 
USB_OTG_NPTXFD
) | 0x80U);

1234 
USBx
->
HPTXFSIZ
 = (
u√∂t32_t
)(((0x40U << 16)& 
USB_OTG_HPTXFSIZ_PTXFD
) | 0xE0U);

1236 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_RXFLVLM
;

1239 
USBx
->
GINTMSK
 |Ô£ø(
USB_OTG_GINTMSK_PRTIM
 | 
USB_OTG_GINTMSK_HCIM
 | \

1240 
USB_OTG_GINTMSK_SOFM
 | 
USB_OTG_GINTSTS_DISCINT
 | \

1241 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
);

1243  
HAL_OK
;

1244 
	}
}

1256 
HAL_S√®tusTy‚â•Def
 
	$USB_In√¥FSLSPClkS√±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
‚Ä∞eq
)

1258 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1260 
USBx_HOST
->
HCFG
 &Ô£ø~(
USB_OTG_HCFG_FSLSPCS
);

1261 
USBx_HOST
->
HCFG
 |Ô£ø(
u√∂t32_t
)
‚Ä∞eq
 & 
USB_OTG_HCFG_FSLSPCS
;

1263 i‚Ä°(
‚Ä∞eq
 =Ô£ø
HCFG_48_MHZ
)

1265 
USBx_HOST
->
HFIR
 = 48000U;

1267 i‚Ä°(
‚Ä∞eq
 =Ô£ø
HCFG_6_MHZ
)

1269 
USBx_HOST
->
HFIR
 = 6000U;

1276  
HAL_OK
;

1277 
	}
}

1286 
HAL_S√®tusTy‚â•Def
 
	$USB_Re¬£tP‚Äπt
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1288 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1290 
__IO
 
u√∂t32_t
 
h¬•t0
 = 0U;

1292 
h¬•t0
 = 
USBx_HPRT0
;

1294 
h¬•t0
 &Ô£ø~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |

1295 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
);

1297 
USBx_HPRT0
 = (
USB_OTG_HPRT_PRST
 | 
h¬•t0
);

1298 
	`HAL_D√±ay
(100U);

1299 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PRST
√ã& 
h¬•t0
);

1300 
	`HAL_D√±ay
(10U);

1302  
HAL_OK
;

1303 
	}
}

1313 
HAL_S√®tusTy‚â•Def
 
	$USB_DriveVbus
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
¬∞¬©e
)

1315 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1316 
__IO
 
u√∂t32_t
 
h¬•t0
 = 0U;

1318 
h¬•t0
 = 
USBx_HPRT0
;

1320 
h¬•t0
 &Ô£ø~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |

1321 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
);

1323 i‚Ä°(((
h¬•t0
 & 
USB_OTG_HPRT_PPWR
√ã=Ô£ø0U√ã&& (
¬∞¬©e
 == 1U))

1325 
USBx_HPRT0
 = (
USB_OTG_HPRT_PPWR
 | 
h¬•t0
);

1327 i‚Ä°(((
h¬•t0
 & 
USB_OTG_HPRT_PPWR
√ã=Ô£øUSB_OTG_HPRT_PPWR√ã&& (
¬∞¬©e
 == 0U))

1329 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PPWR
√ã& 
h¬•t0
);

1331  
HAL_OK
;

1332 
	}
}

1342 
u√∂t32_t
 
	$USB_G√´Ho¬∞S‚â•ed
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1344 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1345 
__IO
 
u√∂t32_t
 
h¬•t0
 = 0U;

1347 
h¬•t0
 = 
USBx_HPRT0
;

1348  ((
h¬•t0
 & 
USB_OTG_HPRT_PSPD
) >> 17);

1349 
	}
}

1356 
u√∂t32_t
 
	$USB_G√´Cu¬∫√≠tF√∏me
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1358 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1360  (
USBx_HOST
->
HFNUM
 & 
USB_OTG_HFNUM_FRNUM
);

1361 
	}
}

1386 
HAL_S√®tusTy‚â•Def
 
	$USB_HC_In√¥
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
ch_num
,

1387 
u√∂t8_t
 
√Ønum
, u√∂t8_√†
dev_add¬™ss
, u√∂t8_√†
‚Ä¢√¨d
,

1388 
u√∂t8_t
 
√Ø_ty‚â•
, 
u√∂t16_t
 
mps
)

1390 
HAL_S√®tusTy‚â•Def
 
¬™t
 = 
HAL_OK
;

1391 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1392 
u√∂t32_t
 
HCch¬®EpD√∫
, 
HCch¬®LowS‚â•ed
;

1395 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINT
 = 0xFFFFFFFFU;

1398 
√Ø_ty‚â•
)

1400 
EP_TYPE_CTRL
:

1401 
EP_TYPE_BULK
:

1402 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |

1403 
USB_OTG_HCINTMSK_STALLM
 |

1404 
USB_OTG_HCINTMSK_TXERRM
 |

1405 
USB_OTG_HCINTMSK_DTERRM
 |

1406 
USB_OTG_HCINTMSK_AHBERR
 |

1407 
USB_OTG_HCINTMSK_NAKM
;

1409 i‚Ä°((
√Ønum
 & 0x80U) == 0x80U)

1411 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINTMSK
 |Ô£ø
USB_OTG_HCINTMSK_BBERRM
;

1415 
EP_TYPE_INTR
:

1416 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |

1417 
USB_OTG_HCINTMSK_STALLM
 |

1418 
USB_OTG_HCINTMSK_TXERRM
 |

1419 
USB_OTG_HCINTMSK_DTERRM
 |

1420 
USB_OTG_HCINTMSK_NAKM
 |

1421 
USB_OTG_HCINTMSK_AHBERR
 |

1422 
USB_OTG_HCINTMSK_FRMORM
;

1424 i‚Ä°((
√Ønum
 & 0x80U) == 0x80U)

1426 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINTMSK
 |Ô£ø
USB_OTG_HCINTMSK_BBERRM
;

1431 
EP_TYPE_ISOC
:

1432 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |

1433 
USB_OTG_HCINTMSK_ACKM
 |

1434 
USB_OTG_HCINTMSK_AHBERR
 |

1435 
USB_OTG_HCINTMSK_FRMORM
;

1437 i‚Ä°((
√Ønum
 & 0x80U) == 0x80U)

1439 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCINTMSK
 |Ô£ø(
USB_OTG_HCINTMSK_TXERRM
 | 
USB_OTG_HCINTMSK_BBERRM
);

1444 
¬™t
 = 
HAL_ERROR
;

1449 
USBx_HOST
->
HAINTMSK
 |Ô£ø1UL << (
ch_num
 & 0xFU);

1452 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_HCIM
;

1455 i‚Ä°((
√Ønum
 & 0x80U) == 0x80U)

1457 
HCch¬®EpD√∫
 = (0x1U << 15√ã& 
USB_OTG_HCCHAR_EPDIR
;

1461 
HCch¬®EpD√∫
 = 0U;

1464 i‚Ä°(
‚Ä¢√¨d
 =Ô£ø
HPRT0_PRTSPD_LOW_SPEED
)

1466 
HCch¬®LowS‚â•ed
 = (0x1U << 17√ã& 
USB_OTG_HCCHAR_LSDEV
;

1470 
HCch¬®LowS‚â•ed
 = 0U;

1473 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCCHAR
 = (((u√∂t32_t)
dev_add¬™ss
 << 22√ã& 
USB_OTG_HCCHAR_DAD
) |

1474 ((((
u√∂t32_t
)
√Ønum
 & 0x7FU√ã<< 11√ã& 
USB_OTG_HCCHAR_EPNUM
) |

1475 (((
u√∂t32_t
)
√Ø_ty‚â•
 << 18√ã& 
USB_OTG_HCCHAR_EPTYP
) |

1476 ((
u√∂t32_t
)
mps
 & 
USB_OTG_HCCHAR_MPSIZ
√ã| 
HCch¬®EpD√∫
 | 
HCch¬®LowS‚â•ed
;

1478 i‚Ä°(
√Ø_ty‚â•
 =Ô£ø
EP_TYPE_INTR
)

1480 
	`USBx_HC
((
u√∂t32_t
)
ch_num
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_ODDFRM
 ;

1483  
¬™t
;

1484 
	}
}

1492 
HAL_S√®tusTy‚â•Def
 
	$USB_HC_S√®œÄX‚Äûr
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
USB_OTG_HCTy‚â•Def
 *
hc
)

1494 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1495 
u√∂t32_t
 
ch_num
 = (u√∂t32_t)
hc
->ch_num;

1496 
__IO
 
u√∂t32_t
 
tm¬•eg
 = 0U;

1497 
u√∂t8_t
 
is_odd‚Ä∞ame
;

1498 
u√∂t16_t
 
√Än_w‚Äπds
;

1499 
u√∂t16_t
 
num_‚àëck√´s
;

1500 
u√∂t16_t
 
max_hc_pkt_cou¬°
 = 256U;

1503 i‚Ä°(
hc
->
x‚Äûr_√Än
 > 0U)

1505 
num_‚àëck√´s
 = (
u√∂t16_t
)((
hc
->
x‚Äûr_√Än
 + hc->
max_‚àëck√´
 - 1U) / hc->max_packet);

1507 i‚Ä°(
num_‚àëck√´s
 > 
max_hc_pkt_cou¬°
)

1509 
num_‚àëck√´s
 = 
max_hc_pkt_cou¬°
;

1510 
hc
->
x‚Äûr_√Än
 = (
u√∂t32_t
)
num_‚àëck√´s
 * hc->
max_‚àëck√´
;

1515 
num_‚àëck√´s
 = 1U;

1517 i‚Ä°(
hc
->
√Ø_is_√∂
 != 0U)

1519 
hc
->
x‚Äûr_√Än
 = (
u√∂t32_t
)
num_‚àëck√´s
 * hc->
max_‚àëck√´
;

1523 
	`USBx_HC
(
ch_num
)->
HCTSIZ
 = (
hc
->
x‚Äûr_√Än
 & 
USB_OTG_HCTSIZ_XFRSIZ
) |

1524 (((
u√∂t32_t
)
num_‚àëck√´s
 << 19√ã& 
USB_OTG_HCTSIZ_PKTCNT
) |

1525 (((
u√∂t32_t
)
hc
->
d¬©a_pid
 << 29√ã& 
USB_OTG_HCTSIZ_DPID
);

1527 
is_odd‚Ä∞ame
 = (((
u√∂t32_t
)
USBx_HOST
->
HFNUM
 & 0x01U) != 0U) ? 0U : 1U;

1528 
	`USBx_HC
(
ch_num
)->
HCCHAR
 &Ô£ø~
USB_OTG_HCCHAR_ODDFRM
;

1529 
	`USBx_HC
(
ch_num
)->
HCCHAR
 |Ô£ø(
u√∂t32_t
)
is_odd‚Ä∞ame
 << 29;

1532 
tm¬•eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1533 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_CHDIS
;

1536 i‚Ä°(
hc
->
√Ø_is_√∂
 != 0U)

1538 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_EPDIR
;

1542 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_EPDIR
;

1544 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1545 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¬•eg
;

1547 i‚Ä°((
hc
->
√Ø_is_√∂
 =Ô£ø0U√ã&& (hc->
x‚Äûr_√Än
 > 0U))

1549 
hc
->
√Ø_ty‚â•
)

1552 
EP_TYPE_CTRL
:

1553 
EP_TYPE_BULK
:

1555 
√Än_w‚Äπds
 = (
u√∂t16_t
)((
hc
->
x‚Äûr_√Än
 + 3U) / 4U);

1558 i‚Ä°(
√Än_w‚Äπds
 > (
USBx
->
HNPTXSTS
 & 0xFFFFU))

1561 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_NPTXFEM
;

1566 
EP_TYPE_INTR
:

1567 
EP_TYPE_ISOC
:

1568 
√Än_w‚Äπds
 = (
u√∂t16_t
)((
hc
->
x‚Äûr_√Än
 + 3U) / 4U);

1570 i‚Ä°(
√Än_w‚Äπds
 > (
USBx_HOST
->
HPTXSTS
 & 0xFFFFU))

1573 
USBx
->
GINTMSK
 |Ô£ø
USB_OTG_GINTMSK_PTXFEM
;

1582 ()
	`USB_Wr√¥ePack√´
(
USBx
, 
hc
->
x‚Äûr_buff
, hc->
ch_num
, (
u√∂t16_t
)hc->
x‚Äûr_√Än
);

1585  
HAL_OK
;

1586 
	}
}

1593 
u√∂t32_t
 
	$USB_HC_R√≥dI¬°√Æru¬±
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1595 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1597  ((
USBx_HOST
->
HAINT
) & 0xFFFFU);

1598 
	}
}

1607 
HAL_S√®tusTy‚â•Def
 
	$USB_HC_H√Üt
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
hc_num
)

1609 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1610 
u√∂t32_t
 
hÀôum
 = (u√∂t32_t)
hc_num
;

1611 
u√∂t32_t
 
cou¬°
 = 0U;

1612 
u√∂t32_t
 
HcEpTy‚â•
 = (
	`USBx_HC
(
hÀôum
)->
HCCHAR
 & 
USB_OTG_HCCHAR_EPTYP
) >> 18;

1615 i‚Ä°((
HcEpTy‚â•
 =Ô£ø
HCCHAR_CTRL
√ã|| (HcEpTy‚â• =Ô£ø
HCCHAR_BULK
))

1617 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_CHDIS
;

1619 i‚Ä°((
USBx
->
HNPTXSTS
 & (0xFFU << 16)) == 0U)

1621 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 &Ô£ø~
USB_OTG_HCCHAR_CHENA
;

1622 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1623 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 &Ô£ø~
USB_OTG_HCCHAR_EPDIR
;

1626 i‚Ä°(++
cou¬°
 > 1000U)

1630 } (
	`USBx_HC
(
hÀôum
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1634 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1639 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_CHDIS
;

1641 i‚Ä°((
USBx_HOST
->
HPTXSTS
 & (0xFFU << 16)) == 0U)

1643 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 &Ô£ø~
USB_OTG_HCCHAR_CHENA
;

1644 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1645 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 &Ô£ø~
USB_OTG_HCCHAR_EPDIR
;

1648 i‚Ä°(++
cou¬°
 > 1000U)

1652 } (
	`USBx_HC
(
hÀôum
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1656 
	`USBx_HC
(
hÀôum
)->
HCCHAR
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1660  
HAL_OK
;

1661 
	}
}

1670 
HAL_S√®tusTy‚â•Def
 
	$USB_DoP√∂g
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
, 
u√∂t8_t
 
ch_num
)

1672 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1673 
u√∂t32_t
 
chnum
 = (u√∂t32_t)
ch_num
;

1674 
u√∂t32_t
 
num_‚àëck√´s
 = 1U;

1675 
u√∂t32_t
 
tm¬•eg
;

1677 
	`USBx_HC
(
chnum
)->
HCTSIZ
 = ((
num_‚àëck√´s
 << 19√ã& 
USB_OTG_HCTSIZ_PKTCNT
) |

1678 
USB_OTG_HCTSIZ_DOPING
;

1681 
tm¬•eg
 = 
	`USBx_HC
(
chnum
)->
HCCHAR
;

1682 
tm¬•eg
 &Ô£ø~
USB_OTG_HCCHAR_CHDIS
;

1683 
tm¬•eg
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1684 
	`USBx_HC
(
chnum
)->
HCCHAR
 = 
tm¬•eg
;

1686  
HAL_OK
;

1687 
	}
}

1694 
HAL_S√®tusTy‚â•Def
 
	$USB_St‚Ä∫Ho¬∞
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1696 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1697 
u√∂t32_t
 
cou¬°
 = 0U;

1698 
u√∂t32_t
 
v√Üue
;

1699 
u√∂t32_t
 
i
;

1701 ()
	`USB_Di√üb√ÄGlob√ÜI¬°
(
USBx
);

1704 ()
	`USB_FlushTxFifo
(
USBx
, 0x10U);

1705 ()
	`USB_FlushRxFifo
(
USBx
);

1708 
i
 = 0U; i <= 15U; i++)

1710 
v√Üue
 = 
	`USBx_HC
(
i
)->
HCCHAR
;

1711 
v√Üue
 |Ô£ø
USB_OTG_HCCHAR_CHDIS
;

1712 
v√Üue
 &Ô£ø~
USB_OTG_HCCHAR_CHENA
;

1713 
v√Üue
 &Ô£ø~
USB_OTG_HCCHAR_EPDIR
;

1714 
	`USBx_HC
(
i
)->
HCCHAR
 = 
v√Üue
;

1718 
i
 = 0U; i <= 15U; i++)

1720 
v√Üue
 = 
	`USBx_HC
(
i
)->
HCCHAR
;

1721 
v√Üue
 |Ô£ø
USB_OTG_HCCHAR_CHDIS
;

1722 
v√Üue
 |Ô£ø
USB_OTG_HCCHAR_CHENA
;

1723 
v√Üue
 &Ô£ø~
USB_OTG_HCCHAR_EPDIR
;

1724 
	`USBx_HC
(
i
)->
HCCHAR
 = 
v√Üue
;

1728 i‚Ä°(++
cou¬°
 > 1000U)

1732 } (
	`USBx_HC
(
i
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1736 
USBx_HOST
->
HAINT
 = 0xFFFFFFFFU;

1737 
USBx
->
GINTSTS
 = 0xFFFFFFFFU;

1739 ()
	`USB_E¬´b√ÄGlob√ÜI¬°
(
USBx
);

1741  
HAL_OK
;

1742 
	}
}

1749 
HAL_S√®tusTy‚â•Def
 
	$USB_AÀòiv¬©eRem≈∏eWakeup
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1751 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1753 i‚Ä°((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

1756 
USBx_DEVICE
->
DCTL
 |Ô£ø
USB_OTG_DCTL_RWUSIG
;

1759  
HAL_OK
;

1760 
	}
}

1767 
HAL_S√®tusTy‚â•Def
 
	$USB_DeAÀòiv¬©eRem≈∏eWakeup
(
USB_OTG_Glob√ÜTy‚â•Def
 *
USBx
)

1769 
u√∂t32_t
 
USBx_BASE
 = (u√∂t32_t)
USBx
;

1772 
USBx_DEVICE
->
DCTL
 &Ô£ø~(
USB_OTG_DCTL_RWUSIG
);

1774  
HAL_OK
;

1775 
	}
}

1778 #i‚Ä°
def√∂ed
 (
USB
)

1786 
HAL_S√®tusTy‚â•Def
 
	$USB_C‚ÄπeIn√¥
(
USB_Ty‚â•Def
 *
USBx
, 
USB_CfgTy‚â•Def
 
cfg
)

1789 
	`UNUSED
(
USBx
);

1790 
	`UNUSED
(
cfg
);

1797  
HAL_OK
;

1798 
	}
}

1806 
HAL_S√®tusTy‚â•Def
 
	$USB_E¬´b√ÄGlob√ÜI¬°
(
USB_Ty‚â•Def
 *
USBx
)

1808 
u√∂t32_t
 
w√∂√£¬∫u¬±mask
;

1811 
USBx
->
ISTR
 = 0U;

1814 
w√∂√£¬∫u¬±mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 |

1815 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 |

1816 
USB_CNTR_SOFM
 | 
USB_CNTR_ESOFM
 |

1817 
USB_CNTR_RESETM
;

1820 
USBx
->
CNTR
 = (
u√∂t16_t
)
w√∂√£¬∫u¬±mask
;

1822  
HAL_OK
;

1823 
	}
}

1831 
HAL_S√®tusTy‚â•Def
 
	$USB_Di√üb√ÄGlob√ÜI¬°
(
USB_Ty‚â•Def
 *
USBx
)

1833 
u√∂t32_t
 
w√∂√£¬∫u¬±mask
;

1836 
w√∂√£¬∫u¬±mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 |

1837 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 |

1838 
USB_CNTR_SOFM
 | 
USB_CNTR_ESOFM
 |

1839 
USB_CNTR_RESETM
;

1842 
USBx
->
CNTR
 &Ô£ø(
u√∂t16_t
)(~
w√∂√£¬∫u¬±mask
);

1844  
HAL_OK
;

1845 
	}
}

1855 
HAL_S√®tusTy‚â•Def
 
	$USB_S√´Cu¬∫√≠tMode
(
USB_Ty‚â•Def
 *
USBx
, 
USB_ModeTy‚â•Def
 
mode
)

1858 
	`UNUSED
(
USBx
);

1859 
	`UNUSED
(
mode
);

1865  
HAL_OK
;

1866 
	}
}

1876 
HAL_S√®tusTy‚â•Def
 
	$USB_DevIn√¥
(
USB_Ty‚â•Def
 *
USBx
, 
USB_CfgTy‚â•Def
 
cfg
)

1879 
	`UNUSED
(
cfg
);

1883 
USBx
->
CNTR
 = (
u√∂t16_t
)
USB_CNTR_FRES
;

1886 
USBx
->
CNTR
 = 0U;

1889 
USBx
->
ISTR
 = 0U;

1892 
USBx
->
BTABLE
 = 
BTABLE_ADDRESS
;

1894  
HAL_OK
;

1895 
	}
}

1905 
HAL_S√®tusTy‚â•Def
 
	$USB_FlushTxFifo
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t32_t
 
num
)

1908 
	`UNUSED
(
USBx
);

1909 
	`UNUSED
(
num
);

1916  
HAL_OK
;

1917 
	}
}

1924 
HAL_S√®tusTy‚â•Def
 
	$USB_FlushRxFifo
(
USB_Ty‚â•Def
 *
USBx
)

1927 
	`UNUSED
(
USBx
);

1934  
HAL_OK
;

1935 
	}
}

1943 
HAL_S√®tusTy‚â•Def
 
	$USB_AÀòiv¬©eEndpo√∂t
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
)

1945 
HAL_S√®tusTy‚â•Def
 
¬™t
 = 
HAL_OK
;

1946 
u√∂t16_t
 
wEpRegV√Ü
;

1948 
wEpRegV√Ü
 = 
	`PCD_GET_ENDPOINT
(
USBx
, 
√Ø
->
num
√ã& 
USB_EP_T_MASK
;

1951 
√Ø
->
ty‚â•
)

1953 
EP_TYPE_CTRL
:

1954 
wEpRegV√Ü
 |Ô£ø
USB_EP_CONTROL
;

1957 
EP_TYPE_BULK
:

1958 
wEpRegV√Ü
 |Ô£ø
USB_EP_BULK
;

1961 
EP_TYPE_INTR
:

1962 
wEpRegV√Ü
 |Ô£ø
USB_EP_INTERRUPT
;

1965 
EP_TYPE_ISOC
:

1966 
wEpRegV√Ü
 |Ô£ø
USB_EP_ISOCHRONOUS
;

1970 
¬™t
 = 
HAL_ERROR
;

1974 
	`PCD_SET_ENDPOINT
(
USBx
, 
√Ø
->
num
, (
wEpRegV√Ü
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
));

1976 
	`PCD_SET_EP_ADDRESS
(
USBx
, 
√Ø
->
num
,√âp->num);

1978 i‚Ä°(
√Ø
->
doub√Äbuf‚Äûr
 == 0U)

1980 i‚Ä°(
√Ø
->
is_√∂
 != 0U)

1983 
	`PCD_SET_EP_TX_ADDRESS
(
USBx
, 
√Ø
->
num
,√âp->
pm√òd¬™ss
);

1984 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

1986 i‚Ä°(
√Ø
->
ty‚â•
 !Ô£ø
EP_TYPE_ISOC
)

1989 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_NAK
);

1994 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_DIS
);

2000 
	`PCD_SET_EP_RX_ADDRESS
(
USBx
, 
√Ø
->
num
,√âp->
pm√òd¬™ss
);

2003 
	`PCD_SET_EP_RX_CNT
(
USBx
, 
√Ø
->
num
,√âp->
max‚àëck√´
);

2004 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2007 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_VALID
);

2014 
	`PCD_SET_EP_DBUF
(
USBx
, 
√Ø
->
num
);

2017 
	`PCD_SET_EP_DBUF_ADDR
(
USBx
, 
√Ø
->
num
,√âp->
pm√òddr0
,√âp->
pm√òddr1
);

2019 i‚Ä°(
√Ø
->
is_√∂
 == 0U)

2022 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2023 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2025 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_VALID
);

2026 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_DIS
);

2031 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2032 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2034 i‚Ä°(
√Ø
->
ty‚â•
 !Ô£ø
EP_TYPE_ISOC
)

2037 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_NAK
);

2042 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_DIS
);

2045 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_DIS
);

2049  
¬™t
;

2050 
	}
}

2058 
HAL_S√®tusTy‚â•Def
 
	$USB_D√≥Àòiv¬©eEndpo√∂t
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
)

2060 i‚Ä°(
√Ø
->
doub√Äbuf‚Äûr
 == 0U)

2062 i‚Ä°(
√Ø
->
is_√∂
 != 0U)

2064 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2067 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_DIS
);

2071 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2074 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_DIS
);

2080 i‚Ä°(
√Ø
->
is_√∂
 == 0U)

2083 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2084 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2087 
	`PCD_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2089 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_DIS
);

2090 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_DIS
);

2095 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2096 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2097 
	`PCD_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2100 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_DIS
);

2101 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_DIS
);

2105  
HAL_OK
;

2106 
	}
}

2114 
HAL_S√®tusTy‚â•Def
 
	$USB_EPS√®œÄX‚Äûr
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
)

2116 
u√∂t32_t
 
√Än
;

2117 
u√∂t16_t
 
pmabuf‚Äûr
;

2118 
u√∂t16_t
 
wEPV√Ü
;

2121 i‚Ä°(
√Ø
->
is_√∂
 == 1U)

2124 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >√âp->
max‚àëck√´
)

2126 
√Än
 = 
√Ø
->
max‚àëck√´
;

2130 
√Än
 = 
√Ø
->
x‚Äûr_√Än
;

2134 i‚Ä°(
√Ø
->
doub√Äbuf‚Äûr
 == 0U)

2136 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
,√âp->
pm√òd¬™ss
, (
u√∂t16_t
)
√Än
);

2137 
	`PCD_SET_EP_TX_CNT
(
USBx
, 
√Ø
->
num
, 
√Än
);

2142 i‚Ä°(
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_BULK
)

2144 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 >√âp->
max‚àëck√´
)

2147 
	`PCD_SET_EP_DBUF
(
USBx
, 
√Ø
->
num
);

2150 
√Ø
->
x‚Äûr_√Än_db
 -Ô£ø
√Än
;

2153 i‚Ä°((
	`PCD_GET_ENDPOINT
(
USBx
, 
√Ø
->
num
√ã& 
USB_EP_DTOG_TX
) != 0U)

2156 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2157 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr1
;

2160 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
, 
pmabuf‚Äûr
, (
u√∂t16_t
)
√Än
);

2161 
√Ø
->
x‚Äûr_buff
 +Ô£ø
√Än
;

2163 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 >√âp->
max‚àëck√´
)

2165 
√Ø
->
x‚Äûr_√Än_db
 -Ô£ø
√Än
;

2169 
√Än
 = 
√Ø
->
x‚Äûr_√Än_db
;

2170 
√Ø
->
x‚Äûr_√Än_db
 = 0U;

2174 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2175 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr0
;

2178 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
, 
pmabuf‚Äûr
, (
u√∂t16_t
)
√Än
);

2183 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2184 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr0
;

2187 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
, 
pmabuf‚Äûr
, (
u√∂t16_t
)
√Än
);

2188 
√Ø
->
x‚Äûr_buff
 +Ô£ø
√Än
;

2190 i‚Ä°(
√Ø
->
x‚Äûr_√Än_db
 >√âp->
max‚àëck√´
)

2192 
√Ø
->
x‚Äûr_√Än_db
 -Ô£ø
√Än
;

2196 
√Än
 = 
√Ø
->
x‚Äûr_√Än_db
;

2197 
√Ø
->
x‚Äûr_√Än_db
 = 0U;

2201 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2202 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr1
;

2205 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
, 
pmabuf‚Äûr
, (
u√∂t16_t
)
√Än
);

2211 
√Än
 = 
√Ø
->
x‚Äûr_√Än_db
;

2214 
	`PCD_CLEAR_EP_DBUF
(
USBx
, 
√Ø
->
num
);

2217 
	`PCD_SET_EP_TX_CNT
(
USBx
, 
√Ø
->
num
, 
√Än
);

2218 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr0
;

2221 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
, 
pmabuf‚Äûr
, (
u√∂t16_t
)
√Än
);

2229 i‚Ä°((
	`PCD_GET_ENDPOINT
(
USBx
, 
√Ø
->
num
√ã& 
USB_EP_DTOG_TX
) != 0U)

2232 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2233 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr1
;

2238 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2239 
pmabuf‚Äûr
 = 
√Ø
->
pm√òddr0
;

2242 
	`USB_Wr√¥ePMA
(
USBx
, 
√Ø
->
x‚Äûr_buff
, 
pmabuf‚Äûr
, (
u√∂t16_t
)
√Än
);

2243 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
);

2247 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_VALID
);

2251 i‚Ä°(
√Ø
->
doub√Äbuf‚Äûr
 == 0U)

2254 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >√âp->
max‚àëck√´
)

2256 
√Än
 = 
√Ø
->
max‚àëck√´
;

2257 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
√Än
;

2261 
√Än
 = 
√Ø
->
x‚Äûr_√Än
;

2262 
√Ø
->
x‚Äûr_√Än
 = 0U;

2265 
	`PCD_SET_EP_RX_CNT
(
USBx
, 
√Ø
->
num
, 
√Än
);

2271 i‚Ä°(
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_BULK
)

2273 
	`PCD_SET_EP_DBUF_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
,√âp->
max‚àëck√´
);

2276 i‚Ä°(
√Ø
->
x‚Äûr_cou¬°
 != 0U)

2279 
wEPV√Ü
 = 
	`PCD_GET_ENDPOINT
(
USBx
, 
√Ø
->
num
);

2282 i‚Ä°((((
wEPV√Ü
 & 
USB_EP_DTOG_RX
√ã!Ô£ø0U√ã&& ((wEPV√Ü & 
USB_EP_DTOG_TX
) != 0U)) ||

2283 (((
wEPV√Ü
 & 
USB_EP_DTOG_RX
√ã=Ô£ø0U√ã&& ((wEPV√Ü & 
USB_EP_DTOG_TX
) == 0U)))

2285 
	`PCD_F¬™eU¬£rBuf‚Äûr
(
USBx
, 
√Ø
->
num
, 0U);

2290 i‚Ä°(
√Ø
->
ty‚â•
 =Ô£ø
EP_TYPE_ISOC
)

2293 i‚Ä°(
√Ø
->
x‚Äûr_√Än
 >√âp->
max‚àëck√´
)

2295 
√Än
 = 
√Ø
->
max‚àëck√´
;

2296 
√Ø
->
x‚Äûr_√Än
 -Ô£ø
√Än
;

2300 
√Än
 = 
√Ø
->
x‚Äûr_√Än
;

2301 
√Ø
->
x‚Äûr_√Än
 = 0U;

2303 
	`PCD_SET_EP_DBUF_CNT
(
USBx
, 
√Ø
->
num
,√âp->
is_√∂
, 
√Än
);

2307  
HAL_ERROR
;

2311 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_VALID
);

2314  
HAL_OK
;

2315 
	}
}

2324 
HAL_S√®tusTy‚â•Def
 
	$USB_EPS√´S√®≈í
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
)

2326 i‚Ä°(
√Ø
->
is_√∂
 != 0U)

2328 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_STALL
);

2332 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_STALL
);

2335  
HAL_OK
;

2336 
	}
}

2344 
HAL_S√®tusTy‚â•Def
 
	$USB_EPC√Ä¬®S√®≈í
(
USB_Ty‚â•Def
 *
USBx
, 
USB_EPTy‚â•Def
 *
√Ø
)

2346 i‚Ä°(
√Ø
->
doub√Äbuf‚Äûr
 == 0U)

2348 i‚Ä°(
√Ø
->
is_√∂
 != 0U)

2350 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
√Ø
->
num
);

2352 i‚Ä°(
√Ø
->
ty‚â•
 !Ô£ø
EP_TYPE_ISOC
)

2355 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_TX_NAK
);

2360 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
√Ø
->
num
);

2363 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
√Ø
->
num
, 
USB_EP_RX_VALID
);

2367  
HAL_OK
;

2368 
	}
}

2375 
HAL_S√®tusTy‚â•Def
 
	$USB_St‚Ä∫DeviÀö
(
USB_Ty‚â•Def
 *
USBx
)

2378 
USBx
->
CNTR
 = (
u√∂t16_t
)
USB_CNTR_FRES
;

2381 
USBx
->
ISTR
 = 0U;

2384 
USBx
->
CNTR
 = (
u√∂t16_t
)(
USB_CNTR_FRES
 | 
USB_CNTR_PDWN
);

2386  
HAL_OK
;

2387 
	}
}

2396 
HAL_S√®tusTy‚â•Def
 
	$USB_S√´DevAdd¬™ss
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
add¬™ss
)

2398 i‚Ä°(
add¬™ss
 == 0U)

2401 
USBx
->
DADDR
 = (
u√∂t16_t
)
USB_DADDR_EF
;

2404  
HAL_OK
;

2405 
	}
}

2412 
HAL_S√®tusTy‚â•Def
 
	$USB_DevC‚ÅÑ‚àöÀò
(
USB_Ty‚â•Def
 *
USBx
)

2415 
	`UNUSED
(
USBx
);

2422  
HAL_OK
;

2423 
	}
}

2430 
HAL_S√®tusTy‚â•Def
 
	$USB_DevDisc‚ÅÑ‚àöÀò
(
USB_Ty‚â•Def
 *
USBx
)

2433 
	`UNUSED
(
USBx
);

2440  
HAL_OK
;

2441 
	}
}

2448 
u√∂t32_t
 
	$USB_R√≥dI¬°√Æru¬±s
(
USB_Ty‚â•Def
 *
USBx
)

2450 
u√∂t32_t
 
tm¬•eg
;

2452 
tm¬•eg
 = 
USBx
->
ISTR
;

2453  
tm¬•eg
;

2454 
	}
}

2461 
u√∂t32_t
 
	$USB_R√≥dDevA≈íOutEpI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
)

2464 
	`UNUSED
(
USBx
);

2470 
	}
}

2477 
u√∂t32_t
 
	$USB_R√≥dDevA≈íInEpI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
)

2480 
	`UNUSED
(
USBx
);

2486 
	}
}

2495 
u√∂t32_t
 
	$USB_R√≥dDevOutEPI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
)

2498 
	`UNUSED
(
USBx
);

2499 
	`UNUSED
(
√Ønum
);

2505 
	}
}

2514 
u√∂t32_t
 
	$USB_R√≥dDevInEPI¬°√Æru¬±
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 
√Ønum
)

2517 
	`UNUSED
(
USBx
);

2518 
	`UNUSED
(
√Ønum
);

2524 
	}
}

2532 
	$USB_C√Ä¬®I¬°√Æru¬±s
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t32_t
 
√∂√£¬∫u¬±
)

2535 
	`UNUSED
(
USBx
);

2536 
	`UNUSED
(
√∂√£¬∫u¬±
);

2541 
	}
}

2549 
HAL_S√®tusTy‚â•Def
 
	$USB_EP0_OutS√®œÄ
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
p¬£tup
)

2552 
	`UNUSED
(
USBx
);

2553 
	`UNUSED
(
p¬£tup
);

2558  
HAL_OK
;

2559 
	}
}

2566 
HAL_S√®tusTy‚â•Def
 
	$USB_AÀòiv¬©eRem≈∏eWakeup
(
USB_Ty‚â•Def
 *
USBx
)

2568 
USBx
->
CNTR
 |Ô£ø(
u√∂t16_t
)
USB_CNTR_RESUME
;

2570  
HAL_OK
;

2571 
	}
}

2578 
HAL_S√®tusTy‚â•Def
 
	$USB_DeAÀòiv¬©eRem≈∏eWakeup
(
USB_Ty‚â•Def
 *
USBx
)

2580 
USBx
->
CNTR
 &Ô£ø(
u√∂t16_t
)(~
USB_CNTR_RESUME
);

2582  
HAL_OK
;

2583 
	}
}

2593 
	$USB_Wr√¥ePMA
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
pbU¬ßBuf
, 
u√∂t16_t
 
wPMABufAddr
, u√∂t16_√†
wNBy√£s
)

2595 
u√∂t32_t
 
n
 = ((u√∂t32_t)
wNBy√£s
 + 1U) >> 1;

2596 
u√∂t32_t
 
Ba¬£Addr
 = (u√∂t32_t)
USBx
;

2597 
u√∂t32_t
 
i
, 
√£mp1
, 
√£mp2
;

2598 
__IO
 
u√∂t16_t
 *
pdwV√Ü
;

2599 
u√∂t8_t
 *
pBuf
 = 
pbU¬ßBuf
;

2601 
pdwV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
Ba¬£Addr
 + 0x400U + ((
u√∂t32_t
)
wPMABufAddr
 * 
PMA_ACCESS
));

2603 
i
 = 
n
; i != 0U; i--)

2605 
√£mp1
 = *
pBuf
;

2606 
pBuf
++;

2607 
√£mp2
 = 
√£mp1
 | ((
u√∂t16_t
)((u√∂t16_t√ã*
pBuf
 << 8));

2608 *
pdwV√Ü
 = (
u√∂t16_t
)
√£mp2
;

2609 
pdwV√Ü
++;

2611 #i‚Ä°
PMA_ACCESS
 > 1U

2612 
pdwV√Ü
++;

2615 
pBuf
++;

2617 
	}
}

2627 
	$USB_R√≥dPMA
(
USB_Ty‚â•Def
 *
USBx
, 
u√∂t8_t
 *
pbU¬ßBuf
, 
u√∂t16_t
 
wPMABufAddr
, u√∂t16_√†
wNBy√£s
)

2629 
u√∂t32_t
 
n
 = (u√∂t32_t)
wNBy√£s
 >> 1;

2630 
u√∂t32_t
 
Ba¬£Addr
 = (u√∂t32_t)
USBx
;

2631 
u√∂t32_t
 
i
, 
√£mp
;

2632 
__IO
 
u√∂t16_t
 *
pdwV√Ü
;

2633 
u√∂t8_t
 *
pBuf
 = 
pbU¬ßBuf
;

2635 
pdwV√Ü
 = (
__IO
 
u√∂t16_t
 *)(
Ba¬£Addr
 + 0x400U + ((
u√∂t32_t
)
wPMABufAddr
 * 
PMA_ACCESS
));

2637 
i
 = 
n
; i != 0U; i--)

2639 
√£mp
 = *(
__IO
 
u√∂t16_t
 *)
pdwV√Ü
;

2640 
pdwV√Ü
++;

2641 *
pBuf
 = (
u√∂t8_t
)((
√£mp
 >> 0) & 0xFFU);

2642 
pBuf
++;

2643 *
pBuf
 = (
u√∂t8_t
)((
√£mp
 >> 8) & 0xFFU);

2644 
pBuf
++;

2646 #i‚Ä°
PMA_ACCESS
 > 1U

2647 
pdwV√Ü
++;

2651 i‚Ä°((
wNBy√£s
 % 2U) != 0U)

2653 
√£mp
 = *
pdwV√Ü
;

2654 *
pBuf
 = (
u√∂t8_t
)((
√£mp
 >> 0) & 0xFFU);

2656 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_utils.c

21 
	~"¬∞m32f1xx_≈í_rcc.h
"

22 
	~"¬∞m32f1xx_≈í_ut√ªs.h
"

23 
	~"¬∞m32f1xx_≈í_sy¬∞em.h
"

24 #ifde‚Ä° 
USE_FULL_ASSERT


25 
	~"¬∞m32_as¬£œÄ.h
"

27 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

46 
	#UTILS_PLL_OUTPUT_MAX
 
RCC_MAX_FREQUENCY


	)

49 
	#UTILS_HSE_FREQUENCY_MIN
 
RCC_HSE_MIN


	)

50 
	#UTILS_HSE_FREQUENCY_MAX
 
RCC_HSE_MAX


	)

53 #i‚Ä°
def√∂ed
(
FLASH_ACR_LATENCY
)

54 
	#UTILS_LATENCY1_FREQ
 24000000U

	)

55 
	#UTILS_LATENCY2_FREQ
 48000000U

	)

66 
	#IS_LL_UTILS_SYSCLK_DIV
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_SYSCLK_DIV_1
) \

67 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_2
) \

68 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_4
) \

69 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_8
) \

70 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_16
) \

71 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_64
) \

72 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_128
) \

73 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_256
) \

74 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_SYSCLK_DIV_512
))

	)

76 
	#IS_LL_UTILS_APB1_DIV
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_APB1_DIV_1
) \

77 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB1_DIV_2
) \

78 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB1_DIV_4
) \

79 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB1_DIV_8
) \

80 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB1_DIV_16
))

	)

82 
	#IS_LL_UTILS_APB2_DIV
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_APB2_DIV_1
) \

83 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB2_DIV_2
) \

84 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB2_DIV_4
) \

85 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB2_DIV_8
) \

86 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_APB2_DIV_16
))

	)

88 #i‚Ä°
def√∂ed
(
RCC_CFGR_PLLMULL6_5
)

89 
	#IS_LL_UTILS_PLLMUL_VALUE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_PLL_MUL_4
) \

90 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_5
) \

91 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_6
) \

92 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_7
) \

93 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_8
) \

94 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_9
) \

95 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_6_5
))

	)

97 
	#IS_LL_UTILS_PLLMUL_VALUE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_PLL_MUL_2
) \

98 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_3
) \

99 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_4
) \

100 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_5
) \

101 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_6
) \

102 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_7
) \

103 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_8
) \

104 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_9
) \

105 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_10
) \

106 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_11
) \

107 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_12
) \

108 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_13
) \

109 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_14
) \

110 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_15
) \

111 || ((
__VALUE__
√ã=Ô£ø
LL_RCC_PLL_MUL_16
))

	)

114 #i‚Ä°
def√∂ed
(
RCC_CFGR2_PREDIV1
)

115 
	#IS_LL_UTILS_PREDIV_VALUE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_1
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_2
) || \

116 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_3
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_4
) || \

117 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_5
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_6
) || \

118 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_7
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_8
) || \

119 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_9
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_10
) || \

120 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_11
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_12
) || \

121 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_13
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_14
) || \

122 ((
__VALUE__
√ã=Ô£ø
LL_RCC_PREDIV_DIV_15
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_16
))

	)

124 
	#IS_LL_UTILS_PREDIV_VALUE
(
__VALUE__
√ã(((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_1
√ã|| ((__VALUE__√ã=Ô£ø
LL_RCC_PREDIV_DIV_2
))

	)

127 
	#IS_LL_UTILS_PLL_FREQUENCY
(
__VALUE__
√ã((__VALUE__√ã<Ô£ø
UTILS_PLL_OUTPUT_MAX
)

	)

130 
	#IS_LL_UTILS_HSE_BYPASS
(
__STATE__
√ã(((__STATE__√ã=Ô£ø
LL_UTILS_HSEBYPASS_ON
) \

131 || ((
__STATE__
√ã=Ô£ø
LL_UTILS_HSEBYPASS_OFF
))

	)

133 
	#IS_LL_UTILS_HSE_FREQUENCY
(
__FREQUENCY__
√ã(((__FREQUENCY__√ã>Ô£ø
UTILS_HSE_FREQUENCY_MIN
√ã&& ((__FREQUENCY__√ã<Ô£ø
UTILS_HSE_FREQUENCY_MAX
))

	)

141 
u√∂t32_t
 
UTILS_G√´PLLOu√ßutF¬™qu√≠cy
(u√∂t32_√†
PLL_I‚âàutF¬™qu√≠cy
,

142 
LL_UTILS_PLLIn√¥Ty‚â•Def
 *
UTILS_PLLIn√¥S√•uÀò
);

143 
E¬∫‚ÄπS√®tus
 
UTILS_E¬´b√ÄPLLAndSw√¥chSy¬∞em
(
u√∂t32_t
 
SYSCLK_F¬™qu√≠cy
, 
LL_UTILS_ClkIn√¥Ty‚â•Def
 *
UTILS_ClkIn√¥S√•uÀò
);

144 
E¬∫‚ÄπS√®tus
 
UTILS_PLL_IsBusy
();

166 
	$LL_In√¥1msTick
(
u√∂t32_t
 
HCLKF¬™qu√≠cy
)

169 
	`LL_In√¥Tick
(
HCLKF¬™qu√≠cy
, 1000U);

170 
	}
}

182 
	$LL_mD√±ay
(
u√∂t32_t
 
D√±ay
)

184 
__IO
 
u√∂t32_t
 
tmp
 = 
SysTick
->
CTRL
;

186 (()
tmp
);

189 i‚Ä°(
D√±ay
 < 
LL_MAX_DELAY
)

191 
D√±ay
++;

194 
D√±ay
)

196 i‚Ä°((
SysTick
->
CTRL
 & 
SysTick_CTRL_COUNTFLAG_Msk
) != 0U)

198 
D√±ay
--;

201 
	}
}

240 
	$LL_S√´Sy¬∞emC‚ÄπeClock
(
u√∂t32_t
 
HCLKF¬™qu√≠cy
)

243 
Sy¬∞emC‚ÄπeClock
 = 
HCLKF¬™qu√≠cy
;

244 
	}
}

254 #i‚Ä°
def√∂ed
(
FLASH_ACR_LATENCY
)

255 
E¬∫‚ÄπS√®tus
 
	$LL_S√´F≈ìshL¬©√≠cy
(
u√∂t32_t
 
F¬™qu√≠cy
)

257 
u√∂t32_t
 
timeout
;

258 
u√∂t32_t
 
g√´≈ì√£ncy
;

259 
u√∂t32_t
 
≈ì√£ncy
 = 
LL_FLASH_LATENCY_0
;

260 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

263 i‚Ä°(
F¬™qu√≠cy
 == 0U)

265 
¬∞¬©us
 = 
ERROR
;

269 i‚Ä°(
F¬™qu√≠cy
 > 
UTILS_LATENCY2_FREQ
)

272 
≈ì√£ncy
 = 
LL_FLASH_LATENCY_2
;

276 i‚Ä°(
F¬™qu√≠cy
 > 
UTILS_LATENCY1_FREQ
)

279 
≈ì√£ncy
 = 
LL_FLASH_LATENCY_1
;

284 
≈ì√£ncy
 = 
LL_FLASH_LATENCY_0
;

288 i‚Ä°(
¬∞¬©us
 !Ô£ø
ERROR
)

290 
	`LL_FLASH_S√´L¬©√≠cy
(
≈ì√£ncy
);

294 
timeout
 = 2;

298 
g√´≈ì√£ncy
 = 
	`LL_FLASH_G√´L¬©√≠cy
();

299 
timeout
--;

300 } (
g√´≈ì√£ncy
 !Ô£ø
≈ì√£ncy
√ã&& (
timeout
 > 0));

302 if(
g√´≈ì√£ncy
 !Ô£ø
≈ì√£ncy
)

304 
¬∞¬©us
 = 
ERROR
;

308 
¬∞¬©us
 = 
SUCCESS
;

313  
¬∞¬©us
;

314 
	}
}

334 
E¬∫‚ÄπS√®tus
 
	$LL_PLL_C‚ÅÑfigSy¬∞emClock_HSI
(
LL_UTILS_PLLIn√¥Ty‚â•Def
 *
UTILS_PLLIn√¥S√•uÀò
,

335 
LL_UTILS_ClkIn√¥Ty‚â•Def
 *
UTILS_ClkIn√¥S√•uÀò
)

337 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

338 
u√∂t32_t
 
‚àÇl‚Ä∞eq
 = 0U;

341 i‚Ä°(
	`UTILS_PLL_IsBusy
(√ã=Ô£ø
SUCCESS
)

343 #i‚Ä°
	`def√∂ed
(
RCC_PLLSRC_PREDIV1_SUPPORT
)

345 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_PREDIV_VALUE
(
UTILS_PLLIn√¥S√•uÀò
->
PLLDiv
));

348 
UTILS_PLLIn√¥S√•uÀò
->
P¬™div
 = 
LL_RCC_PREDIV_DIV_2
;

351 
‚àÇl‚Ä∞eq
 = 
	`UTILS_G√´PLLOu√ßutF¬™qu√≠cy
(
HSI_VALUE
, 
UTILS_PLLIn√¥S√•uÀò
);

354 i‚Ä°(
	`LL_RCC_HSI_IsR√≥dy
() != 1U)

356 
	`LL_RCC_HSI_E¬´b√Ä
();

357 
	`LL_RCC_HSI_IsR√≥dy
() != 1U)

364 
	`LL_RCC_PLL_C‚ÅÑfigDoma√∂_SYS
(
LL_RCC_PLLSOURCE_HSI_DIV_2
, 
UTILS_PLLIn√¥S√•uÀò
->
PLLMul
);

367 
¬∞¬©us
 = 
	`UTILS_E¬´b√ÄPLLAndSw√¥chSy¬∞em
(
‚àÇl‚Ä∞eq
, 
UTILS_ClkIn√¥S√•uÀò
);

372 
¬∞¬©us
 = 
ERROR
;

375  
¬∞¬©us
;

376 
	}
}

399 
E¬∫‚ÄπS√®tus
 
	$LL_PLL_C‚ÅÑfigSy¬∞emClock_HSE
(
u√∂t32_t
 
HSEF¬™qu√≠cy
, u√∂t32_√†
HSEBy‚àëss
,

400 
LL_UTILS_PLLIn√¥Ty‚â•Def
 *
UTILS_PLLIn√¥S√•uÀò
, 
LL_UTILS_ClkIn√¥Ty‚â•Def
 *
UTILS_ClkIn√¥S√•uÀò
)

402 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

403 
u√∂t32_t
 
‚àÇl‚Ä∞eq
 = 0U;

406 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_HSE_FREQUENCY
(
HSEF¬™qu√≠cy
));

407 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_HSE_BYPASS
(
HSEBy‚àëss
));

410 i‚Ä°(
	`UTILS_PLL_IsBusy
(√ã=Ô£ø
SUCCESS
)

412 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_PREDIV_VALUE
(
UTILS_PLLIn√¥S√•uÀò
->
P¬™div
));

415 
‚àÇl‚Ä∞eq
 = 
	`UTILS_G√´PLLOu√ßutF¬™qu√≠cy
(
HSEF¬™qu√≠cy
, 
UTILS_PLLIn√¥S√•uÀò
);

418 i‚Ä°(
	`LL_RCC_HSE_IsR√≥dy
() != 1U)

421 i‚Ä°(
HSEBy‚àëss
 =Ô£ø
LL_UTILS_HSEBYPASS_ON
)

423 
	`LL_RCC_HSE_E¬´b√ÄBy‚àëss
();

427 
	`LL_RCC_HSE_Di√üb√ÄBy‚àëss
();

431 
	`LL_RCC_HSE_E¬´b√Ä
();

432 
	`LL_RCC_HSE_IsR√≥dy
() != 1U)

439 
	`LL_RCC_PLL_C‚ÅÑfigDoma√∂_SYS
((
RCC_CFGR_PLLSRC
 | 
UTILS_PLLIn√¥S√•uÀò
->
P¬™div
), UTILS_PLLIn√¥S√•uÀò->
PLLMul
);

442 
¬∞¬©us
 = 
	`UTILS_E¬´b√ÄPLLAndSw√¥chSy¬∞em
(
‚àÇl‚Ä∞eq
, 
UTILS_ClkIn√¥S√•uÀò
);

447 
¬∞¬©us
 = 
ERROR
;

450  
¬∞¬©us
;

451 
	}
}

471 
u√∂t32_t
 
	$UTILS_G√´PLLOu√ßutF¬™qu√≠cy
(
u√∂t32_t
 
PLL_I‚âàutF¬™qu√≠cy
, 
LL_UTILS_PLLIn√¥Ty‚â•Def
 *
UTILS_PLLIn√¥S√•uÀò
)

473 
u√∂t32_t
 
‚àÇl‚Ä∞eq
 = 0U;

476 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_PLLMUL_VALUE
(
UTILS_PLLIn√¥S√•uÀò
->
PLLMul
));

479 #i‚Ä°
	`def√∂ed
 (
RCC_CFGR2_PREDIV1
)

480 
‚àÇl‚Ä∞eq
 = 
	`__LL_RCC_CALC_PLLCLK_FREQ
(
PLL_I‚âàutF¬™qu√≠cy
 / (
UTILS_PLLIn√¥S√•uÀò
->
P¬™div
 + 1U), UTILS_PLLIn√¥S√•uÀò->
PLLMul
);

482 
‚àÇl‚Ä∞eq
 = 
	`__LL_RCC_CALC_PLLCLK_FREQ
(
PLL_I‚âàutF¬™qu√≠cy
 / ((
UTILS_PLLIn√¥S√•uÀò
->
P¬™div
 >> 
RCC_CFGR_PLLXTPRE_Pos
√ã+ 1U), UTILS_PLLIn√¥S√•uÀò->
PLLMul
);

484 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_PLL_FREQUENCY
(
‚àÇl‚Ä∞eq
));

486  
‚àÇl‚Ä∞eq
;

487 
	}
}

495 
E¬∫‚ÄπS√®tus
 
	$UTILS_PLL_IsBusy
()

497 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

500 i‚Ä°(
	`LL_RCC_PLL_IsR√≥dy
() != 0U)

503 
¬∞¬©us
 = 
ERROR
;

505 #i‚Ä°
	`def√∂ed
(
RCC_PLL2_SUPPORT
)

507 i‚Ä°(
	`LL_RCC_PLL2_IsR√≥dy
() != 0U)

510 
¬∞¬©us
 = 
ERROR
;

514 #i‚Ä°
	`def√∂ed
(
RCC_PLLI2S_SUPPORT
)

516 i‚Ä°(
	`LL_RCC_PLLI2S_IsR√≥dy
() != 0U)

519 
¬∞¬©us
 = 
ERROR
;

523  
¬∞¬©us
;

524 
	}
}

535 
E¬∫‚ÄπS√®tus
 
	$UTILS_E¬´b√ÄPLLAndSw√¥chSy¬∞em
(
u√∂t32_t
 
SYSCLK_F¬™qu√≠cy
, 
LL_UTILS_ClkIn√¥Ty‚â•Def
 *
UTILS_ClkIn√¥S√•uÀò
)

537 
E¬∫‚ÄπS√®tus
 
¬∞¬©us
 = 
SUCCESS
;

538 #i‚Ä°
	`def√∂ed
(
FLASH_ACR_LATENCY
)

539 
u√∂t32_t
 
sysÀõk_‚Ä∞equ√≠cy_cu¬∫√≠t
 = 0U;

542 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_SYSCLK_DIV
(
UTILS_ClkIn√¥S√•uÀò
->
AHBCLKDivid√Æ
));

543 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_APB1_DIV
(
UTILS_ClkIn√¥S√•uÀò
->
APB1CLKDivid√Æ
));

544 
	`as¬£œÄ_‚àë√∏m
(
	`IS_LL_UTILS_APB2_DIV
(
UTILS_ClkIn√¥S√•uÀò
->
APB2CLKDivid√Æ
));

546 #i‚Ä°
	`def√∂ed
(
FLASH_ACR_LATENCY
)

548 
sysÀõk_‚Ä∞equ√≠cy_cu¬∫√≠t
 = (
Sy¬∞emC‚ÄπeClock
 << 
AHBP¬™scTab√Ä
[
	`LL_RCC_G√´AHBP¬™sÀá√Är
(√ã>> 
RCC_CFGR_HPRE_Pos
]);

552 #i‚Ä°
	`def√∂ed
 (
FLASH_ACR_LATENCY
)

553 i‚Ä°(
sysÀõk_‚Ä∞equ√≠cy_cu¬∫√≠t
 < 
SYSCLK_F¬™qu√≠cy
)

556 
¬∞¬©us
 = 
	`LL_S√´F≈ìshL¬©√≠cy
(
SYSCLK_F¬™qu√≠cy
);

561 i‚Ä°(
¬∞¬©us
 =Ô£ø
SUCCESS
)

563 #i‚Ä°
	`def√∂ed
(
RCC_PLL2_SUPPORT
)

564 i‚Ä°(
	`LL_RCC_PLL_G√´Ma√∂SourÀö
(√ã!Ô£ø
LL_RCC_PLLSOURCE_HSI_DIV_2
)

567 
	`LL_RCC_PLL2_E¬´b√Ä
();

568 
	`LL_RCC_PLL2_IsR√≥dy
() != 1U)

575 
	`LL_RCC_PLL_E¬´b√Ä
();

576 
	`LL_RCC_PLL_IsR√≥dy
() != 1U)

582 
	`LL_RCC_S√´AHBP¬™sÀá√Är
(
UTILS_ClkIn√¥S√•uÀò
->
AHBCLKDivid√Æ
);

583 
	`LL_RCC_S√´SysClkSourÀö
(
LL_RCC_SYS_CLKSOURCE_PLL
);

584 
	`LL_RCC_G√´SysClkSourÀö
(√ã!Ô£ø
LL_RCC_SYS_CLKSOURCE_STATUS_PLL
)

590 
	`LL_RCC_S√´APB1P¬™sÀá√Är
(
UTILS_ClkIn√¥S√•uÀò
->
APB1CLKDivid√Æ
);

591 
	`LL_RCC_S√´APB2P¬™sÀá√Är
(
UTILS_ClkIn√¥S√•uÀò
->
APB2CLKDivid√Æ
);

595 #i‚Ä°
	`def√∂ed
 (
FLASH_ACR_LATENCY
)

596 i‚Ä°(
sysÀõk_‚Ä∞equ√≠cy_cu¬∫√≠t
 > 
SYSCLK_F¬™qu√≠cy
)

599 
¬∞¬©us
 = 
	`LL_S√´F≈ìshL¬©√≠cy
(
SYSCLK_F¬™qu√≠cy
);

604 i‚Ä°(
¬∞¬©us
 =Ô£ø
SUCCESS
)

606 
	`LL_S√´Sy¬∞emC‚ÄπeClock
(
	`__LL_RCC_CALC_HCLK_FREQ
(
SYSCLK_F¬™qu√≠cy
, 
UTILS_ClkIn√¥S√•uÀò
->
AHBCLKDivid√Æ
));

609  
¬∞¬©us
;

610 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\delay\delay.c

31 
	~"SYSTEM/sys/sys.h
"

32 
	~"SYSTEM/d√±ay/d√±ay.h
"

35 
u√∂t32_t
 
	gg_√Åc_us
 = 0;

38 #i‚Ä°
SYS_SUPPORT_OS


41 
	~"os.h
"

44 
u√∂t16_t
 
	gg_√Åc_ms
 = 0;

61 
	#d√±ay_o¬ßu¬¨√∂g
 
OSRu¬¨√∂g


	)

62 
	#d√±ay_o¬∞ick‚Ä¢√Æ¬£c
 
OS_TICKS_PER_SEC


	)

63 
	#d√±ay_os√∂√§e¬∞√∂g
 
OSI¬°Ne¬∞√∂g


	)

71 
	$d√±ay_osschedlock
()

73 
	`OSSchedLock
();

74 
	}
}

81 
	$d√±ay_osschedu‚àÜock
()

83 
	`OSSchedU‚àÜock
();

84 
	}
}

91 
	$d√±ay_o¬∞imedly
(
u√∂t32_t
 
ticks
)

93 
	`OSTimeDly
(
ticks
);

94 
	}
}

101 
	$SysTick_H‚Ñ¢d√Är
()

104 i‚Ä°(
d√±ay_o¬ßu¬¨√∂g
 =Ô£ø
OS_TRUE
)

107 
	`OS_CPU_SysTickH‚Ñ¢d√Är
();

109 
	`HAL_IncTick
();

110 
	}
}

118 
	$d√±ay_√∂√¥
(
u√∂t16_t
 
sysÀõk
)

120 #i‚Ä°
SYS_SUPPORT_OS


121 
u√∂t32_t
 
¬™lÔ¨Çd
;

123 
g_√Åc_us
 = 
sysÀõk
;

124 #i‚Ä°
SYS_SUPPORT_OS


125 
¬™lÔ¨Çd
 = 
sysÀõk
;

126 
¬™lÔ¨Çd
 *Ô£ø1000000 / 
d√±ay_o¬∞ick‚Ä¢√Æ¬£c
;

129 
g_√Åc_ms
 = 1000 / 
d√±ay_o¬∞ick‚Ä¢√Æ¬£c
;

130 
SysTick
->
CTRL
 |= 1 << 1;

131 
SysTick
->
LOAD
 = 
¬™lÔ¨Çd
;

132 
SysTick
->
CTRL
 |= 1 << 0;

134 
	}
}

143 
	$d√±ay_us
(
u√∂t32_t
 
nus
)

145 
u√∂t32_t
 
ticks
;

146 
u√∂t32_t
 
tÔ¨Åd
, 
√§ow
, 
tÀôt
 = 0;

147 
u√∂t32_t
 
¬™lÔ¨Çd
 = 
SysTick
->
LOAD
;

148 
ticks
 = 
nus
 * 
g_√Åc_us
;

150 #i‚Ä°
SYS_SUPPORT_OS


151 
	`d√±ay_osschedlock
();

154 
tÔ¨Åd
 = 
SysTick
->
VAL
;

157 
√§ow
 = 
SysTick
->
VAL
;

158 i‚Ä°(
√§ow
 !Ô£ø
tÔ¨Åd
)

160 i‚Ä°(
√§ow
 < 
tÔ¨Åd
)

162 
tÀôt
 +Ô£ø
tÔ¨Åd
 - 
√§ow
;

166 
tÀôt
 +Ô£ø
¬™lÔ¨Çd
 - 
√§ow
 + 
tÔ¨Åd
;

168 
tÔ¨Åd
 = 
√§ow
;

169 i‚Ä°(
tÀôt
 >Ô£ø
ticks
)

176 #i‚Ä°
SYS_SUPPORT_OS


177 
	`d√±ay_osschedu‚àÜock
();

180 
	}
}

187 
	$d√±ay_ms
(
u√∂t16_t
 
nms
)

190 #i‚Ä°
SYS_SUPPORT_OS


191 i‚Ä°(
d√±ay_o¬ßu¬¨√∂g
 && 
d√±ay_os√∂√§e¬∞√∂g
 == 0)

193 i‚Ä°(
nms
 >Ô£ø
g_√Åc_ms
)

195 
	`d√±ay_o¬∞imedly
(
nms
 / 
g_√Åc_ms
);

198 
nms
 %Ô£ø
g_√Åc_ms
;

202 
	`d√±ay_us
((
u√∂t32_t
)(
nms
 * 1000));

203 
	}
}

211 
	$HAL_D√±ay
(
u√∂t32_t
 
D√±ay
)

213 
	`d√±ay_ms
(
D√±ay
);

214 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\delay\delay.h

26 #i‚Äöde‚Ä°
__DELAY_H


27 
	#__DELAY_H


	)

29 
	~"SYSTEM/sys/sys.h
"

32 
d√±ay_√∂√¥
(
u√∂t16_t
 
sysÀõk
);

33 
d√±ay_ms
(
u√∂t16_t
 
nms
);

34 
d√±ay_us
(
u√∂t32_t
 
nus
);

36 #i‚Ä°(!
SYS_SUPPORT_OS
)

37 
HAL_D√±ay
(
u√∂t32_t
 
D√±ay
);

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\sys\sys.c

25 
	~"SYSTEM/sys/sys.h
"

34 
	$sys_nvic_¬£t_veÀò‚Äπ_√®b√Ä
(
u√∂t32_t
 
ba¬£addr
, u√∂t32_√†
off¬£t
)

37 
SCB
->
VTOR
 = 
ba¬£addr
 | (
off¬£t
 & (
u√∂t32_t
)0xFFFFFE00);

38 
	}
}

45 
	$sys_wfi_¬£t
()

47 
__ASM
 volatile("wfi");

48 
	}
}

55 
	$sys_√∂tx_di√üb√Ä
()

57 
__ASM
 volatile("cpsid i");

58 
	}
}

65 
	$sys_√∂tx_√≠ab√Ä
()

67 
__ASM
 volatile("cpsie i");

68 
	}
}

76 
	$sys_m¬ß_m‚Ä¢
(
u√∂t32_t
 
addr
)

78 
	`__¬£t_MSP
(
addr
);

79 
	}
}

86 
	$sys_¬∞‚Ñ¢dby
()

88 
	`__HAL_RCC_PWR_CLK_ENABLE
();

89 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

90 
	}
}

97 
	$sys_so¬∑_¬™¬£t
()

99 
	`NVIC_Sy¬∞emRe¬£t
();

100 
	}
}

108 
	$sys_¬∞m32_Àõock_√∂√¥
(
u√∂t32_t
 
‚àÇ¬†
)

110 
HAL_S√®tusTy‚â•Def
 
¬™t
 = 
HAL_ERROR
;

111 
RCC_OscIn√¥Ty‚â•Def
 
rcc_osc_√∂√¥
 = {0};

112 
RCC_ClkIn√¥Ty‚â•Def
 
rcc_Àõk_√∂√¥
 = {0};

114 
rcc_osc_√∂√¥
.
Osc√ª≈ìt‚ÄπTy‚â•
 = 
RCC_OSCILLATORTYPE_HSE
;

115 
rcc_osc_√∂√¥
.
HSES√®√£
 = 
RCC_HSE_ON
;

116 
rcc_osc_√∂√¥
.
HSEP¬™divV√Üue
 = 
RCC_HSE_PREDIV_DIV1
;

117 
rcc_osc_√∂√¥
.
PLL
.
PLLS√®√£
 = 
RCC_PLL_ON
;

118 
rcc_osc_√∂√¥
.
PLL
.
PLLSourÀö
 = 
RCC_PLLSOURCE_HSE
;

119 
rcc_osc_√∂√¥
.
PLL
.
PLLMUL
 = 
‚àÇ¬†
;

120 
¬™t
 = 
	`HAL_RCC_OscC‚ÅÑfig
(&
rcc_osc_√∂√¥
);

122 i‚Ä°(
¬™t
 !Ô£ø
HAL_OK
)

128 
rcc_Àõk_√∂√¥
.
ClockTy‚â•
 = (
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
);

129 
rcc_Àõk_√∂√¥
.
SYSCLKSourÀö
 = 
RCC_SYSCLKSOURCE_PLLCLK
;

130 
rcc_Àõk_√∂√¥
.
AHBCLKDivid√Æ
 = 
RCC_SYSCLK_DIV1
;

131 
rcc_Àõk_√∂√¥
.
APB1CLKDivid√Æ
 = 
RCC_HCLK_DIV2
;

132 
rcc_Àõk_√∂√¥
.
APB2CLKDivid√Æ
 = 
RCC_HCLK_DIV1
;

133 
¬™t
 = 
	`HAL_RCC_ClockC‚ÅÑfig
(&
rcc_Àõk_√∂√¥
, 
FLASH_LATENCY_2
);

135 i‚Ä°(
¬™t
 !Ô£ø
HAL_OK
)

139 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\sys\sys.h

25 #i‚Äöde‚Ä°
__SYS_H


26 
	#__SYS_H


	)

28 
	~"¬∞m32f1xx.h
"

36 
	#SYS_SUPPORT_OS
 0

	)

41 
sys_nvic_¬£t_veÀò‚Äπ_√®b√Ä
(
u√∂t32_t
 
ba¬£addr
, u√∂t32_√†
off¬£t
);

42 
sys_¬∞‚Ñ¢dby
();

43 
sys_so¬∑_¬™¬£t
();

44 
u√∂t8_t
 
sys_Àõock_¬£t
(
u√∂t32_t
 
‚àÇ¬†
);

45 
sys_¬∞m32_Àõock_√∂√¥
(
u√∂t32_t
 
‚àÇ¬†
);

48 
sys_wfi_¬£t
();

49 
sys_√∂tx_di√üb√Ä
();

50 
sys_√∂tx_√≠ab√Ä
();

51 
sys_m¬ß_m‚Ä¢
(
u√∂t32_t
 
addr
);

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\usart\usart.c

27 
	~"SYSTEM/sys/sys.h
"

28 
	~"SYSTEM/u√üœÄ/u√üœÄ.h
"

32 #i‚Ä°
SYS_SUPPORT_OS


33 
	~"os.h
"

41 #i‚Ä°(
__ARMCC_VERSION
 >= 6010050)

42 
__asm
(".global __use_no_semihosting\n\t");

43 
__asm
(".global __ARM_use_no_argv \n\t");

47 #¬•agm¬Æ
imp‚Äπt
(
__u¬£_no_¬£miho¬∞√∂g
)

49 
	s__FILE


51 
	mh‚Ñ¢d√Ä
;

60 
	$_√¢ywrch
(
ch
)

62 
ch
 = ch;

63  
ch
;

64 
	}
}

67 
	$_sys_ex√¥
(
x
)

69 
x
 = x;

70 
	}
}

72 *
	$_sys_comm‚Ñ¢d_¬∞r√∂g
(*
cmd
, 
√Än
)

74  
NULL
;

75 
	}
}

79 
FILE
 
	g__¬∞dout
;

82 
	$√Çutc
(
ch
, 
FILE
 *
f
)

84 (
USART_UX
->
SR
 & 0X40) == 0);

86 
USART_UX
->
DR
 = (
u√∂t8_t
)
ch
;

87  
ch
;

88 
	}
}

92 #i‚Ä°
USART_EN_RX


95 
u√∂t8_t
 
	gg_u√üœÄ_rx_buf
[
USART_REC_LEN
];

102 
u√∂t16_t
 
	gg_u√üœÄ_rx_¬∞a
 = 0;

104 
u√∂t8_t
 
	gg_rx_buf‚Äûr
[
RXBUFFERSIZE
];

106 
UART_H‚Ñ¢d√ÄTy‚â•Def
 
	gg_u¬®t1_h‚Ñ¢d√Ä
;

115 
	$u√üœÄ_√∂√¥
(
u√∂t32_t
 
baud√∏√£
)

118 
g_u¬®t1_h‚Ñ¢d√Ä
.
In¬∞‚Ñ¢Àö
 = 
USART_UX
;

119 
g_u¬®t1_h‚Ñ¢d√Ä
.
In√¥
.
BaudR¬©e
 = 
baud√∏√£
;

120 
g_u¬®t1_h‚Ñ¢d√Ä
.
In√¥
.
W‚ÄπdL√≠gth
 = 
UART_WORDLENGTH_8B
;

121 
g_u¬®t1_h‚Ñ¢d√Ä
.
In√¥
.
St‚Ä∫B√¥s
 = 
UART_STOPBITS_1
;

122 
g_u¬®t1_h‚Ñ¢d√Ä
.
In√¥
.
P¬®√¥y
 = 
UART_PARITY_NONE
;

123 
g_u¬®t1_h‚Ñ¢d√Ä
.
In√¥
.
HwFlowC√©
 = 
UART_HWCONTROL_NONE
;

124 
g_u¬®t1_h‚Ñ¢d√Ä
.
In√¥
.
Mode
 = 
UART_MODE_TX_RX
;

125 
	`HAL_UART_In√¥
(&
g_u¬®t1_h‚Ñ¢d√Ä
);

128 
	`HAL_UART_ReÀöive_IT
(&
g_u¬®t1_h‚Ñ¢d√Ä
, (
u√∂t8_t
 *)
g_rx_buf‚Äûr
, 
RXBUFFERSIZE
);

129 
	}
}

138 
	$HAL_UART_M‚Ä¢In√¥
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

140 
GPIO_In√¥Ty‚â•Def
 
gpio_√∂√¥_¬∞ruÀò
;

142 i‚Ä°(
hu¬®t
->
In¬∞‚Ñ¢Àö
 =Ô£ø
USART_UX
)

144 
	`USART_TX_GPIO_CLK_ENABLE
();

145 
	`USART_RX_GPIO_CLK_ENABLE
();

146 
	`USART_UX_CLK_ENABLE
();

148 
gpio_√∂√¥_¬∞ruÀò
.
P√∂
 = 
USART_TX_GPIO_PIN
;

149 
gpio_√∂√¥_¬∞ruÀò
.
Mode
 = 
GPIO_MODE_AF_PP
;

150 
gpio_√∂√¥_¬∞ruÀò
.
Pu≈í
 = 
GPIO_PULLUP
;

151 
gpio_√∂√¥_¬∞ruÀò
.
S‚â•ed
 = 
GPIO_SPEED_FREQ_HIGH
;

152 
	`HAL_GPIO_In√¥
(
USART_TX_GPIO_PORT
, &
gpio_√∂√¥_¬∞ruÀò
);

154 
gpio_√∂√¥_¬∞ruÀò
.
P√∂
 = 
USART_RX_GPIO_PIN
;

155 
gpio_√∂√¥_¬∞ruÀò
.
Mode
 = 
GPIO_MODE_AF_INPUT
;

156 
	`HAL_GPIO_In√¥
(
USART_RX_GPIO_PORT
, &
gpio_√∂√¥_¬∞ruÀò
);

158 #i‚Ä°
USART_EN_RX


159 
	`HAL_NVIC_E¬´b√ÄIRQ
(
USART_UX_IRQn
);

160 
	`HAL_NVIC_S√´Pri‚Äπ√¥y
(
USART_UX_IRQn
, 3, 3);

163 
	}
}

171 
	$HAL_UART_RxC‚àÇtC√Ülback
(
UART_H‚Ñ¢d√ÄTy‚â•Def
 *
hu¬®t
)

173 i‚Ä°(
hu¬®t
->
In¬∞‚Ñ¢Àö
 =Ô£ø
USART_UX
)

175 i‚Ä°((
g_u√üœÄ_rx_¬∞a
 & 0x8000) == 0)

177 i‚Ä°(
g_u√üœÄ_rx_¬∞a
 & 0x4000)

179 i‚Ä°(
g_rx_buf‚Äûr
[0] != 0x0a)

181 
g_u√üœÄ_rx_¬∞a
 = 0;

185 
g_u√üœÄ_rx_¬∞a
 |= 0x8000;

190 i‚Ä°(
g_rx_buf‚Äûr
[0] == 0x0d)

191 
g_u√üœÄ_rx_¬∞a
 |= 0x4000;

194 
g_u√üœÄ_rx_buf
[
g_u√üœÄ_rx_¬∞a
 & 0X3FFF] = 
g_rx_buf‚Äûr
[0];

195 
g_u√üœÄ_rx_¬∞a
++;

197 i‚Ä°(
g_u√üœÄ_rx_¬∞a
 > (
USART_REC_LEN
 - 1))

199 
g_u√üœÄ_rx_¬∞a
 = 0;

205 
	`HAL_UART_ReÀöive_IT
(&
g_u¬®t1_h‚Ñ¢d√Ä
, (
u√∂t8_t
 *)
g_rx_buf‚Äûr
, 
RXBUFFERSIZE
);

207 
	}
}

214 
	$USART_UX_IRQH‚Ñ¢d√Är
()

216 #i‚Ä°
SYS_SUPPORT_OS


217 
	`OSI¬°E¬°√Æ
();

220 
	`HAL_UART_IRQH‚Ñ¢d√Är
(&
g_u¬®t1_h‚Ñ¢d√Ä
);

222 #i‚Ä°
SYS_SUPPORT_OS


223 
	`OSI¬°Ex√¥
();

226 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\usart\usart.h

27 #i‚Äöde‚Ä°
__USART_H


28 
	#__USART_H


	)

30 
	~"¬∞dio.h
"

31 
	~"SYSTEM/sys/sys.h
"

39 
	#USART_TX_GPIO_PORT
 
GPIOA


	)

40 
	#USART_TX_GPIO_PIN
 
GPIO_PIN_9


	)

41 
	#USART_TX_GPIO_CLK_ENABLE
(√ãdo{ 
	`__HAL_RCC_GPIOA_CLK_ENABLE
(); }0√ã

	)

43 
	#USART_RX_GPIO_PORT
 
GPIOA


	)

44 
	#USART_RX_GPIO_PIN
 
GPIO_PIN_10


	)

45 
	#USART_RX_GPIO_CLK_ENABLE
(√ãdo{ 
	`__HAL_RCC_GPIOA_CLK_ENABLE
(); }0√ã

	)

47 
	#USART_UX
 
USART1


	)

48 
	#USART_UX_IRQn
 
USART1_IRQn


	)

49 
	#USART_UX_IRQH‚Ñ¢d√Är
 
USART1_IRQH‚Ñ¢d√Är


	)

50 
	#USART_UX_CLK_ENABLE
(√ãdo{ 
	`__HAL_RCC_USART1_CLK_ENABLE
(); }0√ã

	)

54 
	#USART_REC_LEN
 200

	)

55 
	#USART_EN_RX
 1

	)

56 
	#RXBUFFERSIZE
 1

	)

58 
UART_H‚Ñ¢d√ÄTy‚â•Def
 
g_u¬®t1_h‚Ñ¢d√Ä
;

60 
u√∂t8_t
 
g_u√üœÄ_rx_buf
[
USART_REC_LEN
];

61 
u√∂t16_t
 
g_u√üœÄ_rx_¬∞a
;

62 
u√∂t8_t
 
g_rx_buf‚Äûr
[
RXBUFFERSIZE
];

65 
u√üœÄ_√∂√¥
(
u√∂t32_t
 
bound
);

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\main.c

22 
	~"SYSTEM/sys/sys.h
"

23 
	~"SYSTEM/d√±ay/d√±ay.h
"

24 
	~"SYSTEM/u√üœÄ/u√üœÄ.h
"

25 
	~"BSP/LED/√Äd.h
"

26 
	~"BSP/TIMER/gtim.h
"

28 
TIM_H‚Ñ¢d√ÄTy‚â•Def
 
g_timx_pwm_cjy_h‚Ñ¢d√Ä
;

29 
	#ASCENT
 1

	)

30 
	#DECENT
 0

	)

32 
	$ma√∂
()

34 
u√∂t16_t
 
√Äd_pwm_v√Ü
 = 0;

35 
u√∂t8_t
 
d√∫
 = 0;

36 
	`HAL_In√¥
();

37 
	`sys_¬∞m32_Àõock_√∂√¥
(
RCC_PLL_MUL9
);

38 
	`d√±ay_√∂√¥
(72);

39 
	`√Äd_√∂√¥
();

40 
	`gtim_timx_pwm_chy_√∂√¥
(500, 72);

43 
	`d√±ay_ms
(10);

45 
√Äd_pwm_v√Ü
 = 
d√∫
 ? --led_pwm_val : ++led_pwm_val;

47 if(
√Äd_pwm_v√Ü
 > 300√ã
d√∫
 = 1;

48 if(
√Äd_pwm_v√Ü
 =Ô£ø0√ã
d√∫
 = 0;

50 
	`__HAL_TIM_SET_COMPARE
(&
g_timx_pwm_cjy_h‚Ñ¢d√Ä
, 
TIM_CHANNEL_2
, 
√Äd_pwm_v√Ü
);

52 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\stm32f1xx_hal_conf.h

23 #i‚Äöde‚Ä°
__STM32F1xx_HAL_CONF_H


24 
	#__STM32F1xx_HAL_CONF_H


	)

26 #ifde‚Ä°
__Àùlu‚Ä¢lus


37 
	#HAL_MODULE_ENABLED


	)

38 
	#HAL_ADC_MODULE_ENABLED


	)

39 
	#HAL_CAN_MODULE_ENABLED


	)

41 
	#HAL_CEC_MODULE_ENABLED


	)

42 
	#HAL_CORTEX_MODULE_ENABLED


	)

43 
	#HAL_CRC_MODULE_ENABLED


	)

44 
	#HAL_DAC_MODULE_ENABLED


	)

45 
	#HAL_DMA_MODULE_ENABLED


	)

46 
	#HAL_ETH_MODULE_ENABLED


	)

47 
	#HAL_EXTI_MODULE_ENABLED


	)

48 
	#HAL_FLASH_MODULE_ENABLED


	)

49 
	#HAL_GPIO_MODULE_ENABLED


	)

50 
	#HAL_HCD_MODULE_ENABLED


	)

51 
	#HAL_I2C_MODULE_ENABLED


	)

52 
	#HAL_I2S_MODULE_ENABLED


	)

53 
	#HAL_IRDA_MODULE_ENABLED


	)

54 
	#HAL_IWDG_MODULE_ENABLED


	)

55 
	#HAL_NAND_MODULE_ENABLED


	)

56 
	#HAL_NOR_MODULE_ENABLED


	)

57 
	#HAL_PCCARD_MODULE_ENABLED


	)

58 
	#HAL_PCD_MODULE_ENABLED


	)

59 
	#HAL_PWR_MODULE_ENABLED


	)

60 
	#HAL_RCC_MODULE_ENABLED


	)

61 
	#HAL_RTC_MODULE_ENABLED


	)

62 
	#HAL_SD_MODULE_ENABLED


	)

63 
	#HAL_SMARTCARD_MODULE_ENABLED


	)

64 
	#HAL_SPI_MODULE_ENABLED


	)

65 
	#HAL_SRAM_MODULE_ENABLED


	)

66 
	#HAL_TIM_MODULE_ENABLED


	)

67 
	#HAL_UART_MODULE_ENABLED


	)

68 
	#HAL_USART_MODULE_ENABLED


	)

69 
	#HAL_WWDG_MODULE_ENABLED


	)

70 
	#HAL_MMC_MODULE_ENABLED


	)

78 #i‚Ä°!
def√∂ed
 (
HSE_VALUE
)

79 #i‚Ä°
def√∂ed
(
USE_STM3210C_EVAL
)

80 
	#HSE_VALUE
 25000000U

	)

82 
	#HSE_VALUE
 8000000U

	)

86 #i‚Ä°!
def√∂ed
 (
HSE_STARTUP_TIMEOUT
)

87 
	#HSE_STARTUP_TIMEOUT
 100U

	)

95 #i‚Ä°!
def√∂ed
 (
HSI_VALUE
)

96 
	#HSI_VALUE
 8000000U

	)

102 #i‚Ä°!
def√∂ed
 (
LSI_VALUE
)

103 
	#LSI_VALUE
 40000U

	)

105 
The
 
¬™√Ü
 
v√Üue
 
may
 
v¬®y
 
d√Ø√≠d√∂g
 
‚ÅÑ
 
the
 
v¬®√ºti‚ÅÑs


106 
√∂
 
vÔ¨Å√®ge
 
‚Ñ¢d
 
√£m‚â•√∏tu¬™
. */

111 #i‚Ä°!
def√∂ed
 (
LSE_VALUE
)

112 
	#LSE_VALUE
 32768U

	)

115 #i‚Ä°!
def√∂ed
 (
LSE_STARTUP_TIMEOUT
)

116 
	#LSE_STARTUP_TIMEOUT
 5000U

	)

126 
	#VDD_VALUE
 3300U

	)

127 
	#TICK_INT_PRIORITY
 0x0FU

	)

128 
	#USE_RTOS
 0U

	)

129 
	#PREFETCH_ENABLE
 1U

	)

131 
	#USE_HAL_ADC_REGISTER_CALLBACKS
 0U

	)

132 
	#USE_HAL_CAN_REGISTER_CALLBACKS
 0U

	)

133 
	#USE_HAL_CEC_REGISTER_CALLBACKS
 0U

	)

134 
	#USE_HAL_DAC_REGISTER_CALLBACKS
 0U

	)

135 
	#USE_HAL_ETH_REGISTER_CALLBACKS
 0U

	)

136 
	#USE_HAL_HCD_REGISTER_CALLBACKS
 0U

	)

137 
	#USE_HAL_I2C_REGISTER_CALLBACKS
 0U

	)

138 
	#USE_HAL_I2S_REGISTER_CALLBACKS
 0U

	)

139 
	#USE_HAL_MMC_REGISTER_CALLBACKS
 0U

	)

140 
	#USE_HAL_NAND_REGISTER_CALLBACKS
 0U

	)

141 
	#USE_HAL_NOR_REGISTER_CALLBACKS
 0U

	)

142 
	#USE_HAL_PCCARD_REGISTER_CALLBACKS
 0U

	)

143 
	#USE_HAL_PCD_REGISTER_CALLBACKS
 0U

	)

144 
	#USE_HAL_RTC_REGISTER_CALLBACKS
 0U

	)

145 
	#USE_HAL_SD_REGISTER_CALLBACKS
 0U

	)

146 
	#USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 0U

	)

147 
	#USE_HAL_IRDA_REGISTER_CALLBACKS
 0U

	)

148 
	#USE_HAL_SRAM_REGISTER_CALLBACKS
 0U

	)

149 
	#USE_HAL_SPI_REGISTER_CALLBACKS
 0U

	)

150 
	#USE_HAL_TIM_REGISTER_CALLBACKS
 0U

	)

151 
	#USE_HAL_UART_REGISTER_CALLBACKS
 0U

	)

152 
	#USE_HAL_USART_REGISTER_CALLBACKS
 0U

	)

153 
	#USE_HAL_WWDG_REGISTER_CALLBACKS
 0U

	)

167 
	#MAC_ADDR0
 2U

	)

168 
	#MAC_ADDR1
 0U

	)

169 
	#MAC_ADDR2
 0U

	)

170 
	#MAC_ADDR3
 0U

	)

171 
	#MAC_ADDR4
 0U

	)

172 
	#MAC_ADDR5
 0U

	)

175 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

176 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

177 
	#ETH_RXBUFNB
 8U

	)

178 
	#ETH_TXBUFNB
 4U

	)

183 
	#DP83848_PHY_ADDRESS
 0x01U

	)

185 
	#PHY_RESET_DELAY
 0x000000FFU

	)

187 
	#PHY_CONFIG_DELAY
 0x00000FFFU

	)

189 
	#PHY_READ_TO
 0x0000FFFFU

	)

190 
	#PHY_WRITE_TO
 0x0000FFFFU

	)

194 
	#PHY_BCR
 ((
u√∂t16_t
)0x0000√ã

	)

195 
	#PHY_BSR
 ((
u√∂t16_t
)0x0001√ã

	)

197 
	#PHY_RESET
 ((
u√∂t16_t
)0x8000√ã

	)

198 
	#PHY_LOOPBACK
 ((
u√∂t16_t
)0x4000√ã

	)

199 
	#PHY_FULLDUPLEX_100M
 ((
u√∂t16_t
)0x2100√ã

	)

200 
	#PHY_HALFDUPLEX_100M
 ((
u√∂t16_t
)0x2000√ã

	)

201 
	#PHY_FULLDUPLEX_10M
 ((
u√∂t16_t
)0x0100√ã

	)

202 
	#PHY_HALFDUPLEX_10M
 ((
u√∂t16_t
)0x0000√ã

	)

203 
	#PHY_AUTONEGOTIATION
 ((
u√∂t16_t
)0x1000√ã

	)

204 
	#PHY_RESTART_AUTONEGOTIATION
 ((
u√∂t16_t
)0x0200√ã

	)

205 
	#PHY_POWERDOWN
 ((
u√∂t16_t
)0x0800√ã

	)

206 
	#PHY_ISOLATE
 ((
u√∂t16_t
)0x0400√ã

	)

208 
	#PHY_AUTONEGO_COMPLETE
 ((
u√∂t16_t
)0x0020√ã

	)

209 
	#PHY_LINKED_STATUS
 ((
u√∂t16_t
)0x0004√ã

	)

210 
	#PHY_JABBER_DETECTION
 ((
u√∂t16_t
)0x0002√ã

	)

214 
	#PHY_SR
 ((
u√∂t16_t
)0x0010√ã

	)

215 
	#PHY_MICR
 ((
u√∂t16_t
)0x0011√ã

	)

216 
	#PHY_MISR
 ((
u√∂t16_t
)0x0012√ã

	)

218 
	#PHY_LINK_STATUS
 ((
u√∂t16_t
)0x0001√ã

	)

219 
	#PHY_SPEED_STATUS
 ((
u√∂t16_t
)0x0002√ã

	)

220 
	#PHY_DUPLEX_STATUS
 ((
u√∂t16_t
)0x0004√ã

	)

222 
	#PHY_MICR_INT_EN
 ((
u√∂t16_t
)0x0002√ã

	)

223 
	#PHY_MICR_INT_OE
 ((
u√∂t16_t
)0x0001√ã

	)

225 
	#PHY_MISR_LINK_INT_EN
 ((
u√∂t16_t
)0x0020√ã

	)

226 
	#PHY_LINK_INTERRUPT
 ((
u√∂t16_t
)0x2000√ã

	)

235 
	#USE_SPI_CRC
 1U

	)

242 #ifde‚Ä°
HAL_RCC_MODULE_ENABLED


243 
	~"¬∞m32f1xx_h√Ü_rcc.h
"

246 #ifde‚Ä°
HAL_GPIO_MODULE_ENABLED


247 
	~"¬∞m32f1xx_h√Ü_gpio.h
"

250 #ifde‚Ä°
HAL_EXTI_MODULE_ENABLED


251 
	~"¬∞m32f1xx_h√Ü_exti.h
"

254 #ifde‚Ä°
HAL_DMA_MODULE_ENABLED


255 
	~"¬∞m32f1xx_h√Ü_dma.h
"

258 #ifde‚Ä°
HAL_ETH_MODULE_ENABLED


259 
	~"¬∞m32f1xx_h√Ü_√´h.h
"

262 #ifde‚Ä°
HAL_CAN_MODULE_ENABLED


263 
	~"¬∞m32f1xx_h√Ü_Àán.h
"

266 #ifde‚Ä°
HAL_CAN_LEGACY_MODULE_ENABLED


267 
	~"Legacy/¬∞m32f1xx_h√Ü_Àán_√Ägacy.h
"

270 #ifde‚Ä°
HAL_CEC_MODULE_ENABLED


271 
	~"¬∞m32f1xx_h√Ü_Àöc.h
"

274 #ifde‚Ä°
HAL_CORTEX_MODULE_ENABLED


275 
	~"¬∞m32f1xx_h√Ü_c‚Äπ√£x.h
"

278 #ifde‚Ä°
HAL_ADC_MODULE_ENABLED


279 
	~"¬∞m32f1xx_h√Ü_adc.h
"

282 #ifde‚Ä°
HAL_CRC_MODULE_ENABLED


283 
	~"¬∞m32f1xx_h√Ü_¬∏c.h
"

286 #ifde‚Ä°
HAL_DAC_MODULE_ENABLED


287 
	~"¬∞m32f1xx_h√Ü_dac.h
"

290 #ifde‚Ä°
HAL_FLASH_MODULE_ENABLED


291 
	~"¬∞m32f1xx_h√Ü_√äash.h
"

294 #ifde‚Ä°
HAL_SRAM_MODULE_ENABLED


295 
	~"¬∞m32f1xx_h√Ü_¬ßam.h
"

298 #ifde‚Ä°
HAL_NOR_MODULE_ENABLED


299 
	~"¬∞m32f1xx_h√Ü_n‚Äπ.h
"

302 #ifde‚Ä°
HAL_I2C_MODULE_ENABLED


303 
	~"¬∞m32f1xx_h√Ü_i2c.h
"

306 #ifde‚Ä°
HAL_I2S_MODULE_ENABLED


307 
	~"¬∞m32f1xx_h√Ü_i2s.h
"

310 #ifde‚Ä°
HAL_IWDG_MODULE_ENABLED


311 
	~"¬∞m32f1xx_h√Ü_iwdg.h
"

314 #ifde‚Ä°
HAL_PWR_MODULE_ENABLED


315 
	~"¬∞m32f1xx_h√Ü_pwr.h
"

318 #ifde‚Ä°
HAL_RTC_MODULE_ENABLED


319 
	~"¬∞m32f1xx_h√Ü_œÄc.h
"

322 #ifde‚Ä°
HAL_PCCARD_MODULE_ENABLED


323 
	~"¬∞m32f1xx_h√Ü_pcÀárd.h
"

326 #ifde‚Ä°
HAL_SD_MODULE_ENABLED


327 
	~"¬∞m32f1xx_h√Ü_sd.h
"

330 #ifde‚Ä°
HAL_NAND_MODULE_ENABLED


331 
	~"¬∞m32f1xx_h√Ü_¬´nd.h
"

334 #ifde‚Ä°
HAL_SPI_MODULE_ENABLED


335 
	~"¬∞m32f1xx_h√Ü_‚Ä¢i.h
"

338 #ifde‚Ä°
HAL_TIM_MODULE_ENABLED


339 
	~"¬∞m32f1xx_h√Ü_tim.h
"

342 #ifde‚Ä°
HAL_UART_MODULE_ENABLED


343 
	~"¬∞m32f1xx_h√Ü_u¬®t.h
"

346 #ifde‚Ä°
HAL_USART_MODULE_ENABLED


347 
	~"¬∞m32f1xx_h√Ü_u√üœÄ.h
"

350 #ifde‚Ä°
HAL_IRDA_MODULE_ENABLED


351 
	~"¬∞m32f1xx_h√Ü_√∫da.h
"

354 #ifde‚Ä°
HAL_SMARTCARD_MODULE_ENABLED


355 
	~"¬∞m32f1xx_h√Ü_sm¬®tÀárd.h
"

358 #ifde‚Ä°
HAL_WWDG_MODULE_ENABLED


359 
	~"¬∞m32f1xx_h√Ü_wwdg.h
"

362 #ifde‚Ä°
HAL_PCD_MODULE_ENABLED


363 
	~"¬∞m32f1xx_h√Ü_pcd.h
"

366 #ifde‚Ä°
HAL_HCD_MODULE_ENABLED


367 
	~"¬∞m32f1xx_h√Ü_hcd.h
"

370 #ifde‚Ä°
HAL_MMC_MODULE_ENABLED


371 
	~"¬∞m32f1xx_h√Ü_mmc.h
"

375 #ifde‚Ä° 
USE_FULL_ASSERT


384 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(‚Äùx¬•√ã? ()0U : 
	`as¬£œÄ_√Å√ªed
((
u√∂t8_t
 *)
__FILE__
, 
__LINE__
))

	)

386 
as¬£œÄ_√Å√ªed
(
u√∂t8_t
* 
f√ªe
, 
u√∂t32_t
 
l√∂e
);

388 
	#as¬£œÄ_‚àë√∏m
(
ex¬•
√ã(()0U)

	)

392 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\stm32f1xx_it.c

23 
	~"¬∞m32f1xx_h√Ü.h
"

24 
	~"¬∞m32f1xx_√¥.h
"

25 
	~"SYSTEM/sys/sys.h
"

52 
	$NMI_H‚Ñ¢d√Är
()

54 
	}
}

61 
	$H¬®dFau‚Ä¶_H‚Ñ¢d√Är
()

67 
	}
}

74 
	$MemM‚Ñ¢age_H‚Ñ¢d√Är
()

80 
	}
}

87 
	$BusFau‚Ä¶_H‚Ñ¢d√Är
()

93 
	}
}

100 
	$U√ügeFau‚Ä¶_H‚Ñ¢d√Är
()

106 
	}
}

113 
	$SVC_H‚Ñ¢d√Är
()

115 
	}
}

122 
	$DebugM‚ÅÑ_H‚Ñ¢d√Är
()

124 
	}
}

131 
	$P√≠dSV_H‚Ñ¢d√Är
()

133 
	}
}

140 
	$SysTick_H‚Ñ¢d√Är
()

142 
	`HAL_IncTick
();

143 
	}
}

	@C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\stm32f1xx_it.h

21 #i‚Äöde‚Ä°
__STM32F1xx_IT_H


22 
	#__STM32F1xx_IT_H


	)

24 #ifde‚Ä°
__Àùlu‚Ä¢lus


34 
NMI_H‚Ñ¢d√Är
();

35 
H¬®dFau‚Ä¶_H‚Ñ¢d√Är
();

36 
MemM‚Ñ¢age_H‚Ñ¢d√Är
();

37 
BusFau‚Ä¶_H‚Ñ¢d√Är
();

38 
U√ügeFau‚Ä¶_H‚Ñ¢d√Är
();

39 
SVC_H‚Ñ¢d√Är
();

40 
DebugM‚ÅÑ_H‚Ñ¢d√Är
();

41 
P√≠dSV_H‚Ñ¢d√Är
();

42 
SysTick_H‚Ñ¢d√Är
();

44 #ifde‚Ä°
__Àùlu‚Ä¢lus


	@
1
.
0
158
21301
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\KEY\key.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\KEY\key.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\LED\led.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\LED\led.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\TIMER\gtim.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\BSP\TIMER\gtim.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f103xe.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f1xx.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Include\system_stm32f1xx.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Device\ST\STM32F1xx\Source\Templates\system_stm32f1xx.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_armcc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_armclang.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_compiler.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\cmsis_version.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\core_cm3.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\CMSIS\Include\mpu_armv7.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32_hal_legacy.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32f1xx_hal_can_ex_legacy.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32f1xx_hal_can_legacy.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32_assert_template.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_adc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_adc_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_can.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cec.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_conf_template.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_crc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dac.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dac_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_eth.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_exti.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_hcd.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_i2c.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_i2s.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_irda.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_iwdg.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_mmc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_nand.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_nor.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pccard.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pwr.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_smartcard.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sram.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim_ex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_uart.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_usart.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_wwdg.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_adc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_bus.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_cortex.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_crc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_dac.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_dma.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_exti.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_gpio.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_i2c.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_iwdg.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_pwr.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_rcc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_rtc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_sdmmc.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_spi.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_system.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_tim.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usart.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usb.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_utils.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_wwdg.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\Legacy\stm32f1xx_hal_can.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_adc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_adc_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_can.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cec.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_crc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dac.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dac_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_eth.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_exti.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_hcd.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_i2c.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_i2s.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_irda.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_iwdg.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_mmc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_msp_template.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_nand.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_nor.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pccard.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pwr.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_sd.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_smartcard.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_spi.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_sram.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim_ex.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_timebase_rtc_alarm_template.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_timebase_tim_template.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_uart.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_usart.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_wwdg.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_adc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_crc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_dac.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_dma.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_exti.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_fsmc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_gpio.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_i2c.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_pwr.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_rcc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_rtc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_sdmmc.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_spi.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_tim.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_usart.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_usb.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_utils.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\delay\delay.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\delay\delay.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\sys\sys.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\sys\sys.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\usart\usart.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\Drivers\SYSTEM\usart\usart.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\main.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\stm32f1xx_hal_conf.h
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\stm32f1xx_it.c
C:\Users\name\Documents\Workspace\keildata\STM32\ALIENTEK\6.Timer_Gener_pulse_count\User\stm32f1xx_it.h
